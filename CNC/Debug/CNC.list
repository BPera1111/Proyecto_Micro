
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e760  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001380  0800e870  0800e870  0000f870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbf0  0800fbf0  00011350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fbf0  0800fbf0  00010bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbf8  0800fbf8  00011350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbf8  0800fbf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fbfc  0800fbfc  00010bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800fc00  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000385c  20000350  0800ff50  00011350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003bac  0800ff50  00011bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eba4  00000000  00000000  00011379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003091  00000000  00000000  0001ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00022fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ab  00000000  00000000  00023cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acf7  00000000  00000000  0002466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011430  00000000  00000000  0003f362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a154  00000000  00000000  00050792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da8e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000488c  00000000  00000000  000da92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000df1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e858 	.word	0x0800e858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800e858 	.word	0x0800e858

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d86:	2afd      	cmp	r2, #253	@ 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	@ 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	@ 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	@ 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2uiz>:
 8001138:	0042      	lsls	r2, r0, #1
 800113a:	d20e      	bcs.n	800115a <__aeabi_f2uiz+0x22>
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001140:	d30b      	bcc.n	800115a <__aeabi_f2uiz+0x22>
 8001142:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d409      	bmi.n	8001160 <__aeabi_f2uiz+0x28>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001154:	fa23 f002 	lsr.w	r0, r3, r2
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr
 8001160:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001164:	d101      	bne.n	800116a <__aeabi_f2uiz+0x32>
 8001166:	0242      	lsls	r2, r0, #9
 8001168:	d102      	bne.n	8001170 <__aeabi_f2uiz+0x38>
 800116a:	f04f 30ff 	mov.w	r0, #4294967295
 800116e:	4770      	bx	lr
 8001170:	f04f 0000 	mov.w	r0, #0
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <__aeabi_d2lz>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	2200      	movs	r2, #0
 800117c:	2300      	movs	r3, #0
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
 8001182:	f7ff fc1b 	bl	80009bc <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x1c>
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4620      	mov	r0, r4
 8001196:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <__aeabi_d2ulz+0x34>)
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff f991 	bl	80004d8 <__aeabi_dmul>
 80011b6:	f7ff fc3f 	bl	8000a38 <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff f912 	bl	80003e4 <__aeabi_ui2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <__aeabi_d2ulz+0x38>)
 80011c4:	f7ff f988 	bl	80004d8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7fe ffca 	bl	8000168 <__aeabi_dsub>
 80011d4:	f7ff fc30 	bl	8000a38 <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <gc_init>:

/**
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 80011e8:	2209      	movs	r2, #9
 80011ea:	2100      	movs	r1, #0
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <gc_init+0x48>)
 80011ee:	f00b f994 	bl	800c51a <memset>
    gc_state_modal.motion = MOTION_MODE_SEEK;       // G0 por defecto
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <gc_init+0x48>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
    gc_state_modal.coord_select = 0;                // G54 por defecto 
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <gc_init+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	705a      	strb	r2, [r3, #1]
    gc_state_modal.plane_select = 0;                // G17 (XY plane) por defecto
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <gc_init+0x48>)
 8001200:	2200      	movs	r2, #0
 8001202:	709a      	strb	r2, [r3, #2]
    gc_state_modal.units = 0;                       // G21 (mm) por defecto
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <gc_init+0x48>)
 8001206:	2200      	movs	r2, #0
 8001208:	70da      	strb	r2, [r3, #3]
    gc_state_modal.distance = 0;                    // G90 (absoluto) por defecto
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <gc_init+0x48>)
 800120c:	2200      	movs	r2, #0
 800120e:	711a      	strb	r2, [r3, #4]
    gc_state_modal.feed_rate = 0;                   // G94 por defecto
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <gc_init+0x48>)
 8001212:	2200      	movs	r2, #0
 8001214:	715a      	strb	r2, [r3, #5]
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <gc_init+0x48>)
 8001218:	2200      	movs	r2, #0
 800121a:	719a      	strb	r2, [r3, #6]
    gc_state_modal.coolant = 0;                     // M9 (coolant off) por defecto
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <gc_init+0x48>)
 800121e:	2200      	movs	r2, #0
 8001220:	71da      	strb	r2, [r3, #7]
    gc_state_modal.program_flow = 0;                // Normal execution
 8001222:	4b02      	ldr	r3, [pc, #8]	@ (800122c <gc_init+0x48>)
 8001224:	2200      	movs	r2, #0
 8001226:	721a      	strb	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000039c 	.word	0x2000039c

08001230 <gc_clear_block>:

/**
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001234:	2230      	movs	r2, #48	@ 0x30
 8001236:	2100      	movs	r1, #0
 8001238:	481c      	ldr	r0, [pc, #112]	@ (80012ac <gc_clear_block+0x7c>)
 800123a:	f00b f96e 	bl	800c51a <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <gc_clear_block+0x7c>)
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <gc_clear_block+0x80>)
 8001242:	ca07      	ldmia	r2, {r0, r1, r2}
 8001244:	c303      	stmia	r3!, {r0, r1}
 8001246:	701a      	strb	r2, [r3, #0]
    
    // Inicializar valores como indefinidos
    gc_block.values.x = NAN;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <gc_clear_block+0x7c>)
 800124a:	4a1a      	ldr	r2, [pc, #104]	@ (80012b4 <gc_clear_block+0x84>)
 800124c:	60da      	str	r2, [r3, #12]
    gc_block.values.y = NAN;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <gc_clear_block+0x7c>)
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <gc_clear_block+0x84>)
 8001252:	611a      	str	r2, [r3, #16]
    gc_block.values.z = NAN;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <gc_clear_block+0x7c>)
 8001256:	4a17      	ldr	r2, [pc, #92]	@ (80012b4 <gc_clear_block+0x84>)
 8001258:	615a      	str	r2, [r3, #20]
    gc_block.values.f = NAN;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <gc_clear_block+0x7c>)
 800125c:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <gc_clear_block+0x84>)
 800125e:	619a      	str	r2, [r3, #24]
    gc_block.values.s = NAN;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <gc_clear_block+0x7c>)
 8001262:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <gc_clear_block+0x84>)
 8001264:	61da      	str	r2, [r3, #28]
    gc_block.values.n = -1;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <gc_clear_block+0x7c>)
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	621a      	str	r2, [r3, #32]
    gc_block.values.p = 0;
 800126e:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <gc_clear_block+0x7c>)
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    gc_block.values.l = 0;
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <gc_clear_block+0x7c>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    // Flags de definición
    gc_block.values.x_defined = false;
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <gc_clear_block+0x7c>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    gc_block.values.y_defined = false;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <gc_clear_block+0x7c>)
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    gc_block.values.z_defined = false;
 800128e:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <gc_clear_block+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    gc_block.values.f_defined = false;
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <gc_clear_block+0x7c>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    gc_block.values.s_defined = false;
 800129e:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <gc_clear_block+0x7c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000036c 	.word	0x2000036c
 80012b0:	2000039c 	.word	0x2000039c
 80012b4:	7fc00000 	.word	0x7fc00000

080012b8 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
    char *ptr = line + *char_counter;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 80012d0:	e008      	b.n	80012e4 <read_float+0x2c>
        ptr++; 
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	701a      	strb	r2, [r3, #0]
    while ((c = *ptr) == ' ' || c == '\t') { 
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	767b      	strb	r3, [r7, #25]
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	2b20      	cmp	r3, #32
 80012ee:	d0f0      	beq.n	80012d2 <read_float+0x1a>
 80012f0:	7e7b      	ldrb	r3, [r7, #25]
 80012f2:	2b09      	cmp	r3, #9
 80012f4:	d0ed      	beq.n	80012d2 <read_float+0x1a>
    }
    
    if (c == 0) return false;  // Fin de línea
 80012f6:	7e7b      	ldrb	r3, [r7, #25]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <read_float+0x48>
 80012fc:	2300      	movs	r3, #0
 80012fe:	e04d      	b.n	800139c <read_float+0xe4>
    
    char *start = ptr;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	617b      	str	r3, [r7, #20]
    
    // Leer número (incluyendo signo y punto decimal)
    if (c == '+' || c == '-') { 
 8001304:	7e7b      	ldrb	r3, [r7, #25]
 8001306:	2b2b      	cmp	r3, #43	@ 0x2b
 8001308:	d002      	beq.n	8001310 <read_float+0x58>
 800130a:	7e7b      	ldrb	r3, [r7, #25]
 800130c:	2b2d      	cmp	r3, #45	@ 0x2d
 800130e:	d108      	bne.n	8001322 <read_float+0x6a>
        ptr++; 
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3301      	adds	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	701a      	strb	r2, [r3, #0]
    }
    
    bool found_decimal = false;
 8001322:	2300      	movs	r3, #0
 8001324:	76fb      	strb	r3, [r7, #27]
    bool found_digit = false;
 8001326:	2300      	movs	r3, #0
 8001328:	76bb      	strb	r3, [r7, #26]
    
    while ((c = *ptr) != 0) {
 800132a:	e01c      	b.n	8001366 <read_float+0xae>
        if (c >= '0' && c <= '9') {
 800132c:	7e7b      	ldrb	r3, [r7, #25]
 800132e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001330:	d905      	bls.n	800133e <read_float+0x86>
 8001332:	7e7b      	ldrb	r3, [r7, #25]
 8001334:	2b39      	cmp	r3, #57	@ 0x39
 8001336:	d802      	bhi.n	800133e <read_float+0x86>
            found_digit = true;
 8001338:	2301      	movs	r3, #1
 800133a:	76bb      	strb	r3, [r7, #26]
 800133c:	e00a      	b.n	8001354 <read_float+0x9c>
        } else if (c == '.' && !found_decimal) {
 800133e:	7e7b      	ldrb	r3, [r7, #25]
 8001340:	2b2e      	cmp	r3, #46	@ 0x2e
 8001342:	d116      	bne.n	8001372 <read_float+0xba>
 8001344:	7efb      	ldrb	r3, [r7, #27]
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d010      	beq.n	8001372 <read_float+0xba>
            found_decimal = true;
 8001350:	2301      	movs	r3, #1
 8001352:	76fb      	strb	r3, [r7, #27]
        } else {
            break;  // Caracter no numérico
        }
        ptr++;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
        (*char_counter)++;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	701a      	strb	r2, [r3, #0]
    while ((c = *ptr) != 0) {
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	767b      	strb	r3, [r7, #25]
 800136c:	7e7b      	ldrb	r3, [r7, #25]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1dc      	bne.n	800132c <read_float+0x74>
    }
    
    if (!found_digit) return false;
 8001372:	7ebb      	ldrb	r3, [r7, #26]
 8001374:	f083 0301 	eor.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <read_float+0xca>
 800137e:	2300      	movs	r3, #0
 8001380:	e00c      	b.n	800139c <read_float+0xe4>
    
    *float_ptr = atof(start);
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f00a f964 	bl	800b650 <atof>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb72 	bl	8000a78 <__aeabi_d2f>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	601a      	str	r2, [r3, #0]
    return true;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    uint8_t char_counter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	747b      	strb	r3, [r7, #17]
    unsigned char letter;
    float value;
    uint8_t int_value = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	74bb      	strb	r3, [r7, #18]
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
 80013b4:	2300      	movs	r3, #0
 80013b6:	82bb      	strh	r3, [r7, #20]
    uint8_t word_bit = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	74fb      	strb	r3, [r7, #19]
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 80013bc:	f7ff ff38 	bl	8001230 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 80013c0:	e291      	b.n	80018e6 <gc_parse_line+0x542>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 80013c2:	7c7b      	ldrb	r3, [r7, #17]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	747b      	strb	r3, [r7, #17]
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 80013ca:	7c7b      	ldrb	r3, [r7, #17]
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d0f4      	beq.n	80013c2 <gc_parse_line+0x1e>
 80013d8:	7c7b      	ldrb	r3, [r7, #17]
 80013da:	461a      	mov	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	d0ed      	beq.n	80013c2 <gc_parse_line+0x1e>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
 80013e6:	7c7b      	ldrb	r3, [r7, #17]
 80013e8:	461a      	mov	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	75fb      	strb	r3, [r7, #23]
        if (letter == 0) break;  // Fin de línea
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 827f 	beq.w	80018f8 <gc_parse_line+0x554>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b60      	cmp	r3, #96	@ 0x60
 80013fe:	d905      	bls.n	800140c <gc_parse_line+0x68>
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b7a      	cmp	r3, #122	@ 0x7a
 8001404:	d802      	bhi.n	800140c <gc_parse_line+0x68>
            letter -= 32;
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	3b20      	subs	r3, #32
 800140a:	75fb      	strb	r3, [r7, #23]
        }
        
        char_counter++;
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	3301      	adds	r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	747b      	strb	r3, [r7, #17]
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	f107 0311 	add.w	r3, r7, #17
 800141c:	4619      	mov	r1, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff4a 	bl	80012b8 <read_float>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <gc_parse_line+0x90>
            return STATUS_BAD_NUMBER_FORMAT;
 8001430:	2302      	movs	r3, #2
 8001432:	e263      	b.n	80018fc <gc_parse_line+0x558>
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4618      	mov	r0, r3
 8001438:	f00d f9f4 	bl	800e824 <truncf>
 800143c:	4603      	mov	r3, r0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe7a 	bl	8001138 <__aeabi_f2uiz>
 8001444:	4603      	mov	r3, r0
 8001446:	74bb      	strb	r3, [r7, #18]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3b46      	subs	r3, #70	@ 0x46
 800144c:	2b14      	cmp	r3, #20
 800144e:	f200 8248 	bhi.w	80018e2 <gc_parse_line+0x53e>
 8001452:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <gc_parse_line+0xb4>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001839 	.word	0x08001839
 800145c:	080014ad 	.word	0x080014ad
 8001460:	080018e3 	.word	0x080018e3
 8001464:	080018e3 	.word	0x080018e3
 8001468:	080018e3 	.word	0x080018e3
 800146c:	080018e3 	.word	0x080018e3
 8001470:	080018c3 	.word	0x080018c3
 8001474:	080016f9 	.word	0x080016f9
 8001478:	08001885 	.word	0x08001885
 800147c:	080018e3 	.word	0x080018e3
 8001480:	080018a3 	.word	0x080018a3
 8001484:	080018e3 	.word	0x080018e3
 8001488:	080018e3 	.word	0x080018e3
 800148c:	0800185f 	.word	0x0800185f
 8001490:	080018e3 	.word	0x080018e3
 8001494:	080018e3 	.word	0x080018e3
 8001498:	080018e3 	.word	0x080018e3
 800149c:	080018e3 	.word	0x080018e3
 80014a0:	08001809 	.word	0x08001809
 80014a4:	08001819 	.word	0x08001819
 80014a8:	08001829 	.word	0x08001829
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014ac:	7cbb      	ldrb	r3, [r7, #18]
 80014ae:	2b63      	cmp	r3, #99	@ 0x63
 80014b0:	d901      	bls.n	80014b6 <gc_parse_line+0x112>
 80014b2:	2314      	movs	r3, #20
 80014b4:	e222      	b.n	80018fc <gc_parse_line+0x558>
                
                switch (int_value) {
 80014b6:	7cbb      	ldrb	r3, [r7, #18]
 80014b8:	2b5e      	cmp	r3, #94	@ 0x5e
 80014ba:	f200 8106 	bhi.w	80016ca <gc_parse_line+0x326>
 80014be:	a201      	add	r2, pc, #4	@ (adr r2, 80014c4 <gc_parse_line+0x120>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	08001641 	.word	0x08001641
 80014c8:	08001641 	.word	0x08001641
 80014cc:	08001641 	.word	0x08001641
 80014d0:	08001641 	.word	0x08001641
 80014d4:	0800164d 	.word	0x0800164d
 80014d8:	080016cb 	.word	0x080016cb
 80014dc:	080016cb 	.word	0x080016cb
 80014e0:	080016cb 	.word	0x080016cb
 80014e4:	080016cb 	.word	0x080016cb
 80014e8:	080016cb 	.word	0x080016cb
 80014ec:	080016cb 	.word	0x080016cb
 80014f0:	080016cb 	.word	0x080016cb
 80014f4:	080016cb 	.word	0x080016cb
 80014f8:	080016cb 	.word	0x080016cb
 80014fc:	080016cb 	.word	0x080016cb
 8001500:	080016cb 	.word	0x080016cb
 8001504:	080016cb 	.word	0x080016cb
 8001508:	0800165b 	.word	0x0800165b
 800150c:	0800165b 	.word	0x0800165b
 8001510:	0800165b 	.word	0x0800165b
 8001514:	0800166b 	.word	0x0800166b
 8001518:	0800166b 	.word	0x0800166b
 800151c:	080016cb 	.word	0x080016cb
 8001520:	080016cb 	.word	0x080016cb
 8001524:	080016cb 	.word	0x080016cb
 8001528:	080016cb 	.word	0x080016cb
 800152c:	080016cb 	.word	0x080016cb
 8001530:	080016cb 	.word	0x080016cb
 8001534:	0800167d 	.word	0x0800167d
 8001538:	080016cb 	.word	0x080016cb
 800153c:	080016cb 	.word	0x080016cb
 8001540:	080016cb 	.word	0x080016cb
 8001544:	080016cb 	.word	0x080016cb
 8001548:	080016cb 	.word	0x080016cb
 800154c:	080016cb 	.word	0x080016cb
 8001550:	080016cb 	.word	0x080016cb
 8001554:	080016cb 	.word	0x080016cb
 8001558:	080016cb 	.word	0x080016cb
 800155c:	080016cb 	.word	0x080016cb
 8001560:	080016cb 	.word	0x080016cb
 8001564:	080016cb 	.word	0x080016cb
 8001568:	080016cb 	.word	0x080016cb
 800156c:	080016cb 	.word	0x080016cb
 8001570:	080016cb 	.word	0x080016cb
 8001574:	080016cb 	.word	0x080016cb
 8001578:	080016cb 	.word	0x080016cb
 800157c:	080016cb 	.word	0x080016cb
 8001580:	080016cb 	.word	0x080016cb
 8001584:	080016cb 	.word	0x080016cb
 8001588:	080016cb 	.word	0x080016cb
 800158c:	080016cb 	.word	0x080016cb
 8001590:	080016cb 	.word	0x080016cb
 8001594:	080016cb 	.word	0x080016cb
 8001598:	080016cb 	.word	0x080016cb
 800159c:	080016bb 	.word	0x080016bb
 80015a0:	080016bb 	.word	0x080016bb
 80015a4:	080016bb 	.word	0x080016bb
 80015a8:	080016bb 	.word	0x080016bb
 80015ac:	080016bb 	.word	0x080016bb
 80015b0:	080016bb 	.word	0x080016bb
 80015b4:	080016cb 	.word	0x080016cb
 80015b8:	080016cb 	.word	0x080016cb
 80015bc:	080016cb 	.word	0x080016cb
 80015c0:	080016cb 	.word	0x080016cb
 80015c4:	080016cb 	.word	0x080016cb
 80015c8:	080016cb 	.word	0x080016cb
 80015cc:	080016cb 	.word	0x080016cb
 80015d0:	080016cb 	.word	0x080016cb
 80015d4:	080016cb 	.word	0x080016cb
 80015d8:	080016cb 	.word	0x080016cb
 80015dc:	080016cb 	.word	0x080016cb
 80015e0:	080016cb 	.word	0x080016cb
 80015e4:	080016cb 	.word	0x080016cb
 80015e8:	080016cb 	.word	0x080016cb
 80015ec:	080016cb 	.word	0x080016cb
 80015f0:	080016cb 	.word	0x080016cb
 80015f4:	080016cb 	.word	0x080016cb
 80015f8:	080016cb 	.word	0x080016cb
 80015fc:	080016cb 	.word	0x080016cb
 8001600:	080016cb 	.word	0x080016cb
 8001604:	080016cb 	.word	0x080016cb
 8001608:	080016cb 	.word	0x080016cb
 800160c:	080016cb 	.word	0x080016cb
 8001610:	080016cb 	.word	0x080016cb
 8001614:	080016cb 	.word	0x080016cb
 8001618:	080016cb 	.word	0x080016cb
 800161c:	080016cb 	.word	0x080016cb
 8001620:	080016cb 	.word	0x080016cb
 8001624:	080016cb 	.word	0x080016cb
 8001628:	080016cb 	.word	0x080016cb
 800162c:	0800168b 	.word	0x0800168b
 8001630:	0800168b 	.word	0x0800168b
 8001634:	0800169b 	.word	0x0800169b
 8001638:	080016a9 	.word	0x080016a9
 800163c:	080016a9 	.word	0x080016a9
                    case 0: case 1: case 2: case 3:
                        word_bit = MODAL_GROUP_G1;
 8001640:	2301      	movs	r3, #1
 8001642:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.motion = int_value;
 8001644:	4aaf      	ldr	r2, [pc, #700]	@ (8001904 <gc_parse_line+0x560>)
 8001646:	7cbb      	ldrb	r3, [r7, #18]
 8001648:	7013      	strb	r3, [r2, #0]
                        break;
 800164a:	e040      	b.n	80016ce <gc_parse_line+0x32a>
                    case 4:
                        word_bit = MODAL_GROUP_G0;
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 4;  // G4 - Dwell
 8001650:	4bac      	ldr	r3, [pc, #688]	@ (8001904 <gc_parse_line+0x560>)
 8001652:	2204      	movs	r2, #4
 8001654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 8001658:	e039      	b.n	80016ce <gc_parse_line+0x32a>
                    case 17: case 18: case 19:
                        word_bit = MODAL_GROUP_G2;
 800165a:	2302      	movs	r3, #2
 800165c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.plane_select = int_value - 17;
 800165e:	7cbb      	ldrb	r3, [r7, #18]
 8001660:	3b11      	subs	r3, #17
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4ba7      	ldr	r3, [pc, #668]	@ (8001904 <gc_parse_line+0x560>)
 8001666:	709a      	strb	r2, [r3, #2]
                        break;
 8001668:	e031      	b.n	80016ce <gc_parse_line+0x32a>
                    case 20: case 21:
                        word_bit = MODAL_GROUP_G6;
 800166a:	2306      	movs	r3, #6
 800166c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.units = 21 - int_value;  // G21=0(mm), G20=1(inch)
 800166e:	7cbb      	ldrb	r3, [r7, #18]
 8001670:	f1c3 0315 	rsb	r3, r3, #21
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4ba3      	ldr	r3, [pc, #652]	@ (8001904 <gc_parse_line+0x560>)
 8001678:	70da      	strb	r2, [r3, #3]
                        break;
 800167a:	e028      	b.n	80016ce <gc_parse_line+0x32a>
                    case 28:
                        word_bit = MODAL_GROUP_G0;
 800167c:	2300      	movs	r3, #0
 800167e:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 28;  // G28 - Home
 8001680:	4ba0      	ldr	r3, [pc, #640]	@ (8001904 <gc_parse_line+0x560>)
 8001682:	221c      	movs	r2, #28
 8001684:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 8001688:	e021      	b.n	80016ce <gc_parse_line+0x32a>
                    case 90: case 91:
                        word_bit = MODAL_GROUP_G3;
 800168a:	2303      	movs	r3, #3
 800168c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.distance = int_value - 90;  // G90=0(abs), G91=1(inc)
 800168e:	7cbb      	ldrb	r3, [r7, #18]
 8001690:	3b5a      	subs	r3, #90	@ 0x5a
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b9b      	ldr	r3, [pc, #620]	@ (8001904 <gc_parse_line+0x560>)
 8001696:	711a      	strb	r2, [r3, #4]
                        break;
 8001698:	e019      	b.n	80016ce <gc_parse_line+0x32a>
                    case 92:
                        word_bit = MODAL_GROUP_G0;
 800169a:	2300      	movs	r3, #0
 800169c:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 92;  // G92 - Set position
 800169e:	4b99      	ldr	r3, [pc, #612]	@ (8001904 <gc_parse_line+0x560>)
 80016a0:	225c      	movs	r2, #92	@ 0x5c
 80016a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80016a6:	e012      	b.n	80016ce <gc_parse_line+0x32a>
                    case 93: case 94:
                        word_bit = MODAL_GROUP_G5;
 80016a8:	2305      	movs	r3, #5
 80016aa:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.feed_rate = 94 - int_value;
 80016ac:	7cbb      	ldrb	r3, [r7, #18]
 80016ae:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b93      	ldr	r3, [pc, #588]	@ (8001904 <gc_parse_line+0x560>)
 80016b6:	715a      	strb	r2, [r3, #5]
                        break;
 80016b8:	e009      	b.n	80016ce <gc_parse_line+0x32a>
                    case 54: case 55: case 56: case 57: case 58: case 59:
                        word_bit = MODAL_GROUP_G12;
 80016ba:	2309      	movs	r3, #9
 80016bc:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.coord_select = int_value - 54;
 80016be:	7cbb      	ldrb	r3, [r7, #18]
 80016c0:	3b36      	subs	r3, #54	@ 0x36
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <gc_parse_line+0x560>)
 80016c6:	705a      	strb	r2, [r3, #1]
                        break;
 80016c8:	e001      	b.n	80016ce <gc_parse_line+0x32a>
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80016ca:	2314      	movs	r3, #20
 80016cc:	e116      	b.n	80018fc <gc_parse_line+0x558>
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80016ce:	8aba      	ldrh	r2, [r7, #20]
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	fa42 f303 	asr.w	r3, r2, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <gc_parse_line+0x33e>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80016de:	2315      	movs	r3, #21
 80016e0:	e10c      	b.n	80018fc <gc_parse_line+0x558>
                }
                command_words |= bit(word_bit);
 80016e2:	7cfb      	ldrb	r3, [r7, #19]
 80016e4:	2201      	movs	r2, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	82bb      	strh	r3, [r7, #20]
                break;
 80016f6:	e0f6      	b.n	80018e6 <gc_parse_line+0x542>
                
            case 'M':
                // Validar rango de comandos M
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80016f8:	7cbb      	ldrb	r3, [r7, #18]
 80016fa:	2b63      	cmp	r3, #99	@ 0x63
 80016fc:	d901      	bls.n	8001702 <gc_parse_line+0x35e>
 80016fe:	2314      	movs	r3, #20
 8001700:	e0fc      	b.n	80018fc <gc_parse_line+0x558>
                
                switch (int_value) {
 8001702:	7cbb      	ldrb	r3, [r7, #18]
 8001704:	2b1e      	cmp	r3, #30
 8001706:	dc45      	bgt.n	8001794 <gc_parse_line+0x3f0>
 8001708:	2b00      	cmp	r3, #0
 800170a:	db66      	blt.n	80017da <gc_parse_line+0x436>
 800170c:	2b1e      	cmp	r3, #30
 800170e:	d864      	bhi.n	80017da <gc_parse_line+0x436>
 8001710:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <gc_parse_line+0x374>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017db 	.word	0x080017db
 8001734:	080017b3 	.word	0x080017b3
 8001738:	080017b3 	.word	0x080017b3
 800173c:	080017b3 	.word	0x080017b3
 8001740:	080017db 	.word	0x080017db
 8001744:	080017db 	.word	0x080017db
 8001748:	080017db 	.word	0x080017db
 800174c:	080017db 	.word	0x080017db
 8001750:	080017db 	.word	0x080017db
 8001754:	080017db 	.word	0x080017db
 8001758:	080017db 	.word	0x080017db
 800175c:	080017bf 	.word	0x080017bf
 8001760:	080017cd 	.word	0x080017cd
 8001764:	080017db 	.word	0x080017db
 8001768:	080017db 	.word	0x080017db
 800176c:	080017db 	.word	0x080017db
 8001770:	080017db 	.word	0x080017db
 8001774:	080017db 	.word	0x080017db
 8001778:	080017db 	.word	0x080017db
 800177c:	080017db 	.word	0x080017db
 8001780:	080017db 	.word	0x080017db
 8001784:	080017db 	.word	0x080017db
 8001788:	080017db 	.word	0x080017db
 800178c:	080017db 	.word	0x080017db
 8001790:	0800179b 	.word	0x0800179b
 8001794:	2b54      	cmp	r3, #84	@ 0x54
 8001796:	d019      	beq.n	80017cc <gc_parse_line+0x428>
 8001798:	e01f      	b.n	80017da <gc_parse_line+0x436>
                    case 0: case 1: case 2: case 30:
                        word_bit = MODAL_GROUP_M4;
 800179a:	230b      	movs	r3, #11
 800179c:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.program_flow = int_value;
 800179e:	4a59      	ldr	r2, [pc, #356]	@ (8001904 <gc_parse_line+0x560>)
 80017a0:	7cbb      	ldrb	r3, [r7, #18]
 80017a2:	7213      	strb	r3, [r2, #8]
                        break;
 80017a4:	e01b      	b.n	80017de <gc_parse_line+0x43a>
                    case 3: case 4: case 5:
                        word_bit = MODAL_GROUP_M7;
 80017a6:	230c      	movs	r3, #12
 80017a8:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.spindle = int_value;
 80017aa:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <gc_parse_line+0x560>)
 80017ac:	7cbb      	ldrb	r3, [r7, #18]
 80017ae:	7193      	strb	r3, [r2, #6]
                        break;
 80017b0:	e015      	b.n	80017de <gc_parse_line+0x43a>
                    case 7: case 8: case 9:
                        word_bit = MODAL_GROUP_M8;
 80017b2:	230d      	movs	r3, #13
 80017b4:	74fb      	strb	r3, [r7, #19]
                        gc_block.modal.coolant = int_value;
 80017b6:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <gc_parse_line+0x560>)
 80017b8:	7cbb      	ldrb	r3, [r7, #18]
 80017ba:	71d3      	strb	r3, [r2, #7]
                        break;
 80017bc:	e00f      	b.n	80017de <gc_parse_line+0x43a>
                    case 17:  // M17 - Enable steppers
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 80017be:	2300      	movs	r3, #0
 80017c0:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 17;
 80017c2:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <gc_parse_line+0x560>)
 80017c4:	2211      	movs	r2, #17
 80017c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80017ca:	e008      	b.n	80017de <gc_parse_line+0x43a>
                    case 18:  // M18 - Disable steppers
                    case 84:  // M84 - Disable steppers (alias de M18)
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 80017cc:	2300      	movs	r3, #0
 80017ce:	74fb      	strb	r3, [r7, #19]
                        gc_block.non_modal_command = 18;
 80017d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001904 <gc_parse_line+0x560>)
 80017d2:	2212      	movs	r2, #18
 80017d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                        break;
 80017d8:	e001      	b.n	80017de <gc_parse_line+0x43a>
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80017da:	2314      	movs	r3, #20
 80017dc:	e08e      	b.n	80018fc <gc_parse_line+0x558>
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80017de:	8aba      	ldrh	r2, [r7, #20]
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	fa42 f303 	asr.w	r3, r2, r3
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <gc_parse_line+0x44e>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80017ee:	2315      	movs	r3, #21
 80017f0:	e084      	b.n	80018fc <gc_parse_line+0x558>
                }
                command_words |= bit(word_bit);
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	2201      	movs	r2, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	b21b      	sxth	r3, r3
 8001804:	82bb      	strh	r3, [r7, #20]
                break;
 8001806:	e06e      	b.n	80018e6 <gc_parse_line+0x542>
                
            case 'X':
                gc_block.values.x = value;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4a3e      	ldr	r2, [pc, #248]	@ (8001904 <gc_parse_line+0x560>)
 800180c:	60d3      	str	r3, [r2, #12]
                gc_block.values.x_defined = true;
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <gc_parse_line+0x560>)
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                break;
 8001816:	e066      	b.n	80018e6 <gc_parse_line+0x542>
            case 'Y':
                gc_block.values.y = value;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a3a      	ldr	r2, [pc, #232]	@ (8001904 <gc_parse_line+0x560>)
 800181c:	6113      	str	r3, [r2, #16]
                gc_block.values.y_defined = true;
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <gc_parse_line+0x560>)
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
                break;
 8001826:	e05e      	b.n	80018e6 <gc_parse_line+0x542>
            case 'Z':
                gc_block.values.z = value;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a36      	ldr	r2, [pc, #216]	@ (8001904 <gc_parse_line+0x560>)
 800182c:	6153      	str	r3, [r2, #20]
                gc_block.values.z_defined = true;
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <gc_parse_line+0x560>)
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                break;
 8001836:	e056      	b.n	80018e6 <gc_parse_line+0x542>
            case 'F':
                gc_block.values.f = value;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a32      	ldr	r2, [pc, #200]	@ (8001904 <gc_parse_line+0x560>)
 800183c:	6193      	str	r3, [r2, #24]
                gc_block.values.f_defined = true;
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <gc_parse_line+0x560>)
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc0f 	bl	8001070 <__aeabi_fcmplt>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d100      	bne.n	800185a <gc_parse_line+0x4b6>
                break;
 8001858:	e045      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800185a:	2304      	movs	r3, #4
 800185c:	e04e      	b.n	80018fc <gc_parse_line+0x558>
            case 'S':
                gc_block.values.s = value;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a28      	ldr	r2, [pc, #160]	@ (8001904 <gc_parse_line+0x560>)
 8001862:	61d3      	str	r3, [r2, #28]
                gc_block.values.s_defined = true;
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <gc_parse_line+0x560>)
 8001866:	2201      	movs	r2, #1
 8001868:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbfc 	bl	8001070 <__aeabi_fcmplt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <gc_parse_line+0x4dc>
                break;
 800187e:	e032      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001880:	2304      	movs	r3, #4
 8001882:	e03b      	b.n	80018fc <gc_parse_line+0x558>
            case 'N':
                gc_block.values.n = int_value;
 8001884:	7cbb      	ldrb	r3, [r7, #18]
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <gc_parse_line+0x560>)
 8001888:	6213      	str	r3, [r2, #32]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbed 	bl	8001070 <__aeabi_fcmplt>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d100      	bne.n	800189e <gc_parse_line+0x4fa>
                break;
 800189c:	e023      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800189e:	2304      	movs	r3, #4
 80018a0:	e02c      	b.n	80018fc <gc_parse_line+0x558>
            case 'P':
                gc_block.values.p = int_value;
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <gc_parse_line+0x560>)
 80018a4:	7cbb      	ldrb	r3, [r7, #18]
 80018a6:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fbdd 	bl	8001070 <__aeabi_fcmplt>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d100      	bne.n	80018be <gc_parse_line+0x51a>
                break;
 80018bc:	e013      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018be:	2304      	movs	r3, #4
 80018c0:	e01c      	b.n	80018fc <gc_parse_line+0x558>
            case 'L':
                gc_block.values.l = int_value;
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <gc_parse_line+0x560>)
 80018c4:	7cbb      	ldrb	r3, [r7, #18]
 80018c6:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fbcd 	bl	8001070 <__aeabi_fcmplt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d100      	bne.n	80018de <gc_parse_line+0x53a>
                break;
 80018dc:	e003      	b.n	80018e6 <gc_parse_line+0x542>
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80018de:	2304      	movs	r3, #4
 80018e0:	e00c      	b.n	80018fc <gc_parse_line+0x558>
            default:
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80018e2:	2314      	movs	r3, #20
 80018e4:	e00a      	b.n	80018fc <gc_parse_line+0x558>
    while (line[char_counter] != 0) {
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f47f ad6a 	bne.w	80013ca <gc_parse_line+0x26>
 80018f6:	e000      	b.n	80018fa <gc_parse_line+0x556>
        if (letter == 0) break;  // Fin de línea
 80018f8:	bf00      	nop
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000036c 	.word	0x2000036c

08001908 <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 8001908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800190c:	b09f      	sub	sp, #124	@ 0x7c
 800190e:	af04      	add	r7, sp, #16
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 8001910:	4bac      	ldr	r3, [pc, #688]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001912:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001916:	2b1c      	cmp	r3, #28
 8001918:	dc3c      	bgt.n	8001994 <gc_execute_block+0x8c>
 800191a:	2b04      	cmp	r3, #4
 800191c:	f2c0 80ea 	blt.w	8001af4 <gc_execute_block+0x1ec>
 8001920:	3b04      	subs	r3, #4
 8001922:	2b18      	cmp	r3, #24
 8001924:	f200 80e6 	bhi.w	8001af4 <gc_execute_block+0x1ec>
 8001928:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <gc_execute_block+0x28>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	0800199b 	.word	0x0800199b
 8001934:	08001af5 	.word	0x08001af5
 8001938:	08001af5 	.word	0x08001af5
 800193c:	08001af5 	.word	0x08001af5
 8001940:	08001af5 	.word	0x08001af5
 8001944:	08001af5 	.word	0x08001af5
 8001948:	08001af5 	.word	0x08001af5
 800194c:	08001af5 	.word	0x08001af5
 8001950:	08001af5 	.word	0x08001af5
 8001954:	08001af5 	.word	0x08001af5
 8001958:	08001af5 	.word	0x08001af5
 800195c:	08001af5 	.word	0x08001af5
 8001960:	08001af5 	.word	0x08001af5
 8001964:	08001ad7 	.word	0x08001ad7
 8001968:	08001ae5 	.word	0x08001ae5
 800196c:	08001af5 	.word	0x08001af5
 8001970:	08001af5 	.word	0x08001af5
 8001974:	08001af5 	.word	0x08001af5
 8001978:	08001af5 	.word	0x08001af5
 800197c:	08001af5 	.word	0x08001af5
 8001980:	08001af5 	.word	0x08001af5
 8001984:	08001af5 	.word	0x08001af5
 8001988:	08001af5 	.word	0x08001af5
 800198c:	08001af5 	.word	0x08001af5
 8001990:	080019d1 	.word	0x080019d1
 8001994:	2b5c      	cmp	r3, #92	@ 0x5c
 8001996:	d022      	beq.n	80019de <gc_execute_block+0xd6>
 8001998:	e0ac      	b.n	8001af4 <gc_execute_block+0x1ec>
        case 4:  // G4 - Dwell (pausa)
            if (gc_block.values.p > 0) {
 800199a:	4b8a      	ldr	r3, [pc, #552]	@ (8001bc4 <gc_execute_block+0x2bc>)
 800199c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a6 	beq.w	8001af2 <gc_execute_block+0x1ea>
                // Implementar delay aquí si es necesario
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 80019a6:	4b87      	ldr	r3, [pc, #540]	@ (8001bc4 <gc_execute_block+0x2bc>)
 80019a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019ac:	461a      	mov	r2, r3
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4985      	ldr	r1, [pc, #532]	@ (8001bc8 <gc_execute_block+0x2c0>)
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00a fd4c 	bl	800c450 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fbc8 	bl	8000150 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f009 f957 	bl	800ac7c <CDC_Transmit_FS>
            }
            break;
 80019ce:	e090      	b.n	8001af2 <gc_execute_block+0x1ea>
            
        case 28: // G28 - Home
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 80019d0:	2116      	movs	r1, #22
 80019d2:	487e      	ldr	r0, [pc, #504]	@ (8001bcc <gc_execute_block+0x2c4>)
 80019d4:	f009 f952 	bl	800ac7c <CDC_Transmit_FS>
            performHoming();
 80019d8:	f001 fc80 	bl	80032dc <performHoming>
            break;
 80019dc:	e08a      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 92: // G92 - Set position
            if (gc_block.values.x_defined) {
 80019de:	4b79      	ldr	r3, [pc, #484]	@ (8001bc4 <gc_execute_block+0x2bc>)
 80019e0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00c      	beq.n	8001a02 <gc_execute_block+0xfa>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 80019e8:	4b76      	ldr	r3, [pc, #472]	@ (8001bc4 <gc_execute_block+0x2bc>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4978      	ldr	r1, [pc, #480]	@ (8001bd0 <gc_execute_block+0x2c8>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9a0 	bl	8000d34 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fb78 	bl	80010ec <__aeabi_f2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a75      	ldr	r2, [pc, #468]	@ (8001bd4 <gc_execute_block+0x2cc>)
 8001a00:	6013      	str	r3, [r2, #0]
            }
            if (gc_block.values.y_defined) {
 8001a02:	4b70      	ldr	r3, [pc, #448]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001a04:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <gc_execute_block+0x11e>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 8001a0c:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	496f      	ldr	r1, [pc, #444]	@ (8001bd0 <gc_execute_block+0x2c8>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f98e 	bl	8000d34 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fb66 	bl	80010ec <__aeabi_f2iz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd8 <gc_execute_block+0x2d0>)
 8001a24:	6013      	str	r3, [r2, #0]
            }
            if (gc_block.values.z_defined) {
 8001a26:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <gc_execute_block+0x142>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 8001a30:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4969      	ldr	r1, [pc, #420]	@ (8001bdc <gc_execute_block+0x2d4>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f97c 	bl	8000d34 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fb54 	bl	80010ec <__aeabi_f2iz>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a66      	ldr	r2, [pc, #408]	@ (8001be0 <gc_execute_block+0x2d8>)
 8001a48:	6013      	str	r3, [r2, #0]
            }
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
                   currentX/(float)STEPS_PER_MM_X, 
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <gc_execute_block+0x2cc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f91c 	bl	8000c8c <__aeabi_i2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	495e      	ldr	r1, [pc, #376]	@ (8001bd0 <gc_execute_block+0x2c8>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa1f 	bl	8000e9c <__aeabi_fdiv>
 8001a5e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fce1 	bl	8000428 <__aeabi_f2d>
 8001a66:	4680      	mov	r8, r0
 8001a68:	4689      	mov	r9, r1
                   currentY/(float)STEPS_PER_MM_Y, 
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <gc_execute_block+0x2d0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f90c 	bl	8000c8c <__aeabi_i2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4956      	ldr	r1, [pc, #344]	@ (8001bd0 <gc_execute_block+0x2c8>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa0f 	bl	8000e9c <__aeabi_fdiv>
 8001a7e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fcd1 	bl	8000428 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 8001a8a:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <gc_execute_block+0x2d8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8fc 	bl	8000c8c <__aeabi_i2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4951      	ldr	r1, [pc, #324]	@ (8001bdc <gc_execute_block+0x2d4>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f9ff 	bl	8000e9c <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcc1 	bl	8000428 <__aeabi_f2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	1d38      	adds	r0, r7, #4
 8001aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	494a      	ldr	r1, [pc, #296]	@ (8001be4 <gc_execute_block+0x2dc>)
 8001aba:	f00a fcc9 	bl	800c450 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb45 	bl	8000150 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f009 f8d4 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001ad4:	e00e      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 17: // M17 - Enable steppers
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 8001ad6:	211b      	movs	r1, #27
 8001ad8:	4843      	ldr	r0, [pc, #268]	@ (8001be8 <gc_execute_block+0x2e0>)
 8001ada:	f009 f8cf 	bl	800ac7c <CDC_Transmit_FS>
            enableSteppers();
 8001ade:	f001 fda7 	bl	8003630 <enableSteppers>
            break;
 8001ae2:	e007      	b.n	8001af4 <gc_execute_block+0x1ec>
            
        case 18: // M18/M84 - Disable steppers
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 8001ae4:	2118      	movs	r1, #24
 8001ae6:	4841      	ldr	r0, [pc, #260]	@ (8001bec <gc_execute_block+0x2e4>)
 8001ae8:	f009 f8c8 	bl	800ac7c <CDC_Transmit_FS>
            disableSteppers();
 8001aec:	f001 fdba 	bl	8003664 <disableSteppers>
            break;
 8001af0:	e000      	b.n	8001af4 <gc_execute_block+0x1ec>
            break;
 8001af2:	bf00      	nop
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 8001af4:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	dc7c      	bgt.n	8001bf6 <gc_execute_block+0x2ee>
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	da58      	bge.n	8001bb2 <gc_execute_block+0x2aa>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <gc_execute_block+0x202>
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d025      	beq.n	8001b54 <gc_execute_block+0x24c>
 8001b08:	e075      	b.n	8001bf6 <gc_execute_block+0x2ee>
        case MOTION_MODE_SEEK:    // G0 - Movimiento rápido
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b0c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <gc_execute_block+0x220>
 8001b14:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b16:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d104      	bne.n	8001b28 <gc_execute_block+0x220>
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d04a      	beq.n	8001bbe <gc_execute_block+0x2b6>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 8001b28:	4b26      	ldr	r3, [pc, #152]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b2a:	68d8      	ldr	r0, [r3, #12]
 8001b2c:	4b25      	ldr	r3, [pc, #148]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b2e:	6919      	ldr	r1, [r3, #16]
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b32:	695c      	ldr	r4, [r3, #20]
 8001b34:	4b23      	ldr	r3, [pc, #140]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b36:	f893 5026 	ldrb.w	r5, [r3, #38]	@ 0x26
 8001b3a:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b3c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b40:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b42:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8001b46:	9201      	str	r2, [sp, #4]
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	f001 f95f 	bl	8002e10 <moveAxesRapidCallback>
                                     gc_block.values.x_defined, gc_block.values.y_defined, gc_block.values.z_defined);
            }
            break;
 8001b52:	e034      	b.n	8001bbe <gc_execute_block+0x2b6>
            
        case MOTION_MODE_LINEAR:  // G1 - Movimiento lineal
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b56:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <gc_execute_block+0x26a>
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b60:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <gc_execute_block+0x26a>
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d040      	beq.n	8001bf4 <gc_execute_block+0x2ec>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b74:	68dc      	ldr	r4, [r3, #12]
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b78:	691d      	ldr	r5, [r3, #16]
 8001b7a:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b7c:	695e      	ldr	r6, [r3, #20]
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b80:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b86:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b8c:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8001b90:	490c      	ldr	r1, [pc, #48]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b92:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 8001b96:	480b      	ldr	r0, [pc, #44]	@ (8001bc4 <gc_execute_block+0x2bc>)
 8001b98:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8001b9c:	9003      	str	r0, [sp, #12]
 8001b9e:	9102      	str	r1, [sp, #8]
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4663      	mov	r3, ip
 8001ba6:	4632      	mov	r2, r6
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4620      	mov	r0, r4
 8001bac:	f001 f960 	bl	8002e70 <moveAxesLinearCallback>
                                      gc_block.values.x_defined, gc_block.values.y_defined, gc_block.values.z_defined, gc_block.values.f_defined);
            }
            break;
 8001bb0:	e020      	b.n	8001bf4 <gc_execute_block+0x2ec>
            
        case MOTION_MODE_CW_ARC:   // G2 - Arco horario
        case MOTION_MODE_CCW_ARC:  // G3 - Arco antihorario
            // Por ahora no implementado, solo reportar
            CDC_Transmit_FS((uint8_t*)"Comandos de arco G2/G3 no implementados\r\n", 42);
 8001bb2:	212a      	movs	r1, #42	@ 0x2a
 8001bb4:	480e      	ldr	r0, [pc, #56]	@ (8001bf0 <gc_execute_block+0x2e8>)
 8001bb6:	f009 f861 	bl	800ac7c <CDC_Transmit_FS>
            return STATUS_GCODE_UNSUPPORTED_COMMAND;
 8001bba:	2314      	movs	r3, #20
 8001bbc:	e055      	b.n	8001c6a <gc_execute_block+0x362>
            break;
 8001bbe:	bf00      	nop
 8001bc0:	e019      	b.n	8001bf6 <gc_execute_block+0x2ee>
 8001bc2:	bf00      	nop
 8001bc4:	2000036c 	.word	0x2000036c
 8001bc8:	0800e870 	.word	0x0800e870
 8001bcc:	0800e88c 	.word	0x0800e88c
 8001bd0:	429e0000 	.word	0x429e0000
 8001bd4:	200003a8 	.word	0x200003a8
 8001bd8:	200003ac 	.word	0x200003ac
 8001bdc:	4575a000 	.word	0x4575a000
 8001be0:	200003b0 	.word	0x200003b0
 8001be4:	0800e8a4 	.word	0x0800e8a4
 8001be8:	0800e8d0 	.word	0x0800e8d0
 8001bec:	0800e8ec 	.word	0x0800e8ec
 8001bf0:	0800e908 	.word	0x0800e908
            break;
 8001bf4:	bf00      	nop
            break;
    }
    
    // Ejecutar comandos M
    switch (gc_block.modal.spindle) {
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <gc_execute_block+0x36c>)
 8001bf8:	799b      	ldrb	r3, [r3, #6]
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d010      	beq.n	8001c20 <gc_execute_block+0x318>
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	dc13      	bgt.n	8001c2a <gc_execute_block+0x322>
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d002      	beq.n	8001c0c <gc_execute_block+0x304>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d005      	beq.n	8001c16 <gc_execute_block+0x30e>
 8001c0a:	e00e      	b.n	8001c2a <gc_execute_block+0x322>
        case 3:  // M3 - Spindle CW
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001c0c:	2117      	movs	r1, #23
 8001c0e:	481a      	ldr	r0, [pc, #104]	@ (8001c78 <gc_execute_block+0x370>)
 8001c10:	f009 f834 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c14:	e009      	b.n	8001c2a <gc_execute_block+0x322>
        case 4:  // M4 - Spindle CCW  
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
 8001c16:	2118      	movs	r1, #24
 8001c18:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <gc_execute_block+0x374>)
 8001c1a:	f009 f82f 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c1e:	e004      	b.n	8001c2a <gc_execute_block+0x322>
        case 5:  // M5 - Spindle off
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001c20:	2115      	movs	r1, #21
 8001c22:	4817      	ldr	r0, [pc, #92]	@ (8001c80 <gc_execute_block+0x378>)
 8001c24:	f009 f82a 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c28:	bf00      	nop
    }
    
    switch (gc_block.modal.coolant) {
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <gc_execute_block+0x36c>)
 8001c2c:	79db      	ldrb	r3, [r3, #7]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d010      	beq.n	8001c54 <gc_execute_block+0x34c>
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	dc13      	bgt.n	8001c5e <gc_execute_block+0x356>
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	d002      	beq.n	8001c40 <gc_execute_block+0x338>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d005      	beq.n	8001c4a <gc_execute_block+0x342>
 8001c3e:	e00e      	b.n	8001c5e <gc_execute_block+0x356>
        case 7:  // M7 - Mist coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante niebla activado\r\n", 30);
 8001c40:	211e      	movs	r1, #30
 8001c42:	4810      	ldr	r0, [pc, #64]	@ (8001c84 <gc_execute_block+0x37c>)
 8001c44:	f009 f81a 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c48:	e009      	b.n	8001c5e <gc_execute_block+0x356>
        case 8:  // M8 - Flood coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
 8001c4a:	2122      	movs	r1, #34	@ 0x22
 8001c4c:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <gc_execute_block+0x380>)
 8001c4e:	f009 f815 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c52:	e004      	b.n	8001c5e <gc_execute_block+0x356>
        case 9:  // M9 - Coolant off
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 8001c54:	211a      	movs	r1, #26
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <gc_execute_block+0x384>)
 8001c58:	f009 f810 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001c5c:	bf00      	nop
    }
    
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <gc_execute_block+0x388>)
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <gc_execute_block+0x36c>)
 8001c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c64:	c303      	stmia	r3!, {r0, r1}
 8001c66:	701a      	strb	r2, [r3, #0]
    
    return STATUS_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	376c      	adds	r7, #108	@ 0x6c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	0800e934 	.word	0x0800e934
 8001c7c:	0800e94c 	.word	0x0800e94c
 8001c80:	0800e968 	.word	0x0800e968
 8001c84:	0800e980 	.word	0x0800e980
 8001c88:	0800e9a0 	.word	0x0800e9a0
 8001c8c:	0800e9c4 	.word	0x0800e9c4
 8001c90:	2000039c 	.word	0x2000039c

08001c94 <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e018      	b.n	8001cd4 <gc_execute_line+0x40>
        if (line[i] >= 'a' && line[i] <= 'z') {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b60      	cmp	r3, #96	@ 0x60
 8001cac:	d90f      	bls.n	8001cce <gc_execute_line+0x3a>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b7a      	cmp	r3, #122	@ 0x7a
 8001cb8:	d809      	bhi.n	8001cce <gc_execute_line+0x3a>
            line[i] -= 32;  // Convertir a mayúscula
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3a20      	subs	r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; line[i] != 0; i++) {
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e0      	bne.n	8001ca2 <gc_execute_line+0xe>
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fb5f 	bl	80013a4 <gc_parse_line>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	72fb      	strb	r3, [r7, #11]
    if (status_code != STATUS_OK) {
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <gc_execute_line+0x60>
        return status_code;
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	e009      	b.n	8001d08 <gc_execute_line+0x74>
    }
    
    // Ejecutar comandos parseados
    status_code = gc_execute_block();
 8001cf4:	f7ff fe08 	bl	8001908 <gc_execute_block>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	72fb      	strb	r3, [r7, #11]
    if (status_code != STATUS_OK) {
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <gc_execute_line+0x72>
        return status_code;
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	e000      	b.n	8001d08 <gc_execute_line+0x74>
    }
    
    return STATUS_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
    switch (status_code) {
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b1c      	cmp	r3, #28
 8001d1e:	f200 8083 	bhi.w	8001e28 <report_status_message+0x118>
 8001d22:	a201      	add	r2, pc, #4	@ (adr r2, 8001d28 <report_status_message+0x18>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d9d 	.word	0x08001d9d
 8001d2c:	08001da7 	.word	0x08001da7
 8001d30:	08001db1 	.word	0x08001db1
 8001d34:	08001dbb 	.word	0x08001dbb
 8001d38:	08001dc5 	.word	0x08001dc5
 8001d3c:	08001e29 	.word	0x08001e29
 8001d40:	08001e29 	.word	0x08001e29
 8001d44:	08001e29 	.word	0x08001e29
 8001d48:	08001e29 	.word	0x08001e29
 8001d4c:	08001e29 	.word	0x08001e29
 8001d50:	08001e29 	.word	0x08001e29
 8001d54:	08001e29 	.word	0x08001e29
 8001d58:	08001e29 	.word	0x08001e29
 8001d5c:	08001e29 	.word	0x08001e29
 8001d60:	08001e29 	.word	0x08001e29
 8001d64:	08001e29 	.word	0x08001e29
 8001d68:	08001e29 	.word	0x08001e29
 8001d6c:	08001e29 	.word	0x08001e29
 8001d70:	08001e29 	.word	0x08001e29
 8001d74:	08001e29 	.word	0x08001e29
 8001d78:	08001dcf 	.word	0x08001dcf
 8001d7c:	08001dd9 	.word	0x08001dd9
 8001d80:	08001de3 	.word	0x08001de3
 8001d84:	08001ded 	.word	0x08001ded
 8001d88:	08001df7 	.word	0x08001df7
 8001d8c:	08001e01 	.word	0x08001e01
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e15 	.word	0x08001e15
 8001d98:	08001e1f 	.word	0x08001e1f
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	482f      	ldr	r0, [pc, #188]	@ (8001e5c <report_status_message+0x14c>)
 8001da0:	f008 ff6c 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001da4:	e055      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_EXPECTED_COMMAND_LETTER:
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 8001da6:	2124      	movs	r1, #36	@ 0x24
 8001da8:	482d      	ldr	r0, [pc, #180]	@ (8001e60 <report_status_message+0x150>)
 8001daa:	f008 ff67 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dae:	e050      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_BAD_NUMBER_FORMAT:
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 8001db0:	211e      	movs	r1, #30
 8001db2:	482c      	ldr	r0, [pc, #176]	@ (8001e64 <report_status_message+0x154>)
 8001db4:	f008 ff62 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001db8:	e04b      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_INVALID_STATEMENT:
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 8001dba:	211e      	movs	r1, #30
 8001dbc:	482a      	ldr	r0, [pc, #168]	@ (8001e68 <report_status_message+0x158>)
 8001dbe:	f008 ff5d 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dc2:	e046      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_NEGATIVE_VALUE:
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 8001dc4:	211b      	movs	r1, #27
 8001dc6:	4829      	ldr	r0, [pc, #164]	@ (8001e6c <report_status_message+0x15c>)
 8001dc8:	f008 ff58 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dcc:	e041      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_UNSUPPORTED_COMMAND:
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 8001dce:	2121      	movs	r1, #33	@ 0x21
 8001dd0:	4827      	ldr	r0, [pc, #156]	@ (8001e70 <report_status_message+0x160>)
 8001dd2:	f008 ff53 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dd6:	e03c      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_MODAL_GROUP_VIOLATION:
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 8001dd8:	2123      	movs	r1, #35	@ 0x23
 8001dda:	4826      	ldr	r0, [pc, #152]	@ (8001e74 <report_status_message+0x164>)
 8001ddc:	f008 ff4e 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001de0:	e037      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_UNDEFINED_FEED_RATE:
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 8001de2:	2121      	movs	r1, #33	@ 0x21
 8001de4:	4824      	ldr	r0, [pc, #144]	@ (8001e78 <report_status_message+0x168>)
 8001de6:	f008 ff49 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dea:	e032      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER:
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 8001dec:	2127      	movs	r1, #39	@ 0x27
 8001dee:	4823      	ldr	r0, [pc, #140]	@ (8001e7c <report_status_message+0x16c>)
 8001df0:	f008 ff44 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001df4:	e02d      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_AXIS_COMMAND_CONFLICT:
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 8001df6:	2123      	movs	r1, #35	@ 0x23
 8001df8:	4821      	ldr	r0, [pc, #132]	@ (8001e80 <report_status_message+0x170>)
 8001dfa:	f008 ff3f 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001dfe:	e028      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_WORD_REPEATED:
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 8001e00:	211b      	movs	r1, #27
 8001e02:	4820      	ldr	r0, [pc, #128]	@ (8001e84 <report_status_message+0x174>)
 8001e04:	f008 ff3a 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001e08:	e023      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_NO_AXIS_WORDS:
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 8001e0a:	211b      	movs	r1, #27
 8001e0c:	481e      	ldr	r0, [pc, #120]	@ (8001e88 <report_status_message+0x178>)
 8001e0e:	f008 ff35 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001e12:	e01e      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_INVALID_LINE_NUMBER:
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 8001e14:	2121      	movs	r1, #33	@ 0x21
 8001e16:	481d      	ldr	r0, [pc, #116]	@ (8001e8c <report_status_message+0x17c>)
 8001e18:	f008 ff30 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001e1c:	e019      	b.n	8001e52 <report_status_message+0x142>
        case STATUS_GCODE_VALUE_WORD_MISSING:
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 8001e1e:	2120      	movs	r1, #32
 8001e20:	481b      	ldr	r0, [pc, #108]	@ (8001e90 <report_status_message+0x180>)
 8001e22:	f008 ff2b 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8001e26:	e014      	b.n	8001e52 <report_status_message+0x142>
        default:
            {
                char msg[30];
                sprintf(msg, "error:%d\r\n", status_code);
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4919      	ldr	r1, [pc, #100]	@ (8001e94 <report_status_message+0x184>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00a fb0d 	bl	800c450 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe f988 	bl	8000150 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f008 ff16 	bl	800ac7c <CDC_Transmit_FS>
            }
            break;
 8001e50:	bf00      	nop
    }
}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	@ 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	0800e9e0 	.word	0x0800e9e0
 8001e60:	0800e9e8 	.word	0x0800e9e8
 8001e64:	0800ea0c 	.word	0x0800ea0c
 8001e68:	0800ea2c 	.word	0x0800ea2c
 8001e6c:	0800ea4c 	.word	0x0800ea4c
 8001e70:	0800ea68 	.word	0x0800ea68
 8001e74:	0800ea8c 	.word	0x0800ea8c
 8001e78:	0800eab0 	.word	0x0800eab0
 8001e7c:	0800ead4 	.word	0x0800ead4
 8001e80:	0800eafc 	.word	0x0800eafc
 8001e84:	0800eb20 	.word	0x0800eb20
 8001e88:	0800eb3c 	.word	0x0800eb3c
 8001e8c:	0800eb58 	.word	0x0800eb58
 8001e90:	0800eb7c 	.word	0x0800eb7c
 8001e94:	0800eb9c 	.word	0x0800eb9c

08001e98 <sendUSBText>:
} USBTransmitMethod_t;

#define USB_TRANSMIT_METHOD USB_METHOD_QUEUED  // ← Cambiar aquí el método

// Función auxiliar para envío USB según el método configurado
void sendUSBText(const char* message) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe f955 	bl	8000150 <strlen>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	81fb      	strh	r3, [r7, #14]
        case USB_METHOD_RETRY:
            CDC_Transmit_FS_WithRetry((uint8_t*)message, len, 3, 10);  // 3 reintentos, 10ms
            break;
            
        case USB_METHOD_QUEUED:
            if (!CDC_Transmit_Queued((uint8_t*)message, len)) {
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f008 ffea 	bl	800ae88 <CDC_Transmit_Queued>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <sendUSBText+0x32>
                // Si la cola está llena, usar método directo como fallback
                CDC_Transmit_FS((uint8_t*)message, len);
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f008 fed9 	bl	800ac7c <CDC_Transmit_FS>
            }
            break;
 8001eca:	bf00      	nop
    }
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  HAL_Init();
 8001ed8:	f002 f9a4 	bl	8004224 <HAL_Init>
  SystemClock_Config();
 8001edc:	f000 f818 	bl	8001f10 <SystemClock_Config>
  MX_GPIO_Init();
 8001ee0:	f000 f872 	bl	8001fc8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 8001ee4:	f008 fddc 	bl	800aaa0 <MX_USB_DEVICE_Init>

  // Inicializar cola de transmisión USB CDC
  CDC_TxQueue_Init();
 8001ee8:	f008 fee2 	bl	800acb0 <CDC_TxQueue_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 8001eec:	f000 ff6c 	bl	8002dc8 <setup>

  // Envío inicial usando cola
  CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14);
 8001ef0:	210e      	movs	r1, #14
 8001ef2:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <main+0x38>)
 8001ef4:	f008 ffc8 	bl	800ae88 <CDC_Transmit_Queued>
  #endif

  while (1)
  {
    // Procesar cola de transmisión USB CDC
    CDC_TxQueue_Process();
 8001ef8:	f008 ff60 	bl	800adbc <CDC_TxQueue_Process>
    
    // Equivalente al loop() de Arduino
    loop();
 8001efc:	f000 ff16 	bl	8002d2c <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 8001f00:	2032      	movs	r0, #50	@ 0x32
 8001f02:	f002 f9f1 	bl	80042e8 <HAL_Delay>
    CDC_TxQueue_Process();
 8001f06:	bf00      	nop
 8001f08:	e7f6      	b.n	8001ef8 <main+0x24>
 8001f0a:	bf00      	nop
 8001f0c:	0800eba8 	.word	0x0800eba8

08001f10 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b094      	sub	sp, #80	@ 0x50
 8001f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1a:	2228      	movs	r2, #40	@ 0x28
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00a fafb 	bl	800c51a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001f5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 fa04 	bl	8006374 <HAL_RCC_OscConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f72:	f001 fffb 	bl	8003f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f76:	230f      	movs	r3, #15
 8001f78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f004 fc70 	bl	8006878 <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f9e:	f001 ffe5 	bl	8003f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001fa2:	2310      	movs	r3, #16
 8001fa4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001fa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001faa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fdbe 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001fba:	f001 ffd7 	bl	8003f6c <Error_Handler>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3750      	adds	r7, #80	@ 0x50
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800209c <MX_GPIO_Init+0xd4>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	@ (800209c <MX_GPIO_Init+0xd4>)
 8001fe2:	f043 0320 	orr.w	r3, r3, #32
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800209c <MX_GPIO_Init+0xd4>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b29      	ldr	r3, [pc, #164]	@ (800209c <MX_GPIO_Init+0xd4>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <MX_GPIO_Init+0xd4>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b26      	ldr	r3, [pc, #152]	@ (800209c <MX_GPIO_Init+0xd4>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <MX_GPIO_Init+0xd4>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a22      	ldr	r2, [pc, #136]	@ (800209c <MX_GPIO_Init+0xd4>)
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b20      	ldr	r3, [pc, #128]	@ (800209c <MX_GPIO_Init+0xd4>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8002024:	2200      	movs	r2, #0
 8002026:	f240 31d9 	movw	r1, #985	@ 0x3d9
 800202a:	481d      	ldr	r0, [pc, #116]	@ (80020a0 <MX_GPIO_Init+0xd8>)
 800202c:	f002 fc29 	bl	8004882 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002036:	481b      	ldr	r0, [pc, #108]	@ (80020a4 <MX_GPIO_Init+0xdc>)
 8002038:	f002 fc23 	bl	8004882 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 800203c:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8002040:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4619      	mov	r1, r3
 8002054:	4812      	ldr	r0, [pc, #72]	@ (80020a0 <MX_GPIO_Init+0xd8>)
 8002056:	f002 fa79 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800205a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800205e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4619      	mov	r1, r3
 800206e:	480c      	ldr	r0, [pc, #48]	@ (80020a0 <MX_GPIO_Init+0xd8>)
 8002070:	f002 fa6c 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002074:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2302      	movs	r3, #2
 8002084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MX_GPIO_Init+0xdc>)
 800208e:	f002 fa5d 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002092:	bf00      	nop
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40010800 	.word	0x40010800

080020a8 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <delay_us+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <delay_us+0x44>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9a      	lsrs	r2, r3, #18
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <delay_us+0x48>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 80020ca:	bf00      	nop
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <delay_us+0x48>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d8f8      	bhi.n	80020cc <delay_us+0x24>
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	431bde83 	.word	0x431bde83
 80020f0:	e0001000 	.word	0xe0001000

080020f4 <X_stepOnce>:

void X_stepOnce(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2140      	movs	r1, #64	@ 0x40
 80020fc:	4806      	ldr	r0, [pc, #24]	@ (8002118 <X_stepOnce+0x24>)
 80020fe:	f002 fbc0 	bl	8004882 <HAL_GPIO_WritePin>
    delay_us(2);
 8002102:	2002      	movs	r0, #2
 8002104:	f7ff ffd0 	bl	80020a8 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2140      	movs	r1, #64	@ 0x40
 800210c:	4802      	ldr	r0, [pc, #8]	@ (8002118 <X_stepOnce+0x24>)
 800210e:	f002 fbb8 	bl	8004882 <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010c00 	.word	0x40010c00

0800211c <Y_stepOnce>:

void Y_stepOnce(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002126:	4807      	ldr	r0, [pc, #28]	@ (8002144 <Y_stepOnce+0x28>)
 8002128:	f002 fbab 	bl	8004882 <HAL_GPIO_WritePin>
    delay_us(2);
 800212c:	2002      	movs	r0, #2
 800212e:	f7ff ffbb 	bl	80020a8 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002138:	4802      	ldr	r0, [pc, #8]	@ (8002144 <Y_stepOnce+0x28>)
 800213a:	f002 fba2 	bl	8004882 <HAL_GPIO_WritePin>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40010c00 	.word	0x40010c00

08002148 <Z_stepOnce>:

void Z_stepOnce(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002152:	4807      	ldr	r0, [pc, #28]	@ (8002170 <Z_stepOnce+0x28>)
 8002154:	f002 fb95 	bl	8004882 <HAL_GPIO_WritePin>
    delay_us(2);
 8002158:	2002      	movs	r0, #2
 800215a:	f7ff ffa5 	bl	80020a8 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <Z_stepOnce+0x28>)
 8002166:	f002 fb8c 	bl	8004882 <HAL_GPIO_WritePin>
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40010800 	.word	0x40010800
 8002174:	00000000 	.word	0x00000000

08002178 <calculateStepDelay>:
  * @brief  Calcula el delay entre pasos basado en el feed rate
  * @param  feedRate: Velocidad en mm/min
  * @param  distance_mm: Distancia total del movimiento en mm
  * @retval Delay en microsegundos entre pasos
  */
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002182:	f04f 0100 	mov.w	r1, #0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe ff7c 	bl	8001084 <__aeabi_fcmple>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <calculateStepDelay+0x20>
 8002192:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002196:	e030      	b.n	80021fa <calculateStepDelay+0x82>
    
    // Calcular pasos por segundo para el eje dominante
    // feedRate está en mm/min, convertir a mm/s
    float feedRate_mm_per_sec = feedRate / 60.0;
 8002198:	491d      	ldr	r1, [pc, #116]	@ (8002210 <calculateStepDelay+0x98>)
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fe7e 	bl	8000e9c <__aeabi_fdiv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]
    
    // Usar el eje con mayor resolución (Z) para el cálculo más conservador
    float steps_per_mm = STEPS_PER_MM_Z; // El más alto: 3930 steps/mm
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <calculateStepDelay+0x9c>)
 80021a6:	60fb      	str	r3, [r7, #12]
    
    // Calcular pasos por segundo
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	6938      	ldr	r0, [r7, #16]
 80021ac:	f7fe fdc2 	bl	8000d34 <__aeabi_fmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	60bb      	str	r3, [r7, #8]
    
    // Calcular delay en microsegundos entre pasos
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f7fe ff63 	bl	8001084 <__aeabi_fcmple>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <calculateStepDelay+0x52>
 80021c4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80021c8:	e017      	b.n	80021fa <calculateStepDelay+0x82>
    
    uint32_t delay_us = (uint32_t)(1000000.0 / steps_per_sec);
 80021ca:	68b8      	ldr	r0, [r7, #8]
 80021cc:	f7fe f92c 	bl	8000428 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	a10c      	add	r1, pc, #48	@ (adr r1, 8002208 <calculateStepDelay+0x90>)
 80021d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021da:	f7fe faa7 	bl	800072c <__aeabi_ddiv>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fc27 	bl	8000a38 <__aeabi_d2uiz>
 80021ea:	4603      	mov	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]
    
    // Limitar delay mínimo para evitar problemas de timing
    if (delay_us < 200) delay_us = 200; // Mínimo 200us = 5000 pasos/segundo máximo
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80021f2:	d801      	bhi.n	80021f8 <calculateStepDelay+0x80>
 80021f4:	23c8      	movs	r3, #200	@ 0xc8
 80021f6:	617b      	str	r3, [r7, #20]
    
    return delay_us;
 80021f8:	697b      	ldr	r3, [r7, #20]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	00000000 	.word	0x00000000
 800220c:	412e8480 	.word	0x412e8480
 8002210:	42700000 	.word	0x42700000
 8002214:	4575a000 	.word	0x4575a000

08002218 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b0e5      	sub	sp, #404	@ 0x194
 800221c:	af0c      	add	r7, sp, #48	@ 0x30
 800221e:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 8002222:	f5a4 74a6 	sub.w	r4, r4, #332	@ 0x14c
 8002226:	6020      	str	r0, [r4, #0]
 8002228:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 800222c:	f5a0 70a8 	sub.w	r0, r0, #336	@ 0x150
 8002230:	6001      	str	r1, [r0, #0]
 8002232:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8002236:	f5a1 71aa 	sub.w	r1, r1, #340	@ 0x154
 800223a:	600a      	str	r2, [r1, #0]
 800223c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002240:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002244:	6013      	str	r3, [r2, #0]
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002246:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800224a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800224e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002252:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8002256:	6811      	ldr	r1, [r2, #0]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	f7fe ff31 	bl	80010c0 <__aeabi_fcmpun>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <moveAxesWithFeedRate+0x68>
 8002264:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002268:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800226c:	498f      	ldr	r1, [pc, #572]	@ (80024ac <moveAxesWithFeedRate+0x294>)
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	f7fe fd60 	bl	8000d34 <__aeabi_fmul>
 8002274:	4603      	mov	r3, r0
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe ff38 	bl	80010ec <__aeabi_f2iz>
 800227c:	4603      	mov	r3, r0
 800227e:	e001      	b.n	8002284 <moveAxesWithFeedRate+0x6c>
 8002280:	4b8b      	ldr	r3, [pc, #556]	@ (80024b0 <moveAxesWithFeedRate+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8002288:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800228c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002290:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002294:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8002298:	6811      	ldr	r1, [r2, #0]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	f7fe ff10 	bl	80010c0 <__aeabi_fcmpun>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <moveAxesWithFeedRate+0xaa>
 80022a6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80022aa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80022ae:	497f      	ldr	r1, [pc, #508]	@ (80024ac <moveAxesWithFeedRate+0x294>)
 80022b0:	6818      	ldr	r0, [r3, #0]
 80022b2:	f7fe fd3f 	bl	8000d34 <__aeabi_fmul>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe ff17 	bl	80010ec <__aeabi_f2iz>
 80022be:	4603      	mov	r3, r0
 80022c0:	e001      	b.n	80022c6 <moveAxesWithFeedRate+0xae>
 80022c2:	4b7c      	ldr	r3, [pc, #496]	@ (80024b4 <moveAxesWithFeedRate+0x29c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 80022ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80022ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022d2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80022d6:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80022da:	6811      	ldr	r1, [r2, #0]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	f7fe feef 	bl	80010c0 <__aeabi_fcmpun>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <moveAxesWithFeedRate+0xec>
 80022e8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80022ec:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80022f0:	4971      	ldr	r1, [pc, #452]	@ (80024b8 <moveAxesWithFeedRate+0x2a0>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f7fe fd1e 	bl	8000d34 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fef6 	bl	80010ec <__aeabi_f2iz>
 8002300:	4603      	mov	r3, r0
 8002302:	e001      	b.n	8002308 <moveAxesWithFeedRate+0xf0>
 8002304:	4b6d      	ldr	r3, [pc, #436]	@ (80024bc <moveAxesWithFeedRate+0x2a4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 800230c:	4b68      	ldr	r3, [pc, #416]	@ (80024b0 <moveAxesWithFeedRate+0x298>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    int32_t deltaY = targetY - currentY;
 800231a:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <moveAxesWithFeedRate+0x29c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    int32_t deltaZ = targetZ - currentZ;
 8002328:	4b64      	ldr	r3, [pc, #400]	@ (80024bc <moveAxesWithFeedRate+0x2a4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002336:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800233a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800233e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002342:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8002346:	6811      	ldr	r1, [r2, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f7fe feb9 	bl	80010c0 <__aeabi_fcmpun>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d117      	bne.n	8002384 <moveAxesWithFeedRate+0x16c>
 8002354:	4b56      	ldr	r3, [pc, #344]	@ (80024b0 <moveAxesWithFeedRate+0x298>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fc97 	bl	8000c8c <__aeabi_i2f>
 800235e:	4603      	mov	r3, r0
 8002360:	4952      	ldr	r1, [pc, #328]	@ (80024ac <moveAxesWithFeedRate+0x294>)
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fd9a 	bl	8000e9c <__aeabi_fdiv>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002370:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002374:	4611      	mov	r1, r2
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	f7fe fbd2 	bl	8000b20 <__aeabi_fsub>
 800237c:	4603      	mov	r3, r0
 800237e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002382:	e001      	b.n	8002388 <moveAxesWithFeedRate+0x170>
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 800238c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002390:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002394:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8002398:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	f7fe fe8e 	bl	80010c0 <__aeabi_fcmpun>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d117      	bne.n	80023da <moveAxesWithFeedRate+0x1c2>
 80023aa:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <moveAxesWithFeedRate+0x29c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fc6c 	bl	8000c8c <__aeabi_i2f>
 80023b4:	4603      	mov	r3, r0
 80023b6:	493d      	ldr	r1, [pc, #244]	@ (80024ac <moveAxesWithFeedRate+0x294>)
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fd6f 	bl	8000e9c <__aeabi_fdiv>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80023c6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023ca:	4611      	mov	r1, r2
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f7fe fba7 	bl	8000b20 <__aeabi_fsub>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023d8:	e001      	b.n	80023de <moveAxesWithFeedRate+0x1c6>
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 80023e2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80023e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023ea:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80023ee:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f7fe fe63 	bl	80010c0 <__aeabi_fcmpun>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d117      	bne.n	8002430 <moveAxesWithFeedRate+0x218>
 8002400:	4b2e      	ldr	r3, [pc, #184]	@ (80024bc <moveAxesWithFeedRate+0x2a4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fc41 	bl	8000c8c <__aeabi_i2f>
 800240a:	4603      	mov	r3, r0
 800240c:	492a      	ldr	r1, [pc, #168]	@ (80024b8 <moveAxesWithFeedRate+0x2a0>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fd44 	bl	8000e9c <__aeabi_fdiv>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800241c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002420:	4611      	mov	r1, r2
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	f7fe fb7c 	bl	8000b20 <__aeabi_fsub>
 8002428:	4603      	mov	r3, r0
 800242a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800242e:	e001      	b.n	8002434 <moveAxesWithFeedRate+0x21c>
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002438:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 800243c:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8002440:	f7fe fc78 	bl	8000d34 <__aeabi_fmul>
 8002444:	4603      	mov	r3, r0
 8002446:	461c      	mov	r4, r3
 8002448:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800244c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8002450:	f7fe fc70 	bl	8000d34 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	4619      	mov	r1, r3
 8002458:	4620      	mov	r0, r4
 800245a:	f7fe fb63 	bl	8000b24 <__addsf3>
 800245e:	4603      	mov	r3, r0
 8002460:	461c      	mov	r4, r3
 8002462:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8002466:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800246a:	f7fe fc63 	bl	8000d34 <__aeabi_fmul>
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	4620      	mov	r0, r4
 8002474:	f7fe fb56 	bl	8000b24 <__addsf3>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fd ffd4 	bl	8000428 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f00c f8d6 	bl	800e638 <sqrt>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe faf0 	bl	8000a78 <__aeabi_d2f>
 8002498:	4603      	mov	r3, r0
 800249a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 800249e:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00e      	beq.n	80024c4 <moveAxesWithFeedRate+0x2ac>
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <moveAxesWithFeedRate+0x2a8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e010      	b.n	80024ce <moveAxesWithFeedRate+0x2b6>
 80024ac:	429e0000 	.word	0x429e0000
 80024b0:	200003a8 	.word	0x200003a8
 80024b4:	200003ac 	.word	0x200003ac
 80024b8:	4575a000 	.word	0x4575a000
 80024bc:	200003b0 	.word	0x200003b0
 80024c0:	20000004 	.word	0x20000004
 80024c4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80024c8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 80024d2:	4bb0      	ldr	r3, [pc, #704]	@ (8002794 <moveAxesWithFeedRate+0x57c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 80024dc:	f7fe fde6 	bl	80010ac <__aeabi_fcmpgt>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <moveAxesWithFeedRate+0x2d6>
        effective_feedrate = maxFeedRate;
 80024e6:	4bab      	ldr	r3, [pc, #684]	@ (8002794 <moveAxesWithFeedRate+0x57c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    }
    
    // Determinar direcciones
    bool dirX = (deltaX >= 0);
 80024ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80024f2:	43db      	mvns	r3, r3
 80024f4:	0fdb      	lsrs	r3, r3, #31
 80024f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    bool dirY = (deltaY >= 0);
 80024fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80024fe:	43db      	mvns	r3, r3
 8002500:	0fdb      	lsrs	r3, r3, #31
 8002502:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    bool dirZ = (deltaZ >= 0);
 8002506:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800250a:	43db      	mvns	r3, r3
 800250c:	0fdb      	lsrs	r3, r3, #31
 800250e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002512:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <moveAxesWithFeedRate+0x310>
 800251a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800251e:	461a      	mov	r2, r3
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	489d      	ldr	r0, [pc, #628]	@ (8002798 <moveAxesWithFeedRate+0x580>)
 8002524:	f002 f9ad 	bl	8004882 <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002528:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <moveAxesWithFeedRate+0x326>
 8002530:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8002534:	461a      	mov	r2, r3
 8002536:	2108      	movs	r1, #8
 8002538:	4897      	ldr	r0, [pc, #604]	@ (8002798 <moveAxesWithFeedRate+0x580>)
 800253a:	f002 f9a2 	bl	8004882 <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800253e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <moveAxesWithFeedRate+0x344>
 8002546:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002556:	4891      	ldr	r0, [pc, #580]	@ (800279c <moveAxesWithFeedRate+0x584>)
 8002558:	f002 f993 	bl	8004882 <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = abs(deltaX);
 800255c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002560:	2b00      	cmp	r3, #0
 8002562:	bfb8      	it	lt
 8002564:	425b      	neglt	r3, r3
 8002566:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    deltaY = abs(deltaY);
 800256a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	425b      	neglt	r3, r3
 8002574:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    deltaZ = abs(deltaZ);
 8002578:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800257c:	2b00      	cmp	r3, #0
 800257e:	bfb8      	it	lt
 8002580:	425b      	neglt	r3, r3
 8002582:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    
    // Calcular delay basado en feed rate
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002586:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 800258a:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 800258e:	f7ff fdf3 	bl	8002178 <calculateStepDelay>
 8002592:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
    sendUSBText(debug_msg);
    #endif
    
    // Mostrar información del movimiento con validación de valores
    char msg[200];
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 8002596:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800259a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800259e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80025a2:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80025a6:	6811      	ldr	r1, [r2, #0]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	f7fe fd89 	bl	80010c0 <__aeabi_fcmpun>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <moveAxesWithFeedRate+0x3b4>
 80025b4:	4b7a      	ldr	r3, [pc, #488]	@ (80027a0 <moveAxesWithFeedRate+0x588>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb67 	bl	8000c8c <__aeabi_i2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	4978      	ldr	r1, [pc, #480]	@ (80027a4 <moveAxesWithFeedRate+0x58c>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fc6a 	bl	8000e9c <__aeabi_fdiv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	e004      	b.n	80025d6 <moveAxesWithFeedRate+0x3be>
 80025cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80025d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    float display_y = !isnan(y) ? y : (currentY / (float)STEPS_PER_MM_Y);
 80025da:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80025de:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025e2:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80025e6:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 80025ea:	6811      	ldr	r1, [r2, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	f7fe fd67 	bl	80010c0 <__aeabi_fcmpun>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <moveAxesWithFeedRate+0x3f8>
 80025f8:	4b6b      	ldr	r3, [pc, #428]	@ (80027a8 <moveAxesWithFeedRate+0x590>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fb45 	bl	8000c8c <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	4967      	ldr	r1, [pc, #412]	@ (80027a4 <moveAxesWithFeedRate+0x58c>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fc48 	bl	8000e9c <__aeabi_fdiv>
 800260c:	4603      	mov	r3, r0
 800260e:	e004      	b.n	800261a <moveAxesWithFeedRate+0x402>
 8002610:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002614:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    float display_z = !isnan(z) ? z : (currentZ / (float)STEPS_PER_MM_Z);
 800261e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002622:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002626:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 800262a:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 800262e:	6811      	ldr	r1, [r2, #0]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f7fe fd45 	bl	80010c0 <__aeabi_fcmpun>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <moveAxesWithFeedRate+0x43c>
 800263c:	4b5b      	ldr	r3, [pc, #364]	@ (80027ac <moveAxesWithFeedRate+0x594>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb23 	bl	8000c8c <__aeabi_i2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4959      	ldr	r1, [pc, #356]	@ (80027b0 <moveAxesWithFeedRate+0x598>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fc26 	bl	8000e9c <__aeabi_fdiv>
 8002650:	4603      	mov	r3, r0
 8002652:	e004      	b.n	800265e <moveAxesWithFeedRate+0x446>
 8002654:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002658:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    
    // Convertir floats a enteros para evitar problemas de printf con floats
    int x_int = (int)display_x;
 8002662:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002666:	f7fe fd41 	bl	80010ec <__aeabi_f2iz>
 800266a:	4603      	mov	r3, r0
 800266c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    int x_dec = (int)((display_x - x_int) * 100);
 8002670:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8002674:	f7fe fb0a 	bl	8000c8c <__aeabi_i2f>
 8002678:	4603      	mov	r3, r0
 800267a:	4619      	mov	r1, r3
 800267c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8002680:	f7fe fa4e 	bl	8000b20 <__aeabi_fsub>
 8002684:	4603      	mov	r3, r0
 8002686:	494b      	ldr	r1, [pc, #300]	@ (80027b4 <moveAxesWithFeedRate+0x59c>)
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fb53 	bl	8000d34 <__aeabi_fmul>
 800268e:	4603      	mov	r3, r0
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fd2b 	bl	80010ec <__aeabi_f2iz>
 8002696:	4603      	mov	r3, r0
 8002698:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    int y_int = (int)display_y;
 800269c:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80026a0:	f7fe fd24 	bl	80010ec <__aeabi_f2iz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    int y_dec = (int)((display_y - y_int) * 100);
 80026aa:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80026ae:	f7fe faed 	bl	8000c8c <__aeabi_i2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80026ba:	f7fe fa31 	bl	8000b20 <__aeabi_fsub>
 80026be:	4603      	mov	r3, r0
 80026c0:	493c      	ldr	r1, [pc, #240]	@ (80027b4 <moveAxesWithFeedRate+0x59c>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb36 	bl	8000d34 <__aeabi_fmul>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd0e 	bl	80010ec <__aeabi_f2iz>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    int z_int = (int)display_z;
 80026d6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80026da:	f7fe fd07 	bl	80010ec <__aeabi_f2iz>
 80026de:	4603      	mov	r3, r0
 80026e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    int z_dec = (int)((display_z - z_int) * 100);
 80026e4:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 80026e8:	f7fe fad0 	bl	8000c8c <__aeabi_i2f>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4619      	mov	r1, r3
 80026f0:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80026f4:	f7fe fa14 	bl	8000b20 <__aeabi_fsub>
 80026f8:	4603      	mov	r3, r0
 80026fa:	492e      	ldr	r1, [pc, #184]	@ (80027b4 <moveAxesWithFeedRate+0x59c>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fb19 	bl	8000d34 <__aeabi_fmul>
 8002702:	4603      	mov	r3, r0
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fcf1 	bl	80010ec <__aeabi_f2iz>
 800270a:	4603      	mov	r3, r0
 800270c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    int f_int = (int)effective_feedrate;
 8002710:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 8002714:	f7fe fcea 	bl	80010ec <__aeabi_f2iz>
 8002718:	4603      	mov	r3, r0
 800271a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int f_dec = (int)((effective_feedrate - f_int) * 10);
 800271e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8002722:	f7fe fab3 	bl	8000c8c <__aeabi_i2f>
 8002726:	4603      	mov	r3, r0
 8002728:	4619      	mov	r1, r3
 800272a:	f8d7 015c 	ldr.w	r0, [r7, #348]	@ 0x15c
 800272e:	f7fe f9f7 	bl	8000b20 <__aeabi_fsub>
 8002732:	4603      	mov	r3, r0
 8002734:	4920      	ldr	r1, [pc, #128]	@ (80027b8 <moveAxesWithFeedRate+0x5a0>)
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe fafc 	bl	8000d34 <__aeabi_fmul>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fcd4 	bl	80010ec <__aeabi_f2iz>
 8002744:	4603      	mov	r3, r0
 8002746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    int d_int = (int)total_distance;
 800274a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800274e:	f7fe fccd 	bl	80010ec <__aeabi_f2iz>
 8002752:	4603      	mov	r3, r0
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    int d_dec = (int)((total_distance - d_int) * 100);
 8002758:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800275c:	f7fe fa96 	bl	8000c8c <__aeabi_i2f>
 8002760:	4603      	mov	r3, r0
 8002762:	4619      	mov	r1, r3
 8002764:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002768:	f7fe f9da 	bl	8000b20 <__aeabi_fsub>
 800276c:	4603      	mov	r3, r0
 800276e:	4911      	ldr	r1, [pc, #68]	@ (80027b4 <moveAxesWithFeedRate+0x59c>)
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fadf 	bl	8000d34 <__aeabi_fmul>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fcb7 	bl	80010ec <__aeabi_f2iz>
 800277e:	4603      	mov	r3, r0
 8002780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    
    snprintf(msg, sizeof(msg), "%s: X=%d.%02d Y=%d.%02d Z=%d.%02d F=%d.%d D=%d.%02dmm T=%lduS\r\n", 
 8002784:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <moveAxesWithFeedRate+0x5a8>
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <moveAxesWithFeedRate+0x5a4>)
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	e018      	b.n	80027c4 <moveAxesWithFeedRate+0x5ac>
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008
 8002798:	40010c00 	.word	0x40010c00
 800279c:	40010800 	.word	0x40010800
 80027a0:	200003a8 	.word	0x200003a8
 80027a4:	429e0000 	.word	0x429e0000
 80027a8:	200003ac 	.word	0x200003ac
 80027ac:	200003b0 	.word	0x200003b0
 80027b0:	4575a000 	.word	0x4575a000
 80027b4:	42c80000 	.word	0x42c80000
 80027b8:	41200000 	.word	0x41200000
 80027bc:	0800ebb8 	.word	0x0800ebb8
 80027c0:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <moveAxesWithFeedRate+0x7c0>)
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bfb8      	it	lt
 80027cc:	425b      	neglt	r3, r3
 80027ce:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80027d2:	2a00      	cmp	r2, #0
 80027d4:	bfb8      	it	lt
 80027d6:	4252      	neglt	r2, r2
 80027d8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	@ 0xf0
 80027dc:	2900      	cmp	r1, #0
 80027de:	bfb8      	it	lt
 80027e0:	4249      	neglt	r1, r1
 80027e2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80027e6:	2800      	cmp	r0, #0
 80027e8:	bfb8      	it	lt
 80027ea:	4240      	neglt	r0, r0
 80027ec:	f8d7 40e0 	ldr.w	r4, [r7, #224]	@ 0xe0
 80027f0:	2c00      	cmp	r4, #0
 80027f2:	bfb8      	it	lt
 80027f4:	4264      	neglt	r4, r4
 80027f6:	f107 0618 	add.w	r6, r7, #24
 80027fa:	f8d7 5114 	ldr.w	r5, [r7, #276]	@ 0x114
 80027fe:	950a      	str	r5, [sp, #40]	@ 0x28
 8002800:	9409      	str	r4, [sp, #36]	@ 0x24
 8002802:	f8d7 40e4 	ldr.w	r4, [r7, #228]	@ 0xe4
 8002806:	9408      	str	r4, [sp, #32]
 8002808:	9007      	str	r0, [sp, #28]
 800280a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800280e:	9006      	str	r0, [sp, #24]
 8002810:	9105      	str	r1, [sp, #20]
 8002812:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 8002816:	9104      	str	r1, [sp, #16]
 8002818:	9203      	str	r2, [sp, #12]
 800281a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800281e:	9202      	str	r2, [sp, #8]
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a6c      	ldr	r2, [pc, #432]	@ (80029dc <moveAxesWithFeedRate+0x7c4>)
 800282c:	21c8      	movs	r1, #200	@ 0xc8
 800282e:	4630      	mov	r0, r6
 8002830:	f009 fdd8 	bl	800c3e4 <sniprintf>
           y_int, abs(y_dec), 
           z_int, abs(z_dec),
           f_int, abs(f_dec), 
           d_int, abs(d_dec), 
           (unsigned long)step_delay);
    sendUSBText(msg);
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb2d 	bl	8001e98 <sendUSBText>
    
    // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
 800283e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002842:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    if (deltaY > maxSteps) maxSteps = deltaY;
 8002846:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800284a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800284e:	429a      	cmp	r2, r3
 8002850:	dd03      	ble.n	800285a <moveAxesWithFeedRate+0x642>
 8002852:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002856:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 800285a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800285e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002862:	429a      	cmp	r2, r3
 8002864:	dd03      	ble.n	800286e <moveAxesWithFeedRate+0x656>
 8002866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800286a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    
    if (maxSteps == 0) return; // No hay movimiento
 800286e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80ab 	beq.w	80029ce <moveAxesWithFeedRate+0x7b6>
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 8002878:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800287c:	0fda      	lsrs	r2, r3, #31
 800287e:	4413      	add	r3, r2
 8002880:	105b      	asrs	r3, r3, #1
 8002882:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    int32_t errorY = maxSteps / 2;
 8002886:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800288a:	0fda      	lsrs	r2, r3, #31
 800288c:	4413      	add	r3, r2
 800288e:	105b      	asrs	r3, r3, #1
 8002890:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    int32_t errorZ = maxSteps / 2;
 8002894:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002898:	0fda      	lsrs	r2, r3, #31
 800289a:	4413      	add	r3, r2
 800289c:	105b      	asrs	r3, r3, #1
 800289e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    
    // Encender LED indicador de movimiento
    HAL_GPIO_WritePin(GPIOB, isRapid ? LED_ANTIHORARIO : LED_HORARIO, GPIO_PIN_SET);
 80028a2:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <moveAxesWithFeedRate+0x696>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e000      	b.n	80028b0 <moveAxesWithFeedRate+0x698>
 80028ae:	2301      	movs	r3, #1
 80028b0:	2201      	movs	r2, #1
 80028b2:	4619      	mov	r1, r3
 80028b4:	484a      	ldr	r0, [pc, #296]	@ (80029e0 <moveAxesWithFeedRate+0x7c8>)
 80028b6:	f001 ffe4 	bl	8004882 <HAL_GPIO_WritePin>
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80028c0:	e068      	b.n	8002994 <moveAxesWithFeedRate+0x77c>
        bool stepX = false, stepY = false, stepZ = false;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
        
        // Algoritmo de Bresenham para X
        errorX += deltaX;
 80028d4:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80028d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80028dc:	4413      	add	r3, r2
 80028de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        if (errorX >= maxSteps) {
 80028e2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80028e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028ea:	429a      	cmp	r2, r3
 80028ec:	db09      	blt.n	8002902 <moveAxesWithFeedRate+0x6ea>
            errorX -= maxSteps;
 80028ee:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80028f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
            stepX = true;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
        }
        
        // Algoritmo de Bresenham para Y
        errorY += deltaY;
 8002902:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8002906:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800290a:	4413      	add	r3, r2
 800290c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        if (errorY >= maxSteps) {
 8002910:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8002914:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002918:	429a      	cmp	r2, r3
 800291a:	db09      	blt.n	8002930 <moveAxesWithFeedRate+0x718>
            errorY -= maxSteps;
 800291c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8002920:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            stepY = true;
 800292a:	2301      	movs	r3, #1
 800292c:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
        }
        
        // Algoritmo de Bresenham para Z
        errorZ += deltaZ;
 8002930:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002934:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002938:	4413      	add	r3, r2
 800293a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
        if (errorZ >= maxSteps) {
 800293e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002942:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002946:	429a      	cmp	r2, r3
 8002948:	db09      	blt.n	800295e <moveAxesWithFeedRate+0x746>
            errorZ -= maxSteps;
 800294a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800294e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
            stepZ = true;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
        }
        
        // Ejecutar pasos simultáneamente
        if (stepX) X_stepOnce();
 800295e:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <moveAxesWithFeedRate+0x752>
 8002966:	f7ff fbc5 	bl	80020f4 <X_stepOnce>
        if (stepY) Y_stepOnce();
 800296a:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <moveAxesWithFeedRate+0x75e>
 8002972:	f7ff fbd3 	bl	800211c <Y_stepOnce>
        if (stepZ) Z_stepOnce();
 8002976:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <moveAxesWithFeedRate+0x76a>
 800297e:	f7ff fbe3 	bl	8002148 <Z_stepOnce>
        
        // Delay controlado por feed rate
        delay_us(step_delay);
 8002982:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8002986:	f7ff fb8f 	bl	80020a8 <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 800298a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800298e:	3301      	adds	r3, #1
 8002990:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002994:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002998:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800299c:	429a      	cmp	r2, r3
 800299e:	db90      	blt.n	80028c2 <moveAxesWithFeedRate+0x6aa>
    }
    
    // Apagar LEDs
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	480e      	ldr	r0, [pc, #56]	@ (80029e0 <moveAxesWithFeedRate+0x7c8>)
 80029a6:	f001 ff6c 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2102      	movs	r1, #2
 80029ae:	480c      	ldr	r0, [pc, #48]	@ (80029e0 <moveAxesWithFeedRate+0x7c8>)
 80029b0:	f001 ff67 	bl	8004882 <HAL_GPIO_WritePin>
    
    // Actualizar posiciones actuales
    currentX = targetX;
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <moveAxesWithFeedRate+0x7cc>)
 80029b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80029ba:	6013      	str	r3, [r2, #0]
    currentY = targetY;
 80029bc:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <moveAxesWithFeedRate+0x7d0>)
 80029be:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80029c2:	6013      	str	r3, [r2, #0]
    currentZ = targetZ;
 80029c4:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <moveAxesWithFeedRate+0x7d4>)
 80029c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	e000      	b.n	80029d0 <moveAxesWithFeedRate+0x7b8>
    if (maxSteps == 0) return; // No hay movimiento
 80029ce:	bf00      	nop
}
 80029d0:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d8:	0800ebc4 	.word	0x0800ebc4
 80029dc:	0800ebd0 	.word	0x0800ebd0
 80029e0:	40010c00 	.word	0x40010c00
 80029e4:	200003a8 	.word	0x200003a8
 80029e8:	200003ac 	.word	0x200003ac
 80029ec:	200003b0 	.word	0x200003b0

080029f0 <processGcode>:

void processGcode(const char* command) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0c2      	sub	sp, #264	@ 0x108
 80029f4:	af04      	add	r7, sp, #16
 80029f6:	6078      	str	r0, [r7, #4]
    // Comandos especiales para control de programa
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80029f8:	220d      	movs	r2, #13
 80029fa:	49b4      	ldr	r1, [pc, #720]	@ (8002ccc <processGcode+0x2dc>)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f009 fd94 	bl	800c52a <strncmp>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <processGcode+0x1e>
        startProgramStorage();
 8002a08:	f000 fe46 	bl	8003698 <startProgramStorage>
        return;
 8002a0c:	e15b      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 8002a0e:	220c      	movs	r2, #12
 8002a10:	49af      	ldr	r1, [pc, #700]	@ (8002cd0 <processGcode+0x2e0>)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f009 fd89 	bl	800c52a <strncmp>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <processGcode+0x34>
        stopProgramStorage();
 8002a1e:	f000 fe77 	bl	8003710 <stopProgramStorage>
        return;
 8002a22:	e150      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 8002a24:	220b      	movs	r2, #11
 8002a26:	49ab      	ldr	r1, [pc, #684]	@ (8002cd4 <processGcode+0x2e4>)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f009 fd7e 	bl	800c52a <strncmp>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <processGcode+0x4a>
        runProgram();
 8002a34:	f001 f838 	bl	8003aa8 <runProgram>
        return;
 8002a38:	e145      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_INFO", 12) == 0) {
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	49a6      	ldr	r1, [pc, #664]	@ (8002cd8 <processGcode+0x2e8>)
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f009 fd73 	bl	800c52a <strncmp>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <processGcode+0x60>
        showProgramInfo();
 8002a4a:	f000 ff61 	bl	8003910 <showProgramInfo>
        return;
 8002a4e:	e13a      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 8002a50:	220d      	movs	r2, #13
 8002a52:	49a2      	ldr	r1, [pc, #648]	@ (8002cdc <processGcode+0x2ec>)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f009 fd68 	bl	800c52a <strncmp>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <processGcode+0x76>
        clearProgram();
 8002a60:	f000 ff14 	bl	800388c <clearProgram>
        return;
 8002a64:	e12f      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 8002a66:	220d      	movs	r2, #13
 8002a68:	499d      	ldr	r1, [pc, #628]	@ (8002ce0 <processGcode+0x2f0>)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f009 fd5d 	bl	800c52a <strncmp>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <processGcode+0x8c>
        pauseProgram();
 8002a76:	f001 f97f 	bl	8003d78 <pauseProgram>
        return;
 8002a7a:	e124      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4999      	ldr	r1, [pc, #612]	@ (8002ce4 <processGcode+0x2f4>)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f009 fd52 	bl	800c52a <strncmp>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <processGcode+0xa2>
        runNextLine();
 8002a8c:	f001 f8de 	bl	8003c4c <runNextLine>
        return;
 8002a90:	e119      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 8002a92:	2204      	movs	r2, #4
 8002a94:	4994      	ldr	r1, [pc, #592]	@ (8002ce8 <processGcode+0x2f8>)
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f009 fd47 	bl	800c52a <strncmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <processGcode+0xc2>
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	4991      	ldr	r1, [pc, #580]	@ (8002cec <processGcode+0x2fc>)
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f009 fd3f 	bl	800c52a <strncmp>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <processGcode+0xc8>
        showHelp();
 8002ab2:	f001 f977 	bl	8003da4 <showHelp>
        return;
 8002ab6:	e106      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 8002ab8:	220c      	movs	r2, #12
 8002aba:	498d      	ldr	r1, [pc, #564]	@ (8002cf0 <processGcode+0x300>)
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f009 fd34 	bl	800c52a <strncmp>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <processGcode+0xde>
        showQueueStatus();
 8002ac8:	f001 fa02 	bl	8003ed0 <showQueueStatus>
        return;
 8002acc:	e0fb      	b.n	8002cc6 <processGcode+0x2d6>
    }
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 8002ace:	2203      	movs	r2, #3
 8002ad0:	4988      	ldr	r1, [pc, #544]	@ (8002cf4 <processGcode+0x304>)
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f009 fd29 	bl	800c52a <strncmp>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <processGcode+0xfe>
 8002ade:	2203      	movs	r2, #3
 8002ae0:	4985      	ldr	r1, [pc, #532]	@ (8002cf8 <processGcode+0x308>)
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f009 fd21 	bl	800c52a <strncmp>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <processGcode+0x10c>
        if (isStoringProgram) {
 8002aee:	4b83      	ldr	r3, [pc, #524]	@ (8002cfc <processGcode+0x30c>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <processGcode+0x10c>
            stopProgramStorage();
 8002af6:	f000 fe0b 	bl	8003710 <stopProgramStorage>
            return;
 8002afa:	e0e4      	b.n	8002cc6 <processGcode+0x2d6>
        }
    }
    
    // Si estamos en modo almacenamiento, agregar la línea al programa
    if (isStoringProgram) {
 8002afc:	4b7f      	ldr	r3, [pc, #508]	@ (8002cfc <processGcode+0x30c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <processGcode+0x130>
        if (addLineToProgram(command)) {
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 fe3f 	bl	8003788 <addLineToProgram>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <processGcode+0x128>
            sendUSBText("ok\r\n");
 8002b10:	487b      	ldr	r0, [pc, #492]	@ (8002d00 <processGcode+0x310>)
 8002b12:	f7ff f9c1 	bl	8001e98 <sendUSBText>
        } else {
            sendUSBText("error: buffer lleno\r\n");
        }
        return;
 8002b16:	e0d6      	b.n	8002cc6 <processGcode+0x2d6>
            sendUSBText("error: buffer lleno\r\n");
 8002b18:	487a      	ldr	r0, [pc, #488]	@ (8002d04 <processGcode+0x314>)
 8002b1a:	f7ff f9bd 	bl	8001e98 <sendUSBText>
        return;
 8002b1e:	e0d2      	b.n	8002cc6 <processGcode+0x2d6>
    }
    
    // Procesamiento normal de G-code
    char line_copy[100];
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 8002b20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b24:	2263      	movs	r2, #99	@ 0x63
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f009 fd10 	bl	800c54e <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
    
    uint8_t status = gc_execute_line(line_copy);
 8002b34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f8ab 	bl	8001c94 <gc_execute_line>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
    
    // Enviar respuesta según el estándar GRBL
    if (status == STATUS_OK) {
 8002b44:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 80b7 	bne.w	8002cbc <processGcode+0x2cc>
        // Verificar si es un comando que requiere respuesta especial
        if (strncmp(command, "M114", 4) == 0) {
 8002b4e:	2204      	movs	r2, #4
 8002b50:	496d      	ldr	r1, [pc, #436]	@ (8002d08 <processGcode+0x318>)
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f009 fce9 	bl	800c52a <strncmp>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80a4 	bne.w	8002ca8 <processGcode+0x2b8>
            // M114 - Reportar posición actual
            char posMsg[100];
            float xPos = currentX / (float)STEPS_PER_MM_X;
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <processGcode+0x31c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe f891 	bl	8000c8c <__aeabi_i2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4968      	ldr	r1, [pc, #416]	@ (8002d10 <processGcode+0x320>)
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f994 	bl	8000e9c <__aeabi_fdiv>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002b7a:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <processGcode+0x324>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe f884 	bl	8000c8c <__aeabi_i2f>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4962      	ldr	r1, [pc, #392]	@ (8002d10 <processGcode+0x320>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f987 	bl	8000e9c <__aeabi_fdiv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002b94:	4b60      	ldr	r3, [pc, #384]	@ (8002d18 <processGcode+0x328>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe f877 	bl	8000c8c <__aeabi_i2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	495e      	ldr	r1, [pc, #376]	@ (8002d1c <processGcode+0x32c>)
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f97a 	bl	8000e9c <__aeabi_fdiv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            
            // Convertir a enteros para evitar problemas con printf float
            int x_int = (int)xPos;
 8002bae:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002bb2:	f7fe fa9b 	bl	80010ec <__aeabi_f2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
            int x_dec = (int)((xPos - x_int) * 100);
 8002bbc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8002bc0:	f7fe f864 	bl	8000c8c <__aeabi_i2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8002bcc:	f7fd ffa8 	bl	8000b20 <__aeabi_fsub>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4953      	ldr	r1, [pc, #332]	@ (8002d20 <processGcode+0x330>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f8ad 	bl	8000d34 <__aeabi_fmul>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe fa85 	bl	80010ec <__aeabi_f2iz>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            int y_int = (int)yPos;
 8002be8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8002bec:	f7fe fa7e 	bl	80010ec <__aeabi_f2iz>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            int y_dec = (int)((yPos - y_int) * 100);
 8002bf6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8002bfa:	f7fe f847 	bl	8000c8c <__aeabi_i2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8002c06:	f7fd ff8b 	bl	8000b20 <__aeabi_fsub>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4944      	ldr	r1, [pc, #272]	@ (8002d20 <processGcode+0x330>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f890 	bl	8000d34 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fa68 	bl	80010ec <__aeabi_f2iz>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            int z_int = (int)zPos;
 8002c22:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002c26:	f7fe fa61 	bl	80010ec <__aeabi_f2iz>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            int z_dec = (int)((zPos - z_int) * 100);
 8002c30:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8002c34:	f7fe f82a 	bl	8000c8c <__aeabi_i2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8002c40:	f7fd ff6e 	bl	8000b20 <__aeabi_fsub>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4936      	ldr	r1, [pc, #216]	@ (8002d20 <processGcode+0x330>)
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f873 	bl	8000d34 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fa4b 	bl	80010ec <__aeabi_f2iz>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            
            sprintf(posMsg, "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c60:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8002c64:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bfb8      	it	lt
 8002c70:	425b      	neglt	r3, r3
 8002c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	bfb8      	it	lt
 8002c7a:	4252      	neglt	r2, r2
 8002c7c:	f107 0008 	add.w	r0, r7, #8
 8002c80:	9203      	str	r2, [sp, #12]
 8002c82:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002c86:	9202      	str	r2, [sp, #8]
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	460b      	mov	r3, r1
 8002c92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c96:	4923      	ldr	r1, [pc, #140]	@ (8002d24 <processGcode+0x334>)
 8002c98:	f009 fbda 	bl	800c450 <siprintf>
                   x_int, abs(x_dec), y_int, abs(y_dec), z_int, abs(z_dec));
            sendUSBText(posMsg);
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f8f9 	bl	8001e98 <sendUSBText>
 8002ca6:	e009      	b.n	8002cbc <processGcode+0x2cc>
        } else if (strncmp(command, "M503", 4) == 0) {
 8002ca8:	2204      	movs	r2, #4
 8002caa:	491f      	ldr	r1, [pc, #124]	@ (8002d28 <processGcode+0x338>)
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f009 fc3c 	bl	800c52a <strncmp>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <processGcode+0x2cc>
            // M503 - Mostrar configuración
            showConfiguration();
 8002cb8:	f000 f91a 	bl	8002ef0 <showConfiguration>
        }
    }
    
    // Enviar respuesta final usando el parser modular
    report_status_message(status);
 8002cbc:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f825 	bl	8001d10 <report_status_message>
}
 8002cc6:	37f8      	adds	r7, #248	@ 0xf8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0800ec10 	.word	0x0800ec10
 8002cd0:	0800ec20 	.word	0x0800ec20
 8002cd4:	0800ec30 	.word	0x0800ec30
 8002cd8:	0800ec3c 	.word	0x0800ec3c
 8002cdc:	0800ec4c 	.word	0x0800ec4c
 8002ce0:	0800ec5c 	.word	0x0800ec5c
 8002ce4:	0800ec6c 	.word	0x0800ec6c
 8002ce8:	0800ec7c 	.word	0x0800ec7c
 8002cec:	0800ec84 	.word	0x0800ec84
 8002cf0:	0800ec8c 	.word	0x0800ec8c
 8002cf4:	0800ec9c 	.word	0x0800ec9c
 8002cf8:	0800eca0 	.word	0x0800eca0
 8002cfc:	20002368 	.word	0x20002368
 8002d00:	0800eca4 	.word	0x0800eca4
 8002d04:	0800ecac 	.word	0x0800ecac
 8002d08:	0800ecc4 	.word	0x0800ecc4
 8002d0c:	200003a8 	.word	0x200003a8
 8002d10:	429e0000 	.word	0x429e0000
 8002d14:	200003ac 	.word	0x200003ac
 8002d18:	200003b0 	.word	0x200003b0
 8002d1c:	4575a000 	.word	0x4575a000
 8002d20:	42c80000 	.word	0x42c80000
 8002d24:	0800eccc 	.word	0x0800eccc
 8002d28:	0800ecec 	.word	0x0800ecec

08002d2c <loop>:

void loop(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
    //         endstopZWasPressed = false;
    //     }
    // }

    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <loop+0x90>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03c      	beq.n	8002db4 <loop+0x88>
                usbBufferIndex, usbBuffer);
        sendUSBText(debugStatus);
        #endif
        
        // Verificar que el buffer no esté vacío y contenga algo más que espacios
        bool hasValidCommand = false;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71fb      	strb	r3, [r7, #7]
        for (int i = 0; i < usbBufferIndex; i++) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	e01d      	b.n	8002d80 <loop+0x54>
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8002d44:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc0 <loop+0x94>)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d014      	beq.n	8002d7a <loop+0x4e>
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <loop+0x94>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b09      	cmp	r3, #9
 8002d5a:	d00e      	beq.n	8002d7a <loop+0x4e>
 8002d5c:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <loop+0x94>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b0d      	cmp	r3, #13
 8002d66:	d008      	beq.n	8002d7a <loop+0x4e>
 8002d68:	4a15      	ldr	r2, [pc, #84]	@ (8002dc0 <loop+0x94>)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b0a      	cmp	r3, #10
 8002d72:	d002      	beq.n	8002d7a <loop+0x4e>
                hasValidCommand = true;
 8002d74:	2301      	movs	r3, #1
 8002d76:	71fb      	strb	r3, [r7, #7]
                break;
 8002d78:	e007      	b.n	8002d8a <loop+0x5e>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4b10      	ldr	r3, [pc, #64]	@ (8002dc4 <loop+0x98>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	dbdc      	blt.n	8002d44 <loop+0x18>
            }
        }
        
        if (hasValidCommand && usbBufferIndex > 0) {
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <loop+0x72>
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <loop+0x98>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dd02      	ble.n	8002d9e <loop+0x72>
            char debugMsg[120];
            sprintf(debugMsg, ">>> [%s]\r\n", usbBuffer);
            sendUSBText(debugMsg);
            #endif
            
            processGcode(usbBuffer);
 8002d98:	4809      	ldr	r0, [pc, #36]	@ (8002dc0 <loop+0x94>)
 8002d9a:	f7ff fe29 	bl	80029f0 <processGcode>
        }
        
        // IMPORTANTE: Resetear todo después de procesar (o intentar procesar)
        usbBufferIndex = 0;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <loop+0x98>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002da4:	2264      	movs	r2, #100	@ 0x64
 8002da6:	2100      	movs	r1, #0
 8002da8:	4805      	ldr	r0, [pc, #20]	@ (8002dc0 <loop+0x94>)
 8002daa:	f009 fbb6 	bl	800c51a <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8002dae:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <loop+0x90>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	2000041c 	.word	0x2000041c
 8002dc0:	200003b4 	.word	0x200003b4
 8002dc4:	20000418 	.word	0x20000418

08002dc8 <setup>:

void setup(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <setup+0x3c>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002e04 <setup+0x3c>)
 8002dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <setup+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <setup+0x40>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    enableSteppers();
 8002de4:	f000 fc24 	bl	8003630 <enableSteppers>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2101      	movs	r1, #1
 8002dec:	4807      	ldr	r0, [pc, #28]	@ (8002e0c <setup+0x44>)
 8002dee:	f001 fd48 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2102      	movs	r1, #2
 8002df6:	4805      	ldr	r0, [pc, #20]	@ (8002e0c <setup+0x44>)
 8002df8:	f001 fd43 	bl	8004882 <HAL_GPIO_WritePin>
    
    // Inicializar parser G-code modular con callbacks
    gc_init();
 8002dfc:	f7fe f9f2 	bl	80011e4 <gc_init>
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e000edf0 	.word	0xe000edf0
 8002e08:	e0001000 	.word	0xe0001000
 8002e0c:	40010c00 	.word	0x40010c00

08002e10 <moveAxesRapidCallback>:
    // Usar función con feed rate por defecto (para compatibilidad)
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
}

// Callback específico para movimiento rápido G0
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	70fb      	strb	r3, [r7, #3]
    float target_x = x_defined ? x : NAN;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <moveAxesRapidCallback+0x18>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	e000      	b.n	8002e2a <moveAxesRapidCallback+0x1a>
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <moveAxesRapidCallback+0x58>)
 8002e2a:	61fb      	str	r3, [r7, #28]
    float target_y = y_defined ? y : NAN;
 8002e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <moveAxesRapidCallback+0x28>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	e000      	b.n	8002e3a <moveAxesRapidCallback+0x2a>
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <moveAxesRapidCallback+0x58>)
 8002e3a:	61bb      	str	r3, [r7, #24]
    float target_z = z_defined ? z : NAN;
 8002e3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <moveAxesRapidCallback+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	e000      	b.n	8002e4a <moveAxesRapidCallback+0x3a>
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <moveAxesRapidCallback+0x58>)
 8002e4a:	617b      	str	r3, [r7, #20]
    
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 8002e4c:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <moveAxesRapidCallback+0x5c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	9200      	str	r2, [sp, #0]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	69f8      	ldr	r0, [r7, #28]
 8002e5a:	f7ff f9dd 	bl	8002218 <moveAxesWithFeedRate>
}
 8002e5e:	bf00      	nop
 8002e60:	3720      	adds	r7, #32
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	7fc00000 	.word	0x7fc00000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <moveAxesLinearCallback>:

// Callback específico para movimiento lineal G1 con feed rate
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	@ 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
    float target_x = x_defined ? x : NAN;
 8002e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <moveAxesLinearCallback+0x1a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	e000      	b.n	8002e8c <moveAxesLinearCallback+0x1c>
 8002e8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <moveAxesLinearCallback+0x78>)
 8002e8c:	61fb      	str	r3, [r7, #28]
    float target_y = y_defined ? y : NAN;
 8002e8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <moveAxesLinearCallback+0x2a>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	e000      	b.n	8002e9c <moveAxesLinearCallback+0x2c>
 8002e9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <moveAxesLinearCallback+0x78>)
 8002e9c:	61bb      	str	r3, [r7, #24]
    float target_z = z_defined ? z : NAN;
 8002e9e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <moveAxesLinearCallback+0x3a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	e000      	b.n	8002eac <moveAxesLinearCallback+0x3c>
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <moveAxesLinearCallback+0x78>)
 8002eac:	617b      	str	r3, [r7, #20]
    
    // Actualizar feed rate actual si se especifica
    if (f_defined && feedRate > 0) {
 8002eae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <moveAxesLinearCallback+0x5c>
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f7fe f8f6 	bl	80010ac <__aeabi_fcmpgt>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <moveAxesLinearCallback+0x5c>
        currentFeedRate = feedRate;
 8002ec6:	4a09      	ldr	r2, [pc, #36]	@ (8002eec <moveAxesLinearCallback+0x7c>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6013      	str	r3, [r2, #0]
    }
    
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8002ecc:	4b07      	ldr	r3, [pc, #28]	@ (8002eec <moveAxesLinearCallback+0x7c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	9200      	str	r2, [sp, #0]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	69f8      	ldr	r0, [r7, #28]
 8002eda:	f7ff f99d 	bl	8002218 <moveAxesWithFeedRate>
}
 8002ede:	bf00      	nop
 8002ee0:	3720      	adds	r7, #32
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	7fc00000 	.word	0x7fc00000
 8002eec:	20000000 	.word	0x20000000

08002ef0 <showConfiguration>:

// Función auxiliar para movimiento genérico (no utilizada actualmente)
// Se mantiene para compatibilidad futura

// Función para mostrar la configuración actual del sistema
void showConfiguration(void) {
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b0c7      	sub	sp, #284	@ 0x11c
 8002ef4:	af04      	add	r7, sp, #16
    char msg[200];
    
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8002ef6:	48c8      	ldr	r0, [pc, #800]	@ (8003218 <showConfiguration+0x328>)
 8002ef8:	f7fe ffce 	bl	8001e98 <sendUSBText>
    
    sprintf(msg, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	224f      	movs	r2, #79	@ 0x4f
 8002f00:	49c6      	ldr	r1, [pc, #792]	@ (800321c <showConfiguration+0x32c>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f009 faa4 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd f920 	bl	8000150 <strlen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f007 feaf 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	224f      	movs	r2, #79	@ 0x4f
 8002f22:	49bf      	ldr	r1, [pc, #764]	@ (8003220 <showConfiguration+0x330>)
 8002f24:	4618      	mov	r0, r3
 8002f26:	f009 fa93 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd f90f 	bl	8000150 <strlen>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	1d3b      	adds	r3, r7, #4
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f007 fe9e 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8002f46:	49b7      	ldr	r1, [pc, #732]	@ (8003224 <showConfiguration+0x334>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f009 fa81 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd f8fd 	bl	8000150 <strlen>
 8002f56:	4603      	mov	r3, r0
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f007 fe8c 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Step delay: %d us\r\n", STEP_DELAY_US);
 8002f64:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002f68:	461a      	mov	r2, r3
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	49ae      	ldr	r1, [pc, #696]	@ (8003228 <showConfiguration+0x338>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f009 fa6e 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd f8ea 	bl	8000150 <strlen>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f007 fe79 	bl	800ac7c <CDC_Transmit_FS>
    
    // Convertir feed rate actual a enteros
    int feed_int = (int)currentFeedRate;
 8002f8a:	4ba8      	ldr	r3, [pc, #672]	@ (800322c <showConfiguration+0x33c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe f8ac 	bl	80010ec <__aeabi_f2iz>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8002f9a:	4ba4      	ldr	r3, [pc, #656]	@ (800322c <showConfiguration+0x33c>)
 8002f9c:	681c      	ldr	r4, [r3, #0]
 8002f9e:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8002fa2:	f7fd fe73 	bl	8000c8c <__aeabi_i2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fd fdb8 	bl	8000b20 <__aeabi_fsub>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	499f      	ldr	r1, [pc, #636]	@ (8003230 <showConfiguration+0x340>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd febd 	bl	8000d34 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe f895 	bl	80010ec <__aeabi_f2iz>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    sprintf(msg, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8002fc8:	1d38      	adds	r0, r7, #4
 8002fca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002fce:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8002fd2:	4998      	ldr	r1, [pc, #608]	@ (8003234 <showConfiguration+0x344>)
 8002fd4:	f009 fa3c 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002fd8:	1d3b      	adds	r3, r7, #4
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd f8b8 	bl	8000150 <strlen>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f007 fe47 	bl	800ac7c <CDC_Transmit_FS>
    
    // Convertir velocidades a enteros para mostrar
    int rapid_int = (int)rapidRate;
 8002fee:	4b92      	ldr	r3, [pc, #584]	@ (8003238 <showConfiguration+0x348>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe f87a 	bl	80010ec <__aeabi_f2iz>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8002ffe:	4b8e      	ldr	r3, [pc, #568]	@ (8003238 <showConfiguration+0x348>)
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8003006:	f7fd fe41 	bl	8000c8c <__aeabi_i2f>
 800300a:	4603      	mov	r3, r0
 800300c:	4619      	mov	r1, r3
 800300e:	4620      	mov	r0, r4
 8003010:	f7fd fd86 	bl	8000b20 <__aeabi_fsub>
 8003014:	4603      	mov	r3, r0
 8003016:	4986      	ldr	r1, [pc, #536]	@ (8003230 <showConfiguration+0x340>)
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fe8b 	bl	8000d34 <__aeabi_fmul>
 800301e:	4603      	mov	r3, r0
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe f863 	bl	80010ec <__aeabi_f2iz>
 8003026:	4603      	mov	r3, r0
 8003028:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    sprintf(msg, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 800302c:	1d38      	adds	r0, r7, #4
 800302e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003032:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8003036:	4981      	ldr	r1, [pc, #516]	@ (800323c <showConfiguration+0x34c>)
 8003038:	f009 fa0a 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd f886 	bl	8000150 <strlen>
 8003044:	4603      	mov	r3, r0
 8003046:	b29a      	uxth	r2, r3
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f007 fe15 	bl	800ac7c <CDC_Transmit_FS>
    
    int max_int = (int)maxFeedRate;
 8003052:	4b7b      	ldr	r3, [pc, #492]	@ (8003240 <showConfiguration+0x350>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f848 	bl	80010ec <__aeabi_f2iz>
 800305c:	4603      	mov	r3, r0
 800305e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8003062:	4b77      	ldr	r3, [pc, #476]	@ (8003240 <showConfiguration+0x350>)
 8003064:	681c      	ldr	r4, [r3, #0]
 8003066:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 800306a:	f7fd fe0f 	bl	8000c8c <__aeabi_i2f>
 800306e:	4603      	mov	r3, r0
 8003070:	4619      	mov	r1, r3
 8003072:	4620      	mov	r0, r4
 8003074:	f7fd fd54 	bl	8000b20 <__aeabi_fsub>
 8003078:	4603      	mov	r3, r0
 800307a:	496d      	ldr	r1, [pc, #436]	@ (8003230 <showConfiguration+0x340>)
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fe59 	bl	8000d34 <__aeabi_fmul>
 8003082:	4603      	mov	r3, r0
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe f831 	bl	80010ec <__aeabi_f2iz>
 800308a:	4603      	mov	r3, r0
 800308c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    sprintf(msg, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8003090:	1d38      	adds	r0, r7, #4
 8003092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003096:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800309a:	496a      	ldr	r1, [pc, #424]	@ (8003244 <showConfiguration+0x354>)
 800309c:	f009 f9d8 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f854 	bl	8000150 <strlen>
 80030a8:	4603      	mov	r3, r0
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f007 fde3 	bl	800ac7c <CDC_Transmit_FS>
    
    // Mostrar posición actual
    float xPos = currentX / (float)STEPS_PER_MM_X;
 80030b6:	4b64      	ldr	r3, [pc, #400]	@ (8003248 <showConfiguration+0x358>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fde6 	bl	8000c8c <__aeabi_i2f>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4962      	ldr	r1, [pc, #392]	@ (800324c <showConfiguration+0x35c>)
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd fee9 	bl	8000e9c <__aeabi_fdiv>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 80030d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003250 <showConfiguration+0x360>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fdd9 	bl	8000c8c <__aeabi_i2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	495b      	ldr	r1, [pc, #364]	@ (800324c <showConfiguration+0x35c>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fedc 	bl	8000e9c <__aeabi_fdiv>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 80030ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003254 <showConfiguration+0x364>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fdcc 	bl	8000c8c <__aeabi_i2f>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4958      	ldr	r1, [pc, #352]	@ (8003258 <showConfiguration+0x368>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fecf 	bl	8000e9c <__aeabi_fdiv>
 80030fe:	4603      	mov	r3, r0
 8003100:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    
    // Convertir a enteros para evitar problemas con printf float
    int x_int = (int)xPos;
 8003104:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8003108:	f7fd fff0 	bl	80010ec <__aeabi_f2iz>
 800310c:	4603      	mov	r3, r0
 800310e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    int x_dec = (int)((xPos - x_int) * 100);
 8003112:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8003116:	f7fd fdb9 	bl	8000c8c <__aeabi_i2f>
 800311a:	4603      	mov	r3, r0
 800311c:	4619      	mov	r1, r3
 800311e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8003122:	f7fd fcfd 	bl	8000b20 <__aeabi_fsub>
 8003126:	4603      	mov	r3, r0
 8003128:	494c      	ldr	r1, [pc, #304]	@ (800325c <showConfiguration+0x36c>)
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fe02 	bl	8000d34 <__aeabi_fmul>
 8003130:	4603      	mov	r3, r0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd ffda 	bl	80010ec <__aeabi_f2iz>
 8003138:	4603      	mov	r3, r0
 800313a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    int y_int = (int)yPos;
 800313e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8003142:	f7fd ffd3 	bl	80010ec <__aeabi_f2iz>
 8003146:	4603      	mov	r3, r0
 8003148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    int y_dec = (int)((yPos - y_int) * 100);
 800314c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8003150:	f7fd fd9c 	bl	8000c8c <__aeabi_i2f>
 8003154:	4603      	mov	r3, r0
 8003156:	4619      	mov	r1, r3
 8003158:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 800315c:	f7fd fce0 	bl	8000b20 <__aeabi_fsub>
 8003160:	4603      	mov	r3, r0
 8003162:	493e      	ldr	r1, [pc, #248]	@ (800325c <showConfiguration+0x36c>)
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fde5 	bl	8000d34 <__aeabi_fmul>
 800316a:	4603      	mov	r3, r0
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd ffbd 	bl	80010ec <__aeabi_f2iz>
 8003172:	4603      	mov	r3, r0
 8003174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    int z_int = (int)zPos;
 8003178:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800317c:	f7fd ffb6 	bl	80010ec <__aeabi_f2iz>
 8003180:	4603      	mov	r3, r0
 8003182:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    int z_dec = (int)((zPos - z_int) * 100);
 8003186:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 800318a:	f7fd fd7f 	bl	8000c8c <__aeabi_i2f>
 800318e:	4603      	mov	r3, r0
 8003190:	4619      	mov	r1, r3
 8003192:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8003196:	f7fd fcc3 	bl	8000b20 <__aeabi_fsub>
 800319a:	4603      	mov	r3, r0
 800319c:	492f      	ldr	r1, [pc, #188]	@ (800325c <showConfiguration+0x36c>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fdc8 	bl	8000d34 <__aeabi_fmul>
 80031a4:	4603      	mov	r3, r0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd ffa0 	bl	80010ec <__aeabi_f2iz>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    
    sprintf(msg, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n", 
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031b6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80031ba:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfb8      	it	lt
 80031c6:	425b      	neglt	r3, r3
 80031c8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	bfb8      	it	lt
 80031d0:	4252      	neglt	r2, r2
 80031d2:	1d38      	adds	r0, r7, #4
 80031d4:	9203      	str	r2, [sp, #12]
 80031d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031da:	9202      	str	r2, [sp, #8]
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80031ea:	491d      	ldr	r1, [pc, #116]	@ (8003260 <showConfiguration+0x370>)
 80031ec:	f009 f930 	bl	800c450 <siprintf>
           x_int, abs(x_dec), y_int, abs(y_dec), z_int, abs(z_dec));
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fc ffac 	bl	8000150 <strlen>
 80031f8:	4603      	mov	r3, r0
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f007 fd3b 	bl	800ac7c <CDC_Transmit_FS>
    
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8003206:	4817      	ldr	r0, [pc, #92]	@ (8003264 <showConfiguration+0x374>)
 8003208:	f7fe fe46 	bl	8001e98 <sendUSBText>
}
 800320c:	bf00      	nop
 800320e:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	bf00      	nop
 8003218:	0800ed28 	.word	0x0800ed28
 800321c:	0800ed48 	.word	0x0800ed48
 8003220:	0800ed60 	.word	0x0800ed60
 8003224:	0800ed78 	.word	0x0800ed78
 8003228:	0800ed90 	.word	0x0800ed90
 800322c:	20000000 	.word	0x20000000
 8003230:	41200000 	.word	0x41200000
 8003234:	0800eda4 	.word	0x0800eda4
 8003238:	20000004 	.word	0x20000004
 800323c:	0800edc8 	.word	0x0800edc8
 8003240:	20000008 	.word	0x20000008
 8003244:	0800edf0 	.word	0x0800edf0
 8003248:	200003a8 	.word	0x200003a8
 800324c:	429e0000 	.word	0x429e0000
 8003250:	200003ac 	.word	0x200003ac
 8003254:	200003b0 	.word	0x200003b0
 8003258:	4575a000 	.word	0x4575a000
 800325c:	42c80000 	.word	0x42c80000
 8003260:	0800ee14 	.word	0x0800ee14
 8003264:	0800ee48 	.word	0x0800ee48

08003268 <isEndstopPressed>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
    switch(axis) {
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b5a      	cmp	r3, #90	@ 0x5a
 8003276:	d01e      	beq.n	80032b6 <isEndstopPressed+0x4e>
 8003278:	2b5a      	cmp	r3, #90	@ 0x5a
 800327a:	dc28      	bgt.n	80032ce <isEndstopPressed+0x66>
 800327c:	2b58      	cmp	r3, #88	@ 0x58
 800327e:	d002      	beq.n	8003286 <isEndstopPressed+0x1e>
 8003280:	2b59      	cmp	r3, #89	@ 0x59
 8003282:	d00c      	beq.n	800329e <isEndstopPressed+0x36>
 8003284:	e023      	b.n	80032ce <isEndstopPressed+0x66>
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8003286:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800328a:	4813      	ldr	r0, [pc, #76]	@ (80032d8 <isEndstopPressed+0x70>)
 800328c:	f001 fae2 	bl	8004854 <HAL_GPIO_ReadPin>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e018      	b.n	80032d0 <isEndstopPressed+0x68>
        case 'Y':
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 800329e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80032a2:	480d      	ldr	r0, [pc, #52]	@ (80032d8 <isEndstopPressed+0x70>)
 80032a4:	f001 fad6 	bl	8004854 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bf0c      	ite	eq
 80032ae:	2301      	moveq	r3, #1
 80032b0:	2300      	movne	r3, #0
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	e00c      	b.n	80032d0 <isEndstopPressed+0x68>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 80032b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032ba:	4807      	ldr	r0, [pc, #28]	@ (80032d8 <isEndstopPressed+0x70>)
 80032bc:	f001 faca 	bl	8004854 <HAL_GPIO_ReadPin>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e000      	b.n	80032d0 <isEndstopPressed+0x68>
        default:
            return false;
 80032ce:	2300      	movs	r3, #0
    }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40010c00 	.word	0x40010c00

080032dc <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b09a      	sub	sp, #104	@ 0x68
 80032e0:	af00      	add	r7, sp, #0
    char msg[80];
    
    // Enviar mensaje de inicio de homing
    sendUSBText("Iniciando secuencia de homingg...\r\n");
 80032e2:	48c2      	ldr	r0, [pc, #776]	@ (80035ec <performHoming+0x310>)
 80032e4:	f7fe fdd8 	bl	8001e98 <sendUSBText>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(msg, "Fase 1: Buscando finales de carrera...\r\n");
 80032e8:	463b      	mov	r3, r7
 80032ea:	49c1      	ldr	r1, [pc, #772]	@ (80035f0 <performHoming+0x314>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f009 f8af 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80032f2:	463b      	mov	r3, r7
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ff2b 	bl	8000150 <strlen>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	463b      	mov	r3, r7
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f007 fcba 	bl	800ac7c <CDC_Transmit_FS>
    
    // Homing del eje X
    sprintf(msg, "Homing eje X...\r\n");
 8003308:	463b      	mov	r3, r7
 800330a:	49ba      	ldr	r1, [pc, #744]	@ (80035f4 <performHoming+0x318>)
 800330c:	4618      	mov	r0, r3
 800330e:	f009 f89f 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003312:	463b      	mov	r3, r7
 8003314:	4618      	mov	r0, r3
 8003316:	f7fc ff1b 	bl	8000150 <strlen>
 800331a:	4603      	mov	r3, r0
 800331c:	b29a      	uxth	r2, r3
 800331e:	463b      	mov	r3, r7
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f007 fcaa 	bl	800ac7c <CDC_Transmit_FS>

    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	@ 0x80
 800332c:	48b2      	ldr	r0, [pc, #712]	@ (80035f8 <performHoming+0x31c>)
 800332e:	f001 faa8 	bl	8004882 <HAL_GPIO_WritePin>
    // Mover hacia el final de carrera X (dirección negativa)
    while (!isEndstopPressed('X')) {
 8003332:	e006      	b.n	8003342 <performHoming+0x66>
        X_stepOnce();
 8003334:	f7fe fede 	bl	80020f4 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8003338:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe feb3 	bl	80020a8 <delay_us>
    while (!isEndstopPressed('X')) {
 8003342:	2058      	movs	r0, #88	@ 0x58
 8003344:	f7ff ff90 	bl	8003268 <isEndstopPressed>
 8003348:	4603      	mov	r3, r0
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1ef      	bne.n	8003334 <performHoming+0x58>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8003354:	2201      	movs	r2, #1
 8003356:	2180      	movs	r1, #128	@ 0x80
 8003358:	48a7      	ldr	r0, [pc, #668]	@ (80035f8 <performHoming+0x31c>)
 800335a:	f001 fa92 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 800335e:	2300      	movs	r3, #0
 8003360:	667b      	str	r3, [r7, #100]	@ 0x64
 8003362:	e009      	b.n	8003378 <performHoming+0x9c>
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 8003364:	f7fe fec6 	bl	80020f4 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8003368:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fe9b 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8003372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003374:	3301      	adds	r3, #1
 8003376:	667b      	str	r3, [r7, #100]	@ 0x64
 8003378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800337a:	2b9d      	cmp	r3, #157	@ 0x9d
 800337c:	ddf2      	ble.n	8003364 <performHoming+0x88>
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 800337e:	2200      	movs	r2, #0
 8003380:	2180      	movs	r1, #128	@ 0x80
 8003382:	489d      	ldr	r0, [pc, #628]	@ (80035f8 <performHoming+0x31c>)
 8003384:	f001 fa7d 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8003388:	2300      	movs	r3, #0
 800338a:	663b      	str	r3, [r7, #96]	@ 0x60
 800338c:	e00d      	b.n	80033aa <performHoming+0xce>
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 800338e:	f7fe feb1 	bl	80020f4 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3);
 8003392:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003396:	461a      	mov	r2, r3
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fe82 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 80033a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033a6:	3301      	adds	r3, #1
 80033a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80033aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ac:	2b9d      	cmp	r3, #157	@ 0x9d
 80033ae:	ddee      	ble.n	800338e <performHoming+0xb2>
    }
    if (!isEndstopPressed('X')) {
 80033b0:	2058      	movs	r0, #88	@ 0x58
 80033b2:	f7ff ff59 	bl	8003268 <isEndstopPressed>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <performHoming+0xf0>
        CDC_Transmit_FS((uint8_t*)"Error: Final de carrera X no presionado\r\n", 41);
 80033c2:	2129      	movs	r1, #41	@ 0x29
 80033c4:	488d      	ldr	r0, [pc, #564]	@ (80035fc <performHoming+0x320>)
 80033c6:	f007 fc59 	bl	800ac7c <CDC_Transmit_FS>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 80033ca:	e10b      	b.n	80035e4 <performHoming+0x308>
    }
    
    currentX = 0; // Establecer posición home
 80033cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003600 <performHoming+0x324>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje X en posición home\r\n");
 80033d2:	463b      	mov	r3, r7
 80033d4:	498b      	ldr	r1, [pc, #556]	@ (8003604 <performHoming+0x328>)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f009 f83a 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80033dc:	463b      	mov	r3, r7
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fc feb6 	bl	8000150 <strlen>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	463b      	mov	r3, r7
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f007 fc45 	bl	800ac7c <CDC_Transmit_FS>
    
    // Homing del eje Y
    sprintf(msg, "Homing eje Y...\r\n");
 80033f2:	463b      	mov	r3, r7
 80033f4:	4984      	ldr	r1, [pc, #528]	@ (8003608 <performHoming+0x32c>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f009 f82a 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80033fc:	463b      	mov	r3, r7
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fc fea6 	bl	8000150 <strlen>
 8003404:	4603      	mov	r3, r0
 8003406:	b29a      	uxth	r2, r3
 8003408:	463b      	mov	r3, r7
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f007 fc35 	bl	800ac7c <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Y (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8003412:	2200      	movs	r2, #0
 8003414:	2108      	movs	r1, #8
 8003416:	4878      	ldr	r0, [pc, #480]	@ (80035f8 <performHoming+0x31c>)
 8003418:	f001 fa33 	bl	8004882 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 800341c:	e006      	b.n	800342c <performHoming+0x150>
        Y_stepOnce();
 800341e:	f7fe fe7d 	bl	800211c <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8003422:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe fe3e 	bl	80020a8 <delay_us>
    while (!isEndstopPressed('Y')) {
 800342c:	2059      	movs	r0, #89	@ 0x59
 800342e:	f7ff ff1b 	bl	8003268 <isEndstopPressed>
 8003432:	4603      	mov	r3, r0
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <performHoming+0x142>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 800343e:	2201      	movs	r2, #1
 8003440:	2108      	movs	r1, #8
 8003442:	486d      	ldr	r0, [pc, #436]	@ (80035f8 <performHoming+0x31c>)
 8003444:	f001 fa1d 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8003448:	2300      	movs	r3, #0
 800344a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800344c:	e009      	b.n	8003462 <performHoming+0x186>
        //if (!isEndstopPressed('Y'));
        Y_stepOnce();
 800344e:	f7fe fe65 	bl	800211c <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8003452:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fe26 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 800345c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800345e:	3301      	adds	r3, #1
 8003460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003464:	2b9d      	cmp	r3, #157	@ 0x9d
 8003466:	ddf2      	ble.n	800344e <performHoming+0x172>
    }
    
    // FASE 2: Movimiento lento de precisión para Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8003468:	2200      	movs	r2, #0
 800346a:	2108      	movs	r1, #8
 800346c:	4862      	ldr	r0, [pc, #392]	@ (80035f8 <performHoming+0x31c>)
 800346e:	f001 fa08 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8003472:	2300      	movs	r3, #0
 8003474:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003476:	e00d      	b.n	8003494 <performHoming+0x1b8>
        //if (!isEndstopPressed('Y'));
        Y_stepOnce();
 8003478:	f7fe fe50 	bl	800211c <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 800347c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003480:	461a      	mov	r2, r3
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fe0d 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 800348e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003490:	3301      	adds	r3, #1
 8003492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003496:	2b9d      	cmp	r3, #157	@ 0x9d
 8003498:	ddee      	ble.n	8003478 <performHoming+0x19c>
    }
    if (!isEndstopPressed('Y')) {
 800349a:	2059      	movs	r0, #89	@ 0x59
 800349c:	f7ff fee4 	bl	8003268 <isEndstopPressed>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f083 0301 	eor.w	r3, r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <performHoming+0x1da>
        CDC_Transmit_FS((uint8_t*)"Error: Final de carrera Y no presionado\r\n", 41);
 80034ac:	2129      	movs	r1, #41	@ 0x29
 80034ae:	4857      	ldr	r0, [pc, #348]	@ (800360c <performHoming+0x330>)
 80034b0:	f007 fbe4 	bl	800ac7c <CDC_Transmit_FS>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 80034b4:	e096      	b.n	80035e4 <performHoming+0x308>
    }
    
    currentY = 0; // Establecer posición home
 80034b6:	4b56      	ldr	r3, [pc, #344]	@ (8003610 <performHoming+0x334>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Y en posición home\r\n");
 80034bc:	463b      	mov	r3, r7
 80034be:	4955      	ldr	r1, [pc, #340]	@ (8003614 <performHoming+0x338>)
 80034c0:	4618      	mov	r0, r3
 80034c2:	f008 ffc5 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80034c6:	463b      	mov	r3, r7
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fc fe41 	bl	8000150 <strlen>
 80034ce:	4603      	mov	r3, r0
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	463b      	mov	r3, r7
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f007 fbd0 	bl	800ac7c <CDC_Transmit_FS>
    
    // Homing del eje Z
    sprintf(msg, "Homing eje Z...\r\n");
 80034dc:	463b      	mov	r3, r7
 80034de:	494e      	ldr	r1, [pc, #312]	@ (8003618 <performHoming+0x33c>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f008 ffb5 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80034e6:	463b      	mov	r3, r7
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fc fe31 	bl	8000150 <strlen>
 80034ee:	4603      	mov	r3, r0
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	463b      	mov	r3, r7
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f007 fbc0 	bl	800ac7c <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Z (dirección negativa)
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 80034fc:	2201      	movs	r2, #1
 80034fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003502:	4846      	ldr	r0, [pc, #280]	@ (800361c <performHoming+0x340>)
 8003504:	f001 f9bd 	bl	8004882 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8003508:	e008      	b.n	800351c <performHoming+0x240>
        Z_stepOnce();
 800350a:	f7fe fe1d 	bl	8002148 <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 800350e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fdc6 	bl	80020a8 <delay_us>
    while (!isEndstopPressed('Z')) {
 800351c:	205a      	movs	r0, #90	@ 0x5a
 800351e:	f7ff fea3 	bl	8003268 <isEndstopPressed>
 8003522:	4603      	mov	r3, r0
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ed      	bne.n	800350a <performHoming+0x22e>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 800352e:	2200      	movs	r2, #0
 8003530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003534:	4839      	ldr	r0, [pc, #228]	@ (800361c <performHoming+0x340>)
 8003536:	f001 f9a4 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 800353a:	2300      	movs	r3, #0
 800353c:	657b      	str	r3, [r7, #84]	@ 0x54
 800353e:	e00b      	b.n	8003558 <performHoming+0x27c>
        // if (!isEndstopPressed('Z'));
        Z_stepOnce();
 8003540:	f7fe fe02 	bl	8002148 <Z_stepOnce>
        delay_us(STEP_DELAY_US/2);
 8003544:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fdab 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	3301      	adds	r3, #1
 8003556:	657b      	str	r3, [r7, #84]	@ 0x54
 8003558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355a:	f641 62b3 	movw	r2, #7859	@ 0x1eb3
 800355e:	4293      	cmp	r3, r2
 8003560:	ddee      	ble.n	8003540 <performHoming+0x264>
    }
    
    // FASE 2: Movimiento lento de precisión para Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8003562:	2201      	movs	r2, #1
 8003564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003568:	482c      	ldr	r0, [pc, #176]	@ (800361c <performHoming+0x340>)
 800356a:	f001 f98a 	bl	8004882 <HAL_GPIO_WritePin>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 800356e:	2300      	movs	r3, #0
 8003570:	653b      	str	r3, [r7, #80]	@ 0x50
 8003572:	e00d      	b.n	8003590 <performHoming+0x2b4>
        // if (!isEndstopPressed('Z'));
        Z_stepOnce();
 8003574:	f7fe fde8 	bl	8002148 <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8003578:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800357c:	461a      	mov	r2, r3
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fd8f 	bl	80020a8 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 800358a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358c:	3301      	adds	r3, #1
 800358e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003592:	f641 62b3 	movw	r2, #7859	@ 0x1eb3
 8003596:	4293      	cmp	r3, r2
 8003598:	ddec      	ble.n	8003574 <performHoming+0x298>
    }
    if (!isEndstopPressed('Z')) {
 800359a:	205a      	movs	r0, #90	@ 0x5a
 800359c:	f7ff fe64 	bl	8003268 <isEndstopPressed>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f083 0301 	eor.w	r3, r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <performHoming+0x2da>
        CDC_Transmit_FS((uint8_t*)"Error: Final de carrera Z no presionado\r\n", 41);
 80035ac:	2129      	movs	r1, #41	@ 0x29
 80035ae:	481c      	ldr	r0, [pc, #112]	@ (8003620 <performHoming+0x344>)
 80035b0:	f007 fb64 	bl	800ac7c <CDC_Transmit_FS>
        // Activar interrupción o LED de error
        return; // Salir si no se presionó el endstop
 80035b4:	e016      	b.n	80035e4 <performHoming+0x308>
    }
    
    currentZ = 0; // Establecer posición home
 80035b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <performHoming+0x348>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Z en posición home\r\n");
 80035bc:	463b      	mov	r3, r7
 80035be:	491a      	ldr	r1, [pc, #104]	@ (8003628 <performHoming+0x34c>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f008 ff45 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80035c6:	463b      	mov	r3, r7
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc fdc1 	bl	8000150 <strlen>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	463b      	mov	r3, r7
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f007 fb50 	bl	800ac7c <CDC_Transmit_FS>
    
    // Mensaje final
    CDC_Transmit_FS((uint8_t*)"Homing completado. Todos los ejes en posición home.\r\n", 54);
 80035dc:	2136      	movs	r1, #54	@ 0x36
 80035de:	4813      	ldr	r0, [pc, #76]	@ (800362c <performHoming+0x350>)
 80035e0:	f007 fb4c 	bl	800ac7c <CDC_Transmit_FS>
}
 80035e4:	3768      	adds	r7, #104	@ 0x68
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	0800ee68 	.word	0x0800ee68
 80035f0:	0800ee8c 	.word	0x0800ee8c
 80035f4:	0800eeb8 	.word	0x0800eeb8
 80035f8:	40010c00 	.word	0x40010c00
 80035fc:	0800eecc 	.word	0x0800eecc
 8003600:	200003a8 	.word	0x200003a8
 8003604:	0800eef8 	.word	0x0800eef8
 8003608:	0800ef14 	.word	0x0800ef14
 800360c:	0800ef28 	.word	0x0800ef28
 8003610:	200003ac 	.word	0x200003ac
 8003614:	0800ef54 	.word	0x0800ef54
 8003618:	0800ef70 	.word	0x0800ef70
 800361c:	40010800 	.word	0x40010800
 8003620:	0800ef84 	.word	0x0800ef84
 8003624:	200003b0 	.word	0x200003b0
 8003628:	0800efb0 	.word	0x0800efb0
 800362c:	0800efcc 	.word	0x0800efcc

08003630 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800363a:	4808      	ldr	r0, [pc, #32]	@ (800365c <enableSteppers+0x2c>)
 800363c:	f001 f921 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 8003640:	2200      	movs	r2, #0
 8003642:	2110      	movs	r1, #16
 8003644:	4805      	ldr	r0, [pc, #20]	@ (800365c <enableSteppers+0x2c>)
 8003646:	f001 f91c 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003650:	4803      	ldr	r0, [pc, #12]	@ (8003660 <enableSteppers+0x30>)
 8003652:	f001 f916 	bl	8004882 <HAL_GPIO_WritePin>
}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40010c00 	.word	0x40010c00
 8003660:	40010800 	.word	0x40010800

08003664 <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 8003668:	2201      	movs	r2, #1
 800366a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800366e:	4808      	ldr	r0, [pc, #32]	@ (8003690 <disableSteppers+0x2c>)
 8003670:	f001 f907 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 8003674:	2201      	movs	r2, #1
 8003676:	2110      	movs	r1, #16
 8003678:	4805      	ldr	r0, [pc, #20]	@ (8003690 <disableSteppers+0x2c>)
 800367a:	f001 f902 	bl	8004882 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 800367e:	2201      	movs	r2, #1
 8003680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003684:	4803      	ldr	r0, [pc, #12]	@ (8003694 <disableSteppers+0x30>)
 8003686:	f001 f8fc 	bl	8004882 <HAL_GPIO_WritePin>
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40010c00 	.word	0x40010c00
 8003694:	40010800 	.word	0x40010800

08003698 <startProgramStorage>:

/**
  * @brief  Inicia el modo de almacenamiento de programa
  * @retval None
  */
void startProgramStorage(void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
    isStoringProgram = true;
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <startProgramStorage+0x5c>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <startProgramStorage+0x60>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
    isProgramLoaded = false;
 80036aa:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <startProgramStorage+0x64>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    
    // Limpiar buffer de programa
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	e00e      	b.n	80036d4 <startProgramStorage+0x3c>
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003700 <startProgramStorage+0x68>)
 80036c2:	4413      	add	r3, r2
 80036c4:	2250      	movs	r2, #80	@ 0x50
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f008 ff26 	bl	800c51a <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3301      	adds	r3, #1
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b63      	cmp	r3, #99	@ 0x63
 80036d8:	dded      	ble.n	80036b6 <startProgramStorage+0x1e>
    }
    
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 80036da:	480a      	ldr	r0, [pc, #40]	@ (8003704 <startProgramStorage+0x6c>)
 80036dc:	f7fe fbdc 	bl	8001e98 <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 80036e0:	4809      	ldr	r0, [pc, #36]	@ (8003708 <startProgramStorage+0x70>)
 80036e2:	f7fe fbd9 	bl	8001e98 <sendUSBText>
    sendUSBText("ok\r\n");
 80036e6:	4809      	ldr	r0, [pc, #36]	@ (800370c <startProgramStorage+0x74>)
 80036e8:	f7fe fbd6 	bl	8001e98 <sendUSBText>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20002368 	.word	0x20002368
 80036f8:	20002360 	.word	0x20002360
 80036fc:	20002369 	.word	0x20002369
 8003700:	20000420 	.word	0x20000420
 8003704:	0800f004 	.word	0x0800f004
 8003708:	0800f03c 	.word	0x0800f03c
 800370c:	0800eca4 	.word	0x0800eca4

08003710 <stopProgramStorage>:

/**
  * @brief  Detiene el modo de almacenamiento de programa
  * @retval None
  */
void stopProgramStorage(void) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b09a      	sub	sp, #104	@ 0x68
 8003714:	af00      	add	r7, sp, #0
    isStoringProgram = false;
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <stopProgramStorage+0x5c>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
    
    if (programLineCount > 0) {
 800371c:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <stopProgramStorage+0x60>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	dd18      	ble.n	8003756 <stopProgramStorage+0x46>
        isProgramLoaded = true;
 8003724:	4b13      	ldr	r3, [pc, #76]	@ (8003774 <stopProgramStorage+0x64>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
        char msg[100];
        sprintf(msg, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <stopProgramStorage+0x60>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	4911      	ldr	r1, [pc, #68]	@ (8003778 <stopProgramStorage+0x68>)
 8003732:	4618      	mov	r0, r3
 8003734:	f008 fe8c 	bl	800c450 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fd08 	bl	8000150 <strlen>
 8003740:	4603      	mov	r3, r0
 8003742:	b29a      	uxth	r2, r3
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f007 fa97 	bl	800ac7c <CDC_Transmit_FS>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 800374e:	480b      	ldr	r0, [pc, #44]	@ (800377c <stopProgramStorage+0x6c>)
 8003750:	f7fe fba2 	bl	8001e98 <sendUSBText>
 8003754:	e002      	b.n	800375c <stopProgramStorage+0x4c>
    } else {
        sendUSBText("No se almacenaron lineas\r\n");
 8003756:	480a      	ldr	r0, [pc, #40]	@ (8003780 <stopProgramStorage+0x70>)
 8003758:	f7fe fb9e 	bl	8001e98 <sendUSBText>
    }
    
    sendUSBText("ok\r\n");
 800375c:	4809      	ldr	r0, [pc, #36]	@ (8003784 <stopProgramStorage+0x74>)
 800375e:	f7fe fb9b 	bl	8001e98 <sendUSBText>
}
 8003762:	bf00      	nop
 8003764:	3768      	adds	r7, #104	@ 0x68
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20002368 	.word	0x20002368
 8003770:	20002360 	.word	0x20002360
 8003774:	20002369 	.word	0x20002369
 8003778:	0800f064 	.word	0x0800f064
 800377c:	0800f090 	.word	0x0800f090
 8003780:	0800f0d8 	.word	0x0800f0d8
 8003784:	0800eca4 	.word	0x0800eca4

08003788 <addLineToProgram>:
/**
  * @brief  Agrega una línea al programa almacenado
  * @param  line: Línea de G-code a agregar
  * @retval true si se agregó exitosamente, false si el buffer está lleno
  */
bool addLineToProgram(const char* line) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    if (programLineCount >= MAX_GCODE_LINES) {
 8003790:	4b3c      	ldr	r3, [pc, #240]	@ (8003884 <addLineToProgram+0xfc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b63      	cmp	r3, #99	@ 0x63
 8003796:	dd01      	ble.n	800379c <addLineToProgram+0x14>
        return false; // Buffer lleno
 8003798:	2300      	movs	r3, #0
 800379a:	e06e      	b.n	800387a <addLineToProgram+0xf2>
    }
    
    // Copiar la línea, eliminando espacios al inicio y final
    const char* start = line;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60fb      	str	r3, [r7, #12]
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 80037a0:	e002      	b.n	80037a8 <addLineToProgram+0x20>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d0f8      	beq.n	80037a2 <addLineToProgram+0x1a>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b09      	cmp	r3, #9
 80037b6:	d0f4      	beq.n	80037a2 <addLineToProgram+0x1a>
    
    if (strlen(start) == 0) {
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <addLineToProgram+0x3c>
        return true; // Línea vacía, no la almacenamos pero no es error
 80037c0:	2301      	movs	r3, #1
 80037c2:	e05a      	b.n	800387a <addLineToProgram+0xf2>
    }
    
    strncpy(gcodeProgram[programLineCount], start, MAX_LINE_LENGTH - 1);
 80037c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003884 <addLineToProgram+0xfc>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <addLineToProgram+0x100>)
 80037d2:	4413      	add	r3, r2
 80037d4:	224f      	movs	r2, #79	@ 0x4f
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	f008 feb8 	bl	800c54e <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 80037de:	4b29      	ldr	r3, [pc, #164]	@ (8003884 <addLineToProgram+0xfc>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4929      	ldr	r1, [pc, #164]	@ (8003888 <addLineToProgram+0x100>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	440b      	add	r3, r1
 80037ee:	334f      	adds	r3, #79	@ 0x4f
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
    
    // Eliminar \r\n del final si existen
    int len = strlen(gcodeProgram[programLineCount]);
 80037f4:	4b23      	ldr	r3, [pc, #140]	@ (8003884 <addLineToProgram+0xfc>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <addLineToProgram+0x100>)
 8003802:	4413      	add	r3, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7fc fca3 	bl	8000150 <strlen>
 800380a:	4603      	mov	r3, r0
 800380c:	60bb      	str	r3, [r7, #8]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 800380e:	e00f      	b.n	8003830 <addLineToProgram+0xa8>
                       gcodeProgram[programLineCount][len-1] == '\n')) {
        gcodeProgram[programLineCount][len-1] = '\0';
 8003810:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <addLineToProgram+0xfc>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1e59      	subs	r1, r3, #1
 8003818:	481b      	ldr	r0, [pc, #108]	@ (8003888 <addLineToProgram+0x100>)
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4403      	add	r3, r0
 8003824:	440b      	add	r3, r1
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
        len--;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3b01      	subs	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	dd1b      	ble.n	800386e <addLineToProgram+0xe6>
 8003836:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <addLineToProgram+0xfc>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1e59      	subs	r1, r3, #1
 800383e:	4812      	ldr	r0, [pc, #72]	@ (8003888 <addLineToProgram+0x100>)
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4403      	add	r3, r0
 800384a:	440b      	add	r3, r1
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b0d      	cmp	r3, #13
 8003850:	d0de      	beq.n	8003810 <addLineToProgram+0x88>
                       gcodeProgram[programLineCount][len-1] == '\n')) {
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <addLineToProgram+0xfc>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1e59      	subs	r1, r3, #1
 800385a:	480b      	ldr	r0, [pc, #44]	@ (8003888 <addLineToProgram+0x100>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	781b      	ldrb	r3, [r3, #0]
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 800386a:	2b0a      	cmp	r3, #10
 800386c:	d0d0      	beq.n	8003810 <addLineToProgram+0x88>
    }
    
    programLineCount++;
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <addLineToProgram+0xfc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a03      	ldr	r2, [pc, #12]	@ (8003884 <addLineToProgram+0xfc>)
 8003876:	6013      	str	r3, [r2, #0]
    return true;
 8003878:	2301      	movs	r3, #1
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20002360 	.word	0x20002360
 8003888:	20000420 	.word	0x20000420

0800388c <clearProgram>:

/**
  * @brief  Limpia el programa almacenado
  * @retval None
  */
void clearProgram(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
    programLineCount = 0;
 8003892:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <clearProgram+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
    currentExecutingLine = 0;
 8003898:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <clearProgram+0x68>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    isProgramLoaded = false;
 800389e:	4b16      	ldr	r3, [pc, #88]	@ (80038f8 <clearProgram+0x6c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
    isProgramRunning = false;
 80038a4:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <clearProgram+0x70>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    isStoringProgram = false;
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <clearProgram+0x74>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
    
    // Limpiar buffer
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80038b0:	2300      	movs	r3, #0
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	e00e      	b.n	80038d4 <clearProgram+0x48>
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4a10      	ldr	r2, [pc, #64]	@ (8003904 <clearProgram+0x78>)
 80038c2:	4413      	add	r3, r2
 80038c4:	2250      	movs	r2, #80	@ 0x50
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f008 fe26 	bl	800c51a <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3301      	adds	r3, #1
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b63      	cmp	r3, #99	@ 0x63
 80038d8:	dded      	ble.n	80038b6 <clearProgram+0x2a>
    }
    
    sendUSBText("Programa limpiado\r\n");
 80038da:	480b      	ldr	r0, [pc, #44]	@ (8003908 <clearProgram+0x7c>)
 80038dc:	f7fe fadc 	bl	8001e98 <sendUSBText>
    sendUSBText("ok\r\n");
 80038e0:	480a      	ldr	r0, [pc, #40]	@ (800390c <clearProgram+0x80>)
 80038e2:	f7fe fad9 	bl	8001e98 <sendUSBText>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20002360 	.word	0x20002360
 80038f4:	20002364 	.word	0x20002364
 80038f8:	20002369 	.word	0x20002369
 80038fc:	2000236a 	.word	0x2000236a
 8003900:	20002368 	.word	0x20002368
 8003904:	20000420 	.word	0x20000420
 8003908:	0800f0f4 	.word	0x0800f0f4
 800390c:	0800eca4 	.word	0x0800eca4

08003910 <showProgramInfo>:

/**
  * @brief  Muestra información del programa cargado
  * @retval None
  */
void showProgramInfo(void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b0a8      	sub	sp, #160	@ 0xa0
 8003914:	af00      	add	r7, sp, #0
    char msg[150];
    
    sprintf(msg, "=== INFORMACION DEL PROGRAMA ===\r\n");
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	4951      	ldr	r1, [pc, #324]	@ (8003a60 <showProgramInfo+0x150>)
 800391a:	4618      	mov	r0, r3
 800391c:	f008 fd98 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fc14 	bl	8000150 <strlen>
 8003928:	4603      	mov	r3, r0
 800392a:	b29a      	uxth	r2, r3
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f007 f9a3 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Lineas almacenadas: %d/%d\r\n", programLineCount, MAX_GCODE_LINES);
 8003936:	4b4b      	ldr	r3, [pc, #300]	@ (8003a64 <showProgramInfo+0x154>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	1d38      	adds	r0, r7, #4
 800393c:	2364      	movs	r3, #100	@ 0x64
 800393e:	494a      	ldr	r1, [pc, #296]	@ (8003a68 <showProgramInfo+0x158>)
 8003940:	f008 fd86 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fc02 	bl	8000150 <strlen>
 800394c:	4603      	mov	r3, r0
 800394e:	b29a      	uxth	r2, r3
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f007 f991 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 800395a:	4b44      	ldr	r3, [pc, #272]	@ (8003a6c <showProgramInfo+0x15c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <showProgramInfo+0x56>
 8003962:	4a43      	ldr	r2, [pc, #268]	@ (8003a70 <showProgramInfo+0x160>)
 8003964:	e000      	b.n	8003968 <showProgramInfo+0x58>
 8003966:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <showProgramInfo+0x164>)
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	4943      	ldr	r1, [pc, #268]	@ (8003a78 <showProgramInfo+0x168>)
 800396c:	4618      	mov	r0, r3
 800396e:	f008 fd6f 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fbeb 	bl	8000150 <strlen>
 800397a:	4603      	mov	r3, r0
 800397c:	b29a      	uxth	r2, r3
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f007 f97a 	bl	800ac7c <CDC_Transmit_FS>
    
    sprintf(msg, "Estado: %s\r\n", isProgramRunning ? "EJECUTANDO" : "DETENIDO");
 8003988:	4b3c      	ldr	r3, [pc, #240]	@ (8003a7c <showProgramInfo+0x16c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <showProgramInfo+0x84>
 8003990:	4a3b      	ldr	r2, [pc, #236]	@ (8003a80 <showProgramInfo+0x170>)
 8003992:	e000      	b.n	8003996 <showProgramInfo+0x86>
 8003994:	4a3b      	ldr	r2, [pc, #236]	@ (8003a84 <showProgramInfo+0x174>)
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	493b      	ldr	r1, [pc, #236]	@ (8003a88 <showProgramInfo+0x178>)
 800399a:	4618      	mov	r0, r3
 800399c:	f008 fd58 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fbd4 	bl	8000150 <strlen>
 80039a8:	4603      	mov	r3, r0
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f007 f963 	bl	800ac7c <CDC_Transmit_FS>
    
    if (isProgramLoaded && programLineCount > 0) {
 80039b6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a6c <showProgramInfo+0x15c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d044      	beq.n	8003a48 <showProgramInfo+0x138>
 80039be:	4b29      	ldr	r3, [pc, #164]	@ (8003a64 <showProgramInfo+0x154>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dd40      	ble.n	8003a48 <showProgramInfo+0x138>
        sprintf(msg, "Linea actual: %d\r\n", currentExecutingLine + 1);
 80039c6:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <showProgramInfo+0x17c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	4930      	ldr	r1, [pc, #192]	@ (8003a90 <showProgramInfo+0x180>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f008 fd3d 	bl	800c450 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fbb9 	bl	8000150 <strlen>
 80039de:	4603      	mov	r3, r0
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	1d3b      	adds	r3, r7, #4
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f007 f948 	bl	800ac7c <CDC_Transmit_FS>
        
        CDC_Transmit_FS((uint8_t*)"\r\nContenido del programa:\r\n", 26);
 80039ec:	211a      	movs	r1, #26
 80039ee:	4829      	ldr	r0, [pc, #164]	@ (8003a94 <showProgramInfo+0x184>)
 80039f0:	f007 f944 	bl	800ac7c <CDC_Transmit_FS>
        for (int i = 0; i < programLineCount; i++) {
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039fa:	e01f      	b.n	8003a3c <showProgramInfo+0x12c>
            sprintf(msg, "%d: %s\r\n", i + 1, gcodeProgram[i]);
 80039fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a00:	1c59      	adds	r1, r3, #1
 8003a02:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4a22      	ldr	r2, [pc, #136]	@ (8003a98 <showProgramInfo+0x188>)
 8003a10:	4413      	add	r3, r2
 8003a12:	1d38      	adds	r0, r7, #4
 8003a14:	460a      	mov	r2, r1
 8003a16:	4921      	ldr	r1, [pc, #132]	@ (8003a9c <showProgramInfo+0x18c>)
 8003a18:	f008 fd1a 	bl	800c450 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fb96 	bl	8000150 <strlen>
 8003a24:	4603      	mov	r3, r0
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f007 f925 	bl	800ac7c <CDC_Transmit_FS>
        for (int i = 0; i < programLineCount; i++) {
 8003a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a36:	3301      	adds	r3, #1
 8003a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a3c:	4b09      	ldr	r3, [pc, #36]	@ (8003a64 <showProgramInfo+0x154>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003a44:	429a      	cmp	r2, r3
 8003a46:	dbd9      	blt.n	80039fc <showProgramInfo+0xec>
        }
    }
    
    CDC_Transmit_FS((uint8_t*)"=== FIN INFORMACION ===\r\n", 26);
 8003a48:	211a      	movs	r1, #26
 8003a4a:	4815      	ldr	r0, [pc, #84]	@ (8003aa0 <showProgramInfo+0x190>)
 8003a4c:	f007 f916 	bl	800ac7c <CDC_Transmit_FS>
    CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8003a50:	2104      	movs	r1, #4
 8003a52:	4814      	ldr	r0, [pc, #80]	@ (8003aa4 <showProgramInfo+0x194>)
 8003a54:	f007 f912 	bl	800ac7c <CDC_Transmit_FS>
}
 8003a58:	bf00      	nop
 8003a5a:	37a0      	adds	r7, #160	@ 0xa0
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0800f108 	.word	0x0800f108
 8003a64:	20002360 	.word	0x20002360
 8003a68:	0800f12c 	.word	0x0800f12c
 8003a6c:	20002369 	.word	0x20002369
 8003a70:	0800f148 	.word	0x0800f148
 8003a74:	0800f14c 	.word	0x0800f14c
 8003a78:	0800f150 	.word	0x0800f150
 8003a7c:	2000236a 	.word	0x2000236a
 8003a80:	0800f168 	.word	0x0800f168
 8003a84:	0800f174 	.word	0x0800f174
 8003a88:	0800f180 	.word	0x0800f180
 8003a8c:	20002364 	.word	0x20002364
 8003a90:	0800f190 	.word	0x0800f190
 8003a94:	0800f1a4 	.word	0x0800f1a4
 8003a98:	20000420 	.word	0x20000420
 8003a9c:	0800f1c0 	.word	0x0800f1c0
 8003aa0:	0800f1cc 	.word	0x0800f1cc
 8003aa4:	0800eca4 	.word	0x0800eca4

08003aa8 <runProgram>:

/**
  * @brief  Ejecuta el programa completo almacenado
  * @retval None
  */
void runProgram(void) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ae      	sub	sp, #184	@ 0xb8
 8003aac:	af00      	add	r7, sp, #0
    if (!isProgramLoaded || programLineCount == 0) {
 8003aae:	4b5b      	ldr	r3, [pc, #364]	@ (8003c1c <runProgram+0x174>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <runProgram+0x1c>
 8003abc:	4b58      	ldr	r3, [pc, #352]	@ (8003c20 <runProgram+0x178>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <runProgram+0x26>
        CDC_Transmit_FS((uint8_t*)"error: No hay programa cargado\r\n", 33);
 8003ac4:	2121      	movs	r1, #33	@ 0x21
 8003ac6:	4857      	ldr	r0, [pc, #348]	@ (8003c24 <runProgram+0x17c>)
 8003ac8:	f007 f8d8 	bl	800ac7c <CDC_Transmit_FS>
 8003acc:	e0a2      	b.n	8003c14 <runProgram+0x16c>
        return;
    }
    
    isProgramRunning = true;
 8003ace:	4b56      	ldr	r3, [pc, #344]	@ (8003c28 <runProgram+0x180>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    currentExecutingLine = 0;
 8003ad4:	4b55      	ldr	r3, [pc, #340]	@ (8003c2c <runProgram+0x184>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
    
    char msg[100];
    sprintf(msg, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 8003ada:	4b51      	ldr	r3, [pc, #324]	@ (8003c20 <runProgram+0x178>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003ae2:	4953      	ldr	r1, [pc, #332]	@ (8003c30 <runProgram+0x188>)
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f008 fcb3 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003aea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fb2e 	bl	8000150 <strlen>
 8003af4:	4603      	mov	r3, r0
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003afc:	4611      	mov	r1, r2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f007 f8bc 	bl	800ac7c <CDC_Transmit_FS>
    
    // Ejecutar todas las líneas secuencialmente
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 8003b04:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <runProgram+0x184>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e06c      	b.n	8003be6 <runProgram+0x13e>
        if (!isProgramRunning) {
 8003b0c:	4b46      	ldr	r3, [pc, #280]	@ (8003c28 <runProgram+0x180>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <runProgram+0x7c>
            CDC_Transmit_FS((uint8_t*)"Programa detenido por el usuario\r\n", 34);
 8003b1a:	2122      	movs	r1, #34	@ 0x22
 8003b1c:	4845      	ldr	r0, [pc, #276]	@ (8003c34 <runProgram+0x18c>)
 8003b1e:	f007 f8ad 	bl	800ac7c <CDC_Transmit_FS>
            break;
 8003b22:	e066      	b.n	8003bf2 <runProgram+0x14a>
        }
        
        sprintf(msg, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8003b24:	4b41      	ldr	r3, [pc, #260]	@ (8003c2c <runProgram+0x184>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <runProgram+0x184>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	4a40      	ldr	r2, [pc, #256]	@ (8003c38 <runProgram+0x190>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003b3e:	460a      	mov	r2, r1
 8003b40:	493e      	ldr	r1, [pc, #248]	@ (8003c3c <runProgram+0x194>)
 8003b42:	f008 fc85 	bl	800c450 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003b46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fb00 	bl	8000150 <strlen>
 8003b50:	4603      	mov	r3, r0
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f007 f88e 	bl	800ac7c <CDC_Transmit_FS>
        
        // Crear una copia temporal para evitar recursión
        char temp_command[MAX_LINE_LENGTH];
        strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8003b60:	4b32      	ldr	r3, [pc, #200]	@ (8003c2c <runProgram+0x184>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4a32      	ldr	r2, [pc, #200]	@ (8003c38 <runProgram+0x190>)
 8003b6e:	1899      	adds	r1, r3, r2
 8003b70:	463b      	mov	r3, r7
 8003b72:	224f      	movs	r2, #79	@ 0x4f
 8003b74:	4618      	mov	r0, r3
 8003b76:	f008 fcea 	bl	800c54e <strncpy>
        temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        
        // Ejecutar el comando directamente usando el parser modular
        uint8_t status = gc_execute_line(temp_command);
 8003b80:	463b      	mov	r3, r7
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe f886 	bl	8001c94 <gc_execute_line>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
        
        // Mostrar resultado
        if (status == STATUS_OK) {
 8003b8e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <runProgram+0xf8>
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8003b96:	2104      	movs	r1, #4
 8003b98:	4829      	ldr	r0, [pc, #164]	@ (8003c40 <runProgram+0x198>)
 8003b9a:	f007 f86f 	bl	800ac7c <CDC_Transmit_FS>
 8003b9e:	e01a      	b.n	8003bd6 <runProgram+0x12e>
        } else {
            sprintf(msg, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8003ba0:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003ba4:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <runProgram+0x184>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003bae:	4925      	ldr	r1, [pc, #148]	@ (8003c44 <runProgram+0x19c>)
 8003bb0:	f008 fc4e 	bl	800c450 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003bb4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fc fac9 	bl	8000150 <strlen>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f007 f857 	bl	800ac7c <CDC_Transmit_FS>
            isProgramRunning = false;
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <runProgram+0x180>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
            break;
 8003bd4:	e00d      	b.n	8003bf2 <runProgram+0x14a>
        }
        
        // Pequeña pausa entre comandos para estabilidad
        HAL_Delay(10);
 8003bd6:	200a      	movs	r0, #10
 8003bd8:	f000 fb86 	bl	80042e8 <HAL_Delay>
    for (currentExecutingLine = 0; currentExecutingLine < programLineCount; currentExecutingLine++) {
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <runProgram+0x184>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a12      	ldr	r2, [pc, #72]	@ (8003c2c <runProgram+0x184>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <runProgram+0x184>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <runProgram+0x178>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	db8c      	blt.n	8003b0c <runProgram+0x64>
    }
    
    isProgramRunning = false;
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <runProgram+0x180>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
    
    if (currentExecutingLine >= programLineCount) {
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <runProgram+0x184>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b08      	ldr	r3, [pc, #32]	@ (8003c20 <runProgram+0x178>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	db03      	blt.n	8003c0c <runProgram+0x164>
        CDC_Transmit_FS((uint8_t*)"Programa completado exitosamente\r\n", 34);
 8003c04:	2122      	movs	r1, #34	@ 0x22
 8003c06:	4810      	ldr	r0, [pc, #64]	@ (8003c48 <runProgram+0x1a0>)
 8003c08:	f007 f838 	bl	800ac7c <CDC_Transmit_FS>
    }
    
    CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8003c0c:	2104      	movs	r1, #4
 8003c0e:	480c      	ldr	r0, [pc, #48]	@ (8003c40 <runProgram+0x198>)
 8003c10:	f007 f834 	bl	800ac7c <CDC_Transmit_FS>
}
 8003c14:	37b8      	adds	r7, #184	@ 0xb8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20002369 	.word	0x20002369
 8003c20:	20002360 	.word	0x20002360
 8003c24:	0800f1e8 	.word	0x0800f1e8
 8003c28:	2000236a 	.word	0x2000236a
 8003c2c:	20002364 	.word	0x20002364
 8003c30:	0800f20c 	.word	0x0800f20c
 8003c34:	0800f23c 	.word	0x0800f23c
 8003c38:	20000420 	.word	0x20000420
 8003c3c:	0800f260 	.word	0x0800f260
 8003c40:	0800eca4 	.word	0x0800eca4
 8003c44:	0800f27c 	.word	0x0800f27c
 8003c48:	0800f29c 	.word	0x0800f29c

08003c4c <runNextLine>:

/**
  * @brief  Ejecuta la siguiente línea del programa
  * @retval None
  */
void runNextLine(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8003c50:	af00      	add	r7, sp, #0
    if (!isProgramLoaded || programLineCount == 0) {
 8003c52:	4b3f      	ldr	r3, [pc, #252]	@ (8003d50 <runNextLine+0x104>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f083 0301 	eor.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <runNextLine+0x1c>
 8003c60:	4b3c      	ldr	r3, [pc, #240]	@ (8003d54 <runNextLine+0x108>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <runNextLine+0x26>
        CDC_Transmit_FS((uint8_t*)"error: No hay programa cargado\r\n", 33);
 8003c68:	2121      	movs	r1, #33	@ 0x21
 8003c6a:	483b      	ldr	r0, [pc, #236]	@ (8003d58 <runNextLine+0x10c>)
 8003c6c:	f007 f806 	bl	800ac7c <CDC_Transmit_FS>
        return;
 8003c70:	e06a      	b.n	8003d48 <runNextLine+0xfc>
    }
    
    if (currentExecutingLine >= programLineCount) {
 8003c72:	4b3a      	ldr	r3, [pc, #232]	@ (8003d5c <runNextLine+0x110>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b37      	ldr	r3, [pc, #220]	@ (8003d54 <runNextLine+0x108>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	db07      	blt.n	8003c8e <runNextLine+0x42>
        CDC_Transmit_FS((uint8_t*)"Programa completado\r\n", 21);
 8003c7e:	2115      	movs	r1, #21
 8003c80:	4837      	ldr	r0, [pc, #220]	@ (8003d60 <runNextLine+0x114>)
 8003c82:	f006 fffb 	bl	800ac7c <CDC_Transmit_FS>
        isProgramRunning = false;
 8003c86:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <runNextLine+0x118>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
        return;
 8003c8c:	e05c      	b.n	8003d48 <runNextLine+0xfc>
    }
    
    char msg[150];
    sprintf(msg, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <runNextLine+0x110>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c59      	adds	r1, r3, #1
 8003c94:	4b31      	ldr	r3, [pc, #196]	@ (8003d5c <runNextLine+0x110>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4a31      	ldr	r2, [pc, #196]	@ (8003d68 <runNextLine+0x11c>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003ca8:	460a      	mov	r2, r1
 8003caa:	4930      	ldr	r1, [pc, #192]	@ (8003d6c <runNextLine+0x120>)
 8003cac:	f008 fbd0 	bl	800c450 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003cb0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fa4b 	bl	8000150 <strlen>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f006 ffd9 	bl	800ac7c <CDC_Transmit_FS>
    
    // Ejecutar el comando
    char temp_command[MAX_LINE_LENGTH];
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8003cca:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <runNextLine+0x110>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4a24      	ldr	r2, [pc, #144]	@ (8003d68 <runNextLine+0x11c>)
 8003cd8:	1899      	adds	r1, r3, r2
 8003cda:	463b      	mov	r3, r7
 8003cdc:	224f      	movs	r2, #79	@ 0x4f
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f008 fc35 	bl	800c54e <strncpy>
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
    uint8_t status = gc_execute_line(temp_command);
 8003cea:	463b      	mov	r3, r7
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd ffd1 	bl	8001c94 <gc_execute_line>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    
    if (status == STATUS_OK) {
 8003cf8:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <runNextLine+0xc8>
        CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8003d00:	2104      	movs	r1, #4
 8003d02:	481b      	ldr	r0, [pc, #108]	@ (8003d70 <runNextLine+0x124>)
 8003d04:	f006 ffba 	bl	800ac7c <CDC_Transmit_FS>
        currentExecutingLine++;
 8003d08:	4b14      	ldr	r3, [pc, #80]	@ (8003d5c <runNextLine+0x110>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	4a13      	ldr	r2, [pc, #76]	@ (8003d5c <runNextLine+0x110>)
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e019      	b.n	8003d48 <runNextLine+0xfc>
    } else {
        sprintf(msg, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8003d14:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 8003d18:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <runNextLine+0x110>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003d22:	4914      	ldr	r1, [pc, #80]	@ (8003d74 <runNextLine+0x128>)
 8003d24:	f008 fb94 	bl	800c450 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8003d28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fc fa0f 	bl	8000150 <strlen>
 8003d32:	4603      	mov	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f006 ff9d 	bl	800ac7c <CDC_Transmit_FS>
        isProgramRunning = false;
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <runNextLine+0x118>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
    }
}
 8003d48:	37e8      	adds	r7, #232	@ 0xe8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20002369 	.word	0x20002369
 8003d54:	20002360 	.word	0x20002360
 8003d58:	0800f1e8 	.word	0x0800f1e8
 8003d5c:	20002364 	.word	0x20002364
 8003d60:	0800f2c0 	.word	0x0800f2c0
 8003d64:	2000236a 	.word	0x2000236a
 8003d68:	20000420 	.word	0x20000420
 8003d6c:	0800f260 	.word	0x0800f260
 8003d70:	0800eca4 	.word	0x0800eca4
 8003d74:	0800f27c 	.word	0x0800f27c

08003d78 <pauseProgram>:

/**
  * @brief  Pausa la ejecución del programa
  * @retval None
  */
void pauseProgram(void) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
    isProgramRunning = false;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <pauseProgram+0x20>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
    CDC_Transmit_FS((uint8_t*)"Programa pausado\r\n", 18);
 8003d82:	2112      	movs	r1, #18
 8003d84:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <pauseProgram+0x24>)
 8003d86:	f006 ff79 	bl	800ac7c <CDC_Transmit_FS>
    CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	4804      	ldr	r0, [pc, #16]	@ (8003da0 <pauseProgram+0x28>)
 8003d8e:	f006 ff75 	bl	800ac7c <CDC_Transmit_FS>
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000236a 	.word	0x2000236a
 8003d9c:	0800f2d8 	.word	0x0800f2d8
 8003da0:	0800eca4 	.word	0x0800eca4

08003da4 <showHelp>:

/**
  * @brief  Muestra la ayuda del sistema de programas G-code
  * @retval None
  */
void showHelp(void) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 8003da8:	482c      	ldr	r0, [pc, #176]	@ (8003e5c <showHelp+0xb8>)
 8003daa:	f7fe f875 	bl	8001e98 <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 8003dae:	482c      	ldr	r0, [pc, #176]	@ (8003e60 <showHelp+0xbc>)
 8003db0:	f7fe f872 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 8003db4:	482b      	ldr	r0, [pc, #172]	@ (8003e64 <showHelp+0xc0>)
 8003db6:	f7fe f86f 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 8003dba:	482b      	ldr	r0, [pc, #172]	@ (8003e68 <showHelp+0xc4>)
 8003dbc:	f7fe f86c 	bl	8001e98 <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 8003dc0:	482a      	ldr	r0, [pc, #168]	@ (8003e6c <showHelp+0xc8>)
 8003dc2:	f7fe f869 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 8003dc6:	482a      	ldr	r0, [pc, #168]	@ (8003e70 <showHelp+0xcc>)
 8003dc8:	f7fe f866 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 8003dcc:	4829      	ldr	r0, [pc, #164]	@ (8003e74 <showHelp+0xd0>)
 8003dce:	f7fe f863 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 8003dd2:	4829      	ldr	r0, [pc, #164]	@ (8003e78 <showHelp+0xd4>)
 8003dd4:	f7fe f860 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 8003dd8:	4828      	ldr	r0, [pc, #160]	@ (8003e7c <showHelp+0xd8>)
 8003dda:	f7fe f85d 	bl	8001e98 <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 8003dde:	4828      	ldr	r0, [pc, #160]	@ (8003e80 <showHelp+0xdc>)
 8003de0:	f7fe f85a 	bl	8001e98 <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 8003de4:	4827      	ldr	r0, [pc, #156]	@ (8003e84 <showHelp+0xe0>)
 8003de6:	f7fe f857 	bl	8001e98 <sendUSBText>
    
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 8003dea:	4827      	ldr	r0, [pc, #156]	@ (8003e88 <showHelp+0xe4>)
 8003dec:	f7fe f854 	bl	8001e98 <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 8003df0:	4826      	ldr	r0, [pc, #152]	@ (8003e8c <showHelp+0xe8>)
 8003df2:	f7fe f851 	bl	8001e98 <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 8003df6:	4826      	ldr	r0, [pc, #152]	@ (8003e90 <showHelp+0xec>)
 8003df8:	f7fe f84e 	bl	8001e98 <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 8003dfc:	4825      	ldr	r0, [pc, #148]	@ (8003e94 <showHelp+0xf0>)
 8003dfe:	f7fe f84b 	bl	8001e98 <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 8003e02:	4825      	ldr	r0, [pc, #148]	@ (8003e98 <showHelp+0xf4>)
 8003e04:	f7fe f848 	bl	8001e98 <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 8003e08:	4824      	ldr	r0, [pc, #144]	@ (8003e9c <showHelp+0xf8>)
 8003e0a:	f7fe f845 	bl	8001e98 <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 8003e0e:	4824      	ldr	r0, [pc, #144]	@ (8003ea0 <showHelp+0xfc>)
 8003e10:	f7fe f842 	bl	8001e98 <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 8003e14:	4823      	ldr	r0, [pc, #140]	@ (8003ea4 <showHelp+0x100>)
 8003e16:	f7fe f83f 	bl	8001e98 <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 8003e1a:	4823      	ldr	r0, [pc, #140]	@ (8003ea8 <showHelp+0x104>)
 8003e1c:	f7fe f83c 	bl	8001e98 <sendUSBText>
    
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 8003e20:	4822      	ldr	r0, [pc, #136]	@ (8003eac <showHelp+0x108>)
 8003e22:	f7fe f839 	bl	8001e98 <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 8003e26:	4822      	ldr	r0, [pc, #136]	@ (8003eb0 <showHelp+0x10c>)
 8003e28:	f7fe f836 	bl	8001e98 <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 8003e2c:	4821      	ldr	r0, [pc, #132]	@ (8003eb4 <showHelp+0x110>)
 8003e2e:	f7fe f833 	bl	8001e98 <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 8003e32:	4821      	ldr	r0, [pc, #132]	@ (8003eb8 <showHelp+0x114>)
 8003e34:	f7fe f830 	bl	8001e98 <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 8003e38:	4820      	ldr	r0, [pc, #128]	@ (8003ebc <showHelp+0x118>)
 8003e3a:	f7fe f82d 	bl	8001e98 <sendUSBText>
    sendUSBText("5. FIN\r\n");
 8003e3e:	4820      	ldr	r0, [pc, #128]	@ (8003ec0 <showHelp+0x11c>)
 8003e40:	f7fe f82a 	bl	8001e98 <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 8003e44:	481f      	ldr	r0, [pc, #124]	@ (8003ec4 <showHelp+0x120>)
 8003e46:	f7fe f827 	bl	8001e98 <sendUSBText>
    
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 8003e4a:	481f      	ldr	r0, [pc, #124]	@ (8003ec8 <showHelp+0x124>)
 8003e4c:	f7fe f824 	bl	8001e98 <sendUSBText>
    sendUSBText("ok\r\n");
 8003e50:	481e      	ldr	r0, [pc, #120]	@ (8003ecc <showHelp+0x128>)
 8003e52:	f7fe f821 	bl	8001e98 <sendUSBText>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800f300 	.word	0x0800f300
 8003e60:	0800f324 	.word	0x0800f324
 8003e64:	0800f340 	.word	0x0800f340
 8003e68:	0800f37c 	.word	0x0800f37c
 8003e6c:	0800f3a8 	.word	0x0800f3a8
 8003e70:	0800f3e0 	.word	0x0800f3e0
 8003e74:	0800f410 	.word	0x0800f410
 8003e78:	0800f43c 	.word	0x0800f43c
 8003e7c:	0800f460 	.word	0x0800f460
 8003e80:	0800f494 	.word	0x0800f494
 8003e84:	0800f4c4 	.word	0x0800f4c4
 8003e88:	0800f4fc 	.word	0x0800f4fc
 8003e8c:	0800f51c 	.word	0x0800f51c
 8003e90:	0800f544 	.word	0x0800f544
 8003e94:	0800f578 	.word	0x0800f578
 8003e98:	0800f5a0 	.word	0x0800f5a0
 8003e9c:	0800f5d0 	.word	0x0800f5d0
 8003ea0:	0800f5f8 	.word	0x0800f5f8
 8003ea4:	0800f620 	.word	0x0800f620
 8003ea8:	0800f64c 	.word	0x0800f64c
 8003eac:	0800f678 	.word	0x0800f678
 8003eb0:	0800f68c 	.word	0x0800f68c
 8003eb4:	0800f6a0 	.word	0x0800f6a0
 8003eb8:	0800f6b4 	.word	0x0800f6b4
 8003ebc:	0800f6d0 	.word	0x0800f6d0
 8003ec0:	0800f6f0 	.word	0x0800f6f0
 8003ec4:	0800f6fc 	.word	0x0800f6fc
 8003ec8:	0800f710 	.word	0x0800f710
 8003ecc:	0800eca4 	.word	0x0800eca4

08003ed0 <showQueueStatus>:

/**
  * @brief  Muestra el estado de la cola de transmisión USB CDC
  * @retval None
  */
void showQueueStatus(void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0a6      	sub	sp, #152	@ 0x98
 8003ed4:	af00      	add	r7, sp, #0
    char statusMsg[150];
    
    sprintf(statusMsg, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	491c      	ldr	r1, [pc, #112]	@ (8003f4c <showQueueStatus+0x7c>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f008 fab8 	bl	800c450 <siprintf>
    sendUSBText(statusMsg);
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fd ffd8 	bl	8001e98 <sendUSBText>
    
    sprintf(statusMsg, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 8003ee8:	f006 ffde 	bl	800aea8 <CDC_TxQueue_GetCount>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <showQueueStatus+0x80>)
 8003ef6:	f008 faab 	bl	800c450 <siprintf>
    sendUSBText(statusMsg);
 8003efa:	463b      	mov	r3, r7
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fd ffcb 	bl	8001e98 <sendUSBText>
    
    sprintf(statusMsg, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 8003f02:	f006 ffdd 	bl	800aec0 <CDC_TxQueue_IsFull>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <showQueueStatus+0x40>
 8003f0c:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <showQueueStatus+0x84>)
 8003f0e:	e000      	b.n	8003f12 <showQueueStatus+0x42>
 8003f10:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <showQueueStatus+0x88>)
 8003f12:	463b      	mov	r3, r7
 8003f14:	4911      	ldr	r1, [pc, #68]	@ (8003f5c <showQueueStatus+0x8c>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f008 fa9a 	bl	800c450 <siprintf>
    sendUSBText(statusMsg);
 8003f1c:	463b      	mov	r3, r7
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd ffba 	bl	8001e98 <sendUSBText>
    
    sprintf(statusMsg, "Método transmisión: ");
 8003f24:	463b      	mov	r3, r7
 8003f26:	490e      	ldr	r1, [pc, #56]	@ (8003f60 <showQueueStatus+0x90>)
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f008 fa91 	bl	800c450 <siprintf>
    sendUSBText(statusMsg);
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fd ffb1 	bl	8001e98 <sendUSBText>
            break;
        case USB_METHOD_RETRY:
            sendUSBText("REINTENTOS\r\n");
            break;
        case USB_METHOD_QUEUED:
            sendUSBText("COLA\r\n");
 8003f36:	480b      	ldr	r0, [pc, #44]	@ (8003f64 <showQueueStatus+0x94>)
 8003f38:	f7fd ffae 	bl	8001e98 <sendUSBText>
            break;
 8003f3c:	bf00      	nop
    }
    
    sendUSBText("===========================\r\n");
 8003f3e:	480a      	ldr	r0, [pc, #40]	@ (8003f68 <showQueueStatus+0x98>)
 8003f40:	f7fd ffaa 	bl	8001e98 <sendUSBText>
}
 8003f44:	bf00      	nop
 8003f46:	3798      	adds	r7, #152	@ 0x98
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	0800f728 	.word	0x0800f728
 8003f50:	0800f748 	.word	0x0800f748
 8003f54:	0800f148 	.word	0x0800f148
 8003f58:	0800f14c 	.word	0x0800f14c
 8003f5c:	0800f764 	.word	0x0800f764
 8003f60:	0800f778 	.word	0x0800f778
 8003f64:	0800f790 	.word	0x0800f790
 8003f68:	0800f798 	.word	0x0800f798

08003f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f70:	b672      	cpsid	i
}
 8003f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <Error_Handler+0x8>

08003f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003f7e:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	4a14      	ldr	r2, [pc, #80]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6193      	str	r3, [r2, #24]
 8003f8a:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	61d3      	str	r3, [r2, #28]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <HAL_MspInit+0x5c>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <HAL_MspInit+0x60>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	@ (8003fd8 <HAL_MspInit+0x60>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000

08003fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <NMI_Handler+0x4>

08003fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <HardFault_Handler+0x4>

08003fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <MemManage_Handler+0x4>

08003ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <BusFault_Handler+0x4>

08003ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <UsageFault_Handler+0x4>

08004004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800402c:	f000 f940 	bl	80042b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}

08004034 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004038:	4802      	ldr	r0, [pc, #8]	@ (8004044 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800403a:	f000 fd56 	bl	8004aea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20003568 	.word	0x20003568

08004048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return 1;
 800404c:	2301      	movs	r3, #1
}
 800404e:	4618      	mov	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <_kill>:

int _kill(int pid, int sig)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004060:	f008 face 	bl	800c600 <__errno>
 8004064:	4603      	mov	r3, r0
 8004066:	2216      	movs	r2, #22
 8004068:	601a      	str	r2, [r3, #0]
  return -1;
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_exit>:

void _exit (int status)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800407e:	f04f 31ff 	mov.w	r1, #4294967295
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ffe7 	bl	8004056 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <_exit+0x12>

0800408c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e00a      	b.n	80040b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800409e:	f3af 8000 	nop.w
 80040a2:	4601      	mov	r1, r0
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	60ba      	str	r2, [r7, #8]
 80040aa:	b2ca      	uxtb	r2, r1
 80040ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dbf0      	blt.n	800409e <_read+0x12>
  }

  return len;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e009      	b.n	80040ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3301      	adds	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	dbf1      	blt.n	80040d8 <_write+0x12>
  }
  return len;
 80040f4:	687b      	ldr	r3, [r7, #4]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_close>:

int _close(int file)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004124:	605a      	str	r2, [r3, #4]
  return 0;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <_isatty>:

int _isatty(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr
	...

08004160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <_sbrk+0x5c>)
 800416a:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <_sbrk+0x60>)
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004174:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <_sbrk+0x64>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800417c:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <_sbrk+0x64>)
 800417e:	4a12      	ldr	r2, [pc, #72]	@ (80041c8 <_sbrk+0x68>)
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <_sbrk+0x64>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	429a      	cmp	r2, r3
 800418e:	d207      	bcs.n	80041a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004190:	f008 fa36 	bl	800c600 <__errno>
 8004194:	4603      	mov	r3, r0
 8004196:	220c      	movs	r2, #12
 8004198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	e009      	b.n	80041b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041a0:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <_sbrk+0x64>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	4a05      	ldr	r2, [pc, #20]	@ (80041c4 <_sbrk+0x64>)
 80041b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20005000 	.word	0x20005000
 80041c0:	00000400 	.word	0x00000400
 80041c4:	2000236c 	.word	0x2000236c
 80041c8:	20003bb0 	.word	0x20003bb0

080041cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80041d8:	f7ff fff8 	bl	80041cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041dc:	480b      	ldr	r0, [pc, #44]	@ (800420c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80041de:	490c      	ldr	r1, [pc, #48]	@ (8004210 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80041e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004214 <LoopFillZerobss+0x16>)
  movs r3, #0
 80041e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041e4:	e002      	b.n	80041ec <LoopCopyDataInit>

080041e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ea:	3304      	adds	r3, #4

080041ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041f0:	d3f9      	bcc.n	80041e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80041f4:	4c09      	ldr	r4, [pc, #36]	@ (800421c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041f8:	e001      	b.n	80041fe <LoopFillZerobss>

080041fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041fc:	3204      	adds	r2, #4

080041fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004200:	d3fb      	bcc.n	80041fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004202:	f008 fa03 	bl	800c60c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004206:	f7fd fe65 	bl	8001ed4 <main>
  bx lr
 800420a:	4770      	bx	lr
  ldr r0, =_sdata
 800420c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004210:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8004214:	0800fc00 	.word	0x0800fc00
  ldr r2, =_sbss
 8004218:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800421c:	20003bac 	.word	0x20003bac

08004220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004220:	e7fe      	b.n	8004220 <ADC1_2_IRQHandler>
	...

08004224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004228:	4b08      	ldr	r3, [pc, #32]	@ (800424c <HAL_Init+0x28>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a07      	ldr	r2, [pc, #28]	@ (800424c <HAL_Init+0x28>)
 800422e:	f043 0310 	orr.w	r3, r3, #16
 8004232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004234:	2003      	movs	r0, #3
 8004236:	f000 f947 	bl	80044c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423a:	200f      	movs	r0, #15
 800423c:	f000 f808 	bl	8004250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004240:	f7ff fe9a 	bl	8003f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40022000 	.word	0x40022000

08004250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004258:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_InitTick+0x54>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <HAL_InitTick+0x58>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	4619      	mov	r1, r3
 8004262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004266:	fbb3 f3f1 	udiv	r3, r3, r1
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f95f 	bl	8004532 <HAL_SYSTICK_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e00e      	b.n	800429c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b0f      	cmp	r3, #15
 8004282:	d80a      	bhi.n	800429a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004284:	2200      	movs	r2, #0
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	f000 f927 	bl	80044de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004290:	4a06      	ldr	r2, [pc, #24]	@ (80042ac <HAL_InitTick+0x5c>)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	20000014 	.word	0x20000014
 80042ac:	20000010 	.word	0x20000010

080042b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_IncTick+0x1c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_IncTick+0x20>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	4a03      	ldr	r2, [pc, #12]	@ (80042d0 <HAL_IncTick+0x20>)
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	20000014 	.word	0x20000014
 80042d0:	20002370 	.word	0x20002370

080042d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;
 80042d8:	4b02      	ldr	r3, [pc, #8]	@ (80042e4 <HAL_GetTick+0x10>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	20002370 	.word	0x20002370

080042e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7ff fff0 	bl	80042d4 <HAL_GetTick>
 80042f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d005      	beq.n	800430e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004302:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_Delay+0x44>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800430e:	bf00      	nop
 8004310:	f7ff ffe0 	bl	80042d4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d8f7      	bhi.n	8004310 <HAL_Delay+0x28>
  {
  }
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000014 	.word	0x20000014

08004330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800434c:	4013      	ands	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800435c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004362:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60d3      	str	r3, [r2, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800437c:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <__NVIC_GetPriorityGrouping+0x18>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 0307 	and.w	r3, r3, #7
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db0b      	blt.n	80043be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4906      	ldr	r1, [pc, #24]	@ (80043c8 <__NVIC_EnableIRQ+0x34>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2001      	movs	r0, #1
 80043b6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	db0a      	blt.n	80043f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	490c      	ldr	r1, [pc, #48]	@ (8004418 <__NVIC_SetPriority+0x4c>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	440b      	add	r3, r1
 80043f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f4:	e00a      	b.n	800440c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4908      	ldr	r1, [pc, #32]	@ (800441c <__NVIC_SetPriority+0x50>)
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3b04      	subs	r3, #4
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	440b      	add	r3, r1
 800440a:	761a      	strb	r2, [r3, #24]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000e100 	.word	0xe000e100
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f1c3 0307 	rsb	r3, r3, #7
 800443a:	2b04      	cmp	r3, #4
 800443c:	bf28      	it	cs
 800443e:	2304      	movcs	r3, #4
 8004440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3304      	adds	r3, #4
 8004446:	2b06      	cmp	r3, #6
 8004448:	d902      	bls.n	8004450 <NVIC_EncodePriority+0x30>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3b03      	subs	r3, #3
 800444e:	e000      	b.n	8004452 <NVIC_EncodePriority+0x32>
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	401a      	ands	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	43d9      	mvns	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	4313      	orrs	r3, r2
         );
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	@ 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004494:	d301      	bcc.n	800449a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004496:	2301      	movs	r3, #1
 8004498:	e00f      	b.n	80044ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <SysTick_Config+0x40>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044a2:	210f      	movs	r1, #15
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f7ff ff90 	bl	80043cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <SysTick_Config+0x40>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044b2:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <SysTick_Config+0x40>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	e000e010 	.word	0xe000e010

080044c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff2d 	bl	8004330 <__NVIC_SetPriorityGrouping>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	4603      	mov	r3, r0
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044f0:	f7ff ff42 	bl	8004378 <__NVIC_GetPriorityGrouping>
 80044f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff90 	bl	8004420 <NVIC_EncodePriority>
 8004500:	4602      	mov	r2, r0
 8004502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ff5f 	bl	80043cc <__NVIC_SetPriority>
}
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff35 	bl	8004394 <__NVIC_EnableIRQ>
}
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ffa2 	bl	8004484 <SysTick_Config>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e169      	b.n	8004834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004560:	2201      	movs	r2, #1
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	f040 8158 	bne.w	800482e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a9a      	ldr	r2, [pc, #616]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d05e      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004588:	4a98      	ldr	r2, [pc, #608]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d875      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800458e:	4a98      	ldr	r2, [pc, #608]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d058      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004594:	4a96      	ldr	r2, [pc, #600]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d86f      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800459a:	4a96      	ldr	r2, [pc, #600]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d052      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045a0:	4a94      	ldr	r2, [pc, #592]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d869      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045a6:	4a94      	ldr	r2, [pc, #592]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04c      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045ac:	4a92      	ldr	r2, [pc, #584]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d863      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045b2:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d046      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045b8:	4a90      	ldr	r2, [pc, #576]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d85d      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d82a      	bhi.n	8004618 <HAL_GPIO_Init+0xcc>
 80045c2:	2b12      	cmp	r3, #18
 80045c4:	d859      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_GPIO_Init+0x80>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004647 	.word	0x08004647
 80045d0:	08004621 	.word	0x08004621
 80045d4:	08004633 	.word	0x08004633
 80045d8:	08004675 	.word	0x08004675
 80045dc:	0800467b 	.word	0x0800467b
 80045e0:	0800467b 	.word	0x0800467b
 80045e4:	0800467b 	.word	0x0800467b
 80045e8:	0800467b 	.word	0x0800467b
 80045ec:	0800467b 	.word	0x0800467b
 80045f0:	0800467b 	.word	0x0800467b
 80045f4:	0800467b 	.word	0x0800467b
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	0800467b 	.word	0x0800467b
 8004600:	0800467b 	.word	0x0800467b
 8004604:	0800467b 	.word	0x0800467b
 8004608:	0800467b 	.word	0x0800467b
 800460c:	0800467b 	.word	0x0800467b
 8004610:	08004629 	.word	0x08004629
 8004614:	0800463d 	.word	0x0800463d
 8004618:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_GPIO_Init+0x2b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800461e:	e02c      	b.n	800467a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e029      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	623b      	str	r3, [r7, #32]
          break;
 8004630:	e024      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	623b      	str	r3, [r7, #32]
          break;
 800463a:	e01f      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	330c      	adds	r3, #12
 8004642:	623b      	str	r3, [r7, #32]
          break;
 8004644:	e01a      	b.n	800467c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464e:	2304      	movs	r3, #4
 8004650:	623b      	str	r3, [r7, #32]
          break;
 8004652:	e013      	b.n	800467c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800465c:	2308      	movs	r3, #8
 800465e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	611a      	str	r2, [r3, #16]
          break;
 8004666:	e009      	b.n	800467c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004668:	2308      	movs	r3, #8
 800466a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	615a      	str	r2, [r3, #20]
          break;
 8004672:	e003      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
          break;
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x130>
          break;
 800467a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2bff      	cmp	r3, #255	@ 0xff
 8004680:	d801      	bhi.n	8004686 <HAL_GPIO_Init+0x13a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	e001      	b.n	800468a <HAL_GPIO_Init+0x13e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	d802      	bhi.n	8004698 <HAL_GPIO_Init+0x14c>
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	e002      	b.n	800469e <HAL_GPIO_Init+0x152>
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	3b08      	subs	r3, #8
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	210f      	movs	r1, #15
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	431a      	orrs	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80b1 	beq.w	800482e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e4:	4a48      	ldr	r2, [pc, #288]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1ec>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3f      	ldr	r2, [pc, #252]	@ (8004810 <HAL_GPIO_Init+0x2c4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1e8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3e      	ldr	r2, [pc, #248]	@ (8004814 <HAL_GPIO_Init+0x2c8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1e4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3d      	ldr	r2, [pc, #244]	@ (8004818 <HAL_GPIO_Init+0x2cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1e0>
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 800472c:	2304      	movs	r3, #4
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004738:	2300      	movs	r3, #0
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800474a:	492f      	ldr	r1, [pc, #188]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d006      	beq.n	8004772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004764:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	492c      	ldr	r1, [pc, #176]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	e006      	b.n	8004780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004772:	4b2a      	ldr	r3, [pc, #168]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	43db      	mvns	r3, r3
 800477a:	4928      	ldr	r1, [pc, #160]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800477c:	4013      	ands	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d006      	beq.n	800479a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800478c:	4b23      	ldr	r3, [pc, #140]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	4922      	ldr	r1, [pc, #136]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	491e      	ldr	r1, [pc, #120]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4918      	ldr	r1, [pc, #96]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4914      	ldr	r1, [pc, #80]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	490e      	ldr	r1, [pc, #56]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
 80047e8:	e021      	b.n	800482e <HAL_GPIO_Init+0x2e2>
 80047ea:	bf00      	nop
 80047ec:	10320000 	.word	0x10320000
 80047f0:	10310000 	.word	0x10310000
 80047f4:	10220000 	.word	0x10220000
 80047f8:	10210000 	.word	0x10210000
 80047fc:	10120000 	.word	0x10120000
 8004800:	10110000 	.word	0x10110000
 8004804:	40021000 	.word	0x40021000
 8004808:	40010000 	.word	0x40010000
 800480c:	40010800 	.word	0x40010800
 8004810:	40010c00 	.word	0x40010c00
 8004814:	40011000 	.word	0x40011000
 8004818:	40011400 	.word	0x40011400
 800481c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_GPIO_Init+0x304>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	43db      	mvns	r3, r3
 8004828:	4909      	ldr	r1, [pc, #36]	@ (8004850 <HAL_GPIO_Init+0x304>)
 800482a:	4013      	ands	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	f47f ae8e 	bne.w	8004560 <HAL_GPIO_Init+0x14>
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	372c      	adds	r7, #44	@ 0x2c
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40010400 	.word	0x40010400

08004854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e001      	b.n	8004876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
 800488e:	4613      	mov	r3, r2
 8004890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800489e:	e003      	b.n	80048a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	041a      	lsls	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0e8      	b.n	8004a96 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f006 fc0f 	bl	800b0fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2203      	movs	r2, #3
 80048e2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f002 f9f6 	bl	8006ce2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004900:	f002 f9cc 	bl	8006c9c <USB_CoreInit>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0bf      	b.n	8004a96 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f002 f9fa 	bl	8006d16 <USB_SetCurrentMode>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0b0      	b.n	8004a96 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e03e      	b.n	80049b8 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800493a:	7bfa      	ldrb	r2, [r7, #15]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	440b      	add	r3, r1
 8004948:	3311      	adds	r3, #17
 800494a:	2201      	movs	r2, #1
 800494c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	3310      	adds	r3, #16
 800495e:	7bfa      	ldrb	r2, [r7, #15]
 8004960:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	440b      	add	r3, r1
 8004970:	3313      	adds	r3, #19
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	3320      	adds	r3, #32
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	3324      	adds	r3, #36	@ 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	3301      	adds	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	7bfa      	ldrb	r2, [r7, #15]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3bb      	bcc.n	800493a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
 80049c6:	e044      	b.n	8004a52 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049c8:	7bfa      	ldrb	r2, [r7, #15]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	440b      	add	r3, r1
 80049d6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	440b      	add	r3, r1
 80049ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	440b      	add	r3, r1
 8004a02:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	440b      	add	r3, r1
 8004a18:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	791b      	ldrb	r3, [r3, #4]
 8004a56:	7bfa      	ldrb	r2, [r7, #15]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d3b5      	bcc.n	80049c8 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a66:	f002 f962 	bl	8006d2e <USB_DevInit>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e00c      	b.n	8004a96 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fbe1 	bl	8009256 <USB_DevDisconnect>

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_PCD_Start+0x16>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e016      	b.n	8004ae2 <HAL_PCD_Start+0x44>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f002 f8f8 	bl	8006cb6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f006 fd8a 	bl	800b5e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fbb5 	bl	8009242 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 fbb7 	bl	800926a <USB_ReadInterrupts>
 8004afc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb1a 	bl	8005142 <PCD_EP_ISR_Handler>

    return;
 8004b0e:	e119      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d013      	beq.n	8004b42 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f006 fb5d 	bl	800b1f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f905 	bl	8004d4a <HAL_PCD_SetAddress>

    return;
 8004b40:	e100      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b5e:	b292      	uxth	r2, r2
 8004b60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b64:	e0ee      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b82:	b292      	uxth	r2, r2
 8004b84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b88:	e0dc      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d027      	beq.n	8004be4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0204 	bic.w	r2, r2, #4
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0208 	bic.w	r2, r2, #8
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f006 fb4d 	bl	800b264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004be2:	e0af      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8083 	beq.w	8004cf6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	77fb      	strb	r3, [r7, #31]
 8004bf4:	e010      	b.n	8004c18 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	7ffb      	ldrb	r3, [r7, #31]
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	b292      	uxth	r2, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	3320      	adds	r3, #32
 8004c0c:	443b      	add	r3, r7
 8004c0e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
 8004c14:	3301      	adds	r3, #1
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	7ffb      	ldrb	r3, [r7, #31]
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	d9eb      	bls.n	8004bf6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	b292      	uxth	r2, r2
 8004c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	b292      	uxth	r2, r2
 8004c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004c4e:	bf00      	nop
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f6      	beq.n	8004c50 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	b292      	uxth	r2, r2
 8004c76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e00f      	b.n	8004ca0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	4611      	mov	r1, r2
 8004c88:	7ffa      	ldrb	r2, [r7, #31]
 8004c8a:	0092      	lsls	r2, r2, #2
 8004c8c:	440a      	add	r2, r1
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	3320      	adds	r3, #32
 8004c92:	443b      	add	r3, r7
 8004c94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004c98:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	d9ec      	bls.n	8004c80 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0208 	orr.w	r2, r2, #8
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0204 	orr.w	r2, r2, #4
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f006 fa9e 	bl	800b230 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004cf4:	e026      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00f      	beq.n	8004d20 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d12:	b292      	uxth	r2, r2
 8004d14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f006 fa5c 	bl	800b1d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d1e:	e011      	b.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d42:	bf00      	nop
  }
}
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_PCD_SetAddress+0x1a>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e012      	b.n	8004d8a <HAL_PCD_SetAddress+0x40>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 fa4e 	bl	800921c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	4608      	mov	r0, r1
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	70fb      	strb	r3, [r7, #3]
 8004da4:	460b      	mov	r3, r1
 8004da6:	803b      	strh	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da0e      	bge.n	8004dd6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	f003 0207 	and.w	r2, r3, #7
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	705a      	strb	r2, [r3, #1]
 8004dd4:	e00e      	b.n	8004df4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	f003 0207 	and.w	r2, r3, #7
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e00:	883a      	ldrh	r2, [r7, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	78ba      	ldrb	r2, [r7, #2]
 8004e0a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e0c:	78bb      	ldrb	r3, [r7, #2]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d102      	bne.n	8004e18 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_PCD_EP_Open+0x94>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e00e      	b.n	8004e44 <HAL_PCD_EP_Open+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 ff97 	bl	8006d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004e42:	7afb      	ldrb	r3, [r7, #11]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	da0e      	bge.n	8004e7e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	f003 0207 	and.w	r2, r3, #7
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	3310      	adds	r3, #16
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	705a      	strb	r2, [r3, #1]
 8004e7c:	e00e      	b.n	8004e9c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	f003 0207 	and.w	r2, r3, #7
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4413      	add	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_PCD_EP_Close+0x6a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e00e      	b.n	8004ed4 <HAL_PCD_EP_Close+0x88>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 fb0f 	bl	80074e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eec:	7afb      	ldrb	r3, [r7, #11]
 8004eee:	f003 0207 	and.w	r2, r3, #7
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f1c:	7afb      	ldrb	r3, [r7, #11]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 fcc6 	bl	80078c0 <USB_EPStartXfer>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	f003 0207 	and.w	r2, r3, #7
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004f60:	681b      	ldr	r3, [r3, #0]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	3310      	adds	r3, #16
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6979      	ldr	r1, [r7, #20]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f002 fc78 	bl	80078c0 <USB_EPStartXfer>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	7912      	ldrb	r2, [r2, #4]
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04c      	b.n	8005092 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da0e      	bge.n	800501e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3310      	adds	r3, #16
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	705a      	strb	r2, [r3, #1]
 800501c:	e00c      	b.n	8005038 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_PCD_EP_SetStall+0x7e>
 8005054:	2302      	movs	r3, #2
 8005056:	e01c      	b.n	8005092 <HAL_PCD_EP_SetStall+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f003 ffdb 	bl	8009022 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f004 f900 	bl	8009288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050a6:	78fb      	ldrb	r3, [r7, #3]
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	7912      	ldrb	r2, [r2, #4]
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e040      	b.n	800513a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da0e      	bge.n	80050de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 0207 	and.w	r2, r3, #7
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	3310      	adds	r3, #16
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	705a      	strb	r2, [r3, #1]
 80050dc:	e00e      	b.n	80050fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	f003 0207 	and.w	r2, r3, #7
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4413      	add	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005102:	78fb      	ldrb	r3, [r7, #3]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_PCD_EP_ClrStall+0x82>
 8005118:	2302      	movs	r3, #2
 800511a:	e00e      	b.n	800513a <HAL_PCD_EP_ClrStall+0xa0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f003 ffc9 	bl	80090c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b096      	sub	sp, #88	@ 0x58
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800514a:	e3bb      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005154:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005166:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 8175 	bne.w	800545a <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d14e      	bne.n	800521a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518c:	81fb      	strh	r3, [r7, #14]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	89fb      	ldrh	r3, [r7, #14]
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3310      	adds	r3, #16
 80051a4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	3302      	adds	r3, #2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	441a      	add	r2, r3
 80051dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051e0:	2100      	movs	r1, #0
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f005 ffdd 	bl	800b1a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	7b5b      	ldrb	r3, [r3, #13]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8368 	beq.w	80058c4 <PCD_EP_ISR_Handler+0x782>
 80051f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8363 	bne.w	80058c4 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7b5b      	ldrb	r3, [r3, #13]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	735a      	strb	r2, [r3, #13]
 8005218:	e354      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005220:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800522c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005234:	2b00      	cmp	r3, #0
 8005236:	d034      	beq.n	80052a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005240:	b29b      	uxth	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	3306      	adds	r3, #6
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005262:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800526e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005270:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005274:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005276:	b29b      	uxth	r3, r3
 8005278:	f004 f857 	bl	800932a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29a      	uxth	r2, r3
 8005284:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005288:	4013      	ands	r3, r2
 800528a:	823b      	strh	r3, [r7, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	8a3a      	ldrh	r2, [r7, #16]
 8005292:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005296:	b292      	uxth	r2, r2
 8005298:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f005 ff54 	bl	800b148 <HAL_PCD_SetupStageCallback>
 80052a0:	e310      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052a2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f280 830c 	bge.w	80058c4 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80052b8:	4013      	ands	r3, r2
 80052ba:	83fb      	strh	r3, [r7, #30]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	8bfa      	ldrh	r2, [r7, #30]
 80052c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052c6:	b292      	uxth	r2, r2
 80052c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	3306      	adds	r3, #6
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d019      	beq.n	8005332 <PCD_EP_ISR_Handler+0x1f0>
 80052fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d015      	beq.n	8005332 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005310:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005314:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005316:	b29b      	uxth	r3, r3
 8005318:	f004 f807 	bl	800932a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800531c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	441a      	add	r2, r3
 8005326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005328:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800532a:	2100      	movs	r1, #0
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f005 ff1d 	bl	800b16c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800533c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 82bd 	bne.w	80058c4 <PCD_EP_ISR_Handler+0x782>
 800534a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800534e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005352:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005356:	f000 82b5 	beq.w	80058c4 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005368:	b29b      	uxth	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	4413      	add	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005390:	d91d      	bls.n	80053ce <PCD_EP_ISR_Handler+0x28c>
 8005392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	647b      	str	r3, [r7, #68]	@ 0x44
 800539a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <PCD_EP_ISR_Handler+0x26a>
 80053a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a8:	3b01      	subs	r3, #1
 80053aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	029b      	lsls	r3, r3, #10
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b29b      	uxth	r3, r3
 80053be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e026      	b.n	800541c <PCD_EP_ISR_Handler+0x2da>
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <PCD_EP_ISR_Handler+0x2aa>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e017      	b.n	800541c <PCD_EP_ISR_Handler+0x2da>
 80053ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <PCD_EP_ISR_Handler+0x2c4>
 8005400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005402:	3301      	adds	r3, #1
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29a      	uxth	r2, r3
 800540c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540e:	b29b      	uxth	r3, r3
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	b29b      	uxth	r3, r3
 8005414:	4313      	orrs	r3, r2
 8005416:	b29a      	uxth	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542c:	827b      	strh	r3, [r7, #18]
 800542e:	8a7b      	ldrh	r3, [r7, #18]
 8005430:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005434:	827b      	strh	r3, [r7, #18]
 8005436:	8a7b      	ldrh	r3, [r7, #18]
 8005438:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800543c:	827b      	strh	r3, [r7, #18]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	8a7b      	ldrh	r3, [r7, #18]
 8005444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800544c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e234      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800546e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005472:	2b00      	cmp	r3, #0
 8005474:	f280 80fc 	bge.w	8005670 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800548e:	4013      	ands	r3, r2
 8005490:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80054a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054aa:	b292      	uxth	r2, r2
 80054ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d125      	bne.n	8005518 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4413      	add	r3, r2
 80054e0:	3306      	adds	r3, #6
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80054f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8092 	beq.w	8005626 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005508:	6959      	ldr	r1, [r3, #20]
 800550a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550c:	88da      	ldrh	r2, [r3, #6]
 800550e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005512:	f003 ff0a 	bl	800932a <USB_ReadPMA>
 8005516:	e086      	b.n	8005626 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551a:	78db      	ldrb	r3, [r3, #3]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d10a      	bne.n	8005536 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005520:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005524:	461a      	mov	r2, r3
 8005526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9d9 	bl	80058e0 <HAL_PCD_EP_DB_Receive>
 800552e:	4603      	mov	r3, r0
 8005530:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005534:	e077      	b.n	8005626 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800554c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005550:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005572:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d024      	beq.n	80055de <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	3302      	adds	r3, #2
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80055c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02e      	beq.n	8005626 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ce:	6959      	ldr	r1, [r3, #20]
 80055d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d2:	891a      	ldrh	r2, [r3, #8]
 80055d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055d8:	f003 fea7 	bl	800932a <USB_ReadPMA>
 80055dc:	e023      	b.n	8005626 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	3306      	adds	r3, #6
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800560a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561c:	895a      	ldrh	r2, [r3, #10]
 800561e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005622:	f003 fe82 	bl	800932a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800562e:	441a      	add	r2, r3
 8005630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005632:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800563c:	441a      	add	r2, r3
 800563e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005640:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <PCD_EP_ISR_Handler+0x514>
 800564a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800564e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d206      	bcs.n	8005664 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f005 fd85 	bl	800b16c <HAL_PCD_DataOutStageCallback>
 8005662:	e005      	b.n	8005670 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800566a:	4618      	mov	r0, r3
 800566c:	f002 f928 	bl	80078c0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8123 	beq.w	80058c4 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800567e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	3310      	adds	r3, #16
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80056c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80056ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d0:	78db      	ldrb	r3, [r3, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	f040 80a2 	bne.w	800581c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80056d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056da:	2200      	movs	r2, #0
 80056dc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e0:	7b1b      	ldrb	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8093 	beq.w	800580e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d046      	beq.n	8005782 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d126      	bne.n	800574a <PCD_EP_ISR_Handler+0x608>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	4413      	add	r3, r2
 8005712:	627b      	str	r3, [r7, #36]	@ 0x24
 8005714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800572e:	b29a      	uxth	r2, r3
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	801a      	strh	r2, [r3, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800573e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005742:	b29a      	uxth	r2, r3
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	e061      	b.n	800580e <PCD_EP_ISR_Handler+0x6cc>
 800574a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d15d      	bne.n	800580e <PCD_EP_ISR_Handler+0x6cc>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005766:	4413      	add	r3, r2
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800576a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011a      	lsls	r2, r3, #4
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	4413      	add	r3, r2
 8005774:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	2200      	movs	r2, #0
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e045      	b.n	800580e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d126      	bne.n	80057de <PCD_EP_ISR_Handler+0x69c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800579e:	b29b      	uxth	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a4:	4413      	add	r3, r2
 80057a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	011a      	lsls	r2, r3, #4
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	4413      	add	r3, r2
 80057b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e017      	b.n	800580e <PCD_EP_ISR_Handler+0x6cc>
 80057de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d113      	bne.n	800580e <PCD_EP_ISR_Handler+0x6cc>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f4:	4413      	add	r3, r2
 80057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	011a      	lsls	r2, r3, #4
 80057fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005800:	4413      	add	r3, r2
 8005802:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	2200      	movs	r2, #0
 800580c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800580e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f005 fcc4 	bl	800b1a2 <HAL_PCD_DataInStageCallback>
 800581a:	e053      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800581c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d146      	bne.n	80058b6 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	3302      	adds	r3, #2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005850:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800585c:	429a      	cmp	r2, r3
 800585e:	d907      	bls.n	8005870 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8005860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005862:	699a      	ldr	r2, [r3, #24]
 8005864:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005868:	1ad2      	subs	r2, r2, r3
 800586a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800586c:	619a      	str	r2, [r3, #24]
 800586e:	e002      	b.n	8005876 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8005870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800587e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f005 fc8c 	bl	800b1a2 <HAL_PCD_DataInStageCallback>
 800588a:	e01b      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800588c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005894:	441a      	add	r2, r3
 8005896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005898:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800589a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800589c:	69da      	ldr	r2, [r3, #28]
 800589e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058a2:	441a      	add	r2, r3
 80058a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058ae:	4618      	mov	r0, r3
 80058b0:	f002 f806 	bl	80078c0 <USB_EPStartXfer>
 80058b4:	e006      	b.n	80058c4 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80058ba:	461a      	mov	r2, r3
 80058bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f91b 	bl	8005afa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	b21b      	sxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f6ff ac3b 	blt.w	800514c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3758      	adds	r7, #88	@ 0x58
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d07e      	beq.n	80059f6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005900:	b29b      	uxth	r3, r3
 8005902:	461a      	mov	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	3302      	adds	r3, #2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005920:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	8b7b      	ldrh	r3, [r7, #26]
 8005928:	429a      	cmp	r2, r3
 800592a:	d306      	bcc.n	800593a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	8b7b      	ldrh	r3, [r7, #26]
 8005932:	1ad2      	subs	r2, r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	619a      	str	r2, [r3, #24]
 8005938:	e002      	b.n	8005940 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d123      	bne.n	8005990 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	b29b      	uxth	r3, r3
 800595a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800595e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005962:	833b      	strh	r3, [r7, #24]
 8005964:	8b3b      	ldrh	r3, [r7, #24]
 8005966:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800596a:	833b      	strh	r3, [r7, #24]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	8b3b      	ldrh	r3, [r7, #24]
 800597c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598c:	b29b      	uxth	r3, r3
 800598e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01f      	beq.n	80059da <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	82fb      	strh	r3, [r7, #22]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8afb      	ldrh	r3, [r7, #22]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059da:	8b7b      	ldrh	r3, [r7, #26]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8087 	beq.w	8005af0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6959      	ldr	r1, [r3, #20]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	891a      	ldrh	r2, [r3, #8]
 80059ee:	8b7b      	ldrh	r3, [r7, #26]
 80059f0:	f003 fc9b 	bl	800932a <USB_ReadPMA>
 80059f4:	e07c      	b.n	8005af0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4413      	add	r3, r2
 8005a0a:	3306      	adds	r3, #6
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	8b7b      	ldrh	r3, [r7, #26]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d306      	bcc.n	8005a38 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	8b7b      	ldrh	r3, [r7, #26]
 8005a30:	1ad2      	subs	r2, r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	619a      	str	r2, [r3, #24]
 8005a36:	e002      	b.n	8005a3e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d123      	bne.n	8005a8e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a60:	83fb      	strh	r3, [r7, #30]
 8005a62:	8bfb      	ldrh	r3, [r7, #30]
 8005a64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a68:	83fb      	strh	r3, [r7, #30]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	441a      	add	r2, r3
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a8e:	88fb      	ldrh	r3, [r7, #6]
 8005a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11f      	bne.n	8005ad8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	83bb      	strh	r3, [r7, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	8bbb      	ldrh	r3, [r7, #28]
 8005ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ad8:	8b7b      	ldrh	r3, [r7, #26]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6959      	ldr	r1, [r3, #20]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	895a      	ldrh	r2, [r3, #10]
 8005aea:	8b7b      	ldrh	r3, [r7, #26]
 8005aec:	f003 fc1d 	bl	800932a <USB_ReadPMA>
    }
  }

  return count;
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b0a4      	sub	sp, #144	@ 0x90
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	4613      	mov	r3, r2
 8005b06:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 81dd 	beq.w	8005ece <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	3302      	adds	r3, #2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d907      	bls.n	8005b5c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b54:	1ad2      	subs	r2, r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	619a      	str	r2, [r3, #24]
 8005b5a:	e002      	b.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 80b9 	bne.w	8005cde <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d126      	bne.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	4413      	add	r3, r2
 8005b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	e01a      	b.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d116      	bne.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	4413      	add	r3, r2
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	011a      	lsls	r2, r3, #4
 8005be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d126      	bne.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	011a      	lsls	r2, r3, #4
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e017      	b.n	8005c84 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d113      	bne.n	8005c84 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	4413      	add	r3, r2
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	011a      	lsls	r2, r3, #4
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f005 fa89 	bl	800b1a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 82fc 	beq.w	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	82fb      	strh	r3, [r7, #22]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8afb      	ldrh	r3, [r7, #22]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
 8005cdc:	e2da      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d021      	beq.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d02:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	f040 82ae 	bne.w	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d40:	441a      	add	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d4e:	441a      	add	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a1a      	ldr	r2, [r3, #32]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d30b      	bcc.n	8005d78 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	621a      	str	r2, [r3, #32]
 8005d76:	e017      	b.n	8005da8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005d80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d90:	e00a      	b.n	8005da8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	785b      	ldrb	r3, [r3, #1]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d165      	bne.n	8005e7c <HAL_PCD_EP_DB_Transmit+0x382>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc4:	4413      	add	r3, r2
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	011a      	lsls	r2, r3, #4
 8005dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dec:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dee:	d91d      	bls.n	8005e2c <HAL_PCD_EP_DB_Transmit+0x332>
 8005df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <HAL_PCD_EP_DB_Transmit+0x310>
 8005e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e06:	3b01      	subs	r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	029b      	lsls	r3, r3, #10
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e044      	b.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <HAL_PCD_EP_DB_Transmit+0x350>
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e035      	b.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e60:	3301      	adds	r3, #1
 8005e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	029b      	lsls	r3, r3, #10
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	4313      	orrs	r3, r2
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	801a      	strh	r2, [r3, #0]
 8005e7a:	e01c      	b.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d118      	bne.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e98:	4413      	add	r3, r2
 8005e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	011a      	lsls	r2, r3, #4
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6959      	ldr	r1, [r3, #20]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	891a      	ldrh	r2, [r3, #8]
 8005ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f003 f9e9 	bl	800929e <USB_WritePMA>
 8005ecc:	e1e2      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3306      	adds	r3, #6
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d307      	bcc.n	8005f16 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	619a      	str	r2, [r3, #24]
 8005f14:	e002      	b.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f040 80c0 	bne.w	80060a6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d126      	bne.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x482>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f42:	4413      	add	r3, r2
 8005f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	011a      	lsls	r2, r3, #4
 8005f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	e01a      	b.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d116      	bne.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f98:	4413      	add	r3, r2
 8005f9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	011a      	lsls	r2, r3, #4
 8005fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005faa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fae:	2200      	movs	r2, #0
 8005fb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d12b      	bne.n	8006018 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd4:	4413      	add	r3, r2
 8005fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fe6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e017      	b.n	8006048 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d113      	bne.n	8006048 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800602e:	4413      	add	r3, r2
 8006030:	677b      	str	r3, [r7, #116]	@ 0x74
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	011a      	lsls	r2, r3, #4
 8006038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603a:	4413      	add	r3, r2
 800603c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006040:	673b      	str	r3, [r7, #112]	@ 0x70
 8006042:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006044:	2200      	movs	r2, #0
 8006046:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	4619      	mov	r1, r3
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f005 f8a7 	bl	800b1a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 811a 	bne.w	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006098:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800609c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
 80060a4:	e0f6      	b.n	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d121      	bne.n	80060f4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	441a      	add	r2, r3
 80060dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80060e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	f040 80ca 	bne.w	8006294 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006108:	441a      	add	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006116:	441a      	add	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	429a      	cmp	r2, r3
 8006126:	d30b      	bcc.n	8006140 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6a1a      	ldr	r2, [r3, #32]
 8006134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	621a      	str	r2, [r3, #32]
 800613e:	e017      	b.n	8006170 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d108      	bne.n	800615a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006148:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800614c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006158:	e00a      	b.n	8006170 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2200      	movs	r2, #0
 8006166:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	657b      	str	r3, [r7, #84]	@ 0x54
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d165      	bne.n	800624a <HAL_PCD_EP_DB_Transmit+0x750>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006192:	4413      	add	r3, r2
 8006194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	011a      	lsls	r2, r3, #4
 800619c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800619e:	4413      	add	r3, r2
 80061a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80061bc:	d91d      	bls.n	80061fa <HAL_PCD_EP_DB_Transmit+0x700>
 80061be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80061d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061d4:	3b01      	subs	r3, #1
 80061d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	029b      	lsls	r3, r3, #10
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	4313      	orrs	r3, r2
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e041      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x784>
 80061fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <HAL_PCD_EP_DB_Transmit+0x71e>
 8006202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e032      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x784>
 8006218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_PCD_EP_DB_Transmit+0x738>
 800622c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800622e:	3301      	adds	r3, #1
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e019      	b.n	800627e <HAL_PCD_EP_DB_Transmit+0x784>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d115      	bne.n	800627e <HAL_PCD_EP_DB_Transmit+0x784>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800625a:	b29b      	uxth	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006260:	4413      	add	r3, r2
 8006262:	657b      	str	r3, [r7, #84]	@ 0x54
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626c:	4413      	add	r3, r2
 800626e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006272:	653b      	str	r3, [r7, #80]	@ 0x50
 8006274:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006278:	b29a      	uxth	r2, r3
 800627a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800627c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	6959      	ldr	r1, [r3, #20]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	895a      	ldrh	r2, [r3, #10]
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	b29b      	uxth	r3, r3
 8006290:	f003 f805 	bl	800929e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ae:	82bb      	strh	r3, [r7, #20]
 80062b0:	8abb      	ldrh	r3, [r7, #20]
 80062b2:	f083 0310 	eor.w	r3, r3, #16
 80062b6:	82bb      	strh	r3, [r7, #20]
 80062b8:	8abb      	ldrh	r3, [r7, #20]
 80062ba:	f083 0320 	eor.w	r3, r3, #32
 80062be:	82bb      	strh	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	8abb      	ldrh	r3, [r7, #20]
 80062d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3790      	adds	r7, #144	@ 0x90
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	607b      	str	r3, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	4613      	mov	r3, r2
 80062fe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006300:	897b      	ldrh	r3, [r7, #10]
 8006302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630c:	897b      	ldrh	r3, [r7, #10]
 800630e:	f003 0207 	and.w	r2, r3, #7
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	3310      	adds	r3, #16
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e009      	b.n	8006338 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006324:	897a      	ldrh	r2, [r7, #10]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006338:	893b      	ldrh	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	b29a      	uxth	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	80da      	strh	r2, [r3, #6]
 800634c:	e00b      	b.n	8006366 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2201      	movs	r2, #1
 8006352:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	b29a      	uxth	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	b29a      	uxth	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
	...

08006374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e272      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8087 	beq.w	80064a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006394:	4b92      	ldr	r3, [pc, #584]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b04      	cmp	r3, #4
 800639e:	d00c      	beq.n	80063ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a0:	4b8f      	ldr	r3, [pc, #572]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 030c 	and.w	r3, r3, #12
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d112      	bne.n	80063d2 <HAL_RCC_OscConfig+0x5e>
 80063ac:	4b8c      	ldr	r3, [pc, #560]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b8:	d10b      	bne.n	80063d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ba:	4b89      	ldr	r3, [pc, #548]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d06c      	beq.n	80064a0 <HAL_RCC_OscConfig+0x12c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d168      	bne.n	80064a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e24c      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063da:	d106      	bne.n	80063ea <HAL_RCC_OscConfig+0x76>
 80063dc:	4b80      	ldr	r3, [pc, #512]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7f      	ldr	r2, [pc, #508]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e02e      	b.n	8006448 <HAL_RCC_OscConfig+0xd4>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0x98>
 80063f2:	4b7b      	ldr	r3, [pc, #492]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a7a      	ldr	r2, [pc, #488]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80063f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b78      	ldr	r3, [pc, #480]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a77      	ldr	r2, [pc, #476]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006404:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e01d      	b.n	8006448 <HAL_RCC_OscConfig+0xd4>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006414:	d10c      	bne.n	8006430 <HAL_RCC_OscConfig+0xbc>
 8006416:	4b72      	ldr	r3, [pc, #456]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a71      	ldr	r2, [pc, #452]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 800641c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	4b6f      	ldr	r3, [pc, #444]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6e      	ldr	r2, [pc, #440]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e00b      	b.n	8006448 <HAL_RCC_OscConfig+0xd4>
 8006430:	4b6b      	ldr	r3, [pc, #428]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a6a      	ldr	r2, [pc, #424]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4b68      	ldr	r3, [pc, #416]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a67      	ldr	r2, [pc, #412]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006442:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006450:	f7fd ff40 	bl	80042d4 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006458:	f7fd ff3c 	bl	80042d4 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b64      	cmp	r3, #100	@ 0x64
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e200      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800646a:	4b5d      	ldr	r3, [pc, #372]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0xe4>
 8006476:	e014      	b.n	80064a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006478:	f7fd ff2c 	bl	80042d4 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006480:	f7fd ff28 	bl	80042d4 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	@ 0x64
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e1ec      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006492:	4b53      	ldr	r3, [pc, #332]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x10c>
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d063      	beq.n	8006576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ae:	4b4c      	ldr	r3, [pc, #304]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 030c 	and.w	r3, r3, #12
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064ba:	4b49      	ldr	r3, [pc, #292]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d11c      	bne.n	8006500 <HAL_RCC_OscConfig+0x18c>
 80064c6:	4b46      	ldr	r3, [pc, #280]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d116      	bne.n	8006500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d2:	4b43      	ldr	r3, [pc, #268]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_RCC_OscConfig+0x176>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d001      	beq.n	80064ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e1c0      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ea:	4b3d      	ldr	r3, [pc, #244]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4939      	ldr	r1, [pc, #228]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064fe:	e03a      	b.n	8006576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006508:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <HAL_RCC_OscConfig+0x270>)
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650e:	f7fd fee1 	bl	80042d4 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006514:	e008      	b.n	8006528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006516:	f7fd fedd 	bl	80042d4 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e1a1      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006528:	4b2d      	ldr	r3, [pc, #180]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f0      	beq.n	8006516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006534:	4b2a      	ldr	r3, [pc, #168]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4927      	ldr	r1, [pc, #156]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	600b      	str	r3, [r1, #0]
 8006548:	e015      	b.n	8006576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800654a:	4b26      	ldr	r3, [pc, #152]	@ (80065e4 <HAL_RCC_OscConfig+0x270>)
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006550:	f7fd fec0 	bl	80042d4 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006558:	f7fd febc 	bl	80042d4 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e180      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800656a:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f0      	bne.n	8006558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d03a      	beq.n	80065f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d019      	beq.n	80065be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800658a:	4b17      	ldr	r3, [pc, #92]	@ (80065e8 <HAL_RCC_OscConfig+0x274>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006590:	f7fd fea0 	bl	80042d4 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006598:	f7fd fe9c 	bl	80042d4 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e160      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <HAL_RCC_OscConfig+0x26c>)
 80065ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065b6:	2001      	movs	r0, #1
 80065b8:	f000 fa9c 	bl	8006af4 <RCC_Delay>
 80065bc:	e01c      	b.n	80065f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065be:	4b0a      	ldr	r3, [pc, #40]	@ (80065e8 <HAL_RCC_OscConfig+0x274>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7fd fe86 	bl	80042d4 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ca:	e00f      	b.n	80065ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065cc:	f7fd fe82 	bl	80042d4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d908      	bls.n	80065ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e146      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000
 80065e4:	42420000 	.word	0x42420000
 80065e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ec:	4b92      	ldr	r3, [pc, #584]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e9      	bne.n	80065cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a6 	beq.w	8006752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660a:	4b8b      	ldr	r3, [pc, #556]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10d      	bne.n	8006632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006616:	4b88      	ldr	r3, [pc, #544]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	4a87      	ldr	r2, [pc, #540]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800661c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006620:	61d3      	str	r3, [r2, #28]
 8006622:	4b85      	ldr	r3, [pc, #532]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662e:	2301      	movs	r3, #1
 8006630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	4b82      	ldr	r3, [pc, #520]	@ (800683c <HAL_RCC_OscConfig+0x4c8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d118      	bne.n	8006670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800663e:	4b7f      	ldr	r3, [pc, #508]	@ (800683c <HAL_RCC_OscConfig+0x4c8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7e      	ldr	r2, [pc, #504]	@ (800683c <HAL_RCC_OscConfig+0x4c8>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800664a:	f7fd fe43 	bl	80042d4 <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	e008      	b.n	8006664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006652:	f7fd fe3f 	bl	80042d4 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	2b64      	cmp	r3, #100	@ 0x64
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e103      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006664:	4b75      	ldr	r3, [pc, #468]	@ (800683c <HAL_RCC_OscConfig+0x4c8>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f0      	beq.n	8006652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <HAL_RCC_OscConfig+0x312>
 8006678:	4b6f      	ldr	r3, [pc, #444]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	4a6e      	ldr	r2, [pc, #440]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6213      	str	r3, [r2, #32]
 8006684:	e02d      	b.n	80066e2 <HAL_RCC_OscConfig+0x36e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x334>
 800668e:	4b6a      	ldr	r3, [pc, #424]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4a69      	ldr	r2, [pc, #420]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6213      	str	r3, [r2, #32]
 800669a:	4b67      	ldr	r3, [pc, #412]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a66      	ldr	r2, [pc, #408]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	6213      	str	r3, [r2, #32]
 80066a6:	e01c      	b.n	80066e2 <HAL_RCC_OscConfig+0x36e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	d10c      	bne.n	80066ca <HAL_RCC_OscConfig+0x356>
 80066b0:	4b61      	ldr	r3, [pc, #388]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	4a60      	ldr	r2, [pc, #384]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066b6:	f043 0304 	orr.w	r3, r3, #4
 80066ba:	6213      	str	r3, [r2, #32]
 80066bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6213      	str	r3, [r2, #32]
 80066c8:	e00b      	b.n	80066e2 <HAL_RCC_OscConfig+0x36e>
 80066ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4a5a      	ldr	r2, [pc, #360]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	6213      	str	r3, [r2, #32]
 80066d6:	4b58      	ldr	r3, [pc, #352]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	4a57      	ldr	r2, [pc, #348]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80066dc:	f023 0304 	bic.w	r3, r3, #4
 80066e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d015      	beq.n	8006716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ea:	f7fd fdf3 	bl	80042d4 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f0:	e00a      	b.n	8006708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f2:	f7fd fdef 	bl	80042d4 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006700:	4293      	cmp	r3, r2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e0b1      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006708:	4b4b      	ldr	r3, [pc, #300]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ee      	beq.n	80066f2 <HAL_RCC_OscConfig+0x37e>
 8006714:	e014      	b.n	8006740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006716:	f7fd fddd 	bl	80042d4 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671c:	e00a      	b.n	8006734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800671e:	f7fd fdd9 	bl	80042d4 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800672c:	4293      	cmp	r3, r2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e09b      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006734:	4b40      	ldr	r3, [pc, #256]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1ee      	bne.n	800671e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d105      	bne.n	8006752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006746:	4b3c      	ldr	r3, [pc, #240]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	4a3b      	ldr	r2, [pc, #236]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800674c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8087 	beq.w	800686a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800675c:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f003 030c 	and.w	r3, r3, #12
 8006764:	2b08      	cmp	r3, #8
 8006766:	d061      	beq.n	800682c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d146      	bne.n	80067fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006770:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006776:	f7fd fdad 	bl	80042d4 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677e:	f7fd fda9 	bl	80042d4 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e06d      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006790:	4b29      	ldr	r3, [pc, #164]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a4:	d108      	bne.n	80067b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067a6:	4b24      	ldr	r3, [pc, #144]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4921      	ldr	r1, [pc, #132]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a19      	ldr	r1, [r3, #32]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	430b      	orrs	r3, r1
 80067ca:	491b      	ldr	r1, [pc, #108]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d6:	f7fd fd7d 	bl	80042d4 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067de:	f7fd fd79 	bl	80042d4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e03d      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f0:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x46a>
 80067fc:	e035      	b.n	800686a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_RCC_OscConfig+0x4cc>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006804:	f7fd fd66 	bl	80042d4 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fd fd62 	bl	80042d4 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e026      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800681e:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <HAL_RCC_OscConfig+0x4c4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x498>
 800682a:	e01e      	b.n	800686a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d107      	bne.n	8006844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e019      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
 8006838:	40021000 	.word	0x40021000
 800683c:	40007000 	.word	0x40007000
 8006840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006844:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <HAL_RCC_OscConfig+0x500>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	429a      	cmp	r2, r3
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d001      	beq.n	800686a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40021000 	.word	0x40021000

08006878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0d0      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800688c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d910      	bls.n	80068bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b67      	ldr	r3, [pc, #412]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 0207 	bic.w	r2, r3, #7
 80068a2:	4965      	ldr	r1, [pc, #404]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b63      	ldr	r3, [pc, #396]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0b8      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d4:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4a58      	ldr	r2, [pc, #352]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80068da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ec:	4b53      	ldr	r3, [pc, #332]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4a52      	ldr	r2, [pc, #328]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80068f2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80068f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f8:	4b50      	ldr	r3, [pc, #320]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	494d      	ldr	r1, [pc, #308]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006906:	4313      	orrs	r3, r2
 8006908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d040      	beq.n	8006998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691e:	4b47      	ldr	r3, [pc, #284]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d115      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e07f      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d107      	bne.n	8006946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006936:	4b41      	ldr	r3, [pc, #260]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e073      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006946:	4b3d      	ldr	r3, [pc, #244]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e06b      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006956:	4b39      	ldr	r3, [pc, #228]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f023 0203 	bic.w	r2, r3, #3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4936      	ldr	r1, [pc, #216]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006968:	f7fd fcb4 	bl	80042d4 <HAL_GetTick>
 800696c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	e00a      	b.n	8006986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006970:	f7fd fcb0 	bl	80042d4 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e053      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	4b2d      	ldr	r3, [pc, #180]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f003 020c 	and.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	429a      	cmp	r2, r3
 8006996:	d1eb      	bne.n	8006970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006998:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d210      	bcs.n	80069c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b24      	ldr	r3, [pc, #144]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 0207 	bic.w	r2, r3, #7
 80069ae:	4922      	ldr	r1, [pc, #136]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e032      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d4:	4b19      	ldr	r3, [pc, #100]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4916      	ldr	r1, [pc, #88]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069f2:	4b12      	ldr	r3, [pc, #72]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	00db      	lsls	r3, r3, #3
 8006a00:	490e      	ldr	r1, [pc, #56]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a06:	f000 f821 	bl	8006a4c <HAL_RCC_GetSysClockFreq>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	490a      	ldr	r1, [pc, #40]	@ (8006a40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a18:	5ccb      	ldrb	r3, [r1, r3]
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	4a09      	ldr	r2, [pc, #36]	@ (8006a44 <HAL_RCC_ClockConfig+0x1cc>)
 8006a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a22:	4b09      	ldr	r3, [pc, #36]	@ (8006a48 <HAL_RCC_ClockConfig+0x1d0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fd fc12 	bl	8004250 <HAL_InitTick>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40022000 	.word	0x40022000
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	0800f800 	.word	0x0800f800
 8006a44:	2000000c 	.word	0x2000000c
 8006a48:	20000010 	.word	0x20000010

08006a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a66:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d002      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0x30>
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d003      	beq.n	8006a82 <HAL_RCC_GetSysClockFreq+0x36>
 8006a7a:	e027      	b.n	8006acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a7e:	613b      	str	r3, [r7, #16]
      break;
 8006a80:	e027      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	0c9b      	lsrs	r3, r3, #18
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a8c:	5cd3      	ldrb	r3, [r2, r3]
 8006a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d010      	beq.n	8006abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a9a:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	0c5b      	lsrs	r3, r3, #17
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	4a11      	ldr	r2, [pc, #68]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006aae:	fb03 f202 	mul.w	r2, r3, r2
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	e004      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0c      	ldr	r2, [pc, #48]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	613b      	str	r3, [r7, #16]
      break;
 8006aca:	e002      	b.n	8006ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ace:	613b      	str	r3, [r7, #16]
      break;
 8006ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ad2:	693b      	ldr	r3, [r7, #16]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	007a1200 	.word	0x007a1200
 8006ae8:	0800f810 	.word	0x0800f810
 8006aec:	0800f820 	.word	0x0800f820
 8006af0:	003d0900 	.word	0x003d0900

08006af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006afc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <RCC_Delay+0x34>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <RCC_Delay+0x38>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	0a5b      	lsrs	r3, r3, #9
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b10:	bf00      	nop
  }
  while (Delay --);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1e5a      	subs	r2, r3, #1
 8006b16:	60fa      	str	r2, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f9      	bne.n	8006b10 <RCC_Delay+0x1c>
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr
 8006b28:	2000000c 	.word	0x2000000c
 8006b2c:	10624dd3 	.word	0x10624dd3

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d07d      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b50:	4b4f      	ldr	r3, [pc, #316]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10d      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	4a4b      	ldr	r2, [pc, #300]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b66:	61d3      	str	r3, [r2, #28]
 8006b68:	4b49      	ldr	r3, [pc, #292]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b78:	4b46      	ldr	r3, [pc, #280]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d118      	bne.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b84:	4b43      	ldr	r3, [pc, #268]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a42      	ldr	r2, [pc, #264]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b90:	f7fd fba0 	bl	80042d4 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b96:	e008      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b98:	f7fd fb9c 	bl	80042d4 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b64      	cmp	r3, #100	@ 0x64
 8006ba4:	d901      	bls.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e06d      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006baa:	4b3a      	ldr	r3, [pc, #232]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0f0      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bb6:	4b36      	ldr	r3, [pc, #216]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02e      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d027      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bde:	4b2e      	ldr	r3, [pc, #184]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006be4:	4b2c      	ldr	r3, [pc, #176]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bea:	4a29      	ldr	r2, [pc, #164]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d014      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfa:	f7fd fb6b 	bl	80042d4 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c00:	e00a      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c02:	f7fd fb67 	bl	80042d4 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e036      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c18:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0ee      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c24:	4b1a      	ldr	r3, [pc, #104]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4917      	ldr	r1, [pc, #92]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d105      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3c:	4b14      	ldr	r3, [pc, #80]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c54:	4b0e      	ldr	r3, [pc, #56]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	490b      	ldr	r1, [pc, #44]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c72:	4b07      	ldr	r3, [pc, #28]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000
 8006c94:	40007000 	.word	0x40007000
 8006c98:	42420440 	.word	0x42420440

08006c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cc6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006cca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006cea:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006cee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4013      	ands	r3, r2
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b085      	sub	sp, #20
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	4638      	mov	r0, r7
 8006d38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b09d      	sub	sp, #116	@ 0x74
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d8e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	78db      	ldrb	r3, [r3, #3]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d81f      	bhi.n	8006dda <USB_ActivateEndpoint+0x72>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <USB_ActivateEndpoint+0x38>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006de3 	.word	0x08006de3
 8006dac:	08006dbf 	.word	0x08006dbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006db0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006db4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006db8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006dbc:	e012      	b.n	8006de4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006dbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006dc2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006dc6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006dca:	e00b      	b.n	8006de4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006dcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006dd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006dd8:	e004      	b.n	8006de4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006de0:	e000      	b.n	8006de4 <USB_ActivateEndpoint+0x7c>
      break;
 8006de2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006e36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	7b1b      	ldrb	r3, [r3, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f040 8178 	bne.w	8007144 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8084 	beq.w	8006f66 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	61bb      	str	r3, [r7, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	4413      	add	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	011a      	lsls	r2, r3, #4
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	827b      	strh	r3, [r7, #18]
 8006ea0:	8a7b      	ldrh	r3, [r7, #18]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <USB_ActivateEndpoint+0x17a>
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	823b      	strh	r3, [r7, #16]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	8a3b      	ldrh	r3, [r7, #16]
 8006ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	78db      	ldrb	r3, [r3, #3]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d020      	beq.n	8006f2c <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f00:	81bb      	strh	r3, [r7, #12]
 8006f02:	89bb      	ldrh	r3, [r7, #12]
 8006f04:	f083 0320 	eor.w	r3, r3, #32
 8006f08:	81bb      	strh	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	89bb      	ldrh	r3, [r7, #12]
 8006f16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	8013      	strh	r3, [r2, #0]
 8006f2a:	e2d5      	b.n	80074d8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f42:	81fb      	strh	r3, [r7, #14]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	441a      	add	r2, r3
 8006f4e:	89fb      	ldrh	r3, [r7, #14]
 8006f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	8013      	strh	r3, [r2, #0]
 8006f64:	e2b8      	b.n	80074d8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	461a      	mov	r2, r3
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	4413      	add	r3, r2
 8006f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	011a      	lsls	r2, r3, #4
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f98:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	4413      	add	r3, r2
 8006fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	011a      	lsls	r2, r3, #4
 8006fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd4:	d91d      	bls.n	8007012 <USB_ActivateEndpoint+0x2aa>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <USB_ActivateEndpoint+0x288>
 8006fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fec:	3b01      	subs	r3, #1
 8006fee:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	029b      	lsls	r3, r3, #10
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700a:	b29a      	uxth	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e026      	b.n	8007060 <USB_ActivateEndpoint+0x2f8>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <USB_ActivateEndpoint+0x2c8>
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e017      	b.n	8007060 <USB_ActivateEndpoint+0x2f8>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	085b      	lsrs	r3, r3, #1
 8007036:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <USB_ActivateEndpoint+0x2e2>
 8007044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007046:	3301      	adds	r3, #1
 8007048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29a      	uxth	r2, r3
 8007050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007052:	b29b      	uxth	r3, r3
 8007054:	029b      	lsls	r3, r3, #10
 8007056:	b29b      	uxth	r3, r3
 8007058:	4313      	orrs	r3, r2
 800705a:	b29a      	uxth	r2, r3
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800706e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01b      	beq.n	80070b0 <USB_ActivateEndpoint+0x348>
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	843b      	strh	r3, [r7, #32]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	8c3b      	ldrh	r3, [r7, #32]
 800709c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d124      	bne.n	8007102 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ce:	83bb      	strh	r3, [r7, #28]
 80070d0:	8bbb      	ldrh	r3, [r7, #28]
 80070d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070d6:	83bb      	strh	r3, [r7, #28]
 80070d8:	8bbb      	ldrh	r3, [r7, #28]
 80070da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070de:	83bb      	strh	r3, [r7, #28]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	441a      	add	r2, r3
 80070ea:	8bbb      	ldrh	r3, [r7, #28]
 80070ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	8013      	strh	r3, [r2, #0]
 8007100:	e1ea      	b.n	80074d8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007118:	83fb      	strh	r3, [r7, #30]
 800711a:	8bfb      	ldrh	r3, [r7, #30]
 800711c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007120:	83fb      	strh	r3, [r7, #30]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	8bfb      	ldrh	r3, [r7, #30]
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800713a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
 8007142:	e1c9      	b.n	80074d8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	78db      	ldrb	r3, [r3, #3]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d11e      	bne.n	800718a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800715e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007162:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800717c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007184:	b29b      	uxth	r3, r3
 8007186:	8013      	strh	r3, [r2, #0]
 8007188:	e01d      	b.n	80071c6 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800719c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	441a      	add	r2, r3
 80071ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80071b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	461a      	mov	r2, r3
 80071d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071d6:	4413      	add	r3, r2
 80071d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	011a      	lsls	r2, r3, #4
 80071e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	891b      	ldrh	r3, [r3, #8]
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007204:	b29b      	uxth	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720a:	4413      	add	r3, r2
 800720c:	657b      	str	r3, [r7, #84]	@ 0x54
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007216:	4413      	add	r3, r2
 8007218:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800721c:	653b      	str	r3, [r7, #80]	@ 0x50
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	895b      	ldrh	r3, [r3, #10]
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 8093 	bne.w	800735e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800724c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <USB_ActivateEndpoint+0x524>
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800727c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007288:	b29b      	uxth	r3, r3
 800728a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800729a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800729c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01b      	beq.n	80072dc <USB_ActivateEndpoint+0x574>
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	441a      	add	r2, r3
 80072c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80072c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072d8:	b29b      	uxth	r3, r3
 80072da:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80072f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80072f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80072fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80072fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007302:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	441a      	add	r2, r3
 800730e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800731c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007320:	b29b      	uxth	r3, r3
 8007322:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	441a      	add	r2, r3
 8007346:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800734c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007358:	b29b      	uxth	r3, r3
 800735a:	8013      	strh	r3, [r2, #0]
 800735c:	e0bc      	b.n	80074d8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800736e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d01d      	beq.n	80073b6 <USB_ActivateEndpoint+0x64e>
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800738c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007390:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	441a      	add	r2, r3
 800739e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80073a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80073c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80073ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01d      	beq.n	800740e <USB_ActivateEndpoint+0x6a6>
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	441a      	add	r2, r3
 80073f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80073fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007406:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800740a:	b29b      	uxth	r3, r3
 800740c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	78db      	ldrb	r3, [r3, #3]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d024      	beq.n	8007460 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b29b      	uxth	r3, r3
 8007424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800742c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007434:	f083 0320 	eor.w	r3, r3, #32
 8007438:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800744a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745a:	b29b      	uxth	r3, r3
 800745c:	8013      	strh	r3, [r2, #0]
 800745e:	e01d      	b.n	800749c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	b29b      	uxth	r3, r3
 800746e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007476:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	441a      	add	r2, r3
 8007484:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800748c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007498:	b29b      	uxth	r3, r3
 800749a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	441a      	add	r2, r3
 80074c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80074c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80074d8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3774      	adds	r7, #116	@ 0x74
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bc80      	pop	{r7}
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b08d      	sub	sp, #52	@ 0x34
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	7b1b      	ldrb	r3, [r3, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f040 808e 	bne.w	8007618 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d044      	beq.n	800758e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	81bb      	strh	r3, [r7, #12]
 8007512:	89bb      	ldrh	r3, [r7, #12]
 8007514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <USB_DeactivateEndpoint+0x6c>
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800752e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007532:	817b      	strh	r3, [r7, #10]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	441a      	add	r2, r3
 800753e:	897b      	ldrh	r3, [r7, #10]
 8007540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800754c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007550:	b29b      	uxth	r3, r3
 8007552:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29b      	uxth	r3, r3
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800756a:	813b      	strh	r3, [r7, #8]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	893b      	ldrh	r3, [r7, #8]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
 800758c:	e192      	b.n	80078b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	827b      	strh	r3, [r7, #18]
 800759c:	8a7b      	ldrh	r3, [r7, #18]
 800759e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_DeactivateEndpoint+0xf6>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075bc:	823b      	strh	r3, [r7, #16]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8a3b      	ldrh	r3, [r7, #16]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f4:	81fb      	strh	r3, [r7, #14]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	441a      	add	r2, r3
 8007600:	89fb      	ldrh	r3, [r7, #14]
 8007602:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007606:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800760a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007612:	b29b      	uxth	r3, r3
 8007614:	8013      	strh	r3, [r2, #0]
 8007616:	e14d      	b.n	80078b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	785b      	ldrb	r3, [r3, #1]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 80a5 	bne.w	800776c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	843b      	strh	r3, [r7, #32]
 8007630:	8c3b      	ldrh	r3, [r7, #32]
 8007632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01b      	beq.n	8007672 <USB_DeactivateEndpoint+0x18a>
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800764c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007650:	83fb      	strh	r3, [r7, #30]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	441a      	add	r2, r3
 800765c:	8bfb      	ldrh	r3, [r7, #30]
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800766a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	83bb      	strh	r3, [r7, #28]
 8007680:	8bbb      	ldrh	r3, [r7, #28]
 8007682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01b      	beq.n	80076c2 <USB_DeactivateEndpoint+0x1da>
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800769c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a0:	837b      	strh	r3, [r7, #26]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	441a      	add	r2, r3
 80076ac:	8b7b      	ldrh	r3, [r7, #26]
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d8:	833b      	strh	r3, [r7, #24]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	8b3b      	ldrh	r3, [r7, #24]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29b      	uxth	r3, r3
 8007708:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800770c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007710:	82fb      	strh	r3, [r7, #22]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	441a      	add	r2, r3
 800771c:	8afb      	ldrh	r3, [r7, #22]
 800771e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800772a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800772e:	b29b      	uxth	r3, r3
 8007730:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007748:	82bb      	strh	r3, [r7, #20]
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	441a      	add	r2, r3
 8007754:	8abb      	ldrh	r3, [r7, #20]
 8007756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800775e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007766:	b29b      	uxth	r3, r3
 8007768:	8013      	strh	r3, [r2, #0]
 800776a:	e0a3      	b.n	80078b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800777a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800777c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01b      	beq.n	80077bc <USB_DeactivateEndpoint+0x2d4>
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	441a      	add	r2, r3
 80077a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80077a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80077ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80077cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01b      	beq.n	800780c <USB_DeactivateEndpoint+0x324>
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007822:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800783c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007840:	b29b      	uxth	r3, r3
 8007842:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800788e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007892:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80078a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3734      	adds	r7, #52	@ 0x34
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b0c2      	sub	sp, #264	@ 0x108
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	6018      	str	r0, [r3, #0]
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	f040 86b7 	bne.w	800865a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	d908      	bls.n	800791a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007918:	e007      	b.n	800792a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800792a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	7b1b      	ldrb	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d13a      	bne.n	80079b0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800793a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6959      	ldr	r1, [r3, #20]
 8007946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	88da      	ldrh	r2, [r3, #6]
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	b29b      	uxth	r3, r3
 8007958:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800795c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007960:	6800      	ldr	r0, [r0, #0]
 8007962:	f001 fc9c 	bl	800929e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007980:	b29b      	uxth	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	011a      	lsls	r2, r3, #4
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	f000 be1f 	b.w	80085ee <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	78db      	ldrb	r3, [r3, #3]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	f040 8462 	bne.w	8008286 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	429a      	cmp	r2, r3
 80079dc:	f240 83df 	bls.w	800819e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a30:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6a1a      	ldr	r2, [r3, #32]
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4c:	1ad2      	subs	r2, r2, r3
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 81c7 	beq.w	8007e10 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	785b      	ldrb	r3, [r3, #1]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d177      	bne.n	8007b8e <USB_EPStartXfer+0x2ce>
 8007a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abe:	4413      	add	r3, r2
 8007ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	011a      	lsls	r2, r3, #4
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af0:	d921      	bls.n	8007b36 <USB_EPStartXfer+0x276>
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <USB_EPStartXfer+0x252>
 8007b08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	4313      	orrs	r3, r2
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	801a      	strh	r2, [r3, #0]
 8007b34:	e050      	b.n	8007bd8 <USB_EPStartXfer+0x318>
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <USB_EPStartXfer+0x294>
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e041      	b.n	8007bd8 <USB_EPStartXfer+0x318>
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b58:	085b      	lsrs	r3, r3, #1
 8007b5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <USB_EPStartXfer+0x2b4>
 8007b6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	881b      	ldrh	r3, [r3, #0]
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	029b      	lsls	r3, r3, #10
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4313      	orrs	r3, r2
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	e024      	b.n	8007bd8 <USB_EPStartXfer+0x318>
 8007b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d11c      	bne.n	8007bd8 <USB_EPStartXfer+0x318>
 8007b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	4413      	add	r3, r2
 8007bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	011a      	lsls	r2, r3, #4
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	895b      	ldrh	r3, [r3, #10]
 8007be4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6959      	ldr	r1, [r3, #20]
 8007bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bfe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	f001 fb49 	bl	800929e <USB_WritePMA>
            ep->xfer_buff += len;
 8007c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1c:	441a      	add	r2, r3
 8007c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d90f      	bls.n	8007c66 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a1a      	ldr	r2, [r3, #32]
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	621a      	str	r2, [r3, #32]
 8007c64:	e00e      	b.n	8007c84 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d177      	bne.n	8007d84 <USB_EPStartXfer+0x4c4>
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	61bb      	str	r3, [r7, #24]
 8007ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	011a      	lsls	r2, r3, #4
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce6:	d921      	bls.n	8007d2c <USB_EPStartXfer+0x46c>
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <USB_EPStartXfer+0x448>
 8007cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	881b      	ldrh	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	029b      	lsls	r3, r3, #10
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e056      	b.n	8007dda <USB_EPStartXfer+0x51a>
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <USB_EPStartXfer+0x48a>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e047      	b.n	8007dda <USB_EPStartXfer+0x51a>
 8007d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <USB_EPStartXfer+0x4aa>
 8007d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e02a      	b.n	8007dda <USB_EPStartXfer+0x51a>
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d122      	bne.n	8007dda <USB_EPStartXfer+0x51a>
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	623b      	str	r3, [r7, #32]
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	4413      	add	r3, r2
 8007db6:	623b      	str	r3, [r7, #32]
 8007db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	011a      	lsls	r2, r3, #4
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	891b      	ldrh	r3, [r3, #8]
 8007de6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6959      	ldr	r1, [r3, #20]
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e00:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e04:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	f001 fa48 	bl	800929e <USB_WritePMA>
 8007e0e:	e3ee      	b.n	80085ee <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d177      	bne.n	8007f10 <USB_EPStartXfer+0x650>
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e40:	4413      	add	r3, r2
 8007e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	011a      	lsls	r2, r3, #4
 8007e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e54:	4413      	add	r3, r2
 8007e56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e72:	d921      	bls.n	8007eb8 <USB_EPStartXfer+0x5f8>
 8007e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e78:	095b      	lsrs	r3, r3, #5
 8007e7a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <USB_EPStartXfer+0x5d4>
 8007e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	029b      	lsls	r3, r3, #10
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	e056      	b.n	8007f66 <USB_EPStartXfer+0x6a6>
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10a      	bne.n	8007ed6 <USB_EPStartXfer+0x616>
 8007ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	e047      	b.n	8007f66 <USB_EPStartXfer+0x6a6>
 8007ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	f003 0301 	and.w	r3, r3, #1
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d004      	beq.n	8007ef6 <USB_EPStartXfer+0x636>
 8007eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	029b      	lsls	r3, r3, #10
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e02a      	b.n	8007f66 <USB_EPStartXfer+0x6a6>
 8007f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d122      	bne.n	8007f66 <USB_EPStartXfer+0x6a6>
 8007f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f40:	4413      	add	r3, r2
 8007f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	011a      	lsls	r2, r3, #4
 8007f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f54:	4413      	add	r3, r2
 8007f56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	891b      	ldrh	r3, [r3, #8]
 8007f72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6959      	ldr	r1, [r3, #20]
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f94:	6800      	ldr	r0, [r0, #0]
 8007f96:	f001 f982 	bl	800929e <USB_WritePMA>
            ep->xfer_buff += len;
 8007f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007faa:	441a      	add	r2, r3
 8007fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d90f      	bls.n	8007ff4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6a1a      	ldr	r2, [r3, #32]
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	621a      	str	r2, [r3, #32]
 8007ff2:	e00e      	b.n	8008012 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2200      	movs	r2, #0
 8008010:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	643b      	str	r3, [r7, #64]	@ 0x40
 800801e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d177      	bne.n	800811e <USB_EPStartXfer+0x85e>
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800803a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800803e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	4413      	add	r3, r2
 8008050:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	011a      	lsls	r2, r3, #4
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	4413      	add	r3, r2
 8008064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008074:	b29a      	uxth	r2, r3
 8008076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800807e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008080:	d921      	bls.n	80080c6 <USB_EPStartXfer+0x806>
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008086:	095b      	lsrs	r3, r3, #5
 8008088:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	f003 031f 	and.w	r3, r3, #31
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <USB_EPStartXfer+0x7e2>
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800809c:	3b01      	subs	r3, #1
 800809e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80080a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	029b      	lsls	r3, r3, #10
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	4313      	orrs	r3, r2
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080be:	b29a      	uxth	r2, r3
 80080c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e050      	b.n	8008168 <USB_EPStartXfer+0x8a8>
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <USB_EPStartXfer+0x824>
 80080ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d0:	881b      	ldrh	r3, [r3, #0]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e0:	801a      	strh	r2, [r3, #0]
 80080e2:	e041      	b.n	8008168 <USB_EPStartXfer+0x8a8>
 80080e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e8:	085b      	lsrs	r3, r3, #1
 80080ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80080ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <USB_EPStartXfer+0x844>
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fe:	3301      	adds	r3, #1
 8008100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810e:	b29b      	uxth	r3, r3
 8008110:	029b      	lsls	r3, r3, #10
 8008112:	b29b      	uxth	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b29a      	uxth	r2, r3
 8008118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e024      	b.n	8008168 <USB_EPStartXfer+0x8a8>
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d11c      	bne.n	8008168 <USB_EPStartXfer+0x8a8>
 800812e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813c:	b29b      	uxth	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008142:	4413      	add	r3, r2
 8008144:	643b      	str	r3, [r7, #64]	@ 0x40
 8008146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	011a      	lsls	r2, r3, #4
 8008154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008156:	4413      	add	r3, r2
 8008158:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800815c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	b29a      	uxth	r2, r3
 8008164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008166:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800816c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	895b      	ldrh	r3, [r3, #10]
 8008174:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800817c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6959      	ldr	r1, [r3, #20]
 8008184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008188:	b29b      	uxth	r3, r3
 800818a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800818e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008192:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008196:	6800      	ldr	r0, [r0, #0]
 8008198:	f001 f881 	bl	800929e <USB_WritePMA>
 800819c:	e227      	b.n	80085ee <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800819e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80081ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80081d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80081d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	441a      	add	r2, r3
 80081f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80081f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008206:	b29b      	uxth	r3, r3
 8008208:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800820a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800820e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008224:	b29b      	uxth	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800822a:	4413      	add	r3, r2
 800822c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800822e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	011a      	lsls	r2, r3, #4
 800823c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800823e:	4413      	add	r3, r2
 8008240:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008244:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800824a:	b29a      	uxth	r2, r3
 800824c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800824e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	891b      	ldrh	r3, [r3, #8]
 800825c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6959      	ldr	r1, [r3, #20]
 800826c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008270:	b29b      	uxth	r3, r3
 8008272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008276:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800827a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800827e:	6800      	ldr	r0, [r0, #0]
 8008280:	f001 f80d 	bl	800929e <USB_WritePMA>
 8008284:	e1b3      	b.n	80085ee <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a1a      	ldr	r2, [r3, #32]
 8008292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80082a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80c6 	beq.w	8008458 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80082d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d177      	bne.n	80083d8 <USB_EPStartXfer+0xb18>
 80082e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008302:	b29b      	uxth	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008308:	4413      	add	r3, r2
 800830a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	011a      	lsls	r2, r3, #4
 800831a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800831c:	4413      	add	r3, r2
 800831e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008322:	667b      	str	r3, [r7, #100]	@ 0x64
 8008324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800832e:	b29a      	uxth	r2, r3
 8008330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	2b3e      	cmp	r3, #62	@ 0x3e
 800833a:	d921      	bls.n	8008380 <USB_EPStartXfer+0xac0>
 800833c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <USB_EPStartXfer+0xa9c>
 8008352:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008356:	3b01      	subs	r3, #1
 8008358:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800835c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29a      	uxth	r2, r3
 8008362:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008366:	b29b      	uxth	r3, r3
 8008368:	029b      	lsls	r3, r3, #10
 800836a:	b29b      	uxth	r3, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	b29b      	uxth	r3, r3
 8008370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008378:	b29a      	uxth	r2, r3
 800837a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e050      	b.n	8008422 <USB_EPStartXfer+0xb62>
 8008380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <USB_EPStartXfer+0xade>
 8008388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	e041      	b.n	8008422 <USB_EPStartXfer+0xb62>
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <USB_EPStartXfer+0xafe>
 80083b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083b8:	3301      	adds	r3, #1
 80083ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	029b      	lsls	r3, r3, #10
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4313      	orrs	r3, r2
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083d4:	801a      	strh	r2, [r3, #0]
 80083d6:	e024      	b.n	8008422 <USB_EPStartXfer+0xb62>
 80083d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d11c      	bne.n	8008422 <USB_EPStartXfer+0xb62>
 80083e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80083fc:	4413      	add	r3, r2
 80083fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	011a      	lsls	r2, r3, #4
 800840e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008410:	4413      	add	r3, r2
 8008412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841c:	b29a      	uxth	r2, r3
 800841e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008420:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	895b      	ldrh	r3, [r3, #10]
 800842e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6959      	ldr	r1, [r3, #20]
 800843e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008442:	b29b      	uxth	r3, r3
 8008444:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008448:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800844c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008450:	6800      	ldr	r0, [r0, #0]
 8008452:	f000 ff24 	bl	800929e <USB_WritePMA>
 8008456:	e0ca      	b.n	80085ee <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d177      	bne.n	8008558 <USB_EPStartXfer+0xc98>
 8008468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008488:	4413      	add	r3, r2
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800848c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800849c:	4413      	add	r3, r2
 800849e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80084a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80084ba:	d921      	bls.n	8008500 <USB_EPStartXfer+0xc40>
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ca:	f003 031f 	and.w	r3, r3, #31
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d104      	bne.n	80084dc <USB_EPStartXfer+0xc1c>
 80084d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80084d6:	3b01      	subs	r3, #1
 80084d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80084dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	029b      	lsls	r3, r3, #10
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	4313      	orrs	r3, r2
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	e05c      	b.n	80085ba <USB_EPStartXfer+0xcfa>
 8008500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <USB_EPStartXfer+0xc5e>
 8008508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008516:	b29a      	uxth	r2, r3
 8008518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	e04d      	b.n	80085ba <USB_EPStartXfer+0xcfa>
 800851e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <USB_EPStartXfer+0xc7e>
 8008534:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008538:	3301      	adds	r3, #1
 800853a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800853e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008548:	b29b      	uxth	r3, r3
 800854a:	029b      	lsls	r3, r3, #10
 800854c:	b29b      	uxth	r3, r3
 800854e:	4313      	orrs	r3, r2
 8008550:	b29a      	uxth	r2, r3
 8008552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	e030      	b.n	80085ba <USB_EPStartXfer+0xcfa>
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d128      	bne.n	80085ba <USB_EPStartXfer+0xcfa>
 8008568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800858c:	4413      	add	r3, r2
 800858e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	011a      	lsls	r2, r3, #4
 80085a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085a4:	4413      	add	r3, r2
 80085a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80085aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80085ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	891b      	ldrh	r3, [r3, #8]
 80085c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6959      	ldr	r1, [r3, #20]
 80085d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085da:	b29b      	uxth	r3, r3
 80085dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80085e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80085e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80085e8:	6800      	ldr	r0, [r0, #0]
 80085ea:	f000 fe58 	bl	800929e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80085ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008614:	817b      	strh	r3, [r7, #10]
 8008616:	897b      	ldrh	r3, [r7, #10]
 8008618:	f083 0310 	eor.w	r3, r3, #16
 800861c:	817b      	strh	r3, [r7, #10]
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	f083 0320 	eor.w	r3, r3, #32
 8008624:	817b      	strh	r3, [r7, #10]
 8008626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800862a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	897b      	ldrh	r3, [r7, #10]
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]
 8008656:	f000 bcde 	b.w	8009016 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800865a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	7b1b      	ldrb	r3, [r3, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 80bb 	bne.w	80087e2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800866c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d917      	bls.n	80086b8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699a      	ldr	r2, [r3, #24]
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	1ad2      	subs	r2, r2, r3
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	619a      	str	r2, [r3, #24]
 80086b6:	e00e      	b.n	80086d6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80086b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80086c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80086d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	461a      	mov	r2, r3
 80086f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086fa:	4413      	add	r3, r2
 80086fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	011a      	lsls	r2, r3, #4
 800870e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008712:	4413      	add	r3, r2
 8008714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800871c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008728:	b29a      	uxth	r2, r3
 800872a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800872e:	801a      	strh	r2, [r3, #0]
 8008730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008734:	2b3e      	cmp	r3, #62	@ 0x3e
 8008736:	d924      	bls.n	8008782 <USB_EPStartXfer+0xec2>
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	2b00      	cmp	r3, #0
 800874c:	d104      	bne.n	8008758 <USB_EPStartXfer+0xe98>
 800874e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008752:	3b01      	subs	r3, #1
 8008754:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008764:	b29b      	uxth	r3, r3
 8008766:	029b      	lsls	r3, r3, #10
 8008768:	b29b      	uxth	r3, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	b29b      	uxth	r3, r3
 800876e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008776:	b29a      	uxth	r2, r3
 8008778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	f000 bc10 	b.w	8008fa2 <USB_EPStartXfer+0x16e2>
 8008782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10c      	bne.n	80087a4 <USB_EPStartXfer+0xee4>
 800878a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	b29b      	uxth	r3, r3
 8008792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800879a:	b29a      	uxth	r2, r3
 800879c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087a0:	801a      	strh	r2, [r3, #0]
 80087a2:	e3fe      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
 80087a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <USB_EPStartXfer+0xf04>
 80087ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087be:	3301      	adds	r3, #1
 80087c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	029b      	lsls	r3, r3, #10
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4313      	orrs	r3, r2
 80087d8:	b29a      	uxth	r2, r3
 80087da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	e3df      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80087e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	f040 8218 	bne.w	8008c24 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80087f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 809d 	bne.w	8008940 <USB_EPStartXfer+0x1080>
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008822:	b29b      	uxth	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800882a:	4413      	add	r3, r2
 800882c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	011a      	lsls	r2, r3, #4
 800883e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008842:	4413      	add	r3, r2
 8008844:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800884c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008858:	b29a      	uxth	r2, r3
 800885a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2b3e      	cmp	r3, #62	@ 0x3e
 800886e:	d92b      	bls.n	80088c8 <USB_EPStartXfer+0x1008>
 8008870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 031f 	and.w	r3, r3, #31
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <USB_EPStartXfer+0xfe0>
 8008896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889a:	3b01      	subs	r3, #1
 800889c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	029b      	lsls	r3, r3, #10
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	4313      	orrs	r3, r2
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088be:	b29a      	uxth	r2, r3
 80088c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088c4:	801a      	strh	r2, [r3, #0]
 80088c6:	e070      	b.n	80089aa <USB_EPStartXfer+0x10ea>
 80088c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <USB_EPStartXfer+0x1032>
 80088d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e05b      	b.n	80089aa <USB_EPStartXfer+0x10ea>
 80088f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <USB_EPStartXfer+0x1062>
 8008918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891c:	3301      	adds	r3, #1
 800891e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29a      	uxth	r2, r3
 800892a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800892e:	b29b      	uxth	r3, r3
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	b29b      	uxth	r3, r3
 8008934:	4313      	orrs	r3, r2
 8008936:	b29a      	uxth	r2, r3
 8008938:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	e034      	b.n	80089aa <USB_EPStartXfer+0x10ea>
 8008940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d12c      	bne.n	80089aa <USB_EPStartXfer+0x10ea>
 8008950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800895e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800896c:	b29b      	uxth	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008974:	4413      	add	r3, r2
 8008976:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800897a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	011a      	lsls	r2, r3, #4
 8008988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800898c:	4413      	add	r3, r2
 800898e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 809d 	bne.w	8008b04 <USB_EPStartXfer+0x1244>
 80089ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089ee:	4413      	add	r3, r2
 80089f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	011a      	lsls	r2, r3, #4
 8008a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a06:	4413      	add	r3, r2
 8008a08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a14:	881b      	ldrh	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a32:	d92b      	bls.n	8008a8c <USB_EPStartXfer+0x11cc>
 8008a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d104      	bne.n	8008a64 <USB_EPStartXfer+0x11a4>
 8008a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	029b      	lsls	r3, r3, #10
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4313      	orrs	r3, r2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e069      	b.n	8008b60 <USB_EPStartXfer+0x12a0>
 8008a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10c      	bne.n	8008ab6 <USB_EPStartXfer+0x11f6>
 8008a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ab2:	801a      	strh	r2, [r3, #0]
 8008ab4:	e054      	b.n	8008b60 <USB_EPStartXfer+0x12a0>
 8008ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <USB_EPStartXfer+0x1226>
 8008adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	029b      	lsls	r3, r3, #10
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4313      	orrs	r3, r2
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b00:	801a      	strh	r2, [r3, #0]
 8008b02:	e02d      	b.n	8008b60 <USB_EPStartXfer+0x12a0>
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d125      	bne.n	8008b60 <USB_EPStartXfer+0x12a0>
 8008b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	011a      	lsls	r2, r3, #4
 8008b3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008b42:	4413      	add	r3, r2
 8008b44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008b48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b5e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 8218 	beq.w	8008fa2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <USB_EPStartXfer+0x12ea>
 8008b9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10d      	bne.n	8008bc6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008baa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 81f5 	bne.w	8008fa2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f040 81ee 	bne.w	8008fa2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	881b      	ldrh	r3, [r3, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	441a      	add	r2, r3
 8008c0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	8013      	strh	r3, [r2, #0]
 8008c22:	e1be      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	78db      	ldrb	r3, [r3, #3]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	f040 81b4 	bne.w	8008f9e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d917      	bls.n	8008c82 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	619a      	str	r2, [r3, #24]
 8008c80:	e00e      	b.n	8008ca0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f040 8085 	bne.w	8008dbc <USB_EPStartXfer+0x14fc>
 8008cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	011a      	lsls	r2, r3, #4
 8008cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cee:	4413      	add	r3, r2
 8008cf0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d12:	d923      	bls.n	8008d5c <USB_EPStartXfer+0x149c>
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d22:	f003 031f 	and.w	r3, r3, #31
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <USB_EPStartXfer+0x1474>
 8008d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	029b      	lsls	r3, r3, #10
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	4313      	orrs	r3, r2
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d58:	801a      	strh	r2, [r3, #0]
 8008d5a:	e060      	b.n	8008e1e <USB_EPStartXfer+0x155e>
 8008d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10c      	bne.n	8008d7e <USB_EPStartXfer+0x14be>
 8008d64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d7a:	801a      	strh	r2, [r3, #0]
 8008d7c:	e04f      	b.n	8008e1e <USB_EPStartXfer+0x155e>
 8008d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <USB_EPStartXfer+0x14de>
 8008d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	029b      	lsls	r3, r3, #10
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	4313      	orrs	r3, r2
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008db8:	801a      	strh	r2, [r3, #0]
 8008dba:	e030      	b.n	8008e1e <USB_EPStartXfer+0x155e>
 8008dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	785b      	ldrb	r3, [r3, #1]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d128      	bne.n	8008e1e <USB_EPStartXfer+0x155e>
 8008dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	461a      	mov	r2, r3
 8008dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008df0:	4413      	add	r3, r2
 8008df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	011a      	lsls	r2, r3, #4
 8008e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e08:	4413      	add	r3, r2
 8008e0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008e1c:	801a      	strh	r2, [r3, #0]
 8008e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f040 8085 	bne.w	8008f48 <USB_EPStartXfer+0x1688>
 8008e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008e62:	4413      	add	r3, r2
 8008e64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	011a      	lsls	r2, r3, #4
 8008e76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e96:	801a      	strh	r2, [r3, #0]
 8008e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e9e:	d923      	bls.n	8008ee8 <USB_EPStartXfer+0x1628>
 8008ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <USB_EPStartXfer+0x1600>
 8008eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	029b      	lsls	r3, r3, #10
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ee4:	801a      	strh	r2, [r3, #0]
 8008ee6:	e05c      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
 8008ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10c      	bne.n	8008f0a <USB_EPStartXfer+0x164a>
 8008ef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f06:	801a      	strh	r2, [r3, #0]
 8008f08:	e04b      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
 8008f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <USB_EPStartXfer+0x166a>
 8008f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f24:	3301      	adds	r3, #1
 8008f26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	029b      	lsls	r3, r3, #10
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f44:	801a      	strh	r2, [r3, #0]
 8008f46:	e02c      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
 8008f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d124      	bne.n	8008fa2 <USB_EPStartXfer+0x16e2>
 8008f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f6e:	4413      	add	r3, r2
 8008f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	011a      	lsls	r2, r3, #4
 8008f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008f86:	4413      	add	r3, r2
 8008f88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	e001      	b.n	8008fa2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e03a      	b.n	8009018 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008fcc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008fd0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008fd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008fdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fe0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800900a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800900e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009012:	b29b      	uxth	r3, r3
 8009014:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009022:	b480      	push	{r7}
 8009024:	b085      	sub	sp, #20
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d020      	beq.n	8009076 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800904a:	81bb      	strh	r3, [r7, #12]
 800904c:	89bb      	ldrh	r3, [r7, #12]
 800904e:	f083 0310 	eor.w	r3, r3, #16
 8009052:	81bb      	strh	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	89bb      	ldrh	r3, [r7, #12]
 8009060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800906c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009070:	b29b      	uxth	r3, r3
 8009072:	8013      	strh	r3, [r2, #0]
 8009074:	e01f      	b.n	80090b6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29b      	uxth	r3, r3
 8009084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800908c:	81fb      	strh	r3, [r7, #14]
 800908e:	89fb      	ldrh	r3, [r7, #14]
 8009090:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009094:	81fb      	strh	r3, [r7, #14]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	441a      	add	r2, r3
 80090a0:	89fb      	ldrh	r3, [r7, #14]
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr

080090c2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b087      	sub	sp, #28
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	7b1b      	ldrb	r3, [r3, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f040 809d 	bne.w	8009210 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d04c      	beq.n	8009178 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	823b      	strh	r3, [r7, #16]
 80090ec:	8a3b      	ldrh	r3, [r7, #16]
 80090ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01b      	beq.n	800912e <USB_EPClearStall+0x6c>
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910c:	81fb      	strh	r3, [r7, #14]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	441a      	add	r2, r3
 8009118:	89fb      	ldrh	r3, [r7, #14]
 800911a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009126:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800912a:	b29b      	uxth	r3, r3
 800912c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d06c      	beq.n	8009210 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800914c:	81bb      	strh	r3, [r7, #12]
 800914e:	89bb      	ldrh	r3, [r7, #12]
 8009150:	f083 0320 	eor.w	r3, r3, #32
 8009154:	81bb      	strh	r3, [r7, #12]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	441a      	add	r2, r3
 8009160:	89bb      	ldrh	r3, [r7, #12]
 8009162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800916a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009172:	b29b      	uxth	r3, r3
 8009174:	8013      	strh	r3, [r2, #0]
 8009176:	e04b      	b.n	8009210 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	82fb      	strh	r3, [r7, #22]
 8009186:	8afb      	ldrh	r3, [r7, #22]
 8009188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <USB_EPClearStall+0x106>
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29b      	uxth	r3, r3
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a6:	82bb      	strh	r3, [r7, #20]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	441a      	add	r2, r3
 80091b2:	8abb      	ldrh	r3, [r7, #20]
 80091b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091de:	827b      	strh	r3, [r7, #18]
 80091e0:	8a7b      	ldrh	r3, [r7, #18]
 80091e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80091e6:	827b      	strh	r3, [r7, #18]
 80091e8:	8a7b      	ldrh	r3, [r7, #18]
 80091ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80091ee:	827b      	strh	r3, [r7, #18]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	441a      	add	r2, r3
 80091fa:	8a7b      	ldrh	r3, [r7, #18]
 80091fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009200:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920c:	b29b      	uxth	r3, r3
 800920e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr

0800921c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2280      	movs	r2, #128	@ 0x80
 8009232:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr

08009242 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr

0800926a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009278:	b29b      	uxth	r3, r3
 800927a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800927c:	68fb      	ldr	r3, [r7, #12]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr

0800929e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800929e:	b480      	push	{r7}
 80092a0:	b08b      	sub	sp, #44	@ 0x2c
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	4611      	mov	r1, r2
 80092aa:	461a      	mov	r2, r3
 80092ac:	460b      	mov	r3, r1
 80092ae:	80fb      	strh	r3, [r7, #6]
 80092b0:	4613      	mov	r3, r2
 80092b2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80092b4:	88bb      	ldrh	r3, [r7, #4]
 80092b6:	3301      	adds	r3, #1
 80092b8:	085b      	lsrs	r3, r3, #1
 80092ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	005a      	lsls	r2, r3, #1
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092d0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80092d6:	e01f      	b.n	8009318 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	3301      	adds	r3, #1
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b21b      	sxth	r3, r3
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	b21a      	sxth	r2, r3
 80092ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	8a7a      	ldrh	r2, [r7, #18]
 80092f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	3302      	adds	r3, #2
 80092fe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	3302      	adds	r3, #2
 8009304:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	3301      	adds	r3, #1
 800930a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	3301      	adds	r3, #1
 8009310:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	3b01      	subs	r3, #1
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1dc      	bne.n	80092d8 <USB_WritePMA+0x3a>
  }
}
 800931e:	bf00      	nop
 8009320:	bf00      	nop
 8009322:	372c      	adds	r7, #44	@ 0x2c
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr

0800932a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800932a:	b480      	push	{r7}
 800932c:	b08b      	sub	sp, #44	@ 0x2c
 800932e:	af00      	add	r7, sp, #0
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	4611      	mov	r1, r2
 8009336:	461a      	mov	r2, r3
 8009338:	460b      	mov	r3, r1
 800933a:	80fb      	strh	r3, [r7, #6]
 800933c:	4613      	mov	r3, r2
 800933e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009340:	88bb      	ldrh	r3, [r7, #4]
 8009342:	085b      	lsrs	r3, r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009350:	88fb      	ldrh	r3, [r7, #6]
 8009352:	005a      	lsls	r2, r3, #1
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800935c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
 8009362:	e01b      	b.n	800939c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	3302      	adds	r3, #2
 8009370:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	b2da      	uxtb	r2, r3
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	3301      	adds	r3, #1
 800937e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b2da      	uxtb	r2, r3
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	3301      	adds	r3, #1
 800938e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009390:	6a3b      	ldr	r3, [r7, #32]
 8009392:	3302      	adds	r3, #2
 8009394:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	3b01      	subs	r3, #1
 800939a:	627b      	str	r3, [r7, #36]	@ 0x24
 800939c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e0      	bne.n	8009364 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80093a2:	88bb      	ldrh	r3, [r7, #4]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	701a      	strb	r2, [r3, #0]
  }
}
 80093be:	bf00      	nop
 80093c0:	372c      	adds	r7, #44	@ 0x2c
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr

080093c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7c1b      	ldrb	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d115      	bne.n	800940c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80093e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093e4:	2202      	movs	r2, #2
 80093e6:	2181      	movs	r1, #129	@ 0x81
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 ffbe 	bl	800b36a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093f8:	2202      	movs	r2, #2
 80093fa:	2101      	movs	r1, #1
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 ffb4 	bl	800b36a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800940a:	e012      	b.n	8009432 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800940c:	2340      	movs	r3, #64	@ 0x40
 800940e:	2202      	movs	r2, #2
 8009410:	2181      	movs	r1, #129	@ 0x81
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 ffa9 	bl	800b36a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800941e:	2340      	movs	r3, #64	@ 0x40
 8009420:	2202      	movs	r2, #2
 8009422:	2101      	movs	r1, #1
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 ffa0 	bl	800b36a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009432:	2308      	movs	r3, #8
 8009434:	2203      	movs	r2, #3
 8009436:	2182      	movs	r1, #130	@ 0x82
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f001 ff96 	bl	800b36a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009444:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009448:	f002 f8b6 	bl	800b5b8 <USBD_static_malloc>
 800944c:	4602      	mov	r2, r0
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
 8009462:	e026      	b.n	80094b2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2200      	movs	r2, #0
 800947a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	7c1b      	ldrb	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d109      	bne.n	80094a2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009494:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009498:	2101      	movs	r1, #1
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 f855 	bl	800b54a <USBD_LL_PrepareReceive>
 80094a0:	e007      	b.n	80094b2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80094a8:	2340      	movs	r3, #64	@ 0x40
 80094aa:	2101      	movs	r1, #1
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f002 f84c 	bl	800b54a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80094cc:	2181      	movs	r1, #129	@ 0x81
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 ff71 	bl	800b3b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80094da:	2101      	movs	r1, #1
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 ff6a 	bl	800b3b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80094ea:	2182      	movs	r1, #130	@ 0x82
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 ff62 	bl	800b3b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00e      	beq.n	8009520 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009512:	4618      	mov	r0, r3
 8009514:	f002 f85c 	bl	800b5d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800953a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009550:	2b00      	cmp	r3, #0
 8009552:	d039      	beq.n	80095c8 <USBD_CDC_Setup+0x9e>
 8009554:	2b20      	cmp	r3, #32
 8009556:	d17f      	bne.n	8009658 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	88db      	ldrh	r3, [r3, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d029      	beq.n	80095b4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b25b      	sxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	da11      	bge.n	800958e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	88d2      	ldrh	r2, [r2, #6]
 800957c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800957e:	6939      	ldr	r1, [r7, #16]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	88db      	ldrh	r3, [r3, #6]
 8009584:	461a      	mov	r2, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fa06 	bl	800a998 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800958c:	e06b      	b.n	8009666 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	785a      	ldrb	r2, [r3, #1]
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	88db      	ldrh	r3, [r3, #6]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095a4:	6939      	ldr	r1, [r7, #16]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	88db      	ldrh	r3, [r3, #6]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 fa21 	bl	800a9f4 <USBD_CtlPrepareRx>
      break;
 80095b2:	e058      	b.n	8009666 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	7850      	ldrb	r0, [r2, #1]
 80095c0:	2200      	movs	r2, #0
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	4798      	blx	r3
      break;
 80095c6:	e04e      	b.n	8009666 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	785b      	ldrb	r3, [r3, #1]
 80095cc:	2b0b      	cmp	r3, #11
 80095ce:	d02e      	beq.n	800962e <USBD_CDC_Setup+0x104>
 80095d0:	2b0b      	cmp	r3, #11
 80095d2:	dc38      	bgt.n	8009646 <USBD_CDC_Setup+0x11c>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <USBD_CDC_Setup+0xb4>
 80095d8:	2b0a      	cmp	r3, #10
 80095da:	d014      	beq.n	8009606 <USBD_CDC_Setup+0xdc>
 80095dc:	e033      	b.n	8009646 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d107      	bne.n	80095f8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	2202      	movs	r2, #2
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 f9d1 	bl	800a998 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095f6:	e02e      	b.n	8009656 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 f962 	bl	800a8c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009600:	2302      	movs	r3, #2
 8009602:	75fb      	strb	r3, [r7, #23]
          break;
 8009604:	e027      	b.n	8009656 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800960c:	2b03      	cmp	r3, #3
 800960e:	d107      	bne.n	8009620 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009610:	f107 030f 	add.w	r3, r7, #15
 8009614:	2201      	movs	r2, #1
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 f9bd 	bl	800a998 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800961e:	e01a      	b.n	8009656 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 f94e 	bl	800a8c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009628:	2302      	movs	r3, #2
 800962a:	75fb      	strb	r3, [r7, #23]
          break;
 800962c:	e013      	b.n	8009656 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009634:	2b03      	cmp	r3, #3
 8009636:	d00d      	beq.n	8009654 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 f942 	bl	800a8c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009640:	2302      	movs	r3, #2
 8009642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009644:	e006      	b.n	8009654 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 f93b 	bl	800a8c4 <USBD_CtlError>
          ret = USBD_FAIL;
 800964e:	2302      	movs	r3, #2
 8009650:	75fb      	strb	r3, [r7, #23]
          break;
 8009652:	e000      	b.n	8009656 <USBD_CDC_Setup+0x12c>
          break;
 8009654:	bf00      	nop
      }
      break;
 8009656:	e006      	b.n	8009666 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f001 f932 	bl	800a8c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009660:	2302      	movs	r3, #2
 8009662:	75fb      	strb	r3, [r7, #23]
      break;
 8009664:	bf00      	nop
  }

  return ret;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009682:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800968a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d03a      	beq.n	800970c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	331c      	adds	r3, #28
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d029      	beq.n	8009700 <USBD_CDC_DataIn+0x90>
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	331c      	adds	r3, #28
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	78f9      	ldrb	r1, [r7, #3]
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	460b      	mov	r3, r1
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	440b      	add	r3, r1
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4403      	add	r3, r0
 80096cc:	3320      	adds	r3, #32
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d110      	bne.n	8009700 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	331c      	adds	r3, #28
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80096f2:	78f9      	ldrb	r1, [r7, #3]
 80096f4:	2300      	movs	r3, #0
 80096f6:	2200      	movs	r2, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 ff03 	bl	800b504 <USBD_LL_Transmit>
 80096fe:	e003      	b.n	8009708 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	e000      	b.n	800970e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800970c:	2302      	movs	r3, #2
  }
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009728:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 ff2e 	bl	800b590 <USBD_LL_GetRxDataSize>
 8009734:	4602      	mov	r2, r0
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00d      	beq.n	8009762 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800975a:	4611      	mov	r1, r2
 800975c:	4798      	blx	r3

    return USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	e000      	b.n	8009764 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009762:	2302      	movs	r3, #2
  }
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800977a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009782:	2b00      	cmp	r3, #0
 8009784:	d014      	beq.n	80097b0 <USBD_CDC_EP0_RxReady+0x44>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800978c:	2bff      	cmp	r3, #255	@ 0xff
 800978e:	d00f      	beq.n	80097b0 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800979e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	22ff      	movs	r2, #255	@ 0xff
 80097ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2243      	movs	r2, #67	@ 0x43
 80097c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80097ca:	4b03      	ldr	r3, [pc, #12]	@ (80097d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bc80      	pop	{r7}
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	200000a0 	.word	0x200000a0

080097dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2243      	movs	r2, #67	@ 0x43
 80097e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80097ea:	4b03      	ldr	r3, [pc, #12]	@ (80097f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bc80      	pop	{r7}
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	2000005c 	.word	0x2000005c

080097fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2243      	movs	r2, #67	@ 0x43
 8009808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800980a:	4b03      	ldr	r3, [pc, #12]	@ (8009818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	bc80      	pop	{r7}
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200000e4 	.word	0x200000e4

0800981c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	220a      	movs	r2, #10
 8009828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800982a:	4b03      	ldr	r3, [pc, #12]	@ (8009838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000018 	.word	0x20000018

0800983c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009846:	2302      	movs	r3, #2
 8009848:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009886:	88fa      	ldrh	r2, [r7, #6]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	4770      	bx	lr

0800989a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098aa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bc80      	pop	{r7}
 80098be:	4770      	bx	lr

080098c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d01c      	beq.n	8009914 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d115      	bne.n	8009910 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009902:	b29b      	uxth	r3, r3
 8009904:	2181      	movs	r1, #129	@ 0x81
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f001 fdfc 	bl	800b504 <USBD_LL_Transmit>

      return USBD_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e002      	b.n	8009916 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009910:	2301      	movs	r3, #1
 8009912:	e000      	b.n	8009916 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800992c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d017      	beq.n	8009968 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7c1b      	ldrb	r3, [r3, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800994a:	2101      	movs	r1, #1
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fdfc 	bl	800b54a <USBD_LL_PrepareReceive>
 8009952:	e007      	b.n	8009964 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800995a:	2340      	movs	r3, #64	@ 0x40
 800995c:	2101      	movs	r1, #1
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fdf3 	bl	800b54a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	e000      	b.n	800996a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009968:	2302      	movs	r3, #2
  }
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	4613      	mov	r3, r2
 800997e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009986:	2302      	movs	r3, #2
 8009988:	e01a      	b.n	80099c0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d003      	beq.n	800999c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	79fa      	ldrb	r2, [r7, #7]
 80099b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f001 fc61 	bl	800b280 <USBD_LL_Init>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d006      	beq.n	80099ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e001      	b.n	80099ee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80099ea:	2302      	movs	r3, #2
 80099ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3714      	adds	r7, #20
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fc96 	bl	800b334 <USBD_LL_Start>

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b083      	sub	sp, #12
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr

08009a26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b084      	sub	sp, #16
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a32:	2302      	movs	r3, #2
 8009a34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00c      	beq.n	8009a5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	4798      	blx	r3
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	78fa      	ldrb	r2, [r7, #3]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3

  return USBD_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fed8 	bl	800a852 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d016      	beq.n	8009af4 <USBD_LL_SetupStage+0x6a>
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d81c      	bhi.n	8009b04 <USBD_LL_SetupStage+0x7a>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <USBD_LL_SetupStage+0x4a>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d008      	beq.n	8009ae4 <USBD_LL_SetupStage+0x5a>
 8009ad2:	e017      	b.n	8009b04 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f9cb 	bl	8009e78 <USBD_StdDevReq>
      break;
 8009ae2:	e01a      	b.n	8009b1a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fa2d 	bl	8009f4c <USBD_StdItfReq>
      break;
 8009af2:	e012      	b.n	8009b1a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fa6d 	bl	8009fdc <USBD_StdEPReq>
      break;
 8009b02:	e00a      	b.n	8009b1a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 fc6e 	bl	800b3f4 <USBD_LL_StallEP>
      break;
 8009b18:	bf00      	nop
  }

  return USBD_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b32:	7afb      	ldrb	r3, [r7, #11]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d14b      	bne.n	8009bd0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d134      	bne.n	8009bb4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d919      	bls.n	8009b8a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d203      	bcs.n	8009b78 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	e002      	b.n	8009b7e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 ff54 	bl	800aa30 <USBD_CtlContinueRx>
 8009b88:	e038      	b.n	8009bfc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d105      	bne.n	8009bac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 ff51 	bl	800aa54 <USBD_CtlSendStatus>
 8009bb2:	e023      	b.n	8009bfc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d11e      	bne.n	8009bfc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f001 fc13 	bl	800b3f4 <USBD_LL_StallEP>
 8009bce:	e015      	b.n	8009bfc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00d      	beq.n	8009bf8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d108      	bne.n	8009bf8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	7afa      	ldrb	r2, [r7, #11]
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	4798      	blx	r3
 8009bf6:	e001      	b.n	8009bfc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e000      	b.n	8009bfe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c14:	7afb      	ldrb	r3, [r7, #11]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d17f      	bne.n	8009d1a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3314      	adds	r3, #20
 8009c1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d15c      	bne.n	8009ce4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d915      	bls.n	8009c62 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	1ad2      	subs	r2, r2, r3
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 febe 	bl	800a9d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c54:	2300      	movs	r3, #0
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f001 fc75 	bl	800b54a <USBD_LL_PrepareReceive>
 8009c60:	e04e      	b.n	8009d00 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	6912      	ldr	r2, [r2, #16]
 8009c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c6e:	fb01 f202 	mul.w	r2, r1, r2
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11c      	bne.n	8009cb2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d316      	bcc.n	8009cb2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d20f      	bcs.n	8009cb2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c92:	2200      	movs	r2, #0
 8009c94:	2100      	movs	r1, #0
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 fe9a 	bl	800a9d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2100      	movs	r1, #0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f001 fc4d 	bl	800b54a <USBD_LL_PrepareReceive>
 8009cb0:	e026      	b.n	8009d00 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d105      	bne.n	8009cd4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009cd4:	2180      	movs	r1, #128	@ 0x80
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f001 fb8c 	bl	800b3f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fecc 	bl	800aa7a <USBD_CtlReceiveStatus>
 8009ce2:	e00d      	b.n	8009d00 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009cea:	2b04      	cmp	r3, #4
 8009cec:	d004      	beq.n	8009cf8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d103      	bne.n	8009d00 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009cf8:	2180      	movs	r1, #128	@ 0x80
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f001 fb7a 	bl	800b3f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d11d      	bne.n	8009d46 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fe81 	bl	8009a12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d18:	e015      	b.n	8009d46 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d108      	bne.n	8009d42 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	7afa      	ldrb	r2, [r7, #11]
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	4798      	blx	r3
 8009d40:	e001      	b.n	8009d46 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d42:	2302      	movs	r3, #2
 8009d44:	e000      	b.n	8009d48 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d58:	2340      	movs	r3, #64	@ 0x40
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fb03 	bl	800b36a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2240      	movs	r2, #64	@ 0x40
 8009d70:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d74:	2340      	movs	r3, #64	@ 0x40
 8009d76:	2200      	movs	r2, #0
 8009d78:	2180      	movs	r1, #128	@ 0x80
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f001 faf5 	bl	800b36a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2240      	movs	r2, #64	@ 0x40
 8009d8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6852      	ldr	r2, [r2, #4]
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
  }

  return USBD_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr

08009df0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2204      	movs	r2, #4
 8009e08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr

08009e18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d105      	bne.n	8009e36 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bc80      	pop	{r7}
 8009e40:	4770      	bx	lr

08009e42 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b082      	sub	sp, #8
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d10b      	bne.n	8009e6c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5a:	69db      	ldr	r3, [r3, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e66:	69db      	ldr	r3, [r3, #28]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
	...

08009e78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e8e:	2b40      	cmp	r3, #64	@ 0x40
 8009e90:	d005      	beq.n	8009e9e <USBD_StdDevReq+0x26>
 8009e92:	2b40      	cmp	r3, #64	@ 0x40
 8009e94:	d84f      	bhi.n	8009f36 <USBD_StdDevReq+0xbe>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <USBD_StdDevReq+0x36>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d14b      	bne.n	8009f36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	4798      	blx	r3
      break;
 8009eac:	e048      	b.n	8009f40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d839      	bhi.n	8009f2a <USBD_StdDevReq+0xb2>
 8009eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ebc <USBD_StdDevReq+0x44>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009f0d 	.word	0x08009f0d
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	08009f2b 	.word	0x08009f2b
 8009ec8:	08009f17 	.word	0x08009f17
 8009ecc:	08009f2b 	.word	0x08009f2b
 8009ed0:	08009eef 	.word	0x08009eef
 8009ed4:	08009ee5 	.word	0x08009ee5
 8009ed8:	08009f2b 	.word	0x08009f2b
 8009edc:	08009f03 	.word	0x08009f03
 8009ee0:	08009ef9 	.word	0x08009ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f9dc 	bl	800a2a4 <USBD_GetDescriptor>
          break;
 8009eec:	e022      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fb3f 	bl	800a574 <USBD_SetAddress>
          break;
 8009ef6:	e01d      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb7e 	bl	800a5fc <USBD_SetConfig>
          break;
 8009f00:	e018      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fc07 	bl	800a718 <USBD_GetConfig>
          break;
 8009f0a:	e013      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fc37 	bl	800a782 <USBD_GetStatus>
          break;
 8009f14:	e00e      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fc65 	bl	800a7e8 <USBD_SetFeature>
          break;
 8009f1e:	e009      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fc74 	bl	800a810 <USBD_ClrFeature>
          break;
 8009f28:	e004      	b.n	8009f34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fcc9 	bl	800a8c4 <USBD_CtlError>
          break;
 8009f32:	bf00      	nop
      }
      break;
 8009f34:	e004      	b.n	8009f40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fcc3 	bl	800a8c4 <USBD_CtlError>
      break;
 8009f3e:	bf00      	nop
  }

  return ret;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop

08009f4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f62:	2b40      	cmp	r3, #64	@ 0x40
 8009f64:	d005      	beq.n	8009f72 <USBD_StdItfReq+0x26>
 8009f66:	2b40      	cmp	r3, #64	@ 0x40
 8009f68:	d82e      	bhi.n	8009fc8 <USBD_StdItfReq+0x7c>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <USBD_StdItfReq+0x26>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d12a      	bne.n	8009fc8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d81d      	bhi.n	8009fba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	889b      	ldrh	r3, [r3, #4]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d813      	bhi.n	8009fb0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	4798      	blx	r3
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	88db      	ldrh	r3, [r3, #6]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d110      	bne.n	8009fc4 <USBD_StdItfReq+0x78>
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10d      	bne.n	8009fc4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fd53 	bl	800aa54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009fae:	e009      	b.n	8009fc4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fc86 	bl	800a8c4 <USBD_CtlError>
          break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fc81 	bl	800a8c4 <USBD_CtlError>
          break;
 8009fc2:	e000      	b.n	8009fc6 <USBD_StdItfReq+0x7a>
          break;
 8009fc4:	bf00      	nop
      }
      break;
 8009fc6:	e004      	b.n	8009fd2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fc7a 	bl	800a8c4 <USBD_CtlError>
      break;
 8009fd0:	bf00      	nop
  }

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	889b      	ldrh	r3, [r3, #4]
 8009fee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ff8:	2b40      	cmp	r3, #64	@ 0x40
 8009ffa:	d007      	beq.n	800a00c <USBD_StdEPReq+0x30>
 8009ffc:	2b40      	cmp	r3, #64	@ 0x40
 8009ffe:	f200 8146 	bhi.w	800a28e <USBD_StdEPReq+0x2b2>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <USBD_StdEPReq+0x40>
 800a006:	2b20      	cmp	r3, #32
 800a008:	f040 8141 	bne.w	800a28e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
      break;
 800a01a:	e13d      	b.n	800a298 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a024:	2b20      	cmp	r3, #32
 800a026:	d10a      	bne.n	800a03e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	e12d      	b.n	800a29a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	785b      	ldrb	r3, [r3, #1]
 800a042:	2b03      	cmp	r3, #3
 800a044:	d007      	beq.n	800a056 <USBD_StdEPReq+0x7a>
 800a046:	2b03      	cmp	r3, #3
 800a048:	f300 811b 	bgt.w	800a282 <USBD_StdEPReq+0x2a6>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d072      	beq.n	800a136 <USBD_StdEPReq+0x15a>
 800a050:	2b01      	cmp	r3, #1
 800a052:	d03a      	beq.n	800a0ca <USBD_StdEPReq+0xee>
 800a054:	e115      	b.n	800a282 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d002      	beq.n	800a066 <USBD_StdEPReq+0x8a>
 800a060:	2b03      	cmp	r3, #3
 800a062:	d015      	beq.n	800a090 <USBD_StdEPReq+0xb4>
 800a064:	e02b      	b.n	800a0be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00c      	beq.n	800a086 <USBD_StdEPReq+0xaa>
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	2b80      	cmp	r3, #128	@ 0x80
 800a070:	d009      	beq.n	800a086 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a072:	7bbb      	ldrb	r3, [r7, #14]
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f001 f9bc 	bl	800b3f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a07c:	2180      	movs	r1, #128	@ 0x80
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f001 f9b8 	bl	800b3f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a084:	e020      	b.n	800a0c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fc1b 	bl	800a8c4 <USBD_CtlError>
              break;
 800a08e:	e01b      	b.n	800a0c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	885b      	ldrh	r3, [r3, #2]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10e      	bne.n	800a0b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <USBD_StdEPReq+0xda>
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	2b80      	cmp	r3, #128	@ 0x80
 800a0a2:	d008      	beq.n	800a0b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	88db      	ldrh	r3, [r3, #6]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f001 f99f 	bl	800b3f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fccc 	bl	800aa54 <USBD_CtlSendStatus>

              break;
 800a0bc:	e004      	b.n	800a0c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fbff 	bl	800a8c4 <USBD_CtlError>
              break;
 800a0c6:	bf00      	nop
          }
          break;
 800a0c8:	e0e0      	b.n	800a28c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d002      	beq.n	800a0da <USBD_StdEPReq+0xfe>
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d015      	beq.n	800a104 <USBD_StdEPReq+0x128>
 800a0d8:	e026      	b.n	800a128 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00c      	beq.n	800a0fa <USBD_StdEPReq+0x11e>
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b80      	cmp	r3, #128	@ 0x80
 800a0e4:	d009      	beq.n	800a0fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 f982 	bl	800b3f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0f0:	2180      	movs	r1, #128	@ 0x80
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f97e 	bl	800b3f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0f8:	e01c      	b.n	800a134 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fbe1 	bl	800a8c4 <USBD_CtlError>
              break;
 800a102:	e017      	b.n	800a134 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	885b      	ldrh	r3, [r3, #2]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d112      	bne.n	800a132 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 f989 	bl	800b432 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fc97 	bl	800aa54 <USBD_CtlSendStatus>
              }
              break;
 800a126:	e004      	b.n	800a132 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fbca 	bl	800a8c4 <USBD_CtlError>
              break;
 800a130:	e000      	b.n	800a134 <USBD_StdEPReq+0x158>
              break;
 800a132:	bf00      	nop
          }
          break;
 800a134:	e0aa      	b.n	800a28c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d002      	beq.n	800a146 <USBD_StdEPReq+0x16a>
 800a140:	2b03      	cmp	r3, #3
 800a142:	d032      	beq.n	800a1aa <USBD_StdEPReq+0x1ce>
 800a144:	e097      	b.n	800a276 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <USBD_StdEPReq+0x180>
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2b80      	cmp	r3, #128	@ 0x80
 800a150:	d004      	beq.n	800a15c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fbb5 	bl	800a8c4 <USBD_CtlError>
                break;
 800a15a:	e091      	b.n	800a280 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a15c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a160:	2b00      	cmp	r3, #0
 800a162:	da0b      	bge.n	800a17c <USBD_StdEPReq+0x1a0>
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a16a:	4613      	mov	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	3310      	adds	r3, #16
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4413      	add	r3, r2
 800a178:	3304      	adds	r3, #4
 800a17a:	e00b      	b.n	800a194 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fbf8 	bl	800a998 <USBD_CtlSendData>
              break;
 800a1a8:	e06a      	b.n	800a280 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	da11      	bge.n	800a1d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	f003 020f 	and.w	r2, r3, #15
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d117      	bne.n	800a1fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fb78 	bl	800a8c4 <USBD_CtlError>
                  break;
 800a1d4:	e054      	b.n	800a280 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1d6:	7bbb      	ldrb	r3, [r7, #14]
 800a1d8:	f003 020f 	and.w	r2, r3, #15
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d104      	bne.n	800a1fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fb65 	bl	800a8c4 <USBD_CtlError>
                  break;
 800a1fa:	e041      	b.n	800a280 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a200:	2b00      	cmp	r3, #0
 800a202:	da0b      	bge.n	800a21c <USBD_StdEPReq+0x240>
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	3310      	adds	r3, #16
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	3304      	adds	r3, #4
 800a21a:	e00b      	b.n	800a234 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a21c:	7bbb      	ldrb	r3, [r7, #14]
 800a21e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	4413      	add	r3, r2
 800a232:	3304      	adds	r3, #4
 800a234:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a236:	7bbb      	ldrb	r3, [r7, #14]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <USBD_StdEPReq+0x266>
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	2b80      	cmp	r3, #128	@ 0x80
 800a240:	d103      	bne.n	800a24a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]
 800a248:	e00e      	b.n	800a268 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 f90e 	bl	800b470 <USBD_LL_IsStallEP>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	e002      	b.n	800a268 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2202      	movs	r2, #2
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fb92 	bl	800a998 <USBD_CtlSendData>
              break;
 800a274:	e004      	b.n	800a280 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fb23 	bl	800a8c4 <USBD_CtlError>
              break;
 800a27e:	bf00      	nop
          }
          break;
 800a280:	e004      	b.n	800a28c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fb1d 	bl	800a8c4 <USBD_CtlError>
          break;
 800a28a:	bf00      	nop
      }
      break;
 800a28c:	e004      	b.n	800a298 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fb17 	bl	800a8c4 <USBD_CtlError>
      break;
 800a296:	bf00      	nop
  }

  return ret;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	885b      	ldrh	r3, [r3, #2]
 800a2be:	0a1b      	lsrs	r3, r3, #8
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	2b06      	cmp	r3, #6
 800a2c6:	f200 8128 	bhi.w	800a51a <USBD_GetDescriptor+0x276>
 800a2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d0 <USBD_GetDescriptor+0x2c>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a2ed 	.word	0x0800a2ed
 800a2d4:	0800a305 	.word	0x0800a305
 800a2d8:	0800a345 	.word	0x0800a345
 800a2dc:	0800a51b 	.word	0x0800a51b
 800a2e0:	0800a51b 	.word	0x0800a51b
 800a2e4:	0800a4bb 	.word	0x0800a4bb
 800a2e8:	0800a4e7 	.word	0x0800a4e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7c12      	ldrb	r2, [r2, #16]
 800a2f8:	f107 0108 	add.w	r1, r7, #8
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	4798      	blx	r3
 800a300:	60f8      	str	r0, [r7, #12]
      break;
 800a302:	e112      	b.n	800a52a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	7c1b      	ldrb	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10d      	bne.n	800a328 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a314:	f107 0208 	add.w	r2, r7, #8
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3
 800a31c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3301      	adds	r3, #1
 800a322:	2202      	movs	r2, #2
 800a324:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a326:	e100      	b.n	800a52a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a330:	f107 0208 	add.w	r2, r7, #8
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
 800a338:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	2202      	movs	r2, #2
 800a340:	701a      	strb	r2, [r3, #0]
      break;
 800a342:	e0f2      	b.n	800a52a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	885b      	ldrh	r3, [r3, #2]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	f200 80ac 	bhi.w	800a4a8 <USBD_GetDescriptor+0x204>
 800a350:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <USBD_GetDescriptor+0xb4>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a371 	.word	0x0800a371
 800a35c:	0800a3a5 	.word	0x0800a3a5
 800a360:	0800a3d9 	.word	0x0800a3d9
 800a364:	0800a40d 	.word	0x0800a40d
 800a368:	0800a441 	.word	0x0800a441
 800a36c:	0800a475 	.word	0x0800a475
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00b      	beq.n	800a394 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	7c12      	ldrb	r2, [r2, #16]
 800a388:	f107 0108 	add.w	r1, r7, #8
 800a38c:	4610      	mov	r0, r2
 800a38e:	4798      	blx	r3
 800a390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a392:	e091      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa94 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a39c:	7afb      	ldrb	r3, [r7, #11]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3a2:	e089      	b.n	800a4b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00b      	beq.n	800a3c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	7c12      	ldrb	r2, [r2, #16]
 800a3bc:	f107 0108 	add.w	r1, r7, #8
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4798      	blx	r3
 800a3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3c6:	e077      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa7a 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a3d0:	7afb      	ldrb	r3, [r7, #11]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3d6:	e06f      	b.n	800a4b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00b      	beq.n	800a3fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	7c12      	ldrb	r2, [r2, #16]
 800a3f0:	f107 0108 	add.w	r1, r7, #8
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	4798      	blx	r3
 800a3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3fa:	e05d      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa60 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a404:	7afb      	ldrb	r3, [r7, #11]
 800a406:	3301      	adds	r3, #1
 800a408:	72fb      	strb	r3, [r7, #11]
          break;
 800a40a:	e055      	b.n	800a4b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00b      	beq.n	800a430 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	7c12      	ldrb	r2, [r2, #16]
 800a424:	f107 0108 	add.w	r1, r7, #8
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
 800a42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a42e:	e043      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fa46 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a438:	7afb      	ldrb	r3, [r7, #11]
 800a43a:	3301      	adds	r3, #1
 800a43c:	72fb      	strb	r3, [r7, #11]
          break;
 800a43e:	e03b      	b.n	800a4b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	7c12      	ldrb	r2, [r2, #16]
 800a458:	f107 0108 	add.w	r1, r7, #8
 800a45c:	4610      	mov	r0, r2
 800a45e:	4798      	blx	r3
 800a460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a462:	e029      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa2c 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a46c:	7afb      	ldrb	r3, [r7, #11]
 800a46e:	3301      	adds	r3, #1
 800a470:	72fb      	strb	r3, [r7, #11]
          break;
 800a472:	e021      	b.n	800a4b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00b      	beq.n	800a498 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	7c12      	ldrb	r2, [r2, #16]
 800a48c:	f107 0108 	add.w	r1, r7, #8
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
 800a494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a496:	e00f      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fa12 	bl	800a8c4 <USBD_CtlError>
            err++;
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4a6:	e007      	b.n	800a4b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa0a 	bl	800a8c4 <USBD_CtlError>
          err++;
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a4b6:	e038      	b.n	800a52a <USBD_GetDescriptor+0x286>
 800a4b8:	e037      	b.n	800a52a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7c1b      	ldrb	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d109      	bne.n	800a4d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ca:	f107 0208 	add.w	r2, r7, #8
 800a4ce:	4610      	mov	r0, r2
 800a4d0:	4798      	blx	r3
 800a4d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4d4:	e029      	b.n	800a52a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f9f3 	bl	800a8c4 <USBD_CtlError>
        err++;
 800a4de:	7afb      	ldrb	r3, [r7, #11]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a4e4:	e021      	b.n	800a52a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7c1b      	ldrb	r3, [r3, #16]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10d      	bne.n	800a50a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f6:	f107 0208 	add.w	r2, r7, #8
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4798      	blx	r3
 800a4fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	2207      	movs	r2, #7
 800a506:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a508:	e00f      	b.n	800a52a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f9d9 	bl	800a8c4 <USBD_CtlError>
        err++;
 800a512:	7afb      	ldrb	r3, [r7, #11]
 800a514:	3301      	adds	r3, #1
 800a516:	72fb      	strb	r3, [r7, #11]
      break;
 800a518:	e007      	b.n	800a52a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f9d1 	bl	800a8c4 <USBD_CtlError>
      err++;
 800a522:	7afb      	ldrb	r3, [r7, #11]
 800a524:	3301      	adds	r3, #1
 800a526:	72fb      	strb	r3, [r7, #11]
      break;
 800a528:	bf00      	nop
  }

  if (err != 0U)
 800a52a:	7afb      	ldrb	r3, [r7, #11]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d11c      	bne.n	800a56a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a530:	893b      	ldrh	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d011      	beq.n	800a55a <USBD_GetDescriptor+0x2b6>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	88db      	ldrh	r3, [r3, #6]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	88da      	ldrh	r2, [r3, #6]
 800a542:	893b      	ldrh	r3, [r7, #8]
 800a544:	4293      	cmp	r3, r2
 800a546:	bf28      	it	cs
 800a548:	4613      	movcs	r3, r2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a54e:	893b      	ldrh	r3, [r7, #8]
 800a550:	461a      	mov	r2, r3
 800a552:	68f9      	ldr	r1, [r7, #12]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fa1f 	bl	800a998 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	88db      	ldrh	r3, [r3, #6]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d104      	bne.n	800a56c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa76 	bl	800aa54 <USBD_CtlSendStatus>
 800a568:	e000      	b.n	800a56c <USBD_GetDescriptor+0x2c8>
    return;
 800a56a:	bf00      	nop
    }
  }
}
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop

0800a574 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	889b      	ldrh	r3, [r3, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d130      	bne.n	800a5e8 <USBD_SetAddress+0x74>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	88db      	ldrh	r3, [r3, #6]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d12c      	bne.n	800a5e8 <USBD_SetAddress+0x74>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	885b      	ldrh	r3, [r3, #2]
 800a592:	2b7f      	cmp	r3, #127	@ 0x7f
 800a594:	d828      	bhi.n	800a5e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	885b      	ldrh	r3, [r3, #2]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5a8:	2b03      	cmp	r3, #3
 800a5aa:	d104      	bne.n	800a5b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f988 	bl	800a8c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b4:	e01d      	b.n	800a5f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7bfa      	ldrb	r2, [r7, #15]
 800a5ba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 ff7f 	bl	800b4c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fa43 	bl	800aa54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d004      	beq.n	800a5de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5dc:	e009      	b.n	800a5f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e6:	e004      	b.n	800a5f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f96a 	bl	800a8c4 <USBD_CtlError>
  }
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	885b      	ldrh	r3, [r3, #2]
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	4b41      	ldr	r3, [pc, #260]	@ (800a714 <USBD_SetConfig+0x118>)
 800a60e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a610:	4b40      	ldr	r3, [pc, #256]	@ (800a714 <USBD_SetConfig+0x118>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d904      	bls.n	800a622 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f952 	bl	800a8c4 <USBD_CtlError>
 800a620:	e075      	b.n	800a70e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d002      	beq.n	800a632 <USBD_SetConfig+0x36>
 800a62c:	2b03      	cmp	r3, #3
 800a62e:	d023      	beq.n	800a678 <USBD_SetConfig+0x7c>
 800a630:	e062      	b.n	800a6f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a632:	4b38      	ldr	r3, [pc, #224]	@ (800a714 <USBD_SetConfig+0x118>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01a      	beq.n	800a670 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a63a:	4b36      	ldr	r3, [pc, #216]	@ (800a714 <USBD_SetConfig+0x118>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2203      	movs	r2, #3
 800a648:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a64c:	4b31      	ldr	r3, [pc, #196]	@ (800a714 <USBD_SetConfig+0x118>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff f9e7 	bl	8009a26 <USBD_SetClassConfig>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d104      	bne.n	800a668 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f92f 	bl	800a8c4 <USBD_CtlError>
            return;
 800a666:	e052      	b.n	800a70e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f9f3 	bl	800aa54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a66e:	e04e      	b.n	800a70e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9ef 	bl	800aa54 <USBD_CtlSendStatus>
        break;
 800a676:	e04a      	b.n	800a70e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a678:	4b26      	ldr	r3, [pc, #152]	@ (800a714 <USBD_SetConfig+0x118>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d112      	bne.n	800a6a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a688:	4b22      	ldr	r3, [pc, #136]	@ (800a714 <USBD_SetConfig+0x118>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a692:	4b20      	ldr	r3, [pc, #128]	@ (800a714 <USBD_SetConfig+0x118>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff f9e3 	bl	8009a64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f9d8 	bl	800aa54 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6a4:	e033      	b.n	800a70e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a6a6:	4b1b      	ldr	r3, [pc, #108]	@ (800a714 <USBD_SetConfig+0x118>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d01d      	beq.n	800a6f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff f9d1 	bl	8009a64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a6c2:	4b14      	ldr	r3, [pc, #80]	@ (800a714 <USBD_SetConfig+0x118>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6cc:	4b11      	ldr	r3, [pc, #68]	@ (800a714 <USBD_SetConfig+0x118>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff f9a7 	bl	8009a26 <USBD_SetClassConfig>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d104      	bne.n	800a6e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f8ef 	bl	800a8c4 <USBD_CtlError>
            return;
 800a6e6:	e012      	b.n	800a70e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9b3 	bl	800aa54 <USBD_CtlSendStatus>
        break;
 800a6ee:	e00e      	b.n	800a70e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f9af 	bl	800aa54 <USBD_CtlSendStatus>
        break;
 800a6f6:	e00a      	b.n	800a70e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f8e2 	bl	800a8c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a700:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <USBD_SetConfig+0x118>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	4619      	mov	r1, r3
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff f9ac 	bl	8009a64 <USBD_ClrClassConfig>
        break;
 800a70c:	bf00      	nop
    }
  }
}
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	20002374 	.word	0x20002374

0800a718 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	88db      	ldrh	r3, [r3, #6]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d004      	beq.n	800a734 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f8c9 	bl	800a8c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a732:	e022      	b.n	800a77a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	dc02      	bgt.n	800a744 <USBD_GetConfig+0x2c>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	dc03      	bgt.n	800a74a <USBD_GetConfig+0x32>
 800a742:	e015      	b.n	800a770 <USBD_GetConfig+0x58>
 800a744:	2b03      	cmp	r3, #3
 800a746:	d00b      	beq.n	800a760 <USBD_GetConfig+0x48>
 800a748:	e012      	b.n	800a770 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3308      	adds	r3, #8
 800a754:	2201      	movs	r2, #1
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f91d 	bl	800a998 <USBD_CtlSendData>
        break;
 800a75e:	e00c      	b.n	800a77a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3304      	adds	r3, #4
 800a764:	2201      	movs	r2, #1
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f915 	bl	800a998 <USBD_CtlSendData>
        break;
 800a76e:	e004      	b.n	800a77a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f8a6 	bl	800a8c4 <USBD_CtlError>
        break;
 800a778:	bf00      	nop
}
 800a77a:	bf00      	nop
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a792:	3b01      	subs	r3, #1
 800a794:	2b02      	cmp	r3, #2
 800a796:	d81e      	bhi.n	800a7d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	88db      	ldrh	r3, [r3, #6]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d004      	beq.n	800a7aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f88e 	bl	800a8c4 <USBD_CtlError>
        break;
 800a7a8:	e01a      	b.n	800a7e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	f043 0202 	orr.w	r2, r3, #2
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	330c      	adds	r3, #12
 800a7ca:	2202      	movs	r2, #2
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f8e2 	bl	800a998 <USBD_CtlSendData>
      break;
 800a7d4:	e004      	b.n	800a7e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f873 	bl	800a8c4 <USBD_CtlError>
      break;
 800a7de:	bf00      	nop
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	885b      	ldrh	r3, [r3, #2]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d106      	bne.n	800a808 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f926 	bl	800aa54 <USBD_CtlSendStatus>
  }
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	3b01      	subs	r3, #1
 800a822:	2b02      	cmp	r3, #2
 800a824:	d80b      	bhi.n	800a83e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d10c      	bne.n	800a848 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f90c 	bl	800aa54 <USBD_CtlSendStatus>
      }
      break;
 800a83c:	e004      	b.n	800a848 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f83f 	bl	800a8c4 <USBD_CtlError>
      break;
 800a846:	e000      	b.n	800a84a <USBD_ClrFeature+0x3a>
      break;
 800a848:	bf00      	nop
  }
}
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a852:	b480      	push	{r7}
 800a854:	b083      	sub	sp, #12
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781a      	ldrb	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	785a      	ldrb	r2, [r3, #1]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	3302      	adds	r3, #2
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	3303      	adds	r3, #3
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	4413      	add	r3, r2
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	3304      	adds	r3, #4
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	3305      	adds	r3, #5
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	b29b      	uxth	r3, r3
 800a898:	4413      	add	r3, r2
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	3306      	adds	r3, #6
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	3307      	adds	r3, #7
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	80da      	strh	r2, [r3, #6]

}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bc80      	pop	{r7}
 800a8c2:	4770      	bx	lr

0800a8c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fd8f 	bl	800b3f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 fd8b 	bl	800b3f4 <USBD_LL_StallEP>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d032      	beq.n	800a962 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	f000 f834 	bl	800a96a <USBD_GetLen>
 800a902:	4603      	mov	r3, r0
 800a904:	3301      	adds	r3, #1
 800a906:	b29b      	uxth	r3, r3
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	75fa      	strb	r2, [r7, #23]
 800a916:	461a      	mov	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4413      	add	r3, r2
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	7812      	ldrb	r2, [r2, #0]
 800a920:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	75fa      	strb	r2, [r7, #23]
 800a928:	461a      	mov	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	4413      	add	r3, r2
 800a92e:	2203      	movs	r2, #3
 800a930:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a932:	e012      	b.n	800a95a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	60fa      	str	r2, [r7, #12]
 800a93a:	7dfa      	ldrb	r2, [r7, #23]
 800a93c:	1c51      	adds	r1, r2, #1
 800a93e:	75f9      	strb	r1, [r7, #23]
 800a940:	4611      	mov	r1, r2
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	440a      	add	r2, r1
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
 800a94c:	1c5a      	adds	r2, r3, #1
 800a94e:	75fa      	strb	r2, [r7, #23]
 800a950:	461a      	mov	r2, r3
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	4413      	add	r3, r2
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e8      	bne.n	800a934 <USBD_GetString+0x4e>
    }
  }
}
 800a962:	bf00      	nop
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a976:	e005      	b.n	800a984 <USBD_GetLen+0x1a>
  {
    len++;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	3301      	adds	r3, #1
 800a97c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3301      	adds	r3, #1
 800a982:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1f5      	bne.n	800a978 <USBD_GetLen+0xe>
  }

  return len;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a9b4:	88fa      	ldrh	r2, [r7, #6]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	2100      	movs	r1, #0
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 fd9f 	bl	800b504 <USBD_LL_Transmit>

  return USBD_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 fd8d 	bl	800b504 <USBD_LL_Transmit>

  return USBD_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2203      	movs	r2, #3
 800aa06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa0a:	88fa      	ldrh	r2, [r7, #6]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aa12:	88fa      	ldrh	r2, [r7, #6]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	2100      	movs	r1, #0
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 fd92 	bl	800b54a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	2100      	movs	r1, #0
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fd80 	bl	800b54a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2204      	movs	r2, #4
 800aa60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa64:	2300      	movs	r3, #0
 800aa66:	2200      	movs	r2, #0
 800aa68:	2100      	movs	r1, #0
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fd4a 	bl	800b504 <USBD_LL_Transmit>

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2205      	movs	r2, #5
 800aa86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 fd5a 	bl	800b54a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4912      	ldr	r1, [pc, #72]	@ (800aaf0 <MX_USB_DEVICE_Init+0x50>)
 800aaa8:	4812      	ldr	r0, [pc, #72]	@ (800aaf4 <MX_USB_DEVICE_Init+0x54>)
 800aaaa:	f7fe ff62 	bl	8009972 <USBD_Init>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d001      	beq.n	800aab8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aab4:	f7f9 fa5a 	bl	8003f6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aab8:	490f      	ldr	r1, [pc, #60]	@ (800aaf8 <MX_USB_DEVICE_Init+0x58>)
 800aaba:	480e      	ldr	r0, [pc, #56]	@ (800aaf4 <MX_USB_DEVICE_Init+0x54>)
 800aabc:	f7fe ff84 	bl	80099c8 <USBD_RegisterClass>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aac6:	f7f9 fa51 	bl	8003f6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aaca:	490c      	ldr	r1, [pc, #48]	@ (800aafc <MX_USB_DEVICE_Init+0x5c>)
 800aacc:	4809      	ldr	r0, [pc, #36]	@ (800aaf4 <MX_USB_DEVICE_Init+0x54>)
 800aace:	f7fe feb5 	bl	800983c <USBD_CDC_RegisterInterface>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aad8:	f7f9 fa48 	bl	8003f6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aadc:	4805      	ldr	r0, [pc, #20]	@ (800aaf4 <MX_USB_DEVICE_Init+0x54>)
 800aade:	f7fe ff8c 	bl	80099fa <USBD_Start>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aae8:	f7f9 fa40 	bl	8003f6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aaec:	bf00      	nop
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20000138 	.word	0x20000138
 800aaf4:	20002378 	.word	0x20002378
 800aaf8:	20000024 	.word	0x20000024
 800aafc:	20000128 	.word	0x20000128

0800ab00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab04:	2200      	movs	r2, #0
 800ab06:	4905      	ldr	r1, [pc, #20]	@ (800ab1c <CDC_Init_FS+0x1c>)
 800ab08:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <CDC_Init_FS+0x20>)
 800ab0a:	f7fe fead 	bl	8009868 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab0e:	4905      	ldr	r1, [pc, #20]	@ (800ab24 <CDC_Init_FS+0x24>)
 800ab10:	4803      	ldr	r0, [pc, #12]	@ (800ab20 <CDC_Init_FS+0x20>)
 800ab12:	f7fe fec2 	bl	800989a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20002a3c 	.word	0x20002a3c
 800ab20:	20002378 	.word	0x20002378
 800ab24:	2000263c 	.word	0x2000263c

0800ab28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr
	...

0800ab38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	6039      	str	r1, [r7, #0]
 800ab42:	71fb      	strb	r3, [r7, #7]
 800ab44:	4613      	mov	r3, r2
 800ab46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	2b23      	cmp	r3, #35	@ 0x23
 800ab4c:	d84a      	bhi.n	800abe4 <CDC_Control_FS+0xac>
 800ab4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <CDC_Control_FS+0x1c>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800abe5 	.word	0x0800abe5
 800ab58:	0800abe5 	.word	0x0800abe5
 800ab5c:	0800abe5 	.word	0x0800abe5
 800ab60:	0800abe5 	.word	0x0800abe5
 800ab64:	0800abe5 	.word	0x0800abe5
 800ab68:	0800abe5 	.word	0x0800abe5
 800ab6c:	0800abe5 	.word	0x0800abe5
 800ab70:	0800abe5 	.word	0x0800abe5
 800ab74:	0800abe5 	.word	0x0800abe5
 800ab78:	0800abe5 	.word	0x0800abe5
 800ab7c:	0800abe5 	.word	0x0800abe5
 800ab80:	0800abe5 	.word	0x0800abe5
 800ab84:	0800abe5 	.word	0x0800abe5
 800ab88:	0800abe5 	.word	0x0800abe5
 800ab8c:	0800abe5 	.word	0x0800abe5
 800ab90:	0800abe5 	.word	0x0800abe5
 800ab94:	0800abe5 	.word	0x0800abe5
 800ab98:	0800abe5 	.word	0x0800abe5
 800ab9c:	0800abe5 	.word	0x0800abe5
 800aba0:	0800abe5 	.word	0x0800abe5
 800aba4:	0800abe5 	.word	0x0800abe5
 800aba8:	0800abe5 	.word	0x0800abe5
 800abac:	0800abe5 	.word	0x0800abe5
 800abb0:	0800abe5 	.word	0x0800abe5
 800abb4:	0800abe5 	.word	0x0800abe5
 800abb8:	0800abe5 	.word	0x0800abe5
 800abbc:	0800abe5 	.word	0x0800abe5
 800abc0:	0800abe5 	.word	0x0800abe5
 800abc4:	0800abe5 	.word	0x0800abe5
 800abc8:	0800abe5 	.word	0x0800abe5
 800abcc:	0800abe5 	.word	0x0800abe5
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abe5 	.word	0x0800abe5
 800abd8:	0800abe5 	.word	0x0800abe5
 800abdc:	0800abe5 	.word	0x0800abe5
 800abe0:	0800abe5 	.word	0x0800abe5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abe4:	bf00      	nop
  }

  return (USBD_OK);
 800abe6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	bc80      	pop	{r7}
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop

0800abf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 800abfe:	2300      	movs	r3, #0
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e022      	b.n	800ac4a <CDC_Receive_FS+0x56>
    char receivedChar = Buf[i];
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 800ac0e:	7afb      	ldrb	r3, [r7, #11]
 800ac10:	2b0a      	cmp	r3, #10
 800ac12:	d108      	bne.n	800ac26 <CDC_Receive_FS+0x32>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 800ac14:	4b15      	ldr	r3, [pc, #84]	@ (800ac6c <CDC_Receive_FS+0x78>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a15      	ldr	r2, [pc, #84]	@ (800ac70 <CDC_Receive_FS+0x7c>)
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 800ac1e:	4b15      	ldr	r3, [pc, #84]	@ (800ac74 <CDC_Receive_FS+0x80>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	701a      	strb	r2, [r3, #0]
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
 800ac24:	e016      	b.n	800ac54 <CDC_Receive_FS+0x60>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 800ac26:	7afb      	ldrb	r3, [r7, #11]
 800ac28:	2b0d      	cmp	r3, #13
 800ac2a:	d00b      	beq.n	800ac44 <CDC_Receive_FS+0x50>
 800ac2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac6c <CDC_Receive_FS+0x78>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b62      	cmp	r3, #98	@ 0x62
 800ac32:	d807      	bhi.n	800ac44 <CDC_Receive_FS+0x50>
      usbBuffer[usbBufferIndex++] = receivedChar;
 800ac34:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <CDC_Receive_FS+0x78>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	1c5a      	adds	r2, r3, #1
 800ac3a:	490c      	ldr	r1, [pc, #48]	@ (800ac6c <CDC_Receive_FS+0x78>)
 800ac3c:	600a      	str	r2, [r1, #0]
 800ac3e:	490c      	ldr	r1, [pc, #48]	@ (800ac70 <CDC_Receive_FS+0x7c>)
 800ac40:	7afa      	ldrb	r2, [r7, #11]
 800ac42:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	3301      	adds	r3, #1
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d3d7      	bcc.n	800ac04 <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4808      	ldr	r0, [pc, #32]	@ (800ac78 <CDC_Receive_FS+0x84>)
 800ac58:	f7fe fe1f 	bl	800989a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac5c:	4806      	ldr	r0, [pc, #24]	@ (800ac78 <CDC_Receive_FS+0x84>)
 800ac5e:	f7fe fe5e 	bl	800991e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac62:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000418 	.word	0x20000418
 800ac70:	200003b4 	.word	0x200003b4
 800ac74:	2000041c 	.word	0x2000041c
 800ac78:	20002378 	.word	0x20002378

0800ac7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  // Intentar transmitir directamente - la función nativa manejará el estado BUSY
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac8c:	887b      	ldrh	r3, [r7, #2]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4806      	ldr	r0, [pc, #24]	@ (800acac <CDC_Transmit_FS+0x30>)
 800ac94:	f7fe fde8 	bl	8009868 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac98:	4804      	ldr	r0, [pc, #16]	@ (800acac <CDC_Transmit_FS+0x30>)
 800ac9a:	f7fe fe11 	bl	80098c0 <USBD_CDC_TransmitPacket>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20002378 	.word	0x20002378

0800acb0 <CDC_TxQueue_Init>:

/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
    txQueue.head = 0;
 800acb6:	4b19      	ldr	r3, [pc, #100]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2528 	strb.w	r2, [r3, #1320]	@ 0x528
    txQueue.tail = 0;
 800acbe:	4b17      	ldr	r3, [pc, #92]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2529 	strb.w	r2, [r3, #1321]	@ 0x529
    txQueue.count = 0;
 800acc6:	4b15      	ldr	r3, [pc, #84]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 252a 	strb.w	r2, [r3, #1322]	@ 0x52a
    txQueue.transmitting = false;
 800acce:	4b13      	ldr	r3, [pc, #76]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 252b 	strb.w	r2, [r3, #1323]	@ 0x52b
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
 800acda:	e016      	b.n	800ad0a <CDC_TxQueue_Init+0x5a>
        txQueue.messages[i].used = false;
 800acdc:	490f      	ldr	r1, [pc, #60]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	015b      	lsls	r3, r3, #5
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	3382      	adds	r3, #130	@ 0x82
 800acec:	2200      	movs	r2, #0
 800acee:	701a      	strb	r2, [r3, #0]
        txQueue.messages[i].length = 0;
 800acf0:	490a      	ldr	r1, [pc, #40]	@ (800ad1c <CDC_TxQueue_Init+0x6c>)
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4613      	mov	r3, r2
 800acf6:	015b      	lsls	r3, r3, #5
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	3380      	adds	r3, #128	@ 0x80
 800ad00:	2200      	movs	r2, #0
 800ad02:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3301      	adds	r3, #1
 800ad08:	607b      	str	r3, [r7, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b09      	cmp	r3, #9
 800ad0e:	dde5      	ble.n	800acdc <CDC_TxQueue_Init+0x2c>
    }
}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr
 800ad1c:	20002e3c 	.word	0x20002e3c

0800ad20 <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	807b      	strh	r3, [r7, #2]
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 800ad2c:	4b21      	ldr	r3, [pc, #132]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad2e:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
 800ad32:	2b09      	cmp	r3, #9
 800ad34:	d802      	bhi.n	800ad3c <CDC_TxQueue_Add+0x1c>
 800ad36:	887b      	ldrh	r3, [r7, #2]
 800ad38:	2b80      	cmp	r3, #128	@ 0x80
 800ad3a:	d901      	bls.n	800ad40 <CDC_TxQueue_Add+0x20>
        return false;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e034      	b.n	800adaa <CDC_TxQueue_Add+0x8a>
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 800ad40:	4b1c      	ldr	r3, [pc, #112]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad42:	f893 3528 	ldrb.w	r3, [r3, #1320]	@ 0x528
 800ad46:	461a      	mov	r2, r3
 800ad48:	4613      	mov	r3, r2
 800ad4a:	015b      	lsls	r3, r3, #5
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4a18      	ldr	r2, [pc, #96]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad52:	4413      	add	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
    memcpy(msg->data, data, length);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	887a      	ldrh	r2, [r7, #2]
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f001 fc7c 	bl	800c65a <memcpy>
    msg->length = length;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	887a      	ldrh	r2, [r7, #2]
 800ad66:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    msg->used = true;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 800ad72:	4b10      	ldr	r3, [pc, #64]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad74:	f893 3528 	ldrb.w	r3, [r3, #1320]	@ 0x528
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	4b0f      	ldr	r3, [pc, #60]	@ (800adb8 <CDC_TxQueue_Add+0x98>)
 800ad7c:	fb83 1302 	smull	r1, r3, r3, r2
 800ad80:	1099      	asrs	r1, r3, #2
 800ad82:	17d3      	asrs	r3, r2, #31
 800ad84:	1ac9      	subs	r1, r1, r3
 800ad86:	460b      	mov	r3, r1
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	440b      	add	r3, r1
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	1ad1      	subs	r1, r2, r3
 800ad90:	b2ca      	uxtb	r2, r1
 800ad92:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad94:	f883 2528 	strb.w	r2, [r3, #1320]	@ 0x528
    txQueue.count++;
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ad9a:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
 800ad9e:	3301      	adds	r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <CDC_TxQueue_Add+0x94>)
 800ada4:	f883 252a 	strb.w	r2, [r3, #1322]	@ 0x52a
    
    return true;
 800ada8:	2301      	movs	r3, #1
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20002e3c 	.word	0x20002e3c
 800adb8:	66666667 	.word	0x66666667

0800adbc <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 800adc2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800adc4:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d052      	beq.n	800ae72 <CDC_TxQueue_Process+0xb6>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 800adcc:	4b2c      	ldr	r3, [pc, #176]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800adce:	f893 352b 	ldrb.w	r3, [r3, #1323]	@ 0x52b
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00c      	beq.n	800adf0 <CDC_TxQueue_Process+0x34>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 800add6:	2100      	movs	r1, #0
 800add8:	2000      	movs	r0, #0
 800adda:	f7ff ff4f 	bl	800ac7c <CDC_Transmit_FS>
 800adde:	4603      	mov	r3, r0
 800ade0:	73fb      	strb	r3, [r7, #15]
        if (result != USBD_BUSY) {
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d046      	beq.n	800ae76 <CDC_TxQueue_Process+0xba>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 800ade8:	4b25      	ldr	r3, [pc, #148]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800adea:	2200      	movs	r2, #0
 800adec:	f883 252b 	strb.w	r2, [r3, #1323]	@ 0x52b
            return;
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 800adf0:	4b23      	ldr	r3, [pc, #140]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800adf2:	f893 3529 	ldrb.w	r3, [r3, #1321]	@ 0x529
 800adf6:	461a      	mov	r2, r3
 800adf8:	4613      	mov	r3, r2
 800adfa:	015b      	lsls	r3, r3, #5
 800adfc:	4413      	add	r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4a1f      	ldr	r2, [pc, #124]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae02:	4413      	add	r3, r2
 800ae04:	60bb      	str	r3, [r7, #8]
    if (msg->used) {
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d033      	beq.n	800ae78 <CDC_TxQueue_Process+0xbc>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f7ff ff2e 	bl	800ac7c <CDC_Transmit_FS>
 800ae20:	4603      	mov	r3, r0
 800ae22:	71fb      	strb	r3, [r7, #7]
        
        if (result == USBD_OK) {
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d126      	bne.n	800ae78 <CDC_TxQueue_Process+0xbc>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800ae2a:	4b15      	ldr	r3, [pc, #84]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f883 252b 	strb.w	r2, [r3, #1323]	@ 0x52b
            msg->used = false;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800ae3a:	4b11      	ldr	r3, [pc, #68]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae3c:	f893 3529 	ldrb.w	r3, [r3, #1321]	@ 0x529
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	4b10      	ldr	r3, [pc, #64]	@ (800ae84 <CDC_TxQueue_Process+0xc8>)
 800ae44:	fb83 1302 	smull	r1, r3, r3, r2
 800ae48:	1099      	asrs	r1, r3, #2
 800ae4a:	17d3      	asrs	r3, r2, #31
 800ae4c:	1ac9      	subs	r1, r1, r3
 800ae4e:	460b      	mov	r3, r1
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	1ad1      	subs	r1, r2, r3
 800ae58:	b2ca      	uxtb	r2, r1
 800ae5a:	4b09      	ldr	r3, [pc, #36]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae5c:	f883 2529 	strb.w	r2, [r3, #1321]	@ 0x529
            txQueue.count--;
 800ae60:	4b07      	ldr	r3, [pc, #28]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae62:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b05      	ldr	r3, [pc, #20]	@ (800ae80 <CDC_TxQueue_Process+0xc4>)
 800ae6c:	f883 252a 	strb.w	r2, [r3, #1322]	@ 0x52a
 800ae70:	e002      	b.n	800ae78 <CDC_TxQueue_Process+0xbc>
        return;
 800ae72:	bf00      	nop
 800ae74:	e000      	b.n	800ae78 <CDC_TxQueue_Process+0xbc>
            return;
 800ae76:	bf00      	nop
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	20002e3c 	.word	0x20002e3c
 800ae84:	66666667 	.word	0x66666667

0800ae88 <CDC_Transmit_Queued>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	807b      	strh	r3, [r7, #2]
    return CDC_TxQueue_Add(data, length);
 800ae94:	887b      	ldrh	r3, [r7, #2]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff ff41 	bl	800ad20 <CDC_TxQueue_Add>
 800ae9e:	4603      	mov	r3, r0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <CDC_TxQueue_GetCount>:
/**
 * @brief Obtiene el número de mensajes en cola
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
    return txQueue.count;
 800aeac:	4b03      	ldr	r3, [pc, #12]	@ (800aebc <CDC_TxQueue_GetCount+0x14>)
 800aeae:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bc80      	pop	{r7}
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	20002e3c 	.word	0x20002e3c

0800aec0 <CDC_TxQueue_IsFull>:
/**
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
 800aec0:	b480      	push	{r7}
 800aec2:	af00      	add	r7, sp, #0
    return (txQueue.count >= TX_QUEUE_SIZE);
 800aec4:	4b05      	ldr	r3, [pc, #20]	@ (800aedc <CDC_TxQueue_IsFull+0x1c>)
 800aec6:	f893 352a 	ldrb.w	r3, [r3, #1322]	@ 0x52a
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	bf8c      	ite	hi
 800aece:	2301      	movhi	r3, #1
 800aed0:	2300      	movls	r3, #0
 800aed2:	b2db      	uxtb	r3, r3
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr
 800aedc:	20002e3c 	.word	0x20002e3c

0800aee0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2212      	movs	r2, #18
 800aef0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aef2:	4b03      	ldr	r3, [pc, #12]	@ (800af00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bc80      	pop	{r7}
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	20000154 	.word	0x20000154

0800af04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	6039      	str	r1, [r7, #0]
 800af0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2204      	movs	r2, #4
 800af14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af16:	4b03      	ldr	r3, [pc, #12]	@ (800af24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bc80      	pop	{r7}
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000168 	.word	0x20000168

0800af28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	6039      	str	r1, [r7, #0]
 800af32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af34:	79fb      	ldrb	r3, [r7, #7]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	4907      	ldr	r1, [pc, #28]	@ (800af5c <USBD_FS_ProductStrDescriptor+0x34>)
 800af3e:	4808      	ldr	r0, [pc, #32]	@ (800af60 <USBD_FS_ProductStrDescriptor+0x38>)
 800af40:	f7ff fcd1 	bl	800a8e6 <USBD_GetString>
 800af44:	e004      	b.n	800af50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4904      	ldr	r1, [pc, #16]	@ (800af5c <USBD_FS_ProductStrDescriptor+0x34>)
 800af4a:	4805      	ldr	r0, [pc, #20]	@ (800af60 <USBD_FS_ProductStrDescriptor+0x38>)
 800af4c:	f7ff fccb 	bl	800a8e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af50:	4b02      	ldr	r3, [pc, #8]	@ (800af5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20003368 	.word	0x20003368
 800af60:	0800f7b8 	.word	0x0800f7b8

0800af64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af70:	683a      	ldr	r2, [r7, #0]
 800af72:	4904      	ldr	r1, [pc, #16]	@ (800af84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af74:	4804      	ldr	r0, [pc, #16]	@ (800af88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af76:	f7ff fcb6 	bl	800a8e6 <USBD_GetString>
  return USBD_StrDesc;
 800af7a:	4b02      	ldr	r3, [pc, #8]	@ (800af84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20003368 	.word	0x20003368
 800af88:	0800f7d0 	.word	0x0800f7d0

0800af8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	6039      	str	r1, [r7, #0]
 800af96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	221a      	movs	r2, #26
 800af9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800af9e:	f000 f843 	bl	800b028 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afa2:	4b02      	ldr	r3, [pc, #8]	@ (800afac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	2000016c 	.word	0x2000016c

0800afb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	6039      	str	r1, [r7, #0]
 800afba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d105      	bne.n	800afce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afc2:	683a      	ldr	r2, [r7, #0]
 800afc4:	4907      	ldr	r1, [pc, #28]	@ (800afe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afc6:	4808      	ldr	r0, [pc, #32]	@ (800afe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afc8:	f7ff fc8d 	bl	800a8e6 <USBD_GetString>
 800afcc:	e004      	b.n	800afd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4904      	ldr	r1, [pc, #16]	@ (800afe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afd2:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afd4:	f7ff fc87 	bl	800a8e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afd8:	4b02      	ldr	r3, [pc, #8]	@ (800afe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20003368 	.word	0x20003368
 800afe8:	0800f7e4 	.word	0x0800f7e4

0800afec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d105      	bne.n	800b00a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4907      	ldr	r1, [pc, #28]	@ (800b020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b002:	4808      	ldr	r0, [pc, #32]	@ (800b024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b004:	f7ff fc6f 	bl	800a8e6 <USBD_GetString>
 800b008:	e004      	b.n	800b014 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4904      	ldr	r1, [pc, #16]	@ (800b020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b00e:	4805      	ldr	r0, [pc, #20]	@ (800b024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b010:	f7ff fc69 	bl	800a8e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b014:	4b02      	ldr	r3, [pc, #8]	@ (800b020 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b016:	4618      	mov	r0, r3
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20003368 	.word	0x20003368
 800b024:	0800f7f0 	.word	0x0800f7f0

0800b028 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b02e:	4b0f      	ldr	r3, [pc, #60]	@ (800b06c <Get_SerialNum+0x44>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b034:	4b0e      	ldr	r3, [pc, #56]	@ (800b070 <Get_SerialNum+0x48>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b03a:	4b0e      	ldr	r3, [pc, #56]	@ (800b074 <Get_SerialNum+0x4c>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4413      	add	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b04e:	2208      	movs	r2, #8
 800b050:	4909      	ldr	r1, [pc, #36]	@ (800b078 <Get_SerialNum+0x50>)
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f000 f814 	bl	800b080 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b058:	2204      	movs	r2, #4
 800b05a:	4908      	ldr	r1, [pc, #32]	@ (800b07c <Get_SerialNum+0x54>)
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	f000 f80f 	bl	800b080 <IntToUnicode>
  }
}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	1ffff7e8 	.word	0x1ffff7e8
 800b070:	1ffff7ec 	.word	0x1ffff7ec
 800b074:	1ffff7f0 	.word	0x1ffff7f0
 800b078:	2000016e 	.word	0x2000016e
 800b07c:	2000017e 	.word	0x2000017e

0800b080 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b092:	2300      	movs	r3, #0
 800b094:	75fb      	strb	r3, [r7, #23]
 800b096:	e027      	b.n	800b0e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	0f1b      	lsrs	r3, r3, #28
 800b09c:	2b09      	cmp	r3, #9
 800b09e:	d80b      	bhi.n	800b0b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	0f1b      	lsrs	r3, r3, #28
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3230      	adds	r2, #48	@ 0x30
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	701a      	strb	r2, [r3, #0]
 800b0b6:	e00a      	b.n	800b0ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	0f1b      	lsrs	r3, r3, #28
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	440b      	add	r3, r1
 800b0c8:	3237      	adds	r2, #55	@ 0x37
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	3301      	adds	r3, #1
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	4413      	add	r3, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	75fb      	strb	r3, [r7, #23]
 800b0e8:	7dfa      	ldrb	r2, [r7, #23]
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d3d3      	bcc.n	800b098 <IntToUnicode+0x18>
  }
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	371c      	adds	r7, #28
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bc80      	pop	{r7}
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a0d      	ldr	r2, [pc, #52]	@ (800b140 <HAL_PCD_MspInit+0x44>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d113      	bne.n	800b136 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b10e:	4b0d      	ldr	r3, [pc, #52]	@ (800b144 <HAL_PCD_MspInit+0x48>)
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	4a0c      	ldr	r2, [pc, #48]	@ (800b144 <HAL_PCD_MspInit+0x48>)
 800b114:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b118:	61d3      	str	r3, [r2, #28]
 800b11a:	4b0a      	ldr	r3, [pc, #40]	@ (800b144 <HAL_PCD_MspInit+0x48>)
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b126:	2200      	movs	r2, #0
 800b128:	2100      	movs	r1, #0
 800b12a:	2014      	movs	r0, #20
 800b12c:	f7f9 f9d7 	bl	80044de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b130:	2014      	movs	r0, #20
 800b132:	f7f9 f9f0 	bl	8004516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b136:	bf00      	nop
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	40005c00 	.word	0x40005c00
 800b144:	40021000 	.word	0x40021000

0800b148 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b15c:	4619      	mov	r1, r3
 800b15e:	4610      	mov	r0, r2
 800b160:	f7fe fc93 	bl	8009a8a <USBD_LL_SetupStage>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	00db      	lsls	r3, r3, #3
 800b18a:	440b      	add	r3, r1
 800b18c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	4619      	mov	r1, r3
 800b196:	f7fe fcc5 	bl	8009b24 <USBD_LL_DataOutStage>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	440b      	add	r3, r1
 800b1c2:	3324      	adds	r3, #36	@ 0x24
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	78fb      	ldrb	r3, [r7, #3]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f7fe fd1c 	bl	8009c06 <USBD_LL_DataInStage>
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fe2c 	bl	8009e42 <USBD_LL_SOF>
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	799b      	ldrb	r3, [r3, #6]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d001      	beq.n	800b20a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b206:	f7f8 feb1 	bl	8003f6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b210:	7bfa      	ldrb	r2, [r7, #15]
 800b212:	4611      	mov	r1, r2
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fddc 	bl	8009dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fd95 	bl	8009d50 <USBD_LL_Reset>
}
 800b226:	bf00      	nop
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fdd6 	bl	8009df0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7a9b      	ldrb	r3, [r3, #10]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b24c:	4b04      	ldr	r3, [pc, #16]	@ (800b260 <HAL_PCD_SuspendCallback+0x30>)
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	4a03      	ldr	r2, [pc, #12]	@ (800b260 <HAL_PCD_SuspendCallback+0x30>)
 800b252:	f043 0306 	orr.w	r3, r3, #6
 800b256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	e000ed00 	.word	0xe000ed00

0800b264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fdd0 	bl	8009e18 <USBD_LL_Resume>
}
 800b278:	bf00      	nop
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b288:	4a28      	ldr	r2, [pc, #160]	@ (800b32c <USBD_LL_Init+0xac>)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a26      	ldr	r2, [pc, #152]	@ (800b32c <USBD_LL_Init+0xac>)
 800b294:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b298:	4b24      	ldr	r3, [pc, #144]	@ (800b32c <USBD_LL_Init+0xac>)
 800b29a:	4a25      	ldr	r2, [pc, #148]	@ (800b330 <USBD_LL_Init+0xb0>)
 800b29c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b29e:	4b23      	ldr	r3, [pc, #140]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b2a4:	4b21      	ldr	r3, [pc, #132]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b2aa:	4b20      	ldr	r3, [pc, #128]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b2b0:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b2bc:	481b      	ldr	r0, [pc, #108]	@ (800b32c <USBD_LL_Init+0xac>)
 800b2be:	f7f9 faf8 	bl	80048b2 <HAL_PCD_Init>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b2c8:	f7f8 fe50 	bl	8003f6c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2d2:	2318      	movs	r3, #24
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	f7fb f809 	bl	80062ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2e2:	2358      	movs	r3, #88	@ 0x58
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2180      	movs	r1, #128	@ 0x80
 800b2e8:	f7fb f801 	bl	80062ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2f2:	23c0      	movs	r3, #192	@ 0xc0
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2181      	movs	r1, #129	@ 0x81
 800b2f8:	f7fa fff9 	bl	80062ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b302:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b306:	2200      	movs	r2, #0
 800b308:	2101      	movs	r1, #1
 800b30a:	f7fa fff0 	bl	80062ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b318:	2200      	movs	r2, #0
 800b31a:	2182      	movs	r1, #130	@ 0x82
 800b31c:	f7fa ffe7 	bl	80062ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20003568 	.word	0x20003568
 800b330:	40005c00 	.word	0x40005c00

0800b334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f9 fba7 	bl	8004a9e <HAL_PCD_Start>
 800b350:	4603      	mov	r3, r0
 800b352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b354:	7bfb      	ldrb	r3, [r7, #15]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f94e 	bl	800b5f8 <USBD_Get_USB_Status>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b360:	7bbb      	ldrb	r3, [r7, #14]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	461a      	mov	r2, r3
 800b378:	4603      	mov	r3, r0
 800b37a:	70fb      	strb	r3, [r7, #3]
 800b37c:	460b      	mov	r3, r1
 800b37e:	70bb      	strb	r3, [r7, #2]
 800b380:	4613      	mov	r3, r2
 800b382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b392:	78bb      	ldrb	r3, [r7, #2]
 800b394:	883a      	ldrh	r2, [r7, #0]
 800b396:	78f9      	ldrb	r1, [r7, #3]
 800b398:	f7f9 fcfb 	bl	8004d92 <HAL_PCD_EP_Open>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f000 f928 	bl	800b5f8 <USBD_Get_USB_Status>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3d0:	78fa      	ldrb	r2, [r7, #3]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7f9 fd39 	bl	8004e4c <HAL_PCD_EP_Close>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 f909 	bl	800b5f8 <USBD_Get_USB_Status>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b40e:	78fa      	ldrb	r2, [r7, #3]
 800b410:	4611      	mov	r1, r2
 800b412:	4618      	mov	r0, r3
 800b414:	f7f9 fde1 	bl	8004fda <HAL_PCD_EP_SetStall>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f8ea 	bl	800b5f8 <USBD_Get_USB_Status>
 800b424:	4603      	mov	r3, r0
 800b426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b428:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	460b      	mov	r3, r1
 800b43c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7f9 fe22 	bl	800509a <HAL_PCD_EP_ClrStall>
 800b456:	4603      	mov	r3, r0
 800b458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f000 f8cb 	bl	800b5f8 <USBD_Get_USB_Status>
 800b462:	4603      	mov	r3, r0
 800b464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b466:	7bbb      	ldrb	r3, [r7, #14]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b482:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	da0b      	bge.n	800b4a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b48c:	78fb      	ldrb	r3, [r7, #3]
 800b48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	4613      	mov	r3, r2
 800b496:	009b      	lsls	r3, r3, #2
 800b498:	4413      	add	r3, r2
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	440b      	add	r3, r1
 800b49e:	3312      	adds	r3, #18
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	e00b      	b.n	800b4bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	440b      	add	r3, r1
 800b4b6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b4ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bc80      	pop	{r7}
 800b4c4:	4770      	bx	lr

0800b4c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b4e0:	78fa      	ldrb	r2, [r7, #3]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f9 fc30 	bl	8004d4a <HAL_PCD_SetAddress>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f881 	bl	800b5f8 <USBD_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	607a      	str	r2, [r7, #4]
 800b50e:	461a      	mov	r2, r3
 800b510:	460b      	mov	r3, r1
 800b512:	72fb      	strb	r3, [r7, #11]
 800b514:	4613      	mov	r3, r2
 800b516:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b526:	893b      	ldrh	r3, [r7, #8]
 800b528:	7af9      	ldrb	r1, [r7, #11]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f7f9 fd1e 	bl	8004f6c <HAL_PCD_EP_Transmit>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	4618      	mov	r0, r3
 800b538:	f000 f85e 	bl	800b5f8 <USBD_Get_USB_Status>
 800b53c:	4603      	mov	r3, r0
 800b53e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b540:	7dbb      	ldrb	r3, [r7, #22]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3718      	adds	r7, #24
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b086      	sub	sp, #24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	461a      	mov	r2, r3
 800b556:	460b      	mov	r3, r1
 800b558:	72fb      	strb	r3, [r7, #11]
 800b55a:	4613      	mov	r3, r2
 800b55c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b56c:	893b      	ldrh	r3, [r7, #8]
 800b56e:	7af9      	ldrb	r1, [r7, #11]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	f7f9 fcb3 	bl	8004edc <HAL_PCD_EP_Receive>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f83b 	bl	800b5f8 <USBD_Get_USB_Status>
 800b582:	4603      	mov	r3, r0
 800b584:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b586:	7dbb      	ldrb	r3, [r7, #22]
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5a2:	78fa      	ldrb	r2, [r7, #3]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7f9 fcc9 	bl	8004f3e <HAL_PCD_EP_GetRxCount>
 800b5ac:	4603      	mov	r3, r0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
	...

0800b5b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b5c0:	4b02      	ldr	r3, [pc, #8]	@ (800b5cc <USBD_static_malloc+0x14>)
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bc80      	pop	{r7}
 800b5ca:	4770      	bx	lr
 800b5cc:	20003840 	.word	0x20003840

0800b5d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]

}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bc80      	pop	{r7}
 800b5e0:	4770      	bx	lr

0800b5e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b5ee:	bf00      	nop
 800b5f0:	370c      	adds	r7, #12
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bc80      	pop	{r7}
 800b5f6:	4770      	bx	lr

0800b5f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d817      	bhi.n	800b63c <USBD_Get_USB_Status+0x44>
 800b60c:	a201      	add	r2, pc, #4	@ (adr r2, 800b614 <USBD_Get_USB_Status+0x1c>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b625 	.word	0x0800b625
 800b618:	0800b62b 	.word	0x0800b62b
 800b61c:	0800b631 	.word	0x0800b631
 800b620:	0800b637 	.word	0x0800b637
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
    break;
 800b628:	e00b      	b.n	800b642 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b62a:	2302      	movs	r3, #2
 800b62c:	73fb      	strb	r3, [r7, #15]
    break;
 800b62e:	e008      	b.n	800b642 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b630:	2301      	movs	r3, #1
 800b632:	73fb      	strb	r3, [r7, #15]
    break;
 800b634:	e005      	b.n	800b642 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b636:	2302      	movs	r3, #2
 800b638:	73fb      	strb	r3, [r7, #15]
    break;
 800b63a:	e002      	b.n	800b642 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b63c:	2302      	movs	r3, #2
 800b63e:	73fb      	strb	r3, [r7, #15]
    break;
 800b640:	bf00      	nop
  }
  return usb_status;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bc80      	pop	{r7}
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop

0800b650 <atof>:
 800b650:	2100      	movs	r1, #0
 800b652:	f000 bdf9 	b.w	800c248 <strtod>

0800b656 <sulp>:
 800b656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b65a:	460f      	mov	r7, r1
 800b65c:	4690      	mov	r8, r2
 800b65e:	f001 ffbf 	bl	800d5e0 <__ulp>
 800b662:	4604      	mov	r4, r0
 800b664:	460d      	mov	r5, r1
 800b666:	f1b8 0f00 	cmp.w	r8, #0
 800b66a:	d011      	beq.n	800b690 <sulp+0x3a>
 800b66c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b670:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b674:	2b00      	cmp	r3, #0
 800b676:	dd0b      	ble.n	800b690 <sulp+0x3a>
 800b678:	2400      	movs	r4, #0
 800b67a:	051b      	lsls	r3, r3, #20
 800b67c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b680:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b684:	4622      	mov	r2, r4
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 ff26 	bl	80004d8 <__aeabi_dmul>
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b698 <_strtod_l>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	b09f      	sub	sp, #124	@ 0x7c
 800b69e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b6a6:	f04f 0a00 	mov.w	sl, #0
 800b6aa:	f04f 0b00 	mov.w	fp, #0
 800b6ae:	460a      	mov	r2, r1
 800b6b0:	9005      	str	r0, [sp, #20]
 800b6b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6b4:	7811      	ldrb	r1, [r2, #0]
 800b6b6:	292b      	cmp	r1, #43	@ 0x2b
 800b6b8:	d048      	beq.n	800b74c <_strtod_l+0xb4>
 800b6ba:	d836      	bhi.n	800b72a <_strtod_l+0x92>
 800b6bc:	290d      	cmp	r1, #13
 800b6be:	d830      	bhi.n	800b722 <_strtod_l+0x8a>
 800b6c0:	2908      	cmp	r1, #8
 800b6c2:	d830      	bhi.n	800b726 <_strtod_l+0x8e>
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	d039      	beq.n	800b73c <_strtod_l+0xa4>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b6ce:	782a      	ldrb	r2, [r5, #0]
 800b6d0:	2a30      	cmp	r2, #48	@ 0x30
 800b6d2:	f040 80b0 	bne.w	800b836 <_strtod_l+0x19e>
 800b6d6:	786a      	ldrb	r2, [r5, #1]
 800b6d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b6dc:	2a58      	cmp	r2, #88	@ 0x58
 800b6de:	d16c      	bne.n	800b7ba <_strtod_l+0x122>
 800b6e0:	9302      	str	r3, [sp, #8]
 800b6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6e4:	4a8f      	ldr	r2, [pc, #572]	@ (800b924 <_strtod_l+0x28c>)
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	ab1a      	add	r3, sp, #104	@ 0x68
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	9805      	ldr	r0, [sp, #20]
 800b6ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b6f0:	a919      	add	r1, sp, #100	@ 0x64
 800b6f2:	f001 f877 	bl	800c7e4 <__gethex>
 800b6f6:	f010 060f 	ands.w	r6, r0, #15
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	d005      	beq.n	800b70a <_strtod_l+0x72>
 800b6fe:	2e06      	cmp	r6, #6
 800b700:	d126      	bne.n	800b750 <_strtod_l+0xb8>
 800b702:	2300      	movs	r3, #0
 800b704:	3501      	adds	r5, #1
 800b706:	9519      	str	r5, [sp, #100]	@ 0x64
 800b708:	930e      	str	r3, [sp, #56]	@ 0x38
 800b70a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f040 8582 	bne.w	800c216 <_strtod_l+0xb7e>
 800b712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b714:	b1bb      	cbz	r3, 800b746 <_strtod_l+0xae>
 800b716:	4650      	mov	r0, sl
 800b718:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b71c:	b01f      	add	sp, #124	@ 0x7c
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	2920      	cmp	r1, #32
 800b724:	d1d0      	bne.n	800b6c8 <_strtod_l+0x30>
 800b726:	3201      	adds	r2, #1
 800b728:	e7c3      	b.n	800b6b2 <_strtod_l+0x1a>
 800b72a:	292d      	cmp	r1, #45	@ 0x2d
 800b72c:	d1cc      	bne.n	800b6c8 <_strtod_l+0x30>
 800b72e:	2101      	movs	r1, #1
 800b730:	910e      	str	r1, [sp, #56]	@ 0x38
 800b732:	1c51      	adds	r1, r2, #1
 800b734:	9119      	str	r1, [sp, #100]	@ 0x64
 800b736:	7852      	ldrb	r2, [r2, #1]
 800b738:	2a00      	cmp	r2, #0
 800b73a:	d1c7      	bne.n	800b6cc <_strtod_l+0x34>
 800b73c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b73e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 8566 	bne.w	800c212 <_strtod_l+0xb7a>
 800b746:	4650      	mov	r0, sl
 800b748:	4659      	mov	r1, fp
 800b74a:	e7e7      	b.n	800b71c <_strtod_l+0x84>
 800b74c:	2100      	movs	r1, #0
 800b74e:	e7ef      	b.n	800b730 <_strtod_l+0x98>
 800b750:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b752:	b13a      	cbz	r2, 800b764 <_strtod_l+0xcc>
 800b754:	2135      	movs	r1, #53	@ 0x35
 800b756:	a81c      	add	r0, sp, #112	@ 0x70
 800b758:	f002 f832 	bl	800d7c0 <__copybits>
 800b75c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b75e:	9805      	ldr	r0, [sp, #20]
 800b760:	f001 fc12 	bl	800cf88 <_Bfree>
 800b764:	3e01      	subs	r6, #1
 800b766:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b768:	2e04      	cmp	r6, #4
 800b76a:	d806      	bhi.n	800b77a <_strtod_l+0xe2>
 800b76c:	e8df f006 	tbb	[pc, r6]
 800b770:	201d0314 	.word	0x201d0314
 800b774:	14          	.byte	0x14
 800b775:	00          	.byte	0x00
 800b776:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b77a:	05e1      	lsls	r1, r4, #23
 800b77c:	bf48      	it	mi
 800b77e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b782:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b786:	0d1b      	lsrs	r3, r3, #20
 800b788:	051b      	lsls	r3, r3, #20
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1bd      	bne.n	800b70a <_strtod_l+0x72>
 800b78e:	f000 ff37 	bl	800c600 <__errno>
 800b792:	2322      	movs	r3, #34	@ 0x22
 800b794:	6003      	str	r3, [r0, #0]
 800b796:	e7b8      	b.n	800b70a <_strtod_l+0x72>
 800b798:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b79c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b7a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b7a4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b7a8:	e7e7      	b.n	800b77a <_strtod_l+0xe2>
 800b7aa:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b928 <_strtod_l+0x290>
 800b7ae:	e7e4      	b.n	800b77a <_strtod_l+0xe2>
 800b7b0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b7b4:	f04f 3aff 	mov.w	sl, #4294967295
 800b7b8:	e7df      	b.n	800b77a <_strtod_l+0xe2>
 800b7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	2b30      	cmp	r3, #48	@ 0x30
 800b7c4:	d0f9      	beq.n	800b7ba <_strtod_l+0x122>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d09f      	beq.n	800b70a <_strtod_l+0x72>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	2700      	movs	r7, #0
 800b7ce:	220a      	movs	r2, #10
 800b7d0:	46b9      	mov	r9, r7
 800b7d2:	9308      	str	r3, [sp, #32]
 800b7d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7d6:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b7d8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b7da:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b7dc:	7805      	ldrb	r5, [r0, #0]
 800b7de:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b7e2:	b2d9      	uxtb	r1, r3
 800b7e4:	2909      	cmp	r1, #9
 800b7e6:	d928      	bls.n	800b83a <_strtod_l+0x1a2>
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	4950      	ldr	r1, [pc, #320]	@ (800b92c <_strtod_l+0x294>)
 800b7ec:	f000 fe9d 	bl	800c52a <strncmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d032      	beq.n	800b85a <_strtod_l+0x1c2>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	464d      	mov	r5, r9
 800b7fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b7fe:	2a65      	cmp	r2, #101	@ 0x65
 800b800:	d001      	beq.n	800b806 <_strtod_l+0x16e>
 800b802:	2a45      	cmp	r2, #69	@ 0x45
 800b804:	d114      	bne.n	800b830 <_strtod_l+0x198>
 800b806:	b91d      	cbnz	r5, 800b810 <_strtod_l+0x178>
 800b808:	9a08      	ldr	r2, [sp, #32]
 800b80a:	4302      	orrs	r2, r0
 800b80c:	d096      	beq.n	800b73c <_strtod_l+0xa4>
 800b80e:	2500      	movs	r5, #0
 800b810:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b812:	1c62      	adds	r2, r4, #1
 800b814:	9219      	str	r2, [sp, #100]	@ 0x64
 800b816:	7862      	ldrb	r2, [r4, #1]
 800b818:	2a2b      	cmp	r2, #43	@ 0x2b
 800b81a:	d07a      	beq.n	800b912 <_strtod_l+0x27a>
 800b81c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b81e:	d07e      	beq.n	800b91e <_strtod_l+0x286>
 800b820:	f04f 0c00 	mov.w	ip, #0
 800b824:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b828:	2909      	cmp	r1, #9
 800b82a:	f240 8085 	bls.w	800b938 <_strtod_l+0x2a0>
 800b82e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b830:	f04f 0800 	mov.w	r8, #0
 800b834:	e0a5      	b.n	800b982 <_strtod_l+0x2ea>
 800b836:	2300      	movs	r3, #0
 800b838:	e7c8      	b.n	800b7cc <_strtod_l+0x134>
 800b83a:	f1b9 0f08 	cmp.w	r9, #8
 800b83e:	bfd8      	it	le
 800b840:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b842:	f100 0001 	add.w	r0, r0, #1
 800b846:	bfd6      	itet	le
 800b848:	fb02 3301 	mlale	r3, r2, r1, r3
 800b84c:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b850:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b852:	f109 0901 	add.w	r9, r9, #1
 800b856:	9019      	str	r0, [sp, #100]	@ 0x64
 800b858:	e7bf      	b.n	800b7da <_strtod_l+0x142>
 800b85a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b860:	785a      	ldrb	r2, [r3, #1]
 800b862:	f1b9 0f00 	cmp.w	r9, #0
 800b866:	d03b      	beq.n	800b8e0 <_strtod_l+0x248>
 800b868:	464d      	mov	r5, r9
 800b86a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b86c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b870:	2b09      	cmp	r3, #9
 800b872:	d912      	bls.n	800b89a <_strtod_l+0x202>
 800b874:	2301      	movs	r3, #1
 800b876:	e7c2      	b.n	800b7fe <_strtod_l+0x166>
 800b878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b87a:	3001      	adds	r0, #1
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b880:	785a      	ldrb	r2, [r3, #1]
 800b882:	2a30      	cmp	r2, #48	@ 0x30
 800b884:	d0f8      	beq.n	800b878 <_strtod_l+0x1e0>
 800b886:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b88a:	2b08      	cmp	r3, #8
 800b88c:	f200 84c8 	bhi.w	800c220 <_strtod_l+0xb88>
 800b890:	900a      	str	r0, [sp, #40]	@ 0x28
 800b892:	2000      	movs	r0, #0
 800b894:	4605      	mov	r5, r0
 800b896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b898:	930c      	str	r3, [sp, #48]	@ 0x30
 800b89a:	3a30      	subs	r2, #48	@ 0x30
 800b89c:	f100 0301 	add.w	r3, r0, #1
 800b8a0:	d018      	beq.n	800b8d4 <_strtod_l+0x23c>
 800b8a2:	462e      	mov	r6, r5
 800b8a4:	f04f 0e0a 	mov.w	lr, #10
 800b8a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8aa:	4419      	add	r1, r3
 800b8ac:	910a      	str	r1, [sp, #40]	@ 0x28
 800b8ae:	1c71      	adds	r1, r6, #1
 800b8b0:	eba1 0c05 	sub.w	ip, r1, r5
 800b8b4:	4563      	cmp	r3, ip
 800b8b6:	dc15      	bgt.n	800b8e4 <_strtod_l+0x24c>
 800b8b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b8bc:	182b      	adds	r3, r5, r0
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	f105 0501 	add.w	r5, r5, #1
 800b8c4:	4405      	add	r5, r0
 800b8c6:	dc1a      	bgt.n	800b8fe <_strtod_l+0x266>
 800b8c8:	230a      	movs	r3, #10
 800b8ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8cc:	fb03 2301 	mla	r3, r3, r1, r2
 800b8d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	1c51      	adds	r1, r2, #1
 800b8da:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8dc:	7852      	ldrb	r2, [r2, #1]
 800b8de:	e7c5      	b.n	800b86c <_strtod_l+0x1d4>
 800b8e0:	4648      	mov	r0, r9
 800b8e2:	e7ce      	b.n	800b882 <_strtod_l+0x1ea>
 800b8e4:	2e08      	cmp	r6, #8
 800b8e6:	dc05      	bgt.n	800b8f4 <_strtod_l+0x25c>
 800b8e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b8ea:	fb0e f606 	mul.w	r6, lr, r6
 800b8ee:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	e7dc      	b.n	800b8ae <_strtod_l+0x216>
 800b8f4:	2910      	cmp	r1, #16
 800b8f6:	bfd8      	it	le
 800b8f8:	fb0e f707 	mulle.w	r7, lr, r7
 800b8fc:	e7f8      	b.n	800b8f0 <_strtod_l+0x258>
 800b8fe:	2b0f      	cmp	r3, #15
 800b900:	bfdc      	itt	le
 800b902:	230a      	movle	r3, #10
 800b904:	fb03 2707 	mlale	r7, r3, r7, r2
 800b908:	e7e3      	b.n	800b8d2 <_strtod_l+0x23a>
 800b90a:	2300      	movs	r3, #0
 800b90c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b90e:	2301      	movs	r3, #1
 800b910:	e77a      	b.n	800b808 <_strtod_l+0x170>
 800b912:	f04f 0c00 	mov.w	ip, #0
 800b916:	1ca2      	adds	r2, r4, #2
 800b918:	9219      	str	r2, [sp, #100]	@ 0x64
 800b91a:	78a2      	ldrb	r2, [r4, #2]
 800b91c:	e782      	b.n	800b824 <_strtod_l+0x18c>
 800b91e:	f04f 0c01 	mov.w	ip, #1
 800b922:	e7f8      	b.n	800b916 <_strtod_l+0x27e>
 800b924:	0800f99c 	.word	0x0800f99c
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	0800f822 	.word	0x0800f822
 800b930:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b932:	1c51      	adds	r1, r2, #1
 800b934:	9119      	str	r1, [sp, #100]	@ 0x64
 800b936:	7852      	ldrb	r2, [r2, #1]
 800b938:	2a30      	cmp	r2, #48	@ 0x30
 800b93a:	d0f9      	beq.n	800b930 <_strtod_l+0x298>
 800b93c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b940:	2908      	cmp	r1, #8
 800b942:	f63f af75 	bhi.w	800b830 <_strtod_l+0x198>
 800b946:	f04f 080a 	mov.w	r8, #10
 800b94a:	3a30      	subs	r2, #48	@ 0x30
 800b94c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b94e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b950:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b952:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b954:	1c56      	adds	r6, r2, #1
 800b956:	9619      	str	r6, [sp, #100]	@ 0x64
 800b958:	7852      	ldrb	r2, [r2, #1]
 800b95a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b95e:	f1be 0f09 	cmp.w	lr, #9
 800b962:	d939      	bls.n	800b9d8 <_strtod_l+0x340>
 800b964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b966:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b96a:	1a76      	subs	r6, r6, r1
 800b96c:	2e08      	cmp	r6, #8
 800b96e:	dc03      	bgt.n	800b978 <_strtod_l+0x2e0>
 800b970:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b972:	4588      	cmp	r8, r1
 800b974:	bfa8      	it	ge
 800b976:	4688      	movge	r8, r1
 800b978:	f1bc 0f00 	cmp.w	ip, #0
 800b97c:	d001      	beq.n	800b982 <_strtod_l+0x2ea>
 800b97e:	f1c8 0800 	rsb	r8, r8, #0
 800b982:	2d00      	cmp	r5, #0
 800b984:	d14e      	bne.n	800ba24 <_strtod_l+0x38c>
 800b986:	9908      	ldr	r1, [sp, #32]
 800b988:	4308      	orrs	r0, r1
 800b98a:	f47f aebe 	bne.w	800b70a <_strtod_l+0x72>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f47f aed4 	bne.w	800b73c <_strtod_l+0xa4>
 800b994:	2a69      	cmp	r2, #105	@ 0x69
 800b996:	d028      	beq.n	800b9ea <_strtod_l+0x352>
 800b998:	dc25      	bgt.n	800b9e6 <_strtod_l+0x34e>
 800b99a:	2a49      	cmp	r2, #73	@ 0x49
 800b99c:	d025      	beq.n	800b9ea <_strtod_l+0x352>
 800b99e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b9a0:	f47f aecc 	bne.w	800b73c <_strtod_l+0xa4>
 800b9a4:	4999      	ldr	r1, [pc, #612]	@ (800bc0c <_strtod_l+0x574>)
 800b9a6:	a819      	add	r0, sp, #100	@ 0x64
 800b9a8:	f001 f93e 	bl	800cc28 <__match>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	f43f aec5 	beq.w	800b73c <_strtod_l+0xa4>
 800b9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b28      	cmp	r3, #40	@ 0x28
 800b9b8:	d12e      	bne.n	800ba18 <_strtod_l+0x380>
 800b9ba:	4995      	ldr	r1, [pc, #596]	@ (800bc10 <_strtod_l+0x578>)
 800b9bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800b9be:	a819      	add	r0, sp, #100	@ 0x64
 800b9c0:	f001 f946 	bl	800cc50 <__hexnan>
 800b9c4:	2805      	cmp	r0, #5
 800b9c6:	d127      	bne.n	800ba18 <_strtod_l+0x380>
 800b9c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b9ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b9ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b9d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b9d6:	e698      	b.n	800b70a <_strtod_l+0x72>
 800b9d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9da:	fb08 2101 	mla	r1, r8, r1, r2
 800b9de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b9e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9e4:	e7b5      	b.n	800b952 <_strtod_l+0x2ba>
 800b9e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b9e8:	e7da      	b.n	800b9a0 <_strtod_l+0x308>
 800b9ea:	498a      	ldr	r1, [pc, #552]	@ (800bc14 <_strtod_l+0x57c>)
 800b9ec:	a819      	add	r0, sp, #100	@ 0x64
 800b9ee:	f001 f91b 	bl	800cc28 <__match>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	f43f aea2 	beq.w	800b73c <_strtod_l+0xa4>
 800b9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9fa:	4987      	ldr	r1, [pc, #540]	@ (800bc18 <_strtod_l+0x580>)
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	a819      	add	r0, sp, #100	@ 0x64
 800ba00:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba02:	f001 f911 	bl	800cc28 <__match>
 800ba06:	b910      	cbnz	r0, 800ba0e <_strtod_l+0x376>
 800ba08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba0e:	f04f 0a00 	mov.w	sl, #0
 800ba12:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800bc1c <_strtod_l+0x584>
 800ba16:	e678      	b.n	800b70a <_strtod_l+0x72>
 800ba18:	4881      	ldr	r0, [pc, #516]	@ (800bc20 <_strtod_l+0x588>)
 800ba1a:	f000 fe2d 	bl	800c678 <nan>
 800ba1e:	4682      	mov	sl, r0
 800ba20:	468b      	mov	fp, r1
 800ba22:	e672      	b.n	800b70a <_strtod_l+0x72>
 800ba24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba26:	f1b9 0f00 	cmp.w	r9, #0
 800ba2a:	bf08      	it	eq
 800ba2c:	46a9      	moveq	r9, r5
 800ba2e:	eba8 0303 	sub.w	r3, r8, r3
 800ba32:	2d10      	cmp	r5, #16
 800ba34:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ba36:	462c      	mov	r4, r5
 800ba38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba3a:	bfa8      	it	ge
 800ba3c:	2410      	movge	r4, #16
 800ba3e:	f7f4 fcd1 	bl	80003e4 <__aeabi_ui2d>
 800ba42:	2d09      	cmp	r5, #9
 800ba44:	4682      	mov	sl, r0
 800ba46:	468b      	mov	fp, r1
 800ba48:	dc11      	bgt.n	800ba6e <_strtod_l+0x3d6>
 800ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f43f ae5c 	beq.w	800b70a <_strtod_l+0x72>
 800ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba54:	dd76      	ble.n	800bb44 <_strtod_l+0x4ac>
 800ba56:	2b16      	cmp	r3, #22
 800ba58:	dc5d      	bgt.n	800bb16 <_strtod_l+0x47e>
 800ba5a:	4972      	ldr	r1, [pc, #456]	@ (800bc24 <_strtod_l+0x58c>)
 800ba5c:	4652      	mov	r2, sl
 800ba5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba62:	465b      	mov	r3, fp
 800ba64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	e7d7      	b.n	800ba1e <_strtod_l+0x386>
 800ba6e:	4b6d      	ldr	r3, [pc, #436]	@ (800bc24 <_strtod_l+0x58c>)
 800ba70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ba78:	f7f4 fd2e 	bl	80004d8 <__aeabi_dmul>
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	4638      	mov	r0, r7
 800ba80:	468b      	mov	fp, r1
 800ba82:	f7f4 fcaf 	bl	80003e4 <__aeabi_ui2d>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	4659      	mov	r1, fp
 800ba8e:	f7f4 fb6d 	bl	800016c <__adddf3>
 800ba92:	2d0f      	cmp	r5, #15
 800ba94:	4682      	mov	sl, r0
 800ba96:	468b      	mov	fp, r1
 800ba98:	ddd7      	ble.n	800ba4a <_strtod_l+0x3b2>
 800ba9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9c:	1b2c      	subs	r4, r5, r4
 800ba9e:	441c      	add	r4, r3
 800baa0:	2c00      	cmp	r4, #0
 800baa2:	f340 8093 	ble.w	800bbcc <_strtod_l+0x534>
 800baa6:	f014 030f 	ands.w	r3, r4, #15
 800baaa:	d00a      	beq.n	800bac2 <_strtod_l+0x42a>
 800baac:	495d      	ldr	r1, [pc, #372]	@ (800bc24 <_strtod_l+0x58c>)
 800baae:	4652      	mov	r2, sl
 800bab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bab8:	465b      	mov	r3, fp
 800baba:	f7f4 fd0d 	bl	80004d8 <__aeabi_dmul>
 800babe:	4682      	mov	sl, r0
 800bac0:	468b      	mov	fp, r1
 800bac2:	f034 040f 	bics.w	r4, r4, #15
 800bac6:	d073      	beq.n	800bbb0 <_strtod_l+0x518>
 800bac8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bacc:	dd49      	ble.n	800bb62 <_strtod_l+0x4ca>
 800bace:	2400      	movs	r4, #0
 800bad0:	46a0      	mov	r8, r4
 800bad2:	46a1      	mov	r9, r4
 800bad4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bad6:	2322      	movs	r3, #34	@ 0x22
 800bad8:	f04f 0a00 	mov.w	sl, #0
 800badc:	9a05      	ldr	r2, [sp, #20]
 800bade:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800bc1c <_strtod_l+0x584>
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f43f ae0f 	beq.w	800b70a <_strtod_l+0x72>
 800baec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baee:	9805      	ldr	r0, [sp, #20]
 800baf0:	f001 fa4a 	bl	800cf88 <_Bfree>
 800baf4:	4649      	mov	r1, r9
 800baf6:	9805      	ldr	r0, [sp, #20]
 800baf8:	f001 fa46 	bl	800cf88 <_Bfree>
 800bafc:	4641      	mov	r1, r8
 800bafe:	9805      	ldr	r0, [sp, #20]
 800bb00:	f001 fa42 	bl	800cf88 <_Bfree>
 800bb04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb06:	9805      	ldr	r0, [sp, #20]
 800bb08:	f001 fa3e 	bl	800cf88 <_Bfree>
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	9805      	ldr	r0, [sp, #20]
 800bb10:	f001 fa3a 	bl	800cf88 <_Bfree>
 800bb14:	e5f9      	b.n	800b70a <_strtod_l+0x72>
 800bb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	dbbc      	blt.n	800ba9a <_strtod_l+0x402>
 800bb20:	4c40      	ldr	r4, [pc, #256]	@ (800bc24 <_strtod_l+0x58c>)
 800bb22:	f1c5 050f 	rsb	r5, r5, #15
 800bb26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb30:	465b      	mov	r3, fp
 800bb32:	f7f4 fcd1 	bl	80004d8 <__aeabi_dmul>
 800bb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb38:	1b5d      	subs	r5, r3, r5
 800bb3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb42:	e791      	b.n	800ba68 <_strtod_l+0x3d0>
 800bb44:	3316      	adds	r3, #22
 800bb46:	dba8      	blt.n	800ba9a <_strtod_l+0x402>
 800bb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb4a:	4650      	mov	r0, sl
 800bb4c:	eba3 0808 	sub.w	r8, r3, r8
 800bb50:	4b34      	ldr	r3, [pc, #208]	@ (800bc24 <_strtod_l+0x58c>)
 800bb52:	4659      	mov	r1, fp
 800bb54:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bb58:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bb5c:	f7f4 fde6 	bl	800072c <__aeabi_ddiv>
 800bb60:	e75d      	b.n	800ba1e <_strtod_l+0x386>
 800bb62:	2300      	movs	r3, #0
 800bb64:	4650      	mov	r0, sl
 800bb66:	4659      	mov	r1, fp
 800bb68:	461e      	mov	r6, r3
 800bb6a:	4f2f      	ldr	r7, [pc, #188]	@ (800bc28 <_strtod_l+0x590>)
 800bb6c:	1124      	asrs	r4, r4, #4
 800bb6e:	2c01      	cmp	r4, #1
 800bb70:	dc21      	bgt.n	800bbb6 <_strtod_l+0x51e>
 800bb72:	b10b      	cbz	r3, 800bb78 <_strtod_l+0x4e0>
 800bb74:	4682      	mov	sl, r0
 800bb76:	468b      	mov	fp, r1
 800bb78:	492b      	ldr	r1, [pc, #172]	@ (800bc28 <_strtod_l+0x590>)
 800bb7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bb7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bb82:	4652      	mov	r2, sl
 800bb84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb88:	465b      	mov	r3, fp
 800bb8a:	f7f4 fca5 	bl	80004d8 <__aeabi_dmul>
 800bb8e:	4b23      	ldr	r3, [pc, #140]	@ (800bc1c <_strtod_l+0x584>)
 800bb90:	460a      	mov	r2, r1
 800bb92:	400b      	ands	r3, r1
 800bb94:	4925      	ldr	r1, [pc, #148]	@ (800bc2c <_strtod_l+0x594>)
 800bb96:	4682      	mov	sl, r0
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	d898      	bhi.n	800bace <_strtod_l+0x436>
 800bb9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bba0:	428b      	cmp	r3, r1
 800bba2:	bf86      	itte	hi
 800bba4:	f04f 3aff 	movhi.w	sl, #4294967295
 800bba8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800bc30 <_strtod_l+0x598>
 800bbac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	e076      	b.n	800bca4 <_strtod_l+0x60c>
 800bbb6:	07e2      	lsls	r2, r4, #31
 800bbb8:	d504      	bpl.n	800bbc4 <_strtod_l+0x52c>
 800bbba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbbe:	f7f4 fc8b 	bl	80004d8 <__aeabi_dmul>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	3601      	adds	r6, #1
 800bbc6:	1064      	asrs	r4, r4, #1
 800bbc8:	3708      	adds	r7, #8
 800bbca:	e7d0      	b.n	800bb6e <_strtod_l+0x4d6>
 800bbcc:	d0f0      	beq.n	800bbb0 <_strtod_l+0x518>
 800bbce:	4264      	negs	r4, r4
 800bbd0:	f014 020f 	ands.w	r2, r4, #15
 800bbd4:	d00a      	beq.n	800bbec <_strtod_l+0x554>
 800bbd6:	4b13      	ldr	r3, [pc, #76]	@ (800bc24 <_strtod_l+0x58c>)
 800bbd8:	4650      	mov	r0, sl
 800bbda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbde:	4659      	mov	r1, fp
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f7f4 fda2 	bl	800072c <__aeabi_ddiv>
 800bbe8:	4682      	mov	sl, r0
 800bbea:	468b      	mov	fp, r1
 800bbec:	1124      	asrs	r4, r4, #4
 800bbee:	d0df      	beq.n	800bbb0 <_strtod_l+0x518>
 800bbf0:	2c1f      	cmp	r4, #31
 800bbf2:	dd1f      	ble.n	800bc34 <_strtod_l+0x59c>
 800bbf4:	2400      	movs	r4, #0
 800bbf6:	46a0      	mov	r8, r4
 800bbf8:	46a1      	mov	r9, r4
 800bbfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbfc:	2322      	movs	r3, #34	@ 0x22
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	f04f 0a00 	mov.w	sl, #0
 800bc04:	f04f 0b00 	mov.w	fp, #0
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	e76b      	b.n	800bae4 <_strtod_l+0x44c>
 800bc0c:	0800f82d 	.word	0x0800f82d
 800bc10:	0800f988 	.word	0x0800f988
 800bc14:	0800f824 	.word	0x0800f824
 800bc18:	0800f827 	.word	0x0800f827
 800bc1c:	7ff00000 	.word	0x7ff00000
 800bc20:	0800f987 	.word	0x0800f987
 800bc24:	0800fa10 	.word	0x0800fa10
 800bc28:	0800f9e8 	.word	0x0800f9e8
 800bc2c:	7ca00000 	.word	0x7ca00000
 800bc30:	7fefffff 	.word	0x7fefffff
 800bc34:	f014 0310 	ands.w	r3, r4, #16
 800bc38:	bf18      	it	ne
 800bc3a:	236a      	movne	r3, #106	@ 0x6a
 800bc3c:	4650      	mov	r0, sl
 800bc3e:	9308      	str	r3, [sp, #32]
 800bc40:	4659      	mov	r1, fp
 800bc42:	2300      	movs	r3, #0
 800bc44:	4e77      	ldr	r6, [pc, #476]	@ (800be24 <_strtod_l+0x78c>)
 800bc46:	07e7      	lsls	r7, r4, #31
 800bc48:	d504      	bpl.n	800bc54 <_strtod_l+0x5bc>
 800bc4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc4e:	f7f4 fc43 	bl	80004d8 <__aeabi_dmul>
 800bc52:	2301      	movs	r3, #1
 800bc54:	1064      	asrs	r4, r4, #1
 800bc56:	f106 0608 	add.w	r6, r6, #8
 800bc5a:	d1f4      	bne.n	800bc46 <_strtod_l+0x5ae>
 800bc5c:	b10b      	cbz	r3, 800bc62 <_strtod_l+0x5ca>
 800bc5e:	4682      	mov	sl, r0
 800bc60:	468b      	mov	fp, r1
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	b1b3      	cbz	r3, 800bc94 <_strtod_l+0x5fc>
 800bc66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	4659      	mov	r1, fp
 800bc72:	dd0f      	ble.n	800bc94 <_strtod_l+0x5fc>
 800bc74:	2b1f      	cmp	r3, #31
 800bc76:	dd58      	ble.n	800bd2a <_strtod_l+0x692>
 800bc78:	2b34      	cmp	r3, #52	@ 0x34
 800bc7a:	bfd8      	it	le
 800bc7c:	f04f 33ff 	movle.w	r3, #4294967295
 800bc80:	f04f 0a00 	mov.w	sl, #0
 800bc84:	bfcf      	iteee	gt
 800bc86:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bc8a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bc8e:	4093      	lslle	r3, r2
 800bc90:	ea03 0b01 	andle.w	fp, r3, r1
 800bc94:	2200      	movs	r2, #0
 800bc96:	2300      	movs	r3, #0
 800bc98:	4650      	mov	r0, sl
 800bc9a:	4659      	mov	r1, fp
 800bc9c:	f7f4 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1a7      	bne.n	800bbf4 <_strtod_l+0x55c>
 800bca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bca6:	464a      	mov	r2, r9
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcac:	462b      	mov	r3, r5
 800bcae:	9805      	ldr	r0, [sp, #20]
 800bcb0:	f001 f9d2 	bl	800d058 <__s2b>
 800bcb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f af09 	beq.w	800bace <_strtod_l+0x436>
 800bcbc:	2400      	movs	r4, #0
 800bcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	eba3 0308 	sub.w	r3, r3, r8
 800bcc8:	bfa8      	it	ge
 800bcca:	2300      	movge	r3, #0
 800bccc:	46a0      	mov	r8, r4
 800bcce:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcd0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bcd4:	9316      	str	r3, [sp, #88]	@ 0x58
 800bcd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcd8:	9805      	ldr	r0, [sp, #20]
 800bcda:	6859      	ldr	r1, [r3, #4]
 800bcdc:	f001 f914 	bl	800cf08 <_Balloc>
 800bce0:	4681      	mov	r9, r0
 800bce2:	2800      	cmp	r0, #0
 800bce4:	f43f aef7 	beq.w	800bad6 <_strtod_l+0x43e>
 800bce8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcea:	300c      	adds	r0, #12
 800bcec:	691a      	ldr	r2, [r3, #16]
 800bcee:	f103 010c 	add.w	r1, r3, #12
 800bcf2:	3202      	adds	r2, #2
 800bcf4:	0092      	lsls	r2, r2, #2
 800bcf6:	f000 fcb0 	bl	800c65a <memcpy>
 800bcfa:	ab1c      	add	r3, sp, #112	@ 0x70
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	4652      	mov	r2, sl
 800bd04:	465b      	mov	r3, fp
 800bd06:	9805      	ldr	r0, [sp, #20]
 800bd08:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bd0c:	f001 fcd0 	bl	800d6b0 <__d2b>
 800bd10:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f aedf 	beq.w	800bad6 <_strtod_l+0x43e>
 800bd18:	2101      	movs	r1, #1
 800bd1a:	9805      	ldr	r0, [sp, #20]
 800bd1c:	f001 fa32 	bl	800d184 <__i2b>
 800bd20:	4680      	mov	r8, r0
 800bd22:	b948      	cbnz	r0, 800bd38 <_strtod_l+0x6a0>
 800bd24:	f04f 0800 	mov.w	r8, #0
 800bd28:	e6d5      	b.n	800bad6 <_strtod_l+0x43e>
 800bd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	ea03 0a0a 	and.w	sl, r3, sl
 800bd36:	e7ad      	b.n	800bc94 <_strtod_l+0x5fc>
 800bd38:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bd3a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	bfab      	itete	ge
 800bd40:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bd42:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bd44:	18ef      	addge	r7, r5, r3
 800bd46:	1b5e      	sublt	r6, r3, r5
 800bd48:	9b08      	ldr	r3, [sp, #32]
 800bd4a:	bfa8      	it	ge
 800bd4c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bd4e:	eba5 0503 	sub.w	r5, r5, r3
 800bd52:	4415      	add	r5, r2
 800bd54:	4b34      	ldr	r3, [pc, #208]	@ (800be28 <_strtod_l+0x790>)
 800bd56:	f105 35ff 	add.w	r5, r5, #4294967295
 800bd5a:	bfb8      	it	lt
 800bd5c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bd5e:	429d      	cmp	r5, r3
 800bd60:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bd64:	da50      	bge.n	800be08 <_strtod_l+0x770>
 800bd66:	1b5b      	subs	r3, r3, r5
 800bd68:	2b1f      	cmp	r3, #31
 800bd6a:	f04f 0101 	mov.w	r1, #1
 800bd6e:	eba2 0203 	sub.w	r2, r2, r3
 800bd72:	dc3d      	bgt.n	800bdf0 <_strtod_l+0x758>
 800bd74:	fa01 f303 	lsl.w	r3, r1, r3
 800bd78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd7e:	18bd      	adds	r5, r7, r2
 800bd80:	9b08      	ldr	r3, [sp, #32]
 800bd82:	42af      	cmp	r7, r5
 800bd84:	4416      	add	r6, r2
 800bd86:	441e      	add	r6, r3
 800bd88:	463b      	mov	r3, r7
 800bd8a:	bfa8      	it	ge
 800bd8c:	462b      	movge	r3, r5
 800bd8e:	42b3      	cmp	r3, r6
 800bd90:	bfa8      	it	ge
 800bd92:	4633      	movge	r3, r6
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfc2      	ittt	gt
 800bd98:	1aed      	subgt	r5, r5, r3
 800bd9a:	1af6      	subgt	r6, r6, r3
 800bd9c:	1aff      	subgt	r7, r7, r3
 800bd9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dd16      	ble.n	800bdd2 <_strtod_l+0x73a>
 800bda4:	4641      	mov	r1, r8
 800bda6:	461a      	mov	r2, r3
 800bda8:	9805      	ldr	r0, [sp, #20]
 800bdaa:	f001 faa3 	bl	800d2f4 <__pow5mult>
 800bdae:	4680      	mov	r8, r0
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d0b7      	beq.n	800bd24 <_strtod_l+0x68c>
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bdb8:	9805      	ldr	r0, [sp, #20]
 800bdba:	f001 f9f9 	bl	800d1b0 <__multiply>
 800bdbe:	900a      	str	r0, [sp, #40]	@ 0x28
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	f43f ae88 	beq.w	800bad6 <_strtod_l+0x43e>
 800bdc6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdc8:	9805      	ldr	r0, [sp, #20]
 800bdca:	f001 f8dd 	bl	800cf88 <_Bfree>
 800bdce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdd2:	2d00      	cmp	r5, #0
 800bdd4:	dc1d      	bgt.n	800be12 <_strtod_l+0x77a>
 800bdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dd27      	ble.n	800be2c <_strtod_l+0x794>
 800bddc:	4649      	mov	r1, r9
 800bdde:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bde0:	9805      	ldr	r0, [sp, #20]
 800bde2:	f001 fa87 	bl	800d2f4 <__pow5mult>
 800bde6:	4681      	mov	r9, r0
 800bde8:	bb00      	cbnz	r0, 800be2c <_strtod_l+0x794>
 800bdea:	f04f 0900 	mov.w	r9, #0
 800bdee:	e672      	b.n	800bad6 <_strtod_l+0x43e>
 800bdf0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bdf4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bdf8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bdfc:	35e2      	adds	r5, #226	@ 0xe2
 800bdfe:	fa01 f305 	lsl.w	r3, r1, r5
 800be02:	9310      	str	r3, [sp, #64]	@ 0x40
 800be04:	9113      	str	r1, [sp, #76]	@ 0x4c
 800be06:	e7ba      	b.n	800bd7e <_strtod_l+0x6e6>
 800be08:	2300      	movs	r3, #0
 800be0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800be0c:	2301      	movs	r3, #1
 800be0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be10:	e7b5      	b.n	800bd7e <_strtod_l+0x6e6>
 800be12:	462a      	mov	r2, r5
 800be14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be16:	9805      	ldr	r0, [sp, #20]
 800be18:	f001 fac6 	bl	800d3a8 <__lshift>
 800be1c:	901a      	str	r0, [sp, #104]	@ 0x68
 800be1e:	2800      	cmp	r0, #0
 800be20:	d1d9      	bne.n	800bdd6 <_strtod_l+0x73e>
 800be22:	e658      	b.n	800bad6 <_strtod_l+0x43e>
 800be24:	0800f9b0 	.word	0x0800f9b0
 800be28:	fffffc02 	.word	0xfffffc02
 800be2c:	2e00      	cmp	r6, #0
 800be2e:	dd07      	ble.n	800be40 <_strtod_l+0x7a8>
 800be30:	4649      	mov	r1, r9
 800be32:	4632      	mov	r2, r6
 800be34:	9805      	ldr	r0, [sp, #20]
 800be36:	f001 fab7 	bl	800d3a8 <__lshift>
 800be3a:	4681      	mov	r9, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d0d4      	beq.n	800bdea <_strtod_l+0x752>
 800be40:	2f00      	cmp	r7, #0
 800be42:	dd08      	ble.n	800be56 <_strtod_l+0x7be>
 800be44:	4641      	mov	r1, r8
 800be46:	463a      	mov	r2, r7
 800be48:	9805      	ldr	r0, [sp, #20]
 800be4a:	f001 faad 	bl	800d3a8 <__lshift>
 800be4e:	4680      	mov	r8, r0
 800be50:	2800      	cmp	r0, #0
 800be52:	f43f ae40 	beq.w	800bad6 <_strtod_l+0x43e>
 800be56:	464a      	mov	r2, r9
 800be58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be5a:	9805      	ldr	r0, [sp, #20]
 800be5c:	f001 fb2c 	bl	800d4b8 <__mdiff>
 800be60:	4604      	mov	r4, r0
 800be62:	2800      	cmp	r0, #0
 800be64:	f43f ae37 	beq.w	800bad6 <_strtod_l+0x43e>
 800be68:	68c3      	ldr	r3, [r0, #12]
 800be6a:	4641      	mov	r1, r8
 800be6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be6e:	2300      	movs	r3, #0
 800be70:	60c3      	str	r3, [r0, #12]
 800be72:	f001 fb05 	bl	800d480 <__mcmp>
 800be76:	2800      	cmp	r0, #0
 800be78:	da3d      	bge.n	800bef6 <_strtod_l+0x85e>
 800be7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be7c:	ea53 030a 	orrs.w	r3, r3, sl
 800be80:	d163      	bne.n	800bf4a <_strtod_l+0x8b2>
 800be82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be86:	2b00      	cmp	r3, #0
 800be88:	d15f      	bne.n	800bf4a <_strtod_l+0x8b2>
 800be8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be8e:	0d1b      	lsrs	r3, r3, #20
 800be90:	051b      	lsls	r3, r3, #20
 800be92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be96:	d958      	bls.n	800bf4a <_strtod_l+0x8b2>
 800be98:	6963      	ldr	r3, [r4, #20]
 800be9a:	b913      	cbnz	r3, 800bea2 <_strtod_l+0x80a>
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	dd53      	ble.n	800bf4a <_strtod_l+0x8b2>
 800bea2:	4621      	mov	r1, r4
 800bea4:	2201      	movs	r2, #1
 800bea6:	9805      	ldr	r0, [sp, #20]
 800bea8:	f001 fa7e 	bl	800d3a8 <__lshift>
 800beac:	4641      	mov	r1, r8
 800beae:	4604      	mov	r4, r0
 800beb0:	f001 fae6 	bl	800d480 <__mcmp>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	dd48      	ble.n	800bf4a <_strtod_l+0x8b2>
 800beb8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bebc:	9a08      	ldr	r2, [sp, #32]
 800bebe:	0d1b      	lsrs	r3, r3, #20
 800bec0:	051b      	lsls	r3, r3, #20
 800bec2:	2a00      	cmp	r2, #0
 800bec4:	d062      	beq.n	800bf8c <_strtod_l+0x8f4>
 800bec6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800beca:	d85f      	bhi.n	800bf8c <_strtod_l+0x8f4>
 800becc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bed0:	f67f ae94 	bls.w	800bbfc <_strtod_l+0x564>
 800bed4:	4650      	mov	r0, sl
 800bed6:	4659      	mov	r1, fp
 800bed8:	4ba3      	ldr	r3, [pc, #652]	@ (800c168 <_strtod_l+0xad0>)
 800beda:	2200      	movs	r2, #0
 800bedc:	f7f4 fafc 	bl	80004d8 <__aeabi_dmul>
 800bee0:	4ba2      	ldr	r3, [pc, #648]	@ (800c16c <_strtod_l+0xad4>)
 800bee2:	4682      	mov	sl, r0
 800bee4:	400b      	ands	r3, r1
 800bee6:	468b      	mov	fp, r1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f47f adff 	bne.w	800baec <_strtod_l+0x454>
 800beee:	2322      	movs	r3, #34	@ 0x22
 800bef0:	9a05      	ldr	r2, [sp, #20]
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	e5fa      	b.n	800baec <_strtod_l+0x454>
 800bef6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800befa:	d165      	bne.n	800bfc8 <_strtod_l+0x930>
 800befc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800befe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf02:	b35a      	cbz	r2, 800bf5c <_strtod_l+0x8c4>
 800bf04:	4a9a      	ldr	r2, [pc, #616]	@ (800c170 <_strtod_l+0xad8>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d12b      	bne.n	800bf62 <_strtod_l+0x8ca>
 800bf0a:	9b08      	ldr	r3, [sp, #32]
 800bf0c:	4651      	mov	r1, sl
 800bf0e:	b303      	cbz	r3, 800bf52 <_strtod_l+0x8ba>
 800bf10:	465a      	mov	r2, fp
 800bf12:	4b96      	ldr	r3, [pc, #600]	@ (800c16c <_strtod_l+0xad4>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1e:	d81b      	bhi.n	800bf58 <_strtod_l+0x8c0>
 800bf20:	0d1b      	lsrs	r3, r3, #20
 800bf22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf26:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	d119      	bne.n	800bf62 <_strtod_l+0x8ca>
 800bf2e:	4b91      	ldr	r3, [pc, #580]	@ (800c174 <_strtod_l+0xadc>)
 800bf30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d102      	bne.n	800bf3c <_strtod_l+0x8a4>
 800bf36:	3101      	adds	r1, #1
 800bf38:	f43f adcd 	beq.w	800bad6 <_strtod_l+0x43e>
 800bf3c:	f04f 0a00 	mov.w	sl, #0
 800bf40:	4b8a      	ldr	r3, [pc, #552]	@ (800c16c <_strtod_l+0xad4>)
 800bf42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf44:	401a      	ands	r2, r3
 800bf46:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bf4a:	9b08      	ldr	r3, [sp, #32]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1c1      	bne.n	800bed4 <_strtod_l+0x83c>
 800bf50:	e5cc      	b.n	800baec <_strtod_l+0x454>
 800bf52:	f04f 33ff 	mov.w	r3, #4294967295
 800bf56:	e7e8      	b.n	800bf2a <_strtod_l+0x892>
 800bf58:	4613      	mov	r3, r2
 800bf5a:	e7e6      	b.n	800bf2a <_strtod_l+0x892>
 800bf5c:	ea53 030a 	orrs.w	r3, r3, sl
 800bf60:	d0aa      	beq.n	800beb8 <_strtod_l+0x820>
 800bf62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf64:	b1db      	cbz	r3, 800bf9e <_strtod_l+0x906>
 800bf66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf68:	4213      	tst	r3, r2
 800bf6a:	d0ee      	beq.n	800bf4a <_strtod_l+0x8b2>
 800bf6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf6e:	4650      	mov	r0, sl
 800bf70:	4659      	mov	r1, fp
 800bf72:	9a08      	ldr	r2, [sp, #32]
 800bf74:	b1bb      	cbz	r3, 800bfa6 <_strtod_l+0x90e>
 800bf76:	f7ff fb6e 	bl	800b656 <sulp>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf82:	f7f4 f8f3 	bl	800016c <__adddf3>
 800bf86:	4682      	mov	sl, r0
 800bf88:	468b      	mov	fp, r1
 800bf8a:	e7de      	b.n	800bf4a <_strtod_l+0x8b2>
 800bf8c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf90:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf94:	f04f 3aff 	mov.w	sl, #4294967295
 800bf98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf9c:	e7d5      	b.n	800bf4a <_strtod_l+0x8b2>
 800bf9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfa0:	ea13 0f0a 	tst.w	r3, sl
 800bfa4:	e7e1      	b.n	800bf6a <_strtod_l+0x8d2>
 800bfa6:	f7ff fb56 	bl	800b656 <sulp>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfb2:	f7f4 f8d9 	bl	8000168 <__aeabi_dsub>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4682      	mov	sl, r0
 800bfbc:	468b      	mov	fp, r1
 800bfbe:	f7f4 fcf3 	bl	80009a8 <__aeabi_dcmpeq>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d0c1      	beq.n	800bf4a <_strtod_l+0x8b2>
 800bfc6:	e619      	b.n	800bbfc <_strtod_l+0x564>
 800bfc8:	4641      	mov	r1, r8
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f001 fbc8 	bl	800d760 <__ratio>
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	f7f4 fcf9 	bl	80009d0 <__aeabi_dcmple>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d06d      	beq.n	800c0be <_strtod_l+0xa26>
 800bfe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d178      	bne.n	800c0da <_strtod_l+0xa42>
 800bfe8:	f1ba 0f00 	cmp.w	sl, #0
 800bfec:	d156      	bne.n	800c09c <_strtod_l+0xa04>
 800bfee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d158      	bne.n	800c0aa <_strtod_l+0xa12>
 800bff8:	2200      	movs	r2, #0
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	4b5e      	ldr	r3, [pc, #376]	@ (800c178 <_strtod_l+0xae0>)
 800c000:	f7f4 fcdc 	bl	80009bc <__aeabi_dcmplt>
 800c004:	2800      	cmp	r0, #0
 800c006:	d157      	bne.n	800c0b8 <_strtod_l+0xa20>
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	2200      	movs	r2, #0
 800c00e:	4b5b      	ldr	r3, [pc, #364]	@ (800c17c <_strtod_l+0xae4>)
 800c010:	f7f4 fa62 	bl	80004d8 <__aeabi_dmul>
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c01c:	9606      	str	r6, [sp, #24]
 800c01e:	9307      	str	r3, [sp, #28]
 800c020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c024:	4d51      	ldr	r5, [pc, #324]	@ (800c16c <_strtod_l+0xad4>)
 800c026:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02c:	401d      	ands	r5, r3
 800c02e:	4b54      	ldr	r3, [pc, #336]	@ (800c180 <_strtod_l+0xae8>)
 800c030:	429d      	cmp	r5, r3
 800c032:	f040 80ab 	bne.w	800c18c <_strtod_l+0xaf4>
 800c036:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c038:	4650      	mov	r0, sl
 800c03a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c03e:	4659      	mov	r1, fp
 800c040:	f001 face 	bl	800d5e0 <__ulp>
 800c044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c048:	f7f4 fa46 	bl	80004d8 <__aeabi_dmul>
 800c04c:	4652      	mov	r2, sl
 800c04e:	465b      	mov	r3, fp
 800c050:	f7f4 f88c 	bl	800016c <__adddf3>
 800c054:	460b      	mov	r3, r1
 800c056:	4945      	ldr	r1, [pc, #276]	@ (800c16c <_strtod_l+0xad4>)
 800c058:	4a4a      	ldr	r2, [pc, #296]	@ (800c184 <_strtod_l+0xaec>)
 800c05a:	4019      	ands	r1, r3
 800c05c:	4291      	cmp	r1, r2
 800c05e:	4682      	mov	sl, r0
 800c060:	d942      	bls.n	800c0e8 <_strtod_l+0xa50>
 800c062:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c064:	4b43      	ldr	r3, [pc, #268]	@ (800c174 <_strtod_l+0xadc>)
 800c066:	429a      	cmp	r2, r3
 800c068:	d103      	bne.n	800c072 <_strtod_l+0x9da>
 800c06a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c06c:	3301      	adds	r3, #1
 800c06e:	f43f ad32 	beq.w	800bad6 <_strtod_l+0x43e>
 800c072:	f04f 3aff 	mov.w	sl, #4294967295
 800c076:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800c174 <_strtod_l+0xadc>
 800c07a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c07c:	9805      	ldr	r0, [sp, #20]
 800c07e:	f000 ff83 	bl	800cf88 <_Bfree>
 800c082:	4649      	mov	r1, r9
 800c084:	9805      	ldr	r0, [sp, #20]
 800c086:	f000 ff7f 	bl	800cf88 <_Bfree>
 800c08a:	4641      	mov	r1, r8
 800c08c:	9805      	ldr	r0, [sp, #20]
 800c08e:	f000 ff7b 	bl	800cf88 <_Bfree>
 800c092:	4621      	mov	r1, r4
 800c094:	9805      	ldr	r0, [sp, #20]
 800c096:	f000 ff77 	bl	800cf88 <_Bfree>
 800c09a:	e61c      	b.n	800bcd6 <_strtod_l+0x63e>
 800c09c:	f1ba 0f01 	cmp.w	sl, #1
 800c0a0:	d103      	bne.n	800c0aa <_strtod_l+0xa12>
 800c0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f43f ada9 	beq.w	800bbfc <_strtod_l+0x564>
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4b36      	ldr	r3, [pc, #216]	@ (800c188 <_strtod_l+0xaf0>)
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0b4:	4f30      	ldr	r7, [pc, #192]	@ (800c178 <_strtod_l+0xae0>)
 800c0b6:	e7b3      	b.n	800c020 <_strtod_l+0x988>
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	4f30      	ldr	r7, [pc, #192]	@ (800c17c <_strtod_l+0xae4>)
 800c0bc:	e7ac      	b.n	800c018 <_strtod_l+0x980>
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	4b2e      	ldr	r3, [pc, #184]	@ (800c17c <_strtod_l+0xae4>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f7f4 fa07 	bl	80004d8 <__aeabi_dmul>
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0a1      	beq.n	800c018 <_strtod_l+0x980>
 800c0d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c0d8:	e7a2      	b.n	800c020 <_strtod_l+0x988>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4b26      	ldr	r3, [pc, #152]	@ (800c178 <_strtod_l+0xae0>)
 800c0de:	4616      	mov	r6, r2
 800c0e0:	461f      	mov	r7, r3
 800c0e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0e6:	e79b      	b.n	800c020 <_strtod_l+0x988>
 800c0e8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c0ec:	9b08      	ldr	r3, [sp, #32]
 800c0ee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1c1      	bne.n	800c07a <_strtod_l+0x9e2>
 800c0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0fa:	0d1b      	lsrs	r3, r3, #20
 800c0fc:	051b      	lsls	r3, r3, #20
 800c0fe:	429d      	cmp	r5, r3
 800c100:	d1bb      	bne.n	800c07a <_strtod_l+0x9e2>
 800c102:	4630      	mov	r0, r6
 800c104:	4639      	mov	r1, r7
 800c106:	f7f5 f837 	bl	8001178 <__aeabi_d2lz>
 800c10a:	f7f4 f9b7 	bl	800047c <__aeabi_l2d>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4630      	mov	r0, r6
 800c114:	4639      	mov	r1, r7
 800c116:	f7f4 f827 	bl	8000168 <__aeabi_dsub>
 800c11a:	460b      	mov	r3, r1
 800c11c:	4602      	mov	r2, r0
 800c11e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c122:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c128:	ea46 060a 	orr.w	r6, r6, sl
 800c12c:	431e      	orrs	r6, r3
 800c12e:	d06a      	beq.n	800c206 <_strtod_l+0xb6e>
 800c130:	a309      	add	r3, pc, #36	@ (adr r3, 800c158 <_strtod_l+0xac0>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 fc41 	bl	80009bc <__aeabi_dcmplt>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	f47f acd6 	bne.w	800baec <_strtod_l+0x454>
 800c140:	a307      	add	r3, pc, #28	@ (adr r3, 800c160 <_strtod_l+0xac8>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c14a:	f7f4 fc55 	bl	80009f8 <__aeabi_dcmpgt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d093      	beq.n	800c07a <_strtod_l+0x9e2>
 800c152:	e4cb      	b.n	800baec <_strtod_l+0x454>
 800c154:	f3af 8000 	nop.w
 800c158:	94a03595 	.word	0x94a03595
 800c15c:	3fdfffff 	.word	0x3fdfffff
 800c160:	35afe535 	.word	0x35afe535
 800c164:	3fe00000 	.word	0x3fe00000
 800c168:	39500000 	.word	0x39500000
 800c16c:	7ff00000 	.word	0x7ff00000
 800c170:	000fffff 	.word	0x000fffff
 800c174:	7fefffff 	.word	0x7fefffff
 800c178:	3ff00000 	.word	0x3ff00000
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	7fe00000 	.word	0x7fe00000
 800c184:	7c9fffff 	.word	0x7c9fffff
 800c188:	bff00000 	.word	0xbff00000
 800c18c:	9b08      	ldr	r3, [sp, #32]
 800c18e:	b323      	cbz	r3, 800c1da <_strtod_l+0xb42>
 800c190:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c194:	d821      	bhi.n	800c1da <_strtod_l+0xb42>
 800c196:	a328      	add	r3, pc, #160	@ (adr r3, 800c238 <_strtod_l+0xba0>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	4630      	mov	r0, r6
 800c19e:	4639      	mov	r1, r7
 800c1a0:	f7f4 fc16 	bl	80009d0 <__aeabi_dcmple>
 800c1a4:	b1a0      	cbz	r0, 800c1d0 <_strtod_l+0xb38>
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7f4 fc45 	bl	8000a38 <__aeabi_d2uiz>
 800c1ae:	2801      	cmp	r0, #1
 800c1b0:	bf38      	it	cc
 800c1b2:	2001      	movcc	r0, #1
 800c1b4:	f7f4 f916 	bl	80003e4 <__aeabi_ui2d>
 800c1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	460f      	mov	r7, r1
 800c1be:	b9fb      	cbnz	r3, 800c200 <_strtod_l+0xb68>
 800c1c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c1c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c1c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c1cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c1d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c1d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c1d6:	1b5b      	subs	r3, r3, r5
 800c1d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c1e2:	f001 f9fd 	bl	800d5e0 <__ulp>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4650      	mov	r0, sl
 800c1ec:	4659      	mov	r1, fp
 800c1ee:	f7f4 f973 	bl	80004d8 <__aeabi_dmul>
 800c1f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c1f6:	f7f3 ffb9 	bl	800016c <__adddf3>
 800c1fa:	4682      	mov	sl, r0
 800c1fc:	468b      	mov	fp, r1
 800c1fe:	e775      	b.n	800c0ec <_strtod_l+0xa54>
 800c200:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c204:	e7e0      	b.n	800c1c8 <_strtod_l+0xb30>
 800c206:	a30e      	add	r3, pc, #56	@ (adr r3, 800c240 <_strtod_l+0xba8>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f7f4 fbd6 	bl	80009bc <__aeabi_dcmplt>
 800c210:	e79d      	b.n	800c14e <_strtod_l+0xab6>
 800c212:	2300      	movs	r3, #0
 800c214:	930e      	str	r3, [sp, #56]	@ 0x38
 800c216:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c218:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c21a:	6013      	str	r3, [r2, #0]
 800c21c:	f7ff ba79 	b.w	800b712 <_strtod_l+0x7a>
 800c220:	2a65      	cmp	r2, #101	@ 0x65
 800c222:	f43f ab72 	beq.w	800b90a <_strtod_l+0x272>
 800c226:	2a45      	cmp	r2, #69	@ 0x45
 800c228:	f43f ab6f 	beq.w	800b90a <_strtod_l+0x272>
 800c22c:	2301      	movs	r3, #1
 800c22e:	f7ff bbaa 	b.w	800b986 <_strtod_l+0x2ee>
 800c232:	bf00      	nop
 800c234:	f3af 8000 	nop.w
 800c238:	ffc00000 	.word	0xffc00000
 800c23c:	41dfffff 	.word	0x41dfffff
 800c240:	94a03595 	.word	0x94a03595
 800c244:	3fcfffff 	.word	0x3fcfffff

0800c248 <strtod>:
 800c248:	460a      	mov	r2, r1
 800c24a:	4601      	mov	r1, r0
 800c24c:	4802      	ldr	r0, [pc, #8]	@ (800c258 <strtod+0x10>)
 800c24e:	4b03      	ldr	r3, [pc, #12]	@ (800c25c <strtod+0x14>)
 800c250:	6800      	ldr	r0, [r0, #0]
 800c252:	f7ff ba21 	b.w	800b698 <_strtod_l>
 800c256:	bf00      	nop
 800c258:	20000300 	.word	0x20000300
 800c25c:	20000194 	.word	0x20000194

0800c260 <std>:
 800c260:	2300      	movs	r3, #0
 800c262:	b510      	push	{r4, lr}
 800c264:	4604      	mov	r4, r0
 800c266:	e9c0 3300 	strd	r3, r3, [r0]
 800c26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c26e:	6083      	str	r3, [r0, #8]
 800c270:	8181      	strh	r1, [r0, #12]
 800c272:	6643      	str	r3, [r0, #100]	@ 0x64
 800c274:	81c2      	strh	r2, [r0, #14]
 800c276:	6183      	str	r3, [r0, #24]
 800c278:	4619      	mov	r1, r3
 800c27a:	2208      	movs	r2, #8
 800c27c:	305c      	adds	r0, #92	@ 0x5c
 800c27e:	f000 f94c 	bl	800c51a <memset>
 800c282:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b8 <std+0x58>)
 800c284:	6224      	str	r4, [r4, #32]
 800c286:	6263      	str	r3, [r4, #36]	@ 0x24
 800c288:	4b0c      	ldr	r3, [pc, #48]	@ (800c2bc <std+0x5c>)
 800c28a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c28c:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c0 <std+0x60>)
 800c28e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c290:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c4 <std+0x64>)
 800c292:	6323      	str	r3, [r4, #48]	@ 0x30
 800c294:	4b0c      	ldr	r3, [pc, #48]	@ (800c2c8 <std+0x68>)
 800c296:	429c      	cmp	r4, r3
 800c298:	d006      	beq.n	800c2a8 <std+0x48>
 800c29a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c29e:	4294      	cmp	r4, r2
 800c2a0:	d002      	beq.n	800c2a8 <std+0x48>
 800c2a2:	33d0      	adds	r3, #208	@ 0xd0
 800c2a4:	429c      	cmp	r4, r3
 800c2a6:	d105      	bne.n	800c2b4 <std+0x54>
 800c2a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b0:	f000 b9d0 	b.w	800c654 <__retarget_lock_init_recursive>
 800c2b4:	bd10      	pop	{r4, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0800c495 	.word	0x0800c495
 800c2bc:	0800c4b7 	.word	0x0800c4b7
 800c2c0:	0800c4ef 	.word	0x0800c4ef
 800c2c4:	0800c513 	.word	0x0800c513
 800c2c8:	20003a60 	.word	0x20003a60

0800c2cc <stdio_exit_handler>:
 800c2cc:	4a02      	ldr	r2, [pc, #8]	@ (800c2d8 <stdio_exit_handler+0xc>)
 800c2ce:	4903      	ldr	r1, [pc, #12]	@ (800c2dc <stdio_exit_handler+0x10>)
 800c2d0:	4803      	ldr	r0, [pc, #12]	@ (800c2e0 <stdio_exit_handler+0x14>)
 800c2d2:	f000 b869 	b.w	800c3a8 <_fwalk_sglue>
 800c2d6:	bf00      	nop
 800c2d8:	20000188 	.word	0x20000188
 800c2dc:	0800df31 	.word	0x0800df31
 800c2e0:	20000304 	.word	0x20000304

0800c2e4 <cleanup_stdio>:
 800c2e4:	6841      	ldr	r1, [r0, #4]
 800c2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c318 <cleanup_stdio+0x34>)
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	4299      	cmp	r1, r3
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	d001      	beq.n	800c2f4 <cleanup_stdio+0x10>
 800c2f0:	f001 fe1e 	bl	800df30 <_fflush_r>
 800c2f4:	68a1      	ldr	r1, [r4, #8]
 800c2f6:	4b09      	ldr	r3, [pc, #36]	@ (800c31c <cleanup_stdio+0x38>)
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	d002      	beq.n	800c302 <cleanup_stdio+0x1e>
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f001 fe17 	bl	800df30 <_fflush_r>
 800c302:	68e1      	ldr	r1, [r4, #12]
 800c304:	4b06      	ldr	r3, [pc, #24]	@ (800c320 <cleanup_stdio+0x3c>)
 800c306:	4299      	cmp	r1, r3
 800c308:	d004      	beq.n	800c314 <cleanup_stdio+0x30>
 800c30a:	4620      	mov	r0, r4
 800c30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c310:	f001 be0e 	b.w	800df30 <_fflush_r>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	bf00      	nop
 800c318:	20003a60 	.word	0x20003a60
 800c31c:	20003ac8 	.word	0x20003ac8
 800c320:	20003b30 	.word	0x20003b30

0800c324 <global_stdio_init.part.0>:
 800c324:	b510      	push	{r4, lr}
 800c326:	4b0b      	ldr	r3, [pc, #44]	@ (800c354 <global_stdio_init.part.0+0x30>)
 800c328:	4c0b      	ldr	r4, [pc, #44]	@ (800c358 <global_stdio_init.part.0+0x34>)
 800c32a:	4a0c      	ldr	r2, [pc, #48]	@ (800c35c <global_stdio_init.part.0+0x38>)
 800c32c:	4620      	mov	r0, r4
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	2104      	movs	r1, #4
 800c332:	2200      	movs	r2, #0
 800c334:	f7ff ff94 	bl	800c260 <std>
 800c338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c33c:	2201      	movs	r2, #1
 800c33e:	2109      	movs	r1, #9
 800c340:	f7ff ff8e 	bl	800c260 <std>
 800c344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c348:	2202      	movs	r2, #2
 800c34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c34e:	2112      	movs	r1, #18
 800c350:	f7ff bf86 	b.w	800c260 <std>
 800c354:	20003b98 	.word	0x20003b98
 800c358:	20003a60 	.word	0x20003a60
 800c35c:	0800c2cd 	.word	0x0800c2cd

0800c360 <__sfp_lock_acquire>:
 800c360:	4801      	ldr	r0, [pc, #4]	@ (800c368 <__sfp_lock_acquire+0x8>)
 800c362:	f000 b978 	b.w	800c656 <__retarget_lock_acquire_recursive>
 800c366:	bf00      	nop
 800c368:	20003ba1 	.word	0x20003ba1

0800c36c <__sfp_lock_release>:
 800c36c:	4801      	ldr	r0, [pc, #4]	@ (800c374 <__sfp_lock_release+0x8>)
 800c36e:	f000 b973 	b.w	800c658 <__retarget_lock_release_recursive>
 800c372:	bf00      	nop
 800c374:	20003ba1 	.word	0x20003ba1

0800c378 <__sinit>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	4604      	mov	r4, r0
 800c37c:	f7ff fff0 	bl	800c360 <__sfp_lock_acquire>
 800c380:	6a23      	ldr	r3, [r4, #32]
 800c382:	b11b      	cbz	r3, 800c38c <__sinit+0x14>
 800c384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c388:	f7ff bff0 	b.w	800c36c <__sfp_lock_release>
 800c38c:	4b04      	ldr	r3, [pc, #16]	@ (800c3a0 <__sinit+0x28>)
 800c38e:	6223      	str	r3, [r4, #32]
 800c390:	4b04      	ldr	r3, [pc, #16]	@ (800c3a4 <__sinit+0x2c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1f5      	bne.n	800c384 <__sinit+0xc>
 800c398:	f7ff ffc4 	bl	800c324 <global_stdio_init.part.0>
 800c39c:	e7f2      	b.n	800c384 <__sinit+0xc>
 800c39e:	bf00      	nop
 800c3a0:	0800c2e5 	.word	0x0800c2e5
 800c3a4:	20003b98 	.word	0x20003b98

0800c3a8 <_fwalk_sglue>:
 800c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	4688      	mov	r8, r1
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c3bc:	d505      	bpl.n	800c3ca <_fwalk_sglue+0x22>
 800c3be:	6824      	ldr	r4, [r4, #0]
 800c3c0:	2c00      	cmp	r4, #0
 800c3c2:	d1f7      	bne.n	800c3b4 <_fwalk_sglue+0xc>
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ca:	89ab      	ldrh	r3, [r5, #12]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d907      	bls.n	800c3e0 <_fwalk_sglue+0x38>
 800c3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	d003      	beq.n	800c3e0 <_fwalk_sglue+0x38>
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4638      	mov	r0, r7
 800c3dc:	47c0      	blx	r8
 800c3de:	4306      	orrs	r6, r0
 800c3e0:	3568      	adds	r5, #104	@ 0x68
 800c3e2:	e7e9      	b.n	800c3b8 <_fwalk_sglue+0x10>

0800c3e4 <sniprintf>:
 800c3e4:	b40c      	push	{r2, r3}
 800c3e6:	b530      	push	{r4, r5, lr}
 800c3e8:	4b18      	ldr	r3, [pc, #96]	@ (800c44c <sniprintf+0x68>)
 800c3ea:	1e0c      	subs	r4, r1, #0
 800c3ec:	681d      	ldr	r5, [r3, #0]
 800c3ee:	b09d      	sub	sp, #116	@ 0x74
 800c3f0:	da08      	bge.n	800c404 <sniprintf+0x20>
 800c3f2:	238b      	movs	r3, #139	@ 0x8b
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	602b      	str	r3, [r5, #0]
 800c3fa:	b01d      	add	sp, #116	@ 0x74
 800c3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c400:	b002      	add	sp, #8
 800c402:	4770      	bx	lr
 800c404:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c408:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c412:	bf0c      	ite	eq
 800c414:	4623      	moveq	r3, r4
 800c416:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	9307      	str	r3, [sp, #28]
 800c41e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c422:	9002      	str	r0, [sp, #8]
 800c424:	9006      	str	r0, [sp, #24]
 800c426:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c42a:	4628      	mov	r0, r5
 800c42c:	ab21      	add	r3, sp, #132	@ 0x84
 800c42e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c430:	a902      	add	r1, sp, #8
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	f001 fa70 	bl	800d918 <_svfiprintf_r>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	bfbc      	itt	lt
 800c43c:	238b      	movlt	r3, #139	@ 0x8b
 800c43e:	602b      	strlt	r3, [r5, #0]
 800c440:	2c00      	cmp	r4, #0
 800c442:	d0da      	beq.n	800c3fa <sniprintf+0x16>
 800c444:	2200      	movs	r2, #0
 800c446:	9b02      	ldr	r3, [sp, #8]
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	e7d6      	b.n	800c3fa <sniprintf+0x16>
 800c44c:	20000300 	.word	0x20000300

0800c450 <siprintf>:
 800c450:	b40e      	push	{r1, r2, r3}
 800c452:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c456:	b510      	push	{r4, lr}
 800c458:	2400      	movs	r4, #0
 800c45a:	b09d      	sub	sp, #116	@ 0x74
 800c45c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c45e:	9002      	str	r0, [sp, #8]
 800c460:	9006      	str	r0, [sp, #24]
 800c462:	9107      	str	r1, [sp, #28]
 800c464:	9104      	str	r1, [sp, #16]
 800c466:	4809      	ldr	r0, [pc, #36]	@ (800c48c <siprintf+0x3c>)
 800c468:	4909      	ldr	r1, [pc, #36]	@ (800c490 <siprintf+0x40>)
 800c46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46e:	9105      	str	r1, [sp, #20]
 800c470:	6800      	ldr	r0, [r0, #0]
 800c472:	a902      	add	r1, sp, #8
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c478:	f001 fa4e 	bl	800d918 <_svfiprintf_r>
 800c47c:	9b02      	ldr	r3, [sp, #8]
 800c47e:	701c      	strb	r4, [r3, #0]
 800c480:	b01d      	add	sp, #116	@ 0x74
 800c482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c486:	b003      	add	sp, #12
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	20000300 	.word	0x20000300
 800c490:	ffff0208 	.word	0xffff0208

0800c494 <__sread>:
 800c494:	b510      	push	{r4, lr}
 800c496:	460c      	mov	r4, r1
 800c498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c49c:	f000 f88c 	bl	800c5b8 <_read_r>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	bfab      	itete	ge
 800c4a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c4a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4a8:	181b      	addge	r3, r3, r0
 800c4aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c4ae:	bfac      	ite	ge
 800c4b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c4b2:	81a3      	strhlt	r3, [r4, #12]
 800c4b4:	bd10      	pop	{r4, pc}

0800c4b6 <__swrite>:
 800c4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ba:	461f      	mov	r7, r3
 800c4bc:	898b      	ldrh	r3, [r1, #12]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	05db      	lsls	r3, r3, #23
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	d505      	bpl.n	800c4d4 <__swrite+0x1e>
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d0:	f000 f860 	bl	800c594 <_lseek_r>
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	4628      	mov	r0, r5
 800c4e0:	463b      	mov	r3, r7
 800c4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ea:	f000 b877 	b.w	800c5dc <_write_r>

0800c4ee <__sseek>:
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f6:	f000 f84d 	bl	800c594 <_lseek_r>
 800c4fa:	1c43      	adds	r3, r0, #1
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	bf15      	itete	ne
 800c500:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c50a:	81a3      	strheq	r3, [r4, #12]
 800c50c:	bf18      	it	ne
 800c50e:	81a3      	strhne	r3, [r4, #12]
 800c510:	bd10      	pop	{r4, pc}

0800c512 <__sclose>:
 800c512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c516:	f000 b82d 	b.w	800c574 <_close_r>

0800c51a <memset>:
 800c51a:	4603      	mov	r3, r0
 800c51c:	4402      	add	r2, r0
 800c51e:	4293      	cmp	r3, r2
 800c520:	d100      	bne.n	800c524 <memset+0xa>
 800c522:	4770      	bx	lr
 800c524:	f803 1b01 	strb.w	r1, [r3], #1
 800c528:	e7f9      	b.n	800c51e <memset+0x4>

0800c52a <strncmp>:
 800c52a:	b510      	push	{r4, lr}
 800c52c:	b16a      	cbz	r2, 800c54a <strncmp+0x20>
 800c52e:	3901      	subs	r1, #1
 800c530:	1884      	adds	r4, r0, r2
 800c532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c536:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d103      	bne.n	800c546 <strncmp+0x1c>
 800c53e:	42a0      	cmp	r0, r4
 800c540:	d001      	beq.n	800c546 <strncmp+0x1c>
 800c542:	2a00      	cmp	r2, #0
 800c544:	d1f5      	bne.n	800c532 <strncmp+0x8>
 800c546:	1ad0      	subs	r0, r2, r3
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	4610      	mov	r0, r2
 800c54c:	e7fc      	b.n	800c548 <strncmp+0x1e>

0800c54e <strncpy>:
 800c54e:	4603      	mov	r3, r0
 800c550:	b510      	push	{r4, lr}
 800c552:	3901      	subs	r1, #1
 800c554:	b132      	cbz	r2, 800c564 <strncpy+0x16>
 800c556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c55a:	3a01      	subs	r2, #1
 800c55c:	f803 4b01 	strb.w	r4, [r3], #1
 800c560:	2c00      	cmp	r4, #0
 800c562:	d1f7      	bne.n	800c554 <strncpy+0x6>
 800c564:	2100      	movs	r1, #0
 800c566:	441a      	add	r2, r3
 800c568:	4293      	cmp	r3, r2
 800c56a:	d100      	bne.n	800c56e <strncpy+0x20>
 800c56c:	bd10      	pop	{r4, pc}
 800c56e:	f803 1b01 	strb.w	r1, [r3], #1
 800c572:	e7f9      	b.n	800c568 <strncpy+0x1a>

0800c574 <_close_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	2300      	movs	r3, #0
 800c578:	4d05      	ldr	r5, [pc, #20]	@ (800c590 <_close_r+0x1c>)
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f7 fdbd 	bl	80040fe <_close>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_close_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_close_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	20003b9c 	.word	0x20003b9c

0800c594 <_lseek_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	4611      	mov	r1, r2
 800c59c:	2200      	movs	r2, #0
 800c59e:	4d05      	ldr	r5, [pc, #20]	@ (800c5b4 <_lseek_r+0x20>)
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f7 fdcf 	bl	8004146 <_lseek>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_lseek_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_lseek_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20003b9c 	.word	0x20003b9c

0800c5b8 <_read_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	4611      	mov	r1, r2
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	4d05      	ldr	r5, [pc, #20]	@ (800c5d8 <_read_r+0x20>)
 800c5c4:	602a      	str	r2, [r5, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f7f7 fd60 	bl	800408c <_read>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_read_r+0x1e>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_read_r+0x1e>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20003b9c 	.word	0x20003b9c

0800c5dc <_write_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4604      	mov	r4, r0
 800c5e0:	4608      	mov	r0, r1
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4d05      	ldr	r5, [pc, #20]	@ (800c5fc <_write_r+0x20>)
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f7 fd6b 	bl	80040c6 <_write>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_write_r+0x1e>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_write_r+0x1e>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	20003b9c 	.word	0x20003b9c

0800c600 <__errno>:
 800c600:	4b01      	ldr	r3, [pc, #4]	@ (800c608 <__errno+0x8>)
 800c602:	6818      	ldr	r0, [r3, #0]
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	20000300 	.word	0x20000300

0800c60c <__libc_init_array>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	2600      	movs	r6, #0
 800c610:	4d0c      	ldr	r5, [pc, #48]	@ (800c644 <__libc_init_array+0x38>)
 800c612:	4c0d      	ldr	r4, [pc, #52]	@ (800c648 <__libc_init_array+0x3c>)
 800c614:	1b64      	subs	r4, r4, r5
 800c616:	10a4      	asrs	r4, r4, #2
 800c618:	42a6      	cmp	r6, r4
 800c61a:	d109      	bne.n	800c630 <__libc_init_array+0x24>
 800c61c:	f002 f91c 	bl	800e858 <_init>
 800c620:	2600      	movs	r6, #0
 800c622:	4d0a      	ldr	r5, [pc, #40]	@ (800c64c <__libc_init_array+0x40>)
 800c624:	4c0a      	ldr	r4, [pc, #40]	@ (800c650 <__libc_init_array+0x44>)
 800c626:	1b64      	subs	r4, r4, r5
 800c628:	10a4      	asrs	r4, r4, #2
 800c62a:	42a6      	cmp	r6, r4
 800c62c:	d105      	bne.n	800c63a <__libc_init_array+0x2e>
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
 800c630:	f855 3b04 	ldr.w	r3, [r5], #4
 800c634:	4798      	blx	r3
 800c636:	3601      	adds	r6, #1
 800c638:	e7ee      	b.n	800c618 <__libc_init_array+0xc>
 800c63a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63e:	4798      	blx	r3
 800c640:	3601      	adds	r6, #1
 800c642:	e7f2      	b.n	800c62a <__libc_init_array+0x1e>
 800c644:	0800fbf8 	.word	0x0800fbf8
 800c648:	0800fbf8 	.word	0x0800fbf8
 800c64c:	0800fbf8 	.word	0x0800fbf8
 800c650:	0800fbfc 	.word	0x0800fbfc

0800c654 <__retarget_lock_init_recursive>:
 800c654:	4770      	bx	lr

0800c656 <__retarget_lock_acquire_recursive>:
 800c656:	4770      	bx	lr

0800c658 <__retarget_lock_release_recursive>:
 800c658:	4770      	bx	lr

0800c65a <memcpy>:
 800c65a:	440a      	add	r2, r1
 800c65c:	4291      	cmp	r1, r2
 800c65e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c662:	d100      	bne.n	800c666 <memcpy+0xc>
 800c664:	4770      	bx	lr
 800c666:	b510      	push	{r4, lr}
 800c668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c66c:	4291      	cmp	r1, r2
 800c66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c672:	d1f9      	bne.n	800c668 <memcpy+0xe>
 800c674:	bd10      	pop	{r4, pc}
	...

0800c678 <nan>:
 800c678:	2000      	movs	r0, #0
 800c67a:	4901      	ldr	r1, [pc, #4]	@ (800c680 <nan+0x8>)
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	7ff80000 	.word	0x7ff80000

0800c684 <_free_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4605      	mov	r5, r0
 800c688:	2900      	cmp	r1, #0
 800c68a:	d040      	beq.n	800c70e <_free_r+0x8a>
 800c68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c690:	1f0c      	subs	r4, r1, #4
 800c692:	2b00      	cmp	r3, #0
 800c694:	bfb8      	it	lt
 800c696:	18e4      	addlt	r4, r4, r3
 800c698:	f000 fc2a 	bl	800cef0 <__malloc_lock>
 800c69c:	4a1c      	ldr	r2, [pc, #112]	@ (800c710 <_free_r+0x8c>)
 800c69e:	6813      	ldr	r3, [r2, #0]
 800c6a0:	b933      	cbnz	r3, 800c6b0 <_free_r+0x2c>
 800c6a2:	6063      	str	r3, [r4, #4]
 800c6a4:	6014      	str	r4, [r2, #0]
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ac:	f000 bc26 	b.w	800cefc <__malloc_unlock>
 800c6b0:	42a3      	cmp	r3, r4
 800c6b2:	d908      	bls.n	800c6c6 <_free_r+0x42>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	1821      	adds	r1, r4, r0
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	bf01      	itttt	eq
 800c6bc:	6819      	ldreq	r1, [r3, #0]
 800c6be:	685b      	ldreq	r3, [r3, #4]
 800c6c0:	1809      	addeq	r1, r1, r0
 800c6c2:	6021      	streq	r1, [r4, #0]
 800c6c4:	e7ed      	b.n	800c6a2 <_free_r+0x1e>
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	b10b      	cbz	r3, 800c6d0 <_free_r+0x4c>
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d9fa      	bls.n	800c6c6 <_free_r+0x42>
 800c6d0:	6811      	ldr	r1, [r2, #0]
 800c6d2:	1850      	adds	r0, r2, r1
 800c6d4:	42a0      	cmp	r0, r4
 800c6d6:	d10b      	bne.n	800c6f0 <_free_r+0x6c>
 800c6d8:	6820      	ldr	r0, [r4, #0]
 800c6da:	4401      	add	r1, r0
 800c6dc:	1850      	adds	r0, r2, r1
 800c6de:	4283      	cmp	r3, r0
 800c6e0:	6011      	str	r1, [r2, #0]
 800c6e2:	d1e0      	bne.n	800c6a6 <_free_r+0x22>
 800c6e4:	6818      	ldr	r0, [r3, #0]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	4408      	add	r0, r1
 800c6ea:	6010      	str	r0, [r2, #0]
 800c6ec:	6053      	str	r3, [r2, #4]
 800c6ee:	e7da      	b.n	800c6a6 <_free_r+0x22>
 800c6f0:	d902      	bls.n	800c6f8 <_free_r+0x74>
 800c6f2:	230c      	movs	r3, #12
 800c6f4:	602b      	str	r3, [r5, #0]
 800c6f6:	e7d6      	b.n	800c6a6 <_free_r+0x22>
 800c6f8:	6820      	ldr	r0, [r4, #0]
 800c6fa:	1821      	adds	r1, r4, r0
 800c6fc:	428b      	cmp	r3, r1
 800c6fe:	bf01      	itttt	eq
 800c700:	6819      	ldreq	r1, [r3, #0]
 800c702:	685b      	ldreq	r3, [r3, #4]
 800c704:	1809      	addeq	r1, r1, r0
 800c706:	6021      	streq	r1, [r4, #0]
 800c708:	6063      	str	r3, [r4, #4]
 800c70a:	6054      	str	r4, [r2, #4]
 800c70c:	e7cb      	b.n	800c6a6 <_free_r+0x22>
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	20003ba8 	.word	0x20003ba8

0800c714 <rshift>:
 800c714:	6903      	ldr	r3, [r0, #16]
 800c716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c71a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c71e:	f100 0414 	add.w	r4, r0, #20
 800c722:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c726:	dd46      	ble.n	800c7b6 <rshift+0xa2>
 800c728:	f011 011f 	ands.w	r1, r1, #31
 800c72c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c734:	d10c      	bne.n	800c750 <rshift+0x3c>
 800c736:	4629      	mov	r1, r5
 800c738:	f100 0710 	add.w	r7, r0, #16
 800c73c:	42b1      	cmp	r1, r6
 800c73e:	d335      	bcc.n	800c7ac <rshift+0x98>
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	1eea      	subs	r2, r5, #3
 800c746:	4296      	cmp	r6, r2
 800c748:	bf38      	it	cc
 800c74a:	2300      	movcc	r3, #0
 800c74c:	4423      	add	r3, r4
 800c74e:	e015      	b.n	800c77c <rshift+0x68>
 800c750:	46a1      	mov	r9, r4
 800c752:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c756:	f1c1 0820 	rsb	r8, r1, #32
 800c75a:	40cf      	lsrs	r7, r1
 800c75c:	f105 0e04 	add.w	lr, r5, #4
 800c760:	4576      	cmp	r6, lr
 800c762:	46f4      	mov	ip, lr
 800c764:	d816      	bhi.n	800c794 <rshift+0x80>
 800c766:	1a9a      	subs	r2, r3, r2
 800c768:	0092      	lsls	r2, r2, #2
 800c76a:	3a04      	subs	r2, #4
 800c76c:	3501      	adds	r5, #1
 800c76e:	42ae      	cmp	r6, r5
 800c770:	bf38      	it	cc
 800c772:	2200      	movcc	r2, #0
 800c774:	18a3      	adds	r3, r4, r2
 800c776:	50a7      	str	r7, [r4, r2]
 800c778:	b107      	cbz	r7, 800c77c <rshift+0x68>
 800c77a:	3304      	adds	r3, #4
 800c77c:	42a3      	cmp	r3, r4
 800c77e:	eba3 0204 	sub.w	r2, r3, r4
 800c782:	bf08      	it	eq
 800c784:	2300      	moveq	r3, #0
 800c786:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c78a:	6102      	str	r2, [r0, #16]
 800c78c:	bf08      	it	eq
 800c78e:	6143      	streq	r3, [r0, #20]
 800c790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c794:	f8dc c000 	ldr.w	ip, [ip]
 800c798:	fa0c fc08 	lsl.w	ip, ip, r8
 800c79c:	ea4c 0707 	orr.w	r7, ip, r7
 800c7a0:	f849 7b04 	str.w	r7, [r9], #4
 800c7a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7a8:	40cf      	lsrs	r7, r1
 800c7aa:	e7d9      	b.n	800c760 <rshift+0x4c>
 800c7ac:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7b0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7b4:	e7c2      	b.n	800c73c <rshift+0x28>
 800c7b6:	4623      	mov	r3, r4
 800c7b8:	e7e0      	b.n	800c77c <rshift+0x68>

0800c7ba <__hexdig_fun>:
 800c7ba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c7be:	2b09      	cmp	r3, #9
 800c7c0:	d802      	bhi.n	800c7c8 <__hexdig_fun+0xe>
 800c7c2:	3820      	subs	r0, #32
 800c7c4:	b2c0      	uxtb	r0, r0
 800c7c6:	4770      	bx	lr
 800c7c8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c7cc:	2b05      	cmp	r3, #5
 800c7ce:	d801      	bhi.n	800c7d4 <__hexdig_fun+0x1a>
 800c7d0:	3847      	subs	r0, #71	@ 0x47
 800c7d2:	e7f7      	b.n	800c7c4 <__hexdig_fun+0xa>
 800c7d4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c7d8:	2b05      	cmp	r3, #5
 800c7da:	d801      	bhi.n	800c7e0 <__hexdig_fun+0x26>
 800c7dc:	3827      	subs	r0, #39	@ 0x27
 800c7de:	e7f1      	b.n	800c7c4 <__hexdig_fun+0xa>
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	4770      	bx	lr

0800c7e4 <__gethex>:
 800c7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e8:	468a      	mov	sl, r1
 800c7ea:	4690      	mov	r8, r2
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	9302      	str	r3, [sp, #8]
 800c7f0:	680b      	ldr	r3, [r1, #0]
 800c7f2:	9001      	str	r0, [sp, #4]
 800c7f4:	1c9c      	adds	r4, r3, #2
 800c7f6:	46a1      	mov	r9, r4
 800c7f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c7fc:	2830      	cmp	r0, #48	@ 0x30
 800c7fe:	d0fa      	beq.n	800c7f6 <__gethex+0x12>
 800c800:	eba9 0303 	sub.w	r3, r9, r3
 800c804:	f1a3 0b02 	sub.w	fp, r3, #2
 800c808:	f7ff ffd7 	bl	800c7ba <__hexdig_fun>
 800c80c:	4605      	mov	r5, r0
 800c80e:	2800      	cmp	r0, #0
 800c810:	d168      	bne.n	800c8e4 <__gethex+0x100>
 800c812:	2201      	movs	r2, #1
 800c814:	4648      	mov	r0, r9
 800c816:	499f      	ldr	r1, [pc, #636]	@ (800ca94 <__gethex+0x2b0>)
 800c818:	f7ff fe87 	bl	800c52a <strncmp>
 800c81c:	4607      	mov	r7, r0
 800c81e:	2800      	cmp	r0, #0
 800c820:	d167      	bne.n	800c8f2 <__gethex+0x10e>
 800c822:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c826:	4626      	mov	r6, r4
 800c828:	f7ff ffc7 	bl	800c7ba <__hexdig_fun>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d062      	beq.n	800c8f6 <__gethex+0x112>
 800c830:	4623      	mov	r3, r4
 800c832:	7818      	ldrb	r0, [r3, #0]
 800c834:	4699      	mov	r9, r3
 800c836:	2830      	cmp	r0, #48	@ 0x30
 800c838:	f103 0301 	add.w	r3, r3, #1
 800c83c:	d0f9      	beq.n	800c832 <__gethex+0x4e>
 800c83e:	f7ff ffbc 	bl	800c7ba <__hexdig_fun>
 800c842:	fab0 f580 	clz	r5, r0
 800c846:	f04f 0b01 	mov.w	fp, #1
 800c84a:	096d      	lsrs	r5, r5, #5
 800c84c:	464a      	mov	r2, r9
 800c84e:	4616      	mov	r6, r2
 800c850:	7830      	ldrb	r0, [r6, #0]
 800c852:	3201      	adds	r2, #1
 800c854:	f7ff ffb1 	bl	800c7ba <__hexdig_fun>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d1f8      	bne.n	800c84e <__gethex+0x6a>
 800c85c:	2201      	movs	r2, #1
 800c85e:	4630      	mov	r0, r6
 800c860:	498c      	ldr	r1, [pc, #560]	@ (800ca94 <__gethex+0x2b0>)
 800c862:	f7ff fe62 	bl	800c52a <strncmp>
 800c866:	2800      	cmp	r0, #0
 800c868:	d13f      	bne.n	800c8ea <__gethex+0x106>
 800c86a:	b944      	cbnz	r4, 800c87e <__gethex+0x9a>
 800c86c:	1c74      	adds	r4, r6, #1
 800c86e:	4622      	mov	r2, r4
 800c870:	4616      	mov	r6, r2
 800c872:	7830      	ldrb	r0, [r6, #0]
 800c874:	3201      	adds	r2, #1
 800c876:	f7ff ffa0 	bl	800c7ba <__hexdig_fun>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d1f8      	bne.n	800c870 <__gethex+0x8c>
 800c87e:	1ba4      	subs	r4, r4, r6
 800c880:	00a7      	lsls	r7, r4, #2
 800c882:	7833      	ldrb	r3, [r6, #0]
 800c884:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c888:	2b50      	cmp	r3, #80	@ 0x50
 800c88a:	d13e      	bne.n	800c90a <__gethex+0x126>
 800c88c:	7873      	ldrb	r3, [r6, #1]
 800c88e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c890:	d033      	beq.n	800c8fa <__gethex+0x116>
 800c892:	2b2d      	cmp	r3, #45	@ 0x2d
 800c894:	d034      	beq.n	800c900 <__gethex+0x11c>
 800c896:	2400      	movs	r4, #0
 800c898:	1c71      	adds	r1, r6, #1
 800c89a:	7808      	ldrb	r0, [r1, #0]
 800c89c:	f7ff ff8d 	bl	800c7ba <__hexdig_fun>
 800c8a0:	1e43      	subs	r3, r0, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b18      	cmp	r3, #24
 800c8a6:	d830      	bhi.n	800c90a <__gethex+0x126>
 800c8a8:	f1a0 0210 	sub.w	r2, r0, #16
 800c8ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8b0:	f7ff ff83 	bl	800c7ba <__hexdig_fun>
 800c8b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c8b8:	fa5f fc8c 	uxtb.w	ip, ip
 800c8bc:	f1bc 0f18 	cmp.w	ip, #24
 800c8c0:	f04f 030a 	mov.w	r3, #10
 800c8c4:	d91e      	bls.n	800c904 <__gethex+0x120>
 800c8c6:	b104      	cbz	r4, 800c8ca <__gethex+0xe6>
 800c8c8:	4252      	negs	r2, r2
 800c8ca:	4417      	add	r7, r2
 800c8cc:	f8ca 1000 	str.w	r1, [sl]
 800c8d0:	b1ed      	cbz	r5, 800c90e <__gethex+0x12a>
 800c8d2:	f1bb 0f00 	cmp.w	fp, #0
 800c8d6:	bf0c      	ite	eq
 800c8d8:	2506      	moveq	r5, #6
 800c8da:	2500      	movne	r5, #0
 800c8dc:	4628      	mov	r0, r5
 800c8de:	b005      	add	sp, #20
 800c8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e4:	2500      	movs	r5, #0
 800c8e6:	462c      	mov	r4, r5
 800c8e8:	e7b0      	b.n	800c84c <__gethex+0x68>
 800c8ea:	2c00      	cmp	r4, #0
 800c8ec:	d1c7      	bne.n	800c87e <__gethex+0x9a>
 800c8ee:	4627      	mov	r7, r4
 800c8f0:	e7c7      	b.n	800c882 <__gethex+0x9e>
 800c8f2:	464e      	mov	r6, r9
 800c8f4:	462f      	mov	r7, r5
 800c8f6:	2501      	movs	r5, #1
 800c8f8:	e7c3      	b.n	800c882 <__gethex+0x9e>
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	1cb1      	adds	r1, r6, #2
 800c8fe:	e7cc      	b.n	800c89a <__gethex+0xb6>
 800c900:	2401      	movs	r4, #1
 800c902:	e7fb      	b.n	800c8fc <__gethex+0x118>
 800c904:	fb03 0002 	mla	r0, r3, r2, r0
 800c908:	e7ce      	b.n	800c8a8 <__gethex+0xc4>
 800c90a:	4631      	mov	r1, r6
 800c90c:	e7de      	b.n	800c8cc <__gethex+0xe8>
 800c90e:	4629      	mov	r1, r5
 800c910:	eba6 0309 	sub.w	r3, r6, r9
 800c914:	3b01      	subs	r3, #1
 800c916:	2b07      	cmp	r3, #7
 800c918:	dc0a      	bgt.n	800c930 <__gethex+0x14c>
 800c91a:	9801      	ldr	r0, [sp, #4]
 800c91c:	f000 faf4 	bl	800cf08 <_Balloc>
 800c920:	4604      	mov	r4, r0
 800c922:	b940      	cbnz	r0, 800c936 <__gethex+0x152>
 800c924:	4602      	mov	r2, r0
 800c926:	21e4      	movs	r1, #228	@ 0xe4
 800c928:	4b5b      	ldr	r3, [pc, #364]	@ (800ca98 <__gethex+0x2b4>)
 800c92a:	485c      	ldr	r0, [pc, #368]	@ (800ca9c <__gethex+0x2b8>)
 800c92c:	f001 fb60 	bl	800dff0 <__assert_func>
 800c930:	3101      	adds	r1, #1
 800c932:	105b      	asrs	r3, r3, #1
 800c934:	e7ef      	b.n	800c916 <__gethex+0x132>
 800c936:	2300      	movs	r3, #0
 800c938:	f100 0a14 	add.w	sl, r0, #20
 800c93c:	4655      	mov	r5, sl
 800c93e:	469b      	mov	fp, r3
 800c940:	45b1      	cmp	r9, r6
 800c942:	d337      	bcc.n	800c9b4 <__gethex+0x1d0>
 800c944:	f845 bb04 	str.w	fp, [r5], #4
 800c948:	eba5 050a 	sub.w	r5, r5, sl
 800c94c:	10ad      	asrs	r5, r5, #2
 800c94e:	6125      	str	r5, [r4, #16]
 800c950:	4658      	mov	r0, fp
 800c952:	f000 fbcb 	bl	800d0ec <__hi0bits>
 800c956:	016d      	lsls	r5, r5, #5
 800c958:	f8d8 6000 	ldr.w	r6, [r8]
 800c95c:	1a2d      	subs	r5, r5, r0
 800c95e:	42b5      	cmp	r5, r6
 800c960:	dd54      	ble.n	800ca0c <__gethex+0x228>
 800c962:	1bad      	subs	r5, r5, r6
 800c964:	4629      	mov	r1, r5
 800c966:	4620      	mov	r0, r4
 800c968:	f000 ff4d 	bl	800d806 <__any_on>
 800c96c:	4681      	mov	r9, r0
 800c96e:	b178      	cbz	r0, 800c990 <__gethex+0x1ac>
 800c970:	f04f 0901 	mov.w	r9, #1
 800c974:	1e6b      	subs	r3, r5, #1
 800c976:	1159      	asrs	r1, r3, #5
 800c978:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c97c:	f003 021f 	and.w	r2, r3, #31
 800c980:	fa09 f202 	lsl.w	r2, r9, r2
 800c984:	420a      	tst	r2, r1
 800c986:	d003      	beq.n	800c990 <__gethex+0x1ac>
 800c988:	454b      	cmp	r3, r9
 800c98a:	dc36      	bgt.n	800c9fa <__gethex+0x216>
 800c98c:	f04f 0902 	mov.w	r9, #2
 800c990:	4629      	mov	r1, r5
 800c992:	4620      	mov	r0, r4
 800c994:	f7ff febe 	bl	800c714 <rshift>
 800c998:	442f      	add	r7, r5
 800c99a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c99e:	42bb      	cmp	r3, r7
 800c9a0:	da42      	bge.n	800ca28 <__gethex+0x244>
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	9801      	ldr	r0, [sp, #4]
 800c9a6:	f000 faef 	bl	800cf88 <_Bfree>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ae:	25a3      	movs	r5, #163	@ 0xa3
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	e793      	b.n	800c8dc <__gethex+0xf8>
 800c9b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c9b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c9ba:	d012      	beq.n	800c9e2 <__gethex+0x1fe>
 800c9bc:	2b20      	cmp	r3, #32
 800c9be:	d104      	bne.n	800c9ca <__gethex+0x1e6>
 800c9c0:	f845 bb04 	str.w	fp, [r5], #4
 800c9c4:	f04f 0b00 	mov.w	fp, #0
 800c9c8:	465b      	mov	r3, fp
 800c9ca:	7830      	ldrb	r0, [r6, #0]
 800c9cc:	9303      	str	r3, [sp, #12]
 800c9ce:	f7ff fef4 	bl	800c7ba <__hexdig_fun>
 800c9d2:	9b03      	ldr	r3, [sp, #12]
 800c9d4:	f000 000f 	and.w	r0, r0, #15
 800c9d8:	4098      	lsls	r0, r3
 800c9da:	ea4b 0b00 	orr.w	fp, fp, r0
 800c9de:	3304      	adds	r3, #4
 800c9e0:	e7ae      	b.n	800c940 <__gethex+0x15c>
 800c9e2:	45b1      	cmp	r9, r6
 800c9e4:	d8ea      	bhi.n	800c9bc <__gethex+0x1d8>
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	492a      	ldr	r1, [pc, #168]	@ (800ca94 <__gethex+0x2b0>)
 800c9ec:	9303      	str	r3, [sp, #12]
 800c9ee:	f7ff fd9c 	bl	800c52a <strncmp>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d1e1      	bne.n	800c9bc <__gethex+0x1d8>
 800c9f8:	e7a2      	b.n	800c940 <__gethex+0x15c>
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	1ea9      	subs	r1, r5, #2
 800c9fe:	f000 ff02 	bl	800d806 <__any_on>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d0c2      	beq.n	800c98c <__gethex+0x1a8>
 800ca06:	f04f 0903 	mov.w	r9, #3
 800ca0a:	e7c1      	b.n	800c990 <__gethex+0x1ac>
 800ca0c:	da09      	bge.n	800ca22 <__gethex+0x23e>
 800ca0e:	1b75      	subs	r5, r6, r5
 800ca10:	4621      	mov	r1, r4
 800ca12:	462a      	mov	r2, r5
 800ca14:	9801      	ldr	r0, [sp, #4]
 800ca16:	f000 fcc7 	bl	800d3a8 <__lshift>
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	1b7f      	subs	r7, r7, r5
 800ca1e:	f100 0a14 	add.w	sl, r0, #20
 800ca22:	f04f 0900 	mov.w	r9, #0
 800ca26:	e7b8      	b.n	800c99a <__gethex+0x1b6>
 800ca28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca2c:	42bd      	cmp	r5, r7
 800ca2e:	dd6f      	ble.n	800cb10 <__gethex+0x32c>
 800ca30:	1bed      	subs	r5, r5, r7
 800ca32:	42ae      	cmp	r6, r5
 800ca34:	dc34      	bgt.n	800caa0 <__gethex+0x2bc>
 800ca36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d022      	beq.n	800ca84 <__gethex+0x2a0>
 800ca3e:	2b03      	cmp	r3, #3
 800ca40:	d024      	beq.n	800ca8c <__gethex+0x2a8>
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d115      	bne.n	800ca72 <__gethex+0x28e>
 800ca46:	42ae      	cmp	r6, r5
 800ca48:	d113      	bne.n	800ca72 <__gethex+0x28e>
 800ca4a:	2e01      	cmp	r6, #1
 800ca4c:	d10b      	bne.n	800ca66 <__gethex+0x282>
 800ca4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca52:	9a02      	ldr	r2, [sp, #8]
 800ca54:	2562      	movs	r5, #98	@ 0x62
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	2301      	movs	r3, #1
 800ca5a:	6123      	str	r3, [r4, #16]
 800ca5c:	f8ca 3000 	str.w	r3, [sl]
 800ca60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca62:	601c      	str	r4, [r3, #0]
 800ca64:	e73a      	b.n	800c8dc <__gethex+0xf8>
 800ca66:	4620      	mov	r0, r4
 800ca68:	1e71      	subs	r1, r6, #1
 800ca6a:	f000 fecc 	bl	800d806 <__any_on>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d1ed      	bne.n	800ca4e <__gethex+0x26a>
 800ca72:	4621      	mov	r1, r4
 800ca74:	9801      	ldr	r0, [sp, #4]
 800ca76:	f000 fa87 	bl	800cf88 <_Bfree>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca7e:	2550      	movs	r5, #80	@ 0x50
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	e72b      	b.n	800c8dc <__gethex+0xf8>
 800ca84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1f3      	bne.n	800ca72 <__gethex+0x28e>
 800ca8a:	e7e0      	b.n	800ca4e <__gethex+0x26a>
 800ca8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1dd      	bne.n	800ca4e <__gethex+0x26a>
 800ca92:	e7ee      	b.n	800ca72 <__gethex+0x28e>
 800ca94:	0800f822 	.word	0x0800f822
 800ca98:	0800f838 	.word	0x0800f838
 800ca9c:	0800f849 	.word	0x0800f849
 800caa0:	1e6f      	subs	r7, r5, #1
 800caa2:	f1b9 0f00 	cmp.w	r9, #0
 800caa6:	d130      	bne.n	800cb0a <__gethex+0x326>
 800caa8:	b127      	cbz	r7, 800cab4 <__gethex+0x2d0>
 800caaa:	4639      	mov	r1, r7
 800caac:	4620      	mov	r0, r4
 800caae:	f000 feaa 	bl	800d806 <__any_on>
 800cab2:	4681      	mov	r9, r0
 800cab4:	2301      	movs	r3, #1
 800cab6:	4629      	mov	r1, r5
 800cab8:	1b76      	subs	r6, r6, r5
 800caba:	2502      	movs	r5, #2
 800cabc:	117a      	asrs	r2, r7, #5
 800cabe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cac2:	f007 071f 	and.w	r7, r7, #31
 800cac6:	40bb      	lsls	r3, r7
 800cac8:	4213      	tst	r3, r2
 800caca:	4620      	mov	r0, r4
 800cacc:	bf18      	it	ne
 800cace:	f049 0902 	orrne.w	r9, r9, #2
 800cad2:	f7ff fe1f 	bl	800c714 <rshift>
 800cad6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cada:	f1b9 0f00 	cmp.w	r9, #0
 800cade:	d047      	beq.n	800cb70 <__gethex+0x38c>
 800cae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d015      	beq.n	800cb14 <__gethex+0x330>
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d017      	beq.n	800cb1c <__gethex+0x338>
 800caec:	2b01      	cmp	r3, #1
 800caee:	d109      	bne.n	800cb04 <__gethex+0x320>
 800caf0:	f019 0f02 	tst.w	r9, #2
 800caf4:	d006      	beq.n	800cb04 <__gethex+0x320>
 800caf6:	f8da 3000 	ldr.w	r3, [sl]
 800cafa:	ea49 0903 	orr.w	r9, r9, r3
 800cafe:	f019 0f01 	tst.w	r9, #1
 800cb02:	d10e      	bne.n	800cb22 <__gethex+0x33e>
 800cb04:	f045 0510 	orr.w	r5, r5, #16
 800cb08:	e032      	b.n	800cb70 <__gethex+0x38c>
 800cb0a:	f04f 0901 	mov.w	r9, #1
 800cb0e:	e7d1      	b.n	800cab4 <__gethex+0x2d0>
 800cb10:	2501      	movs	r5, #1
 800cb12:	e7e2      	b.n	800cada <__gethex+0x2f6>
 800cb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb16:	f1c3 0301 	rsb	r3, r3, #1
 800cb1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0f0      	beq.n	800cb04 <__gethex+0x320>
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cb2a:	f104 0314 	add.w	r3, r4, #20
 800cb2e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cb32:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cb36:	4618      	mov	r0, r3
 800cb38:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cb40:	d01b      	beq.n	800cb7a <__gethex+0x396>
 800cb42:	3201      	adds	r2, #1
 800cb44:	6002      	str	r2, [r0, #0]
 800cb46:	2d02      	cmp	r5, #2
 800cb48:	f104 0314 	add.w	r3, r4, #20
 800cb4c:	d13c      	bne.n	800cbc8 <__gethex+0x3e4>
 800cb4e:	f8d8 2000 	ldr.w	r2, [r8]
 800cb52:	3a01      	subs	r2, #1
 800cb54:	42b2      	cmp	r2, r6
 800cb56:	d109      	bne.n	800cb6c <__gethex+0x388>
 800cb58:	2201      	movs	r2, #1
 800cb5a:	1171      	asrs	r1, r6, #5
 800cb5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb60:	f006 061f 	and.w	r6, r6, #31
 800cb64:	fa02 f606 	lsl.w	r6, r2, r6
 800cb68:	421e      	tst	r6, r3
 800cb6a:	d13a      	bne.n	800cbe2 <__gethex+0x3fe>
 800cb6c:	f045 0520 	orr.w	r5, r5, #32
 800cb70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb72:	601c      	str	r4, [r3, #0]
 800cb74:	9b02      	ldr	r3, [sp, #8]
 800cb76:	601f      	str	r7, [r3, #0]
 800cb78:	e6b0      	b.n	800c8dc <__gethex+0xf8>
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb80:	d8d9      	bhi.n	800cb36 <__gethex+0x352>
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	459b      	cmp	fp, r3
 800cb86:	db17      	blt.n	800cbb8 <__gethex+0x3d4>
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	9801      	ldr	r0, [sp, #4]
 800cb8c:	3101      	adds	r1, #1
 800cb8e:	f000 f9bb 	bl	800cf08 <_Balloc>
 800cb92:	4681      	mov	r9, r0
 800cb94:	b918      	cbnz	r0, 800cb9e <__gethex+0x3ba>
 800cb96:	4602      	mov	r2, r0
 800cb98:	2184      	movs	r1, #132	@ 0x84
 800cb9a:	4b19      	ldr	r3, [pc, #100]	@ (800cc00 <__gethex+0x41c>)
 800cb9c:	e6c5      	b.n	800c92a <__gethex+0x146>
 800cb9e:	6922      	ldr	r2, [r4, #16]
 800cba0:	f104 010c 	add.w	r1, r4, #12
 800cba4:	3202      	adds	r2, #2
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	300c      	adds	r0, #12
 800cbaa:	f7ff fd56 	bl	800c65a <memcpy>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	9801      	ldr	r0, [sp, #4]
 800cbb2:	f000 f9e9 	bl	800cf88 <_Bfree>
 800cbb6:	464c      	mov	r4, r9
 800cbb8:	6923      	ldr	r3, [r4, #16]
 800cbba:	1c5a      	adds	r2, r3, #1
 800cbbc:	6122      	str	r2, [r4, #16]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cbc4:	615a      	str	r2, [r3, #20]
 800cbc6:	e7be      	b.n	800cb46 <__gethex+0x362>
 800cbc8:	6922      	ldr	r2, [r4, #16]
 800cbca:	455a      	cmp	r2, fp
 800cbcc:	dd0b      	ble.n	800cbe6 <__gethex+0x402>
 800cbce:	2101      	movs	r1, #1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f7ff fd9f 	bl	800c714 <rshift>
 800cbd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbda:	3701      	adds	r7, #1
 800cbdc:	42bb      	cmp	r3, r7
 800cbde:	f6ff aee0 	blt.w	800c9a2 <__gethex+0x1be>
 800cbe2:	2501      	movs	r5, #1
 800cbe4:	e7c2      	b.n	800cb6c <__gethex+0x388>
 800cbe6:	f016 061f 	ands.w	r6, r6, #31
 800cbea:	d0fa      	beq.n	800cbe2 <__gethex+0x3fe>
 800cbec:	4453      	add	r3, sl
 800cbee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cbf2:	f000 fa7b 	bl	800d0ec <__hi0bits>
 800cbf6:	f1c6 0620 	rsb	r6, r6, #32
 800cbfa:	42b0      	cmp	r0, r6
 800cbfc:	dbe7      	blt.n	800cbce <__gethex+0x3ea>
 800cbfe:	e7f0      	b.n	800cbe2 <__gethex+0x3fe>
 800cc00:	0800f838 	.word	0x0800f838

0800cc04 <L_shift>:
 800cc04:	f1c2 0208 	rsb	r2, r2, #8
 800cc08:	0092      	lsls	r2, r2, #2
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	f1c2 0620 	rsb	r6, r2, #32
 800cc10:	6843      	ldr	r3, [r0, #4]
 800cc12:	6804      	ldr	r4, [r0, #0]
 800cc14:	fa03 f506 	lsl.w	r5, r3, r6
 800cc18:	432c      	orrs	r4, r5
 800cc1a:	40d3      	lsrs	r3, r2
 800cc1c:	6004      	str	r4, [r0, #0]
 800cc1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc22:	4288      	cmp	r0, r1
 800cc24:	d3f4      	bcc.n	800cc10 <L_shift+0xc>
 800cc26:	bd70      	pop	{r4, r5, r6, pc}

0800cc28 <__match>:
 800cc28:	b530      	push	{r4, r5, lr}
 800cc2a:	6803      	ldr	r3, [r0, #0]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc32:	b914      	cbnz	r4, 800cc3a <__match+0x12>
 800cc34:	6003      	str	r3, [r0, #0]
 800cc36:	2001      	movs	r0, #1
 800cc38:	bd30      	pop	{r4, r5, pc}
 800cc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cc42:	2d19      	cmp	r5, #25
 800cc44:	bf98      	it	ls
 800cc46:	3220      	addls	r2, #32
 800cc48:	42a2      	cmp	r2, r4
 800cc4a:	d0f0      	beq.n	800cc2e <__match+0x6>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	e7f3      	b.n	800cc38 <__match+0x10>

0800cc50 <__hexnan>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	2500      	movs	r5, #0
 800cc56:	680b      	ldr	r3, [r1, #0]
 800cc58:	4682      	mov	sl, r0
 800cc5a:	115e      	asrs	r6, r3, #5
 800cc5c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cc60:	f013 031f 	ands.w	r3, r3, #31
 800cc64:	bf18      	it	ne
 800cc66:	3604      	addne	r6, #4
 800cc68:	1f37      	subs	r7, r6, #4
 800cc6a:	4690      	mov	r8, r2
 800cc6c:	46b9      	mov	r9, r7
 800cc6e:	463c      	mov	r4, r7
 800cc70:	46ab      	mov	fp, r5
 800cc72:	b087      	sub	sp, #28
 800cc74:	6801      	ldr	r1, [r0, #0]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	f846 5c04 	str.w	r5, [r6, #-4]
 800cc7c:	9502      	str	r5, [sp, #8]
 800cc7e:	784a      	ldrb	r2, [r1, #1]
 800cc80:	1c4b      	adds	r3, r1, #1
 800cc82:	9303      	str	r3, [sp, #12]
 800cc84:	b342      	cbz	r2, 800ccd8 <__hexnan+0x88>
 800cc86:	4610      	mov	r0, r2
 800cc88:	9105      	str	r1, [sp, #20]
 800cc8a:	9204      	str	r2, [sp, #16]
 800cc8c:	f7ff fd95 	bl	800c7ba <__hexdig_fun>
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d151      	bne.n	800cd38 <__hexnan+0xe8>
 800cc94:	9a04      	ldr	r2, [sp, #16]
 800cc96:	9905      	ldr	r1, [sp, #20]
 800cc98:	2a20      	cmp	r2, #32
 800cc9a:	d818      	bhi.n	800ccce <__hexnan+0x7e>
 800cc9c:	9b02      	ldr	r3, [sp, #8]
 800cc9e:	459b      	cmp	fp, r3
 800cca0:	dd13      	ble.n	800ccca <__hexnan+0x7a>
 800cca2:	454c      	cmp	r4, r9
 800cca4:	d206      	bcs.n	800ccb4 <__hexnan+0x64>
 800cca6:	2d07      	cmp	r5, #7
 800cca8:	dc04      	bgt.n	800ccb4 <__hexnan+0x64>
 800ccaa:	462a      	mov	r2, r5
 800ccac:	4649      	mov	r1, r9
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f7ff ffa8 	bl	800cc04 <L_shift>
 800ccb4:	4544      	cmp	r4, r8
 800ccb6:	d952      	bls.n	800cd5e <__hexnan+0x10e>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f1a4 0904 	sub.w	r9, r4, #4
 800ccbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccc2:	461d      	mov	r5, r3
 800ccc4:	464c      	mov	r4, r9
 800ccc6:	f8cd b008 	str.w	fp, [sp, #8]
 800ccca:	9903      	ldr	r1, [sp, #12]
 800cccc:	e7d7      	b.n	800cc7e <__hexnan+0x2e>
 800ccce:	2a29      	cmp	r2, #41	@ 0x29
 800ccd0:	d157      	bne.n	800cd82 <__hexnan+0x132>
 800ccd2:	3102      	adds	r1, #2
 800ccd4:	f8ca 1000 	str.w	r1, [sl]
 800ccd8:	f1bb 0f00 	cmp.w	fp, #0
 800ccdc:	d051      	beq.n	800cd82 <__hexnan+0x132>
 800ccde:	454c      	cmp	r4, r9
 800cce0:	d206      	bcs.n	800ccf0 <__hexnan+0xa0>
 800cce2:	2d07      	cmp	r5, #7
 800cce4:	dc04      	bgt.n	800ccf0 <__hexnan+0xa0>
 800cce6:	462a      	mov	r2, r5
 800cce8:	4649      	mov	r1, r9
 800ccea:	4620      	mov	r0, r4
 800ccec:	f7ff ff8a 	bl	800cc04 <L_shift>
 800ccf0:	4544      	cmp	r4, r8
 800ccf2:	d936      	bls.n	800cd62 <__hexnan+0x112>
 800ccf4:	4623      	mov	r3, r4
 800ccf6:	f1a8 0204 	sub.w	r2, r8, #4
 800ccfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ccfe:	429f      	cmp	r7, r3
 800cd00:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd04:	d2f9      	bcs.n	800ccfa <__hexnan+0xaa>
 800cd06:	1b3b      	subs	r3, r7, r4
 800cd08:	f023 0303 	bic.w	r3, r3, #3
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	3401      	adds	r4, #1
 800cd10:	3e03      	subs	r6, #3
 800cd12:	42b4      	cmp	r4, r6
 800cd14:	bf88      	it	hi
 800cd16:	2304      	movhi	r3, #4
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4443      	add	r3, r8
 800cd1c:	f843 2b04 	str.w	r2, [r3], #4
 800cd20:	429f      	cmp	r7, r3
 800cd22:	d2fb      	bcs.n	800cd1c <__hexnan+0xcc>
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	b91b      	cbnz	r3, 800cd30 <__hexnan+0xe0>
 800cd28:	4547      	cmp	r7, r8
 800cd2a:	d128      	bne.n	800cd7e <__hexnan+0x12e>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	2005      	movs	r0, #5
 800cd32:	b007      	add	sp, #28
 800cd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd38:	3501      	adds	r5, #1
 800cd3a:	2d08      	cmp	r5, #8
 800cd3c:	f10b 0b01 	add.w	fp, fp, #1
 800cd40:	dd06      	ble.n	800cd50 <__hexnan+0x100>
 800cd42:	4544      	cmp	r4, r8
 800cd44:	d9c1      	bls.n	800ccca <__hexnan+0x7a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	2501      	movs	r5, #1
 800cd4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd4e:	3c04      	subs	r4, #4
 800cd50:	6822      	ldr	r2, [r4, #0]
 800cd52:	f000 000f 	and.w	r0, r0, #15
 800cd56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd5a:	6020      	str	r0, [r4, #0]
 800cd5c:	e7b5      	b.n	800ccca <__hexnan+0x7a>
 800cd5e:	2508      	movs	r5, #8
 800cd60:	e7b3      	b.n	800ccca <__hexnan+0x7a>
 800cd62:	9b01      	ldr	r3, [sp, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d0dd      	beq.n	800cd24 <__hexnan+0xd4>
 800cd68:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6c:	f1c3 0320 	rsb	r3, r3, #32
 800cd70:	40da      	lsrs	r2, r3
 800cd72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cd76:	4013      	ands	r3, r2
 800cd78:	f846 3c04 	str.w	r3, [r6, #-4]
 800cd7c:	e7d2      	b.n	800cd24 <__hexnan+0xd4>
 800cd7e:	3f04      	subs	r7, #4
 800cd80:	e7d0      	b.n	800cd24 <__hexnan+0xd4>
 800cd82:	2004      	movs	r0, #4
 800cd84:	e7d5      	b.n	800cd32 <__hexnan+0xe2>
	...

0800cd88 <sbrk_aligned>:
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	4e0f      	ldr	r6, [pc, #60]	@ (800cdc8 <sbrk_aligned+0x40>)
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	6831      	ldr	r1, [r6, #0]
 800cd90:	4605      	mov	r5, r0
 800cd92:	b911      	cbnz	r1, 800cd9a <sbrk_aligned+0x12>
 800cd94:	f001 f90e 	bl	800dfb4 <_sbrk_r>
 800cd98:	6030      	str	r0, [r6, #0]
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	f001 f909 	bl	800dfb4 <_sbrk_r>
 800cda2:	1c43      	adds	r3, r0, #1
 800cda4:	d103      	bne.n	800cdae <sbrk_aligned+0x26>
 800cda6:	f04f 34ff 	mov.w	r4, #4294967295
 800cdaa:	4620      	mov	r0, r4
 800cdac:	bd70      	pop	{r4, r5, r6, pc}
 800cdae:	1cc4      	adds	r4, r0, #3
 800cdb0:	f024 0403 	bic.w	r4, r4, #3
 800cdb4:	42a0      	cmp	r0, r4
 800cdb6:	d0f8      	beq.n	800cdaa <sbrk_aligned+0x22>
 800cdb8:	1a21      	subs	r1, r4, r0
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f001 f8fa 	bl	800dfb4 <_sbrk_r>
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	d1f2      	bne.n	800cdaa <sbrk_aligned+0x22>
 800cdc4:	e7ef      	b.n	800cda6 <sbrk_aligned+0x1e>
 800cdc6:	bf00      	nop
 800cdc8:	20003ba4 	.word	0x20003ba4

0800cdcc <_malloc_r>:
 800cdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd0:	1ccd      	adds	r5, r1, #3
 800cdd2:	f025 0503 	bic.w	r5, r5, #3
 800cdd6:	3508      	adds	r5, #8
 800cdd8:	2d0c      	cmp	r5, #12
 800cdda:	bf38      	it	cc
 800cddc:	250c      	movcc	r5, #12
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	4606      	mov	r6, r0
 800cde2:	db01      	blt.n	800cde8 <_malloc_r+0x1c>
 800cde4:	42a9      	cmp	r1, r5
 800cde6:	d904      	bls.n	800cdf2 <_malloc_r+0x26>
 800cde8:	230c      	movs	r3, #12
 800cdea:	6033      	str	r3, [r6, #0]
 800cdec:	2000      	movs	r0, #0
 800cdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cec8 <_malloc_r+0xfc>
 800cdf6:	f000 f87b 	bl	800cef0 <__malloc_lock>
 800cdfa:	f8d8 3000 	ldr.w	r3, [r8]
 800cdfe:	461c      	mov	r4, r3
 800ce00:	bb44      	cbnz	r4, 800ce54 <_malloc_r+0x88>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7ff ffbf 	bl	800cd88 <sbrk_aligned>
 800ce0a:	1c43      	adds	r3, r0, #1
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	d158      	bne.n	800cec2 <_malloc_r+0xf6>
 800ce10:	f8d8 4000 	ldr.w	r4, [r8]
 800ce14:	4627      	mov	r7, r4
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	d143      	bne.n	800cea2 <_malloc_r+0xd6>
 800ce1a:	2c00      	cmp	r4, #0
 800ce1c:	d04b      	beq.n	800ceb6 <_malloc_r+0xea>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	4639      	mov	r1, r7
 800ce22:	4630      	mov	r0, r6
 800ce24:	eb04 0903 	add.w	r9, r4, r3
 800ce28:	f001 f8c4 	bl	800dfb4 <_sbrk_r>
 800ce2c:	4581      	cmp	r9, r0
 800ce2e:	d142      	bne.n	800ceb6 <_malloc_r+0xea>
 800ce30:	6821      	ldr	r1, [r4, #0]
 800ce32:	4630      	mov	r0, r6
 800ce34:	1a6d      	subs	r5, r5, r1
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7ff ffa6 	bl	800cd88 <sbrk_aligned>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d03a      	beq.n	800ceb6 <_malloc_r+0xea>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	442b      	add	r3, r5
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	f8d8 3000 	ldr.w	r3, [r8]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	bb62      	cbnz	r2, 800cea8 <_malloc_r+0xdc>
 800ce4e:	f8c8 7000 	str.w	r7, [r8]
 800ce52:	e00f      	b.n	800ce74 <_malloc_r+0xa8>
 800ce54:	6822      	ldr	r2, [r4, #0]
 800ce56:	1b52      	subs	r2, r2, r5
 800ce58:	d420      	bmi.n	800ce9c <_malloc_r+0xd0>
 800ce5a:	2a0b      	cmp	r2, #11
 800ce5c:	d917      	bls.n	800ce8e <_malloc_r+0xc2>
 800ce5e:	1961      	adds	r1, r4, r5
 800ce60:	42a3      	cmp	r3, r4
 800ce62:	6025      	str	r5, [r4, #0]
 800ce64:	bf18      	it	ne
 800ce66:	6059      	strne	r1, [r3, #4]
 800ce68:	6863      	ldr	r3, [r4, #4]
 800ce6a:	bf08      	it	eq
 800ce6c:	f8c8 1000 	streq.w	r1, [r8]
 800ce70:	5162      	str	r2, [r4, r5]
 800ce72:	604b      	str	r3, [r1, #4]
 800ce74:	4630      	mov	r0, r6
 800ce76:	f000 f841 	bl	800cefc <__malloc_unlock>
 800ce7a:	f104 000b 	add.w	r0, r4, #11
 800ce7e:	1d23      	adds	r3, r4, #4
 800ce80:	f020 0007 	bic.w	r0, r0, #7
 800ce84:	1ac2      	subs	r2, r0, r3
 800ce86:	bf1c      	itt	ne
 800ce88:	1a1b      	subne	r3, r3, r0
 800ce8a:	50a3      	strne	r3, [r4, r2]
 800ce8c:	e7af      	b.n	800cdee <_malloc_r+0x22>
 800ce8e:	6862      	ldr	r2, [r4, #4]
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	bf0c      	ite	eq
 800ce94:	f8c8 2000 	streq.w	r2, [r8]
 800ce98:	605a      	strne	r2, [r3, #4]
 800ce9a:	e7eb      	b.n	800ce74 <_malloc_r+0xa8>
 800ce9c:	4623      	mov	r3, r4
 800ce9e:	6864      	ldr	r4, [r4, #4]
 800cea0:	e7ae      	b.n	800ce00 <_malloc_r+0x34>
 800cea2:	463c      	mov	r4, r7
 800cea4:	687f      	ldr	r7, [r7, #4]
 800cea6:	e7b6      	b.n	800ce16 <_malloc_r+0x4a>
 800cea8:	461a      	mov	r2, r3
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d1fb      	bne.n	800cea8 <_malloc_r+0xdc>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6053      	str	r3, [r2, #4]
 800ceb4:	e7de      	b.n	800ce74 <_malloc_r+0xa8>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	4630      	mov	r0, r6
 800ceba:	6033      	str	r3, [r6, #0]
 800cebc:	f000 f81e 	bl	800cefc <__malloc_unlock>
 800cec0:	e794      	b.n	800cdec <_malloc_r+0x20>
 800cec2:	6005      	str	r5, [r0, #0]
 800cec4:	e7d6      	b.n	800ce74 <_malloc_r+0xa8>
 800cec6:	bf00      	nop
 800cec8:	20003ba8 	.word	0x20003ba8

0800cecc <__ascii_mbtowc>:
 800cecc:	b082      	sub	sp, #8
 800cece:	b901      	cbnz	r1, 800ced2 <__ascii_mbtowc+0x6>
 800ced0:	a901      	add	r1, sp, #4
 800ced2:	b142      	cbz	r2, 800cee6 <__ascii_mbtowc+0x1a>
 800ced4:	b14b      	cbz	r3, 800ceea <__ascii_mbtowc+0x1e>
 800ced6:	7813      	ldrb	r3, [r2, #0]
 800ced8:	600b      	str	r3, [r1, #0]
 800ceda:	7812      	ldrb	r2, [r2, #0]
 800cedc:	1e10      	subs	r0, r2, #0
 800cede:	bf18      	it	ne
 800cee0:	2001      	movne	r0, #1
 800cee2:	b002      	add	sp, #8
 800cee4:	4770      	bx	lr
 800cee6:	4610      	mov	r0, r2
 800cee8:	e7fb      	b.n	800cee2 <__ascii_mbtowc+0x16>
 800ceea:	f06f 0001 	mvn.w	r0, #1
 800ceee:	e7f8      	b.n	800cee2 <__ascii_mbtowc+0x16>

0800cef0 <__malloc_lock>:
 800cef0:	4801      	ldr	r0, [pc, #4]	@ (800cef8 <__malloc_lock+0x8>)
 800cef2:	f7ff bbb0 	b.w	800c656 <__retarget_lock_acquire_recursive>
 800cef6:	bf00      	nop
 800cef8:	20003ba0 	.word	0x20003ba0

0800cefc <__malloc_unlock>:
 800cefc:	4801      	ldr	r0, [pc, #4]	@ (800cf04 <__malloc_unlock+0x8>)
 800cefe:	f7ff bbab 	b.w	800c658 <__retarget_lock_release_recursive>
 800cf02:	bf00      	nop
 800cf04:	20003ba0 	.word	0x20003ba0

0800cf08 <_Balloc>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	69c6      	ldr	r6, [r0, #28]
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	460d      	mov	r5, r1
 800cf10:	b976      	cbnz	r6, 800cf30 <_Balloc+0x28>
 800cf12:	2010      	movs	r0, #16
 800cf14:	f001 f89e 	bl	800e054 <malloc>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	61e0      	str	r0, [r4, #28]
 800cf1c:	b920      	cbnz	r0, 800cf28 <_Balloc+0x20>
 800cf1e:	216b      	movs	r1, #107	@ 0x6b
 800cf20:	4b17      	ldr	r3, [pc, #92]	@ (800cf80 <_Balloc+0x78>)
 800cf22:	4818      	ldr	r0, [pc, #96]	@ (800cf84 <_Balloc+0x7c>)
 800cf24:	f001 f864 	bl	800dff0 <__assert_func>
 800cf28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf2c:	6006      	str	r6, [r0, #0]
 800cf2e:	60c6      	str	r6, [r0, #12]
 800cf30:	69e6      	ldr	r6, [r4, #28]
 800cf32:	68f3      	ldr	r3, [r6, #12]
 800cf34:	b183      	cbz	r3, 800cf58 <_Balloc+0x50>
 800cf36:	69e3      	ldr	r3, [r4, #28]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf3e:	b9b8      	cbnz	r0, 800cf70 <_Balloc+0x68>
 800cf40:	2101      	movs	r1, #1
 800cf42:	fa01 f605 	lsl.w	r6, r1, r5
 800cf46:	1d72      	adds	r2, r6, #5
 800cf48:	4620      	mov	r0, r4
 800cf4a:	0092      	lsls	r2, r2, #2
 800cf4c:	f001 f86e 	bl	800e02c <_calloc_r>
 800cf50:	b160      	cbz	r0, 800cf6c <_Balloc+0x64>
 800cf52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf56:	e00e      	b.n	800cf76 <_Balloc+0x6e>
 800cf58:	2221      	movs	r2, #33	@ 0x21
 800cf5a:	2104      	movs	r1, #4
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f001 f865 	bl	800e02c <_calloc_r>
 800cf62:	69e3      	ldr	r3, [r4, #28]
 800cf64:	60f0      	str	r0, [r6, #12]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1e4      	bne.n	800cf36 <_Balloc+0x2e>
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	6802      	ldr	r2, [r0, #0]
 800cf72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf76:	2300      	movs	r3, #0
 800cf78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf7c:	e7f7      	b.n	800cf6e <_Balloc+0x66>
 800cf7e:	bf00      	nop
 800cf80:	0800f8a9 	.word	0x0800f8a9
 800cf84:	0800f8c0 	.word	0x0800f8c0

0800cf88 <_Bfree>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	69c6      	ldr	r6, [r0, #28]
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	b976      	cbnz	r6, 800cfb0 <_Bfree+0x28>
 800cf92:	2010      	movs	r0, #16
 800cf94:	f001 f85e 	bl	800e054 <malloc>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	61e8      	str	r0, [r5, #28]
 800cf9c:	b920      	cbnz	r0, 800cfa8 <_Bfree+0x20>
 800cf9e:	218f      	movs	r1, #143	@ 0x8f
 800cfa0:	4b08      	ldr	r3, [pc, #32]	@ (800cfc4 <_Bfree+0x3c>)
 800cfa2:	4809      	ldr	r0, [pc, #36]	@ (800cfc8 <_Bfree+0x40>)
 800cfa4:	f001 f824 	bl	800dff0 <__assert_func>
 800cfa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfac:	6006      	str	r6, [r0, #0]
 800cfae:	60c6      	str	r6, [r0, #12]
 800cfb0:	b13c      	cbz	r4, 800cfc2 <_Bfree+0x3a>
 800cfb2:	69eb      	ldr	r3, [r5, #28]
 800cfb4:	6862      	ldr	r2, [r4, #4]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfbc:	6021      	str	r1, [r4, #0]
 800cfbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	0800f8a9 	.word	0x0800f8a9
 800cfc8:	0800f8c0 	.word	0x0800f8c0

0800cfcc <__multadd>:
 800cfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	461e      	mov	r6, r3
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	690d      	ldr	r5, [r1, #16]
 800cfda:	f101 0c14 	add.w	ip, r1, #20
 800cfde:	f8dc 3000 	ldr.w	r3, [ip]
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	b299      	uxth	r1, r3
 800cfe6:	fb02 6101 	mla	r1, r2, r1, r6
 800cfea:	0c1e      	lsrs	r6, r3, #16
 800cfec:	0c0b      	lsrs	r3, r1, #16
 800cfee:	fb02 3306 	mla	r3, r2, r6, r3
 800cff2:	b289      	uxth	r1, r1
 800cff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cff8:	4285      	cmp	r5, r0
 800cffa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cffe:	f84c 1b04 	str.w	r1, [ip], #4
 800d002:	dcec      	bgt.n	800cfde <__multadd+0x12>
 800d004:	b30e      	cbz	r6, 800d04a <__multadd+0x7e>
 800d006:	68a3      	ldr	r3, [r4, #8]
 800d008:	42ab      	cmp	r3, r5
 800d00a:	dc19      	bgt.n	800d040 <__multadd+0x74>
 800d00c:	6861      	ldr	r1, [r4, #4]
 800d00e:	4638      	mov	r0, r7
 800d010:	3101      	adds	r1, #1
 800d012:	f7ff ff79 	bl	800cf08 <_Balloc>
 800d016:	4680      	mov	r8, r0
 800d018:	b928      	cbnz	r0, 800d026 <__multadd+0x5a>
 800d01a:	4602      	mov	r2, r0
 800d01c:	21ba      	movs	r1, #186	@ 0xba
 800d01e:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <__multadd+0x84>)
 800d020:	480c      	ldr	r0, [pc, #48]	@ (800d054 <__multadd+0x88>)
 800d022:	f000 ffe5 	bl	800dff0 <__assert_func>
 800d026:	6922      	ldr	r2, [r4, #16]
 800d028:	f104 010c 	add.w	r1, r4, #12
 800d02c:	3202      	adds	r2, #2
 800d02e:	0092      	lsls	r2, r2, #2
 800d030:	300c      	adds	r0, #12
 800d032:	f7ff fb12 	bl	800c65a <memcpy>
 800d036:	4621      	mov	r1, r4
 800d038:	4638      	mov	r0, r7
 800d03a:	f7ff ffa5 	bl	800cf88 <_Bfree>
 800d03e:	4644      	mov	r4, r8
 800d040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d044:	3501      	adds	r5, #1
 800d046:	615e      	str	r6, [r3, #20]
 800d048:	6125      	str	r5, [r4, #16]
 800d04a:	4620      	mov	r0, r4
 800d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d050:	0800f838 	.word	0x0800f838
 800d054:	0800f8c0 	.word	0x0800f8c0

0800d058 <__s2b>:
 800d058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05c:	4615      	mov	r5, r2
 800d05e:	2209      	movs	r2, #9
 800d060:	461f      	mov	r7, r3
 800d062:	3308      	adds	r3, #8
 800d064:	460c      	mov	r4, r1
 800d066:	fb93 f3f2 	sdiv	r3, r3, r2
 800d06a:	4606      	mov	r6, r0
 800d06c:	2201      	movs	r2, #1
 800d06e:	2100      	movs	r1, #0
 800d070:	429a      	cmp	r2, r3
 800d072:	db09      	blt.n	800d088 <__s2b+0x30>
 800d074:	4630      	mov	r0, r6
 800d076:	f7ff ff47 	bl	800cf08 <_Balloc>
 800d07a:	b940      	cbnz	r0, 800d08e <__s2b+0x36>
 800d07c:	4602      	mov	r2, r0
 800d07e:	21d3      	movs	r1, #211	@ 0xd3
 800d080:	4b18      	ldr	r3, [pc, #96]	@ (800d0e4 <__s2b+0x8c>)
 800d082:	4819      	ldr	r0, [pc, #100]	@ (800d0e8 <__s2b+0x90>)
 800d084:	f000 ffb4 	bl	800dff0 <__assert_func>
 800d088:	0052      	lsls	r2, r2, #1
 800d08a:	3101      	adds	r1, #1
 800d08c:	e7f0      	b.n	800d070 <__s2b+0x18>
 800d08e:	9b08      	ldr	r3, [sp, #32]
 800d090:	2d09      	cmp	r5, #9
 800d092:	6143      	str	r3, [r0, #20]
 800d094:	f04f 0301 	mov.w	r3, #1
 800d098:	6103      	str	r3, [r0, #16]
 800d09a:	dd16      	ble.n	800d0ca <__s2b+0x72>
 800d09c:	f104 0909 	add.w	r9, r4, #9
 800d0a0:	46c8      	mov	r8, r9
 800d0a2:	442c      	add	r4, r5
 800d0a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d0a8:	4601      	mov	r1, r0
 800d0aa:	220a      	movs	r2, #10
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	3b30      	subs	r3, #48	@ 0x30
 800d0b0:	f7ff ff8c 	bl	800cfcc <__multadd>
 800d0b4:	45a0      	cmp	r8, r4
 800d0b6:	d1f5      	bne.n	800d0a4 <__s2b+0x4c>
 800d0b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d0bc:	444c      	add	r4, r9
 800d0be:	1b2d      	subs	r5, r5, r4
 800d0c0:	1963      	adds	r3, r4, r5
 800d0c2:	42bb      	cmp	r3, r7
 800d0c4:	db04      	blt.n	800d0d0 <__s2b+0x78>
 800d0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ca:	2509      	movs	r5, #9
 800d0cc:	340a      	adds	r4, #10
 800d0ce:	e7f6      	b.n	800d0be <__s2b+0x66>
 800d0d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0d4:	4601      	mov	r1, r0
 800d0d6:	220a      	movs	r2, #10
 800d0d8:	4630      	mov	r0, r6
 800d0da:	3b30      	subs	r3, #48	@ 0x30
 800d0dc:	f7ff ff76 	bl	800cfcc <__multadd>
 800d0e0:	e7ee      	b.n	800d0c0 <__s2b+0x68>
 800d0e2:	bf00      	nop
 800d0e4:	0800f838 	.word	0x0800f838
 800d0e8:	0800f8c0 	.word	0x0800f8c0

0800d0ec <__hi0bits>:
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d0f2:	bf3a      	itte	cc
 800d0f4:	0403      	lslcc	r3, r0, #16
 800d0f6:	2010      	movcc	r0, #16
 800d0f8:	2000      	movcs	r0, #0
 800d0fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0fe:	bf3c      	itt	cc
 800d100:	021b      	lslcc	r3, r3, #8
 800d102:	3008      	addcc	r0, #8
 800d104:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d108:	bf3c      	itt	cc
 800d10a:	011b      	lslcc	r3, r3, #4
 800d10c:	3004      	addcc	r0, #4
 800d10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d112:	bf3c      	itt	cc
 800d114:	009b      	lslcc	r3, r3, #2
 800d116:	3002      	addcc	r0, #2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	db05      	blt.n	800d128 <__hi0bits+0x3c>
 800d11c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d120:	f100 0001 	add.w	r0, r0, #1
 800d124:	bf08      	it	eq
 800d126:	2020      	moveq	r0, #32
 800d128:	4770      	bx	lr

0800d12a <__lo0bits>:
 800d12a:	6803      	ldr	r3, [r0, #0]
 800d12c:	4602      	mov	r2, r0
 800d12e:	f013 0007 	ands.w	r0, r3, #7
 800d132:	d00b      	beq.n	800d14c <__lo0bits+0x22>
 800d134:	07d9      	lsls	r1, r3, #31
 800d136:	d421      	bmi.n	800d17c <__lo0bits+0x52>
 800d138:	0798      	lsls	r0, r3, #30
 800d13a:	bf49      	itett	mi
 800d13c:	085b      	lsrmi	r3, r3, #1
 800d13e:	089b      	lsrpl	r3, r3, #2
 800d140:	2001      	movmi	r0, #1
 800d142:	6013      	strmi	r3, [r2, #0]
 800d144:	bf5c      	itt	pl
 800d146:	2002      	movpl	r0, #2
 800d148:	6013      	strpl	r3, [r2, #0]
 800d14a:	4770      	bx	lr
 800d14c:	b299      	uxth	r1, r3
 800d14e:	b909      	cbnz	r1, 800d154 <__lo0bits+0x2a>
 800d150:	2010      	movs	r0, #16
 800d152:	0c1b      	lsrs	r3, r3, #16
 800d154:	b2d9      	uxtb	r1, r3
 800d156:	b909      	cbnz	r1, 800d15c <__lo0bits+0x32>
 800d158:	3008      	adds	r0, #8
 800d15a:	0a1b      	lsrs	r3, r3, #8
 800d15c:	0719      	lsls	r1, r3, #28
 800d15e:	bf04      	itt	eq
 800d160:	091b      	lsreq	r3, r3, #4
 800d162:	3004      	addeq	r0, #4
 800d164:	0799      	lsls	r1, r3, #30
 800d166:	bf04      	itt	eq
 800d168:	089b      	lsreq	r3, r3, #2
 800d16a:	3002      	addeq	r0, #2
 800d16c:	07d9      	lsls	r1, r3, #31
 800d16e:	d403      	bmi.n	800d178 <__lo0bits+0x4e>
 800d170:	085b      	lsrs	r3, r3, #1
 800d172:	f100 0001 	add.w	r0, r0, #1
 800d176:	d003      	beq.n	800d180 <__lo0bits+0x56>
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	4770      	bx	lr
 800d17c:	2000      	movs	r0, #0
 800d17e:	4770      	bx	lr
 800d180:	2020      	movs	r0, #32
 800d182:	4770      	bx	lr

0800d184 <__i2b>:
 800d184:	b510      	push	{r4, lr}
 800d186:	460c      	mov	r4, r1
 800d188:	2101      	movs	r1, #1
 800d18a:	f7ff febd 	bl	800cf08 <_Balloc>
 800d18e:	4602      	mov	r2, r0
 800d190:	b928      	cbnz	r0, 800d19e <__i2b+0x1a>
 800d192:	f240 1145 	movw	r1, #325	@ 0x145
 800d196:	4b04      	ldr	r3, [pc, #16]	@ (800d1a8 <__i2b+0x24>)
 800d198:	4804      	ldr	r0, [pc, #16]	@ (800d1ac <__i2b+0x28>)
 800d19a:	f000 ff29 	bl	800dff0 <__assert_func>
 800d19e:	2301      	movs	r3, #1
 800d1a0:	6144      	str	r4, [r0, #20]
 800d1a2:	6103      	str	r3, [r0, #16]
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800f838 	.word	0x0800f838
 800d1ac:	0800f8c0 	.word	0x0800f8c0

0800d1b0 <__multiply>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	4617      	mov	r7, r2
 800d1b6:	690a      	ldr	r2, [r1, #16]
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	4689      	mov	r9, r1
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	bfa2      	ittt	ge
 800d1c0:	463b      	movge	r3, r7
 800d1c2:	460f      	movge	r7, r1
 800d1c4:	4699      	movge	r9, r3
 800d1c6:	693d      	ldr	r5, [r7, #16]
 800d1c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	eb05 060a 	add.w	r6, r5, sl
 800d1d4:	42b3      	cmp	r3, r6
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	bfb8      	it	lt
 800d1da:	3101      	addlt	r1, #1
 800d1dc:	f7ff fe94 	bl	800cf08 <_Balloc>
 800d1e0:	b930      	cbnz	r0, 800d1f0 <__multiply+0x40>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d1e8:	4b40      	ldr	r3, [pc, #256]	@ (800d2ec <__multiply+0x13c>)
 800d1ea:	4841      	ldr	r0, [pc, #260]	@ (800d2f0 <__multiply+0x140>)
 800d1ec:	f000 ff00 	bl	800dff0 <__assert_func>
 800d1f0:	f100 0414 	add.w	r4, r0, #20
 800d1f4:	4623      	mov	r3, r4
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d1fc:	4573      	cmp	r3, lr
 800d1fe:	d320      	bcc.n	800d242 <__multiply+0x92>
 800d200:	f107 0814 	add.w	r8, r7, #20
 800d204:	f109 0114 	add.w	r1, r9, #20
 800d208:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d20c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d210:	9302      	str	r3, [sp, #8]
 800d212:	1beb      	subs	r3, r5, r7
 800d214:	3b15      	subs	r3, #21
 800d216:	f023 0303 	bic.w	r3, r3, #3
 800d21a:	3304      	adds	r3, #4
 800d21c:	3715      	adds	r7, #21
 800d21e:	42bd      	cmp	r5, r7
 800d220:	bf38      	it	cc
 800d222:	2304      	movcc	r3, #4
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	9b02      	ldr	r3, [sp, #8]
 800d228:	9103      	str	r1, [sp, #12]
 800d22a:	428b      	cmp	r3, r1
 800d22c:	d80c      	bhi.n	800d248 <__multiply+0x98>
 800d22e:	2e00      	cmp	r6, #0
 800d230:	dd03      	ble.n	800d23a <__multiply+0x8a>
 800d232:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d236:	2b00      	cmp	r3, #0
 800d238:	d055      	beq.n	800d2e6 <__multiply+0x136>
 800d23a:	6106      	str	r6, [r0, #16]
 800d23c:	b005      	add	sp, #20
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	f843 2b04 	str.w	r2, [r3], #4
 800d246:	e7d9      	b.n	800d1fc <__multiply+0x4c>
 800d248:	f8b1 a000 	ldrh.w	sl, [r1]
 800d24c:	f1ba 0f00 	cmp.w	sl, #0
 800d250:	d01f      	beq.n	800d292 <__multiply+0xe2>
 800d252:	46c4      	mov	ip, r8
 800d254:	46a1      	mov	r9, r4
 800d256:	2700      	movs	r7, #0
 800d258:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d25c:	f8d9 3000 	ldr.w	r3, [r9]
 800d260:	fa1f fb82 	uxth.w	fp, r2
 800d264:	b29b      	uxth	r3, r3
 800d266:	fb0a 330b 	mla	r3, sl, fp, r3
 800d26a:	443b      	add	r3, r7
 800d26c:	f8d9 7000 	ldr.w	r7, [r9]
 800d270:	0c12      	lsrs	r2, r2, #16
 800d272:	0c3f      	lsrs	r7, r7, #16
 800d274:	fb0a 7202 	mla	r2, sl, r2, r7
 800d278:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d282:	4565      	cmp	r5, ip
 800d284:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d288:	f849 3b04 	str.w	r3, [r9], #4
 800d28c:	d8e4      	bhi.n	800d258 <__multiply+0xa8>
 800d28e:	9b01      	ldr	r3, [sp, #4]
 800d290:	50e7      	str	r7, [r4, r3]
 800d292:	9b03      	ldr	r3, [sp, #12]
 800d294:	3104      	adds	r1, #4
 800d296:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d29a:	f1b9 0f00 	cmp.w	r9, #0
 800d29e:	d020      	beq.n	800d2e2 <__multiply+0x132>
 800d2a0:	4647      	mov	r7, r8
 800d2a2:	46a4      	mov	ip, r4
 800d2a4:	f04f 0a00 	mov.w	sl, #0
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	f8b7 b000 	ldrh.w	fp, [r7]
 800d2ae:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800d2b8:	4452      	add	r2, sl
 800d2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2be:	f84c 3b04 	str.w	r3, [ip], #4
 800d2c2:	f857 3b04 	ldr.w	r3, [r7], #4
 800d2c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2ca:	f8bc 3000 	ldrh.w	r3, [ip]
 800d2ce:	42bd      	cmp	r5, r7
 800d2d0:	fb09 330a 	mla	r3, r9, sl, r3
 800d2d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d2d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2dc:	d8e5      	bhi.n	800d2aa <__multiply+0xfa>
 800d2de:	9a01      	ldr	r2, [sp, #4]
 800d2e0:	50a3      	str	r3, [r4, r2]
 800d2e2:	3404      	adds	r4, #4
 800d2e4:	e79f      	b.n	800d226 <__multiply+0x76>
 800d2e6:	3e01      	subs	r6, #1
 800d2e8:	e7a1      	b.n	800d22e <__multiply+0x7e>
 800d2ea:	bf00      	nop
 800d2ec:	0800f838 	.word	0x0800f838
 800d2f0:	0800f8c0 	.word	0x0800f8c0

0800d2f4 <__pow5mult>:
 800d2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f8:	4615      	mov	r5, r2
 800d2fa:	f012 0203 	ands.w	r2, r2, #3
 800d2fe:	4607      	mov	r7, r0
 800d300:	460e      	mov	r6, r1
 800d302:	d007      	beq.n	800d314 <__pow5mult+0x20>
 800d304:	4c25      	ldr	r4, [pc, #148]	@ (800d39c <__pow5mult+0xa8>)
 800d306:	3a01      	subs	r2, #1
 800d308:	2300      	movs	r3, #0
 800d30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d30e:	f7ff fe5d 	bl	800cfcc <__multadd>
 800d312:	4606      	mov	r6, r0
 800d314:	10ad      	asrs	r5, r5, #2
 800d316:	d03d      	beq.n	800d394 <__pow5mult+0xa0>
 800d318:	69fc      	ldr	r4, [r7, #28]
 800d31a:	b97c      	cbnz	r4, 800d33c <__pow5mult+0x48>
 800d31c:	2010      	movs	r0, #16
 800d31e:	f000 fe99 	bl	800e054 <malloc>
 800d322:	4602      	mov	r2, r0
 800d324:	61f8      	str	r0, [r7, #28]
 800d326:	b928      	cbnz	r0, 800d334 <__pow5mult+0x40>
 800d328:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d32c:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a0 <__pow5mult+0xac>)
 800d32e:	481d      	ldr	r0, [pc, #116]	@ (800d3a4 <__pow5mult+0xb0>)
 800d330:	f000 fe5e 	bl	800dff0 <__assert_func>
 800d334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d338:	6004      	str	r4, [r0, #0]
 800d33a:	60c4      	str	r4, [r0, #12]
 800d33c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d344:	b94c      	cbnz	r4, 800d35a <__pow5mult+0x66>
 800d346:	f240 2171 	movw	r1, #625	@ 0x271
 800d34a:	4638      	mov	r0, r7
 800d34c:	f7ff ff1a 	bl	800d184 <__i2b>
 800d350:	2300      	movs	r3, #0
 800d352:	4604      	mov	r4, r0
 800d354:	f8c8 0008 	str.w	r0, [r8, #8]
 800d358:	6003      	str	r3, [r0, #0]
 800d35a:	f04f 0900 	mov.w	r9, #0
 800d35e:	07eb      	lsls	r3, r5, #31
 800d360:	d50a      	bpl.n	800d378 <__pow5mult+0x84>
 800d362:	4631      	mov	r1, r6
 800d364:	4622      	mov	r2, r4
 800d366:	4638      	mov	r0, r7
 800d368:	f7ff ff22 	bl	800d1b0 <__multiply>
 800d36c:	4680      	mov	r8, r0
 800d36e:	4631      	mov	r1, r6
 800d370:	4638      	mov	r0, r7
 800d372:	f7ff fe09 	bl	800cf88 <_Bfree>
 800d376:	4646      	mov	r6, r8
 800d378:	106d      	asrs	r5, r5, #1
 800d37a:	d00b      	beq.n	800d394 <__pow5mult+0xa0>
 800d37c:	6820      	ldr	r0, [r4, #0]
 800d37e:	b938      	cbnz	r0, 800d390 <__pow5mult+0x9c>
 800d380:	4622      	mov	r2, r4
 800d382:	4621      	mov	r1, r4
 800d384:	4638      	mov	r0, r7
 800d386:	f7ff ff13 	bl	800d1b0 <__multiply>
 800d38a:	6020      	str	r0, [r4, #0]
 800d38c:	f8c0 9000 	str.w	r9, [r0]
 800d390:	4604      	mov	r4, r0
 800d392:	e7e4      	b.n	800d35e <__pow5mult+0x6a>
 800d394:	4630      	mov	r0, r6
 800d396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d39a:	bf00      	nop
 800d39c:	0800f9d8 	.word	0x0800f9d8
 800d3a0:	0800f8a9 	.word	0x0800f8a9
 800d3a4:	0800f8c0 	.word	0x0800f8c0

0800d3a8 <__lshift>:
 800d3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	4607      	mov	r7, r0
 800d3b0:	4691      	mov	r9, r2
 800d3b2:	6923      	ldr	r3, [r4, #16]
 800d3b4:	6849      	ldr	r1, [r1, #4]
 800d3b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3c0:	f108 0601 	add.w	r6, r8, #1
 800d3c4:	42b3      	cmp	r3, r6
 800d3c6:	db0b      	blt.n	800d3e0 <__lshift+0x38>
 800d3c8:	4638      	mov	r0, r7
 800d3ca:	f7ff fd9d 	bl	800cf08 <_Balloc>
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	b948      	cbnz	r0, 800d3e6 <__lshift+0x3e>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d3d8:	4b27      	ldr	r3, [pc, #156]	@ (800d478 <__lshift+0xd0>)
 800d3da:	4828      	ldr	r0, [pc, #160]	@ (800d47c <__lshift+0xd4>)
 800d3dc:	f000 fe08 	bl	800dff0 <__assert_func>
 800d3e0:	3101      	adds	r1, #1
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	e7ee      	b.n	800d3c4 <__lshift+0x1c>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f100 0114 	add.w	r1, r0, #20
 800d3ec:	f100 0210 	add.w	r2, r0, #16
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	4553      	cmp	r3, sl
 800d3f4:	db33      	blt.n	800d45e <__lshift+0xb6>
 800d3f6:	6920      	ldr	r0, [r4, #16]
 800d3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3fc:	f104 0314 	add.w	r3, r4, #20
 800d400:	f019 091f 	ands.w	r9, r9, #31
 800d404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d40c:	d02b      	beq.n	800d466 <__lshift+0xbe>
 800d40e:	468a      	mov	sl, r1
 800d410:	2200      	movs	r2, #0
 800d412:	f1c9 0e20 	rsb	lr, r9, #32
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	fa00 f009 	lsl.w	r0, r0, r9
 800d41c:	4310      	orrs	r0, r2
 800d41e:	f84a 0b04 	str.w	r0, [sl], #4
 800d422:	f853 2b04 	ldr.w	r2, [r3], #4
 800d426:	459c      	cmp	ip, r3
 800d428:	fa22 f20e 	lsr.w	r2, r2, lr
 800d42c:	d8f3      	bhi.n	800d416 <__lshift+0x6e>
 800d42e:	ebac 0304 	sub.w	r3, ip, r4
 800d432:	3b15      	subs	r3, #21
 800d434:	f023 0303 	bic.w	r3, r3, #3
 800d438:	3304      	adds	r3, #4
 800d43a:	f104 0015 	add.w	r0, r4, #21
 800d43e:	4560      	cmp	r0, ip
 800d440:	bf88      	it	hi
 800d442:	2304      	movhi	r3, #4
 800d444:	50ca      	str	r2, [r1, r3]
 800d446:	b10a      	cbz	r2, 800d44c <__lshift+0xa4>
 800d448:	f108 0602 	add.w	r6, r8, #2
 800d44c:	3e01      	subs	r6, #1
 800d44e:	4638      	mov	r0, r7
 800d450:	4621      	mov	r1, r4
 800d452:	612e      	str	r6, [r5, #16]
 800d454:	f7ff fd98 	bl	800cf88 <_Bfree>
 800d458:	4628      	mov	r0, r5
 800d45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d462:	3301      	adds	r3, #1
 800d464:	e7c5      	b.n	800d3f2 <__lshift+0x4a>
 800d466:	3904      	subs	r1, #4
 800d468:	f853 2b04 	ldr.w	r2, [r3], #4
 800d46c:	459c      	cmp	ip, r3
 800d46e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d472:	d8f9      	bhi.n	800d468 <__lshift+0xc0>
 800d474:	e7ea      	b.n	800d44c <__lshift+0xa4>
 800d476:	bf00      	nop
 800d478:	0800f838 	.word	0x0800f838
 800d47c:	0800f8c0 	.word	0x0800f8c0

0800d480 <__mcmp>:
 800d480:	4603      	mov	r3, r0
 800d482:	690a      	ldr	r2, [r1, #16]
 800d484:	6900      	ldr	r0, [r0, #16]
 800d486:	b530      	push	{r4, r5, lr}
 800d488:	1a80      	subs	r0, r0, r2
 800d48a:	d10e      	bne.n	800d4aa <__mcmp+0x2a>
 800d48c:	3314      	adds	r3, #20
 800d48e:	3114      	adds	r1, #20
 800d490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d49c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d4a0:	4295      	cmp	r5, r2
 800d4a2:	d003      	beq.n	800d4ac <__mcmp+0x2c>
 800d4a4:	d205      	bcs.n	800d4b2 <__mcmp+0x32>
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	bd30      	pop	{r4, r5, pc}
 800d4ac:	42a3      	cmp	r3, r4
 800d4ae:	d3f3      	bcc.n	800d498 <__mcmp+0x18>
 800d4b0:	e7fb      	b.n	800d4aa <__mcmp+0x2a>
 800d4b2:	2001      	movs	r0, #1
 800d4b4:	e7f9      	b.n	800d4aa <__mcmp+0x2a>
	...

0800d4b8 <__mdiff>:
 800d4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	4689      	mov	r9, r1
 800d4be:	4606      	mov	r6, r0
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4648      	mov	r0, r9
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	f7ff ffdb 	bl	800d480 <__mcmp>
 800d4ca:	1e05      	subs	r5, r0, #0
 800d4cc:	d112      	bne.n	800d4f4 <__mdiff+0x3c>
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff fd19 	bl	800cf08 <_Balloc>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	b928      	cbnz	r0, 800d4e6 <__mdiff+0x2e>
 800d4da:	f240 2137 	movw	r1, #567	@ 0x237
 800d4de:	4b3e      	ldr	r3, [pc, #248]	@ (800d5d8 <__mdiff+0x120>)
 800d4e0:	483e      	ldr	r0, [pc, #248]	@ (800d5dc <__mdiff+0x124>)
 800d4e2:	f000 fd85 	bl	800dff0 <__assert_func>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	b003      	add	sp, #12
 800d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f4:	bfbc      	itt	lt
 800d4f6:	464b      	movlt	r3, r9
 800d4f8:	46a1      	movlt	r9, r4
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d500:	bfba      	itte	lt
 800d502:	461c      	movlt	r4, r3
 800d504:	2501      	movlt	r5, #1
 800d506:	2500      	movge	r5, #0
 800d508:	f7ff fcfe 	bl	800cf08 <_Balloc>
 800d50c:	4602      	mov	r2, r0
 800d50e:	b918      	cbnz	r0, 800d518 <__mdiff+0x60>
 800d510:	f240 2145 	movw	r1, #581	@ 0x245
 800d514:	4b30      	ldr	r3, [pc, #192]	@ (800d5d8 <__mdiff+0x120>)
 800d516:	e7e3      	b.n	800d4e0 <__mdiff+0x28>
 800d518:	f100 0b14 	add.w	fp, r0, #20
 800d51c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d520:	f109 0310 	add.w	r3, r9, #16
 800d524:	60c5      	str	r5, [r0, #12]
 800d526:	f04f 0c00 	mov.w	ip, #0
 800d52a:	f109 0514 	add.w	r5, r9, #20
 800d52e:	46d9      	mov	r9, fp
 800d530:	6926      	ldr	r6, [r4, #16]
 800d532:	f104 0e14 	add.w	lr, r4, #20
 800d536:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d53a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	9b01      	ldr	r3, [sp, #4]
 800d542:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d546:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d54a:	b281      	uxth	r1, r0
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	fa1f f38a 	uxth.w	r3, sl
 800d552:	1a5b      	subs	r3, r3, r1
 800d554:	0c00      	lsrs	r0, r0, #16
 800d556:	4463      	add	r3, ip
 800d558:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d55c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d560:	b29b      	uxth	r3, r3
 800d562:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d566:	4576      	cmp	r6, lr
 800d568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d56c:	f849 3b04 	str.w	r3, [r9], #4
 800d570:	d8e6      	bhi.n	800d540 <__mdiff+0x88>
 800d572:	1b33      	subs	r3, r6, r4
 800d574:	3b15      	subs	r3, #21
 800d576:	f023 0303 	bic.w	r3, r3, #3
 800d57a:	3415      	adds	r4, #21
 800d57c:	3304      	adds	r3, #4
 800d57e:	42a6      	cmp	r6, r4
 800d580:	bf38      	it	cc
 800d582:	2304      	movcc	r3, #4
 800d584:	441d      	add	r5, r3
 800d586:	445b      	add	r3, fp
 800d588:	461e      	mov	r6, r3
 800d58a:	462c      	mov	r4, r5
 800d58c:	4544      	cmp	r4, r8
 800d58e:	d30e      	bcc.n	800d5ae <__mdiff+0xf6>
 800d590:	f108 0103 	add.w	r1, r8, #3
 800d594:	1b49      	subs	r1, r1, r5
 800d596:	f021 0103 	bic.w	r1, r1, #3
 800d59a:	3d03      	subs	r5, #3
 800d59c:	45a8      	cmp	r8, r5
 800d59e:	bf38      	it	cc
 800d5a0:	2100      	movcc	r1, #0
 800d5a2:	440b      	add	r3, r1
 800d5a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5a8:	b199      	cbz	r1, 800d5d2 <__mdiff+0x11a>
 800d5aa:	6117      	str	r7, [r2, #16]
 800d5ac:	e79e      	b.n	800d4ec <__mdiff+0x34>
 800d5ae:	46e6      	mov	lr, ip
 800d5b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d5b4:	fa1f fc81 	uxth.w	ip, r1
 800d5b8:	44f4      	add	ip, lr
 800d5ba:	0c08      	lsrs	r0, r1, #16
 800d5bc:	4471      	add	r1, lr
 800d5be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d5c2:	b289      	uxth	r1, r1
 800d5c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d5c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d5cc:	f846 1b04 	str.w	r1, [r6], #4
 800d5d0:	e7dc      	b.n	800d58c <__mdiff+0xd4>
 800d5d2:	3f01      	subs	r7, #1
 800d5d4:	e7e6      	b.n	800d5a4 <__mdiff+0xec>
 800d5d6:	bf00      	nop
 800d5d8:	0800f838 	.word	0x0800f838
 800d5dc:	0800f8c0 	.word	0x0800f8c0

0800d5e0 <__ulp>:
 800d5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800d61c <__ulp+0x3c>)
 800d5e2:	400b      	ands	r3, r1
 800d5e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	dc08      	bgt.n	800d5fe <__ulp+0x1e>
 800d5ec:	425b      	negs	r3, r3
 800d5ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d5f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d5f6:	da04      	bge.n	800d602 <__ulp+0x22>
 800d5f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d5fc:	4113      	asrs	r3, r2
 800d5fe:	2200      	movs	r2, #0
 800d600:	e008      	b.n	800d614 <__ulp+0x34>
 800d602:	f1a2 0314 	sub.w	r3, r2, #20
 800d606:	2b1e      	cmp	r3, #30
 800d608:	bfd6      	itet	le
 800d60a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d60e:	2201      	movgt	r2, #1
 800d610:	40da      	lsrle	r2, r3
 800d612:	2300      	movs	r3, #0
 800d614:	4619      	mov	r1, r3
 800d616:	4610      	mov	r0, r2
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	7ff00000 	.word	0x7ff00000

0800d620 <__b2d>:
 800d620:	6902      	ldr	r2, [r0, #16]
 800d622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d624:	f100 0614 	add.w	r6, r0, #20
 800d628:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d62c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d630:	4f1e      	ldr	r7, [pc, #120]	@ (800d6ac <__b2d+0x8c>)
 800d632:	4620      	mov	r0, r4
 800d634:	f7ff fd5a 	bl	800d0ec <__hi0bits>
 800d638:	4603      	mov	r3, r0
 800d63a:	f1c0 0020 	rsb	r0, r0, #32
 800d63e:	2b0a      	cmp	r3, #10
 800d640:	f1a2 0504 	sub.w	r5, r2, #4
 800d644:	6008      	str	r0, [r1, #0]
 800d646:	dc12      	bgt.n	800d66e <__b2d+0x4e>
 800d648:	42ae      	cmp	r6, r5
 800d64a:	bf2c      	ite	cs
 800d64c:	2200      	movcs	r2, #0
 800d64e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d652:	f1c3 0c0b 	rsb	ip, r3, #11
 800d656:	3315      	adds	r3, #21
 800d658:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d65c:	fa04 f303 	lsl.w	r3, r4, r3
 800d660:	fa22 f20c 	lsr.w	r2, r2, ip
 800d664:	ea4e 0107 	orr.w	r1, lr, r7
 800d668:	431a      	orrs	r2, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d66e:	42ae      	cmp	r6, r5
 800d670:	bf36      	itet	cc
 800d672:	f1a2 0508 	subcc.w	r5, r2, #8
 800d676:	2200      	movcs	r2, #0
 800d678:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d67c:	3b0b      	subs	r3, #11
 800d67e:	d012      	beq.n	800d6a6 <__b2d+0x86>
 800d680:	f1c3 0720 	rsb	r7, r3, #32
 800d684:	fa22 f107 	lsr.w	r1, r2, r7
 800d688:	409c      	lsls	r4, r3
 800d68a:	430c      	orrs	r4, r1
 800d68c:	42b5      	cmp	r5, r6
 800d68e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d692:	bf94      	ite	ls
 800d694:	2400      	movls	r4, #0
 800d696:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d69a:	409a      	lsls	r2, r3
 800d69c:	40fc      	lsrs	r4, r7
 800d69e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d6a2:	4322      	orrs	r2, r4
 800d6a4:	e7e1      	b.n	800d66a <__b2d+0x4a>
 800d6a6:	ea44 0107 	orr.w	r1, r4, r7
 800d6aa:	e7de      	b.n	800d66a <__b2d+0x4a>
 800d6ac:	3ff00000 	.word	0x3ff00000

0800d6b0 <__d2b>:
 800d6b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	4699      	mov	r9, r3
 800d6ba:	9e08      	ldr	r6, [sp, #32]
 800d6bc:	f7ff fc24 	bl	800cf08 <_Balloc>
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	b930      	cbnz	r0, 800d6d2 <__d2b+0x22>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	f240 310f 	movw	r1, #783	@ 0x30f
 800d6ca:	4b23      	ldr	r3, [pc, #140]	@ (800d758 <__d2b+0xa8>)
 800d6cc:	4823      	ldr	r0, [pc, #140]	@ (800d75c <__d2b+0xac>)
 800d6ce:	f000 fc8f 	bl	800dff0 <__assert_func>
 800d6d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6da:	b10d      	cbz	r5, 800d6e0 <__d2b+0x30>
 800d6dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6e0:	9301      	str	r3, [sp, #4]
 800d6e2:	f1b8 0300 	subs.w	r3, r8, #0
 800d6e6:	d024      	beq.n	800d732 <__d2b+0x82>
 800d6e8:	4668      	mov	r0, sp
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	f7ff fd1d 	bl	800d12a <__lo0bits>
 800d6f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6f4:	b1d8      	cbz	r0, 800d72e <__d2b+0x7e>
 800d6f6:	f1c0 0320 	rsb	r3, r0, #32
 800d6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d6fe:	430b      	orrs	r3, r1
 800d700:	40c2      	lsrs	r2, r0
 800d702:	6163      	str	r3, [r4, #20]
 800d704:	9201      	str	r2, [sp, #4]
 800d706:	9b01      	ldr	r3, [sp, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bf0c      	ite	eq
 800d70c:	2201      	moveq	r2, #1
 800d70e:	2202      	movne	r2, #2
 800d710:	61a3      	str	r3, [r4, #24]
 800d712:	6122      	str	r2, [r4, #16]
 800d714:	b1ad      	cbz	r5, 800d742 <__d2b+0x92>
 800d716:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d71a:	4405      	add	r5, r0
 800d71c:	6035      	str	r5, [r6, #0]
 800d71e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d724:	6018      	str	r0, [r3, #0]
 800d726:	4620      	mov	r0, r4
 800d728:	b002      	add	sp, #8
 800d72a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d72e:	6161      	str	r1, [r4, #20]
 800d730:	e7e9      	b.n	800d706 <__d2b+0x56>
 800d732:	a801      	add	r0, sp, #4
 800d734:	f7ff fcf9 	bl	800d12a <__lo0bits>
 800d738:	9b01      	ldr	r3, [sp, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	6163      	str	r3, [r4, #20]
 800d73e:	3020      	adds	r0, #32
 800d740:	e7e7      	b.n	800d712 <__d2b+0x62>
 800d742:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d746:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d74a:	6030      	str	r0, [r6, #0]
 800d74c:	6918      	ldr	r0, [r3, #16]
 800d74e:	f7ff fccd 	bl	800d0ec <__hi0bits>
 800d752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d756:	e7e4      	b.n	800d722 <__d2b+0x72>
 800d758:	0800f838 	.word	0x0800f838
 800d75c:	0800f8c0 	.word	0x0800f8c0

0800d760 <__ratio>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	b085      	sub	sp, #20
 800d766:	e9cd 1000 	strd	r1, r0, [sp]
 800d76a:	a902      	add	r1, sp, #8
 800d76c:	f7ff ff58 	bl	800d620 <__b2d>
 800d770:	468b      	mov	fp, r1
 800d772:	4606      	mov	r6, r0
 800d774:	460f      	mov	r7, r1
 800d776:	9800      	ldr	r0, [sp, #0]
 800d778:	a903      	add	r1, sp, #12
 800d77a:	f7ff ff51 	bl	800d620 <__b2d>
 800d77e:	460d      	mov	r5, r1
 800d780:	9b01      	ldr	r3, [sp, #4]
 800d782:	4689      	mov	r9, r1
 800d784:	6919      	ldr	r1, [r3, #16]
 800d786:	9b00      	ldr	r3, [sp, #0]
 800d788:	4604      	mov	r4, r0
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	4630      	mov	r0, r6
 800d78e:	1ac9      	subs	r1, r1, r3
 800d790:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d794:	1a9b      	subs	r3, r3, r2
 800d796:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	bfcd      	iteet	gt
 800d79e:	463a      	movgt	r2, r7
 800d7a0:	462a      	movle	r2, r5
 800d7a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d7aa:	bfd8      	it	le
 800d7ac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d7b0:	464b      	mov	r3, r9
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	4659      	mov	r1, fp
 800d7b6:	f7f2 ffb9 	bl	800072c <__aeabi_ddiv>
 800d7ba:	b005      	add	sp, #20
 800d7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7c0 <__copybits>:
 800d7c0:	3901      	subs	r1, #1
 800d7c2:	b570      	push	{r4, r5, r6, lr}
 800d7c4:	1149      	asrs	r1, r1, #5
 800d7c6:	6914      	ldr	r4, [r2, #16]
 800d7c8:	3101      	adds	r1, #1
 800d7ca:	f102 0314 	add.w	r3, r2, #20
 800d7ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7d6:	1f05      	subs	r5, r0, #4
 800d7d8:	42a3      	cmp	r3, r4
 800d7da:	d30c      	bcc.n	800d7f6 <__copybits+0x36>
 800d7dc:	1aa3      	subs	r3, r4, r2
 800d7de:	3b11      	subs	r3, #17
 800d7e0:	f023 0303 	bic.w	r3, r3, #3
 800d7e4:	3211      	adds	r2, #17
 800d7e6:	42a2      	cmp	r2, r4
 800d7e8:	bf88      	it	hi
 800d7ea:	2300      	movhi	r3, #0
 800d7ec:	4418      	add	r0, r3
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	4288      	cmp	r0, r1
 800d7f2:	d305      	bcc.n	800d800 <__copybits+0x40>
 800d7f4:	bd70      	pop	{r4, r5, r6, pc}
 800d7f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800d7fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800d7fe:	e7eb      	b.n	800d7d8 <__copybits+0x18>
 800d800:	f840 3b04 	str.w	r3, [r0], #4
 800d804:	e7f4      	b.n	800d7f0 <__copybits+0x30>

0800d806 <__any_on>:
 800d806:	f100 0214 	add.w	r2, r0, #20
 800d80a:	6900      	ldr	r0, [r0, #16]
 800d80c:	114b      	asrs	r3, r1, #5
 800d80e:	4298      	cmp	r0, r3
 800d810:	b510      	push	{r4, lr}
 800d812:	db11      	blt.n	800d838 <__any_on+0x32>
 800d814:	dd0a      	ble.n	800d82c <__any_on+0x26>
 800d816:	f011 011f 	ands.w	r1, r1, #31
 800d81a:	d007      	beq.n	800d82c <__any_on+0x26>
 800d81c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d820:	fa24 f001 	lsr.w	r0, r4, r1
 800d824:	fa00 f101 	lsl.w	r1, r0, r1
 800d828:	428c      	cmp	r4, r1
 800d82a:	d10b      	bne.n	800d844 <__any_on+0x3e>
 800d82c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d830:	4293      	cmp	r3, r2
 800d832:	d803      	bhi.n	800d83c <__any_on+0x36>
 800d834:	2000      	movs	r0, #0
 800d836:	bd10      	pop	{r4, pc}
 800d838:	4603      	mov	r3, r0
 800d83a:	e7f7      	b.n	800d82c <__any_on+0x26>
 800d83c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d840:	2900      	cmp	r1, #0
 800d842:	d0f5      	beq.n	800d830 <__any_on+0x2a>
 800d844:	2001      	movs	r0, #1
 800d846:	e7f6      	b.n	800d836 <__any_on+0x30>

0800d848 <__ascii_wctomb>:
 800d848:	4603      	mov	r3, r0
 800d84a:	4608      	mov	r0, r1
 800d84c:	b141      	cbz	r1, 800d860 <__ascii_wctomb+0x18>
 800d84e:	2aff      	cmp	r2, #255	@ 0xff
 800d850:	d904      	bls.n	800d85c <__ascii_wctomb+0x14>
 800d852:	228a      	movs	r2, #138	@ 0x8a
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	4770      	bx	lr
 800d85c:	2001      	movs	r0, #1
 800d85e:	700a      	strb	r2, [r1, #0]
 800d860:	4770      	bx	lr

0800d862 <__ssputs_r>:
 800d862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d866:	461f      	mov	r7, r3
 800d868:	688e      	ldr	r6, [r1, #8]
 800d86a:	4682      	mov	sl, r0
 800d86c:	42be      	cmp	r6, r7
 800d86e:	460c      	mov	r4, r1
 800d870:	4690      	mov	r8, r2
 800d872:	680b      	ldr	r3, [r1, #0]
 800d874:	d82d      	bhi.n	800d8d2 <__ssputs_r+0x70>
 800d876:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d87a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d87e:	d026      	beq.n	800d8ce <__ssputs_r+0x6c>
 800d880:	6965      	ldr	r5, [r4, #20]
 800d882:	6909      	ldr	r1, [r1, #16]
 800d884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d888:	eba3 0901 	sub.w	r9, r3, r1
 800d88c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d890:	1c7b      	adds	r3, r7, #1
 800d892:	444b      	add	r3, r9
 800d894:	106d      	asrs	r5, r5, #1
 800d896:	429d      	cmp	r5, r3
 800d898:	bf38      	it	cc
 800d89a:	461d      	movcc	r5, r3
 800d89c:	0553      	lsls	r3, r2, #21
 800d89e:	d527      	bpl.n	800d8f0 <__ssputs_r+0x8e>
 800d8a0:	4629      	mov	r1, r5
 800d8a2:	f7ff fa93 	bl	800cdcc <_malloc_r>
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	b360      	cbz	r0, 800d904 <__ssputs_r+0xa2>
 800d8aa:	464a      	mov	r2, r9
 800d8ac:	6921      	ldr	r1, [r4, #16]
 800d8ae:	f7fe fed4 	bl	800c65a <memcpy>
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8bc:	81a3      	strh	r3, [r4, #12]
 800d8be:	6126      	str	r6, [r4, #16]
 800d8c0:	444e      	add	r6, r9
 800d8c2:	6026      	str	r6, [r4, #0]
 800d8c4:	463e      	mov	r6, r7
 800d8c6:	6165      	str	r5, [r4, #20]
 800d8c8:	eba5 0509 	sub.w	r5, r5, r9
 800d8cc:	60a5      	str	r5, [r4, #8]
 800d8ce:	42be      	cmp	r6, r7
 800d8d0:	d900      	bls.n	800d8d4 <__ssputs_r+0x72>
 800d8d2:	463e      	mov	r6, r7
 800d8d4:	4632      	mov	r2, r6
 800d8d6:	4641      	mov	r1, r8
 800d8d8:	6820      	ldr	r0, [r4, #0]
 800d8da:	f000 fb51 	bl	800df80 <memmove>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	68a3      	ldr	r3, [r4, #8]
 800d8e2:	1b9b      	subs	r3, r3, r6
 800d8e4:	60a3      	str	r3, [r4, #8]
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	4433      	add	r3, r6
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f0:	462a      	mov	r2, r5
 800d8f2:	f000 fbb7 	bl	800e064 <_realloc_r>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1e0      	bne.n	800d8be <__ssputs_r+0x5c>
 800d8fc:	4650      	mov	r0, sl
 800d8fe:	6921      	ldr	r1, [r4, #16]
 800d900:	f7fe fec0 	bl	800c684 <_free_r>
 800d904:	230c      	movs	r3, #12
 800d906:	f8ca 3000 	str.w	r3, [sl]
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	f04f 30ff 	mov.w	r0, #4294967295
 800d910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d914:	81a3      	strh	r3, [r4, #12]
 800d916:	e7e9      	b.n	800d8ec <__ssputs_r+0x8a>

0800d918 <_svfiprintf_r>:
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	4698      	mov	r8, r3
 800d91e:	898b      	ldrh	r3, [r1, #12]
 800d920:	4607      	mov	r7, r0
 800d922:	061b      	lsls	r3, r3, #24
 800d924:	460d      	mov	r5, r1
 800d926:	4614      	mov	r4, r2
 800d928:	b09d      	sub	sp, #116	@ 0x74
 800d92a:	d510      	bpl.n	800d94e <_svfiprintf_r+0x36>
 800d92c:	690b      	ldr	r3, [r1, #16]
 800d92e:	b973      	cbnz	r3, 800d94e <_svfiprintf_r+0x36>
 800d930:	2140      	movs	r1, #64	@ 0x40
 800d932:	f7ff fa4b 	bl	800cdcc <_malloc_r>
 800d936:	6028      	str	r0, [r5, #0]
 800d938:	6128      	str	r0, [r5, #16]
 800d93a:	b930      	cbnz	r0, 800d94a <_svfiprintf_r+0x32>
 800d93c:	230c      	movs	r3, #12
 800d93e:	603b      	str	r3, [r7, #0]
 800d940:	f04f 30ff 	mov.w	r0, #4294967295
 800d944:	b01d      	add	sp, #116	@ 0x74
 800d946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94a:	2340      	movs	r3, #64	@ 0x40
 800d94c:	616b      	str	r3, [r5, #20]
 800d94e:	2300      	movs	r3, #0
 800d950:	9309      	str	r3, [sp, #36]	@ 0x24
 800d952:	2320      	movs	r3, #32
 800d954:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d958:	2330      	movs	r3, #48	@ 0x30
 800d95a:	f04f 0901 	mov.w	r9, #1
 800d95e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d962:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dafc <_svfiprintf_r+0x1e4>
 800d966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d96a:	4623      	mov	r3, r4
 800d96c:	469a      	mov	sl, r3
 800d96e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d972:	b10a      	cbz	r2, 800d978 <_svfiprintf_r+0x60>
 800d974:	2a25      	cmp	r2, #37	@ 0x25
 800d976:	d1f9      	bne.n	800d96c <_svfiprintf_r+0x54>
 800d978:	ebba 0b04 	subs.w	fp, sl, r4
 800d97c:	d00b      	beq.n	800d996 <_svfiprintf_r+0x7e>
 800d97e:	465b      	mov	r3, fp
 800d980:	4622      	mov	r2, r4
 800d982:	4629      	mov	r1, r5
 800d984:	4638      	mov	r0, r7
 800d986:	f7ff ff6c 	bl	800d862 <__ssputs_r>
 800d98a:	3001      	adds	r0, #1
 800d98c:	f000 80a7 	beq.w	800dade <_svfiprintf_r+0x1c6>
 800d990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d992:	445a      	add	r2, fp
 800d994:	9209      	str	r2, [sp, #36]	@ 0x24
 800d996:	f89a 3000 	ldrb.w	r3, [sl]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 809f 	beq.w	800dade <_svfiprintf_r+0x1c6>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9aa:	f10a 0a01 	add.w	sl, sl, #1
 800d9ae:	9304      	str	r3, [sp, #16]
 800d9b0:	9307      	str	r3, [sp, #28]
 800d9b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9b8:	4654      	mov	r4, sl
 800d9ba:	2205      	movs	r2, #5
 800d9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c0:	484e      	ldr	r0, [pc, #312]	@ (800dafc <_svfiprintf_r+0x1e4>)
 800d9c2:	f000 fb07 	bl	800dfd4 <memchr>
 800d9c6:	9a04      	ldr	r2, [sp, #16]
 800d9c8:	b9d8      	cbnz	r0, 800da02 <_svfiprintf_r+0xea>
 800d9ca:	06d0      	lsls	r0, r2, #27
 800d9cc:	bf44      	itt	mi
 800d9ce:	2320      	movmi	r3, #32
 800d9d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9d4:	0711      	lsls	r1, r2, #28
 800d9d6:	bf44      	itt	mi
 800d9d8:	232b      	movmi	r3, #43	@ 0x2b
 800d9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9de:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9e4:	d015      	beq.n	800da12 <_svfiprintf_r+0xfa>
 800d9e6:	4654      	mov	r4, sl
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	f04f 0c0a 	mov.w	ip, #10
 800d9ee:	9a07      	ldr	r2, [sp, #28]
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9f6:	3b30      	subs	r3, #48	@ 0x30
 800d9f8:	2b09      	cmp	r3, #9
 800d9fa:	d94b      	bls.n	800da94 <_svfiprintf_r+0x17c>
 800d9fc:	b1b0      	cbz	r0, 800da2c <_svfiprintf_r+0x114>
 800d9fe:	9207      	str	r2, [sp, #28]
 800da00:	e014      	b.n	800da2c <_svfiprintf_r+0x114>
 800da02:	eba0 0308 	sub.w	r3, r0, r8
 800da06:	fa09 f303 	lsl.w	r3, r9, r3
 800da0a:	4313      	orrs	r3, r2
 800da0c:	46a2      	mov	sl, r4
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	e7d2      	b.n	800d9b8 <_svfiprintf_r+0xa0>
 800da12:	9b03      	ldr	r3, [sp, #12]
 800da14:	1d19      	adds	r1, r3, #4
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	9103      	str	r1, [sp, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bfbb      	ittet	lt
 800da1e:	425b      	neglt	r3, r3
 800da20:	f042 0202 	orrlt.w	r2, r2, #2
 800da24:	9307      	strge	r3, [sp, #28]
 800da26:	9307      	strlt	r3, [sp, #28]
 800da28:	bfb8      	it	lt
 800da2a:	9204      	strlt	r2, [sp, #16]
 800da2c:	7823      	ldrb	r3, [r4, #0]
 800da2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800da30:	d10a      	bne.n	800da48 <_svfiprintf_r+0x130>
 800da32:	7863      	ldrb	r3, [r4, #1]
 800da34:	2b2a      	cmp	r3, #42	@ 0x2a
 800da36:	d132      	bne.n	800da9e <_svfiprintf_r+0x186>
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	3402      	adds	r4, #2
 800da3c:	1d1a      	adds	r2, r3, #4
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	9203      	str	r2, [sp, #12]
 800da42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da46:	9305      	str	r3, [sp, #20]
 800da48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800db00 <_svfiprintf_r+0x1e8>
 800da4c:	2203      	movs	r2, #3
 800da4e:	4650      	mov	r0, sl
 800da50:	7821      	ldrb	r1, [r4, #0]
 800da52:	f000 fabf 	bl	800dfd4 <memchr>
 800da56:	b138      	cbz	r0, 800da68 <_svfiprintf_r+0x150>
 800da58:	2240      	movs	r2, #64	@ 0x40
 800da5a:	9b04      	ldr	r3, [sp, #16]
 800da5c:	eba0 000a 	sub.w	r0, r0, sl
 800da60:	4082      	lsls	r2, r0
 800da62:	4313      	orrs	r3, r2
 800da64:	3401      	adds	r4, #1
 800da66:	9304      	str	r3, [sp, #16]
 800da68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6c:	2206      	movs	r2, #6
 800da6e:	4825      	ldr	r0, [pc, #148]	@ (800db04 <_svfiprintf_r+0x1ec>)
 800da70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da74:	f000 faae 	bl	800dfd4 <memchr>
 800da78:	2800      	cmp	r0, #0
 800da7a:	d036      	beq.n	800daea <_svfiprintf_r+0x1d2>
 800da7c:	4b22      	ldr	r3, [pc, #136]	@ (800db08 <_svfiprintf_r+0x1f0>)
 800da7e:	bb1b      	cbnz	r3, 800dac8 <_svfiprintf_r+0x1b0>
 800da80:	9b03      	ldr	r3, [sp, #12]
 800da82:	3307      	adds	r3, #7
 800da84:	f023 0307 	bic.w	r3, r3, #7
 800da88:	3308      	adds	r3, #8
 800da8a:	9303      	str	r3, [sp, #12]
 800da8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da8e:	4433      	add	r3, r6
 800da90:	9309      	str	r3, [sp, #36]	@ 0x24
 800da92:	e76a      	b.n	800d96a <_svfiprintf_r+0x52>
 800da94:	460c      	mov	r4, r1
 800da96:	2001      	movs	r0, #1
 800da98:	fb0c 3202 	mla	r2, ip, r2, r3
 800da9c:	e7a8      	b.n	800d9f0 <_svfiprintf_r+0xd8>
 800da9e:	2300      	movs	r3, #0
 800daa0:	f04f 0c0a 	mov.w	ip, #10
 800daa4:	4619      	mov	r1, r3
 800daa6:	3401      	adds	r4, #1
 800daa8:	9305      	str	r3, [sp, #20]
 800daaa:	4620      	mov	r0, r4
 800daac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab0:	3a30      	subs	r2, #48	@ 0x30
 800dab2:	2a09      	cmp	r2, #9
 800dab4:	d903      	bls.n	800dabe <_svfiprintf_r+0x1a6>
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d0c6      	beq.n	800da48 <_svfiprintf_r+0x130>
 800daba:	9105      	str	r1, [sp, #20]
 800dabc:	e7c4      	b.n	800da48 <_svfiprintf_r+0x130>
 800dabe:	4604      	mov	r4, r0
 800dac0:	2301      	movs	r3, #1
 800dac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dac6:	e7f0      	b.n	800daaa <_svfiprintf_r+0x192>
 800dac8:	ab03      	add	r3, sp, #12
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	462a      	mov	r2, r5
 800dace:	4638      	mov	r0, r7
 800dad0:	4b0e      	ldr	r3, [pc, #56]	@ (800db0c <_svfiprintf_r+0x1f4>)
 800dad2:	a904      	add	r1, sp, #16
 800dad4:	f3af 8000 	nop.w
 800dad8:	1c42      	adds	r2, r0, #1
 800dada:	4606      	mov	r6, r0
 800dadc:	d1d6      	bne.n	800da8c <_svfiprintf_r+0x174>
 800dade:	89ab      	ldrh	r3, [r5, #12]
 800dae0:	065b      	lsls	r3, r3, #25
 800dae2:	f53f af2d 	bmi.w	800d940 <_svfiprintf_r+0x28>
 800dae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dae8:	e72c      	b.n	800d944 <_svfiprintf_r+0x2c>
 800daea:	ab03      	add	r3, sp, #12
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	462a      	mov	r2, r5
 800daf0:	4638      	mov	r0, r7
 800daf2:	4b06      	ldr	r3, [pc, #24]	@ (800db0c <_svfiprintf_r+0x1f4>)
 800daf4:	a904      	add	r1, sp, #16
 800daf6:	f000 f87d 	bl	800dbf4 <_printf_i>
 800dafa:	e7ed      	b.n	800dad8 <_svfiprintf_r+0x1c0>
 800dafc:	0800f919 	.word	0x0800f919
 800db00:	0800f91f 	.word	0x0800f91f
 800db04:	0800f923 	.word	0x0800f923
 800db08:	00000000 	.word	0x00000000
 800db0c:	0800d863 	.word	0x0800d863

0800db10 <_printf_common>:
 800db10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	4616      	mov	r6, r2
 800db16:	4698      	mov	r8, r3
 800db18:	688a      	ldr	r2, [r1, #8]
 800db1a:	690b      	ldr	r3, [r1, #16]
 800db1c:	4607      	mov	r7, r0
 800db1e:	4293      	cmp	r3, r2
 800db20:	bfb8      	it	lt
 800db22:	4613      	movlt	r3, r2
 800db24:	6033      	str	r3, [r6, #0]
 800db26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db2a:	460c      	mov	r4, r1
 800db2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db30:	b10a      	cbz	r2, 800db36 <_printf_common+0x26>
 800db32:	3301      	adds	r3, #1
 800db34:	6033      	str	r3, [r6, #0]
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	0699      	lsls	r1, r3, #26
 800db3a:	bf42      	ittt	mi
 800db3c:	6833      	ldrmi	r3, [r6, #0]
 800db3e:	3302      	addmi	r3, #2
 800db40:	6033      	strmi	r3, [r6, #0]
 800db42:	6825      	ldr	r5, [r4, #0]
 800db44:	f015 0506 	ands.w	r5, r5, #6
 800db48:	d106      	bne.n	800db58 <_printf_common+0x48>
 800db4a:	f104 0a19 	add.w	sl, r4, #25
 800db4e:	68e3      	ldr	r3, [r4, #12]
 800db50:	6832      	ldr	r2, [r6, #0]
 800db52:	1a9b      	subs	r3, r3, r2
 800db54:	42ab      	cmp	r3, r5
 800db56:	dc2b      	bgt.n	800dbb0 <_printf_common+0xa0>
 800db58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db5c:	6822      	ldr	r2, [r4, #0]
 800db5e:	3b00      	subs	r3, #0
 800db60:	bf18      	it	ne
 800db62:	2301      	movne	r3, #1
 800db64:	0692      	lsls	r2, r2, #26
 800db66:	d430      	bmi.n	800dbca <_printf_common+0xba>
 800db68:	4641      	mov	r1, r8
 800db6a:	4638      	mov	r0, r7
 800db6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db70:	47c8      	blx	r9
 800db72:	3001      	adds	r0, #1
 800db74:	d023      	beq.n	800dbbe <_printf_common+0xae>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	6922      	ldr	r2, [r4, #16]
 800db7a:	f003 0306 	and.w	r3, r3, #6
 800db7e:	2b04      	cmp	r3, #4
 800db80:	bf14      	ite	ne
 800db82:	2500      	movne	r5, #0
 800db84:	6833      	ldreq	r3, [r6, #0]
 800db86:	f04f 0600 	mov.w	r6, #0
 800db8a:	bf08      	it	eq
 800db8c:	68e5      	ldreq	r5, [r4, #12]
 800db8e:	f104 041a 	add.w	r4, r4, #26
 800db92:	bf08      	it	eq
 800db94:	1aed      	subeq	r5, r5, r3
 800db96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800db9a:	bf08      	it	eq
 800db9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dba0:	4293      	cmp	r3, r2
 800dba2:	bfc4      	itt	gt
 800dba4:	1a9b      	subgt	r3, r3, r2
 800dba6:	18ed      	addgt	r5, r5, r3
 800dba8:	42b5      	cmp	r5, r6
 800dbaa:	d11a      	bne.n	800dbe2 <_printf_common+0xd2>
 800dbac:	2000      	movs	r0, #0
 800dbae:	e008      	b.n	800dbc2 <_printf_common+0xb2>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	4652      	mov	r2, sl
 800dbb4:	4641      	mov	r1, r8
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	47c8      	blx	r9
 800dbba:	3001      	adds	r0, #1
 800dbbc:	d103      	bne.n	800dbc6 <_printf_common+0xb6>
 800dbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc6:	3501      	adds	r5, #1
 800dbc8:	e7c1      	b.n	800db4e <_printf_common+0x3e>
 800dbca:	2030      	movs	r0, #48	@ 0x30
 800dbcc:	18e1      	adds	r1, r4, r3
 800dbce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dbd8:	4422      	add	r2, r4
 800dbda:	3302      	adds	r3, #2
 800dbdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dbe0:	e7c2      	b.n	800db68 <_printf_common+0x58>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	4641      	mov	r1, r8
 800dbe8:	4638      	mov	r0, r7
 800dbea:	47c8      	blx	r9
 800dbec:	3001      	adds	r0, #1
 800dbee:	d0e6      	beq.n	800dbbe <_printf_common+0xae>
 800dbf0:	3601      	adds	r6, #1
 800dbf2:	e7d9      	b.n	800dba8 <_printf_common+0x98>

0800dbf4 <_printf_i>:
 800dbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf8:	7e0f      	ldrb	r7, [r1, #24]
 800dbfa:	4691      	mov	r9, r2
 800dbfc:	2f78      	cmp	r7, #120	@ 0x78
 800dbfe:	4680      	mov	r8, r0
 800dc00:	460c      	mov	r4, r1
 800dc02:	469a      	mov	sl, r3
 800dc04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc0a:	d807      	bhi.n	800dc1c <_printf_i+0x28>
 800dc0c:	2f62      	cmp	r7, #98	@ 0x62
 800dc0e:	d80a      	bhi.n	800dc26 <_printf_i+0x32>
 800dc10:	2f00      	cmp	r7, #0
 800dc12:	f000 80d1 	beq.w	800ddb8 <_printf_i+0x1c4>
 800dc16:	2f58      	cmp	r7, #88	@ 0x58
 800dc18:	f000 80b8 	beq.w	800dd8c <_printf_i+0x198>
 800dc1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc24:	e03a      	b.n	800dc9c <_printf_i+0xa8>
 800dc26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc2a:	2b15      	cmp	r3, #21
 800dc2c:	d8f6      	bhi.n	800dc1c <_printf_i+0x28>
 800dc2e:	a101      	add	r1, pc, #4	@ (adr r1, 800dc34 <_printf_i+0x40>)
 800dc30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc34:	0800dc8d 	.word	0x0800dc8d
 800dc38:	0800dca1 	.word	0x0800dca1
 800dc3c:	0800dc1d 	.word	0x0800dc1d
 800dc40:	0800dc1d 	.word	0x0800dc1d
 800dc44:	0800dc1d 	.word	0x0800dc1d
 800dc48:	0800dc1d 	.word	0x0800dc1d
 800dc4c:	0800dca1 	.word	0x0800dca1
 800dc50:	0800dc1d 	.word	0x0800dc1d
 800dc54:	0800dc1d 	.word	0x0800dc1d
 800dc58:	0800dc1d 	.word	0x0800dc1d
 800dc5c:	0800dc1d 	.word	0x0800dc1d
 800dc60:	0800dd9f 	.word	0x0800dd9f
 800dc64:	0800dccb 	.word	0x0800dccb
 800dc68:	0800dd59 	.word	0x0800dd59
 800dc6c:	0800dc1d 	.word	0x0800dc1d
 800dc70:	0800dc1d 	.word	0x0800dc1d
 800dc74:	0800ddc1 	.word	0x0800ddc1
 800dc78:	0800dc1d 	.word	0x0800dc1d
 800dc7c:	0800dccb 	.word	0x0800dccb
 800dc80:	0800dc1d 	.word	0x0800dc1d
 800dc84:	0800dc1d 	.word	0x0800dc1d
 800dc88:	0800dd61 	.word	0x0800dd61
 800dc8c:	6833      	ldr	r3, [r6, #0]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6032      	str	r2, [r6, #0]
 800dc94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e09c      	b.n	800ddda <_printf_i+0x1e6>
 800dca0:	6833      	ldr	r3, [r6, #0]
 800dca2:	6820      	ldr	r0, [r4, #0]
 800dca4:	1d19      	adds	r1, r3, #4
 800dca6:	6031      	str	r1, [r6, #0]
 800dca8:	0606      	lsls	r6, r0, #24
 800dcaa:	d501      	bpl.n	800dcb0 <_printf_i+0xbc>
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	e003      	b.n	800dcb8 <_printf_i+0xc4>
 800dcb0:	0645      	lsls	r5, r0, #25
 800dcb2:	d5fb      	bpl.n	800dcac <_printf_i+0xb8>
 800dcb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	da03      	bge.n	800dcc4 <_printf_i+0xd0>
 800dcbc:	232d      	movs	r3, #45	@ 0x2d
 800dcbe:	426d      	negs	r5, r5
 800dcc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcc4:	230a      	movs	r3, #10
 800dcc6:	4858      	ldr	r0, [pc, #352]	@ (800de28 <_printf_i+0x234>)
 800dcc8:	e011      	b.n	800dcee <_printf_i+0xfa>
 800dcca:	6821      	ldr	r1, [r4, #0]
 800dccc:	6833      	ldr	r3, [r6, #0]
 800dcce:	0608      	lsls	r0, r1, #24
 800dcd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcd4:	d402      	bmi.n	800dcdc <_printf_i+0xe8>
 800dcd6:	0649      	lsls	r1, r1, #25
 800dcd8:	bf48      	it	mi
 800dcda:	b2ad      	uxthmi	r5, r5
 800dcdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dcde:	6033      	str	r3, [r6, #0]
 800dce0:	bf14      	ite	ne
 800dce2:	230a      	movne	r3, #10
 800dce4:	2308      	moveq	r3, #8
 800dce6:	4850      	ldr	r0, [pc, #320]	@ (800de28 <_printf_i+0x234>)
 800dce8:	2100      	movs	r1, #0
 800dcea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dcee:	6866      	ldr	r6, [r4, #4]
 800dcf0:	2e00      	cmp	r6, #0
 800dcf2:	60a6      	str	r6, [r4, #8]
 800dcf4:	db05      	blt.n	800dd02 <_printf_i+0x10e>
 800dcf6:	6821      	ldr	r1, [r4, #0]
 800dcf8:	432e      	orrs	r6, r5
 800dcfa:	f021 0104 	bic.w	r1, r1, #4
 800dcfe:	6021      	str	r1, [r4, #0]
 800dd00:	d04b      	beq.n	800dd9a <_printf_i+0x1a6>
 800dd02:	4616      	mov	r6, r2
 800dd04:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd08:	fb03 5711 	mls	r7, r3, r1, r5
 800dd0c:	5dc7      	ldrb	r7, [r0, r7]
 800dd0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd12:	462f      	mov	r7, r5
 800dd14:	42bb      	cmp	r3, r7
 800dd16:	460d      	mov	r5, r1
 800dd18:	d9f4      	bls.n	800dd04 <_printf_i+0x110>
 800dd1a:	2b08      	cmp	r3, #8
 800dd1c:	d10b      	bne.n	800dd36 <_printf_i+0x142>
 800dd1e:	6823      	ldr	r3, [r4, #0]
 800dd20:	07df      	lsls	r7, r3, #31
 800dd22:	d508      	bpl.n	800dd36 <_printf_i+0x142>
 800dd24:	6923      	ldr	r3, [r4, #16]
 800dd26:	6861      	ldr	r1, [r4, #4]
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	bfde      	ittt	le
 800dd2c:	2330      	movle	r3, #48	@ 0x30
 800dd2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd32:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd36:	1b92      	subs	r2, r2, r6
 800dd38:	6122      	str	r2, [r4, #16]
 800dd3a:	464b      	mov	r3, r9
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	4640      	mov	r0, r8
 800dd40:	f8cd a000 	str.w	sl, [sp]
 800dd44:	aa03      	add	r2, sp, #12
 800dd46:	f7ff fee3 	bl	800db10 <_printf_common>
 800dd4a:	3001      	adds	r0, #1
 800dd4c:	d14a      	bne.n	800dde4 <_printf_i+0x1f0>
 800dd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd52:	b004      	add	sp, #16
 800dd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	f043 0320 	orr.w	r3, r3, #32
 800dd5e:	6023      	str	r3, [r4, #0]
 800dd60:	2778      	movs	r7, #120	@ 0x78
 800dd62:	4832      	ldr	r0, [pc, #200]	@ (800de2c <_printf_i+0x238>)
 800dd64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	6831      	ldr	r1, [r6, #0]
 800dd6c:	061f      	lsls	r7, r3, #24
 800dd6e:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd72:	d402      	bmi.n	800dd7a <_printf_i+0x186>
 800dd74:	065f      	lsls	r7, r3, #25
 800dd76:	bf48      	it	mi
 800dd78:	b2ad      	uxthmi	r5, r5
 800dd7a:	6031      	str	r1, [r6, #0]
 800dd7c:	07d9      	lsls	r1, r3, #31
 800dd7e:	bf44      	itt	mi
 800dd80:	f043 0320 	orrmi.w	r3, r3, #32
 800dd84:	6023      	strmi	r3, [r4, #0]
 800dd86:	b11d      	cbz	r5, 800dd90 <_printf_i+0x19c>
 800dd88:	2310      	movs	r3, #16
 800dd8a:	e7ad      	b.n	800dce8 <_printf_i+0xf4>
 800dd8c:	4826      	ldr	r0, [pc, #152]	@ (800de28 <_printf_i+0x234>)
 800dd8e:	e7e9      	b.n	800dd64 <_printf_i+0x170>
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	f023 0320 	bic.w	r3, r3, #32
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	e7f6      	b.n	800dd88 <_printf_i+0x194>
 800dd9a:	4616      	mov	r6, r2
 800dd9c:	e7bd      	b.n	800dd1a <_printf_i+0x126>
 800dd9e:	6833      	ldr	r3, [r6, #0]
 800dda0:	6825      	ldr	r5, [r4, #0]
 800dda2:	1d18      	adds	r0, r3, #4
 800dda4:	6961      	ldr	r1, [r4, #20]
 800dda6:	6030      	str	r0, [r6, #0]
 800dda8:	062e      	lsls	r6, r5, #24
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	d501      	bpl.n	800ddb2 <_printf_i+0x1be>
 800ddae:	6019      	str	r1, [r3, #0]
 800ddb0:	e002      	b.n	800ddb8 <_printf_i+0x1c4>
 800ddb2:	0668      	lsls	r0, r5, #25
 800ddb4:	d5fb      	bpl.n	800ddae <_printf_i+0x1ba>
 800ddb6:	8019      	strh	r1, [r3, #0]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4616      	mov	r6, r2
 800ddbc:	6123      	str	r3, [r4, #16]
 800ddbe:	e7bc      	b.n	800dd3a <_printf_i+0x146>
 800ddc0:	6833      	ldr	r3, [r6, #0]
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	1d1a      	adds	r2, r3, #4
 800ddc6:	6032      	str	r2, [r6, #0]
 800ddc8:	681e      	ldr	r6, [r3, #0]
 800ddca:	6862      	ldr	r2, [r4, #4]
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f000 f901 	bl	800dfd4 <memchr>
 800ddd2:	b108      	cbz	r0, 800ddd8 <_printf_i+0x1e4>
 800ddd4:	1b80      	subs	r0, r0, r6
 800ddd6:	6060      	str	r0, [r4, #4]
 800ddd8:	6863      	ldr	r3, [r4, #4]
 800ddda:	6123      	str	r3, [r4, #16]
 800dddc:	2300      	movs	r3, #0
 800ddde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dde2:	e7aa      	b.n	800dd3a <_printf_i+0x146>
 800dde4:	4632      	mov	r2, r6
 800dde6:	4649      	mov	r1, r9
 800dde8:	4640      	mov	r0, r8
 800ddea:	6923      	ldr	r3, [r4, #16]
 800ddec:	47d0      	blx	sl
 800ddee:	3001      	adds	r0, #1
 800ddf0:	d0ad      	beq.n	800dd4e <_printf_i+0x15a>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	079b      	lsls	r3, r3, #30
 800ddf6:	d413      	bmi.n	800de20 <_printf_i+0x22c>
 800ddf8:	68e0      	ldr	r0, [r4, #12]
 800ddfa:	9b03      	ldr	r3, [sp, #12]
 800ddfc:	4298      	cmp	r0, r3
 800ddfe:	bfb8      	it	lt
 800de00:	4618      	movlt	r0, r3
 800de02:	e7a6      	b.n	800dd52 <_printf_i+0x15e>
 800de04:	2301      	movs	r3, #1
 800de06:	4632      	mov	r2, r6
 800de08:	4649      	mov	r1, r9
 800de0a:	4640      	mov	r0, r8
 800de0c:	47d0      	blx	sl
 800de0e:	3001      	adds	r0, #1
 800de10:	d09d      	beq.n	800dd4e <_printf_i+0x15a>
 800de12:	3501      	adds	r5, #1
 800de14:	68e3      	ldr	r3, [r4, #12]
 800de16:	9903      	ldr	r1, [sp, #12]
 800de18:	1a5b      	subs	r3, r3, r1
 800de1a:	42ab      	cmp	r3, r5
 800de1c:	dcf2      	bgt.n	800de04 <_printf_i+0x210>
 800de1e:	e7eb      	b.n	800ddf8 <_printf_i+0x204>
 800de20:	2500      	movs	r5, #0
 800de22:	f104 0619 	add.w	r6, r4, #25
 800de26:	e7f5      	b.n	800de14 <_printf_i+0x220>
 800de28:	0800f92a 	.word	0x0800f92a
 800de2c:	0800f93b 	.word	0x0800f93b

0800de30 <__sflush_r>:
 800de30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	0716      	lsls	r6, r2, #28
 800de38:	4605      	mov	r5, r0
 800de3a:	460c      	mov	r4, r1
 800de3c:	d454      	bmi.n	800dee8 <__sflush_r+0xb8>
 800de3e:	684b      	ldr	r3, [r1, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	dc02      	bgt.n	800de4a <__sflush_r+0x1a>
 800de44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de46:	2b00      	cmp	r3, #0
 800de48:	dd48      	ble.n	800dedc <__sflush_r+0xac>
 800de4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de4c:	2e00      	cmp	r6, #0
 800de4e:	d045      	beq.n	800dedc <__sflush_r+0xac>
 800de50:	2300      	movs	r3, #0
 800de52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de56:	682f      	ldr	r7, [r5, #0]
 800de58:	6a21      	ldr	r1, [r4, #32]
 800de5a:	602b      	str	r3, [r5, #0]
 800de5c:	d030      	beq.n	800dec0 <__sflush_r+0x90>
 800de5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	0759      	lsls	r1, r3, #29
 800de64:	d505      	bpl.n	800de72 <__sflush_r+0x42>
 800de66:	6863      	ldr	r3, [r4, #4]
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de6c:	b10b      	cbz	r3, 800de72 <__sflush_r+0x42>
 800de6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de70:	1ad2      	subs	r2, r2, r3
 800de72:	2300      	movs	r3, #0
 800de74:	4628      	mov	r0, r5
 800de76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de78:	6a21      	ldr	r1, [r4, #32]
 800de7a:	47b0      	blx	r6
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	d106      	bne.n	800de90 <__sflush_r+0x60>
 800de82:	6829      	ldr	r1, [r5, #0]
 800de84:	291d      	cmp	r1, #29
 800de86:	d82b      	bhi.n	800dee0 <__sflush_r+0xb0>
 800de88:	4a28      	ldr	r2, [pc, #160]	@ (800df2c <__sflush_r+0xfc>)
 800de8a:	40ca      	lsrs	r2, r1
 800de8c:	07d6      	lsls	r6, r2, #31
 800de8e:	d527      	bpl.n	800dee0 <__sflush_r+0xb0>
 800de90:	2200      	movs	r2, #0
 800de92:	6062      	str	r2, [r4, #4]
 800de94:	6922      	ldr	r2, [r4, #16]
 800de96:	04d9      	lsls	r1, r3, #19
 800de98:	6022      	str	r2, [r4, #0]
 800de9a:	d504      	bpl.n	800dea6 <__sflush_r+0x76>
 800de9c:	1c42      	adds	r2, r0, #1
 800de9e:	d101      	bne.n	800dea4 <__sflush_r+0x74>
 800dea0:	682b      	ldr	r3, [r5, #0]
 800dea2:	b903      	cbnz	r3, 800dea6 <__sflush_r+0x76>
 800dea4:	6560      	str	r0, [r4, #84]	@ 0x54
 800dea6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dea8:	602f      	str	r7, [r5, #0]
 800deaa:	b1b9      	cbz	r1, 800dedc <__sflush_r+0xac>
 800deac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800deb0:	4299      	cmp	r1, r3
 800deb2:	d002      	beq.n	800deba <__sflush_r+0x8a>
 800deb4:	4628      	mov	r0, r5
 800deb6:	f7fe fbe5 	bl	800c684 <_free_r>
 800deba:	2300      	movs	r3, #0
 800debc:	6363      	str	r3, [r4, #52]	@ 0x34
 800debe:	e00d      	b.n	800dedc <__sflush_r+0xac>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4628      	mov	r0, r5
 800dec4:	47b0      	blx	r6
 800dec6:	4602      	mov	r2, r0
 800dec8:	1c50      	adds	r0, r2, #1
 800deca:	d1c9      	bne.n	800de60 <__sflush_r+0x30>
 800decc:	682b      	ldr	r3, [r5, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0c6      	beq.n	800de60 <__sflush_r+0x30>
 800ded2:	2b1d      	cmp	r3, #29
 800ded4:	d001      	beq.n	800deda <__sflush_r+0xaa>
 800ded6:	2b16      	cmp	r3, #22
 800ded8:	d11d      	bne.n	800df16 <__sflush_r+0xe6>
 800deda:	602f      	str	r7, [r5, #0]
 800dedc:	2000      	movs	r0, #0
 800dede:	e021      	b.n	800df24 <__sflush_r+0xf4>
 800dee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee4:	b21b      	sxth	r3, r3
 800dee6:	e01a      	b.n	800df1e <__sflush_r+0xee>
 800dee8:	690f      	ldr	r7, [r1, #16]
 800deea:	2f00      	cmp	r7, #0
 800deec:	d0f6      	beq.n	800dedc <__sflush_r+0xac>
 800deee:	0793      	lsls	r3, r2, #30
 800def0:	bf18      	it	ne
 800def2:	2300      	movne	r3, #0
 800def4:	680e      	ldr	r6, [r1, #0]
 800def6:	bf08      	it	eq
 800def8:	694b      	ldreq	r3, [r1, #20]
 800defa:	1bf6      	subs	r6, r6, r7
 800defc:	600f      	str	r7, [r1, #0]
 800defe:	608b      	str	r3, [r1, #8]
 800df00:	2e00      	cmp	r6, #0
 800df02:	ddeb      	ble.n	800dedc <__sflush_r+0xac>
 800df04:	4633      	mov	r3, r6
 800df06:	463a      	mov	r2, r7
 800df08:	4628      	mov	r0, r5
 800df0a:	6a21      	ldr	r1, [r4, #32]
 800df0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800df10:	47e0      	blx	ip
 800df12:	2800      	cmp	r0, #0
 800df14:	dc07      	bgt.n	800df26 <__sflush_r+0xf6>
 800df16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df1e:	f04f 30ff 	mov.w	r0, #4294967295
 800df22:	81a3      	strh	r3, [r4, #12]
 800df24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df26:	4407      	add	r7, r0
 800df28:	1a36      	subs	r6, r6, r0
 800df2a:	e7e9      	b.n	800df00 <__sflush_r+0xd0>
 800df2c:	20400001 	.word	0x20400001

0800df30 <_fflush_r>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	690b      	ldr	r3, [r1, #16]
 800df34:	4605      	mov	r5, r0
 800df36:	460c      	mov	r4, r1
 800df38:	b913      	cbnz	r3, 800df40 <_fflush_r+0x10>
 800df3a:	2500      	movs	r5, #0
 800df3c:	4628      	mov	r0, r5
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	b118      	cbz	r0, 800df4a <_fflush_r+0x1a>
 800df42:	6a03      	ldr	r3, [r0, #32]
 800df44:	b90b      	cbnz	r3, 800df4a <_fflush_r+0x1a>
 800df46:	f7fe fa17 	bl	800c378 <__sinit>
 800df4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0f3      	beq.n	800df3a <_fflush_r+0xa>
 800df52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df54:	07d0      	lsls	r0, r2, #31
 800df56:	d404      	bmi.n	800df62 <_fflush_r+0x32>
 800df58:	0599      	lsls	r1, r3, #22
 800df5a:	d402      	bmi.n	800df62 <_fflush_r+0x32>
 800df5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df5e:	f7fe fb7a 	bl	800c656 <__retarget_lock_acquire_recursive>
 800df62:	4628      	mov	r0, r5
 800df64:	4621      	mov	r1, r4
 800df66:	f7ff ff63 	bl	800de30 <__sflush_r>
 800df6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df6c:	4605      	mov	r5, r0
 800df6e:	07da      	lsls	r2, r3, #31
 800df70:	d4e4      	bmi.n	800df3c <_fflush_r+0xc>
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	059b      	lsls	r3, r3, #22
 800df76:	d4e1      	bmi.n	800df3c <_fflush_r+0xc>
 800df78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df7a:	f7fe fb6d 	bl	800c658 <__retarget_lock_release_recursive>
 800df7e:	e7dd      	b.n	800df3c <_fflush_r+0xc>

0800df80 <memmove>:
 800df80:	4288      	cmp	r0, r1
 800df82:	b510      	push	{r4, lr}
 800df84:	eb01 0402 	add.w	r4, r1, r2
 800df88:	d902      	bls.n	800df90 <memmove+0x10>
 800df8a:	4284      	cmp	r4, r0
 800df8c:	4623      	mov	r3, r4
 800df8e:	d807      	bhi.n	800dfa0 <memmove+0x20>
 800df90:	1e43      	subs	r3, r0, #1
 800df92:	42a1      	cmp	r1, r4
 800df94:	d008      	beq.n	800dfa8 <memmove+0x28>
 800df96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df9e:	e7f8      	b.n	800df92 <memmove+0x12>
 800dfa0:	4601      	mov	r1, r0
 800dfa2:	4402      	add	r2, r0
 800dfa4:	428a      	cmp	r2, r1
 800dfa6:	d100      	bne.n	800dfaa <memmove+0x2a>
 800dfa8:	bd10      	pop	{r4, pc}
 800dfaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfb2:	e7f7      	b.n	800dfa4 <memmove+0x24>

0800dfb4 <_sbrk_r>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	4d05      	ldr	r5, [pc, #20]	@ (800dfd0 <_sbrk_r+0x1c>)
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	f7f6 f8ce 	bl	8004160 <_sbrk>
 800dfc4:	1c43      	adds	r3, r0, #1
 800dfc6:	d102      	bne.n	800dfce <_sbrk_r+0x1a>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	b103      	cbz	r3, 800dfce <_sbrk_r+0x1a>
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	20003b9c 	.word	0x20003b9c

0800dfd4 <memchr>:
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	b510      	push	{r4, lr}
 800dfd8:	b2c9      	uxtb	r1, r1
 800dfda:	4402      	add	r2, r0
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	4618      	mov	r0, r3
 800dfe0:	d101      	bne.n	800dfe6 <memchr+0x12>
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	e003      	b.n	800dfee <memchr+0x1a>
 800dfe6:	7804      	ldrb	r4, [r0, #0]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	428c      	cmp	r4, r1
 800dfec:	d1f6      	bne.n	800dfdc <memchr+0x8>
 800dfee:	bd10      	pop	{r4, pc}

0800dff0 <__assert_func>:
 800dff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dff2:	4614      	mov	r4, r2
 800dff4:	461a      	mov	r2, r3
 800dff6:	4b09      	ldr	r3, [pc, #36]	@ (800e01c <__assert_func+0x2c>)
 800dff8:	4605      	mov	r5, r0
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68d8      	ldr	r0, [r3, #12]
 800dffe:	b14c      	cbz	r4, 800e014 <__assert_func+0x24>
 800e000:	4b07      	ldr	r3, [pc, #28]	@ (800e020 <__assert_func+0x30>)
 800e002:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e006:	9100      	str	r1, [sp, #0]
 800e008:	462b      	mov	r3, r5
 800e00a:	4906      	ldr	r1, [pc, #24]	@ (800e024 <__assert_func+0x34>)
 800e00c:	f000 f858 	bl	800e0c0 <fiprintf>
 800e010:	f000 f868 	bl	800e0e4 <abort>
 800e014:	4b04      	ldr	r3, [pc, #16]	@ (800e028 <__assert_func+0x38>)
 800e016:	461c      	mov	r4, r3
 800e018:	e7f3      	b.n	800e002 <__assert_func+0x12>
 800e01a:	bf00      	nop
 800e01c:	20000300 	.word	0x20000300
 800e020:	0800f94c 	.word	0x0800f94c
 800e024:	0800f959 	.word	0x0800f959
 800e028:	0800f987 	.word	0x0800f987

0800e02c <_calloc_r>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	fba1 5402 	umull	r5, r4, r1, r2
 800e032:	b934      	cbnz	r4, 800e042 <_calloc_r+0x16>
 800e034:	4629      	mov	r1, r5
 800e036:	f7fe fec9 	bl	800cdcc <_malloc_r>
 800e03a:	4606      	mov	r6, r0
 800e03c:	b928      	cbnz	r0, 800e04a <_calloc_r+0x1e>
 800e03e:	4630      	mov	r0, r6
 800e040:	bd70      	pop	{r4, r5, r6, pc}
 800e042:	220c      	movs	r2, #12
 800e044:	2600      	movs	r6, #0
 800e046:	6002      	str	r2, [r0, #0]
 800e048:	e7f9      	b.n	800e03e <_calloc_r+0x12>
 800e04a:	462a      	mov	r2, r5
 800e04c:	4621      	mov	r1, r4
 800e04e:	f7fe fa64 	bl	800c51a <memset>
 800e052:	e7f4      	b.n	800e03e <_calloc_r+0x12>

0800e054 <malloc>:
 800e054:	4b02      	ldr	r3, [pc, #8]	@ (800e060 <malloc+0xc>)
 800e056:	4601      	mov	r1, r0
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	f7fe beb7 	b.w	800cdcc <_malloc_r>
 800e05e:	bf00      	nop
 800e060:	20000300 	.word	0x20000300

0800e064 <_realloc_r>:
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	4607      	mov	r7, r0
 800e06a:	4614      	mov	r4, r2
 800e06c:	460d      	mov	r5, r1
 800e06e:	b921      	cbnz	r1, 800e07a <_realloc_r+0x16>
 800e070:	4611      	mov	r1, r2
 800e072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e076:	f7fe bea9 	b.w	800cdcc <_malloc_r>
 800e07a:	b92a      	cbnz	r2, 800e088 <_realloc_r+0x24>
 800e07c:	f7fe fb02 	bl	800c684 <_free_r>
 800e080:	4625      	mov	r5, r4
 800e082:	4628      	mov	r0, r5
 800e084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e088:	f000 f833 	bl	800e0f2 <_malloc_usable_size_r>
 800e08c:	4284      	cmp	r4, r0
 800e08e:	4606      	mov	r6, r0
 800e090:	d802      	bhi.n	800e098 <_realloc_r+0x34>
 800e092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e096:	d8f4      	bhi.n	800e082 <_realloc_r+0x1e>
 800e098:	4621      	mov	r1, r4
 800e09a:	4638      	mov	r0, r7
 800e09c:	f7fe fe96 	bl	800cdcc <_malloc_r>
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	b908      	cbnz	r0, 800e0a8 <_realloc_r+0x44>
 800e0a4:	4645      	mov	r5, r8
 800e0a6:	e7ec      	b.n	800e082 <_realloc_r+0x1e>
 800e0a8:	42b4      	cmp	r4, r6
 800e0aa:	4622      	mov	r2, r4
 800e0ac:	4629      	mov	r1, r5
 800e0ae:	bf28      	it	cs
 800e0b0:	4632      	movcs	r2, r6
 800e0b2:	f7fe fad2 	bl	800c65a <memcpy>
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f7fe fae3 	bl	800c684 <_free_r>
 800e0be:	e7f1      	b.n	800e0a4 <_realloc_r+0x40>

0800e0c0 <fiprintf>:
 800e0c0:	b40e      	push	{r1, r2, r3}
 800e0c2:	b503      	push	{r0, r1, lr}
 800e0c4:	4601      	mov	r1, r0
 800e0c6:	ab03      	add	r3, sp, #12
 800e0c8:	4805      	ldr	r0, [pc, #20]	@ (800e0e0 <fiprintf+0x20>)
 800e0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ce:	6800      	ldr	r0, [r0, #0]
 800e0d0:	9301      	str	r3, [sp, #4]
 800e0d2:	f000 f83d 	bl	800e150 <_vfiprintf_r>
 800e0d6:	b002      	add	sp, #8
 800e0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0dc:	b003      	add	sp, #12
 800e0de:	4770      	bx	lr
 800e0e0:	20000300 	.word	0x20000300

0800e0e4 <abort>:
 800e0e4:	2006      	movs	r0, #6
 800e0e6:	b508      	push	{r3, lr}
 800e0e8:	f000 fa06 	bl	800e4f8 <raise>
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	f7f5 ffc2 	bl	8004076 <_exit>

0800e0f2 <_malloc_usable_size_r>:
 800e0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f6:	1f18      	subs	r0, r3, #4
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	bfbc      	itt	lt
 800e0fc:	580b      	ldrlt	r3, [r1, r0]
 800e0fe:	18c0      	addlt	r0, r0, r3
 800e100:	4770      	bx	lr

0800e102 <__sfputc_r>:
 800e102:	6893      	ldr	r3, [r2, #8]
 800e104:	b410      	push	{r4}
 800e106:	3b01      	subs	r3, #1
 800e108:	2b00      	cmp	r3, #0
 800e10a:	6093      	str	r3, [r2, #8]
 800e10c:	da07      	bge.n	800e11e <__sfputc_r+0x1c>
 800e10e:	6994      	ldr	r4, [r2, #24]
 800e110:	42a3      	cmp	r3, r4
 800e112:	db01      	blt.n	800e118 <__sfputc_r+0x16>
 800e114:	290a      	cmp	r1, #10
 800e116:	d102      	bne.n	800e11e <__sfputc_r+0x1c>
 800e118:	bc10      	pop	{r4}
 800e11a:	f000 b931 	b.w	800e380 <__swbuf_r>
 800e11e:	6813      	ldr	r3, [r2, #0]
 800e120:	1c58      	adds	r0, r3, #1
 800e122:	6010      	str	r0, [r2, #0]
 800e124:	7019      	strb	r1, [r3, #0]
 800e126:	4608      	mov	r0, r1
 800e128:	bc10      	pop	{r4}
 800e12a:	4770      	bx	lr

0800e12c <__sfputs_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	4606      	mov	r6, r0
 800e130:	460f      	mov	r7, r1
 800e132:	4614      	mov	r4, r2
 800e134:	18d5      	adds	r5, r2, r3
 800e136:	42ac      	cmp	r4, r5
 800e138:	d101      	bne.n	800e13e <__sfputs_r+0x12>
 800e13a:	2000      	movs	r0, #0
 800e13c:	e007      	b.n	800e14e <__sfputs_r+0x22>
 800e13e:	463a      	mov	r2, r7
 800e140:	4630      	mov	r0, r6
 800e142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e146:	f7ff ffdc 	bl	800e102 <__sfputc_r>
 800e14a:	1c43      	adds	r3, r0, #1
 800e14c:	d1f3      	bne.n	800e136 <__sfputs_r+0xa>
 800e14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e150 <_vfiprintf_r>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	460d      	mov	r5, r1
 800e156:	4614      	mov	r4, r2
 800e158:	4698      	mov	r8, r3
 800e15a:	4606      	mov	r6, r0
 800e15c:	b09d      	sub	sp, #116	@ 0x74
 800e15e:	b118      	cbz	r0, 800e168 <_vfiprintf_r+0x18>
 800e160:	6a03      	ldr	r3, [r0, #32]
 800e162:	b90b      	cbnz	r3, 800e168 <_vfiprintf_r+0x18>
 800e164:	f7fe f908 	bl	800c378 <__sinit>
 800e168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e16a:	07d9      	lsls	r1, r3, #31
 800e16c:	d405      	bmi.n	800e17a <_vfiprintf_r+0x2a>
 800e16e:	89ab      	ldrh	r3, [r5, #12]
 800e170:	059a      	lsls	r2, r3, #22
 800e172:	d402      	bmi.n	800e17a <_vfiprintf_r+0x2a>
 800e174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e176:	f7fe fa6e 	bl	800c656 <__retarget_lock_acquire_recursive>
 800e17a:	89ab      	ldrh	r3, [r5, #12]
 800e17c:	071b      	lsls	r3, r3, #28
 800e17e:	d501      	bpl.n	800e184 <_vfiprintf_r+0x34>
 800e180:	692b      	ldr	r3, [r5, #16]
 800e182:	b99b      	cbnz	r3, 800e1ac <_vfiprintf_r+0x5c>
 800e184:	4629      	mov	r1, r5
 800e186:	4630      	mov	r0, r6
 800e188:	f000 f938 	bl	800e3fc <__swsetup_r>
 800e18c:	b170      	cbz	r0, 800e1ac <_vfiprintf_r+0x5c>
 800e18e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e190:	07dc      	lsls	r4, r3, #31
 800e192:	d504      	bpl.n	800e19e <_vfiprintf_r+0x4e>
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	b01d      	add	sp, #116	@ 0x74
 800e19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	0598      	lsls	r0, r3, #22
 800e1a2:	d4f7      	bmi.n	800e194 <_vfiprintf_r+0x44>
 800e1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1a6:	f7fe fa57 	bl	800c658 <__retarget_lock_release_recursive>
 800e1aa:	e7f3      	b.n	800e194 <_vfiprintf_r+0x44>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1b0:	2320      	movs	r3, #32
 800e1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1b6:	2330      	movs	r3, #48	@ 0x30
 800e1b8:	f04f 0901 	mov.w	r9, #1
 800e1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e36c <_vfiprintf_r+0x21c>
 800e1c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1c8:	4623      	mov	r3, r4
 800e1ca:	469a      	mov	sl, r3
 800e1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1d0:	b10a      	cbz	r2, 800e1d6 <_vfiprintf_r+0x86>
 800e1d2:	2a25      	cmp	r2, #37	@ 0x25
 800e1d4:	d1f9      	bne.n	800e1ca <_vfiprintf_r+0x7a>
 800e1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e1da:	d00b      	beq.n	800e1f4 <_vfiprintf_r+0xa4>
 800e1dc:	465b      	mov	r3, fp
 800e1de:	4622      	mov	r2, r4
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffa2 	bl	800e12c <__sfputs_r>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	f000 80a7 	beq.w	800e33c <_vfiprintf_r+0x1ec>
 800e1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1f0:	445a      	add	r2, fp
 800e1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 809f 	beq.w	800e33c <_vfiprintf_r+0x1ec>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f04f 32ff 	mov.w	r2, #4294967295
 800e204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e208:	f10a 0a01 	add.w	sl, sl, #1
 800e20c:	9304      	str	r3, [sp, #16]
 800e20e:	9307      	str	r3, [sp, #28]
 800e210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e214:	931a      	str	r3, [sp, #104]	@ 0x68
 800e216:	4654      	mov	r4, sl
 800e218:	2205      	movs	r2, #5
 800e21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21e:	4853      	ldr	r0, [pc, #332]	@ (800e36c <_vfiprintf_r+0x21c>)
 800e220:	f7ff fed8 	bl	800dfd4 <memchr>
 800e224:	9a04      	ldr	r2, [sp, #16]
 800e226:	b9d8      	cbnz	r0, 800e260 <_vfiprintf_r+0x110>
 800e228:	06d1      	lsls	r1, r2, #27
 800e22a:	bf44      	itt	mi
 800e22c:	2320      	movmi	r3, #32
 800e22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e232:	0713      	lsls	r3, r2, #28
 800e234:	bf44      	itt	mi
 800e236:	232b      	movmi	r3, #43	@ 0x2b
 800e238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e23c:	f89a 3000 	ldrb.w	r3, [sl]
 800e240:	2b2a      	cmp	r3, #42	@ 0x2a
 800e242:	d015      	beq.n	800e270 <_vfiprintf_r+0x120>
 800e244:	4654      	mov	r4, sl
 800e246:	2000      	movs	r0, #0
 800e248:	f04f 0c0a 	mov.w	ip, #10
 800e24c:	9a07      	ldr	r2, [sp, #28]
 800e24e:	4621      	mov	r1, r4
 800e250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e254:	3b30      	subs	r3, #48	@ 0x30
 800e256:	2b09      	cmp	r3, #9
 800e258:	d94b      	bls.n	800e2f2 <_vfiprintf_r+0x1a2>
 800e25a:	b1b0      	cbz	r0, 800e28a <_vfiprintf_r+0x13a>
 800e25c:	9207      	str	r2, [sp, #28]
 800e25e:	e014      	b.n	800e28a <_vfiprintf_r+0x13a>
 800e260:	eba0 0308 	sub.w	r3, r0, r8
 800e264:	fa09 f303 	lsl.w	r3, r9, r3
 800e268:	4313      	orrs	r3, r2
 800e26a:	46a2      	mov	sl, r4
 800e26c:	9304      	str	r3, [sp, #16]
 800e26e:	e7d2      	b.n	800e216 <_vfiprintf_r+0xc6>
 800e270:	9b03      	ldr	r3, [sp, #12]
 800e272:	1d19      	adds	r1, r3, #4
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	9103      	str	r1, [sp, #12]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	bfbb      	ittet	lt
 800e27c:	425b      	neglt	r3, r3
 800e27e:	f042 0202 	orrlt.w	r2, r2, #2
 800e282:	9307      	strge	r3, [sp, #28]
 800e284:	9307      	strlt	r3, [sp, #28]
 800e286:	bfb8      	it	lt
 800e288:	9204      	strlt	r2, [sp, #16]
 800e28a:	7823      	ldrb	r3, [r4, #0]
 800e28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e28e:	d10a      	bne.n	800e2a6 <_vfiprintf_r+0x156>
 800e290:	7863      	ldrb	r3, [r4, #1]
 800e292:	2b2a      	cmp	r3, #42	@ 0x2a
 800e294:	d132      	bne.n	800e2fc <_vfiprintf_r+0x1ac>
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	3402      	adds	r4, #2
 800e29a:	1d1a      	adds	r2, r3, #4
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	9203      	str	r2, [sp, #12]
 800e2a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e370 <_vfiprintf_r+0x220>
 800e2aa:	2203      	movs	r2, #3
 800e2ac:	4650      	mov	r0, sl
 800e2ae:	7821      	ldrb	r1, [r4, #0]
 800e2b0:	f7ff fe90 	bl	800dfd4 <memchr>
 800e2b4:	b138      	cbz	r0, 800e2c6 <_vfiprintf_r+0x176>
 800e2b6:	2240      	movs	r2, #64	@ 0x40
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	eba0 000a 	sub.w	r0, r0, sl
 800e2be:	4082      	lsls	r2, r0
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	3401      	adds	r4, #1
 800e2c4:	9304      	str	r3, [sp, #16]
 800e2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2ca:	2206      	movs	r2, #6
 800e2cc:	4829      	ldr	r0, [pc, #164]	@ (800e374 <_vfiprintf_r+0x224>)
 800e2ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2d2:	f7ff fe7f 	bl	800dfd4 <memchr>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d03f      	beq.n	800e35a <_vfiprintf_r+0x20a>
 800e2da:	4b27      	ldr	r3, [pc, #156]	@ (800e378 <_vfiprintf_r+0x228>)
 800e2dc:	bb1b      	cbnz	r3, 800e326 <_vfiprintf_r+0x1d6>
 800e2de:	9b03      	ldr	r3, [sp, #12]
 800e2e0:	3307      	adds	r3, #7
 800e2e2:	f023 0307 	bic.w	r3, r3, #7
 800e2e6:	3308      	adds	r3, #8
 800e2e8:	9303      	str	r3, [sp, #12]
 800e2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ec:	443b      	add	r3, r7
 800e2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2f0:	e76a      	b.n	800e1c8 <_vfiprintf_r+0x78>
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2fa:	e7a8      	b.n	800e24e <_vfiprintf_r+0xfe>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f04f 0c0a 	mov.w	ip, #10
 800e302:	4619      	mov	r1, r3
 800e304:	3401      	adds	r4, #1
 800e306:	9305      	str	r3, [sp, #20]
 800e308:	4620      	mov	r0, r4
 800e30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e30e:	3a30      	subs	r2, #48	@ 0x30
 800e310:	2a09      	cmp	r2, #9
 800e312:	d903      	bls.n	800e31c <_vfiprintf_r+0x1cc>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d0c6      	beq.n	800e2a6 <_vfiprintf_r+0x156>
 800e318:	9105      	str	r1, [sp, #20]
 800e31a:	e7c4      	b.n	800e2a6 <_vfiprintf_r+0x156>
 800e31c:	4604      	mov	r4, r0
 800e31e:	2301      	movs	r3, #1
 800e320:	fb0c 2101 	mla	r1, ip, r1, r2
 800e324:	e7f0      	b.n	800e308 <_vfiprintf_r+0x1b8>
 800e326:	ab03      	add	r3, sp, #12
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	462a      	mov	r2, r5
 800e32c:	4630      	mov	r0, r6
 800e32e:	4b13      	ldr	r3, [pc, #76]	@ (800e37c <_vfiprintf_r+0x22c>)
 800e330:	a904      	add	r1, sp, #16
 800e332:	f3af 8000 	nop.w
 800e336:	4607      	mov	r7, r0
 800e338:	1c78      	adds	r0, r7, #1
 800e33a:	d1d6      	bne.n	800e2ea <_vfiprintf_r+0x19a>
 800e33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e33e:	07d9      	lsls	r1, r3, #31
 800e340:	d405      	bmi.n	800e34e <_vfiprintf_r+0x1fe>
 800e342:	89ab      	ldrh	r3, [r5, #12]
 800e344:	059a      	lsls	r2, r3, #22
 800e346:	d402      	bmi.n	800e34e <_vfiprintf_r+0x1fe>
 800e348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e34a:	f7fe f985 	bl	800c658 <__retarget_lock_release_recursive>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	065b      	lsls	r3, r3, #25
 800e352:	f53f af1f 	bmi.w	800e194 <_vfiprintf_r+0x44>
 800e356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e358:	e71e      	b.n	800e198 <_vfiprintf_r+0x48>
 800e35a:	ab03      	add	r3, sp, #12
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	462a      	mov	r2, r5
 800e360:	4630      	mov	r0, r6
 800e362:	4b06      	ldr	r3, [pc, #24]	@ (800e37c <_vfiprintf_r+0x22c>)
 800e364:	a904      	add	r1, sp, #16
 800e366:	f7ff fc45 	bl	800dbf4 <_printf_i>
 800e36a:	e7e4      	b.n	800e336 <_vfiprintf_r+0x1e6>
 800e36c:	0800f919 	.word	0x0800f919
 800e370:	0800f91f 	.word	0x0800f91f
 800e374:	0800f923 	.word	0x0800f923
 800e378:	00000000 	.word	0x00000000
 800e37c:	0800e12d 	.word	0x0800e12d

0800e380 <__swbuf_r>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	460e      	mov	r6, r1
 800e384:	4614      	mov	r4, r2
 800e386:	4605      	mov	r5, r0
 800e388:	b118      	cbz	r0, 800e392 <__swbuf_r+0x12>
 800e38a:	6a03      	ldr	r3, [r0, #32]
 800e38c:	b90b      	cbnz	r3, 800e392 <__swbuf_r+0x12>
 800e38e:	f7fd fff3 	bl	800c378 <__sinit>
 800e392:	69a3      	ldr	r3, [r4, #24]
 800e394:	60a3      	str	r3, [r4, #8]
 800e396:	89a3      	ldrh	r3, [r4, #12]
 800e398:	071a      	lsls	r2, r3, #28
 800e39a:	d501      	bpl.n	800e3a0 <__swbuf_r+0x20>
 800e39c:	6923      	ldr	r3, [r4, #16]
 800e39e:	b943      	cbnz	r3, 800e3b2 <__swbuf_r+0x32>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f82a 	bl	800e3fc <__swsetup_r>
 800e3a8:	b118      	cbz	r0, 800e3b2 <__swbuf_r+0x32>
 800e3aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	6922      	ldr	r2, [r4, #16]
 800e3b6:	b2f6      	uxtb	r6, r6
 800e3b8:	1a98      	subs	r0, r3, r2
 800e3ba:	6963      	ldr	r3, [r4, #20]
 800e3bc:	4637      	mov	r7, r6
 800e3be:	4283      	cmp	r3, r0
 800e3c0:	dc05      	bgt.n	800e3ce <__swbuf_r+0x4e>
 800e3c2:	4621      	mov	r1, r4
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f7ff fdb3 	bl	800df30 <_fflush_r>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d1ed      	bne.n	800e3aa <__swbuf_r+0x2a>
 800e3ce:	68a3      	ldr	r3, [r4, #8]
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	60a3      	str	r3, [r4, #8]
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	1c5a      	adds	r2, r3, #1
 800e3d8:	6022      	str	r2, [r4, #0]
 800e3da:	701e      	strb	r6, [r3, #0]
 800e3dc:	6962      	ldr	r2, [r4, #20]
 800e3de:	1c43      	adds	r3, r0, #1
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d004      	beq.n	800e3ee <__swbuf_r+0x6e>
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	07db      	lsls	r3, r3, #31
 800e3e8:	d5e1      	bpl.n	800e3ae <__swbuf_r+0x2e>
 800e3ea:	2e0a      	cmp	r6, #10
 800e3ec:	d1df      	bne.n	800e3ae <__swbuf_r+0x2e>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f7ff fd9d 	bl	800df30 <_fflush_r>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d0d9      	beq.n	800e3ae <__swbuf_r+0x2e>
 800e3fa:	e7d6      	b.n	800e3aa <__swbuf_r+0x2a>

0800e3fc <__swsetup_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4b29      	ldr	r3, [pc, #164]	@ (800e4a4 <__swsetup_r+0xa8>)
 800e400:	4605      	mov	r5, r0
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	460c      	mov	r4, r1
 800e406:	b118      	cbz	r0, 800e410 <__swsetup_r+0x14>
 800e408:	6a03      	ldr	r3, [r0, #32]
 800e40a:	b90b      	cbnz	r3, 800e410 <__swsetup_r+0x14>
 800e40c:	f7fd ffb4 	bl	800c378 <__sinit>
 800e410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e414:	0719      	lsls	r1, r3, #28
 800e416:	d422      	bmi.n	800e45e <__swsetup_r+0x62>
 800e418:	06da      	lsls	r2, r3, #27
 800e41a:	d407      	bmi.n	800e42c <__swsetup_r+0x30>
 800e41c:	2209      	movs	r2, #9
 800e41e:	602a      	str	r2, [r5, #0]
 800e420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	81a3      	strh	r3, [r4, #12]
 800e42a:	e033      	b.n	800e494 <__swsetup_r+0x98>
 800e42c:	0758      	lsls	r0, r3, #29
 800e42e:	d512      	bpl.n	800e456 <__swsetup_r+0x5a>
 800e430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e432:	b141      	cbz	r1, 800e446 <__swsetup_r+0x4a>
 800e434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e438:	4299      	cmp	r1, r3
 800e43a:	d002      	beq.n	800e442 <__swsetup_r+0x46>
 800e43c:	4628      	mov	r0, r5
 800e43e:	f7fe f921 	bl	800c684 <_free_r>
 800e442:	2300      	movs	r3, #0
 800e444:	6363      	str	r3, [r4, #52]	@ 0x34
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	2300      	movs	r3, #0
 800e450:	6063      	str	r3, [r4, #4]
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f043 0308 	orr.w	r3, r3, #8
 800e45c:	81a3      	strh	r3, [r4, #12]
 800e45e:	6923      	ldr	r3, [r4, #16]
 800e460:	b94b      	cbnz	r3, 800e476 <__swsetup_r+0x7a>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e46c:	d003      	beq.n	800e476 <__swsetup_r+0x7a>
 800e46e:	4621      	mov	r1, r4
 800e470:	4628      	mov	r0, r5
 800e472:	f000 f882 	bl	800e57a <__smakebuf_r>
 800e476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e47a:	f013 0201 	ands.w	r2, r3, #1
 800e47e:	d00a      	beq.n	800e496 <__swsetup_r+0x9a>
 800e480:	2200      	movs	r2, #0
 800e482:	60a2      	str	r2, [r4, #8]
 800e484:	6962      	ldr	r2, [r4, #20]
 800e486:	4252      	negs	r2, r2
 800e488:	61a2      	str	r2, [r4, #24]
 800e48a:	6922      	ldr	r2, [r4, #16]
 800e48c:	b942      	cbnz	r2, 800e4a0 <__swsetup_r+0xa4>
 800e48e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e492:	d1c5      	bne.n	800e420 <__swsetup_r+0x24>
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	0799      	lsls	r1, r3, #30
 800e498:	bf58      	it	pl
 800e49a:	6962      	ldrpl	r2, [r4, #20]
 800e49c:	60a2      	str	r2, [r4, #8]
 800e49e:	e7f4      	b.n	800e48a <__swsetup_r+0x8e>
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e7f7      	b.n	800e494 <__swsetup_r+0x98>
 800e4a4:	20000300 	.word	0x20000300

0800e4a8 <_raise_r>:
 800e4a8:	291f      	cmp	r1, #31
 800e4aa:	b538      	push	{r3, r4, r5, lr}
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	d904      	bls.n	800e4bc <_raise_r+0x14>
 800e4b2:	2316      	movs	r3, #22
 800e4b4:	6003      	str	r3, [r0, #0]
 800e4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e4be:	b112      	cbz	r2, 800e4c6 <_raise_r+0x1e>
 800e4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4c4:	b94b      	cbnz	r3, 800e4da <_raise_r+0x32>
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f830 	bl	800e52c <_getpid_r>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	4601      	mov	r1, r0
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4d6:	f000 b817 	b.w	800e508 <_kill_r>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d00a      	beq.n	800e4f4 <_raise_r+0x4c>
 800e4de:	1c59      	adds	r1, r3, #1
 800e4e0:	d103      	bne.n	800e4ea <_raise_r+0x42>
 800e4e2:	2316      	movs	r3, #22
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	e7e7      	b.n	800e4ba <_raise_r+0x12>
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4f2:	4798      	blx	r3
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	e7e0      	b.n	800e4ba <_raise_r+0x12>

0800e4f8 <raise>:
 800e4f8:	4b02      	ldr	r3, [pc, #8]	@ (800e504 <raise+0xc>)
 800e4fa:	4601      	mov	r1, r0
 800e4fc:	6818      	ldr	r0, [r3, #0]
 800e4fe:	f7ff bfd3 	b.w	800e4a8 <_raise_r>
 800e502:	bf00      	nop
 800e504:	20000300 	.word	0x20000300

0800e508 <_kill_r>:
 800e508:	b538      	push	{r3, r4, r5, lr}
 800e50a:	2300      	movs	r3, #0
 800e50c:	4d06      	ldr	r5, [pc, #24]	@ (800e528 <_kill_r+0x20>)
 800e50e:	4604      	mov	r4, r0
 800e510:	4608      	mov	r0, r1
 800e512:	4611      	mov	r1, r2
 800e514:	602b      	str	r3, [r5, #0]
 800e516:	f7f5 fd9e 	bl	8004056 <_kill>
 800e51a:	1c43      	adds	r3, r0, #1
 800e51c:	d102      	bne.n	800e524 <_kill_r+0x1c>
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	b103      	cbz	r3, 800e524 <_kill_r+0x1c>
 800e522:	6023      	str	r3, [r4, #0]
 800e524:	bd38      	pop	{r3, r4, r5, pc}
 800e526:	bf00      	nop
 800e528:	20003b9c 	.word	0x20003b9c

0800e52c <_getpid_r>:
 800e52c:	f7f5 bd8c 	b.w	8004048 <_getpid>

0800e530 <__swhatbuf_r>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	460c      	mov	r4, r1
 800e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e538:	4615      	mov	r5, r2
 800e53a:	2900      	cmp	r1, #0
 800e53c:	461e      	mov	r6, r3
 800e53e:	b096      	sub	sp, #88	@ 0x58
 800e540:	da0c      	bge.n	800e55c <__swhatbuf_r+0x2c>
 800e542:	89a3      	ldrh	r3, [r4, #12]
 800e544:	2100      	movs	r1, #0
 800e546:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e54a:	bf14      	ite	ne
 800e54c:	2340      	movne	r3, #64	@ 0x40
 800e54e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e552:	2000      	movs	r0, #0
 800e554:	6031      	str	r1, [r6, #0]
 800e556:	602b      	str	r3, [r5, #0]
 800e558:	b016      	add	sp, #88	@ 0x58
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	466a      	mov	r2, sp
 800e55e:	f000 f849 	bl	800e5f4 <_fstat_r>
 800e562:	2800      	cmp	r0, #0
 800e564:	dbed      	blt.n	800e542 <__swhatbuf_r+0x12>
 800e566:	9901      	ldr	r1, [sp, #4]
 800e568:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e56c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e570:	4259      	negs	r1, r3
 800e572:	4159      	adcs	r1, r3
 800e574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e578:	e7eb      	b.n	800e552 <__swhatbuf_r+0x22>

0800e57a <__smakebuf_r>:
 800e57a:	898b      	ldrh	r3, [r1, #12]
 800e57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e57e:	079d      	lsls	r5, r3, #30
 800e580:	4606      	mov	r6, r0
 800e582:	460c      	mov	r4, r1
 800e584:	d507      	bpl.n	800e596 <__smakebuf_r+0x1c>
 800e586:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	2301      	movs	r3, #1
 800e590:	6163      	str	r3, [r4, #20]
 800e592:	b003      	add	sp, #12
 800e594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e596:	466a      	mov	r2, sp
 800e598:	ab01      	add	r3, sp, #4
 800e59a:	f7ff ffc9 	bl	800e530 <__swhatbuf_r>
 800e59e:	9f00      	ldr	r7, [sp, #0]
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f7fe fc11 	bl	800cdcc <_malloc_r>
 800e5aa:	b948      	cbnz	r0, 800e5c0 <__smakebuf_r+0x46>
 800e5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5b0:	059a      	lsls	r2, r3, #22
 800e5b2:	d4ee      	bmi.n	800e592 <__smakebuf_r+0x18>
 800e5b4:	f023 0303 	bic.w	r3, r3, #3
 800e5b8:	f043 0302 	orr.w	r3, r3, #2
 800e5bc:	81a3      	strh	r3, [r4, #12]
 800e5be:	e7e2      	b.n	800e586 <__smakebuf_r+0xc>
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	9b01      	ldr	r3, [sp, #4]
 800e5ce:	6020      	str	r0, [r4, #0]
 800e5d0:	b15b      	cbz	r3, 800e5ea <__smakebuf_r+0x70>
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5d8:	f000 f81e 	bl	800e618 <_isatty_r>
 800e5dc:	b128      	cbz	r0, 800e5ea <__smakebuf_r+0x70>
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	f023 0303 	bic.w	r3, r3, #3
 800e5e4:	f043 0301 	orr.w	r3, r3, #1
 800e5e8:	81a3      	strh	r3, [r4, #12]
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	431d      	orrs	r5, r3
 800e5ee:	81a5      	strh	r5, [r4, #12]
 800e5f0:	e7cf      	b.n	800e592 <__smakebuf_r+0x18>
	...

0800e5f4 <_fstat_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	4d06      	ldr	r5, [pc, #24]	@ (800e614 <_fstat_r+0x20>)
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	602b      	str	r3, [r5, #0]
 800e602:	f7f5 fd87 	bl	8004114 <_fstat>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d102      	bne.n	800e610 <_fstat_r+0x1c>
 800e60a:	682b      	ldr	r3, [r5, #0]
 800e60c:	b103      	cbz	r3, 800e610 <_fstat_r+0x1c>
 800e60e:	6023      	str	r3, [r4, #0]
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	20003b9c 	.word	0x20003b9c

0800e618 <_isatty_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	2300      	movs	r3, #0
 800e61c:	4d05      	ldr	r5, [pc, #20]	@ (800e634 <_isatty_r+0x1c>)
 800e61e:	4604      	mov	r4, r0
 800e620:	4608      	mov	r0, r1
 800e622:	602b      	str	r3, [r5, #0]
 800e624:	f7f5 fd85 	bl	8004132 <_isatty>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_isatty_r+0x1a>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_isatty_r+0x1a>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	20003b9c 	.word	0x20003b9c

0800e638 <sqrt>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	f000 f81f 	bl	800e680 <__ieee754_sqrt>
 800e642:	4632      	mov	r2, r6
 800e644:	4604      	mov	r4, r0
 800e646:	460d      	mov	r5, r1
 800e648:	463b      	mov	r3, r7
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f2 f9dd 	bl	8000a0c <__aeabi_dcmpun>
 800e652:	b990      	cbnz	r0, 800e67a <sqrt+0x42>
 800e654:	2200      	movs	r2, #0
 800e656:	2300      	movs	r3, #0
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	f7f2 f9ae 	bl	80009bc <__aeabi_dcmplt>
 800e660:	b158      	cbz	r0, 800e67a <sqrt+0x42>
 800e662:	f7fd ffcd 	bl	800c600 <__errno>
 800e666:	2321      	movs	r3, #33	@ 0x21
 800e668:	2200      	movs	r2, #0
 800e66a:	6003      	str	r3, [r0, #0]
 800e66c:	2300      	movs	r3, #0
 800e66e:	4610      	mov	r0, r2
 800e670:	4619      	mov	r1, r3
 800e672:	f7f2 f85b 	bl	800072c <__aeabi_ddiv>
 800e676:	4604      	mov	r4, r0
 800e678:	460d      	mov	r5, r1
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e680 <__ieee754_sqrt>:
 800e680:	4a65      	ldr	r2, [pc, #404]	@ (800e818 <__ieee754_sqrt+0x198>)
 800e682:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e686:	438a      	bics	r2, r1
 800e688:	4606      	mov	r6, r0
 800e68a:	460f      	mov	r7, r1
 800e68c:	460b      	mov	r3, r1
 800e68e:	4604      	mov	r4, r0
 800e690:	d10e      	bne.n	800e6b0 <__ieee754_sqrt+0x30>
 800e692:	4602      	mov	r2, r0
 800e694:	f7f1 ff20 	bl	80004d8 <__aeabi_dmul>
 800e698:	4602      	mov	r2, r0
 800e69a:	460b      	mov	r3, r1
 800e69c:	4630      	mov	r0, r6
 800e69e:	4639      	mov	r1, r7
 800e6a0:	f7f1 fd64 	bl	800016c <__adddf3>
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	460f      	mov	r7, r1
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	4639      	mov	r1, r7
 800e6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b0:	2900      	cmp	r1, #0
 800e6b2:	dc0c      	bgt.n	800e6ce <__ieee754_sqrt+0x4e>
 800e6b4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800e6b8:	4302      	orrs	r2, r0
 800e6ba:	d0f5      	beq.n	800e6a8 <__ieee754_sqrt+0x28>
 800e6bc:	b189      	cbz	r1, 800e6e2 <__ieee754_sqrt+0x62>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	f7f1 fd52 	bl	8000168 <__aeabi_dsub>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	f7f2 f830 	bl	800072c <__aeabi_ddiv>
 800e6cc:	e7ea      	b.n	800e6a4 <__ieee754_sqrt+0x24>
 800e6ce:	150a      	asrs	r2, r1, #20
 800e6d0:	d115      	bne.n	800e6fe <__ieee754_sqrt+0x7e>
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	e009      	b.n	800e6ea <__ieee754_sqrt+0x6a>
 800e6d6:	0ae3      	lsrs	r3, r4, #11
 800e6d8:	3a15      	subs	r2, #21
 800e6da:	0564      	lsls	r4, r4, #21
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d0fa      	beq.n	800e6d6 <__ieee754_sqrt+0x56>
 800e6e0:	e7f7      	b.n	800e6d2 <__ieee754_sqrt+0x52>
 800e6e2:	460a      	mov	r2, r1
 800e6e4:	e7fa      	b.n	800e6dc <__ieee754_sqrt+0x5c>
 800e6e6:	005b      	lsls	r3, r3, #1
 800e6e8:	3101      	adds	r1, #1
 800e6ea:	02d8      	lsls	r0, r3, #11
 800e6ec:	d5fb      	bpl.n	800e6e6 <__ieee754_sqrt+0x66>
 800e6ee:	1e48      	subs	r0, r1, #1
 800e6f0:	1a12      	subs	r2, r2, r0
 800e6f2:	f1c1 0020 	rsb	r0, r1, #32
 800e6f6:	fa24 f000 	lsr.w	r0, r4, r0
 800e6fa:	4303      	orrs	r3, r0
 800e6fc:	408c      	lsls	r4, r1
 800e6fe:	2700      	movs	r7, #0
 800e700:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800e704:	2116      	movs	r1, #22
 800e706:	07d2      	lsls	r2, r2, #31
 800e708:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e70c:	463a      	mov	r2, r7
 800e70e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e716:	bf5c      	itt	pl
 800e718:	005b      	lslpl	r3, r3, #1
 800e71a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800e71e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e722:	bf58      	it	pl
 800e724:	0064      	lslpl	r4, r4, #1
 800e726:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e72a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e72e:	0064      	lsls	r4, r4, #1
 800e730:	1815      	adds	r5, r2, r0
 800e732:	429d      	cmp	r5, r3
 800e734:	bfde      	ittt	le
 800e736:	182a      	addle	r2, r5, r0
 800e738:	1b5b      	suble	r3, r3, r5
 800e73a:	183f      	addle	r7, r7, r0
 800e73c:	0fe5      	lsrs	r5, r4, #31
 800e73e:	3901      	subs	r1, #1
 800e740:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e744:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e748:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e74c:	d1f0      	bne.n	800e730 <__ieee754_sqrt+0xb0>
 800e74e:	460d      	mov	r5, r1
 800e750:	2620      	movs	r6, #32
 800e752:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800e756:	4293      	cmp	r3, r2
 800e758:	eb00 0c01 	add.w	ip, r0, r1
 800e75c:	dc02      	bgt.n	800e764 <__ieee754_sqrt+0xe4>
 800e75e:	d113      	bne.n	800e788 <__ieee754_sqrt+0x108>
 800e760:	45a4      	cmp	ip, r4
 800e762:	d811      	bhi.n	800e788 <__ieee754_sqrt+0x108>
 800e764:	f1bc 0f00 	cmp.w	ip, #0
 800e768:	eb0c 0100 	add.w	r1, ip, r0
 800e76c:	da3e      	bge.n	800e7ec <__ieee754_sqrt+0x16c>
 800e76e:	2900      	cmp	r1, #0
 800e770:	db3c      	blt.n	800e7ec <__ieee754_sqrt+0x16c>
 800e772:	f102 0e01 	add.w	lr, r2, #1
 800e776:	1a9b      	subs	r3, r3, r2
 800e778:	4672      	mov	r2, lr
 800e77a:	45a4      	cmp	ip, r4
 800e77c:	bf88      	it	hi
 800e77e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e782:	eba4 040c 	sub.w	r4, r4, ip
 800e786:	4405      	add	r5, r0
 800e788:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800e78c:	3e01      	subs	r6, #1
 800e78e:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800e792:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e796:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e79a:	d1dc      	bne.n	800e756 <__ieee754_sqrt+0xd6>
 800e79c:	431c      	orrs	r4, r3
 800e79e:	d01a      	beq.n	800e7d6 <__ieee754_sqrt+0x156>
 800e7a0:	4c1e      	ldr	r4, [pc, #120]	@ (800e81c <__ieee754_sqrt+0x19c>)
 800e7a2:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800e820 <__ieee754_sqrt+0x1a0>
 800e7a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e7aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7ae:	f7f1 fcdb 	bl	8000168 <__aeabi_dsub>
 800e7b2:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4650      	mov	r0, sl
 800e7bc:	4659      	mov	r1, fp
 800e7be:	f7f2 f907 	bl	80009d0 <__aeabi_dcmple>
 800e7c2:	b140      	cbz	r0, 800e7d6 <__ieee754_sqrt+0x156>
 800e7c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e7c8:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e7cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e7d0:	d10e      	bne.n	800e7f0 <__ieee754_sqrt+0x170>
 800e7d2:	4635      	mov	r5, r6
 800e7d4:	3701      	adds	r7, #1
 800e7d6:	107b      	asrs	r3, r7, #1
 800e7d8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e7dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e7e0:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800e7e4:	086b      	lsrs	r3, r5, #1
 800e7e6:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800e7ea:	e75b      	b.n	800e6a4 <__ieee754_sqrt+0x24>
 800e7ec:	4696      	mov	lr, r2
 800e7ee:	e7c2      	b.n	800e776 <__ieee754_sqrt+0xf6>
 800e7f0:	f7f1 fcbc 	bl	800016c <__adddf3>
 800e7f4:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4650      	mov	r0, sl
 800e7fe:	4659      	mov	r1, fp
 800e800:	f7f2 f8dc 	bl	80009bc <__aeabi_dcmplt>
 800e804:	b120      	cbz	r0, 800e810 <__ieee754_sqrt+0x190>
 800e806:	1cab      	adds	r3, r5, #2
 800e808:	bf08      	it	eq
 800e80a:	3701      	addeq	r7, #1
 800e80c:	3502      	adds	r5, #2
 800e80e:	e7e2      	b.n	800e7d6 <__ieee754_sqrt+0x156>
 800e810:	1c6b      	adds	r3, r5, #1
 800e812:	f023 0501 	bic.w	r5, r3, #1
 800e816:	e7de      	b.n	800e7d6 <__ieee754_sqrt+0x156>
 800e818:	7ff00000 	.word	0x7ff00000
 800e81c:	0800fbe8 	.word	0x0800fbe8
 800e820:	0800fbe0 	.word	0x0800fbe0

0800e824 <truncf>:
 800e824:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e828:	3b7f      	subs	r3, #127	@ 0x7f
 800e82a:	2b16      	cmp	r3, #22
 800e82c:	4601      	mov	r1, r0
 800e82e:	b510      	push	{r4, lr}
 800e830:	dc0a      	bgt.n	800e848 <truncf+0x24>
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800e838:	db04      	blt.n	800e844 <truncf+0x20>
 800e83a:	4a06      	ldr	r2, [pc, #24]	@ (800e854 <truncf+0x30>)
 800e83c:	fa42 f303 	asr.w	r3, r2, r3
 800e840:	4003      	ands	r3, r0
 800e842:	4319      	orrs	r1, r3
 800e844:	4608      	mov	r0, r1
 800e846:	bd10      	pop	{r4, pc}
 800e848:	2b80      	cmp	r3, #128	@ 0x80
 800e84a:	d1fb      	bne.n	800e844 <truncf+0x20>
 800e84c:	f7f2 f96a 	bl	8000b24 <__addsf3>
 800e850:	4601      	mov	r1, r0
 800e852:	e7f7      	b.n	800e844 <truncf+0x20>
 800e854:	ff800000 	.word	0xff800000

0800e858 <_init>:
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85a:	bf00      	nop
 800e85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e85e:	bc08      	pop	{r3}
 800e860:	469e      	mov	lr, r3
 800e862:	4770      	bx	lr

0800e864 <_fini>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	bf00      	nop
 800e868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e86a:	bc08      	pop	{r3}
 800e86c:	469e      	mov	lr, r3
 800e86e:	4770      	bx	lr
