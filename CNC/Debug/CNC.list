
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae98  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  0800afa8  0800afa8  0000bfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c730  0800c730  0000e350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c730  0800c730  0000d730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c738  0800c738  0000e350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c738  0800c738  0000d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c73c  0800c73c  0000d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800c740  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a0  20000350  0800ca90  0000e350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049f0  0800ca90  0000e9f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019473  00000000  00000000  0000e379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043db  00000000  00000000  000277ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009ecf  00000000  00000000  0002bbc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c5  00000000  00000000  000368e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b276  00000000  00000000  000379ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018131  00000000  00000000  00052c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a682  00000000  00000000  0006ad54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f53d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003db8  00000000  00000000  000f541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000f91d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af90 	.word	0x0800af90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800af90 	.word	0x0800af90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f7ff fbf3 	bl	80009bc <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x1c>
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f8ea 	bl	80003e4 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffa2 	bl	8000168 <__aeabi_dsub>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <check_soft_limits>:
  * @param  x_defined: True si X está definido en el comando
  * @param  y_defined: True si Y está definido en el comando
  * @param  z_defined: True si Z está definido en el comando
  * @retval STATUS_OK si está dentro de límites, STATUS_SOFT_LIMIT_ERROR si está fuera
  */
uint8_t check_soft_limits(float target_x, float target_y, float target_z, bool x_defined, bool y_defined, bool z_defined) {
 8001234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001238:	b09e      	sub	sp, #120	@ 0x78
 800123a:	4607      	mov	r7, r0
 800123c:	460e      	mov	r6, r1
 800123e:	4615      	mov	r5, r2
 8001240:	f89d 8090 	ldrb.w	r8, [sp, #144]	@ 0x90
 8001244:	f89d 4094 	ldrb.w	r4, [sp, #148]	@ 0x94
    char msg[100];
    
    // Verificar límites para eje X
    if (x_defined) {
 8001248:	b323      	cbz	r3, 8001294 <check_soft_limits+0x60>
        if (target_x < MIN_TRAVEL_X || target_x > MAX_TRAVEL_X) {
 800124a:	2100      	movs	r1, #0
 800124c:	f7ff ff38 	bl	80010c0 <__aeabi_fcmplt>
 8001250:	b920      	cbnz	r0, 800125c <check_soft_limits+0x28>
 8001252:	4638      	mov	r0, r7
 8001254:	492c      	ldr	r1, [pc, #176]	@ (8001308 <check_soft_limits+0xd4>)
 8001256:	f7ff ff51 	bl	80010fc <__aeabi_fcmpgt>
 800125a:	b1d8      	cbz	r0, 8001294 <check_soft_limits+0x60>
            sprintf(msg, "Error: X=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 800125c:	4638      	mov	r0, r7
 800125e:	f7ff f8e3 	bl	8000428 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	2000      	movs	r0, #0
 8001266:	460b      	mov	r3, r1
 8001268:	4928      	ldr	r1, [pc, #160]	@ (800130c <check_soft_limits+0xd8>)
 800126a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800126e:	2100      	movs	r1, #0
 8001270:	2000      	movs	r0, #0
 8001272:	e9cd 0100 	strd	r0, r1, [sp]
 8001276:	4926      	ldr	r1, [pc, #152]	@ (8001310 <check_soft_limits+0xdc>)
    }
    
    // Verificar límites para eje Y
    if (y_defined) {
        if (target_y < MIN_TRAVEL_Y || target_y > MAX_TRAVEL_Y) {
            sprintf(msg, "Error: Y=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 8001278:	a805      	add	r0, sp, #20
 800127a:	f006 fa01 	bl	8007680 <siprintf>
                   target_y, MIN_TRAVEL_Y, MAX_TRAVEL_Y);
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800127e:	a805      	add	r0, sp, #20
 8001280:	f7fe ff66 	bl	8000150 <strlen>
 8001284:	b281      	uxth	r1, r0
 8001286:	a805      	add	r0, sp, #20
 8001288:	f005 f8d4 	bl	8006434 <CDC_Transmit_FS>
            return STATUS_SOFT_LIMIT_ERROR;
 800128c:	2005      	movs	r0, #5
            return STATUS_SOFT_LIMIT_ERROR;
        }
    }
    
    return STATUS_OK;  // Todas las coordenadas están dentro de límites
}
 800128e:	b01e      	add	sp, #120	@ 0x78
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (y_defined) {
 8001294:	f1b8 0f00 	cmp.w	r8, #0
 8001298:	d018      	beq.n	80012cc <check_soft_limits+0x98>
        if (target_y < MIN_TRAVEL_Y || target_y > MAX_TRAVEL_Y) {
 800129a:	2100      	movs	r1, #0
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff ff0f 	bl	80010c0 <__aeabi_fcmplt>
 80012a2:	b920      	cbnz	r0, 80012ae <check_soft_limits+0x7a>
 80012a4:	4630      	mov	r0, r6
 80012a6:	4918      	ldr	r1, [pc, #96]	@ (8001308 <check_soft_limits+0xd4>)
 80012a8:	f7ff ff28 	bl	80010fc <__aeabi_fcmpgt>
 80012ac:	b170      	cbz	r0, 80012cc <check_soft_limits+0x98>
            sprintf(msg, "Error: Y=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff f8ba 	bl	8000428 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	2000      	movs	r0, #0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4914      	ldr	r1, [pc, #80]	@ (800130c <check_soft_limits+0xd8>)
 80012bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	e9cd 0100 	strd	r0, r1, [sp]
 80012c8:	4912      	ldr	r1, [pc, #72]	@ (8001314 <check_soft_limits+0xe0>)
 80012ca:	e7d5      	b.n	8001278 <check_soft_limits+0x44>
    if (z_defined) {
 80012cc:	b1cc      	cbz	r4, 8001302 <check_soft_limits+0xce>
        if (target_z < MIN_TRAVEL_Z || target_z > MAX_TRAVEL_Z) {
 80012ce:	2100      	movs	r1, #0
 80012d0:	4628      	mov	r0, r5
 80012d2:	f7ff fef5 	bl	80010c0 <__aeabi_fcmplt>
 80012d6:	b928      	cbnz	r0, 80012e4 <check_soft_limits+0xb0>
 80012d8:	4628      	mov	r0, r5
 80012da:	490b      	ldr	r1, [pc, #44]	@ (8001308 <check_soft_limits+0xd4>)
 80012dc:	f7ff ff0e 	bl	80010fc <__aeabi_fcmpgt>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d0d4      	beq.n	800128e <check_soft_limits+0x5a>
            sprintf(msg, "Error: Z=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff f89f 	bl	8000428 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	2000      	movs	r0, #0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4906      	ldr	r1, [pc, #24]	@ (800130c <check_soft_limits+0xd8>)
 80012f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	e9cd 0100 	strd	r0, r1, [sp]
 80012fe:	4906      	ldr	r1, [pc, #24]	@ (8001318 <check_soft_limits+0xe4>)
 8001300:	e7ba      	b.n	8001278 <check_soft_limits+0x44>
    return STATUS_OK;  // Todas las coordenadas están dentro de límites
 8001302:	4620      	mov	r0, r4
 8001304:	e7c3      	b.n	800128e <check_soft_limits+0x5a>
 8001306:	bf00      	nop
 8001308:	43200000 	.word	0x43200000
 800130c:	40640000 	.word	0x40640000
 8001310:	0800afa8 	.word	0x0800afa8
 8001314:	0800afd7 	.word	0x0800afd7
 8001318:	0800b006 	.word	0x0800b006

0800131c <report_machine_limits>:
  * @brief  Reporta los límites de la máquina por USB
  * @retval None
  */
void report_machine_limits(void) {
    char msg[200];
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 800131c:	2200      	movs	r2, #0
 800131e:	2300      	movs	r3, #0
 8001320:	2000      	movs	r0, #0
void report_machine_limits(void) {
 8001322:	b500      	push	{lr}
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <report_machine_limits+0x3c>)
void report_machine_limits(void) {
 8001326:	b0bd      	sub	sp, #244	@ 0xf4
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 8001328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800132c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001338:	e9cd 0100 	strd	r0, r1, [sp]
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <report_machine_limits+0x40>)
 800133e:	a80a      	add	r0, sp, #40	@ 0x28
 8001340:	f006 f99e 	bl	8007680 <siprintf>
           MIN_TRAVEL_X, MAX_TRAVEL_X, MIN_TRAVEL_Y, MAX_TRAVEL_Y, MIN_TRAVEL_Z, MAX_TRAVEL_Z);
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001344:	a80a      	add	r0, sp, #40	@ 0x28
 8001346:	f7fe ff03 	bl	8000150 <strlen>
 800134a:	b281      	uxth	r1, r0
 800134c:	a80a      	add	r0, sp, #40	@ 0x28
 800134e:	f005 f871 	bl	8006434 <CDC_Transmit_FS>
}
 8001352:	b03d      	add	sp, #244	@ 0xf4
 8001354:	f85d fb04 	ldr.w	pc, [sp], #4
 8001358:	40640000 	.word	0x40640000
 800135c:	0800b035 	.word	0x0800b035

08001360 <gc_init>:
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 8001360:	2200      	movs	r2, #0
 8001362:	4b02      	ldr	r3, [pc, #8]	@ (800136c <gc_init+0xc>)
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	709a      	strb	r2, [r3, #2]
    gc_state_modal.motion = MOTION_MODE_SEEK;       // G0 por defecto
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
    gc_state_modal.program_flow = 0;                // Normal execution
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000036c 	.word	0x2000036c

08001370 <gc_clear_block>:

/**
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
 8001370:	b510      	push	{r4, lr}
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001372:	4c0d      	ldr	r4, [pc, #52]	@ (80013a8 <gc_clear_block+0x38>)
 8001374:	2225      	movs	r2, #37	@ 0x25
 8001376:	2100      	movs	r1, #0
 8001378:	4620      	mov	r0, r4
 800137a:	f006 f9e6 	bl	800774a <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <gc_clear_block+0x3c>)
 8001380:	8811      	ldrh	r1, [r2, #0]
 8001382:	7892      	ldrb	r2, [r2, #2]
 8001384:	f824 1c03 	strh.w	r1, [r4, #-3]
 8001388:	f804 2c01 	strb.w	r2, [r4, #-1]
    
    // Inicializar valores como indefinidos
    gc_block.values.x = NAN;
 800138c:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <gc_clear_block+0x40>)
 800138e:	f8c4 2001 	str.w	r2, [r4, #1]
    gc_block.values.y = NAN;
 8001392:	f8c4 2005 	str.w	r2, [r4, #5]
    gc_block.values.z = NAN;
 8001396:	f8c4 2009 	str.w	r2, [r4, #9]
    gc_block.values.f = NAN;
 800139a:	f8c4 200d 	str.w	r2, [r4, #13]
    gc_block.values.s = NAN;
 800139e:	f8c4 2011 	str.w	r2, [r4, #17]
    gc_block.values.p = 0;
    gc_block.values.r = NAN;
 80013a2:	f8c4 2015 	str.w	r2, [r4, #21]
    gc_block.values.y_defined = false;
    gc_block.values.z_defined = false;
    gc_block.values.f_defined = false;
    gc_block.values.s_defined = false;
    gc_block.values.r_defined = false;
}
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	20000373 	.word	0x20000373
 80013ac:	2000036c 	.word	0x2000036c
 80013b0:	7fc00000 	.word	0x7fc00000

080013b4 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	4615      	mov	r5, r2
    char *ptr = line + *char_counter;
 80013b8:	780b      	ldrb	r3, [r1, #0]
 80013ba:	18c4      	adds	r4, r0, r3
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 80013bc:	7823      	ldrb	r3, [r4, #0]
 80013be:	4620      	mov	r0, r4
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	f104 0401 	add.w	r4, r4, #1
 80013c6:	d005      	beq.n	80013d4 <read_float+0x20>
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d003      	beq.n	80013d4 <read_float+0x20>
        ptr++; 
        (*char_counter)++;
    }
    
    if (c == 0) return false;  // Fin de línea
 80013cc:	b933      	cbnz	r3, 80013dc <read_float+0x28>
 80013ce:	2400      	movs	r4, #0
    
    if (!found_digit) return false;
    
    *float_ptr = atof(start);
    return true;
}
 80013d0:	4620      	mov	r0, r4
 80013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (*char_counter)++;
 80013d4:	780b      	ldrb	r3, [r1, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	700b      	strb	r3, [r1, #0]
 80013da:	e7ef      	b.n	80013bc <read_float+0x8>
    if (c == '+' || c == '-') { 
 80013dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80013de:	d001      	beq.n	80013e4 <read_float+0x30>
 80013e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80013e2:	d117      	bne.n	8001414 <read_float+0x60>
        (*char_counter)++;
 80013e4:	780a      	ldrb	r2, [r1, #0]
        ptr++; 
 80013e6:	1c43      	adds	r3, r0, #1
        (*char_counter)++;
 80013e8:	3201      	adds	r2, #1
 80013ea:	700a      	strb	r2, [r1, #0]
            found_decimal = true;
 80013ec:	2400      	movs	r4, #0
 80013ee:	4626      	mov	r6, r4
 80013f0:	3b01      	subs	r3, #1
    while ((c = *ptr) != 0) {
 80013f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80013f6:	b12a      	cbz	r2, 8001404 <read_float+0x50>
        if (c >= '0' && c <= '9') {
 80013f8:	f1a2 0730 	sub.w	r7, r2, #48	@ 0x30
 80013fc:	2f09      	cmp	r7, #9
 80013fe:	d912      	bls.n	8001426 <read_float+0x72>
        } else if (c == '.' && !found_decimal) {
 8001400:	2a2e      	cmp	r2, #46	@ 0x2e
 8001402:	d009      	beq.n	8001418 <read_float+0x64>
    if (!found_digit) return false;
 8001404:	2c00      	cmp	r4, #0
 8001406:	d0e2      	beq.n	80013ce <read_float+0x1a>
    *float_ptr = atof(start);
 8001408:	f005 fa38 	bl	800687c <atof>
 800140c:	f7ff fb5c 	bl	8000ac8 <__aeabi_d2f>
 8001410:	6028      	str	r0, [r5, #0]
    return true;
 8001412:	e7dd      	b.n	80013d0 <read_float+0x1c>
 8001414:	4603      	mov	r3, r0
 8001416:	e7e9      	b.n	80013ec <read_float+0x38>
        } else if (c == '.' && !found_decimal) {
 8001418:	2e00      	cmp	r6, #0
 800141a:	d1f3      	bne.n	8001404 <read_float+0x50>
            found_decimal = true;
 800141c:	2601      	movs	r6, #1
        (*char_counter)++;
 800141e:	780a      	ldrb	r2, [r1, #0]
 8001420:	3201      	adds	r2, #1
 8001422:	700a      	strb	r2, [r1, #0]
 8001424:	e7e5      	b.n	80013f2 <read_float+0x3e>
            found_digit = true;
 8001426:	2401      	movs	r4, #1
 8001428:	e7f9      	b.n	800141e <read_float+0x6a>
	...

0800142c <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 800142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t char_counter = 0;
 800142e:	2600      	movs	r6, #0
uint8_t gc_parse_line(char *line) {
 8001430:	4607      	mov	r7, r0
    uint8_t char_counter = 0;
 8001432:	f88d 6003 	strb.w	r6, [sp, #3]
    uint8_t int_value = 0;
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
    uint8_t word_bit = 0;
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 8001436:	f7ff ff9b 	bl	8001370 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 800143a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800143e:	5cfc      	ldrb	r4, [r7, r3]
 8001440:	b914      	cbnz	r4, 8001448 <gc_parse_line+0x1c>
 8001442:	e048      	b.n	80014d6 <gc_parse_line+0xaa>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 8001448:	5cfc      	ldrb	r4, [r7, r3]
 800144a:	2c20      	cmp	r4, #32
 800144c:	d0fa      	beq.n	8001444 <gc_parse_line+0x18>
 800144e:	2c09      	cmp	r4, #9
 8001450:	d0f8      	beq.n	8001444 <gc_parse_line+0x18>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
        if (letter == 0) break;  // Fin de línea
 8001452:	2c00      	cmp	r4, #0
 8001454:	d03f      	beq.n	80014d6 <gc_parse_line+0xaa>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 8001456:	f1a4 0261 	sub.w	r2, r4, #97	@ 0x61
 800145a:	2a19      	cmp	r2, #25
            letter -= 32;
 800145c:	bf98      	it	ls
 800145e:	3c20      	subls	r4, #32
        }
        
        char_counter++;
 8001460:	f103 0301 	add.w	r3, r3, #1
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001464:	4638      	mov	r0, r7
 8001466:	aa01      	add	r2, sp, #4
 8001468:	f10d 0103 	add.w	r1, sp, #3
            letter -= 32;
 800146c:	bf98      	it	ls
 800146e:	b2e4      	uxtbls	r4, r4
        char_counter++;
 8001470:	f88d 3003 	strb.w	r3, [sp, #3]
        if (!read_float(line, &char_counter, &value)) {
 8001474:	f7ff ff9e 	bl	80013b4 <read_float>
 8001478:	2800      	cmp	r0, #0
 800147a:	f000 808a 	beq.w	8001592 <gc_parse_line+0x166>
            return STATUS_BAD_NUMBER_FORMAT;
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 800147e:	9d01      	ldr	r5, [sp, #4]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001480:	3c46      	subs	r4, #70	@ 0x46
        int_value = truncf(value);
 8001482:	4628      	mov	r0, r5
 8001484:	f008 fb7c 	bl	8009b80 <truncf>
 8001488:	f7ff fe7e 	bl	8001188 <__aeabi_f2uiz>
 800148c:	b2c3      	uxtb	r3, r0
        switch (letter) {
 800148e:	2c14      	cmp	r4, #20
 8001490:	d815      	bhi.n	80014be <gc_parse_line+0x92>
 8001492:	e8df f004 	tbb	[pc, r4]
 8001496:	0b61      	.short	0x0b61
 8001498:	14141414 	.word	0x14141414
 800149c:	14142314 	.word	0x14142314
 80014a0:	7278146f 	.word	0x7278146f
 80014a4:	14141414 	.word	0x14141414
 80014a8:	5752      	.short	0x5752
 80014aa:	5c          	.byte	0x5c
 80014ab:	00          	.byte	0x00
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014ac:	2b63      	cmp	r3, #99	@ 0x63
 80014ae:	d806      	bhi.n	80014be <gc_parse_line+0x92>
                
                switch (int_value) {
 80014b0:	2b1c      	cmp	r3, #28
 80014b2:	d030      	beq.n	8001516 <gc_parse_line+0xea>
 80014b4:	d805      	bhi.n	80014c2 <gc_parse_line+0x96>
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d905      	bls.n	80014c6 <gc_parse_line+0x9a>
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d02b      	beq.n	8001516 <gc_parse_line+0xea>
                
            case 'M':
                // Validar rango de comandos M
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
                
                switch (int_value) {
 80014be:	2414      	movs	r4, #20
 80014c0:	e009      	b.n	80014d6 <gc_parse_line+0xaa>
                switch (int_value) {
 80014c2:	2b5c      	cmp	r3, #92	@ 0x5c
 80014c4:	e7fa      	b.n	80014bc <gc_parse_line+0x90>
                        gc_block.modal.motion = int_value;
 80014c6:	4a34      	ldr	r2, [pc, #208]	@ (8001598 <gc_parse_line+0x16c>)
 80014c8:	7013      	strb	r3, [r2, #0]
                        word_bit = MODAL_GROUP_G1;
 80014ca:	2201      	movs	r2, #1
                if (bit_istrue(command_words, bit(word_bit))) {
 80014cc:	fa46 f302 	asr.w	r3, r6, r2
 80014d0:	07db      	lsls	r3, r3, #31
 80014d2:	d52d      	bpl.n	8001530 <gc_parse_line+0x104>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80014d4:	2415      	movs	r4, #21
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
}
 80014d6:	4620      	mov	r0, r4
 80014d8:	b003      	add	sp, #12
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014dc:	2b63      	cmp	r3, #99	@ 0x63
 80014de:	d8ee      	bhi.n	80014be <gc_parse_line+0x92>
                switch (int_value) {
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d018      	beq.n	8001516 <gc_parse_line+0xea>
 80014e4:	d812      	bhi.n	800150c <gc_parse_line+0xe0>
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d8e9      	bhi.n	80014be <gc_parse_line+0x92>
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d8e7      	bhi.n	80014be <gc_parse_line+0x92>
 80014ee:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <gc_parse_line+0xc8>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001521 	.word	0x08001521
 80014f8:	080014bf 	.word	0x080014bf
 80014fc:	08001521 	.word	0x08001521
 8001500:	08001529 	.word	0x08001529
 8001504:	080014bf 	.word	0x080014bf
 8001508:	08001529 	.word	0x08001529
 800150c:	2b12      	cmp	r3, #18
 800150e:	d002      	beq.n	8001516 <gc_parse_line+0xea>
 8001510:	2b54      	cmp	r3, #84	@ 0x54
 8001512:	d1d4      	bne.n	80014be <gc_parse_line+0x92>
 8001514:	2312      	movs	r3, #18
                        gc_block.non_modal_command = 28;  // G28 - Home
 8001516:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <gc_parse_line+0x16c>)
 8001518:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
                        word_bit = MODAL_GROUP_G0;
 800151c:	2200      	movs	r2, #0
 800151e:	e7d5      	b.n	80014cc <gc_parse_line+0xa0>
                        gc_block.modal.program_flow = int_value;
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <gc_parse_line+0x16c>)
 8001522:	7093      	strb	r3, [r2, #2]
                        word_bit = MODAL_GROUP_M4;
 8001524:	220b      	movs	r2, #11
                        break;
 8001526:	e7d1      	b.n	80014cc <gc_parse_line+0xa0>
                        gc_block.modal.spindle = int_value;
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <gc_parse_line+0x16c>)
 800152a:	7053      	strb	r3, [r2, #1]
                        word_bit = MODAL_GROUP_M7;
 800152c:	220c      	movs	r2, #12
                        break;
 800152e:	e7cd      	b.n	80014cc <gc_parse_line+0xa0>
                command_words |= bit(word_bit);
 8001530:	2301      	movs	r3, #1
 8001532:	4093      	lsls	r3, r2
 8001534:	4333      	orrs	r3, r6
 8001536:	b29e      	uxth	r6, r3
                break;
 8001538:	e77f      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.x_defined = true;
 800153a:	2201      	movs	r2, #1
                gc_block.values.x = value;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <gc_parse_line+0x16c>)
 800153e:	605d      	str	r5, [r3, #4]
                gc_block.values.x_defined = true;
 8001540:	775a      	strb	r2, [r3, #29]
                break;
 8001542:	e77a      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.y_defined = true;
 8001544:	2201      	movs	r2, #1
                gc_block.values.y = value;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <gc_parse_line+0x16c>)
 8001548:	609d      	str	r5, [r3, #8]
                gc_block.values.y_defined = true;
 800154a:	779a      	strb	r2, [r3, #30]
                break;
 800154c:	e775      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.z_defined = true;
 800154e:	2201      	movs	r2, #1
                gc_block.values.z = value;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <gc_parse_line+0x16c>)
 8001552:	60dd      	str	r5, [r3, #12]
                gc_block.values.z_defined = true;
 8001554:	77da      	strb	r2, [r3, #31]
                break;
 8001556:	e770      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.f_defined = true;
 8001558:	2201      	movs	r2, #1
                gc_block.values.f = value;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <gc_parse_line+0x16c>)
 800155c:	611d      	str	r5, [r3, #16]
                gc_block.values.f_defined = true;
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001562:	2100      	movs	r1, #0
 8001564:	4628      	mov	r0, r5
 8001566:	f7ff fdab 	bl	80010c0 <__aeabi_fcmplt>
 800156a:	2800      	cmp	r0, #0
 800156c:	f43f af65 	beq.w	800143a <gc_parse_line+0xe>
 8001570:	2404      	movs	r4, #4
 8001572:	e7b0      	b.n	80014d6 <gc_parse_line+0xaa>
                gc_block.values.p = int_value;
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <gc_parse_line+0x16c>)
 8001576:	7713      	strb	r3, [r2, #28]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001578:	e7f3      	b.n	8001562 <gc_parse_line+0x136>
                gc_block.values.s_defined = true;
 800157a:	2201      	movs	r2, #1
                gc_block.values.s = value;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <gc_parse_line+0x16c>)
 800157e:	615d      	str	r5, [r3, #20]
                gc_block.values.s_defined = true;
 8001580:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001584:	e7ed      	b.n	8001562 <gc_parse_line+0x136>
                gc_block.values.r_defined = true;
 8001586:	2201      	movs	r2, #1
                gc_block.values.r = value;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <gc_parse_line+0x16c>)
 800158a:	619d      	str	r5, [r3, #24]
                gc_block.values.r_defined = true;
 800158c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001590:	e7e7      	b.n	8001562 <gc_parse_line+0x136>
            return STATUS_BAD_NUMBER_FORMAT;
 8001592:	2402      	movs	r4, #2
 8001594:	e79f      	b.n	80014d6 <gc_parse_line+0xaa>
 8001596:	bf00      	nop
 8001598:	20000370 	.word	0x20000370

0800159c <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 800159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 80015a0:	4c79      	ldr	r4, [pc, #484]	@ (8001788 <gc_execute_block+0x1ec>)
uint8_t gc_execute_block(void) {
 80015a2:	b09e      	sub	sp, #120	@ 0x78
    switch (gc_block.non_modal_command) {
 80015a4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d078      	beq.n	800169e <gc_execute_block+0x102>
 80015ac:	d810      	bhi.n	80015d0 <gc_execute_block+0x34>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d058      	beq.n	8001664 <gc_execute_block+0xc8>
 80015b2:	2b11      	cmp	r3, #17
 80015b4:	d06c      	beq.n	8001690 <gc_execute_block+0xf4>
            disableSteppers();
            break;
    }
    
    // Verificar límites de software antes de ejecutar comandos de movimiento
    if (gc_block.modal.motion == MOTION_MODE_SEEK || 
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d977      	bls.n	80016ac <gc_execute_block+0x110>
            }
        }
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 80015bc:	7823      	ldrb	r3, [r4, #0]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	f200 8094 	bhi.w	80016ec <gc_execute_block+0x150>
 80015c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80015c8:	009e0085 	.word	0x009e0085
 80015cc:	00c600b1 	.word	0x00c600b1
    switch (gc_block.non_modal_command) {
 80015d0:	2b1c      	cmp	r3, #28
 80015d2:	d056      	beq.n	8001682 <gc_execute_block+0xe6>
 80015d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d6:	d1ee      	bne.n	80015b6 <gc_execute_block+0x1a>
            if (gc_block.values.x_defined) {
 80015d8:	7f63      	ldrb	r3, [r4, #29]
 80015da:	4e6c      	ldr	r6, [pc, #432]	@ (800178c <gc_execute_block+0x1f0>)
 80015dc:	b133      	cbz	r3, 80015ec <gc_execute_block+0x50>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 80015de:	496c      	ldr	r1, [pc, #432]	@ (8001790 <gc_execute_block+0x1f4>)
 80015e0:	6860      	ldr	r0, [r4, #4]
 80015e2:	f7ff fbcf 	bl	8000d84 <__aeabi_fmul>
 80015e6:	f7ff fda9 	bl	800113c <__aeabi_f2iz>
 80015ea:	6030      	str	r0, [r6, #0]
            if (gc_block.values.y_defined) {
 80015ec:	7fa3      	ldrb	r3, [r4, #30]
 80015ee:	4d69      	ldr	r5, [pc, #420]	@ (8001794 <gc_execute_block+0x1f8>)
 80015f0:	b133      	cbz	r3, 8001600 <gc_execute_block+0x64>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 80015f2:	4967      	ldr	r1, [pc, #412]	@ (8001790 <gc_execute_block+0x1f4>)
 80015f4:	68a0      	ldr	r0, [r4, #8]
 80015f6:	f7ff fbc5 	bl	8000d84 <__aeabi_fmul>
 80015fa:	f7ff fd9f 	bl	800113c <__aeabi_f2iz>
 80015fe:	6028      	str	r0, [r5, #0]
            if (gc_block.values.z_defined) {
 8001600:	7fe3      	ldrb	r3, [r4, #31]
 8001602:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 8001798 <gc_execute_block+0x1fc>
 8001606:	b13b      	cbz	r3, 8001618 <gc_execute_block+0x7c>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 8001608:	4964      	ldr	r1, [pc, #400]	@ (800179c <gc_execute_block+0x200>)
 800160a:	68e0      	ldr	r0, [r4, #12]
 800160c:	f7ff fbba 	bl	8000d84 <__aeabi_fmul>
 8001610:	f7ff fd94 	bl	800113c <__aeabi_f2iz>
 8001614:	f8c8 0000 	str.w	r0, [r8]
                   currentX/(float)STEPS_PER_MM_X, 
 8001618:	6830      	ldr	r0, [r6, #0]
 800161a:	f7ff fb5f 	bl	8000cdc <__aeabi_i2f>
 800161e:	495c      	ldr	r1, [pc, #368]	@ (8001790 <gc_execute_block+0x1f4>)
 8001620:	f7ff fc64 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001624:	f7fe ff00 	bl	8000428 <__aeabi_f2d>
 8001628:	4606      	mov	r6, r0
                   currentZ/(float)STEPS_PER_MM_Z);
 800162a:	f8d8 0000 	ldr.w	r0, [r8]
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800162e:	460f      	mov	r7, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 8001630:	f7ff fb54 	bl	8000cdc <__aeabi_i2f>
 8001634:	4959      	ldr	r1, [pc, #356]	@ (800179c <gc_execute_block+0x200>)
 8001636:	f7ff fc59 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800163a:	f7fe fef5 	bl	8000428 <__aeabi_f2d>
 800163e:	e9cd 0102 	strd	r0, r1, [sp, #8]
                   currentY/(float)STEPS_PER_MM_Y, 
 8001642:	6828      	ldr	r0, [r5, #0]
 8001644:	f7ff fb4a 	bl	8000cdc <__aeabi_i2f>
 8001648:	4951      	ldr	r1, [pc, #324]	@ (8001790 <gc_execute_block+0x1f4>)
 800164a:	f7ff fc4f 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800164e:	f7fe feeb 	bl	8000428 <__aeabi_f2d>
 8001652:	4632      	mov	r2, r6
 8001654:	e9cd 0100 	strd	r0, r1, [sp]
 8001658:	463b      	mov	r3, r7
 800165a:	4951      	ldr	r1, [pc, #324]	@ (80017a0 <gc_execute_block+0x204>)
 800165c:	a805      	add	r0, sp, #20
 800165e:	f006 f80f 	bl	8007680 <siprintf>
 8001662:	e006      	b.n	8001672 <gc_execute_block+0xd6>
            if (gc_block.values.p > 0) {
 8001664:	7f22      	ldrb	r2, [r4, #28]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d0a5      	beq.n	80015b6 <gc_execute_block+0x1a>
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 800166a:	494e      	ldr	r1, [pc, #312]	@ (80017a4 <gc_execute_block+0x208>)
 800166c:	a805      	add	r0, sp, #20
 800166e:	f006 f807 	bl	8007680 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001672:	a805      	add	r0, sp, #20
 8001674:	f7fe fd6c 	bl	8000150 <strlen>
 8001678:	b281      	uxth	r1, r0
 800167a:	a805      	add	r0, sp, #20
 800167c:	f004 feda 	bl	8006434 <CDC_Transmit_FS>
            break;
 8001680:	e799      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 8001682:	2116      	movs	r1, #22
 8001684:	4848      	ldr	r0, [pc, #288]	@ (80017a8 <gc_execute_block+0x20c>)
 8001686:	f004 fed5 	bl	8006434 <CDC_Transmit_FS>
            performHoming();
 800168a:	f000 fb31 	bl	8001cf0 <performHoming>
            break;
 800168e:	e792      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 8001690:	211b      	movs	r1, #27
 8001692:	4846      	ldr	r0, [pc, #280]	@ (80017ac <gc_execute_block+0x210>)
 8001694:	f004 fece 	bl	8006434 <CDC_Transmit_FS>
            enableSteppers();
 8001698:	f001 fc6a 	bl	8002f70 <enableSteppers>
            break;
 800169c:	e78b      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 800169e:	2118      	movs	r1, #24
 80016a0:	4843      	ldr	r0, [pc, #268]	@ (80017b0 <gc_execute_block+0x214>)
 80016a2:	f004 fec7 	bl	8006434 <CDC_Transmit_FS>
            disableSteppers();
 80016a6:	f001 fc7d 	bl	8002fa4 <disableSteppers>
            break;
 80016aa:	e784      	b.n	80015b6 <gc_execute_block+0x1a>
        if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016ac:	69e3      	ldr	r3, [r4, #28]
 80016ae:	2bff      	cmp	r3, #255	@ 0xff
 80016b0:	d984      	bls.n	80015bc <gc_execute_block+0x20>
            uint8_t limit_status = check_soft_limits(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 80016b2:	7fe3      	ldrb	r3, [r4, #31]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	7fa3      	ldrb	r3, [r4, #30]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	7f63      	ldrb	r3, [r4, #29]
 80016bc:	68e2      	ldr	r2, [r4, #12]
 80016be:	68a1      	ldr	r1, [r4, #8]
 80016c0:	6860      	ldr	r0, [r4, #4]
 80016c2:	f7ff fdb7 	bl	8001234 <check_soft_limits>
            if (limit_status != STATUS_OK) {
 80016c6:	2800      	cmp	r0, #0
 80016c8:	f43f af78 	beq.w	80015bc <gc_execute_block+0x20>
        
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
    
    return STATUS_OK;
}
 80016cc:	b01e      	add	sp, #120	@ 0x78
 80016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016d2:	69e3      	ldr	r3, [r4, #28]
 80016d4:	2bff      	cmp	r3, #255	@ 0xff
 80016d6:	d909      	bls.n	80016ec <gc_execute_block+0x150>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 80016d8:	7fe3      	ldrb	r3, [r4, #31]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	7fa3      	ldrb	r3, [r4, #30]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	7f63      	ldrb	r3, [r4, #29]
 80016e2:	68e2      	ldr	r2, [r4, #12]
 80016e4:	68a1      	ldr	r1, [r4, #8]
 80016e6:	6860      	ldr	r0, [r4, #4]
 80016e8:	f000 f94a 	bl	8001980 <moveAxesRapidCallback>
    switch (gc_block.modal.spindle) {
 80016ec:	7863      	ldrb	r3, [r4, #1]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d041      	beq.n	8001776 <gc_execute_block+0x1da>
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d044      	beq.n	8001780 <gc_execute_block+0x1e4>
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <gc_execute_block+0x218>)
 80016f8:	8821      	ldrh	r1, [r4, #0]
 80016fa:	78a2      	ldrb	r2, [r4, #2]
    return STATUS_OK;
 80016fc:	2000      	movs	r0, #0
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 80016fe:	8019      	strh	r1, [r3, #0]
 8001700:	709a      	strb	r2, [r3, #2]
    return STATUS_OK;
 8001702:	e7e3      	b.n	80016cc <gc_execute_block+0x130>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001704:	69e3      	ldr	r3, [r4, #28]
 8001706:	2bff      	cmp	r3, #255	@ 0xff
 8001708:	d9f0      	bls.n	80016ec <gc_execute_block+0x150>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 800170a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800170e:	9303      	str	r3, [sp, #12]
 8001710:	7fe3      	ldrb	r3, [r4, #31]
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	7fa3      	ldrb	r3, [r4, #30]
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	7f63      	ldrb	r3, [r4, #29]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	6923      	ldr	r3, [r4, #16]
 800171e:	68e2      	ldr	r2, [r4, #12]
 8001720:	68a1      	ldr	r1, [r4, #8]
 8001722:	6860      	ldr	r0, [r4, #4]
 8001724:	f000 f964 	bl	80019f0 <moveAxesLinearCallback>
 8001728:	e7e0      	b.n	80016ec <gc_execute_block+0x150>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 800172a:	69e3      	ldr	r3, [r4, #28]
 800172c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001730:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001734:	b913      	cbnz	r3, 800173c <gc_execute_block+0x1a0>
 8001736:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800173a:	b15b      	cbz	r3, 8001754 <gc_execute_block+0x1b8>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 1, gc_block.values.f, gc_block.values.f_defined);  // 1 para sentido horario
 800173c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	6923      	ldr	r3, [r4, #16]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2301      	movs	r3, #1
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0, gc_block.values.f, gc_block.values.f_defined);  // 0 para sentido antihorario
 8001748:	69a2      	ldr	r2, [r4, #24]
 800174a:	68a1      	ldr	r1, [r4, #8]
 800174c:	6860      	ldr	r0, [r4, #4]
 800174e:	f000 f92d 	bl	80019ac <moveAxesArcCallback>
                break;
 8001752:	e7cb      	b.n	80016ec <gc_execute_block+0x150>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 8001754:	69e3      	ldr	r3, [r4, #28]
 8001756:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800175a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800175e:	b91b      	cbnz	r3, 8001768 <gc_execute_block+0x1cc>
 8001760:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0c1      	beq.n	80016ec <gc_execute_block+0x150>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0, gc_block.values.f, gc_block.values.f_defined);  // 0 para sentido antihorario
 8001768:	f894 3020 	ldrb.w	r3, [r4, #32]
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	6923      	ldr	r3, [r4, #16]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	e7e8      	b.n	8001748 <gc_execute_block+0x1ac>
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001776:	2117      	movs	r1, #23
 8001778:	480f      	ldr	r0, [pc, #60]	@ (80017b8 <gc_execute_block+0x21c>)
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 800177a:	f004 fe5b 	bl	8006434 <CDC_Transmit_FS>
            break;
 800177e:	e7ba      	b.n	80016f6 <gc_execute_block+0x15a>
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001780:	2115      	movs	r1, #21
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <gc_execute_block+0x220>)
 8001784:	e7f9      	b.n	800177a <gc_execute_block+0x1de>
 8001786:	bf00      	nop
 8001788:	20000370 	.word	0x20000370
 800178c:	2000235c 	.word	0x2000235c
 8001790:	429e0000 	.word	0x429e0000
 8001794:	20002358 	.word	0x20002358
 8001798:	20002354 	.word	0x20002354
 800179c:	4575a000 	.word	0x4575a000
 80017a0:	0800b0bf 	.word	0x0800b0bf
 80017a4:	0800b08c 	.word	0x0800b08c
 80017a8:	0800b0a8 	.word	0x0800b0a8
 80017ac:	0800b0ea 	.word	0x0800b0ea
 80017b0:	0800b106 	.word	0x0800b106
 80017b4:	2000036c 	.word	0x2000036c
 80017b8:	0800b11f 	.word	0x0800b11f
 80017bc:	0800b137 	.word	0x0800b137

080017c0 <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 80017c0:	b508      	push	{r3, lr}
 80017c2:	1e42      	subs	r2, r0, #1
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 80017c4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80017c8:	b933      	cbnz	r3, 80017d8 <gc_execute_line+0x18>
            line[i] -= 32;  // Convertir a mayúscula
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 80017ca:	f7ff fe2f 	bl	800142c <gc_parse_line>
    if (status_code != STATUS_OK) {
 80017ce:	b950      	cbnz	r0, 80017e6 <gc_execute_line+0x26>
    if (status_code != STATUS_OK) {
        return status_code;
    }
    
    return STATUS_OK;
}
 80017d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    status_code = gc_execute_block();
 80017d4:	f7ff bee2 	b.w	800159c <gc_execute_block>
        if (line[i] >= 'a' && line[i] <= 'z') {
 80017d8:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 80017dc:	2919      	cmp	r1, #25
            line[i] -= 32;  // Convertir a mayúscula
 80017de:	bf9c      	itt	ls
 80017e0:	3b20      	subls	r3, #32
 80017e2:	7013      	strbls	r3, [r2, #0]
    for (int i = 0; line[i] != 0; i++) {
 80017e4:	e7ee      	b.n	80017c4 <gc_execute_line+0x4>
}
 80017e6:	bd08      	pop	{r3, pc}

080017e8 <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 80017e8:	b500      	push	{lr}
 80017ea:	4602      	mov	r2, r0
 80017ec:	b089      	sub	sp, #36	@ 0x24
    switch (status_code) {
 80017ee:	281c      	cmp	r0, #28
 80017f0:	d841      	bhi.n	8001876 <report_status_message+0x8e>
 80017f2:	e8df f000 	tbb	[pc, r0]
 80017f6:	160f      	.short	0x160f
 80017f8:	221f1c19 	.word	0x221f1c19
 80017fc:	40404040 	.word	0x40404040
 8001800:	40404040 	.word	0x40404040
 8001804:	40404040 	.word	0x40404040
 8001808:	28254040 	.word	0x28254040
 800180c:	34312e2b 	.word	0x34312e2b
 8001810:	3a37      	.short	0x3a37
 8001812:	3d          	.byte	0x3d
 8001813:	00          	.byte	0x00
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8001814:	2104      	movs	r1, #4
 8001816:	481f      	ldr	r0, [pc, #124]	@ (8001894 <report_status_message+0xac>)
                sprintf(msg, "error:%d\r\n", status_code);
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
            }
            break;
    }
}
 8001818:	b009      	add	sp, #36	@ 0x24
 800181a:	f85d eb04 	ldr.w	lr, [sp], #4
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 800181e:	f004 be09 	b.w	8006434 <CDC_Transmit_FS>
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 8001822:	2124      	movs	r1, #36	@ 0x24
 8001824:	481c      	ldr	r0, [pc, #112]	@ (8001898 <report_status_message+0xb0>)
 8001826:	e7f7      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 8001828:	211e      	movs	r1, #30
 800182a:	481c      	ldr	r0, [pc, #112]	@ (800189c <report_status_message+0xb4>)
 800182c:	e7f4      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 800182e:	211e      	movs	r1, #30
 8001830:	481b      	ldr	r0, [pc, #108]	@ (80018a0 <report_status_message+0xb8>)
 8001832:	e7f1      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 8001834:	211b      	movs	r1, #27
 8001836:	481b      	ldr	r0, [pc, #108]	@ (80018a4 <report_status_message+0xbc>)
 8001838:	e7ee      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:5 (Soft limit exceeded)\r\n", 32);
 800183a:	2120      	movs	r1, #32
 800183c:	481a      	ldr	r0, [pc, #104]	@ (80018a8 <report_status_message+0xc0>)
 800183e:	e7eb      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 8001840:	2121      	movs	r1, #33	@ 0x21
 8001842:	481a      	ldr	r0, [pc, #104]	@ (80018ac <report_status_message+0xc4>)
 8001844:	e7e8      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 8001846:	2123      	movs	r1, #35	@ 0x23
 8001848:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <report_status_message+0xc8>)
 800184a:	e7e5      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 800184c:	2121      	movs	r1, #33	@ 0x21
 800184e:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <report_status_message+0xcc>)
 8001850:	e7e2      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 8001852:	2127      	movs	r1, #39	@ 0x27
 8001854:	4818      	ldr	r0, [pc, #96]	@ (80018b8 <report_status_message+0xd0>)
 8001856:	e7df      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 8001858:	2123      	movs	r1, #35	@ 0x23
 800185a:	4818      	ldr	r0, [pc, #96]	@ (80018bc <report_status_message+0xd4>)
 800185c:	e7dc      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 800185e:	211b      	movs	r1, #27
 8001860:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <report_status_message+0xd8>)
 8001862:	e7d9      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 8001864:	211b      	movs	r1, #27
 8001866:	4817      	ldr	r0, [pc, #92]	@ (80018c4 <report_status_message+0xdc>)
 8001868:	e7d6      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 800186a:	2121      	movs	r1, #33	@ 0x21
 800186c:	4816      	ldr	r0, [pc, #88]	@ (80018c8 <report_status_message+0xe0>)
 800186e:	e7d3      	b.n	8001818 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 8001870:	2120      	movs	r1, #32
 8001872:	4816      	ldr	r0, [pc, #88]	@ (80018cc <report_status_message+0xe4>)
 8001874:	e7d0      	b.n	8001818 <report_status_message+0x30>
                sprintf(msg, "error:%d\r\n", status_code);
 8001876:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <report_status_message+0xe8>)
 8001878:	4668      	mov	r0, sp
 800187a:	f005 ff01 	bl	8007680 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800187e:	4668      	mov	r0, sp
 8001880:	f7fe fc66 	bl	8000150 <strlen>
 8001884:	b281      	uxth	r1, r0
 8001886:	4668      	mov	r0, sp
 8001888:	f004 fdd4 	bl	8006434 <CDC_Transmit_FS>
}
 800188c:	b009      	add	sp, #36	@ 0x24
 800188e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001892:	bf00      	nop
 8001894:	0800b14d 	.word	0x0800b14d
 8001898:	0800b152 	.word	0x0800b152
 800189c:	0800b176 	.word	0x0800b176
 80018a0:	0800b194 	.word	0x0800b194
 80018a4:	0800b1b2 	.word	0x0800b1b2
 80018a8:	0800b1cd 	.word	0x0800b1cd
 80018ac:	0800b1ed 	.word	0x0800b1ed
 80018b0:	0800b20e 	.word	0x0800b20e
 80018b4:	0800b231 	.word	0x0800b231
 80018b8:	0800b252 	.word	0x0800b252
 80018bc:	0800b279 	.word	0x0800b279
 80018c0:	0800b29c 	.word	0x0800b29c
 80018c4:	0800b2b7 	.word	0x0800b2b7
 80018c8:	0800b2d2 	.word	0x0800b2d2
 80018cc:	0800b2f3 	.word	0x0800b2f3
 80018d0:	0800b313 	.word	0x0800b313

080018d4 <isEndstopPressed.part.0>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
    switch(axis) {
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 80018d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
bool isEndstopPressed(char axis) {
 80018d8:	b508      	push	{r3, lr}
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 80018da:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <isEndstopPressed.part.0+0x14>)
 80018dc:	f002 f8cc 	bl	8003a78 <HAL_GPIO_ReadPin>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
        default:
            return false;
    }
}
 80018e0:	fab0 f080 	clz	r0, r0
 80018e4:	0940      	lsrs	r0, r0, #5
 80018e6:	bd08      	pop	{r3, pc}
 80018e8:	40010c00 	.word	0x40010c00

080018ec <sendUSBText>:
void sendUSBText(const char* message) {
 80018ec:	b510      	push	{r4, lr}
 80018ee:	4604      	mov	r4, r0
    uint16_t len = strlen(message);
 80018f0:	f7fe fc2e 	bl	8000150 <strlen>
    CDC_Transmit_Queued((uint8_t*)message, len);
 80018f4:	b281      	uxth	r1, r0
 80018f6:	4620      	mov	r0, r4
}
 80018f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_Queued((uint8_t*)message, len);
 80018fc:	f004 be26 	b.w	800654c <CDC_Transmit_Queued>

08001900 <setup>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <setup+0x78>)
void setup(void) {
 8001902:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001904:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 8001908:	2503      	movs	r5, #3
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800190a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001912:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
 8001916:	6813      	ldr	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 8001918:	4c18      	ldr	r4, [pc, #96]	@ (800197c <setup+0x7c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6013      	str	r3, [r2, #0]
    enableSteppers();
 8001920:	f001 fb26 	bl	8002f70 <enableSteppers>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2102      	movs	r1, #2
 8001928:	4814      	ldr	r0, [pc, #80]	@ (800197c <setup+0x7c>)
 800192a:	f002 f8ab 	bl	8003a84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	2101      	movs	r1, #1
 8001932:	4812      	ldr	r0, [pc, #72]	@ (800197c <setup+0x7c>)
 8001934:	f002 f8a6 	bl	8003a84 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2102      	movs	r1, #2
 800193c:	4620      	mov	r0, r4
 800193e:	f002 f8a1 	bl	8003a84 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	4620      	mov	r0, r4
 8001946:	4611      	mov	r1, r2
 8001948:	f002 f89c 	bl	8003a84 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 800194c:	2096      	movs	r0, #150	@ 0x96
 800194e:	f001 ff37 	bl	80037c0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2102      	movs	r1, #2
 8001956:	4620      	mov	r0, r4
 8001958:	f002 f894 	bl	8003a84 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	4620      	mov	r0, r4
 8001962:	f002 f88f 	bl	8003a84 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 8001966:	2096      	movs	r0, #150	@ 0x96
 8001968:	f001 ff2a 	bl	80037c0 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 800196c:	3d01      	subs	r5, #1
 800196e:	d1e3      	bne.n	8001938 <setup+0x38>
}
 8001970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gc_init();
 8001974:	f7ff bcf4 	b.w	8001360 <gc_init>
 8001978:	e000ed00 	.word	0xe000ed00
 800197c:	40010c00 	.word	0x40010c00

08001980 <moveAxesRapidCallback>:
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8001980:	b430      	push	{r4, r5}
 8001982:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8001986:	f89d 400c 	ldrb.w	r4, [sp, #12]
    float target_x = x_defined ? x : NAN;
 800198a:	b903      	cbnz	r3, 800198e <moveAxesRapidCallback+0xe>
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <moveAxesRapidCallback+0x24>)
    float target_y = y_defined ? y : NAN;
 800198e:	b905      	cbnz	r5, 8001992 <moveAxesRapidCallback+0x12>
 8001990:	4904      	ldr	r1, [pc, #16]	@ (80019a4 <moveAxesRapidCallback+0x24>)
    float target_z = z_defined ? z : NAN;
 8001992:	b904      	cbnz	r4, 8001996 <moveAxesRapidCallback+0x16>
 8001994:	4a03      	ldr	r2, [pc, #12]	@ (80019a4 <moveAxesRapidCallback+0x24>)
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 8001996:	2301      	movs	r3, #1
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <moveAxesRapidCallback+0x28>)
}
 800199c:	bc30      	pop	{r4, r5}
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f001 bb1a 	b.w	8002fd8 <moveAxesWithFeedRate>
 80019a4:	7fc00000 	.word	0x7fc00000
 80019a8:	20000004 	.word	0x20000004

080019ac <moveAxesArcCallback>:
void moveAxesArcCallback(float x, float y, float r, bool clockwise, float feedRate, bool f_defined) {
 80019ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019b0:	461f      	mov	r7, r3
 80019b2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80019b6:	4604      	mov	r4, r0
 80019b8:	460d      	mov	r5, r1
 80019ba:	4616      	mov	r6, r2
 80019bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80019c0:	f8df 8028 	ldr.w	r8, [pc, #40]	@ 80019ec <moveAxesArcCallback+0x40>
    if (f_defined && feedRate > 0) {
 80019c4:	b133      	cbz	r3, 80019d4 <moveAxesArcCallback+0x28>
 80019c6:	2100      	movs	r1, #0
 80019c8:	4648      	mov	r0, r9
 80019ca:	f7ff fb97 	bl	80010fc <__aeabi_fcmpgt>
 80019ce:	b108      	cbz	r0, 80019d4 <moveAxesArcCallback+0x28>
        currentFeedRate = feedRate;
 80019d0:	f8c8 9000 	str.w	r9, [r8]
    arc_move_r(x, y, r, clockwise, currentFeedRate);
 80019d4:	f8d8 3000 	ldr.w	r3, [r8]
 80019d8:	4632      	mov	r2, r6
 80019da:	9308      	str	r3, [sp, #32]
 80019dc:	4629      	mov	r1, r5
 80019de:	463b      	mov	r3, r7
 80019e0:	4620      	mov	r0, r4
}
 80019e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    arc_move_r(x, y, r, clockwise, currentFeedRate);
 80019e6:	f001 bc2f 	b.w	8003248 <arc_move_r>
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <moveAxesLinearCallback>:
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 80019f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f4:	461f      	mov	r7, r3
 80019f6:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80019fa:	4604      	mov	r4, r0
 80019fc:	460d      	mov	r5, r1
 80019fe:	4616      	mov	r6, r2
 8001a00:	f89d b028 	ldrb.w	fp, [sp, #40]	@ 0x28
 8001a04:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 8001a08:	f89d 9030 	ldrb.w	r9, [sp, #48]	@ 0x30
 8001a0c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8001a50 <moveAxesLinearCallback+0x60>
    if (f_defined && feedRate > 0) {
 8001a10:	b133      	cbz	r3, 8001a20 <moveAxesLinearCallback+0x30>
 8001a12:	2100      	movs	r1, #0
 8001a14:	4638      	mov	r0, r7
 8001a16:	f7ff fb71 	bl	80010fc <__aeabi_fcmpgt>
 8001a1a:	b108      	cbz	r0, 8001a20 <moveAxesLinearCallback+0x30>
        currentFeedRate = feedRate;
 8001a1c:	f8c8 7000 	str.w	r7, [r8]
    float target_x = x_defined ? x : NAN;
 8001a20:	f1bb 0f00 	cmp.w	fp, #0
 8001a24:	d100      	bne.n	8001a28 <moveAxesLinearCallback+0x38>
 8001a26:	4c0b      	ldr	r4, [pc, #44]	@ (8001a54 <moveAxesLinearCallback+0x64>)
    float target_y = y_defined ? y : NAN;
 8001a28:	f1ba 0f00 	cmp.w	sl, #0
 8001a2c:	d100      	bne.n	8001a30 <moveAxesLinearCallback+0x40>
 8001a2e:	4d09      	ldr	r5, [pc, #36]	@ (8001a54 <moveAxesLinearCallback+0x64>)
    float target_z = z_defined ? z : NAN;
 8001a30:	f1b9 0f00 	cmp.w	r9, #0
 8001a34:	d100      	bne.n	8001a38 <moveAxesLinearCallback+0x48>
 8001a36:	4e07      	ldr	r6, [pc, #28]	@ (8001a54 <moveAxesLinearCallback+0x64>)
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	4620      	mov	r0, r4
 8001a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8001a42:	f8d8 3000 	ldr.w	r3, [r8]
}
 8001a46:	b001      	add	sp, #4
 8001a48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001a4c:	f001 bac4 	b.w	8002fd8 <moveAxesWithFeedRate>
 8001a50:	20000008 	.word	0x20000008
 8001a54:	7fc00000 	.word	0x7fc00000

08001a58 <showConfiguration>:
void showConfiguration(void) {
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a5c:	f240 35b6 	movw	r5, #950	@ 0x3b6
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a60:	4c80      	ldr	r4, [pc, #512]	@ (8001c64 <showConfiguration+0x20c>)
void showConfiguration(void) {
 8001a62:	b085      	sub	sp, #20
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8001a64:	4880      	ldr	r0, [pc, #512]	@ (8001c68 <showConfiguration+0x210>)
 8001a66:	f7ff ff41 	bl	80018ec <sendUSBText>
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a6a:	224f      	movs	r2, #79	@ 0x4f
 8001a6c:	497f      	ldr	r1, [pc, #508]	@ (8001c6c <showConfiguration+0x214>)
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f005 fe06 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff ff39 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a7a:	462a      	mov	r2, r5
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f005 fe63 	bl	800774a <memset>
    sprintf(outputBuffer, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001a84:	224f      	movs	r2, #79	@ 0x4f
 8001a86:	497a      	ldr	r1, [pc, #488]	@ (8001c70 <showConfiguration+0x218>)
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f005 fdf9 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff ff2c 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a94:	462a      	mov	r2, r5
 8001a96:	2100      	movs	r1, #0
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f005 fe56 	bl	800774a <memset>
    sprintf(outputBuffer, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001a9e:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001aa2:	4974      	ldr	r1, [pc, #464]	@ (8001c74 <showConfiguration+0x21c>)
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f005 fdeb 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ff1e 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ab0:	462a      	mov	r2, r5
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f005 fe48 	bl	800774a <memset>
    sprintf(outputBuffer, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001aba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001abe:	496e      	ldr	r1, [pc, #440]	@ (8001c78 <showConfiguration+0x220>)
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f005 fddd 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ff10 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001acc:	462a      	mov	r2, r5
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f005 fe3a 	bl	800774a <memset>
    int feed_int = (int)currentFeedRate;
 8001ad6:	4b69      	ldr	r3, [pc, #420]	@ (8001c7c <showConfiguration+0x224>)
 8001ad8:	681f      	ldr	r7, [r3, #0]
 8001ada:	4638      	mov	r0, r7
 8001adc:	f7ff fb2e 	bl	800113c <__aeabi_f2iz>
 8001ae0:	4606      	mov	r6, r0
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001ae2:	f7ff f8fb 	bl	8000cdc <__aeabi_i2f>
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	4638      	mov	r0, r7
 8001aea:	f7ff f841 	bl	8000b70 <__aeabi_fsub>
 8001aee:	4964      	ldr	r1, [pc, #400]	@ (8001c80 <showConfiguration+0x228>)
 8001af0:	f7ff f948 	bl	8000d84 <__aeabi_fmul>
 8001af4:	f7ff fb22 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001af8:	4632      	mov	r2, r6
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001afa:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001afc:	4961      	ldr	r1, [pc, #388]	@ (8001c84 <showConfiguration+0x22c>)
 8001afe:	4620      	mov	r0, r4
 8001b00:	f005 fdbe 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001b04:	4620      	mov	r0, r4
 8001b06:	f7ff fef1 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b0a:	462a      	mov	r2, r5
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f005 fe1b 	bl	800774a <memset>
    int rapid_int = (int)rapidRate;
 8001b14:	4b5c      	ldr	r3, [pc, #368]	@ (8001c88 <showConfiguration+0x230>)
 8001b16:	681f      	ldr	r7, [r3, #0]
 8001b18:	4638      	mov	r0, r7
 8001b1a:	f7ff fb0f 	bl	800113c <__aeabi_f2iz>
 8001b1e:	4606      	mov	r6, r0
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001b20:	f7ff f8dc 	bl	8000cdc <__aeabi_i2f>
 8001b24:	4601      	mov	r1, r0
 8001b26:	4638      	mov	r0, r7
 8001b28:	f7ff f822 	bl	8000b70 <__aeabi_fsub>
 8001b2c:	4954      	ldr	r1, [pc, #336]	@ (8001c80 <showConfiguration+0x228>)
 8001b2e:	f7ff f929 	bl	8000d84 <__aeabi_fmul>
 8001b32:	f7ff fb03 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001b36:	4632      	mov	r2, r6
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001b38:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001b3a:	4954      	ldr	r1, [pc, #336]	@ (8001c8c <showConfiguration+0x234>)
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f005 fd9f 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff fed2 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b48:	462a      	mov	r2, r5
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f005 fdfc 	bl	800774a <memset>
    int max_int = (int)maxFeedRate;
 8001b52:	4b4f      	ldr	r3, [pc, #316]	@ (8001c90 <showConfiguration+0x238>)
 8001b54:	681f      	ldr	r7, [r3, #0]
 8001b56:	4638      	mov	r0, r7
 8001b58:	f7ff faf0 	bl	800113c <__aeabi_f2iz>
 8001b5c:	4606      	mov	r6, r0
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b5e:	f7ff f8bd 	bl	8000cdc <__aeabi_i2f>
 8001b62:	4601      	mov	r1, r0
 8001b64:	4638      	mov	r0, r7
 8001b66:	f7ff f803 	bl	8000b70 <__aeabi_fsub>
 8001b6a:	4945      	ldr	r1, [pc, #276]	@ (8001c80 <showConfiguration+0x228>)
 8001b6c:	f7ff f90a 	bl	8000d84 <__aeabi_fmul>
 8001b70:	f7ff fae4 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b74:	4632      	mov	r2, r6
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b76:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b78:	4946      	ldr	r1, [pc, #280]	@ (8001c94 <showConfiguration+0x23c>)
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f005 fd80 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff feb3 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b86:	462a      	mov	r2, r5
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f005 fddd 	bl	800774a <memset>
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001b90:	4b41      	ldr	r3, [pc, #260]	@ (8001c98 <showConfiguration+0x240>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f7ff f8a2 	bl	8000cdc <__aeabi_i2f>
 8001b98:	4940      	ldr	r1, [pc, #256]	@ (8001c9c <showConfiguration+0x244>)
 8001b9a:	f7ff f9a7 	bl	8000eec <__aeabi_fdiv>
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ca0 <showConfiguration+0x248>)
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001ba0:	4683      	mov	fp, r0
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f7ff f89a 	bl	8000cdc <__aeabi_i2f>
 8001ba8:	493c      	ldr	r1, [pc, #240]	@ (8001c9c <showConfiguration+0x244>)
 8001baa:	f7ff f99f 	bl	8000eec <__aeabi_fdiv>
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <showConfiguration+0x24c>)
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001bb0:	4680      	mov	r8, r0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f7ff f892 	bl	8000cdc <__aeabi_i2f>
 8001bb8:	493b      	ldr	r1, [pc, #236]	@ (8001ca8 <showConfiguration+0x250>)
 8001bba:	f7ff f997 	bl	8000eec <__aeabi_fdiv>
 8001bbe:	4682      	mov	sl, r0
    int x_int = (int)xPos;
 8001bc0:	4658      	mov	r0, fp
 8001bc2:	f7ff fabb 	bl	800113c <__aeabi_f2iz>
 8001bc6:	4606      	mov	r6, r0
    int y_int = (int)yPos;
 8001bc8:	4640      	mov	r0, r8
 8001bca:	f7ff fab7 	bl	800113c <__aeabi_f2iz>
 8001bce:	4607      	mov	r7, r0
    int z_int = (int)zPos;
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	f7ff fab3 	bl	800113c <__aeabi_f2iz>
 8001bd6:	4681      	mov	r9, r0
    int x_dec = (int)((xPos - x_int) * 100);
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f7ff f87f 	bl	8000cdc <__aeabi_i2f>
 8001bde:	4601      	mov	r1, r0
 8001be0:	4658      	mov	r0, fp
 8001be2:	f7fe ffc5 	bl	8000b70 <__aeabi_fsub>
 8001be6:	4931      	ldr	r1, [pc, #196]	@ (8001cac <showConfiguration+0x254>)
 8001be8:	f7ff f8cc 	bl	8000d84 <__aeabi_fmul>
 8001bec:	f7ff faa6 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bf0:	ea80 7be0 	eor.w	fp, r0, r0, asr #31
 8001bf4:	ebab 7be0 	sub.w	fp, fp, r0, asr #31
    int z_dec = (int)((zPos - z_int) * 100);
 8001bf8:	4648      	mov	r0, r9
 8001bfa:	f7ff f86f 	bl	8000cdc <__aeabi_i2f>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4650      	mov	r0, sl
 8001c02:	f7fe ffb5 	bl	8000b70 <__aeabi_fsub>
 8001c06:	4929      	ldr	r1, [pc, #164]	@ (8001cac <showConfiguration+0x254>)
 8001c08:	f7ff f8bc 	bl	8000d84 <__aeabi_fmul>
 8001c0c:	f7ff fa96 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001c10:	2800      	cmp	r0, #0
 8001c12:	bfb8      	it	lt
 8001c14:	4240      	neglt	r0, r0
 8001c16:	e9cd 9002 	strd	r9, r0, [sp, #8]
    int y_dec = (int)((yPos - y_int) * 100);
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	f7ff f85e 	bl	8000cdc <__aeabi_i2f>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4640      	mov	r0, r8
 8001c24:	f7fe ffa4 	bl	8000b70 <__aeabi_fsub>
 8001c28:	4920      	ldr	r1, [pc, #128]	@ (8001cac <showConfiguration+0x254>)
 8001c2a:	f7ff f8ab 	bl	8000d84 <__aeabi_fmul>
 8001c2e:	f7ff fa85 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001c32:	2800      	cmp	r0, #0
 8001c34:	bfb8      	it	lt
 8001c36:	4240      	neglt	r0, r0
 8001c38:	465b      	mov	r3, fp
 8001c3a:	4632      	mov	r2, r6
 8001c3c:	e9cd 7000 	strd	r7, r0, [sp]
 8001c40:	491b      	ldr	r1, [pc, #108]	@ (8001cb0 <showConfiguration+0x258>)
 8001c42:	4620      	mov	r0, r4
 8001c44:	f005 fd1c 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fe4f 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001c4e:	462a      	mov	r2, r5
 8001c50:	2100      	movs	r1, #0
 8001c52:	4620      	mov	r0, r4
 8001c54:	f005 fd79 	bl	800774a <memset>
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c58:	4816      	ldr	r0, [pc, #88]	@ (8001cb4 <showConfiguration+0x25c>)
}
 8001c5a:	b005      	add	sp, #20
 8001c5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c60:	f7ff be44 	b.w	80018ec <sendUSBText>
 8001c64:	20002360 	.word	0x20002360
 8001c68:	0800b31e 	.word	0x0800b31e
 8001c6c:	0800b33b 	.word	0x0800b33b
 8001c70:	0800b350 	.word	0x0800b350
 8001c74:	0800b365 	.word	0x0800b365
 8001c78:	0800b37a 	.word	0x0800b37a
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	41200000 	.word	0x41200000
 8001c84:	0800b38e 	.word	0x0800b38e
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	0800b3af 	.word	0x0800b3af
 8001c90:	20000000 	.word	0x20000000
 8001c94:	0800b3d6 	.word	0x0800b3d6
 8001c98:	2000235c 	.word	0x2000235c
 8001c9c:	429e0000 	.word	0x429e0000
 8001ca0:	20002358 	.word	0x20002358
 8001ca4:	20002354 	.word	0x20002354
 8001ca8:	4575a000 	.word	0x4575a000
 8001cac:	42c80000 	.word	0x42c80000
 8001cb0:	0800b3f8 	.word	0x0800b3f8
 8001cb4:	0800b42a 	.word	0x0800b42a

08001cb8 <isEndstopPressed>:
    switch(axis) {
 8001cb8:	2859      	cmp	r0, #89	@ 0x59
bool isEndstopPressed(char axis) {
 8001cba:	b508      	push	{r3, lr}
    switch(axis) {
 8001cbc:	d007      	beq.n	8001cce <isEndstopPressed+0x16>
 8001cbe:	285a      	cmp	r0, #90	@ 0x5a
 8001cc0:	d00e      	beq.n	8001ce0 <isEndstopPressed+0x28>
 8001cc2:	2858      	cmp	r0, #88	@ 0x58
 8001cc4:	d10f      	bne.n	8001ce6 <isEndstopPressed+0x2e>
}
 8001cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cca:	f7ff be03 	b.w	80018d4 <isEndstopPressed.part.0>
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001cce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001cd2:	4806      	ldr	r0, [pc, #24]	@ (8001cec <isEndstopPressed+0x34>)
 8001cd4:	f001 fed0 	bl	8003a78 <HAL_GPIO_ReadPin>
 8001cd8:	fab0 f080 	clz	r0, r0
 8001cdc:	0940      	lsrs	r0, r0, #5
}
 8001cde:	bd08      	pop	{r3, pc}
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001ce0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ce4:	e7f5      	b.n	8001cd2 <isEndstopPressed+0x1a>
    switch(axis) {
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e7f9      	b.n	8001cde <isEndstopPressed+0x26>
 8001cea:	bf00      	nop
 8001cec:	40010c00 	.word	0x40010c00

08001cf0 <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8001cf0:	b510      	push	{r4, lr}
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001cf2:	2028      	movs	r0, #40	@ 0x28
 8001cf4:	f001 fdc6 	bl	8003884 <HAL_NVIC_DisableIRQ>
    
    // Enviar mensaje de inicio de homing
    sendUSBText("Iniciando secuencia de homing...\r\n");
 8001cf8:	48a0      	ldr	r0, [pc, #640]	@ (8001f7c <performHoming+0x28c>)
 8001cfa:	f7ff fdf7 	bl	80018ec <sendUSBText>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(outputBuffer, "Fase 1: Buscando finales de carrera...\r\n");
 8001cfe:	49a0      	ldr	r1, [pc, #640]	@ (8001f80 <performHoming+0x290>)
 8001d00:	48a0      	ldr	r0, [pc, #640]	@ (8001f84 <performHoming+0x294>)
 8001d02:	f005 fdc2 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001d06:	489f      	ldr	r0, [pc, #636]	@ (8001f84 <performHoming+0x294>)
 8001d08:	f7ff fdf0 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d0c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d10:	2100      	movs	r1, #0
 8001d12:	489c      	ldr	r0, [pc, #624]	@ (8001f84 <performHoming+0x294>)
 8001d14:	f005 fd19 	bl	800774a <memset>

    // Homing del eje X
    sprintf(outputBuffer, "Homing eje X...\r\n");
 8001d18:	499b      	ldr	r1, [pc, #620]	@ (8001f88 <performHoming+0x298>)
 8001d1a:	489a      	ldr	r0, [pc, #616]	@ (8001f84 <performHoming+0x294>)
 8001d1c:	f005 fdb5 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001d20:	4898      	ldr	r0, [pc, #608]	@ (8001f84 <performHoming+0x294>)
 8001d22:	f7ff fde3 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d26:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4895      	ldr	r0, [pc, #596]	@ (8001f84 <performHoming+0x294>)
 8001d2e:	f005 fd0c 	bl	800774a <memset>

    // Mover hacia el final de carrera X (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001d32:	2200      	movs	r2, #0
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	4895      	ldr	r0, [pc, #596]	@ (8001f8c <performHoming+0x29c>)
 8001d38:	f001 fea4 	bl	8003a84 <HAL_GPIO_WritePin>
    switch(axis) {
 8001d3c:	f7ff fdca 	bl	80018d4 <isEndstopPressed.part.0>
    while (!isEndstopPressed('X')) {
 8001d40:	b300      	cbz	r0, 8001d84 <performHoming+0x94>
        X_stepOnce();
        delay_us(STEP_DELAY_US);
    }
    
    // FASE 1: Retroceder 2mm del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001d42:	2201      	movs	r2, #1
 8001d44:	2180      	movs	r1, #128	@ 0x80
 8001d46:	4891      	ldr	r0, [pc, #580]	@ (8001f8c <performHoming+0x29c>)
 8001d48:	f001 fe9c 	bl	8003a84 <HAL_GPIO_WritePin>
 8001d4c:	f44f 749e 	mov.w	r4, #316	@ 0x13c
    for (int i = 0; i < 4*STEPS_PER_MM_X; i++) { // Exactamente 2mm
        X_stepOnce();
 8001d50:	f001 f8ce 	bl	8002ef0 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d54:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d58:	f001 f88c 	bl	8002e74 <delay_us>
    for (int i = 0; i < 4*STEPS_PER_MM_X; i++) { // Exactamente 2mm
 8001d5c:	3c01      	subs	r4, #1
 8001d5e:	d1f7      	bne.n	8001d50 <performHoming+0x60>
    switch(axis) {
 8001d60:	f7ff fdb8 	bl	80018d4 <isEndstopPressed.part.0>
    }
    
    // Verificar que se liberó el switch después de alejarse 2mm
    if (isEndstopPressed('X')) {
 8001d64:	b1a8      	cbz	r0, 8001d92 <performHoming+0xa2>
        sprintf(outputBuffer, "Error: Fin de carrera X no se liberó después de alejarse 2mm\r\n");
 8001d66:	498a      	ldr	r1, [pc, #552]	@ (8001f90 <performHoming+0x2a0>)
    }
    // Pausa para estabilización
    HAL_Delay(100);
    // Verificar que el final de carrera esté presionado después de regresar 4mm
    if (!isEndstopPressed('X')) {
        sprintf(outputBuffer, "Error: Fin de carrera X no está presionado después de regresar 4mm\r\n");
 8001d68:	4886      	ldr	r0, [pc, #536]	@ (8001f84 <performHoming+0x294>)
 8001d6a:	f005 fd8e 	bl	800788a <strcpy>
        sendUSBText(outputBuffer);
 8001d6e:	4885      	ldr	r0, [pc, #532]	@ (8001f84 <performHoming+0x294>)
 8001d70:	f7ff fdbc 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d74:	4621      	mov	r1, r4

    CDC_TxQueue_Process();

    // Rehabilitar interrupciones
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8001d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d7a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d7e:	4881      	ldr	r0, [pc, #516]	@ (8001f84 <performHoming+0x294>)
 8001d80:	f005 bce3 	b.w	800774a <memset>
        X_stepOnce();
 8001d84:	f001 f8b4 	bl	8002ef0 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d88:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d8c:	f001 f872 	bl	8002e74 <delay_us>
 8001d90:	e7d4      	b.n	8001d3c <performHoming+0x4c>
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001d92:	4622      	mov	r2, r4
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	487d      	ldr	r0, [pc, #500]	@ (8001f8c <performHoming+0x29c>)
 8001d98:	f001 fe74 	bl	8003a84 <HAL_GPIO_WritePin>
 8001d9c:	f44f 749e 	mov.w	r4, #316	@ 0x13c
        X_stepOnce();
 8001da0:	f001 f8a6 	bl	8002ef0 <X_stepOnce>
        delay_us(STEP_DELAY_US *3); // Movimiento lento para precisión
 8001da4:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001da8:	f001 f864 	bl	8002e74 <delay_us>
    for (int i = 0; i < 4*STEPS_PER_MM_X; i++) { // Exactamente 4mm de regreso
 8001dac:	3c01      	subs	r4, #1
 8001dae:	d1f7      	bne.n	8001da0 <performHoming+0xb0>
    HAL_Delay(100);
 8001db0:	2064      	movs	r0, #100	@ 0x64
 8001db2:	f001 fd05 	bl	80037c0 <HAL_Delay>
    switch(axis) {
 8001db6:	f7ff fd8d 	bl	80018d4 <isEndstopPressed.part.0>
    if (!isEndstopPressed('X')) {
 8001dba:	b908      	cbnz	r0, 8001dc0 <performHoming+0xd0>
        sprintf(outputBuffer, "Error: Fin de carrera X no está presionado después de regresar 4mm\r\n");
 8001dbc:	4975      	ldr	r1, [pc, #468]	@ (8001f94 <performHoming+0x2a4>)
 8001dbe:	e7d3      	b.n	8001d68 <performHoming+0x78>
    currentX = 0; // Establecer posición home
 8001dc0:	4b75      	ldr	r3, [pc, #468]	@ (8001f98 <performHoming+0x2a8>)
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001dc2:	4976      	ldr	r1, [pc, #472]	@ (8001f9c <performHoming+0x2ac>)
 8001dc4:	486f      	ldr	r0, [pc, #444]	@ (8001f84 <performHoming+0x294>)
    currentX = 0; // Establecer posición home
 8001dc6:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001dc8:	f005 fd5f 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001dcc:	486d      	ldr	r0, [pc, #436]	@ (8001f84 <performHoming+0x294>)
 8001dce:	f7ff fd8d 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001dd2:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	486a      	ldr	r0, [pc, #424]	@ (8001f84 <performHoming+0x294>)
 8001dda:	f005 fcb6 	bl	800774a <memset>
    sprintf(outputBuffer, "Homing eje Y...\r\n");
 8001dde:	4970      	ldr	r1, [pc, #448]	@ (8001fa0 <performHoming+0x2b0>)
 8001de0:	4868      	ldr	r0, [pc, #416]	@ (8001f84 <performHoming+0x294>)
 8001de2:	f005 fd52 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001de6:	4867      	ldr	r0, [pc, #412]	@ (8001f84 <performHoming+0x294>)
 8001de8:	f7ff fd80 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001dec:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001df0:	4621      	mov	r1, r4
 8001df2:	4864      	ldr	r0, [pc, #400]	@ (8001f84 <performHoming+0x294>)
 8001df4:	f005 fca9 	bl	800774a <memset>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001df8:	4622      	mov	r2, r4
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4863      	ldr	r0, [pc, #396]	@ (8001f8c <performHoming+0x29c>)
 8001dfe:	f001 fe41 	bl	8003a84 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001e02:	2059      	movs	r0, #89	@ 0x59
 8001e04:	f7ff ff58 	bl	8001cb8 <isEndstopPressed>
 8001e08:	b1a0      	cbz	r0, 8001e34 <performHoming+0x144>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	485f      	ldr	r0, [pc, #380]	@ (8001f8c <performHoming+0x29c>)
 8001e10:	f001 fe38 	bl	8003a84 <HAL_GPIO_WritePin>
 8001e14:	f44f 749e 	mov.w	r4, #316	@ 0x13c
        Y_stepOnce();
 8001e18:	f001 f87e 	bl	8002f18 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e1c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e20:	f001 f828 	bl	8002e74 <delay_us>
    for (int i = 0; i < 4*STEPS_PER_MM_Y; i++) { // Exactamente 4mm
 8001e24:	3c01      	subs	r4, #1
 8001e26:	d1f7      	bne.n	8001e18 <performHoming+0x128>
    if (isEndstopPressed('Y')) {
 8001e28:	2059      	movs	r0, #89	@ 0x59
 8001e2a:	f7ff ff45 	bl	8001cb8 <isEndstopPressed>
 8001e2e:	b140      	cbz	r0, 8001e42 <performHoming+0x152>
        sprintf(outputBuffer, "Error: Fin de carrera Y no se liberó después de alejarse 4mm\r\n");
 8001e30:	495c      	ldr	r1, [pc, #368]	@ (8001fa4 <performHoming+0x2b4>)
 8001e32:	e799      	b.n	8001d68 <performHoming+0x78>
        Y_stepOnce();
 8001e34:	f001 f870 	bl	8002f18 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e38:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e3c:	f001 f81a 	bl	8002e74 <delay_us>
 8001e40:	e7df      	b.n	8001e02 <performHoming+0x112>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001e42:	4622      	mov	r2, r4
 8001e44:	2108      	movs	r1, #8
 8001e46:	4851      	ldr	r0, [pc, #324]	@ (8001f8c <performHoming+0x29c>)
 8001e48:	f001 fe1c 	bl	8003a84 <HAL_GPIO_WritePin>
 8001e4c:	f44f 749f 	mov.w	r4, #318	@ 0x13e
        Y_stepOnce();
 8001e50:	f001 f862 	bl	8002f18 <Y_stepOnce>
        delay_us(STEP_DELAY_US*3); // Movimiento lento para precisión
 8001e54:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001e58:	f001 f80c 	bl	8002e74 <delay_us>
    for (int i = 0; i < 4.02*STEPS_PER_MM_Y; i++) { // Exactamente 4mm de regreso
 8001e5c:	3c01      	subs	r4, #1
 8001e5e:	d1f7      	bne.n	8001e50 <performHoming+0x160>
    HAL_Delay(100);
 8001e60:	2064      	movs	r0, #100	@ 0x64
 8001e62:	f001 fcad 	bl	80037c0 <HAL_Delay>
    if (!isEndstopPressed('Y')) {
 8001e66:	2059      	movs	r0, #89	@ 0x59
 8001e68:	f7ff ff26 	bl	8001cb8 <isEndstopPressed>
 8001e6c:	b908      	cbnz	r0, 8001e72 <performHoming+0x182>
        sprintf(outputBuffer, "Error: Fin de carrera Y no está presionado después de regresar 4mm\r\n");
 8001e6e:	494e      	ldr	r1, [pc, #312]	@ (8001fa8 <performHoming+0x2b8>)
 8001e70:	e77a      	b.n	8001d68 <performHoming+0x78>
    currentY = 0; // Establecer posición home
 8001e72:	4b4e      	ldr	r3, [pc, #312]	@ (8001fac <performHoming+0x2bc>)
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e74:	494e      	ldr	r1, [pc, #312]	@ (8001fb0 <performHoming+0x2c0>)
 8001e76:	4843      	ldr	r0, [pc, #268]	@ (8001f84 <performHoming+0x294>)
    currentY = 0; // Establecer posición home
 8001e78:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e7a:	f005 fd06 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001e7e:	4841      	ldr	r0, [pc, #260]	@ (8001f84 <performHoming+0x294>)
 8001e80:	f7ff fd34 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e84:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001e88:	4621      	mov	r1, r4
 8001e8a:	483e      	ldr	r0, [pc, #248]	@ (8001f84 <performHoming+0x294>)
 8001e8c:	f005 fc5d 	bl	800774a <memset>
    CDC_TxQueue_Process();
 8001e90:	f004 fb26 	bl	80064e0 <CDC_TxQueue_Process>
    sprintf(outputBuffer, "Homing eje Z...\r\n");
 8001e94:	4947      	ldr	r1, [pc, #284]	@ (8001fb4 <performHoming+0x2c4>)
 8001e96:	483b      	ldr	r0, [pc, #236]	@ (8001f84 <performHoming+0x294>)
 8001e98:	f005 fcf7 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e9c:	4839      	ldr	r0, [pc, #228]	@ (8001f84 <performHoming+0x294>)
 8001e9e:	f7ff fd25 	bl	80018ec <sendUSBText>
 8001ea2:	f004 fb1d 	bl	80064e0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ea6:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4835      	ldr	r0, [pc, #212]	@ (8001f84 <performHoming+0x294>)
 8001eae:	f005 fc4c 	bl	800774a <memset>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eb8:	483f      	ldr	r0, [pc, #252]	@ (8001fb8 <performHoming+0x2c8>)
 8001eba:	f001 fde3 	bl	8003a84 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001ebe:	205a      	movs	r0, #90	@ 0x5a
 8001ec0:	f7ff fefa 	bl	8001cb8 <isEndstopPressed>
 8001ec4:	b1a8      	cbz	r0, 8001ef2 <performHoming+0x202>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ecc:	483a      	ldr	r0, [pc, #232]	@ (8001fb8 <performHoming+0x2c8>)
 8001ece:	f001 fdd9 	bl	8003a84 <HAL_GPIO_WritePin>
 8001ed2:	f641 64b4 	movw	r4, #7860	@ 0x1eb4
        Z_stepOnce();
 8001ed6:	f001 f835 	bl	8002f44 <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001eda:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001ede:	f000 ffc9 	bl	8002e74 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Exactamente 2mm
 8001ee2:	3c01      	subs	r4, #1
 8001ee4:	d1f7      	bne.n	8001ed6 <performHoming+0x1e6>
    if (isEndstopPressed('Z')) {
 8001ee6:	205a      	movs	r0, #90	@ 0x5a
 8001ee8:	f7ff fee6 	bl	8001cb8 <isEndstopPressed>
 8001eec:	b140      	cbz	r0, 8001f00 <performHoming+0x210>
        sprintf(outputBuffer, "Error: Fin de carrera Z no se liberó después de alejarse 2mm\r\n");
 8001eee:	4933      	ldr	r1, [pc, #204]	@ (8001fbc <performHoming+0x2cc>)
 8001ef0:	e73a      	b.n	8001d68 <performHoming+0x78>
        Z_stepOnce();
 8001ef2:	f001 f827 	bl	8002f44 <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001ef6:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001efa:	f000 ffbb 	bl	8002e74 <delay_us>
 8001efe:	e7de      	b.n	8001ebe <performHoming+0x1ce>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f06:	482c      	ldr	r0, [pc, #176]	@ (8001fb8 <performHoming+0x2c8>)
 8001f08:	f001 fdbc 	bl	8003a84 <HAL_GPIO_WritePin>
 8001f0c:	f641 64b4 	movw	r4, #7860	@ 0x1eb4
        Z_stepOnce();
 8001f10:	f001 f818 	bl	8002f44 <Z_stepOnce>
        delay_us(STEP_DELAY_US); // Movimiento lento para precisión
 8001f14:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001f18:	f000 ffac 	bl	8002e74 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Z; i++) { // Exactamente 2mm de regreso
 8001f1c:	3c01      	subs	r4, #1
 8001f1e:	d1f7      	bne.n	8001f10 <performHoming+0x220>
    HAL_Delay(100);
 8001f20:	2064      	movs	r0, #100	@ 0x64
 8001f22:	f001 fc4d 	bl	80037c0 <HAL_Delay>
    if (!isEndstopPressed('Z')) {
 8001f26:	205a      	movs	r0, #90	@ 0x5a
 8001f28:	f7ff fec6 	bl	8001cb8 <isEndstopPressed>
 8001f2c:	b908      	cbnz	r0, 8001f32 <performHoming+0x242>
        sprintf(outputBuffer, "Error: Fin de carrera Z no está presionado después de regresar 2mm\r\n");
 8001f2e:	4924      	ldr	r1, [pc, #144]	@ (8001fc0 <performHoming+0x2d0>)
 8001f30:	e71a      	b.n	8001d68 <performHoming+0x78>
    currentZ = 0; // Establecer posición home
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <performHoming+0x2d4>)
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001f34:	4924      	ldr	r1, [pc, #144]	@ (8001fc8 <performHoming+0x2d8>)
 8001f36:	4813      	ldr	r0, [pc, #76]	@ (8001f84 <performHoming+0x294>)
    currentZ = 0; // Establecer posición home
 8001f38:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001f3a:	f005 fca6 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001f3e:	4811      	ldr	r0, [pc, #68]	@ (8001f84 <performHoming+0x294>)
 8001f40:	f7ff fcd4 	bl	80018ec <sendUSBText>
 8001f44:	f004 facc 	bl	80064e0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001f48:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <performHoming+0x294>)
 8001f50:	f005 fbfb 	bl	800774a <memset>
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8001f54:	491d      	ldr	r1, [pc, #116]	@ (8001fcc <performHoming+0x2dc>)
 8001f56:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <performHoming+0x294>)
 8001f58:	f005 fc97 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8001f5c:	4809      	ldr	r0, [pc, #36]	@ (8001f84 <performHoming+0x294>)
 8001f5e:	f7ff fcc5 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001f62:	4621      	mov	r1, r4
 8001f64:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001f68:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <performHoming+0x294>)
 8001f6a:	f005 fbee 	bl	800774a <memset>
    CDC_TxQueue_Process();
 8001f6e:	f004 fab7 	bl	80064e0 <CDC_TxQueue_Process>
}
 8001f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f76:	2028      	movs	r0, #40	@ 0x28
 8001f78:	f001 bc76 	b.w	8003868 <HAL_NVIC_EnableIRQ>
 8001f7c:	0800b447 	.word	0x0800b447
 8001f80:	0800b46a 	.word	0x0800b46a
 8001f84:	20002360 	.word	0x20002360
 8001f88:	0800b493 	.word	0x0800b493
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	0800b4a5 	.word	0x0800b4a5
 8001f94:	0800b4e6 	.word	0x0800b4e6
 8001f98:	2000235c 	.word	0x2000235c
 8001f9c:	0800b52d 	.word	0x0800b52d
 8001fa0:	0800b547 	.word	0x0800b547
 8001fa4:	0800b559 	.word	0x0800b559
 8001fa8:	0800b59a 	.word	0x0800b59a
 8001fac:	20002358 	.word	0x20002358
 8001fb0:	0800b5e1 	.word	0x0800b5e1
 8001fb4:	0800b5fb 	.word	0x0800b5fb
 8001fb8:	40010800 	.word	0x40010800
 8001fbc:	0800b60d 	.word	0x0800b60d
 8001fc0:	0800b64e 	.word	0x0800b64e
 8001fc4:	20002354 	.word	0x20002354
 8001fc8:	0800b695 	.word	0x0800b695
 8001fcc:	0800b6af 	.word	0x0800b6af

08001fd0 <startProgramStorage>:
/**
  * @brief  Inicia el modo de almacenamiento de programa
  * @retval None
  */
void startProgramStorage(void) {
    isStoringProgram = true;
 8001fd0:	2201      	movs	r2, #1
void startProgramStorage(void) {
 8001fd2:	b510      	push	{r4, lr}
    programLineCount = 0;
 8001fd4:	2400      	movs	r4, #0
    isStoringProgram = true;
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <startProgramStorage+0x3c>)
 8001fd8:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <startProgramStorage+0x40>)
 8001fdc:	601c      	str	r4, [r3, #0]
    isProgramLoaded = false;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <startProgramStorage+0x44>)
 8001fe0:	701c      	strb	r4, [r3, #0]
    
    // Limpiar buffer de programa
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <startProgramStorage+0x48>)
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	2250      	movs	r2, #80	@ 0x50
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f005 fbae 	bl	800774a <memset>
 8001fee:	4603      	mov	r3, r0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001ff0:	3401      	adds	r4, #1
 8001ff2:	2c64      	cmp	r4, #100	@ 0x64
 8001ff4:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001ff8:	d1f4      	bne.n	8001fe4 <startProgramStorage+0x14>
    }
    
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 8001ffa:	4808      	ldr	r0, [pc, #32]	@ (800201c <startProgramStorage+0x4c>)
 8001ffc:	f7ff fc76 	bl	80018ec <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
    //sendUSBText("ok\r\n");
}
 8002000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 8002004:	4806      	ldr	r0, [pc, #24]	@ (8002020 <startProgramStorage+0x50>)
 8002006:	f7ff bc71 	b.w	80018ec <sendUSBText>
 800200a:	bf00      	nop
 800200c:	2000039e 	.word	0x2000039e
 8002010:	200003a4 	.word	0x200003a4
 8002014:	2000039d 	.word	0x2000039d
 8002018:	200003a8 	.word	0x200003a8
 800201c:	0800b6e6 	.word	0x0800b6e6
 8002020:	0800b71d 	.word	0x0800b71d

08002024 <stopProgramStorage>:

/**
  * @brief  Detiene el modo de almacenamiento de programa
  * @retval None
  */
void stopProgramStorage(void) {
 8002024:	b510      	push	{r4, lr}
    isStoringProgram = false;
 8002026:	2400      	movs	r4, #0
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <stopProgramStorage+0x44>)
 800202a:	701c      	strb	r4, [r3, #0]
    
    if (programLineCount > 0) {
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <stopProgramStorage+0x48>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	42a2      	cmp	r2, r4
 8002032:	dd17      	ble.n	8002064 <stopProgramStorage+0x40>
        isProgramLoaded = true;
 8002034:	2101      	movs	r1, #1
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <stopProgramStorage+0x4c>)
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8002038:	480e      	ldr	r0, [pc, #56]	@ (8002074 <stopProgramStorage+0x50>)
        isProgramLoaded = true;
 800203a:	7019      	strb	r1, [r3, #0]
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 800203c:	490e      	ldr	r1, [pc, #56]	@ (8002078 <stopProgramStorage+0x54>)
 800203e:	f005 fb1f 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <stopProgramStorage+0x50>)
 8002044:	f7ff fc52 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002048:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800204c:	4621      	mov	r1, r4
 800204e:	4809      	ldr	r0, [pc, #36]	@ (8002074 <stopProgramStorage+0x50>)
 8002050:	f005 fb7b 	bl	800774a <memset>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 8002054:	4809      	ldr	r0, [pc, #36]	@ (800207c <stopProgramStorage+0x58>)
    } else {
        sendUSBText("No se almacenaron lineas\r\n");
 8002056:	f7ff fc49 	bl	80018ec <sendUSBText>
    }
    
    sendUSBText("ok\r\n");
}
 800205a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("ok\r\n");
 800205e:	4808      	ldr	r0, [pc, #32]	@ (8002080 <stopProgramStorage+0x5c>)
 8002060:	f7ff bc44 	b.w	80018ec <sendUSBText>
        sendUSBText("No se almacenaron lineas\r\n");
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <stopProgramStorage+0x60>)
 8002066:	e7f6      	b.n	8002056 <stopProgramStorage+0x32>
 8002068:	2000039e 	.word	0x2000039e
 800206c:	200003a4 	.word	0x200003a4
 8002070:	2000039d 	.word	0x2000039d
 8002074:	20002360 	.word	0x20002360
 8002078:	0800b742 	.word	0x0800b742
 800207c:	0800b76c 	.word	0x0800b76c
 8002080:	0800b14d 	.word	0x0800b14d
 8002084:	0800b7b1 	.word	0x0800b7b1

08002088 <addLineToProgram>:
/**
  * @brief  Agrega una línea al programa almacenado
  * @param  line: Línea de G-code a agregar
  * @retval true si se agregó exitosamente, false si hay error
  */
bool addLineToProgram(const char* line) {
 8002088:	b530      	push	{r4, r5, lr}
    if (programLineCount >= MAX_GCODE_LINES) {
 800208a:	4c41      	ldr	r4, [pc, #260]	@ (8002190 <addLineToProgram+0x108>)
bool addLineToProgram(const char* line) {
 800208c:	b0bd      	sub	sp, #244	@ 0xf4
    if (programLineCount >= MAX_GCODE_LINES) {
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	2b63      	cmp	r3, #99	@ 0x63
 8002092:	dd03      	ble.n	800209c <addLineToProgram+0x14>
        sendUSBText("error: buffer de programa lleno\r\n");
 8002094:	483f      	ldr	r0, [pc, #252]	@ (8002194 <addLineToProgram+0x10c>)
        if (limit_status != STATUS_OK) {
            char error_msg[150];
            sprintf(error_msg, "error: línea %d viola límites - ", programLineCount + 1);
            sendUSBText(error_msg);
            report_status_message(limit_status);
            sendUSBText("Carga de programa cancelada\r\n");
 8002096:	f7ff fc29 	bl	80018ec <sendUSBText>
            return false;
 800209a:	e046      	b.n	800212a <addLineToProgram+0xa2>
 800209c:	4601      	mov	r1, r0
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 800209e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d0fa      	beq.n	800209c <addLineToProgram+0x14>
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d0f8      	beq.n	800209c <addLineToProgram+0x14>
    if (strlen(start) == 0) {
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06d      	beq.n	800218a <addLineToProgram+0x102>
    line_copy[MAX_LINE_LENGTH - 1] = '\0';
 80020ae:	2500      	movs	r5, #0
    strncpy(line_copy, start, MAX_LINE_LENGTH - 1);
 80020b0:	224f      	movs	r2, #79	@ 0x4f
 80020b2:	a802      	add	r0, sp, #8
 80020b4:	f005 fb63 	bl	800777e <strncpy>
    int len = strlen(line_copy);
 80020b8:	a802      	add	r0, sp, #8
    line_copy[MAX_LINE_LENGTH - 1] = '\0';
 80020ba:	f88d 5057 	strb.w	r5, [sp, #87]	@ 0x57
    int len = strlen(line_copy);
 80020be:	f7fe f847 	bl	8000150 <strlen>
    while (len > 0 && (line_copy[len-1] == '\r' || line_copy[len-1] == '\n')) {
 80020c2:	ab02      	add	r3, sp, #8
 80020c4:	4403      	add	r3, r0
 80020c6:	b130      	cbz	r0, 80020d6 <addLineToProgram+0x4e>
 80020c8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80020cc:	3801      	subs	r0, #1
 80020ce:	2a0d      	cmp	r2, #13
 80020d0:	d02e      	beq.n	8002130 <addLineToProgram+0xa8>
 80020d2:	2a0a      	cmp	r2, #10
 80020d4:	d02c      	beq.n	8002130 <addLineToProgram+0xa8>
    if (strncmp(line_copy, "G0", 2) == 0 || strncmp(line_copy, "G1", 2) == 0 || 
 80020d6:	2202      	movs	r2, #2
 80020d8:	492f      	ldr	r1, [pc, #188]	@ (8002198 <addLineToProgram+0x110>)
 80020da:	a802      	add	r0, sp, #8
 80020dc:	f005 fb3d 	bl	800775a <strncmp>
 80020e0:	b190      	cbz	r0, 8002108 <addLineToProgram+0x80>
 80020e2:	2202      	movs	r2, #2
 80020e4:	492d      	ldr	r1, [pc, #180]	@ (800219c <addLineToProgram+0x114>)
 80020e6:	a802      	add	r0, sp, #8
 80020e8:	f005 fb37 	bl	800775a <strncmp>
 80020ec:	b160      	cbz	r0, 8002108 <addLineToProgram+0x80>
        strncmp(line_copy, "G2", 2) == 0 || strncmp(line_copy, "G3", 2) == 0) {
 80020ee:	2202      	movs	r2, #2
 80020f0:	492b      	ldr	r1, [pc, #172]	@ (80021a0 <addLineToProgram+0x118>)
 80020f2:	a802      	add	r0, sp, #8
 80020f4:	f005 fb31 	bl	800775a <strncmp>
    if (strncmp(line_copy, "G0", 2) == 0 || strncmp(line_copy, "G1", 2) == 0 || 
 80020f8:	b130      	cbz	r0, 8002108 <addLineToProgram+0x80>
        strncmp(line_copy, "G2", 2) == 0 || strncmp(line_copy, "G3", 2) == 0) {
 80020fa:	2202      	movs	r2, #2
 80020fc:	4929      	ldr	r1, [pc, #164]	@ (80021a4 <addLineToProgram+0x11c>)
 80020fe:	a802      	add	r0, sp, #8
 8002100:	f005 fb2b 	bl	800775a <strncmp>
 8002104:	2800      	cmp	r0, #0
 8002106:	d131      	bne.n	800216c <addLineToProgram+0xe4>
        uint8_t parse_status = gc_parse_line(line_copy);
 8002108:	a802      	add	r0, sp, #8
 800210a:	f7ff f98f 	bl	800142c <gc_parse_line>
        if (parse_status != STATUS_OK) {
 800210e:	4605      	mov	r5, r0
 8002110:	b188      	cbz	r0, 8002136 <addLineToProgram+0xae>
            sprintf(error_msg, "error: línea %d - ", programLineCount + 1);
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	4924      	ldr	r1, [pc, #144]	@ (80021a8 <addLineToProgram+0x120>)
 8002116:	3201      	adds	r2, #1
 8002118:	a816      	add	r0, sp, #88	@ 0x58
 800211a:	f005 fab1 	bl	8007680 <siprintf>
            sendUSBText(error_msg);
 800211e:	a816      	add	r0, sp, #88	@ 0x58
 8002120:	f7ff fbe4 	bl	80018ec <sendUSBText>
            report_status_message(parse_status);
 8002124:	4628      	mov	r0, r5
 8002126:	f7ff fb5f 	bl	80017e8 <report_status_message>
        return false; // Buffer lleno
 800212a:	2000      	movs	r0, #0
    strncpy(gcodeProgram[programLineCount], line_copy, MAX_LINE_LENGTH - 1);
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
    
    programLineCount++;
    return true;
}
 800212c:	b03d      	add	sp, #244	@ 0xf4
 800212e:	bd30      	pop	{r4, r5, pc}
        line_copy[len-1] = '\0';
 8002130:	f803 5d01 	strb.w	r5, [r3, #-1]!
        len--;
 8002134:	e7c7      	b.n	80020c6 <addLineToProgram+0x3e>
        uint8_t limit_status = check_soft_limits(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 8002136:	481d      	ldr	r0, [pc, #116]	@ (80021ac <addLineToProgram+0x124>)
 8002138:	7fc3      	ldrb	r3, [r0, #31]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	7f83      	ldrb	r3, [r0, #30]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	7f43      	ldrb	r3, [r0, #29]
 8002142:	68c2      	ldr	r2, [r0, #12]
 8002144:	6881      	ldr	r1, [r0, #8]
 8002146:	6840      	ldr	r0, [r0, #4]
 8002148:	f7ff f874 	bl	8001234 <check_soft_limits>
        if (limit_status != STATUS_OK) {
 800214c:	4605      	mov	r5, r0
 800214e:	b168      	cbz	r0, 800216c <addLineToProgram+0xe4>
            sprintf(error_msg, "error: línea %d viola límites - ", programLineCount + 1);
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	4917      	ldr	r1, [pc, #92]	@ (80021b0 <addLineToProgram+0x128>)
 8002154:	3201      	adds	r2, #1
 8002156:	a816      	add	r0, sp, #88	@ 0x58
 8002158:	f005 fa92 	bl	8007680 <siprintf>
            sendUSBText(error_msg);
 800215c:	a816      	add	r0, sp, #88	@ 0x58
 800215e:	f7ff fbc5 	bl	80018ec <sendUSBText>
            report_status_message(limit_status);
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff fb40 	bl	80017e8 <report_status_message>
            sendUSBText("Carga de programa cancelada\r\n");
 8002168:	4812      	ldr	r0, [pc, #72]	@ (80021b4 <addLineToProgram+0x12c>)
 800216a:	e794      	b.n	8002096 <addLineToProgram+0xe>
    strncpy(gcodeProgram[programLineCount], line_copy, MAX_LINE_LENGTH - 1);
 800216c:	2250      	movs	r2, #80	@ 0x50
 800216e:	6825      	ldr	r5, [r4, #0]
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <addLineToProgram+0x130>)
 8002172:	a902      	add	r1, sp, #8
 8002174:	fb02 3305 	mla	r3, r2, r5, r3
 8002178:	224f      	movs	r2, #79	@ 0x4f
 800217a:	4618      	mov	r0, r3
 800217c:	f005 faff 	bl	800777e <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 8002180:	2200      	movs	r2, #0
    programLineCount++;
 8002182:	3501      	adds	r5, #1
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 8002184:	f880 204f 	strb.w	r2, [r0, #79]	@ 0x4f
    programLineCount++;
 8002188:	6025      	str	r5, [r4, #0]
        return true; // Línea vacía, no la almacenamos pero no es error
 800218a:	2001      	movs	r0, #1
 800218c:	e7ce      	b.n	800212c <addLineToProgram+0xa4>
 800218e:	bf00      	nop
 8002190:	200003a4 	.word	0x200003a4
 8002194:	0800b7cc 	.word	0x0800b7cc
 8002198:	0800b7ee 	.word	0x0800b7ee
 800219c:	0800b7f1 	.word	0x0800b7f1
 80021a0:	0800b7f4 	.word	0x0800b7f4
 80021a4:	0800b7f7 	.word	0x0800b7f7
 80021a8:	0800b7fa 	.word	0x0800b7fa
 80021ac:	20000370 	.word	0x20000370
 80021b0:	0800b80e 	.word	0x0800b80e
 80021b4:	0800b831 	.word	0x0800b831
 80021b8:	200003a8 	.word	0x200003a8

080021bc <clearProgram>:

/**
  * @brief  Limpia el programa almacenado
  * @retval None
  */
void clearProgram(void) {
 80021bc:	b538      	push	{r3, r4, r5, lr}
    programLineCount = 0;
 80021be:	2400      	movs	r4, #0
 80021c0:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <clearProgram+0x38>)
 80021c2:	4d0d      	ldr	r5, [pc, #52]	@ (80021f8 <clearProgram+0x3c>)
 80021c4:	6014      	str	r4, [r2, #0]
    currentExecutingLine = 0;
 80021c6:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <clearProgram+0x40>)
 80021c8:	6014      	str	r4, [r2, #0]
    isProgramLoaded = false;
 80021ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <clearProgram+0x44>)
 80021cc:	7014      	strb	r4, [r2, #0]
    isProgramRunning = false;
 80021ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <clearProgram+0x48>)
 80021d0:	7014      	strb	r4, [r2, #0]
    isStoringProgram = false;
 80021d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <clearProgram+0x4c>)
 80021d4:	7014      	strb	r4, [r2, #0]
    
    // Limpiar buffer
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 80021d6:	4628      	mov	r0, r5
 80021d8:	2250      	movs	r2, #80	@ 0x50
 80021da:	2100      	movs	r1, #0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80021dc:	3401      	adds	r4, #1
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 80021de:	f005 fab4 	bl	800774a <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 80021e2:	2c64      	cmp	r4, #100	@ 0x64
 80021e4:	f105 0550 	add.w	r5, r5, #80	@ 0x50
 80021e8:	d1f5      	bne.n	80021d6 <clearProgram+0x1a>
    }
    
    sendUSBText("Programa limpiado\r\n");
 80021ea:	4808      	ldr	r0, [pc, #32]	@ (800220c <clearProgram+0x50>)
    //sendUSBText("ok\r\n");
}
 80021ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendUSBText("Programa limpiado\r\n");
 80021f0:	f7ff bb7c 	b.w	80018ec <sendUSBText>
 80021f4:	200003a4 	.word	0x200003a4
 80021f8:	200003a8 	.word	0x200003a8
 80021fc:	200003a0 	.word	0x200003a0
 8002200:	2000039d 	.word	0x2000039d
 8002204:	2000039c 	.word	0x2000039c
 8002208:	2000039e 	.word	0x2000039e
 800220c:	0800b84f 	.word	0x0800b84f

08002210 <runProgram>:
  * @brief  Ejecuta el programa completo almacenado
  * @retval None
  */
void runProgram(void) {

    if (!isProgramLoaded || programLineCount == 0) {
 8002210:	4b16      	ldr	r3, [pc, #88]	@ (800226c <runProgram+0x5c>)
void runProgram(void) {
 8002212:	b510      	push	{r4, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b113      	cbz	r3, 800221e <runProgram+0xe>
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <runProgram+0x60>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	b972      	cbnz	r2, 800223c <runProgram+0x2c>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 800221e:	4915      	ldr	r1, [pc, #84]	@ (8002274 <runProgram+0x64>)
 8002220:	4815      	ldr	r0, [pc, #84]	@ (8002278 <runProgram+0x68>)
 8002222:	f005 fb32 	bl	800788a <strcpy>
        sendUSBText(outputBuffer);
 8002226:	4814      	ldr	r0, [pc, #80]	@ (8002278 <runProgram+0x68>)
 8002228:	f7ff fb60 	bl	80018ec <sendUSBText>
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
}
 800222c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002230:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002234:	2100      	movs	r1, #0
 8002236:	4810      	ldr	r0, [pc, #64]	@ (8002278 <runProgram+0x68>)
 8002238:	f005 ba87 	b.w	800774a <memset>
    isProgramRunning = true;
 800223c:	2101      	movs	r1, #1
    currentExecutingLine = 0;
 800223e:	2400      	movs	r4, #0
    isProgramRunning = true;
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <runProgram+0x6c>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 8002242:	480d      	ldr	r0, [pc, #52]	@ (8002278 <runProgram+0x68>)
    isProgramRunning = true;
 8002244:	7019      	strb	r1, [r3, #0]
    currentExecutingLine = 0;
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <runProgram+0x70>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 8002248:	490e      	ldr	r1, [pc, #56]	@ (8002284 <runProgram+0x74>)
    currentExecutingLine = 0;
 800224a:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 800224c:	f005 fa18 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8002250:	4809      	ldr	r0, [pc, #36]	@ (8002278 <runProgram+0x68>)
 8002252:	f7ff fb4b 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002256:	4621      	mov	r1, r4
 8002258:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800225c:	4806      	ldr	r0, [pc, #24]	@ (8002278 <runProgram+0x68>)
 800225e:	f005 fa74 	bl	800774a <memset>
}
 8002262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
 8002266:	4808      	ldr	r0, [pc, #32]	@ (8002288 <runProgram+0x78>)
 8002268:	f7ff bb40 	b.w	80018ec <sendUSBText>
 800226c:	2000039d 	.word	0x2000039d
 8002270:	200003a4 	.word	0x200003a4
 8002274:	0800b863 	.word	0x0800b863
 8002278:	20002360 	.word	0x20002360
 800227c:	2000039c 	.word	0x2000039c
 8002280:	200003a0 	.word	0x200003a0
 8002284:	0800b884 	.word	0x0800b884
 8002288:	0800b8b3 	.word	0x0800b8b3

0800228c <runNextLine>:

/**
  * @brief  Ejecuta la siguiente línea del programa
  * @retval None
  */
void runNextLine(void) {
 800228c:	b570      	push	{r4, r5, r6, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 800228e:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <runNextLine+0xc8>)
void runNextLine(void) {
 8002290:	b094      	sub	sp, #80	@ 0x50
    if (!isProgramLoaded || programLineCount == 0) {
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b113      	cbz	r3, 800229c <runNextLine+0x10>
 8002296:	4b30      	ldr	r3, [pc, #192]	@ (8002358 <runNextLine+0xcc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b97b      	cbnz	r3, 80022bc <runNextLine+0x30>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 800229c:	492f      	ldr	r1, [pc, #188]	@ (800235c <runNextLine+0xd0>)
 800229e:	4830      	ldr	r0, [pc, #192]	@ (8002360 <runNextLine+0xd4>)
 80022a0:	f005 faf3 	bl	800788a <strcpy>
        sendUSBText(outputBuffer);
 80022a4:	482e      	ldr	r0, [pc, #184]	@ (8002360 <runNextLine+0xd4>)
 80022a6:	f7ff fb21 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022aa:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80022ae:	2100      	movs	r1, #0
 80022b0:	482b      	ldr	r0, [pc, #172]	@ (8002360 <runNextLine+0xd4>)
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 80022b2:	b014      	add	sp, #80	@ 0x50
 80022b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022b8:	f005 ba47 	b.w	800774a <memset>
    if (currentExecutingLine >= programLineCount) {
 80022bc:	4c29      	ldr	r4, [pc, #164]	@ (8002364 <runNextLine+0xd8>)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	dc11      	bgt.n	80022e8 <runNextLine+0x5c>
        sprintf(outputBuffer, "Programa completado\r\n");
 80022c4:	4928      	ldr	r1, [pc, #160]	@ (8002368 <runNextLine+0xdc>)
 80022c6:	4826      	ldr	r0, [pc, #152]	@ (8002360 <runNextLine+0xd4>)
 80022c8:	f005 fadf 	bl	800788a <strcpy>
        sendUSBText(outputBuffer);
 80022cc:	4824      	ldr	r0, [pc, #144]	@ (8002360 <runNextLine+0xd4>)
 80022ce:	f7ff fb0d 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022d2:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80022d6:	2100      	movs	r1, #0
 80022d8:	4821      	ldr	r0, [pc, #132]	@ (8002360 <runNextLine+0xd4>)
 80022da:	f005 fa36 	bl	800774a <memset>
        isProgramRunning = false;
 80022de:	2200      	movs	r2, #0
 80022e0:	4b22      	ldr	r3, [pc, #136]	@ (800236c <runNextLine+0xe0>)
 80022e2:	701a      	strb	r2, [r3, #0]
}
 80022e4:	b014      	add	sp, #80	@ 0x50
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 80022e8:	2650      	movs	r6, #80	@ 0x50
 80022ea:	4d21      	ldr	r5, [pc, #132]	@ (8002370 <runNextLine+0xe4>)
 80022ec:	4921      	ldr	r1, [pc, #132]	@ (8002374 <runNextLine+0xe8>)
 80022ee:	fb06 5302 	mla	r3, r6, r2, r5
 80022f2:	481b      	ldr	r0, [pc, #108]	@ (8002360 <runNextLine+0xd4>)
 80022f4:	3201      	adds	r2, #1
 80022f6:	f005 f9c3 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 80022fa:	4819      	ldr	r0, [pc, #100]	@ (8002360 <runNextLine+0xd4>)
 80022fc:	f7ff faf6 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002300:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002304:	2100      	movs	r1, #0
 8002306:	4816      	ldr	r0, [pc, #88]	@ (8002360 <runNextLine+0xd4>)
 8002308:	f005 fa1f 	bl	800774a <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	224f      	movs	r2, #79	@ 0x4f
 8002310:	fb06 5101 	mla	r1, r6, r1, r5
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002314:	2500      	movs	r5, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002316:	4668      	mov	r0, sp
 8002318:	f005 fa31 	bl	800777e <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 800231c:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 800231e:	f88d 504f 	strb.w	r5, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 8002322:	f7ff fa4d 	bl	80017c0 <gc_execute_line>
        currentExecutingLine++;
 8002326:	6823      	ldr	r3, [r4, #0]
    if (status == STATUS_OK) {
 8002328:	4602      	mov	r2, r0
        currentExecutingLine++;
 800232a:	3301      	adds	r3, #1
    if (status == STATUS_OK) {
 800232c:	b908      	cbnz	r0, 8002332 <runNextLine+0xa6>
        currentExecutingLine++;
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	e7d8      	b.n	80022e4 <runNextLine+0x58>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8002332:	4911      	ldr	r1, [pc, #68]	@ (8002378 <runNextLine+0xec>)
 8002334:	480a      	ldr	r0, [pc, #40]	@ (8002360 <runNextLine+0xd4>)
 8002336:	f005 f9a3 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
 800233a:	4809      	ldr	r0, [pc, #36]	@ (8002360 <runNextLine+0xd4>)
 800233c:	f7ff fad6 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002340:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002344:	4629      	mov	r1, r5
 8002346:	4806      	ldr	r0, [pc, #24]	@ (8002360 <runNextLine+0xd4>)
 8002348:	f005 f9ff 	bl	800774a <memset>
        isProgramRunning = false;
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <runNextLine+0xe0>)
 800234e:	701d      	strb	r5, [r3, #0]
 8002350:	e7c8      	b.n	80022e4 <runNextLine+0x58>
 8002352:	bf00      	nop
 8002354:	2000039d 	.word	0x2000039d
 8002358:	200003a4 	.word	0x200003a4
 800235c:	0800b863 	.word	0x0800b863
 8002360:	20002360 	.word	0x20002360
 8002364:	200003a0 	.word	0x200003a0
 8002368:	0800b8eb 	.word	0x0800b8eb
 800236c:	2000039c 	.word	0x2000039c
 8002370:	200003a8 	.word	0x200003a8
 8002374:	0800b901 	.word	0x0800b901
 8002378:	0800b91b 	.word	0x0800b91b

0800237c <pauseProgram>:

/**
  * @brief  Pausa la ejecución del programa
  * @retval None
  */
void pauseProgram(void) {
 800237c:	b570      	push	{r4, r5, r6, lr}
    isProgramRunning = false;
 800237e:	2500      	movs	r5, #0
    sprintf(outputBuffer, "Programa pausado\r\n");
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002380:	f240 36b6 	movw	r6, #950	@ 0x3b6
    sprintf(outputBuffer, "Programa pausado\r\n");
 8002384:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <pauseProgram+0x44>)
    isProgramRunning = false;
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <pauseProgram+0x48>)
    sprintf(outputBuffer, "Programa pausado\r\n");
 8002388:	490f      	ldr	r1, [pc, #60]	@ (80023c8 <pauseProgram+0x4c>)
 800238a:	4620      	mov	r0, r4
    isProgramRunning = false;
 800238c:	701d      	strb	r5, [r3, #0]
    sprintf(outputBuffer, "Programa pausado\r\n");
 800238e:	f005 fa7c 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8002392:	4620      	mov	r0, r4
 8002394:	f7ff faaa 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002398:	4632      	mov	r2, r6
 800239a:	4629      	mov	r1, r5
 800239c:	4620      	mov	r0, r4
 800239e:	f005 f9d4 	bl	800774a <memset>
    sprintf(outputBuffer, "ok\r\n");
 80023a2:	490a      	ldr	r1, [pc, #40]	@ (80023cc <pauseProgram+0x50>)
 80023a4:	4620      	mov	r0, r4
 80023a6:	f005 fa70 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fa9e 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80023b0:	4632      	mov	r2, r6
 80023b2:	4629      	mov	r1, r5
 80023b4:	4620      	mov	r0, r4
}
 80023b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80023ba:	f005 b9c6 	b.w	800774a <memset>
 80023be:	bf00      	nop
 80023c0:	20002360 	.word	0x20002360
 80023c4:	2000039c 	.word	0x2000039c
 80023c8:	0800b93a 	.word	0x0800b93a
 80023cc:	0800b14d 	.word	0x0800b14d

080023d0 <showHelp>:

/**
  * @brief  Muestra la ayuda del sistema de programas G-code
  * @retval None
  */
void showHelp(void) {
 80023d0:	b508      	push	{r3, lr}
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 80023d2:	482f      	ldr	r0, [pc, #188]	@ (8002490 <showHelp+0xc0>)
 80023d4:	f7ff fa8a 	bl	80018ec <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 80023d8:	482e      	ldr	r0, [pc, #184]	@ (8002494 <showHelp+0xc4>)
 80023da:	f7ff fa87 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 80023de:	482e      	ldr	r0, [pc, #184]	@ (8002498 <showHelp+0xc8>)
 80023e0:	f7ff fa84 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 80023e4:	482d      	ldr	r0, [pc, #180]	@ (800249c <showHelp+0xcc>)
 80023e6:	f7ff fa81 	bl	80018ec <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 80023ea:	482d      	ldr	r0, [pc, #180]	@ (80024a0 <showHelp+0xd0>)
 80023ec:	f7ff fa7e 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 80023f0:	482c      	ldr	r0, [pc, #176]	@ (80024a4 <showHelp+0xd4>)
 80023f2:	f7ff fa7b 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 80023f6:	482c      	ldr	r0, [pc, #176]	@ (80024a8 <showHelp+0xd8>)
 80023f8:	f7ff fa78 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 80023fc:	482b      	ldr	r0, [pc, #172]	@ (80024ac <showHelp+0xdc>)
 80023fe:	f7ff fa75 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_STATUS - Estado del programa actual\r\n");
 8002402:	482b      	ldr	r0, [pc, #172]	@ (80024b0 <showHelp+0xe0>)
 8002404:	f7ff fa72 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 8002408:	482a      	ldr	r0, [pc, #168]	@ (80024b4 <showHelp+0xe4>)
 800240a:	f7ff fa6f 	bl	80018ec <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 800240e:	482a      	ldr	r0, [pc, #168]	@ (80024b8 <showHelp+0xe8>)
 8002410:	f7ff fa6c 	bl	80018ec <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 8002414:	4829      	ldr	r0, [pc, #164]	@ (80024bc <showHelp+0xec>)
 8002416:	f7ff fa69 	bl	80018ec <sendUSBText>
    
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 800241a:	4829      	ldr	r0, [pc, #164]	@ (80024c0 <showHelp+0xf0>)
 800241c:	f7ff fa66 	bl	80018ec <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 8002420:	4828      	ldr	r0, [pc, #160]	@ (80024c4 <showHelp+0xf4>)
 8002422:	f7ff fa63 	bl	80018ec <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 8002426:	4828      	ldr	r0, [pc, #160]	@ (80024c8 <showHelp+0xf8>)
 8002428:	f7ff fa60 	bl	80018ec <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 800242c:	4827      	ldr	r0, [pc, #156]	@ (80024cc <showHelp+0xfc>)
 800242e:	f7ff fa5d 	bl	80018ec <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 8002432:	4827      	ldr	r0, [pc, #156]	@ (80024d0 <showHelp+0x100>)
 8002434:	f7ff fa5a 	bl	80018ec <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 8002438:	4826      	ldr	r0, [pc, #152]	@ (80024d4 <showHelp+0x104>)
 800243a:	f7ff fa57 	bl	80018ec <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 800243e:	4826      	ldr	r0, [pc, #152]	@ (80024d8 <showHelp+0x108>)
 8002440:	f7ff fa54 	bl	80018ec <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 8002444:	4825      	ldr	r0, [pc, #148]	@ (80024dc <showHelp+0x10c>)
 8002446:	f7ff fa51 	bl	80018ec <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 800244a:	4825      	ldr	r0, [pc, #148]	@ (80024e0 <showHelp+0x110>)
 800244c:	f7ff fa4e 	bl	80018ec <sendUSBText>
    sendUSBText("M505           - Mostrar limites de la maquina\r\n");
 8002450:	4824      	ldr	r0, [pc, #144]	@ (80024e4 <showHelp+0x114>)
 8002452:	f7ff fa4b 	bl	80018ec <sendUSBText>
    
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 8002456:	4824      	ldr	r0, [pc, #144]	@ (80024e8 <showHelp+0x118>)
 8002458:	f7ff fa48 	bl	80018ec <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 800245c:	4823      	ldr	r0, [pc, #140]	@ (80024ec <showHelp+0x11c>)
 800245e:	f7ff fa45 	bl	80018ec <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 8002462:	4823      	ldr	r0, [pc, #140]	@ (80024f0 <showHelp+0x120>)
 8002464:	f7ff fa42 	bl	80018ec <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 8002468:	4822      	ldr	r0, [pc, #136]	@ (80024f4 <showHelp+0x124>)
 800246a:	f7ff fa3f 	bl	80018ec <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 800246e:	4822      	ldr	r0, [pc, #136]	@ (80024f8 <showHelp+0x128>)
 8002470:	f7ff fa3c 	bl	80018ec <sendUSBText>
    sendUSBText("5. FIN\r\n");
 8002474:	4821      	ldr	r0, [pc, #132]	@ (80024fc <showHelp+0x12c>)
 8002476:	f7ff fa39 	bl	80018ec <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 800247a:	4821      	ldr	r0, [pc, #132]	@ (8002500 <showHelp+0x130>)
 800247c:	f7ff fa36 	bl	80018ec <sendUSBText>
    
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 8002480:	4820      	ldr	r0, [pc, #128]	@ (8002504 <showHelp+0x134>)
 8002482:	f7ff fa33 	bl	80018ec <sendUSBText>
    sendUSBText("ok\r\n");
}
 8002486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("ok\r\n");
 800248a:	481f      	ldr	r0, [pc, #124]	@ (8002508 <showHelp+0x138>)
 800248c:	f7ff ba2e 	b.w	80018ec <sendUSBText>
 8002490:	0800b94d 	.word	0x0800b94d
 8002494:	0800b96f 	.word	0x0800b96f
 8002498:	0800b989 	.word	0x0800b989
 800249c:	0800b9c3 	.word	0x0800b9c3
 80024a0:	0800b9ed 	.word	0x0800b9ed
 80024a4:	0800ba23 	.word	0x0800ba23
 80024a8:	0800ba50 	.word	0x0800ba50
 80024ac:	0800ba7b 	.word	0x0800ba7b
 80024b0:	0800ba9e 	.word	0x0800ba9e
 80024b4:	0800bacc 	.word	0x0800bacc
 80024b8:	0800bb00 	.word	0x0800bb00
 80024bc:	0800bb2e 	.word	0x0800bb2e
 80024c0:	0800bb63 	.word	0x0800bb63
 80024c4:	0800bb80 	.word	0x0800bb80
 80024c8:	0800bba5 	.word	0x0800bba5
 80024cc:	0800bbd8 	.word	0x0800bbd8
 80024d0:	0800bc00 	.word	0x0800bc00
 80024d4:	0800bc2e 	.word	0x0800bc2e
 80024d8:	0800bc53 	.word	0x0800bc53
 80024dc:	0800bc7b 	.word	0x0800bc7b
 80024e0:	0800bca7 	.word	0x0800bca7
 80024e4:	0800bcd0 	.word	0x0800bcd0
 80024e8:	0800bd01 	.word	0x0800bd01
 80024ec:	0800bd15 	.word	0x0800bd15
 80024f0:	0800bd28 	.word	0x0800bd28
 80024f4:	0800bd3a 	.word	0x0800bd3a
 80024f8:	0800bd53 	.word	0x0800bd53
 80024fc:	0800bd71 	.word	0x0800bd71
 8002500:	0800bd7a 	.word	0x0800bd7a
 8002504:	0800bd8b 	.word	0x0800bd8b
 8002508:	0800b14d 	.word	0x0800b14d

0800250c <showQueueStatus>:

/**
  * @brief  Muestra el estado de la cola de transmisión USB CDC
  * @retval None
  */
void showQueueStatus(void) {
 800250c:	b508      	push	{r3, lr}

    sprintf(outputBuffer, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 800250e:	4923      	ldr	r1, [pc, #140]	@ (800259c <showQueueStatus+0x90>)
 8002510:	4823      	ldr	r0, [pc, #140]	@ (80025a0 <showQueueStatus+0x94>)
 8002512:	f005 f9ba 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 8002516:	4822      	ldr	r0, [pc, #136]	@ (80025a0 <showQueueStatus+0x94>)
 8002518:	f7ff f9e8 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800251c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002520:	2100      	movs	r1, #0
 8002522:	481f      	ldr	r0, [pc, #124]	@ (80025a0 <showQueueStatus+0x94>)
 8002524:	f005 f911 	bl	800774a <memset>

    sprintf(outputBuffer, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 8002528:	f004 f812 	bl	8006550 <CDC_TxQueue_GetCount>
 800252c:	230a      	movs	r3, #10
 800252e:	4602      	mov	r2, r0
 8002530:	491c      	ldr	r1, [pc, #112]	@ (80025a4 <showQueueStatus+0x98>)
 8002532:	481b      	ldr	r0, [pc, #108]	@ (80025a0 <showQueueStatus+0x94>)
 8002534:	f005 f8a4 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8002538:	4819      	ldr	r0, [pc, #100]	@ (80025a0 <showQueueStatus+0x94>)
 800253a:	f7ff f9d7 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800253e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002542:	2100      	movs	r1, #0
 8002544:	4816      	ldr	r0, [pc, #88]	@ (80025a0 <showQueueStatus+0x94>)
 8002546:	f005 f900 	bl	800774a <memset>

    sprintf(outputBuffer, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 800254a:	f004 f807 	bl	800655c <CDC_TxQueue_IsFull>
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <showQueueStatus+0x9c>)
 8002550:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <showQueueStatus+0xa0>)
 8002552:	4917      	ldr	r1, [pc, #92]	@ (80025b0 <showQueueStatus+0xa4>)
 8002554:	2800      	cmp	r0, #0
 8002556:	bf18      	it	ne
 8002558:	461a      	movne	r2, r3
 800255a:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <showQueueStatus+0x94>)
 800255c:	f005 f890 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8002560:	480f      	ldr	r0, [pc, #60]	@ (80025a0 <showQueueStatus+0x94>)
 8002562:	f7ff f9c3 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002566:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800256a:	2100      	movs	r1, #0
 800256c:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <showQueueStatus+0x94>)
 800256e:	f005 f8ec 	bl	800774a <memset>

    sprintf(outputBuffer, "Método transmisión: ");
 8002572:	4910      	ldr	r1, [pc, #64]	@ (80025b4 <showQueueStatus+0xa8>)
 8002574:	480a      	ldr	r0, [pc, #40]	@ (80025a0 <showQueueStatus+0x94>)
 8002576:	f005 f988 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
 800257a:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <showQueueStatus+0x94>)
 800257c:	f7ff f9b6 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002580:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002584:	2100      	movs	r1, #0
 8002586:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <showQueueStatus+0x94>)
 8002588:	f005 f8df 	bl	800774a <memset>
            break;
        case USB_METHOD_RETRY:
            sendUSBText("REINTENTOS\r\n");
            break;
        case USB_METHOD_QUEUED:
            sendUSBText("COLA\r\n");
 800258c:	480a      	ldr	r0, [pc, #40]	@ (80025b8 <showQueueStatus+0xac>)
 800258e:	f7ff f9ad 	bl	80018ec <sendUSBText>
            break;
    }
    
    sendUSBText("===========================\r\n");
}
 8002592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("===========================\r\n");
 8002596:	4809      	ldr	r0, [pc, #36]	@ (80025bc <showQueueStatus+0xb0>)
 8002598:	f7ff b9a8 	b.w	80018ec <sendUSBText>
 800259c:	0800bda7 	.word	0x0800bda7
 80025a0:	20002360 	.word	0x20002360
 80025a4:	0800bdc7 	.word	0x0800bdc7
 80025a8:	0800bda1 	.word	0x0800bda1
 80025ac:	0800bda4 	.word	0x0800bda4
 80025b0:	0800bde1 	.word	0x0800bde1
 80025b4:	0800bdf2 	.word	0x0800bdf2
 80025b8:	0800be09 	.word	0x0800be09
 80025bc:	0800bebb 	.word	0x0800bebb

080025c0 <showProgramStatus>:

/**
  * @brief  Muestra el estado del programa en ejecución
  * @retval None
  */
void showProgramStatus(void) {
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sprintf(outputBuffer, "\r\n=== ESTADO PROGRAMA G-CODE ===\r\n");
 80025c2:	4945      	ldr	r1, [pc, #276]	@ (80026d8 <showProgramStatus+0x118>)
 80025c4:	4845      	ldr	r0, [pc, #276]	@ (80026dc <showProgramStatus+0x11c>)
 80025c6:	f005 f960 	bl	800788a <strcpy>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 80025ca:	4c45      	ldr	r4, [pc, #276]	@ (80026e0 <showProgramStatus+0x120>)
    sendUSBText(outputBuffer);
 80025cc:	4843      	ldr	r0, [pc, #268]	@ (80026dc <showProgramStatus+0x11c>)
 80025ce:	f7ff f98d 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025d2:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80025d6:	2100      	movs	r1, #0
 80025d8:	4840      	ldr	r0, [pc, #256]	@ (80026dc <showProgramStatus+0x11c>)
 80025da:	f005 f8b6 	bl	800774a <memset>
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 80025de:	4f41      	ldr	r7, [pc, #260]	@ (80026e4 <showProgramStatus+0x124>)
 80025e0:	7822      	ldrb	r2, [r4, #0]
 80025e2:	4d41      	ldr	r5, [pc, #260]	@ (80026e8 <showProgramStatus+0x128>)
 80025e4:	4941      	ldr	r1, [pc, #260]	@ (80026ec <showProgramStatus+0x12c>)
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	bf0c      	ite	eq
 80025ea:	463a      	moveq	r2, r7
 80025ec:	462a      	movne	r2, r5
 80025ee:	483b      	ldr	r0, [pc, #236]	@ (80026dc <showProgramStatus+0x11c>)
 80025f0:	f005 f846 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 80025f4:	4e3e      	ldr	r6, [pc, #248]	@ (80026f0 <showProgramStatus+0x130>)
    sendUSBText(outputBuffer);
 80025f6:	4839      	ldr	r0, [pc, #228]	@ (80026dc <showProgramStatus+0x11c>)
 80025f8:	f7ff f978 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025fc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002600:	2100      	movs	r1, #0
 8002602:	4836      	ldr	r0, [pc, #216]	@ (80026dc <showProgramStatus+0x11c>)
 8002604:	f005 f8a1 	bl	800774a <memset>
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 8002608:	7832      	ldrb	r2, [r6, #0]
 800260a:	493a      	ldr	r1, [pc, #232]	@ (80026f4 <showProgramStatus+0x134>)
 800260c:	2a00      	cmp	r2, #0
 800260e:	bf0c      	ite	eq
 8002610:	463a      	moveq	r2, r7
 8002612:	462a      	movne	r2, r5
 8002614:	4831      	ldr	r0, [pc, #196]	@ (80026dc <showProgramStatus+0x11c>)
 8002616:	f005 f833 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 800261a:	4830      	ldr	r0, [pc, #192]	@ (80026dc <showProgramStatus+0x11c>)
 800261c:	f7ff f966 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002620:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002624:	2100      	movs	r1, #0
 8002626:	482d      	ldr	r0, [pc, #180]	@ (80026dc <showProgramStatus+0x11c>)
 8002628:	f005 f88f 	bl	800774a <memset>
    
    if (isProgramLoaded) {
 800262c:	7823      	ldrb	r3, [r4, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04c      	beq.n	80026cc <showProgramStatus+0x10c>
        sprintf(outputBuffer, "Total de líneas: %d\r\n", programLineCount);
 8002632:	4c31      	ldr	r4, [pc, #196]	@ (80026f8 <showProgramStatus+0x138>)
 8002634:	4931      	ldr	r1, [pc, #196]	@ (80026fc <showProgramStatus+0x13c>)
 8002636:	6822      	ldr	r2, [r4, #0]
 8002638:	4828      	ldr	r0, [pc, #160]	@ (80026dc <showProgramStatus+0x11c>)
 800263a:	f005 f821 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 800263e:	4d30      	ldr	r5, [pc, #192]	@ (8002700 <showProgramStatus+0x140>)
        sendUSBText(outputBuffer);
 8002640:	4826      	ldr	r0, [pc, #152]	@ (80026dc <showProgramStatus+0x11c>)
 8002642:	f7ff f953 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002646:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800264a:	2100      	movs	r1, #0
 800264c:	4823      	ldr	r0, [pc, #140]	@ (80026dc <showProgramStatus+0x11c>)
 800264e:	f005 f87c 	bl	800774a <memset>
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 8002652:	682a      	ldr	r2, [r5, #0]
 8002654:	492b      	ldr	r1, [pc, #172]	@ (8002704 <showProgramStatus+0x144>)
 8002656:	3201      	adds	r2, #1
 8002658:	4820      	ldr	r0, [pc, #128]	@ (80026dc <showProgramStatus+0x11c>)
 800265a:	f005 f811 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
 800265e:	481f      	ldr	r0, [pc, #124]	@ (80026dc <showProgramStatus+0x11c>)
 8002660:	f7ff f944 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002664:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002668:	2100      	movs	r1, #0
 800266a:	481c      	ldr	r0, [pc, #112]	@ (80026dc <showProgramStatus+0x11c>)
 800266c:	f005 f86d 	bl	800774a <memset>
        
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002670:	6823      	ldr	r3, [r4, #0]
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002672:	481a      	ldr	r0, [pc, #104]	@ (80026dc <showProgramStatus+0x11c>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002674:	2b00      	cmp	r3, #0
 8002676:	bfc5      	ittet	gt
 8002678:	2164      	movgt	r1, #100	@ 0x64
 800267a:	682a      	ldrgt	r2, [r5, #0]
 800267c:	2200      	movle	r2, #0
 800267e:	434a      	mulgt	r2, r1
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002680:	4921      	ldr	r1, [pc, #132]	@ (8002708 <showProgramStatus+0x148>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002682:	bfc8      	it	gt
 8002684:	fb92 f2f3 	sdivgt	r2, r2, r3
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002688:	f004 fffa 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
 800268c:	4813      	ldr	r0, [pc, #76]	@ (80026dc <showProgramStatus+0x11c>)
 800268e:	f7ff f92d 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002692:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002696:	2100      	movs	r1, #0
 8002698:	4810      	ldr	r0, [pc, #64]	@ (80026dc <showProgramStatus+0x11c>)
 800269a:	f005 f856 	bl	800774a <memset>
        
        if (isProgramRunning && currentExecutingLine < programLineCount) {
 800269e:	7833      	ldrb	r3, [r6, #0]
 80026a0:	b1a3      	cbz	r3, 80026cc <showProgramStatus+0x10c>
 80026a2:	682b      	ldr	r3, [r5, #0]
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	da10      	bge.n	80026cc <showProgramStatus+0x10c>
            sprintf(outputBuffer, "Próxima línea: %s\r\n", gcodeProgram[currentExecutingLine]);
 80026aa:	2150      	movs	r1, #80	@ 0x50
 80026ac:	4a17      	ldr	r2, [pc, #92]	@ (800270c <showProgramStatus+0x14c>)
 80026ae:	480b      	ldr	r0, [pc, #44]	@ (80026dc <showProgramStatus+0x11c>)
 80026b0:	fb01 2203 	mla	r2, r1, r3, r2
 80026b4:	4916      	ldr	r1, [pc, #88]	@ (8002710 <showProgramStatus+0x150>)
 80026b6:	f004 ffe3 	bl	8007680 <siprintf>
            sendUSBText(outputBuffer);
 80026ba:	4808      	ldr	r0, [pc, #32]	@ (80026dc <showProgramStatus+0x11c>)
 80026bc:	f7ff f916 	bl	80018ec <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 80026c0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80026c4:	2100      	movs	r1, #0
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <showProgramStatus+0x11c>)
 80026c8:	f005 f83f 	bl	800774a <memset>
        }
    }
    
    sendUSBText("=============================\r\n");
}
 80026cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendUSBText("=============================\r\n");
 80026d0:	4810      	ldr	r0, [pc, #64]	@ (8002714 <showProgramStatus+0x154>)
 80026d2:	f7ff b90b 	b.w	80018ec <sendUSBText>
 80026d6:	bf00      	nop
 80026d8:	0800be10 	.word	0x0800be10
 80026dc:	20002360 	.word	0x20002360
 80026e0:	2000039d 	.word	0x2000039d
 80026e4:	0800bda4 	.word	0x0800bda4
 80026e8:	0800bda1 	.word	0x0800bda1
 80026ec:	0800be33 	.word	0x0800be33
 80026f0:	2000039c 	.word	0x2000039c
 80026f4:	0800be4a 	.word	0x0800be4a
 80026f8:	200003a4 	.word	0x200003a4
 80026fc:	0800be67 	.word	0x0800be67
 8002700:	200003a0 	.word	0x200003a0
 8002704:	0800be7e 	.word	0x0800be7e
 8002708:	0800be92 	.word	0x0800be92
 800270c:	200003a8 	.word	0x200003a8
 8002710:	0800bea3 	.word	0x0800bea3
 8002714:	0800beb9 	.word	0x0800beb9

08002718 <processGcode>:
void processGcode(const char* command) {
 8002718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 800271c:	220d      	movs	r2, #13
void processGcode(const char* command) {
 800271e:	b0a0      	sub	sp, #128	@ 0x80
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 8002720:	49ab      	ldr	r1, [pc, #684]	@ (80029d0 <processGcode+0x2b8>)
void processGcode(const char* command) {
 8002722:	4604      	mov	r4, r0
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 8002724:	f005 f819 	bl	800775a <strncmp>
 8002728:	b920      	cbnz	r0, 8002734 <processGcode+0x1c>
}
 800272a:	b020      	add	sp, #128	@ 0x80
 800272c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        startProgramStorage();
 8002730:	f7ff bc4e 	b.w	8001fd0 <startProgramStorage>
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 8002734:	220c      	movs	r2, #12
 8002736:	4620      	mov	r0, r4
 8002738:	49a6      	ldr	r1, [pc, #664]	@ (80029d4 <processGcode+0x2bc>)
 800273a:	f005 f80e 	bl	800775a <strncmp>
 800273e:	b920      	cbnz	r0, 800274a <processGcode+0x32>
}
 8002740:	b020      	add	sp, #128	@ 0x80
 8002742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        stopProgramStorage();
 8002746:	f7ff bc6d 	b.w	8002024 <stopProgramStorage>
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 800274a:	220b      	movs	r2, #11
 800274c:	4620      	mov	r0, r4
 800274e:	49a2      	ldr	r1, [pc, #648]	@ (80029d8 <processGcode+0x2c0>)
 8002750:	f005 f803 	bl	800775a <strncmp>
 8002754:	b920      	cbnz	r0, 8002760 <processGcode+0x48>
}
 8002756:	b020      	add	sp, #128	@ 0x80
 8002758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runProgram();
 800275c:	f7ff bd58 	b.w	8002210 <runProgram>
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 8002760:	220d      	movs	r2, #13
 8002762:	4620      	mov	r0, r4
 8002764:	499d      	ldr	r1, [pc, #628]	@ (80029dc <processGcode+0x2c4>)
 8002766:	f004 fff8 	bl	800775a <strncmp>
 800276a:	b920      	cbnz	r0, 8002776 <processGcode+0x5e>
}
 800276c:	b020      	add	sp, #128	@ 0x80
 800276e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        clearProgram();
 8002772:	f7ff bd23 	b.w	80021bc <clearProgram>
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 8002776:	220d      	movs	r2, #13
 8002778:	4620      	mov	r0, r4
 800277a:	4999      	ldr	r1, [pc, #612]	@ (80029e0 <processGcode+0x2c8>)
 800277c:	f004 ffed 	bl	800775a <strncmp>
 8002780:	b920      	cbnz	r0, 800278c <processGcode+0x74>
}
 8002782:	b020      	add	sp, #128	@ 0x80
 8002784:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        pauseProgram();
 8002788:	f7ff bdf8 	b.w	800237c <pauseProgram>
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 800278c:	220c      	movs	r2, #12
 800278e:	4620      	mov	r0, r4
 8002790:	4994      	ldr	r1, [pc, #592]	@ (80029e4 <processGcode+0x2cc>)
 8002792:	f004 ffe2 	bl	800775a <strncmp>
 8002796:	b920      	cbnz	r0, 80027a2 <processGcode+0x8a>
}
 8002798:	b020      	add	sp, #128	@ 0x80
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runNextLine();
 800279e:	f7ff bd75 	b.w	800228c <runNextLine>
    else if (strncmp(command, "PROGRAM_STATUS", 14) == 0) {
 80027a2:	220e      	movs	r2, #14
 80027a4:	4620      	mov	r0, r4
 80027a6:	4990      	ldr	r1, [pc, #576]	@ (80029e8 <processGcode+0x2d0>)
 80027a8:	f004 ffd7 	bl	800775a <strncmp>
 80027ac:	b920      	cbnz	r0, 80027b8 <processGcode+0xa0>
}
 80027ae:	b020      	add	sp, #128	@ 0x80
 80027b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showProgramStatus();
 80027b4:	f7ff bf04 	b.w	80025c0 <showProgramStatus>
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 80027b8:	2204      	movs	r2, #4
 80027ba:	4620      	mov	r0, r4
 80027bc:	498b      	ldr	r1, [pc, #556]	@ (80029ec <processGcode+0x2d4>)
 80027be:	f004 ffcc 	bl	800775a <strncmp>
 80027c2:	b128      	cbz	r0, 80027d0 <processGcode+0xb8>
 80027c4:	2204      	movs	r2, #4
 80027c6:	4620      	mov	r0, r4
 80027c8:	4989      	ldr	r1, [pc, #548]	@ (80029f0 <processGcode+0x2d8>)
 80027ca:	f004 ffc6 	bl	800775a <strncmp>
 80027ce:	b920      	cbnz	r0, 80027da <processGcode+0xc2>
}
 80027d0:	b020      	add	sp, #128	@ 0x80
 80027d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showHelp();
 80027d6:	f7ff bdfb 	b.w	80023d0 <showHelp>
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 80027da:	220c      	movs	r2, #12
 80027dc:	4620      	mov	r0, r4
 80027de:	4985      	ldr	r1, [pc, #532]	@ (80029f4 <processGcode+0x2dc>)
 80027e0:	f004 ffbb 	bl	800775a <strncmp>
 80027e4:	b920      	cbnz	r0, 80027f0 <processGcode+0xd8>
}
 80027e6:	b020      	add	sp, #128	@ 0x80
 80027e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showQueueStatus();
 80027ec:	f7ff be8e 	b.w	800250c <showQueueStatus>
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80027f0:	2203      	movs	r2, #3
 80027f2:	4620      	mov	r0, r4
 80027f4:	4980      	ldr	r1, [pc, #512]	@ (80029f8 <processGcode+0x2e0>)
 80027f6:	f004 ffb0 	bl	800775a <strncmp>
    if (isStoringProgram) {
 80027fa:	4d80      	ldr	r5, [pc, #512]	@ (80029fc <processGcode+0x2e4>)
 80027fc:	782e      	ldrb	r6, [r5, #0]
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80027fe:	b130      	cbz	r0, 800280e <processGcode+0xf6>
 8002800:	2203      	movs	r2, #3
 8002802:	4620      	mov	r0, r4
 8002804:	497e      	ldr	r1, [pc, #504]	@ (8002a00 <processGcode+0x2e8>)
 8002806:	f004 ffa8 	bl	800775a <strncmp>
 800280a:	2800      	cmp	r0, #0
 800280c:	d179      	bne.n	8002902 <processGcode+0x1ea>
        if (isStoringProgram) {
 800280e:	2e00      	cmp	r6, #0
 8002810:	d196      	bne.n	8002740 <processGcode+0x28>
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 8002812:	2263      	movs	r2, #99	@ 0x63
 8002814:	4621      	mov	r1, r4
 8002816:	a807      	add	r0, sp, #28
 8002818:	f004 ffb1 	bl	800777e <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 800281c:	2300      	movs	r3, #0
    uint8_t status = gc_execute_line(line_copy);
 800281e:	a807      	add	r0, sp, #28
    line_copy[sizeof(line_copy) - 1] = '\0';
 8002820:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    uint8_t status = gc_execute_line(line_copy);
 8002824:	f7fe ffcc 	bl	80017c0 <gc_execute_line>
    if (status == STATUS_OK) {
 8002828:	4605      	mov	r5, r0
 800282a:	2800      	cmp	r0, #0
 800282c:	d165      	bne.n	80028fa <processGcode+0x1e2>
        if (strncmp(command, "M114", 4) == 0) {
 800282e:	2204      	movs	r2, #4
 8002830:	4620      	mov	r0, r4
 8002832:	4974      	ldr	r1, [pc, #464]	@ (8002a04 <processGcode+0x2ec>)
 8002834:	f004 ff91 	bl	800775a <strncmp>
 8002838:	2800      	cmp	r0, #0
 800283a:	d176      	bne.n	800292a <processGcode+0x212>
            float xPos = currentX / (float)STEPS_PER_MM_X;
 800283c:	4b72      	ldr	r3, [pc, #456]	@ (8002a08 <processGcode+0x2f0>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	f7fe fa4c 	bl	8000cdc <__aeabi_i2f>
 8002844:	4971      	ldr	r1, [pc, #452]	@ (8002a0c <processGcode+0x2f4>)
 8002846:	f7fe fb51 	bl	8000eec <__aeabi_fdiv>
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 800284a:	4b71      	ldr	r3, [pc, #452]	@ (8002a10 <processGcode+0x2f8>)
            float xPos = currentX / (float)STEPS_PER_MM_X;
 800284c:	4606      	mov	r6, r0
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f7fe fa44 	bl	8000cdc <__aeabi_i2f>
 8002854:	496d      	ldr	r1, [pc, #436]	@ (8002a0c <processGcode+0x2f4>)
 8002856:	f7fe fb49 	bl	8000eec <__aeabi_fdiv>
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 800285a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a14 <processGcode+0x2fc>)
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 800285c:	4680      	mov	r8, r0
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	f7fe fa3c 	bl	8000cdc <__aeabi_i2f>
 8002864:	496c      	ldr	r1, [pc, #432]	@ (8002a18 <processGcode+0x300>)
 8002866:	f7fe fb41 	bl	8000eec <__aeabi_fdiv>
 800286a:	4681      	mov	r9, r0
            int x_int = (int)xPos;
 800286c:	4630      	mov	r0, r6
 800286e:	f7fe fc65 	bl	800113c <__aeabi_f2iz>
 8002872:	4604      	mov	r4, r0
            int y_int = (int)yPos;
 8002874:	4640      	mov	r0, r8
 8002876:	f7fe fc61 	bl	800113c <__aeabi_f2iz>
 800287a:	4607      	mov	r7, r0
            int z_int = (int)zPos;
 800287c:	4648      	mov	r0, r9
 800287e:	f7fe fc5d 	bl	800113c <__aeabi_f2iz>
 8002882:	4682      	mov	sl, r0
            int z_dec = (int)((zPos - z_int) * 100);
 8002884:	f7fe fa2a 	bl	8000cdc <__aeabi_i2f>
 8002888:	4601      	mov	r1, r0
 800288a:	4648      	mov	r0, r9
 800288c:	f7fe f970 	bl	8000b70 <__aeabi_fsub>
 8002890:	4962      	ldr	r1, [pc, #392]	@ (8002a1c <processGcode+0x304>)
 8002892:	f7fe fa77 	bl	8000d84 <__aeabi_fmul>
 8002896:	f7fe fc51 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 800289a:	2800      	cmp	r0, #0
 800289c:	bfb8      	it	lt
 800289e:	4240      	neglt	r0, r0
 80028a0:	e9cd a003 	strd	sl, r0, [sp, #12]
            int y_dec = (int)((yPos - y_int) * 100);
 80028a4:	4638      	mov	r0, r7
 80028a6:	f7fe fa19 	bl	8000cdc <__aeabi_i2f>
 80028aa:	4601      	mov	r1, r0
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7fe f95f 	bl	8000b70 <__aeabi_fsub>
 80028b2:	495a      	ldr	r1, [pc, #360]	@ (8002a1c <processGcode+0x304>)
 80028b4:	f7fe fa66 	bl	8000d84 <__aeabi_fmul>
 80028b8:	f7fe fc40 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 80028bc:	2800      	cmp	r0, #0
 80028be:	bfb8      	it	lt
 80028c0:	4240      	neglt	r0, r0
 80028c2:	e9cd 7001 	strd	r7, r0, [sp, #4]
            int x_dec = (int)((xPos - x_int) * 100);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fa08 	bl	8000cdc <__aeabi_i2f>
 80028cc:	4601      	mov	r1, r0
 80028ce:	4630      	mov	r0, r6
 80028d0:	f7fe f94e 	bl	8000b70 <__aeabi_fsub>
 80028d4:	4951      	ldr	r1, [pc, #324]	@ (8002a1c <processGcode+0x304>)
 80028d6:	f7fe fa55 	bl	8000d84 <__aeabi_fmul>
 80028da:	f7fe fc2f 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 80028de:	2800      	cmp	r0, #0
 80028e0:	bfb8      	it	lt
 80028e2:	4240      	neglt	r0, r0
 80028e4:	9000      	str	r0, [sp, #0]
 80028e6:	4623      	mov	r3, r4
 80028e8:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80028ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002a20 <processGcode+0x308>)
 80028ee:	484d      	ldr	r0, [pc, #308]	@ (8002a24 <processGcode+0x30c>)
 80028f0:	f004 fe90 	bl	8007614 <sniprintf>
            sendUSBText(outputBuffer);
 80028f4:	484b      	ldr	r0, [pc, #300]	@ (8002a24 <processGcode+0x30c>)
 80028f6:	f7fe fff9 	bl	80018ec <sendUSBText>
    report_status_message(status);
 80028fa:	4628      	mov	r0, r5
 80028fc:	f7fe ff74 	bl	80017e8 <report_status_message>
 8002900:	e010      	b.n	8002924 <processGcode+0x20c>
    if (isStoringProgram) {
 8002902:	2e00      	cmp	r6, #0
 8002904:	d085      	beq.n	8002812 <processGcode+0xfa>
        if (addLineToProgram(command)) {
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff fbbe 	bl	8002088 <addLineToProgram>
 800290c:	b128      	cbz	r0, 800291a <processGcode+0x202>
            sendUSBText("ok\r\n");
 800290e:	4846      	ldr	r0, [pc, #280]	@ (8002a28 <processGcode+0x310>)
}
 8002910:	b020      	add	sp, #128	@ 0x80
 8002912:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            sendUSBText("ok\r\n");
 8002916:	f7fe bfe9 	b.w	80018ec <sendUSBText>
            isProgramLoaded = false;
 800291a:	4b44      	ldr	r3, [pc, #272]	@ (8002a2c <processGcode+0x314>)
            isStoringProgram = false;
 800291c:	7028      	strb	r0, [r5, #0]
            isProgramLoaded = false;
 800291e:	7018      	strb	r0, [r3, #0]
            programLineCount = 0;
 8002920:	4b43      	ldr	r3, [pc, #268]	@ (8002a30 <processGcode+0x318>)
 8002922:	6018      	str	r0, [r3, #0]
}
 8002924:	b020      	add	sp, #128	@ 0x80
 8002926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (strncmp(command, "M503", 4) == 0) {
 800292a:	2204      	movs	r2, #4
 800292c:	4620      	mov	r0, r4
 800292e:	4941      	ldr	r1, [pc, #260]	@ (8002a34 <processGcode+0x31c>)
 8002930:	f004 ff13 	bl	800775a <strncmp>
 8002934:	b910      	cbnz	r0, 800293c <processGcode+0x224>
            showConfiguration();
 8002936:	f7ff f88f 	bl	8001a58 <showConfiguration>
 800293a:	e7de      	b.n	80028fa <processGcode+0x1e2>
        } else if (strncmp(command, "M505", 4) == 0) {
 800293c:	2204      	movs	r2, #4
 800293e:	4620      	mov	r0, r4
 8002940:	493d      	ldr	r1, [pc, #244]	@ (8002a38 <processGcode+0x320>)
 8002942:	f004 ff0a 	bl	800775a <strncmp>
 8002946:	b910      	cbnz	r0, 800294e <processGcode+0x236>
            report_machine_limits();
 8002948:	f7fe fce8 	bl	800131c <report_machine_limits>
 800294c:	e7d5      	b.n	80028fa <processGcode+0x1e2>
        } else if (strncmp(command, "M119", 4) == 0) {
 800294e:	2204      	movs	r2, #4
 8002950:	4620      	mov	r0, r4
 8002952:	493a      	ldr	r1, [pc, #232]	@ (8002a3c <processGcode+0x324>)
 8002954:	f004 ff01 	bl	800775a <strncmp>
 8002958:	2800      	cmp	r0, #0
 800295a:	d1ce      	bne.n	80028fa <processGcode+0x1e2>
            sprintf(outputBuffer, "Estado fines de carrera:\r\n");
 800295c:	4938      	ldr	r1, [pc, #224]	@ (8002a40 <processGcode+0x328>)
 800295e:	4831      	ldr	r0, [pc, #196]	@ (8002a24 <processGcode+0x30c>)
 8002960:	f004 ff93 	bl	800788a <strcpy>
            sendUSBText(outputBuffer);
 8002964:	482f      	ldr	r0, [pc, #188]	@ (8002a24 <processGcode+0x30c>)
 8002966:	f7fe ffc1 	bl	80018ec <sendUSBText>
    switch(axis) {
 800296a:	f7fe ffb3 	bl	80018d4 <isEndstopPressed.part.0>
            sprintf(outputBuffer, "X_MIN: %s\r\n", isEndstopPressed('X') ? "PRESSED" : "open");
 800296e:	4e35      	ldr	r6, [pc, #212]	@ (8002a44 <processGcode+0x32c>)
 8002970:	4c35      	ldr	r4, [pc, #212]	@ (8002a48 <processGcode+0x330>)
 8002972:	4936      	ldr	r1, [pc, #216]	@ (8002a4c <processGcode+0x334>)
 8002974:	2800      	cmp	r0, #0
 8002976:	bf0c      	ite	eq
 8002978:	4632      	moveq	r2, r6
 800297a:	4622      	movne	r2, r4
 800297c:	4829      	ldr	r0, [pc, #164]	@ (8002a24 <processGcode+0x30c>)
 800297e:	f004 fe7f 	bl	8007680 <siprintf>
            sendUSBText(outputBuffer);
 8002982:	4828      	ldr	r0, [pc, #160]	@ (8002a24 <processGcode+0x30c>)
 8002984:	f7fe ffb2 	bl	80018ec <sendUSBText>
            sprintf(outputBuffer, "Y_MIN: %s\r\n", isEndstopPressed('Y') ? "PRESSED" : "open");
 8002988:	2059      	movs	r0, #89	@ 0x59
 800298a:	f7ff f995 	bl	8001cb8 <isEndstopPressed>
 800298e:	4930      	ldr	r1, [pc, #192]	@ (8002a50 <processGcode+0x338>)
 8002990:	2800      	cmp	r0, #0
 8002992:	bf0c      	ite	eq
 8002994:	4632      	moveq	r2, r6
 8002996:	4622      	movne	r2, r4
 8002998:	4822      	ldr	r0, [pc, #136]	@ (8002a24 <processGcode+0x30c>)
 800299a:	f004 fe71 	bl	8007680 <siprintf>
            sendUSBText(outputBuffer);
 800299e:	4821      	ldr	r0, [pc, #132]	@ (8002a24 <processGcode+0x30c>)
 80029a0:	f7fe ffa4 	bl	80018ec <sendUSBText>
            sprintf(outputBuffer, "Z_MIN: %s\r\n", isEndstopPressed('Z') ? "PRESSED" : "open");
 80029a4:	205a      	movs	r0, #90	@ 0x5a
 80029a6:	f7ff f987 	bl	8001cb8 <isEndstopPressed>
 80029aa:	492a      	ldr	r1, [pc, #168]	@ (8002a54 <processGcode+0x33c>)
 80029ac:	2800      	cmp	r0, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	4632      	moveq	r2, r6
 80029b2:	4622      	movne	r2, r4
 80029b4:	481b      	ldr	r0, [pc, #108]	@ (8002a24 <processGcode+0x30c>)
 80029b6:	f004 fe63 	bl	8007680 <siprintf>
            sendUSBText(outputBuffer);
 80029ba:	481a      	ldr	r0, [pc, #104]	@ (8002a24 <processGcode+0x30c>)
 80029bc:	f7fe ff96 	bl	80018ec <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 80029c0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80029c4:	4629      	mov	r1, r5
 80029c6:	4817      	ldr	r0, [pc, #92]	@ (8002a24 <processGcode+0x30c>)
 80029c8:	f004 febf 	bl	800774a <memset>
 80029cc:	e795      	b.n	80028fa <processGcode+0x1e2>
 80029ce:	bf00      	nop
 80029d0:	0800bee6 	.word	0x0800bee6
 80029d4:	0800bef4 	.word	0x0800bef4
 80029d8:	0800bf01 	.word	0x0800bf01
 80029dc:	0800bf0d 	.word	0x0800bf0d
 80029e0:	0800bf1b 	.word	0x0800bf1b
 80029e4:	0800bf29 	.word	0x0800bf29
 80029e8:	0800bf36 	.word	0x0800bf36
 80029ec:	0800bf45 	.word	0x0800bf45
 80029f0:	0800bf4a 	.word	0x0800bf4a
 80029f4:	0800bf4f 	.word	0x0800bf4f
 80029f8:	0800bf5c 	.word	0x0800bf5c
 80029fc:	2000039e 	.word	0x2000039e
 8002a00:	0800bf60 	.word	0x0800bf60
 8002a04:	0800bf64 	.word	0x0800bf64
 8002a08:	2000235c 	.word	0x2000235c
 8002a0c:	429e0000 	.word	0x429e0000
 8002a10:	20002358 	.word	0x20002358
 8002a14:	20002354 	.word	0x20002354
 8002a18:	4575a000 	.word	0x4575a000
 8002a1c:	42c80000 	.word	0x42c80000
 8002a20:	0800bf69 	.word	0x0800bf69
 8002a24:	20002360 	.word	0x20002360
 8002a28:	0800b14d 	.word	0x0800b14d
 8002a2c:	2000039d 	.word	0x2000039d
 8002a30:	200003a4 	.word	0x200003a4
 8002a34:	0800bf89 	.word	0x0800bf89
 8002a38:	0800bf8e 	.word	0x0800bf8e
 8002a3c:	0800bf93 	.word	0x0800bf93
 8002a40:	0800bf98 	.word	0x0800bf98
 8002a44:	0800bee1 	.word	0x0800bee1
 8002a48:	0800bed9 	.word	0x0800bed9
 8002a4c:	0800bfb3 	.word	0x0800bfb3
 8002a50:	0800bfbf 	.word	0x0800bfbf
 8002a54:	0800bfcb 	.word	0x0800bfcb

08002a58 <processProgram>:

/**
  * @brief  Procesa la ejecución del programa de manera no bloqueante
  * @retval None
  */
void processProgram(void) {
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	b094      	sub	sp, #80	@ 0x50
    static uint32_t lastProgramTime __attribute__((unused)) = 0;
    uint32_t currentTime = HAL_GetTick();
 8002a5c:	f000 feaa 	bl	80037b4 <HAL_GetTick>
    
    // Verificar si hay líneas pendientes y si el buffer tiene espacio
    if (currentExecutingLine >= programLineCount) {
 8002a60:	4c27      	ldr	r4, [pc, #156]	@ (8002b00 <processProgram+0xa8>)
 8002a62:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <processProgram+0xac>)
 8002a64:	6822      	ldr	r2, [r4, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	db11      	blt.n	8002a90 <processProgram+0x38>
        // Programa completado
       
            sprintf(outputBuffer, "Programa completado exitosamente\r\n");
 8002a6c:	4926      	ldr	r1, [pc, #152]	@ (8002b08 <processProgram+0xb0>)
 8002a6e:	4827      	ldr	r0, [pc, #156]	@ (8002b0c <processProgram+0xb4>)
 8002a70:	f004 ff0b 	bl	800788a <strcpy>
            sendUSBText(outputBuffer);
 8002a74:	4825      	ldr	r0, [pc, #148]	@ (8002b0c <processProgram+0xb4>)
 8002a76:	f7fe ff39 	bl	80018ec <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 8002a7a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4822      	ldr	r0, [pc, #136]	@ (8002b0c <processProgram+0xb4>)
 8002a82:	f004 fe62 	bl	800774a <memset>
            isProgramRunning = false;
 8002a86:	2200      	movs	r2, #0
 8002a88:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <processProgram+0xb8>)
 8002a8a:	701a      	strb	r2, [r3, #0]
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 8002a8c:	b014      	add	sp, #80	@ 0x50
 8002a8e:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002a90:	2650      	movs	r6, #80	@ 0x50
 8002a92:	4d20      	ldr	r5, [pc, #128]	@ (8002b14 <processProgram+0xbc>)
 8002a94:	4920      	ldr	r1, [pc, #128]	@ (8002b18 <processProgram+0xc0>)
 8002a96:	fb06 5302 	mla	r3, r6, r2, r5
 8002a9a:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <processProgram+0xb4>)
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	f004 fdef 	bl	8007680 <siprintf>
    sendUSBText(outputBuffer);
 8002aa2:	481a      	ldr	r0, [pc, #104]	@ (8002b0c <processProgram+0xb4>)
 8002aa4:	f7fe ff22 	bl	80018ec <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002aa8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002aac:	2100      	movs	r1, #0
 8002aae:	4817      	ldr	r0, [pc, #92]	@ (8002b0c <processProgram+0xb4>)
 8002ab0:	f004 fe4b 	bl	800774a <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	224f      	movs	r2, #79	@ 0x4f
 8002ab8:	fb06 5101 	mla	r1, r6, r1, r5
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002abc:	2600      	movs	r6, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002abe:	4668      	mov	r0, sp
 8002ac0:	f004 fe5d 	bl	800777e <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 8002ac4:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002ac6:	f88d 604f 	strb.w	r6, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 8002aca:	f7fe fe79 	bl	80017c0 <gc_execute_line>
 8002ace:	4605      	mov	r5, r0
    CDC_TxQueue_Process();
 8002ad0:	f003 fd06 	bl	80064e0 <CDC_TxQueue_Process>
        currentExecutingLine++;
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	3301      	adds	r3, #1
    if (status == STATUS_OK) {
 8002ad8:	b90d      	cbnz	r5, 8002ade <processProgram+0x86>
        currentExecutingLine++;
 8002ada:	6023      	str	r3, [r4, #0]
        lastProgramTime = currentTime;
 8002adc:	e7d6      	b.n	8002a8c <processProgram+0x34>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8002ade:	462a      	mov	r2, r5
 8002ae0:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <processProgram+0xc4>)
 8002ae2:	480a      	ldr	r0, [pc, #40]	@ (8002b0c <processProgram+0xb4>)
 8002ae4:	f004 fdcc 	bl	8007680 <siprintf>
        sendUSBText(outputBuffer);
 8002ae8:	4808      	ldr	r0, [pc, #32]	@ (8002b0c <processProgram+0xb4>)
 8002aea:	f7fe feff 	bl	80018ec <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002aee:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002af2:	4631      	mov	r1, r6
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <processProgram+0xb4>)
 8002af6:	f004 fe28 	bl	800774a <memset>
        isProgramRunning = false;
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <processProgram+0xb8>)
 8002afc:	701e      	strb	r6, [r3, #0]
 8002afe:	e7c5      	b.n	8002a8c <processProgram+0x34>
 8002b00:	200003a0 	.word	0x200003a0
 8002b04:	200003a4 	.word	0x200003a4
 8002b08:	0800bfd7 	.word	0x0800bfd7
 8002b0c:	20002360 	.word	0x20002360
 8002b10:	2000039c 	.word	0x2000039c
 8002b14:	200003a8 	.word	0x200003a8
 8002b18:	0800b901 	.word	0x0800b901
 8002b1c:	0800b91b 	.word	0x0800b91b

08002b20 <loop>:
    if (isProgramRunning) {
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <loop+0x54>)
void loop(void) {
 8002b22:	b570      	push	{r4, r5, r6, lr}
    if (isProgramRunning) {
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b10b      	cbz	r3, 8002b2c <loop+0xc>
        processProgram();
 8002b28:	f7ff ff96 	bl	8002a58 <processProgram>
    if (usbCommandComplete) {
 8002b2c:	4d12      	ldr	r5, [pc, #72]	@ (8002b78 <loop+0x58>)
 8002b2e:	782b      	ldrb	r3, [r5, #0]
 8002b30:	b173      	cbz	r3, 8002b50 <loop+0x30>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002b32:	2200      	movs	r2, #0
 8002b34:	4e11      	ldr	r6, [pc, #68]	@ (8002b7c <loop+0x5c>)
 8002b36:	4912      	ldr	r1, [pc, #72]	@ (8002b80 <loop+0x60>)
 8002b38:	6830      	ldr	r0, [r6, #0]
 8002b3a:	4c12      	ldr	r4, [pc, #72]	@ (8002b84 <loop+0x64>)
 8002b3c:	4282      	cmp	r2, r0
 8002b3e:	db08      	blt.n	8002b52 <loop+0x32>
        usbBufferIndex = 0;
 8002b40:	2400      	movs	r4, #0
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002b42:	2264      	movs	r2, #100	@ 0x64
 8002b44:	4621      	mov	r1, r4
 8002b46:	480e      	ldr	r0, [pc, #56]	@ (8002b80 <loop+0x60>)
        usbBufferIndex = 0;
 8002b48:	6034      	str	r4, [r6, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002b4a:	f004 fdfe 	bl	800774a <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8002b4e:	702c      	strb	r4, [r5, #0]
}
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8002b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b56:	3b09      	subs	r3, #9
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b17      	cmp	r3, #23
 8002b5c:	d805      	bhi.n	8002b6a <loop+0x4a>
 8002b5e:	fa24 f303 	lsr.w	r3, r4, r3
 8002b62:	07db      	lsls	r3, r3, #31
 8002b64:	d501      	bpl.n	8002b6a <loop+0x4a>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002b66:	3201      	adds	r2, #1
 8002b68:	e7e8      	b.n	8002b3c <loop+0x1c>
            processGcode(usbBuffer);
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <loop+0x60>)
 8002b6c:	f7ff fdd4 	bl	8002718 <processGcode>
 8002b70:	e7e6      	b.n	8002b40 <loop+0x20>
 8002b72:	bf00      	nop
 8002b74:	2000039c 	.word	0x2000039c
 8002b78:	200022e8 	.word	0x200022e8
 8002b7c:	200022ec 	.word	0x200022ec
 8002b80:	200022f0 	.word	0x200022f0
 8002b84:	00800013 	.word	0x00800013

08002b88 <endstop_error_handler>:
            break;
    }
}

void endstop_error_handler(char axis)
{
 8002b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b8a:	4605      	mov	r5, r0
    disableSteppers();
 8002b8c:	f000 fa0a 	bl	8002fa4 <disableSteppers>
    
    // Calcular posición actual en mm para el mensaje
    float current_pos_mm;
    switch(axis) {
 8002b90:	2d59      	cmp	r5, #89	@ 0x59
 8002b92:	d033      	beq.n	8002bfc <endstop_error_handler+0x74>
 8002b94:	2d5a      	cmp	r5, #90	@ 0x5a
 8002b96:	d033      	beq.n	8002c00 <endstop_error_handler+0x78>
 8002b98:	2d58      	cmp	r5, #88	@ 0x58
 8002b9a:	d137      	bne.n	8002c0c <endstop_error_handler+0x84>
        case 'X':
            current_pos_mm = currentX / (float)STEPS_PER_MM_X;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <endstop_error_handler+0x88>)
            break;
        case 'Y':
            current_pos_mm = currentY / (float)STEPS_PER_MM_Y;
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f7fe f89c 	bl	8000cdc <__aeabi_i2f>
 8002ba4:	491b      	ldr	r1, [pc, #108]	@ (8002c14 <endstop_error_handler+0x8c>)
            break;
        case 'Z':
            current_pos_mm = currentZ / (float)STEPS_PER_MM_Z;
 8002ba6:	f7fe f9a1 	bl	8000eec <__aeabi_fdiv>
 8002baa:	4604      	mov	r4, r0
        default:
            current_pos_mm = 0.0f;
    }
    
    // Convertir a enteros para evitar problemas con printf float
    int pos_int = (int)current_pos_mm;
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7fe fac5 	bl	800113c <__aeabi_f2iz>
 8002bb2:	4606      	mov	r6, r0
    int pos_dec = (int)((current_pos_mm - pos_int) * 100);
 8002bb4:	f7fe f892 	bl	8000cdc <__aeabi_i2f>
 8002bb8:	4601      	mov	r1, r0
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f7fd ffd8 	bl	8000b70 <__aeabi_fsub>
 8002bc0:	4915      	ldr	r1, [pc, #84]	@ (8002c18 <endstop_error_handler+0x90>)
 8002bc2:	f7fe f8df 	bl	8000d84 <__aeabi_fmul>
 8002bc6:	f7fe fab9 	bl	800113c <__aeabi_f2iz>
    
    sprintf(outputBuffer, "ERROR: Final de carrera %c activado en pos=%d.%02dmm (fuera de tolerancia)!\r\n", 
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	bfb8      	it	lt
 8002bce:	4240      	neglt	r0, r0
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	4633      	mov	r3, r6
 8002bd4:	4911      	ldr	r1, [pc, #68]	@ (8002c1c <endstop_error_handler+0x94>)
 8002bd6:	9000      	str	r0, [sp, #0]
 8002bd8:	4811      	ldr	r0, [pc, #68]	@ (8002c20 <endstop_error_handler+0x98>)
 8002bda:	f004 fd51 	bl	8007680 <siprintf>
            axis, pos_int, abs(pos_dec));
    CDC_Transmit_Queued((uint8_t*)outputBuffer, strlen(outputBuffer));
 8002bde:	4810      	ldr	r0, [pc, #64]	@ (8002c20 <endstop_error_handler+0x98>)
 8002be0:	f7fd fab6 	bl	8000150 <strlen>
 8002be4:	b281      	uxth	r1, r0
 8002be6:	480e      	ldr	r0, [pc, #56]	@ (8002c20 <endstop_error_handler+0x98>)
 8002be8:	f003 fcb0 	bl	800654c <CDC_Transmit_Queued>
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8002bec:	2201      	movs	r2, #1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <endstop_error_handler+0x9c>)
}
 8002bf2:	b002      	add	sp, #8
 8002bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8002bf8:	f000 bf44 	b.w	8003a84 <HAL_GPIO_WritePin>
            current_pos_mm = currentY / (float)STEPS_PER_MM_Y;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c28 <endstop_error_handler+0xa0>)
 8002bfe:	e7ce      	b.n	8002b9e <endstop_error_handler+0x16>
            current_pos_mm = currentZ / (float)STEPS_PER_MM_Z;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <endstop_error_handler+0xa4>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	f7fe f86a 	bl	8000cdc <__aeabi_i2f>
 8002c08:	4909      	ldr	r1, [pc, #36]	@ (8002c30 <endstop_error_handler+0xa8>)
 8002c0a:	e7cc      	b.n	8002ba6 <endstop_error_handler+0x1e>
    switch(axis) {
 8002c0c:	2400      	movs	r4, #0
 8002c0e:	e7cd      	b.n	8002bac <endstop_error_handler+0x24>
 8002c10:	2000235c 	.word	0x2000235c
 8002c14:	429e0000 	.word	0x429e0000
 8002c18:	42c80000 	.word	0x42c80000
 8002c1c:	0800bffa 	.word	0x0800bffa
 8002c20:	20002360 	.word	0x20002360
 8002c24:	40010c00 	.word	0x40010c00
 8002c28:	20002358 	.word	0x20002358
 8002c2c:	20002354 	.word	0x20002354
 8002c30:	4575a000 	.word	0x4575a000

08002c34 <HAL_GPIO_EXTI_Callback>:
{
 8002c34:	b510      	push	{r4, lr}
 8002c36:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 8002c38:	f000 fdbc 	bl	80037b4 <HAL_GetTick>
    if (currentTime - lastInterruptTime < 50) return;
 8002c3c:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <HAL_GPIO_EXTI_Callback+0x58>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	1ac3      	subs	r3, r0, r3
 8002c42:	2b31      	cmp	r3, #49	@ 0x31
 8002c44:	d920      	bls.n	8002c88 <HAL_GPIO_EXTI_Callback+0x54>
    switch(GPIO_Pin) {
 8002c46:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
    lastInterruptTime = currentTime;
 8002c4a:	6010      	str	r0, [r2, #0]
    switch(GPIO_Pin) {
 8002c4c:	d00e      	beq.n	8002c6c <HAL_GPIO_EXTI_Callback+0x38>
 8002c4e:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8002c52:	d011      	beq.n	8002c78 <HAL_GPIO_EXTI_Callback+0x44>
 8002c54:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8002c58:	d116      	bne.n	8002c88 <HAL_GPIO_EXTI_Callback+0x54>
            if (currentX > TOLERANCE_X) {
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c60:	dd12      	ble.n	8002c88 <HAL_GPIO_EXTI_Callback+0x54>
                endstop_error_handler('X');
 8002c62:	2058      	movs	r0, #88	@ 0x58
}
 8002c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                endstop_error_handler('Z');
 8002c68:	f7ff bf8e 	b.w	8002b88 <endstop_error_handler>
            if (currentY > TOLERANCE_Y) {
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_GPIO_EXTI_Callback+0x60>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c72:	dd09      	ble.n	8002c88 <HAL_GPIO_EXTI_Callback+0x54>
                endstop_error_handler('Y');
 8002c74:	2059      	movs	r0, #89	@ 0x59
 8002c76:	e7f5      	b.n	8002c64 <HAL_GPIO_EXTI_Callback+0x30>
            if (currentZ > TOLERANCE_Z) {
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_GPIO_EXTI_Callback+0x64>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f640 735a 	movw	r3, #3930	@ 0xf5a
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dd01      	ble.n	8002c88 <HAL_GPIO_EXTI_Callback+0x54>
                endstop_error_handler('Z');
 8002c84:	205a      	movs	r0, #90	@ 0x5a
 8002c86:	e7ed      	b.n	8002c64 <HAL_GPIO_EXTI_Callback+0x30>
}
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000398 	.word	0x20000398
 8002c90:	2000235c 	.word	0x2000235c
 8002c94:	20002358 	.word	0x20002358
 8002c98:	20002354 	.word	0x20002354

08002c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c9c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c9e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
    // Detener todos los motores de forma segura
  disableSteppers();
 8002ca0:	f000 f980 	bl	8002fa4 <disableSteppers>
  
  // Enviar mensaje de error por USB CDC
  CDC_Transmit_Queued((uint8_t*)"ERROR CRITICO DEL SISTEMA\r\n", 27);
 8002ca4:	211b      	movs	r1, #27
 8002ca6:	4809      	ldr	r0, [pc, #36]	@ (8002ccc <Error_Handler+0x30>)
 8002ca8:	f003 fc50 	bl	800654c <CDC_Transmit_Queued>
  
  // LED de error
  HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	4808      	ldr	r0, [pc, #32]	@ (8002cd0 <Error_Handler+0x34>)
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	f000 fee7 	bl	8003a84 <HAL_GPIO_WritePin>
  while (1)
  {
        // Parpadear LED de error
    HAL_GPIO_TogglePin(GPIOB, LED_ERROR);
 8002cb6:	4c06      	ldr	r4, [pc, #24]	@ (8002cd0 <Error_Handler+0x34>)
 8002cb8:	4620      	mov	r0, r4
 8002cba:	2101      	movs	r1, #1
 8002cbc:	f000 fee7 	bl	8003a8e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8002cc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cc4:	f000 fd7c 	bl	80037c0 <HAL_Delay>
  while (1)
 8002cc8:	e7f6      	b.n	8002cb8 <Error_Handler+0x1c>
 8002cca:	bf00      	nop
 8002ccc:	0800c048 	.word	0x0800c048
 8002cd0:	40010c00 	.word	0x40010c00

08002cd4 <SystemClock_Config>:
{
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd8:	2214      	movs	r2, #20
 8002cda:	2100      	movs	r1, #0
 8002cdc:	a80c      	add	r0, sp, #48	@ 0x30
 8002cde:	f004 fd34 	bl	800774a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	eb0d 0002 	add.w	r0, sp, r2
 8002cec:	f004 fd2d 	bl	800774a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	a801      	add	r0, sp, #4
 8002cf6:	f004 fd28 	bl	800774a <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cfa:	2401      	movs	r4, #1
 8002cfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d00:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d02:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d06:	e9cd 6311 	strd	r6, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002d0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d0e:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d10:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002d12:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d14:	f001 fd74 	bl	8004800 <HAL_RCC_OscConfig>
 8002d18:	b108      	cbz	r0, 8002d1e <SystemClock_Config+0x4a>
    Error_Handler();
 8002d1a:	f7ff ffbf 	bl	8002c9c <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d20:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d28:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d2a:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d2e:	4621      	mov	r1, r4
 8002d30:	a805      	add	r0, sp, #20
 8002d32:	f001 ff27 	bl	8004b84 <HAL_RCC_ClockConfig>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d1ef      	bne.n	8002d1a <SystemClock_Config+0x46>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002d3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d3e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d40:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002d42:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d44:	f001 ffda 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d1e6      	bne.n	8002d1a <SystemClock_Config+0x46>
}
 8002d4c:	b014      	add	sp, #80	@ 0x50
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}

08002d50 <main>:
{
 8002d50:	b500      	push	{lr}
 8002d52:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8002d54:	f000 fd10 	bl	8003778 <HAL_Init>
  SystemClock_Config();
 8002d58:	f7ff ffbc 	bl	8002cd4 <SystemClock_Config>
    CDC_TxQueue_Init();
 8002d5c:	f003 fb80 	bl	8006460 <CDC_TxQueue_Init>
    setup();
 8002d60:	f7fe fdce 	bl	8001900 <setup>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);  // Encender
 8002d64:	2201      	movs	r2, #1
 8002d66:	2102      	movs	r1, #2
 8002d68:	483b      	ldr	r0, [pc, #236]	@ (8002e58 <main+0x108>)
 8002d6a:	f000 fe8b 	bl	8003a84 <HAL_GPIO_WritePin>
    CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14); 
 8002d6e:	210e      	movs	r1, #14
 8002d70:	483a      	ldr	r0, [pc, #232]	@ (8002e5c <main+0x10c>)
 8002d72:	f003 fbeb 	bl	800654c <CDC_Transmit_Queued>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d76:	2210      	movs	r2, #16
 8002d78:	2100      	movs	r1, #0
 8002d7a:	eb0d 0002 	add.w	r0, sp, r2
 8002d7e:	f004 fce4 	bl	800774a <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <main+0x110>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002d84:	f240 31db 	movw	r1, #987	@ 0x3db
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d88:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002d8a:	4833      	ldr	r0, [pc, #204]	@ (8002e58 <main+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8c:	f042 0220 	orr.w	r2, r2, #32
 8002d90:	619a      	str	r2, [r3, #24]
 8002d92:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d96:	f002 0220 	and.w	r2, r2, #32
 8002d9a:	9201      	str	r2, [sp, #4]
 8002d9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	f042 0204 	orr.w	r2, r2, #4
 8002da6:	619a      	str	r2, [r3, #24]
 8002da8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dac:	f002 0204 	and.w	r2, r2, #4
 8002db0:	9202      	str	r2, [sp, #8]
 8002db2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	f042 0208 	orr.w	r2, r2, #8
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002dbe:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	9303      	str	r3, [sp, #12]
 8002dc6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002dc8:	f000 fe5c 	bl	8003a84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002dd2:	4824      	ldr	r0, [pc, #144]	@ (8002e64 <main+0x114>)
 8002dd4:	f000 fe56 	bl	8003a84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd8:	f240 33db 	movw	r3, #987	@ 0x3db
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	481e      	ldr	r0, [pc, #120]	@ (8002e58 <main+0x108>)
 8002dde:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de0:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de8:	f000 fd72 	bl	80038d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dec:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <main+0x118>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	4819      	ldr	r0, [pc, #100]	@ (8002e58 <main+0x108>)
 8002df4:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dfa:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfc:	f000 fd68 	bl	80038d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002e00:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e04:	4817      	ldr	r0, [pc, #92]	@ (8002e64 <main+0x114>)
 8002e06:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f000 fd5e 	bl	80038d0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e14:	4621      	mov	r1, r4
 8002e16:	4622      	mov	r2, r4
 8002e18:	2028      	movs	r0, #40	@ 0x28
 8002e1a:	f000 fcf5 	bl	8003808 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e1e:	2028      	movs	r0, #40	@ 0x28
 8002e20:	f000 fd22 	bl	8003868 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 9600;
 8002e24:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart2.Instance = USART2;
 8002e28:	4810      	ldr	r0, [pc, #64]	@ (8002e6c <main+0x11c>)
  huart2.Init.BaudRate = 9600;
 8002e2a:	4911      	ldr	r1, [pc, #68]	@ (8002e70 <main+0x120>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e2c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8002e30:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e34:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e36:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e38:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e3e:	f002 f811 	bl	8004e64 <HAL_UART_Init>
 8002e42:	b108      	cbz	r0, 8002e48 <main+0xf8>
    Error_Handler();
 8002e44:	f7ff ff2a 	bl	8002c9c <Error_Handler>
  MX_USB_DEVICE_Init();
 8002e48:	f003 fa86 	bl	8006358 <MX_USB_DEVICE_Init>
    CDC_TxQueue_Process();
 8002e4c:	f003 fb48 	bl	80064e0 <CDC_TxQueue_Process>
    loop();
 8002e50:	f7ff fe66 	bl	8002b20 <loop>
  while (1)
 8002e54:	e7fa      	b.n	8002e4c <main+0xfc>
 8002e56:	bf00      	nop
 8002e58:	40010c00 	.word	0x40010c00
 8002e5c:	0800c064 	.word	0x0800c064
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40010800 	.word	0x40010800
 8002e68:	10110000 	.word	0x10110000
 8002e6c:	20002718 	.word	0x20002718
 8002e70:	40004400 	.word	0x40004400

08002e74 <delay_us>:
  * @brief  Función de delay de microsegundos usando DWT
  * @param  us: Cantidad de microsegundos a esperar
  * @retval None
  */
void delay_us(uint32_t us) {
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <delay_us+0x1c>)
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <delay_us+0x20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
    uint32_t start = DWT->CYCCNT;
 8002e7a:	4907      	ldr	r1, [pc, #28]	@ (8002e98 <delay_us+0x24>)
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e80:	4343      	muls	r3, r0
    uint32_t start = DWT->CYCCNT;
 8002e82:	6848      	ldr	r0, [r1, #4]
    while ((DWT->CYCCNT - start) < cycles);
 8002e84:	684a      	ldr	r2, [r1, #4]
 8002e86:	1a12      	subs	r2, r2, r0
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3fb      	bcc.n	8002e84 <delay_us+0x10>
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	000f4240 	.word	0x000f4240
 8002e98:	e0001000 	.word	0xe0001000

08002e9c <calculateStepDelay>:
  * @param  feedRate_mm_min: Velocidad en mm/min (G0/G1)
  * @param  total_distance_mm: Distancia del segmento en mm
  * @param  maxSteps: Máximo de pasos entre ejes (Bresenham base)
  * @retval Delay en microsegundos entre ticks
  */
uint32_t calculateStepDelay(float feedRate_mm_min, float total_distance_mm, int32_t maxSteps) {
 8002e9c:	b570      	push	{r4, r5, r6, lr}
 8002e9e:	460d      	mov	r5, r1
    if (feedRate_mm_min <= 0.0f || total_distance_mm <= 0.0f || maxSteps <= 0) {
 8002ea0:	2100      	movs	r1, #0
uint32_t calculateStepDelay(float feedRate_mm_min, float total_distance_mm, int32_t maxSteps) {
 8002ea2:	4606      	mov	r6, r0
 8002ea4:	4614      	mov	r4, r2
    if (feedRate_mm_min <= 0.0f || total_distance_mm <= 0.0f || maxSteps <= 0) {
 8002ea6:	f7fe f915 	bl	80010d4 <__aeabi_fcmple>
 8002eaa:	b9d8      	cbnz	r0, 8002ee4 <calculateStepDelay+0x48>
 8002eac:	2100      	movs	r1, #0
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f7fe f910 	bl	80010d4 <__aeabi_fcmple>
 8002eb4:	b9b0      	cbnz	r0, 8002ee4 <calculateStepDelay+0x48>
 8002eb6:	2c00      	cmp	r4, #0
 8002eb8:	dd14      	ble.n	8002ee4 <calculateStepDelay+0x48>

    // mm/min -> mm/s
    float v_mm_s = feedRate_mm_min;

    // Tiempo total para recorrer el segmento a ese feed
    float total_time_s = total_distance_mm / v_mm_s;   // s
 8002eba:	4631      	mov	r1, r6
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7fe f815 	bl	8000eec <__aeabi_fdiv>
 8002ec2:	4605      	mov	r5, r0

    // Tiempo entre "ticks" (cada tick puede disparar 0..3 pasos según Bresenham)
    float t_step_s = total_time_s / (float)maxSteps;   // s/tick
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f7fd ff09 	bl	8000cdc <__aeabi_i2f>
 8002eca:	4601      	mov	r1, r0
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7fe f80d 	bl	8000eec <__aeabi_fdiv>

    // Convertir a microsegundos
    uint32_t delay_us = (uint32_t)(t_step_s * 1000000.0f);
 8002ed2:	4906      	ldr	r1, [pc, #24]	@ (8002eec <calculateStepDelay+0x50>)
 8002ed4:	f7fd ff56 	bl	8000d84 <__aeabi_fmul>
 8002ed8:	f7fe f956 	bl	8001188 <__aeabi_f2uiz>

    // Limitar si querés un mínimo por hardware/temporizador
    if (delay_us < 200) delay_us = 200;
 8002edc:	28c8      	cmp	r0, #200	@ 0xc8
 8002ede:	bf38      	it	cc
 8002ee0:	20c8      	movcc	r0, #200	@ 0xc8

    return delay_us;
}
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
        return STEP_DELAY_US;  // fallback
 8002ee4:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002ee8:	e7fb      	b.n	8002ee2 <calculateStepDelay+0x46>
 8002eea:	bf00      	nop
 8002eec:	49742400 	.word	0x49742400

08002ef0 <X_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje X
  * @retval None
  */
void X_stepOnce(void) {
 8002ef0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8002ef2:	4c08      	ldr	r4, [pc, #32]	@ (8002f14 <X_stepOnce+0x24>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2140      	movs	r1, #64	@ 0x40
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f000 fdc3 	bl	8003a84 <HAL_GPIO_WritePin>
    delay_us(2);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7ff ffb8 	bl	8002e74 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002f04:	4620      	mov	r0, r4
}
 8002f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2140      	movs	r1, #64	@ 0x40
 8002f0e:	f000 bdb9 	b.w	8003a84 <HAL_GPIO_WritePin>
 8002f12:	bf00      	nop
 8002f14:	40010c00 	.word	0x40010c00

08002f18 <Y_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Y
  * @retval None
  */
void Y_stepOnce(void) {
 8002f18:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8002f1a:	4c09      	ldr	r4, [pc, #36]	@ (8002f40 <Y_stepOnce+0x28>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f22:	4620      	mov	r0, r4
 8002f24:	f000 fdae 	bl	8003a84 <HAL_GPIO_WritePin>
    delay_us(2);
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f7ff ffa3 	bl	8002e74 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002f2e:	4620      	mov	r0, r4
}
 8002f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f3a:	f000 bda3 	b.w	8003a84 <HAL_GPIO_WritePin>
 8002f3e:	bf00      	nop
 8002f40:	40010c00 	.word	0x40010c00

08002f44 <Z_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Z
  * @retval None
  */
void Z_stepOnce(void) {
 8002f44:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8002f46:	4c09      	ldr	r4, [pc, #36]	@ (8002f6c <Z_stepOnce+0x28>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f000 fd98 	bl	8003a84 <HAL_GPIO_WritePin>
    delay_us(2);
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff ff8d 	bl	8002e74 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8002f5a:	4620      	mov	r0, r4
}
 8002f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8002f60:	2200      	movs	r2, #0
 8002f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f66:	f000 bd8d 	b.w	8003a84 <HAL_GPIO_WritePin>
 8002f6a:	bf00      	nop
 8002f6c:	40010800 	.word	0x40010800

08002f70 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 8002f70:	b510      	push	{r4, lr}
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 8002f72:	4c0a      	ldr	r4, [pc, #40]	@ (8002f9c <enableSteppers+0x2c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	4620      	mov	r0, r4
 8002f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002f7c:	f000 fd82 	bl	8003a84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 8002f80:	4620      	mov	r0, r4
 8002f82:	2200      	movs	r2, #0
 8002f84:	2110      	movs	r1, #16
 8002f86:	f000 fd7d 	bl	8003a84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
}
 8002f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f94:	4802      	ldr	r0, [pc, #8]	@ (8002fa0 <enableSteppers+0x30>)
 8002f96:	f000 bd75 	b.w	8003a84 <HAL_GPIO_WritePin>
 8002f9a:	bf00      	nop
 8002f9c:	40010c00 	.word	0x40010c00
 8002fa0:	40010800 	.word	0x40010800

08002fa4 <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 8002fa4:	b510      	push	{r4, lr}
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 8002fa6:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd0 <disableSteppers+0x2c>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4620      	mov	r0, r4
 8002fac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fb0:	f000 fd68 	bl	8003a84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2110      	movs	r1, #16
 8002fba:	f000 fd63 	bl	8003a84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
}
 8002fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002fc8:	4802      	ldr	r0, [pc, #8]	@ (8002fd4 <disableSteppers+0x30>)
 8002fca:	f000 bd5b 	b.w	8003a84 <HAL_GPIO_WritePin>
 8002fce:	bf00      	nop
 8002fd0:	40010c00 	.word	0x40010c00
 8002fd4:	40010800 	.word	0x40010800

08002fd8 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	469b      	mov	fp, r3
 8002fe0:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8002fe4:	460f      	mov	r7, r1
 8002fe6:	9305      	str	r3, [sp, #20]
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8003224 <moveAxesWithFeedRate+0x24c>)
 8002fea:	4601      	mov	r1, r0
 8002fec:	681b      	ldr	r3, [r3, #0]
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002fee:	4680      	mov	r8, r0
 8002ff0:	4614      	mov	r4, r2
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	f7fe f88c 	bl	8001110 <__aeabi_fcmpun>
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	f040 8101 	bne.w	8003200 <moveAxesWithFeedRate+0x228>
 8002ffe:	498a      	ldr	r1, [pc, #552]	@ (8003228 <moveAxesWithFeedRate+0x250>)
 8003000:	4640      	mov	r0, r8
 8003002:	f7fd febf 	bl	8000d84 <__aeabi_fmul>
 8003006:	f7fe f899 	bl	800113c <__aeabi_f2iz>
 800300a:	9000      	str	r0, [sp, #0]
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 800300c:	4b87      	ldr	r3, [pc, #540]	@ (800322c <moveAxesWithFeedRate+0x254>)
 800300e:	4639      	mov	r1, r7
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4638      	mov	r0, r7
 8003014:	9303      	str	r3, [sp, #12]
 8003016:	f7fe f87b 	bl	8001110 <__aeabi_fcmpun>
 800301a:	2800      	cmp	r0, #0
 800301c:	f040 80f3 	bne.w	8003206 <moveAxesWithFeedRate+0x22e>
 8003020:	4981      	ldr	r1, [pc, #516]	@ (8003228 <moveAxesWithFeedRate+0x250>)
 8003022:	4638      	mov	r0, r7
 8003024:	f7fd feae 	bl	8000d84 <__aeabi_fmul>
 8003028:	f7fe f888 	bl	800113c <__aeabi_f2iz>
 800302c:	9001      	str	r0, [sp, #4]
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 800302e:	4b80      	ldr	r3, [pc, #512]	@ (8003230 <moveAxesWithFeedRate+0x258>)
 8003030:	4621      	mov	r1, r4
 8003032:	4620      	mov	r0, r4
 8003034:	f8d3 9000 	ldr.w	r9, [r3]
 8003038:	f7fe f86a 	bl	8001110 <__aeabi_fcmpun>
 800303c:	2800      	cmp	r0, #0
 800303e:	f040 80e5 	bne.w	800320c <moveAxesWithFeedRate+0x234>
 8003042:	497c      	ldr	r1, [pc, #496]	@ (8003234 <moveAxesWithFeedRate+0x25c>)
 8003044:	4620      	mov	r0, r4
 8003046:	f7fd fe9d 	bl	8000d84 <__aeabi_fmul>
 800304a:	f7fe f877 	bl	800113c <__aeabi_f2iz>
 800304e:	9002      	str	r0, [sp, #8]
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 8003050:	9b00      	ldr	r3, [sp, #0]
 8003052:	9a04      	ldr	r2, [sp, #16]
    int32_t deltaY = targetY - currentY;
    int32_t deltaZ = targetZ - currentZ;
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003054:	4641      	mov	r1, r8
    int32_t deltaX = targetX - currentX;
 8003056:	1a9d      	subs	r5, r3, r2
    int32_t deltaY = targetY - currentY;
 8003058:	9b01      	ldr	r3, [sp, #4]
 800305a:	9a03      	ldr	r2, [sp, #12]
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 800305c:	4640      	mov	r0, r8
    int32_t deltaY = targetY - currentY;
 800305e:	1a9e      	subs	r6, r3, r2
    int32_t deltaZ = targetZ - currentZ;
 8003060:	9b02      	ldr	r3, [sp, #8]
 8003062:	eba3 0a09 	sub.w	sl, r3, r9
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003066:	f7fe f853 	bl	8001110 <__aeabi_fcmpun>
 800306a:	2800      	cmp	r0, #0
 800306c:	f040 80d1 	bne.w	8003212 <moveAxesWithFeedRate+0x23a>
 8003070:	9804      	ldr	r0, [sp, #16]
 8003072:	f7fd fe33 	bl	8000cdc <__aeabi_i2f>
 8003076:	496c      	ldr	r1, [pc, #432]	@ (8003228 <moveAxesWithFeedRate+0x250>)
 8003078:	f7fd ff38 	bl	8000eec <__aeabi_fdiv>
 800307c:	4601      	mov	r1, r0
 800307e:	4640      	mov	r0, r8
 8003080:	f7fd fd76 	bl	8000b70 <__aeabi_fsub>
 8003084:	4680      	mov	r8, r0
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8003086:	4639      	mov	r1, r7
 8003088:	4638      	mov	r0, r7
 800308a:	f7fe f841 	bl	8001110 <__aeabi_fcmpun>
 800308e:	2800      	cmp	r0, #0
 8003090:	f040 80c2 	bne.w	8003218 <moveAxesWithFeedRate+0x240>
 8003094:	9803      	ldr	r0, [sp, #12]
 8003096:	f7fd fe21 	bl	8000cdc <__aeabi_i2f>
 800309a:	4963      	ldr	r1, [pc, #396]	@ (8003228 <moveAxesWithFeedRate+0x250>)
 800309c:	f7fd ff26 	bl	8000eec <__aeabi_fdiv>
 80030a0:	4601      	mov	r1, r0
 80030a2:	4638      	mov	r0, r7
 80030a4:	f7fd fd64 	bl	8000b70 <__aeabi_fsub>
 80030a8:	4607      	mov	r7, r0
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 80030aa:	4621      	mov	r1, r4
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7fe f82f 	bl	8001110 <__aeabi_fcmpun>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	f040 80b2 	bne.w	800321c <moveAxesWithFeedRate+0x244>
 80030b8:	4648      	mov	r0, r9
 80030ba:	f7fd fe0f 	bl	8000cdc <__aeabi_i2f>
 80030be:	495d      	ldr	r1, [pc, #372]	@ (8003234 <moveAxesWithFeedRate+0x25c>)
 80030c0:	f7fd ff14 	bl	8000eec <__aeabi_fdiv>
 80030c4:	4601      	mov	r1, r0
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7fd fd52 	bl	8000b70 <__aeabi_fsub>
 80030cc:	4681      	mov	r9, r0
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 80030ce:	4641      	mov	r1, r8
 80030d0:	4640      	mov	r0, r8
 80030d2:	f7fd fe57 	bl	8000d84 <__aeabi_fmul>
 80030d6:	4639      	mov	r1, r7
 80030d8:	4604      	mov	r4, r0
 80030da:	4638      	mov	r0, r7
 80030dc:	f7fd fe52 	bl	8000d84 <__aeabi_fmul>
 80030e0:	4601      	mov	r1, r0
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7fd fd46 	bl	8000b74 <__addsf3>
 80030e8:	4649      	mov	r1, r9
 80030ea:	4604      	mov	r4, r0
 80030ec:	4648      	mov	r0, r9
 80030ee:	f7fd fe49 	bl	8000d84 <__aeabi_fmul>
 80030f2:	4601      	mov	r1, r0
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7fd fd3d 	bl	8000b74 <__addsf3>
 80030fa:	f7fd f995 	bl	8000428 <__aeabi_f2d>
 80030fe:	f006 fbbd 	bl	800987c <sqrt>
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8003102:	9b05      	ldr	r3, [sp, #20]
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8003104:	4680      	mov	r8, r0
 8003106:	4689      	mov	r9, r1
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8003108:	b113      	cbz	r3, 8003110 <moveAxesWithFeedRate+0x138>
 800310a:	4b4b      	ldr	r3, [pc, #300]	@ (8003238 <moveAxesWithFeedRate+0x260>)
 800310c:	f8d3 b000 	ldr.w	fp, [r3]
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 8003110:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <moveAxesWithFeedRate+0x264>)
 8003112:	4659      	mov	r1, fp
 8003114:	681f      	ldr	r7, [r3, #0]
 8003116:	4638      	mov	r0, r7
 8003118:	f7fd ffd2 	bl	80010c0 <__aeabi_fcmplt>
 800311c:	b900      	cbnz	r0, 8003120 <moveAxesWithFeedRate+0x148>
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 800311e:	465f      	mov	r7, fp
    bool dirX = (deltaX >= 0);
    bool dirY = (deltaY >= 0);
    bool dirZ = (deltaZ >= 0);
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003120:	b12d      	cbz	r5, 800312e <moveAxesWithFeedRate+0x156>
 8003122:	43ea      	mvns	r2, r5
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	4846      	ldr	r0, [pc, #280]	@ (8003240 <moveAxesWithFeedRate+0x268>)
 8003128:	0fd2      	lsrs	r2, r2, #31
 800312a:	f000 fcab 	bl	8003a84 <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800312e:	b12e      	cbz	r6, 800313c <moveAxesWithFeedRate+0x164>
 8003130:	43f2      	mvns	r2, r6
 8003132:	2108      	movs	r1, #8
 8003134:	4842      	ldr	r0, [pc, #264]	@ (8003240 <moveAxesWithFeedRate+0x268>)
 8003136:	0fd2      	lsrs	r2, r2, #31
 8003138:	f000 fca4 	bl	8003a84 <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800313c:	f1ba 0f00 	cmp.w	sl, #0
 8003140:	d006      	beq.n	8003150 <moveAxesWithFeedRate+0x178>
 8003142:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003146:	483f      	ldr	r0, [pc, #252]	@ (8003244 <moveAxesWithFeedRate+0x26c>)
 8003148:	ea4f 72da 	mov.w	r2, sl, lsr #31
 800314c:	f000 fc9a 	bl	8003a84 <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = (deltaX < 0) ? -deltaX : deltaX;
 8003150:	2d00      	cmp	r5, #0
 8003152:	bfb8      	it	lt
 8003154:	426d      	neglt	r5, r5
    deltaY = (deltaY < 0) ? -deltaY : deltaY;
 8003156:	2e00      	cmp	r6, #0
 8003158:	bfb8      	it	lt
 800315a:	4276      	neglt	r6, r6
    deltaZ = (deltaZ < 0) ? -deltaZ : deltaZ;
 800315c:	f1ba 0f00 	cmp.w	sl, #0
 8003160:	bfb8      	it	lt
 8003162:	f1ca 0a00 	rsblt	sl, sl, #0

        // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
    if (deltaY > maxSteps) maxSteps = deltaY;
 8003166:	42b5      	cmp	r5, r6
 8003168:	462c      	mov	r4, r5
 800316a:	bfb8      	it	lt
 800316c:	4634      	movlt	r4, r6
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 800316e:	4554      	cmp	r4, sl
 8003170:	bfb8      	it	lt
 8003172:	4654      	movlt	r4, sl
    
    if (maxSteps == 0) return; // No hay movimiento
 8003174:	2c00      	cmp	r4, #0
 8003176:	d040      	beq.n	80031fa <moveAxesWithFeedRate+0x222>
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8003178:	4649      	mov	r1, r9
 800317a:	4640      	mov	r0, r8
 800317c:	f7fd fca4 	bl	8000ac8 <__aeabi_d2f>
    
    // Calcular delay basado en feed rate
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance, maxSteps);
 8003180:	4622      	mov	r2, r4
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8003182:	4601      	mov	r1, r0
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance, maxSteps);
 8003184:	4638      	mov	r0, r7
    // sendUSBText(outputBuffer);
    // memset(outputBuffer, 0, OUTPUT_BUFFER_SIZE);
    
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 8003186:	ea4f 0b64 	mov.w	fp, r4, asr #1
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance, maxSteps);
 800318a:	f7ff fe87 	bl	8002e9c <calculateStepDelay>
    int32_t errorY = maxSteps / 2;
    int32_t errorZ = maxSteps / 2;
 800318e:	46d8      	mov	r8, fp
    int32_t errorY = maxSteps / 2;
 8003190:	465f      	mov	r7, fp
    
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 8003192:	f04f 0900 	mov.w	r9, #0
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance, maxSteps);
 8003196:	9004      	str	r0, [sp, #16]
    bool stepX = false, stepY = false, stepZ = false;

    errorX += deltaX; if (errorX >= maxSteps) { errorX -= maxSteps; stepX = true; }
 8003198:	44ab      	add	fp, r5
 800319a:	455c      	cmp	r4, fp
    errorY += deltaY; if (errorY >= maxSteps) { errorY -= maxSteps; stepY = true; }
 800319c:	4437      	add	r7, r6
    errorZ += deltaZ; if (errorZ >= maxSteps) { errorZ -= maxSteps; stepZ = true; }
 800319e:	44d0      	add	r8, sl
    errorX += deltaX; if (errorX >= maxSteps) { errorX -= maxSteps; stepX = true; }
 80031a0:	bfd6      	itet	le
 80031a2:	2101      	movle	r1, #1
    bool stepX = false, stepY = false, stepZ = false;
 80031a4:	2100      	movgt	r1, #0
    errorX += deltaX; if (errorX >= maxSteps) { errorX -= maxSteps; stepX = true; }
 80031a6:	ebab 0b04 	suble.w	fp, fp, r4
    errorY += deltaY; if (errorY >= maxSteps) { errorY -= maxSteps; stepY = true; }
 80031aa:	42bc      	cmp	r4, r7
 80031ac:	bfd6      	itet	le
 80031ae:	2201      	movle	r2, #1
    bool stepX = false, stepY = false, stepZ = false;
 80031b0:	2200      	movgt	r2, #0
    errorY += deltaY; if (errorY >= maxSteps) { errorY -= maxSteps; stepY = true; }
 80031b2:	1b3f      	suble	r7, r7, r4
    errorZ += deltaZ; if (errorZ >= maxSteps) { errorZ -= maxSteps; stepZ = true; }
 80031b4:	4544      	cmp	r4, r8
 80031b6:	bfd6      	itet	le
 80031b8:	2301      	movle	r3, #1
    bool stepX = false, stepY = false, stepZ = false;
 80031ba:	2300      	movgt	r3, #0
    errorZ += deltaZ; if (errorZ >= maxSteps) { errorZ -= maxSteps; stepZ = true; }
 80031bc:	eba8 0804 	suble.w	r8, r8, r4
    bool stepX = false, stepY = false, stepZ = false;
 80031c0:	9303      	str	r3, [sp, #12]

    if (stepX) X_stepOnce();
 80031c2:	b119      	cbz	r1, 80031cc <moveAxesWithFeedRate+0x1f4>
 80031c4:	9205      	str	r2, [sp, #20]
 80031c6:	f7ff fe93 	bl	8002ef0 <X_stepOnce>
 80031ca:	9a05      	ldr	r2, [sp, #20]
    if (stepY) Y_stepOnce();
 80031cc:	b10a      	cbz	r2, 80031d2 <moveAxesWithFeedRate+0x1fa>
 80031ce:	f7ff fea3 	bl	8002f18 <Y_stepOnce>
    if (stepZ) Z_stepOnce();
 80031d2:	9b03      	ldr	r3, [sp, #12]
 80031d4:	b10b      	cbz	r3, 80031da <moveAxesWithFeedRate+0x202>
 80031d6:	f7ff feb5 	bl	8002f44 <Z_stepOnce>

    delay_us(step_delay);
 80031da:	9804      	ldr	r0, [sp, #16]
    for (int32_t step = 0; step < maxSteps; step++) {
 80031dc:	f109 0901 	add.w	r9, r9, #1
    delay_us(step_delay);
 80031e0:	f7ff fe48 	bl	8002e74 <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 80031e4:	454c      	cmp	r4, r9
 80031e6:	d1d7      	bne.n	8003198 <moveAxesWithFeedRate+0x1c0>
}
    
    
    // Actualizar posiciones actuales
    currentX = targetX;
 80031e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <moveAxesWithFeedRate+0x24c>)
 80031ea:	9a00      	ldr	r2, [sp, #0]
 80031ec:	601a      	str	r2, [r3, #0]
    currentY = targetY;
 80031ee:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <moveAxesWithFeedRate+0x254>)
 80031f0:	9a01      	ldr	r2, [sp, #4]
 80031f2:	601a      	str	r2, [r3, #0]
    currentZ = targetZ;
 80031f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <moveAxesWithFeedRate+0x258>)
 80031f6:	9a02      	ldr	r2, [sp, #8]
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	b007      	add	sp, #28
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8003200:	9b04      	ldr	r3, [sp, #16]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	e702      	b.n	800300c <moveAxesWithFeedRate+0x34>
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8003206:	9b03      	ldr	r3, [sp, #12]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	e710      	b.n	800302e <moveAxesWithFeedRate+0x56>
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 800320c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003210:	e71e      	b.n	8003050 <moveAxesWithFeedRate+0x78>
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003212:	f04f 0800 	mov.w	r8, #0
 8003216:	e736      	b.n	8003086 <moveAxesWithFeedRate+0xae>
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8003218:	2700      	movs	r7, #0
 800321a:	e746      	b.n	80030aa <moveAxesWithFeedRate+0xd2>
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 800321c:	f04f 0900 	mov.w	r9, #0
 8003220:	e755      	b.n	80030ce <moveAxesWithFeedRate+0xf6>
 8003222:	bf00      	nop
 8003224:	2000235c 	.word	0x2000235c
 8003228:	429e0000 	.word	0x429e0000
 800322c:	20002358 	.word	0x20002358
 8003230:	20002354 	.word	0x20002354
 8003234:	4575a000 	.word	0x4575a000
 8003238:	20000004 	.word	0x20000004
 800323c:	20000000 	.word	0x20000000
 8003240:	40010c00 	.word	0x40010c00
 8003244:	40010800 	.word	0x40010800

08003248 <arc_move_r>:
  * @param  r: Radio del arco en mm
  * @param  clockwise: Dirección del arco (1 = horario, 0 = antihorario)
  * @param  feedRate: Velocidad de alimentación en mm/s
  * @retval None
  */
void arc_move_r(float x_end, float y_end, float r, bool clockwise, float feedRate) {
 8003248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324c:	b08d      	sub	sp, #52	@ 0x34
 800324e:	9306      	str	r3, [sp, #24]
 8003250:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003252:	4680      	mov	r8, r0
 8003254:	930a      	str	r3, [sp, #40]	@ 0x28
    float x0 = currentX;
 8003256:	4bb2      	ldr	r3, [pc, #712]	@ (8003520 <arc_move_r+0x2d8>)
void arc_move_r(float x_end, float y_end, float r, bool clockwise, float feedRate) {
 8003258:	4614      	mov	r4, r2
    float x0 = currentX;
 800325a:	6818      	ldr	r0, [r3, #0]
void arc_move_r(float x_end, float y_end, float r, bool clockwise, float feedRate) {
 800325c:	460f      	mov	r7, r1
    float x0 = currentX;
 800325e:	f7fd fd3d 	bl	8000cdc <__aeabi_i2f>
    float y0 = currentY;
 8003262:	4bb0      	ldr	r3, [pc, #704]	@ (8003524 <arc_move_r+0x2dc>)
    float x0 = currentX;
 8003264:	4606      	mov	r6, r0
    float y0 = currentY;
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f7fd fd38 	bl	8000cdc <__aeabi_i2f>
    float x1 = x_end * STEPS_PER_MM_X;
 800326c:	49ae      	ldr	r1, [pc, #696]	@ (8003528 <arc_move_r+0x2e0>)
    float y0 = currentY;
 800326e:	4605      	mov	r5, r0
    float x1 = x_end * STEPS_PER_MM_X;
 8003270:	4640      	mov	r0, r8
 8003272:	f7fd fd87 	bl	8000d84 <__aeabi_fmul>
    float y1 = y_end * STEPS_PER_MM_Y;
 8003276:	49ac      	ldr	r1, [pc, #688]	@ (8003528 <arc_move_r+0x2e0>)
    float x1 = x_end * STEPS_PER_MM_X;
 8003278:	9004      	str	r0, [sp, #16]
    float y1 = y_end * STEPS_PER_MM_Y;
 800327a:	4638      	mov	r0, r7
 800327c:	f7fd fd82 	bl	8000d84 <__aeabi_fmul>
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8003280:	49a9      	ldr	r1, [pc, #676]	@ (8003528 <arc_move_r+0x2e0>)
    float y1 = y_end * STEPS_PER_MM_Y;
 8003282:	4681      	mov	r9, r0
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8003284:	4620      	mov	r0, r4
 8003286:	f7fd fd7d 	bl	8000d84 <__aeabi_fmul>

    float dx = x1 - x0;
 800328a:	4631      	mov	r1, r6
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 800328c:	9003      	str	r0, [sp, #12]
    float dx = x1 - x0;
 800328e:	9804      	ldr	r0, [sp, #16]
 8003290:	f7fd fc6e 	bl	8000b70 <__aeabi_fsub>
    float dy = y1 - y0;
 8003294:	4629      	mov	r1, r5
    float dx = x1 - x0;
 8003296:	4607      	mov	r7, r0
    float dy = y1 - y0;
 8003298:	4648      	mov	r0, r9
 800329a:	f7fd fc69 	bl	8000b70 <__aeabi_fsub>
    float d = sqrt(dx * dx + dy * dy);
 800329e:	4639      	mov	r1, r7
    float dy = y1 - y0;
 80032a0:	4604      	mov	r4, r0
    float d = sqrt(dx * dx + dy * dy);
 80032a2:	4638      	mov	r0, r7
 80032a4:	f7fd fd6e 	bl	8000d84 <__aeabi_fmul>
 80032a8:	4621      	mov	r1, r4
 80032aa:	4680      	mov	r8, r0
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7fd fd69 	bl	8000d84 <__aeabi_fmul>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4640      	mov	r0, r8
 80032b6:	f7fd fc5d 	bl	8000b74 <__addsf3>
 80032ba:	f7fd f8b5 	bl	8000428 <__aeabi_f2d>
 80032be:	f006 fadd 	bl	800987c <sqrt>
 80032c2:	f7fd fc01 	bl	8000ac8 <__aeabi_d2f>
 80032c6:	4680      	mov	r8, r0

    if (d > 2 * fabs(r)) {
 80032c8:	f7fd f8ae 	bl	8000428 <__aeabi_f2d>
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	4682      	mov	sl, r0
 80032d0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80032d4:	468b      	mov	fp, r1
 80032d6:	f7fd f8a7 	bl	8000428 <__aeabi_f2d>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	f7fc ff45 	bl	800016c <__adddf3>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4650      	mov	r0, sl
 80032e8:	4659      	mov	r1, fp
 80032ea:	f7fd fb85 	bl	80009f8 <__aeabi_dcmpgt>
 80032ee:	b128      	cbz	r0, 80032fc <arc_move_r+0xb4>
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 80032f0:	488e      	ldr	r0, [pc, #568]	@ (800352c <arc_move_r+0x2e4>)
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
        float x = cx + r * cos(angle);
        float y = cy + r * sin(angle);
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
    }
}
 80032f2:	b00d      	add	sp, #52	@ 0x34
 80032f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 80032f8:	f7fe baf8 	b.w	80018ec <sendUSBText>
    float mx = (x0 + x1) / 2;
 80032fc:	9904      	ldr	r1, [sp, #16]
 80032fe:	4630      	mov	r0, r6
 8003300:	f7fd fc38 	bl	8000b74 <__addsf3>
 8003304:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003308:	f7fd fd3c 	bl	8000d84 <__aeabi_fmul>
    float my = (y0 + y1) / 2;
 800330c:	4649      	mov	r1, r9
    float mx = (x0 + x1) / 2;
 800330e:	9008      	str	r0, [sp, #32]
    float my = (y0 + y1) / 2;
 8003310:	4628      	mov	r0, r5
 8003312:	f7fd fc2f 	bl	8000b74 <__addsf3>
 8003316:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800331a:	f7fd fd33 	bl	8000d84 <__aeabi_fmul>
    float h = sqrt(r * r - (d / 2) * (d / 2));
 800331e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
    float my = (y0 + y1) / 2;
 8003322:	9009      	str	r0, [sp, #36]	@ 0x24
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8003324:	4640      	mov	r0, r8
 8003326:	f7fd fd2d 	bl	8000d84 <__aeabi_fmul>
 800332a:	9903      	ldr	r1, [sp, #12]
 800332c:	4683      	mov	fp, r0
 800332e:	4608      	mov	r0, r1
 8003330:	f7fd fd28 	bl	8000d84 <__aeabi_fmul>
 8003334:	4659      	mov	r1, fp
 8003336:	4682      	mov	sl, r0
 8003338:	4658      	mov	r0, fp
 800333a:	f7fd fd23 	bl	8000d84 <__aeabi_fmul>
 800333e:	4601      	mov	r1, r0
 8003340:	4650      	mov	r0, sl
 8003342:	f7fd fc15 	bl	8000b70 <__aeabi_fsub>
 8003346:	f7fd f86f 	bl	8000428 <__aeabi_f2d>
 800334a:	f006 fa97 	bl	800987c <sqrt>
 800334e:	f7fd fbbb 	bl	8000ac8 <__aeabi_d2f>
    float nx = -dy / d;
 8003352:	4641      	mov	r1, r8
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8003354:	4682      	mov	sl, r0
    float nx = -dy / d;
 8003356:	f104 4000 	add.w	r0, r4, #2147483648	@ 0x80000000
 800335a:	f7fd fdc7 	bl	8000eec <__aeabi_fdiv>
    float ny = dx / d;
 800335e:	4641      	mov	r1, r8
    float nx = -dy / d;
 8003360:	4683      	mov	fp, r0
    float ny = dx / d;
 8003362:	4638      	mov	r0, r7
 8003364:	f7fd fdc2 	bl	8000eec <__aeabi_fdiv>
    if (clockwise) {
 8003368:	9b06      	ldr	r3, [sp, #24]
    float ny = dx / d;
 800336a:	4604      	mov	r4, r0
        cx = mx - nx * h;
 800336c:	4659      	mov	r1, fp
 800336e:	4650      	mov	r0, sl
    if (clockwise) {
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80b6 	beq.w	80034e2 <arc_move_r+0x29a>
        cx = mx - nx * h;
 8003376:	f7fd fd05 	bl	8000d84 <__aeabi_fmul>
 800337a:	4601      	mov	r1, r0
 800337c:	9808      	ldr	r0, [sp, #32]
 800337e:	f7fd fbf7 	bl	8000b70 <__aeabi_fsub>
        cy = my - ny * h;
 8003382:	4621      	mov	r1, r4
        cx = mx - nx * h;
 8003384:	4683      	mov	fp, r0
        cy = my - ny * h;
 8003386:	4650      	mov	r0, sl
 8003388:	f7fd fcfc 	bl	8000d84 <__aeabi_fmul>
 800338c:	4601      	mov	r1, r0
 800338e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003390:	f7fd fbee 	bl	8000b70 <__aeabi_fsub>
        cy = my + ny * h;
 8003394:	4604      	mov	r4, r0
    float start_angle = atan2(y0 - cy, x0 - cx);
 8003396:	4659      	mov	r1, fp
 8003398:	4630      	mov	r0, r6
 800339a:	f7fd fbe9 	bl	8000b70 <__aeabi_fsub>
 800339e:	f7fd f843 	bl	8000428 <__aeabi_f2d>
 80033a2:	4606      	mov	r6, r0
 80033a4:	460f      	mov	r7, r1
 80033a6:	4628      	mov	r0, r5
 80033a8:	4621      	mov	r1, r4
 80033aa:	f7fd fbe1 	bl	8000b70 <__aeabi_fsub>
 80033ae:	f7fd f83b 	bl	8000428 <__aeabi_f2d>
 80033b2:	4632      	mov	r2, r6
 80033b4:	463b      	mov	r3, r7
 80033b6:	f006 fa5f 	bl	8009878 <atan2>
 80033ba:	f7fd fb85 	bl	8000ac8 <__aeabi_d2f>
    float end_angle = atan2(y1 - cy, x1 - cx);
 80033be:	4659      	mov	r1, fp
    float start_angle = atan2(y0 - cy, x0 - cx);
 80033c0:	9008      	str	r0, [sp, #32]
    float end_angle = atan2(y1 - cy, x1 - cx);
 80033c2:	9804      	ldr	r0, [sp, #16]
 80033c4:	f7fd fbd4 	bl	8000b70 <__aeabi_fsub>
 80033c8:	f7fd f82e 	bl	8000428 <__aeabi_f2d>
 80033cc:	4606      	mov	r6, r0
 80033ce:	460f      	mov	r7, r1
 80033d0:	4648      	mov	r0, r9
 80033d2:	4621      	mov	r1, r4
 80033d4:	f7fd fbcc 	bl	8000b70 <__aeabi_fsub>
 80033d8:	f7fd f826 	bl	8000428 <__aeabi_f2d>
 80033dc:	463b      	mov	r3, r7
 80033de:	4632      	mov	r2, r6
 80033e0:	f006 fa4a 	bl	8009878 <atan2>
 80033e4:	f7fd fb70 	bl	8000ac8 <__aeabi_d2f>
    float total_angle = end_angle - start_angle;
 80033e8:	9908      	ldr	r1, [sp, #32]
 80033ea:	f7fd fbc1 	bl	8000b70 <__aeabi_fsub>
    if (clockwise && total_angle > 0) {
 80033ee:	9b06      	ldr	r3, [sp, #24]
    float total_angle = end_angle - start_angle;
 80033f0:	4605      	mov	r5, r0
    if (clockwise && total_angle > 0) {
 80033f2:	2100      	movs	r1, #0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8082 	beq.w	80034fe <arc_move_r+0x2b6>
 80033fa:	f7fd fe7f 	bl	80010fc <__aeabi_fcmpgt>
 80033fe:	b150      	cbz	r0, 8003416 <arc_move_r+0x1ce>
        total_angle -= 2 * PI;
 8003400:	4628      	mov	r0, r5
 8003402:	f7fd f811 	bl	8000428 <__aeabi_f2d>
 8003406:	a344      	add	r3, pc, #272	@ (adr r3, 8003518 <arc_move_r+0x2d0>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fc feac 	bl	8000168 <__aeabi_dsub>
        total_angle += 2 * PI;
 8003410:	f7fd fb5a 	bl	8000ac8 <__aeabi_d2f>
 8003414:	4605      	mov	r5, r0
    for (int i = 1; i <= SEGMENTS; i++) {
 8003416:	2601      	movs	r6, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 8003418:	f8df a114 	ldr.w	sl, [pc, #276]	@ 8003530 <arc_move_r+0x2e8>
 800341c:	4f42      	ldr	r7, [pc, #264]	@ (8003528 <arc_move_r+0x2e0>)
        float x = cx + r * cos(angle);
 800341e:	9803      	ldr	r0, [sp, #12]
 8003420:	f7fd f802 	bl	8000428 <__aeabi_f2d>
 8003424:	e9cd 0104 	strd	r0, r1, [sp, #16]
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
 8003428:	4630      	mov	r0, r6
 800342a:	f7fd fc57 	bl	8000cdc <__aeabi_i2f>
 800342e:	4941      	ldr	r1, [pc, #260]	@ (8003534 <arc_move_r+0x2ec>)
 8003430:	f7fd fd5c 	bl	8000eec <__aeabi_fdiv>
 8003434:	4629      	mov	r1, r5
 8003436:	f7fd fca5 	bl	8000d84 <__aeabi_fmul>
 800343a:	9908      	ldr	r1, [sp, #32]
 800343c:	f7fd fb9a 	bl	8000b74 <__addsf3>
        float x = cx + r * cos(angle);
 8003440:	f7fc fff2 	bl	8000428 <__aeabi_f2d>
 8003444:	4680      	mov	r8, r0
 8003446:	4689      	mov	r9, r1
 8003448:	f006 fa3c 	bl	80098c4 <cos>
 800344c:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float y = cy + r * sin(angle);
 8003450:	4640      	mov	r0, r8
 8003452:	4649      	mov	r1, r9
 8003454:	f006 fa7c 	bl	8009950 <sin>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 8003458:	f640 735a 	movw	r3, #3930	@ 0xf5a
        float y = cy + r * sin(angle);
 800345c:	4680      	mov	r8, r0
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 800345e:	f8da 0000 	ldr.w	r0, [sl]
        float y = cy + r * sin(angle);
 8003462:	4689      	mov	r9, r1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 8003464:	fb90 f0f3 	sdiv	r0, r0, r3
 8003468:	f7fd fc38 	bl	8000cdc <__aeabi_i2f>
        float y = cy + r * sin(angle);
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 8003470:	9009      	str	r0, [sp, #36]	@ 0x24
        float y = cy + r * sin(angle);
 8003472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003476:	f7fd f82f 	bl	80004d8 <__aeabi_dmul>
 800347a:	4680      	mov	r8, r0
 800347c:	4620      	mov	r0, r4
 800347e:	4689      	mov	r9, r1
 8003480:	f7fc ffd2 	bl	8000428 <__aeabi_f2d>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4640      	mov	r0, r8
 800348a:	4649      	mov	r1, r9
 800348c:	f7fc fe6e 	bl	800016c <__adddf3>
 8003490:	f7fd fb1a 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 8003494:	4639      	mov	r1, r7
 8003496:	f7fd fd29 	bl	8000eec <__aeabi_fdiv>
        float x = cx + r * cos(angle);
 800349a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 800349e:	900b      	str	r0, [sp, #44]	@ 0x2c
        float x = cx + r * cos(angle);
 80034a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034a4:	f7fd f818 	bl	80004d8 <__aeabi_dmul>
 80034a8:	4680      	mov	r8, r0
 80034aa:	4658      	mov	r0, fp
 80034ac:	4689      	mov	r9, r1
 80034ae:	f7fc ffbb 	bl	8000428 <__aeabi_f2d>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4640      	mov	r0, r8
 80034b8:	4649      	mov	r1, r9
 80034ba:	f7fc fe57 	bl	800016c <__adddf3>
 80034be:	f7fd fb03 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 80034c2:	4639      	mov	r1, r7
 80034c4:	f7fd fd12 	bl	8000eec <__aeabi_fdiv>
 80034c8:	2300      	movs	r3, #0
 80034ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80034d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    for (int i = 1; i <= SEGMENTS; i++) {
 80034d2:	3601      	adds	r6, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, feedRate, false);
 80034d4:	f7ff fd80 	bl	8002fd8 <moveAxesWithFeedRate>
    for (int i = 1; i <= SEGMENTS; i++) {
 80034d8:	2e33      	cmp	r6, #51	@ 0x33
 80034da:	d1a0      	bne.n	800341e <arc_move_r+0x1d6>
}
 80034dc:	b00d      	add	sp, #52	@ 0x34
 80034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cx = mx + nx * h;
 80034e2:	f7fd fc4f 	bl	8000d84 <__aeabi_fmul>
 80034e6:	9908      	ldr	r1, [sp, #32]
 80034e8:	f7fd fb44 	bl	8000b74 <__addsf3>
        cy = my + ny * h;
 80034ec:	4621      	mov	r1, r4
        cx = mx + nx * h;
 80034ee:	4683      	mov	fp, r0
        cy = my + ny * h;
 80034f0:	4650      	mov	r0, sl
 80034f2:	f7fd fc47 	bl	8000d84 <__aeabi_fmul>
 80034f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034f8:	f7fd fb3c 	bl	8000b74 <__addsf3>
 80034fc:	e74a      	b.n	8003394 <arc_move_r+0x14c>
    } else if (!clockwise && total_angle < 0) {
 80034fe:	f7fd fddf 	bl	80010c0 <__aeabi_fcmplt>
 8003502:	2800      	cmp	r0, #0
 8003504:	d087      	beq.n	8003416 <arc_move_r+0x1ce>
        total_angle += 2 * PI;
 8003506:	4628      	mov	r0, r5
 8003508:	f7fc ff8e 	bl	8000428 <__aeabi_f2d>
 800350c:	a302      	add	r3, pc, #8	@ (adr r3, 8003518 <arc_move_r+0x2d0>)
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f7fc fe2b 	bl	800016c <__adddf3>
 8003516:	e77b      	b.n	8003410 <arc_move_r+0x1c8>
 8003518:	54442d18 	.word	0x54442d18
 800351c:	401921fb 	.word	0x401921fb
 8003520:	2000235c 	.word	0x2000235c
 8003524:	20002358 	.word	0x20002358
 8003528:	429e0000 	.word	0x429e0000
 800352c:	0800c073 	.word	0x0800c073
 8003530:	20002354 	.word	0x20002354
 8003534:	42480000 	.word	0x42480000

08003538 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003538:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_MspInit+0x3c>)
{
 800353a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	619a      	str	r2, [r3, #24]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	f002 0201 	and.w	r2, r2, #1
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003554:	61da      	str	r2, [r3, #28]
 8003556:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003558:	4a07      	ldr	r2, [pc, #28]	@ (8003578 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003562:	6853      	ldr	r3, [r2, #4]
 8003564:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800356c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356e:	b002      	add	sp, #8
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
 8003578:	40010000 	.word	0x40010000

0800357c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	2210      	movs	r2, #16
 8003584:	2100      	movs	r1, #0
 8003586:	a802      	add	r0, sp, #8
 8003588:	f004 f8df 	bl	800774a <memset>
  if(huart->Instance==USART2)
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <HAL_UART_MspInit+0x6c>)
 8003590:	429a      	cmp	r2, r3
 8003592:	d126      	bne.n	80035e2 <HAL_UART_MspInit+0x66>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003594:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8003598:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359a:	4814      	ldr	r0, [pc, #80]	@ (80035ec <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800359c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80035a0:	61da      	str	r2, [r3, #28]
 80035a2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80035a6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80035aa:	9200      	str	r2, [sp, #0]
 80035ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	f042 0204 	orr.w	r2, r2, #4
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c8:	2303      	movs	r3, #3
 80035ca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f000 f980 	bl	80038d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d0:	2108      	movs	r1, #8
 80035d2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d4:	4805      	ldr	r0, [pc, #20]	@ (80035ec <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	f000 f977 	bl	80038d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80035e2:	b006      	add	sp, #24
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	bf00      	nop
 80035e8:	40004400 	.word	0x40004400
 80035ec:	40010800 	.word	0x40010800

080035f0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035f0:	e7fe      	b.n	80035f0 <NMI_Handler>

080035f2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <HardFault_Handler>

080035f4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f4:	e7fe      	b.n	80035f4 <MemManage_Handler>

080035f6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <BusFault_Handler>

080035f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <UsageFault_Handler>

080035fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035fa:	4770      	bx	lr

080035fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80035fc:	4770      	bx	lr

080035fe <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80035fe:	4770      	bx	lr

08003600 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003600:	f000 b8cc 	b.w	800379c <HAL_IncTick>

08003604 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003604:	4801      	ldr	r0, [pc, #4]	@ (800360c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003606:	f000 bae7 	b.w	8003bd8 <HAL_PCD_IRQHandler>
 800360a:	bf00      	nop
 800360c:	200045cc 	.word	0x200045cc

08003610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003612:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003616:	f000 fa43 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800361a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800361e:	f000 fa3f 	bl	8003aa0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003626:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800362a:	f000 ba39 	b.w	8003aa0 <HAL_GPIO_EXTI_IRQHandler>

0800362e <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800362e:	2001      	movs	r0, #1
 8003630:	4770      	bx	lr

08003632 <_kill>:

int _kill(int pid, int sig)
{
 8003632:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003634:	f004 f8fc 	bl	8007830 <__errno>
 8003638:	2316      	movs	r3, #22
 800363a:	6003      	str	r3, [r0, #0]
  return -1;
}
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	bd08      	pop	{r3, pc}

08003642 <_exit>:

void _exit (int status)
{
 8003642:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003644:	f004 f8f4 	bl	8007830 <__errno>
 8003648:	2316      	movs	r3, #22
 800364a:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800364c:	e7fe      	b.n	800364c <_exit+0xa>

0800364e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800364e:	b570      	push	{r4, r5, r6, lr}
 8003650:	460d      	mov	r5, r1
 8003652:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003654:	460e      	mov	r6, r1
 8003656:	1b73      	subs	r3, r6, r5
 8003658:	429c      	cmp	r4, r3
 800365a:	dc01      	bgt.n	8003660 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800365c:	4620      	mov	r0, r4
 800365e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003660:	f3af 8000 	nop.w
 8003664:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003668:	e7f5      	b.n	8003656 <_read+0x8>

0800366a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800366a:	b570      	push	{r4, r5, r6, lr}
 800366c:	460d      	mov	r5, r1
 800366e:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003670:	460e      	mov	r6, r1
 8003672:	1b73      	subs	r3, r6, r5
 8003674:	429c      	cmp	r4, r3
 8003676:	dc01      	bgt.n	800367c <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003678:	4620      	mov	r0, r4
 800367a:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800367c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003684:	e7f5      	b.n	8003672 <_write+0x8>

08003686 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003686:	f04f 30ff 	mov.w	r0, #4294967295
 800368a:	4770      	bx	lr

0800368c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800368c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8003690:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003692:	604b      	str	r3, [r1, #4]
}
 8003694:	4770      	bx	lr

08003696 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003696:	2001      	movs	r0, #1
 8003698:	4770      	bx	lr

0800369a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800369a:	2000      	movs	r0, #0
 800369c:	4770      	bx	lr
	...

080036a0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a0:	4a0b      	ldr	r2, [pc, #44]	@ (80036d0 <_sbrk+0x30>)
{
 80036a2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80036a4:	6811      	ldr	r1, [r2, #0]
{
 80036a6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80036a8:	b909      	cbnz	r1, 80036ae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80036aa:	490a      	ldr	r1, [pc, #40]	@ (80036d4 <_sbrk+0x34>)
 80036ac:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ae:	6810      	ldr	r0, [r2, #0]
 80036b0:	4909      	ldr	r1, [pc, #36]	@ (80036d8 <_sbrk+0x38>)
 80036b2:	4c0a      	ldr	r4, [pc, #40]	@ (80036dc <_sbrk+0x3c>)
 80036b4:	4403      	add	r3, r0
 80036b6:	1b09      	subs	r1, r1, r4
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d906      	bls.n	80036ca <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80036bc:	f004 f8b8 	bl	8007830 <__errno>
 80036c0:	230c      	movs	r3, #12
 80036c2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80036c8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80036ca:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80036cc:	e7fc      	b.n	80036c8 <_sbrk+0x28>
 80036ce:	bf00      	nop
 80036d0:	20002760 	.word	0x20002760
 80036d4:	200049f0 	.word	0x200049f0
 80036d8:	20005000 	.word	0x20005000
 80036dc:	00000400 	.word	0x00000400

080036e0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e0:	4770      	bx	lr
	...

080036e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036e4:	f7ff fffc 	bl	80036e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e8:	480b      	ldr	r0, [pc, #44]	@ (8003718 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036ea:	490c      	ldr	r1, [pc, #48]	@ (800371c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <LoopFillZerobss+0x16>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f0:	e002      	b.n	80036f8 <LoopCopyDataInit>

080036f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f6:	3304      	adds	r3, #4

080036f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036fc:	d3f9      	bcc.n	80036f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fe:	4a09      	ldr	r2, [pc, #36]	@ (8003724 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003700:	4c09      	ldr	r4, [pc, #36]	@ (8003728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003704:	e001      	b.n	800370a <LoopFillZerobss>

08003706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003708:	3204      	adds	r2, #4

0800370a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800370a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800370c:	d3fb      	bcc.n	8003706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370e:	f004 f895 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003712:	f7ff fb1d 	bl	8002d50 <main>
  bx lr
 8003716:	4770      	bx	lr
  ldr r0, =_sdata
 8003718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800371c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003720:	0800c740 	.word	0x0800c740
  ldr r2, =_sbss
 8003724:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003728:	200049f0 	.word	0x200049f0

0800372c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800372c:	e7fe      	b.n	800372c <ADC1_2_IRQHandler>
	...

08003730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003730:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003732:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <HAL_InitTick+0x3c>)
{
 8003734:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800373c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003740:	4a0b      	ldr	r2, [pc, #44]	@ (8003770 <HAL_InitTick+0x40>)
 8003742:	6810      	ldr	r0, [r2, #0]
 8003744:	fbb0 f0f3 	udiv	r0, r0, r3
 8003748:	f000 f8ae 	bl	80038a8 <HAL_SYSTICK_Config>
 800374c:	4604      	mov	r4, r0
 800374e:	b958      	cbnz	r0, 8003768 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003750:	2d0f      	cmp	r5, #15
 8003752:	d809      	bhi.n	8003768 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	4602      	mov	r2, r0
 8003756:	4629      	mov	r1, r5
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f000 f854 	bl	8003808 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003760:	4620      	mov	r0, r4
 8003762:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <HAL_InitTick+0x44>)
 8003764:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003766:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
 800376a:	e7fc      	b.n	8003766 <HAL_InitTick+0x36>
 800376c:	20000010 	.word	0x20000010
 8003770:	2000000c 	.word	0x2000000c
 8003774:	20000014 	.word	0x20000014

08003778 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003778:	4a07      	ldr	r2, [pc, #28]	@ (8003798 <HAL_Init+0x20>)
{
 800377a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800377c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003786:	f000 f82d 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800378a:	200f      	movs	r0, #15
 800378c:	f7ff ffd0 	bl	8003730 <HAL_InitTick>
  HAL_MspInit();
 8003790:	f7ff fed2 	bl	8003538 <HAL_MspInit>
}
 8003794:	2000      	movs	r0, #0
 8003796:	bd08      	pop	{r3, pc}
 8003798:	40022000 	.word	0x40022000

0800379c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800379c:	4a03      	ldr	r2, [pc, #12]	@ (80037ac <HAL_IncTick+0x10>)
 800379e:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <HAL_IncTick+0x14>)
 80037a0:	6811      	ldr	r1, [r2, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	440b      	add	r3, r1
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20002764 	.word	0x20002764
 80037b0:	20000010 	.word	0x20000010

080037b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037b4:	4b01      	ldr	r3, [pc, #4]	@ (80037bc <HAL_GetTick+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20002764 	.word	0x20002764

080037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff fff6 	bl	80037b4 <HAL_GetTick>
 80037c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80037cc:	bf1e      	ittt	ne
 80037ce:	4b04      	ldrne	r3, [pc, #16]	@ (80037e0 <HAL_Delay+0x20>)
 80037d0:	781b      	ldrbne	r3, [r3, #0]
 80037d2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d4:	f7ff ffee 	bl	80037b4 <HAL_GetTick>
 80037d8:	1b43      	subs	r3, r0, r5
 80037da:	42a3      	cmp	r3, r4
 80037dc:	d3fa      	bcc.n	80037d4 <HAL_Delay+0x14>
  {
  }
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	20000010 	.word	0x20000010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4907      	ldr	r1, [pc, #28]	@ (8003804 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037f2:	0412      	lsls	r2, r2, #16
 80037f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003800:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b15      	ldr	r3, [pc, #84]	@ (8003860 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380a:	b530      	push	{r4, r5, lr}
 800380c:	68dc      	ldr	r4, [r3, #12]
 800380e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003812:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003816:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	2b04      	cmp	r3, #4
 800381a:	bf28      	it	cs
 800381c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003824:	bf94      	ite	ls
 8003826:	2400      	movls	r4, #0
 8003828:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382a:	fa05 f303 	lsl.w	r3, r5, r3
 800382e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003832:	40a5      	lsls	r5, r4
 8003834:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800383a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003840:	bfac      	ite	ge
 8003842:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	4a07      	ldrlt	r2, [pc, #28]	@ (8003864 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800384c:	b2db      	uxtb	r3, r3
 800384e:	bfab      	itete	ge
 8003850:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003854:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800385e:	bd30      	pop	{r4, r5, pc}
 8003860:	e000ed00 	.word	0xe000ed00
 8003864:	e000ed14 	.word	0xe000ed14

08003868 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003868:	2800      	cmp	r0, #0
 800386a:	db07      	blt.n	800387c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386c:	2301      	movs	r3, #1
 800386e:	0941      	lsrs	r1, r0, #5
 8003870:	4a03      	ldr	r2, [pc, #12]	@ (8003880 <HAL_NVIC_EnableIRQ+0x18>)
 8003872:	f000 001f 	and.w	r0, r0, #31
 8003876:	4083      	lsls	r3, r0
 8003878:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003884:	2800      	cmp	r0, #0
 8003886:	db0c      	blt.n	80038a2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003888:	2201      	movs	r2, #1
 800388a:	4906      	ldr	r1, [pc, #24]	@ (80038a4 <HAL_NVIC_DisableIRQ+0x20>)
 800388c:	0943      	lsrs	r3, r0, #5
 800388e:	f000 001f 	and.w	r0, r0, #31
 8003892:	4082      	lsls	r2, r0
 8003894:	3320      	adds	r3, #32
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800389a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800389e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80038a2:	4770      	bx	lr
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	3801      	subs	r0, #1
 80038aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80038ae:	d20b      	bcs.n	80038c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b4:	21f0      	movs	r1, #240	@ 0xf0
 80038b6:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038be:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038d4:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038d6:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 80038da:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038dc:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8003a64 <HAL_GPIO_Init+0x194>
 80038e0:	4b61      	ldr	r3, [pc, #388]	@ (8003a68 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038e2:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e6:	680a      	ldr	r2, [r1, #0]
 80038e8:	fa32 f506 	lsrs.w	r5, r2, r6
 80038ec:	d102      	bne.n	80038f4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80038ee:	b003      	add	sp, #12
 80038f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80038f4:	2501      	movs	r5, #1
 80038f6:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fa:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80038fe:	ea37 0202 	bics.w	r2, r7, r2
 8003902:	d176      	bne.n	80039f2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8003904:	684a      	ldr	r2, [r1, #4]
 8003906:	2a03      	cmp	r2, #3
 8003908:	d807      	bhi.n	800391a <HAL_GPIO_Init+0x4a>
 800390a:	3a01      	subs	r2, #1
 800390c:	2a02      	cmp	r2, #2
 800390e:	f200 8083 	bhi.w	8003a18 <HAL_GPIO_Init+0x148>
 8003912:	e8df f002 	tbb	[pc, r2]
 8003916:	9691      	.short	0x9691
 8003918:	9c          	.byte	0x9c
 8003919:	00          	.byte	0x00
 800391a:	2a12      	cmp	r2, #18
 800391c:	f000 8094 	beq.w	8003a48 <HAL_GPIO_Init+0x178>
 8003920:	d869      	bhi.n	80039f6 <HAL_GPIO_Init+0x126>
 8003922:	2a11      	cmp	r2, #17
 8003924:	f000 808a 	beq.w	8003a3c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003928:	2dff      	cmp	r5, #255	@ 0xff
 800392a:	bf94      	ite	ls
 800392c:	4681      	movls	r9, r0
 800392e:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003930:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003934:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003938:	bf88      	it	hi
 800393a:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800393c:	fa0e fa02 	lsl.w	sl, lr, r2
 8003940:	ea27 070a 	bic.w	r7, r7, sl
 8003944:	fa04 f202 	lsl.w	r2, r4, r2
 8003948:	4317      	orrs	r7, r2
 800394a:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800394e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003952:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8003956:	d04c      	beq.n	80039f2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003958:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800395c:	f026 0703 	bic.w	r7, r6, #3
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	f8cc 2018 	str.w	r2, [ip, #24]
 8003968:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800396c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003970:	f002 0201 	and.w	r2, r2, #1
 8003974:	9201      	str	r2, [sp, #4]
 8003976:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800397a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800397e:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003980:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003984:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003986:	fa0e fb0a 	lsl.w	fp, lr, sl
 800398a:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800398e:	4a37      	ldr	r2, [pc, #220]	@ (8003a6c <HAL_GPIO_Init+0x19c>)
 8003990:	4290      	cmp	r0, r2
 8003992:	d060      	beq.n	8003a56 <HAL_GPIO_Init+0x186>
 8003994:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003998:	4290      	cmp	r0, r2
 800399a:	d05e      	beq.n	8003a5a <HAL_GPIO_Init+0x18a>
 800399c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039a0:	4290      	cmp	r0, r2
 80039a2:	d05c      	beq.n	8003a5e <HAL_GPIO_Init+0x18e>
 80039a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80039a8:	4290      	cmp	r0, r2
 80039aa:	bf14      	ite	ne
 80039ac:	2204      	movne	r2, #4
 80039ae:	2203      	moveq	r2, #3
 80039b0:	fa02 f20a 	lsl.w	r2, r2, sl
 80039b4:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80039b8:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80039ba:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039bc:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80039c0:	bf14      	ite	ne
 80039c2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039c4:	43aa      	biceq	r2, r5
 80039c6:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80039c8:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ca:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80039ce:	bf14      	ite	ne
 80039d0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039d2:	43aa      	biceq	r2, r5
 80039d4:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80039d6:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d8:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80039dc:	bf14      	ite	ne
 80039de:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039e0:	43aa      	biceq	r2, r5
 80039e2:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80039e4:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e6:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80039ea:	bf14      	ite	ne
 80039ec:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039ee:	43aa      	biceq	r2, r5
 80039f0:	601a      	str	r2, [r3, #0]
	position++;
 80039f2:	3601      	adds	r6, #1
 80039f4:	e777      	b.n	80038e6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80039f6:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8003a70 <HAL_GPIO_Init+0x1a0>
 80039fa:	454a      	cmp	r2, r9
 80039fc:	d00c      	beq.n	8003a18 <HAL_GPIO_Init+0x148>
 80039fe:	d814      	bhi.n	8003a2a <HAL_GPIO_Init+0x15a>
 8003a00:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8003a04:	454a      	cmp	r2, r9
 8003a06:	d007      	beq.n	8003a18 <HAL_GPIO_Init+0x148>
 8003a08:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8003a0c:	454a      	cmp	r2, r9
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x148>
 8003a10:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8003a14:	454a      	cmp	r2, r9
 8003a16:	d187      	bne.n	8003928 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a18:	688a      	ldr	r2, [r1, #8]
 8003a1a:	b1d2      	cbz	r2, 8003a52 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a1c:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a1e:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8003a22:	bf0c      	ite	eq
 8003a24:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8003a26:	6147      	strne	r7, [r0, #20]
 8003a28:	e77e      	b.n	8003928 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003a2a:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8003a74 <HAL_GPIO_Init+0x1a4>
 8003a2e:	454a      	cmp	r2, r9
 8003a30:	d0f2      	beq.n	8003a18 <HAL_GPIO_Init+0x148>
 8003a32:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8003a36:	e7ed      	b.n	8003a14 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a38:	68cc      	ldr	r4, [r1, #12]
          break;
 8003a3a:	e775      	b.n	8003928 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a3c:	68cc      	ldr	r4, [r1, #12]
 8003a3e:	3404      	adds	r4, #4
          break;
 8003a40:	e772      	b.n	8003928 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a42:	68cc      	ldr	r4, [r1, #12]
 8003a44:	3408      	adds	r4, #8
          break;
 8003a46:	e76f      	b.n	8003928 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a48:	68cc      	ldr	r4, [r1, #12]
 8003a4a:	340c      	adds	r4, #12
          break;
 8003a4c:	e76c      	b.n	8003928 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003a4e:	2400      	movs	r4, #0
 8003a50:	e76a      	b.n	8003928 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a52:	2404      	movs	r4, #4
 8003a54:	e768      	b.n	8003928 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a56:	2200      	movs	r2, #0
 8003a58:	e7aa      	b.n	80039b0 <HAL_GPIO_Init+0xe0>
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	e7a8      	b.n	80039b0 <HAL_GPIO_Init+0xe0>
 8003a5e:	2202      	movs	r2, #2
 8003a60:	e7a6      	b.n	80039b0 <HAL_GPIO_Init+0xe0>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40010400 	.word	0x40010400
 8003a6c:	40010800 	.word	0x40010800
 8003a70:	10220000 	.word	0x10220000
 8003a74:	10310000 	.word	0x10310000

08003a78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a78:	6883      	ldr	r3, [r0, #8]
 8003a7a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a7c:	bf14      	ite	ne
 8003a7e:	2001      	movne	r0, #1
 8003a80:	2000      	moveq	r0, #0
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a84:	b10a      	cbz	r2, 8003a8a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a86:	6101      	str	r1, [r0, #16]
  }
}
 8003a88:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a8a:	0409      	lsls	r1, r1, #16
 8003a8c:	e7fb      	b.n	8003a86 <HAL_GPIO_WritePin+0x2>

08003a8e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a8e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a90:	ea01 0203 	and.w	r2, r1, r3
 8003a94:	ea21 0103 	bic.w	r1, r1, r3
 8003a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003a9c:	6101      	str	r1, [r0, #16]
}
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aa0:	4a04      	ldr	r2, [pc, #16]	@ (8003ab4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003aa2:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aa4:	6951      	ldr	r1, [r2, #20]
 8003aa6:	4201      	tst	r1, r0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aaa:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aac:	f7ff f8c2 	bl	8002c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab0:	bd08      	pop	{r3, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aba:	4604      	mov	r4, r0
 8003abc:	b1e0      	cbz	r0, 8003af8 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003abe:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8003ac2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ac6:	b91b      	cbnz	r3, 8003ad0 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac8:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003acc:	f002 fdce 	bl	800666c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003ad6:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ad8:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8003ada:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8003adc:	f855 0b04 	ldr.w	r0, [r5], #4
 8003ae0:	f001 f9ff 	bl	8004ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ae4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003ae8:	6820      	ldr	r0, [r4, #0]
 8003aea:	f001 f9ea 	bl	8004ec2 <USB_CoreInit>
 8003aee:	4601      	mov	r1, r0
 8003af0:	b128      	cbz	r0, 8003afe <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af2:	2302      	movs	r3, #2
 8003af4:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8003af8:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8003afa:	4628      	mov	r0, r5
 8003afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	f001 f9f9 	bl	8004ef6 <USB_SetCurrentMode>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d1f4      	bne.n	8003af2 <HAL_PCD_Init+0x3a>
 8003b08:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8003b0a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	7926      	ldrb	r6, [r4, #4]
 8003b0e:	f104 0310 	add.w	r3, r4, #16
 8003b12:	b2c1      	uxtb	r1, r0
 8003b14:	428e      	cmp	r6, r1
 8003b16:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003b1a:	d818      	bhi.n	8003b4e <HAL_PCD_Init+0x96>
 8003b1c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8003b1e:	460a      	mov	r2, r1
 8003b20:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8003b24:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b26:	4286      	cmp	r6, r0
 8003b28:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003b2c:	d81b      	bhi.n	8003b66 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b2e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	f001 f9e1 	bl	8004efa <USB_DevInit>
 8003b38:	4605      	mov	r5, r0
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d1d9      	bne.n	8003af2 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8003b3e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003b40:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b42:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b44:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b48:	f001 fc8c 	bl	8005464 <USB_DevDisconnect>
  return HAL_OK;
 8003b4c:	e7d5      	b.n	8003afa <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b4e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8003b52:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8003b56:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b5a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b5e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b62:	3001      	adds	r0, #1
 8003b64:	e7d5      	b.n	8003b12 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b66:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6a:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8003b6e:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b72:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b76:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7a:	3101      	adds	r1, #1
 8003b7c:	e7d2      	b.n	8003b24 <HAL_PCD_Init+0x6c>

08003b7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b7e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8003b80:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8003b84:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d010      	beq.n	8003bac <HAL_PCD_Start+0x2e>
 8003b8a:	2501      	movs	r5, #1
 8003b8c:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b90:	6800      	ldr	r0, [r0, #0]
 8003b92:	f001 f99d 	bl	8004ed0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b96:	4629      	mov	r1, r5
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f002 fe6e 	bl	800687a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	f001 fc5e 	bl	8005460 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003bac:	2002      	movs	r0, #2
 8003bae:	e7fc      	b.n	8003baa <HAL_PCD_Start+0x2c>

08003bb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bb0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003bb2:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8003bb6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	d00a      	beq.n	8003bd2 <HAL_PCD_SetAddress+0x22>
 8003bbc:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8003bbe:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8003bc0:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bc4:	6800      	ldr	r0, [r0, #0]
 8003bc6:	f001 fc45 	bl	8005454 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8003bd0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	e7fc      	b.n	8003bd0 <HAL_PCD_SetAddress+0x20>
	...

08003bd8 <HAL_PCD_IRQHandler>:
{
 8003bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bdc:	4604      	mov	r4, r0
 8003bde:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003be0:	6800      	ldr	r0, [r0, #0]
 8003be2:	f001 fc41 	bl	8005468 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003be6:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8003bea:	f000 844f 	beq.w	800448c <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8003bee:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003bf0:	4ec6      	ldr	r6, [pc, #792]	@ (8003f0c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8003bf8:	041f      	lsls	r7, r3, #16
 8003bfa:	d402      	bmi.n	8003c02 <HAL_PCD_IRQHandler+0x2a>
}
 8003bfc:	b005      	add	sp, #20
 8003bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8003c02:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8003c06:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8003c0a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8003c0c:	f040 80c0 	bne.w	8003d90 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c10:	f011 0110 	ands.w	r1, r1, #16
 8003c14:	d126      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c16:	8803      	ldrh	r3, [r0, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4033      	ands	r3, r6
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c20:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c22:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003c26:	7c22      	ldrb	r2, [r4, #16]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c32:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8003c36:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8003c3c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c40:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8003c42:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c44:	f002 fd41 	bl	80066ca <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c48:	7b63      	ldrb	r3, [r4, #13]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0d1      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
 8003c4e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c50:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d1cd      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c56:	7b63      	ldrb	r3, [r4, #13]
 8003c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5c:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003c60:	7362      	strb	r2, [r4, #13]
 8003c62:	e7c6      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c64:	8807      	ldrh	r7, [r0, #0]
 8003c66:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c68:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8003c6c:	d021      	beq.n	8003cb2 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c6e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003c72:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c7c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c80:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c84:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c8c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c90:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8003c94:	f001 fe33 	bl	80058fe <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c98:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003c9a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c9c:	8813      	ldrh	r3, [r2, #0]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca2:	051b      	lsls	r3, r3, #20
 8003ca4:	0d1b      	lsrs	r3, r3, #20
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003caa:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003cac:	f002 fcfe 	bl	80066ac <HAL_PCD_SetupStageCallback>
 8003cb0:	e79f      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cb2:	0419      	lsls	r1, r3, #16
 8003cb4:	d59d      	bpl.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cb6:	8803      	ldrh	r3, [r0, #0]
 8003cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cbc:	051b      	lsls	r3, r3, #20
 8003cbe:	0d1b      	lsrs	r3, r3, #20
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc4:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003cca:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003cd8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ce4:	b18b      	cbz	r3, 8003d0a <HAL_PCD_IRQHandler+0x132>
 8003ce6:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8003cea:	b171      	cbz	r1, 8003d0a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cec:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003cf0:	f001 fe05 	bl	80058fe <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003cf4:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8003cf8:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cfc:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8003cfe:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d00:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003d02:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d06:	f002 fcd7 	bl	80066b8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d0a:	6821      	ldr	r1, [r4, #0]
 8003d0c:	880a      	ldrh	r2, [r1, #0]
 8003d0e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d10:	0512      	lsls	r2, r2, #20
 8003d12:	f53f af6e 	bmi.w	8003bf2 <HAL_PCD_IRQHandler+0x1a>
 8003d16:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d1e:	f43f af68 	beq.w	8003bf2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d22:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8003d26:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	5a83      	ldrh	r3, [r0, r2]
 8003d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d32:	5283      	strh	r3, [r0, r2]
 8003d34:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8003d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d3a:	d91d      	bls.n	8003d78 <HAL_PCD_IRQHandler+0x1a0>
 8003d3c:	095f      	lsrs	r7, r3, #5
 8003d3e:	06db      	lsls	r3, r3, #27
 8003d40:	5a83      	ldrh	r3, [r0, r2]
 8003d42:	bf08      	it	eq
 8003d44:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d5a:	880b      	ldrh	r3, [r1, #0]
 8003d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d74:	800b      	strh	r3, [r1, #0]
 8003d76:	e73c      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d78:	b90b      	cbnz	r3, 8003d7e <HAL_PCD_IRQHandler+0x1a6>
 8003d7a:	5a83      	ldrh	r3, [r0, r2]
 8003d7c:	e7e7      	b.n	8003d4e <HAL_PCD_IRQHandler+0x176>
 8003d7e:	085f      	lsrs	r7, r3, #1
 8003d80:	07db      	lsls	r3, r3, #31
 8003d82:	5a83      	ldrh	r3, [r0, r2]
 8003d84:	bf48      	it	mi
 8003d86:	3701      	addmi	r7, #1
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003d8e:	e7e2      	b.n	8003d56 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d90:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d94:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d96:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d9a:	f140 80f6 	bpl.w	8003f8a <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d9e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003da2:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	051b      	lsls	r3, r3, #20
 8003dac:	0d1b      	lsrs	r3, r3, #20
 8003dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003db2:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003db6:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8003dba:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8003dbe:	b9bb      	cbnz	r3, 8003df0 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dc0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003dc4:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3306      	adds	r3, #6
 8003dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dd0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003dd4:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8003dd8:	f1b9 0f00 	cmp.w	r9, #0
 8003ddc:	f000 80ba 	beq.w	8003f54 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003de0:	464b      	mov	r3, r9
 8003de2:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003de6:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8003dea:	f001 fd88 	bl	80058fe <USB_ReadPMA>
 8003dee:	e0b1      	b.n	8003f54 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8003df0:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003df4:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f040 8089 	bne.w	8003f10 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dfe:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8003e02:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8003e06:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e0a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8003e0e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e12:	44d9      	add	r9, fp
 8003e14:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e18:	d03c      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e1a:	f109 0902 	add.w	r9, r9, #2
 8003e1e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8003e22:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8003e26:	4599      	cmp	r9, r3
 8003e28:	d913      	bls.n	8003e52 <HAL_PCD_IRQHandler+0x27a>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003e50:	e005      	b.n	8003e5e <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8003e52:	eba3 0309 	sub.w	r3, r3, r9
 8003e56:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0e8      	beq.n	8003e30 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e5e:	f1bc 0f00 	cmp.w	ip, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	0c1b      	lsrs	r3, r3, #16
 8003e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003e80:	f1b9 0f00 	cmp.w	r9, #0
 8003e84:	d066      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e86:	2128      	movs	r1, #40	@ 0x28
 8003e88:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8003e92:	e7a8      	b.n	8003de6 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e94:	f109 0906 	add.w	r9, r9, #6
 8003e98:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8003e9c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8003ea0:	4599      	cmp	r9, r3
 8003ea2:	d912      	bls.n	8003eca <HAL_PCD_IRQHandler+0x2f2>
 8003ea4:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ea8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003eac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003ec8:	e005      	b.n	8003ed6 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8003eca:	eba3 0309 	sub.w	r3, r3, r9
 8003ece:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0e8      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003ed6:	f1bc 0f00 	cmp.w	ip, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003edc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	0c1b      	lsrs	r3, r3, #16
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ef4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003ef8:	f1b9 0f00 	cmp.w	r9, #0
 8003efc:	d02a      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003efe:	2128      	movs	r1, #40	@ 0x28
 8003f00:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f04:	464b      	mov	r3, r9
 8003f06:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8003f0a:	e76c      	b.n	8003de6 <HAL_PCD_IRQHandler+0x20e>
 8003f0c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f2c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8003f30:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003f3e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f40:	d054      	beq.n	8003fec <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f42:	3202      	adds	r2, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003f4a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003f4e:	f1b9 0f00 	cmp.w	r9, #0
 8003f52:	d19b      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8003f54:	fb05 f107 	mul.w	r1, r5, r7
 8003f58:	1863      	adds	r3, r4, r1
 8003f5a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8003f5e:	444a      	add	r2, r9
 8003f60:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8003f64:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8003f68:	444a      	add	r2, r9
 8003f6a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f6e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003f72:	b11a      	cbz	r2, 8003f7c <HAL_PCD_IRQHandler+0x3a4>
 8003f74:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003f78:	4599      	cmp	r9, r3
 8003f7a:	d241      	bcs.n	8004000 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f7c:	fb05 4307 	mla	r3, r5, r7, r4
 8003f80:	4620      	mov	r0, r4
 8003f82:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8003f86:	f002 fb97 	bl	80066b8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f8a:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f8e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f90:	f43f ae2f 	beq.w	8003bf2 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f94:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003f98:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	4033      	ands	r3, r6
 8003fa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa4:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003fa8:	eb04 030c 	add.w	r3, r4, ip
 8003fac:	7cda      	ldrb	r2, [r3, #19]
 8003fae:	2a01      	cmp	r2, #1
 8003fb0:	d156      	bne.n	8004060 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	fb07 5205 	mla	r2, r7, r5, r5
 8003fb8:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8003fba:	7f1a      	ldrb	r2, [r3, #28]
 8003fbc:	b392      	cbz	r2, 8004024 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fbe:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fc2:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fc4:	d036      	beq.n	8004034 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fc6:	bb12      	cbnz	r2, 800400e <HAL_PCD_IRQHandler+0x436>
 8003fc8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003fcc:	7c1b      	ldrb	r3, [r3, #16]
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fd6:	4410      	add	r0, r2
 8003fd8:	5a1a      	ldrh	r2, [r3, r0]
 8003fda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003fde:	521a      	strh	r2, [r3, r0]
 8003fe0:	5a1a      	ldrh	r2, [r3, r0]
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe8:	521a      	strh	r2, [r3, r0]
 8003fea:	e01b      	b.n	8004024 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fec:	3206      	adds	r2, #6
 8003fee:	4413      	add	r3, r2
 8003ff0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003ff4:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003ff8:	f1b9 0f00 	cmp.w	r9, #0
 8003ffc:	d0aa      	beq.n	8003f54 <HAL_PCD_IRQHandler+0x37c>
 8003ffe:	e781      	b.n	8003f04 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8004000:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004004:	6820      	ldr	r0, [r4, #0]
 8004006:	4421      	add	r1, r4
 8004008:	f001 fa44 	bl	8005494 <USB_EPStartXfer>
 800400c:	e7bd      	b.n	8003f8a <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800400e:	2a01      	cmp	r2, #1
 8004010:	d108      	bne.n	8004024 <HAL_PCD_IRQHandler+0x44c>
 8004012:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004016:	7c1b      	ldrb	r3, [r3, #16]
 8004018:	b292      	uxth	r2, r2
 800401a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	4410      	add	r0, r2
 8004022:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004024:	2328      	movs	r3, #40	@ 0x28
 8004026:	fb03 4307 	mla	r3, r3, r7, r4
 800402a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800402c:	4620      	mov	r0, r4
 800402e:	f002 fb4c 	bl	80066ca <HAL_PCD_DataInStageCallback>
 8004032:	e5de      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004034:	b93a      	cbnz	r2, 8004046 <HAL_PCD_IRQHandler+0x46e>
 8004036:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800403a:	7c1b      	ldrb	r3, [r3, #16]
 800403c:	b292      	uxth	r2, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004044:	e7c7      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x3fe>
 8004046:	2a01      	cmp	r2, #1
 8004048:	d1ec      	bne.n	8004024 <HAL_PCD_IRQHandler+0x44c>
 800404a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800404e:	7c1b      	ldrb	r3, [r3, #16]
 8004050:	b292      	uxth	r2, r2
 8004052:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	4410      	add	r0, r2
 800405a:	f823 8000 	strh.w	r8, [r3, r0]
 800405e:	e7e1      	b.n	8004024 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004060:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004062:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8004066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004068:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800406c:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004070:	d11b      	bne.n	80040aa <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004072:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8004076:	b2bf      	uxth	r7, r7
 8004078:	4457      	add	r7, sl
 800407a:	3702      	adds	r7, #2
 800407c:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8004080:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004084:	4297      	cmp	r7, r2
 8004086:	d302      	bcc.n	800408e <HAL_PCD_IRQHandler+0x4b6>
 8004088:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 800408c:	e7ce      	b.n	800402c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 800408e:	1bd2      	subs	r2, r2, r7
 8004090:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8004092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8004094:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8004098:	443a      	add	r2, r7
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800409c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800409e:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 80040a0:	443a      	add	r2, r7
 80040a2:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040a4:	f001 f9f6 	bl	8005494 <USB_EPStartXfer>
 80040a8:	e5a3      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040aa:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040ae:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040b2:	fa1f fc8c 	uxth.w	ip, ip
 80040b6:	44d4      	add	ip, sl
 80040b8:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040bc:	f000 80f4 	beq.w	80042a8 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040c0:	f10c 0c02 	add.w	ip, ip, #2
 80040c4:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80040c8:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 80040cc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80040d0:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80040d2:	bf2c      	ite	cs
 80040d4:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 80040d6:	eba2 020c 	subcc.w	r2, r2, ip
 80040da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d15b      	bne.n	8004198 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040e0:	2328      	movs	r3, #40	@ 0x28
 80040e2:	fb03 4307 	mla	r3, r3, r7, r4
 80040e6:	7c5b      	ldrb	r3, [r3, #17]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d141      	bne.n	8004170 <HAL_PCD_IRQHandler+0x598>
 80040ec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80040f0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80040f4:	b292      	uxth	r2, r2
 80040f6:	010b      	lsls	r3, r1, #4
 80040f8:	4494      	add	ip, r2
 80040fa:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80040fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004102:	f82c 2003 	strh.w	r2, [ip, r3]
 8004106:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800410a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800410e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004112:	b292      	uxth	r2, r2
 8004114:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004118:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800411c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004120:	b292      	uxth	r2, r2
 8004122:	4410      	add	r0, r2
 8004124:	5ac2      	ldrh	r2, [r0, r3]
 8004126:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800412a:	52c2      	strh	r2, [r0, r3]
 800412c:	5ac2      	ldrh	r2, [r0, r3]
 800412e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004132:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004136:	b292      	uxth	r2, r2
 8004138:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800413a:	4620      	mov	r0, r4
 800413c:	f002 fac5 	bl	80066ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004140:	f1b8 0f00 	cmp.w	r8, #0
 8004144:	f000 80f4 	beq.w	8004330 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004148:	2328      	movs	r3, #40	@ 0x28
 800414a:	fb03 4307 	mla	r3, r3, r7, r4
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	7c19      	ldrb	r1, [r3, #16]
 8004152:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800416e:	e0df      	b.n	8004330 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004170:	2b01      	cmp	r3, #1
 8004172:	d1e2      	bne.n	800413a <HAL_PCD_IRQHandler+0x562>
 8004174:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004178:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800417c:	fa1f fe8e 	uxth.w	lr, lr
 8004180:	44f4      	add	ip, lr
 8004182:	010b      	lsls	r3, r1, #4
 8004184:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004188:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 800418c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004190:	fa1f fc8c 	uxth.w	ip, ip
 8004194:	4460      	add	r0, ip
 8004196:	e7cf      	b.n	8004138 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004198:	f1b8 0f00 	cmp.w	r8, #0
 800419c:	d00d      	beq.n	80041ba <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800419e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80041a2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80041a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80041aa:	0412      	lsls	r2, r2, #16
 80041ac:	0c12      	lsrs	r2, r2, #16
 80041ae:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80041b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041b6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80041ba:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80041be:	fb08 4807 	mla	r8, r8, r7, r4
 80041c2:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80041c6:	2a01      	cmp	r2, #1
 80041c8:	f040 80b2 	bne.w	8004330 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80041cc:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80041d0:	eb02 0e0c 	add.w	lr, r2, ip
 80041d4:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4462      	add	r2, ip
 80041dc:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80041de:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80041e2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d335      	bcc.n	8004256 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041f0:	2328      	movs	r3, #40	@ 0x28
 80041f2:	fb03 4307 	mla	r3, r3, r7, r4
 80041f6:	f893 c011 	ldrb.w	ip, [r3, #17]
 80041fa:	b293      	uxth	r3, r2
 80041fc:	f1bc 0f00 	cmp.w	ip, #0
 8004200:	d145      	bne.n	800428e <HAL_PCD_IRQHandler+0x6b6>
 8004202:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8004206:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800420a:	fa1f f888 	uxth.w	r8, r8
 800420e:	44c4      	add	ip, r8
 8004210:	0109      	lsls	r1, r1, #4
 8004212:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004216:	2a3e      	cmp	r2, #62	@ 0x3e
 8004218:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800421c:	f82c 8001 	strh.w	r8, [ip, r1]
 8004220:	d925      	bls.n	800426e <HAL_PCD_IRQHandler+0x696>
 8004222:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004226:	06d2      	lsls	r2, r2, #27
 8004228:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800422c:	bf08      	it	eq
 800422e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8004232:	b292      	uxth	r2, r2
 8004234:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004238:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800423c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004240:	b292      	uxth	r2, r2
 8004242:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004246:	2228      	movs	r2, #40	@ 0x28
 8004248:	fb02 4207 	mla	r2, r2, r7, r4
 800424c:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800424e:	4671      	mov	r1, lr
 8004250:	f001 f910 	bl	8005474 <USB_WritePMA>
 8004254:	e06c      	b.n	8004330 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8004256:	b91b      	cbnz	r3, 8004260 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8004258:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800425a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800425e:	e7c7      	b.n	80041f0 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8004260:	2200      	movs	r2, #0
 8004262:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8004266:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 800426a:	461a      	mov	r2, r3
 800426c:	e7c0      	b.n	80041f0 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800426e:	b912      	cbnz	r2, 8004276 <HAL_PCD_IRQHandler+0x69e>
 8004270:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004274:	e7e0      	b.n	8004238 <HAL_PCD_IRQHandler+0x660>
 8004276:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800427a:	07d2      	lsls	r2, r2, #31
 800427c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004280:	bf48      	it	mi
 8004282:	f108 0801 	addmi.w	r8, r8, #1
 8004286:	b292      	uxth	r2, r2
 8004288:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800428c:	e7d8      	b.n	8004240 <HAL_PCD_IRQHandler+0x668>
 800428e:	f1bc 0f01 	cmp.w	ip, #1
 8004292:	d1d8      	bne.n	8004246 <HAL_PCD_IRQHandler+0x66e>
 8004294:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004298:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800429c:	fa1f fc8c 	uxth.w	ip, ip
 80042a0:	4462      	add	r2, ip
 80042a2:	0109      	lsls	r1, r1, #4
 80042a4:	5253      	strh	r3, [r2, r1]
 80042a6:	e7ce      	b.n	8004246 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042a8:	f10c 0c06 	add.w	ip, ip, #6
 80042ac:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80042b0:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 80042b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80042b8:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 80042ba:	bf8c      	ite	hi
 80042bc:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 80042be:	eba2 020c 	subls.w	r2, r2, ip
 80042c2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d15d      	bne.n	8004384 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042c8:	2328      	movs	r3, #40	@ 0x28
 80042ca:	fb03 4307 	mla	r3, r3, r7, r4
 80042ce:	7c5b      	ldrb	r3, [r3, #17]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d143      	bne.n	800435c <HAL_PCD_IRQHandler+0x784>
 80042d4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80042d8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80042dc:	b292      	uxth	r2, r2
 80042de:	010b      	lsls	r3, r1, #4
 80042e0:	4494      	add	ip, r2
 80042e2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80042e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80042ea:	f82c 2003 	strh.w	r2, [ip, r3]
 80042ee:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80042f2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80042f6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80042fa:	b292      	uxth	r2, r2
 80042fc:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004300:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004304:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004308:	b292      	uxth	r2, r2
 800430a:	4410      	add	r0, r2
 800430c:	5ac2      	ldrh	r2, [r0, r3]
 800430e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004312:	52c2      	strh	r2, [r0, r3]
 8004314:	5ac2      	ldrh	r2, [r0, r3]
 8004316:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800431a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800431e:	b292      	uxth	r2, r2
 8004320:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004322:	4620      	mov	r0, r4
 8004324:	f002 f9d1 	bl	80066ca <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004328:	f1b8 0f00 	cmp.w	r8, #0
 800432c:	f43f af0c 	beq.w	8004148 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004330:	2328      	movs	r3, #40	@ 0x28
 8004332:	fb03 4307 	mla	r3, r3, r7, r4
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	7c19      	ldrb	r1, [r3, #16]
 800433a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004346:	041b      	lsls	r3, r3, #16
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800434e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800435a:	e44a      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800435c:	2b01      	cmp	r3, #1
 800435e:	d1e0      	bne.n	8004322 <HAL_PCD_IRQHandler+0x74a>
 8004360:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004364:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004368:	fa1f fe8e 	uxth.w	lr, lr
 800436c:	44f4      	add	ip, lr
 800436e:	010b      	lsls	r3, r1, #4
 8004370:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004374:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004378:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800437c:	fa1f fc8c 	uxth.w	ip, ip
 8004380:	4460      	add	r0, ip
 8004382:	e7cd      	b.n	8004320 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004384:	f1b8 0f00 	cmp.w	r8, #0
 8004388:	d10d      	bne.n	80043a6 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800438a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800438e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004392:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004396:	0412      	lsls	r2, r2, #16
 8004398:	0c12      	lsrs	r2, r2, #16
 800439a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800439e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043a2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80043a6:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80043aa:	fb08 4807 	mla	r8, r8, r7, r4
 80043ae:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80043b2:	2a01      	cmp	r2, #1
 80043b4:	d1bc      	bne.n	8004330 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80043b6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80043ba:	eb02 0e0c 	add.w	lr, r2, ip
 80043be:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80043c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c4:	4462      	add	r2, ip
 80043c6:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80043c8:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80043cc:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d332      	bcc.n	800443a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043da:	2328      	movs	r3, #40	@ 0x28
 80043dc:	fb03 4307 	mla	r3, r3, r7, r4
 80043e0:	f893 c011 	ldrb.w	ip, [r3, #17]
 80043e4:	b293      	uxth	r3, r2
 80043e6:	f1bc 0f00 	cmp.w	ip, #0
 80043ea:	d142      	bne.n	8004472 <HAL_PCD_IRQHandler+0x89a>
 80043ec:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80043f0:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80043f4:	fa1f f888 	uxth.w	r8, r8
 80043f8:	44c4      	add	ip, r8
 80043fa:	0109      	lsls	r1, r1, #4
 80043fc:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004400:	2a3e      	cmp	r2, #62	@ 0x3e
 8004402:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004406:	f82c 8001 	strh.w	r8, [ip, r1]
 800440a:	d922      	bls.n	8004452 <HAL_PCD_IRQHandler+0x87a>
 800440c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004410:	06d2      	lsls	r2, r2, #27
 8004412:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004416:	bf08      	it	eq
 8004418:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800441c:	b292      	uxth	r2, r2
 800441e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004422:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004426:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800442a:	b292      	uxth	r2, r2
 800442c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004430:	2228      	movs	r2, #40	@ 0x28
 8004432:	fb02 4207 	mla	r2, r2, r7, r4
 8004436:	8b52      	ldrh	r2, [r2, #26]
 8004438:	e709      	b.n	800424e <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800443a:	b91b      	cbnz	r3, 8004444 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 800443c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800443e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8004442:	e7ca      	b.n	80043da <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8004444:	2200      	movs	r2, #0
 8004446:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800444a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 800444e:	461a      	mov	r2, r3
 8004450:	e7c3      	b.n	80043da <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004452:	b912      	cbnz	r2, 800445a <HAL_PCD_IRQHandler+0x882>
 8004454:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004458:	e7e3      	b.n	8004422 <HAL_PCD_IRQHandler+0x84a>
 800445a:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800445e:	07d2      	lsls	r2, r2, #31
 8004460:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004464:	bf48      	it	mi
 8004466:	f108 0801 	addmi.w	r8, r8, #1
 800446a:	b292      	uxth	r2, r2
 800446c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004470:	e7db      	b.n	800442a <HAL_PCD_IRQHandler+0x852>
 8004472:	f1bc 0f01 	cmp.w	ip, #1
 8004476:	d1db      	bne.n	8004430 <HAL_PCD_IRQHandler+0x858>
 8004478:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800447c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8004480:	b292      	uxth	r2, r2
 8004482:	4494      	add	ip, r2
 8004484:	010a      	lsls	r2, r1, #4
 8004486:	f82c 3002 	strh.w	r3, [ip, r2]
 800448a:	e7d1      	b.n	8004430 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800448c:	0546      	lsls	r6, r0, #21
 800448e:	d512      	bpl.n	80044b6 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004490:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004492:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004494:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004498:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80044a4:	f002 f91d 	bl	80066e2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044a8:	4629      	mov	r1, r5
 80044aa:	4620      	mov	r0, r4
}
 80044ac:	b005      	add	sp, #20
 80044ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044b2:	f7ff bb7d 	b.w	8003bb0 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80044b6:	0441      	lsls	r1, r0, #17
 80044b8:	d50a      	bpl.n	80044d0 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80044cc:	f7ff bb96 	b.w	8003bfc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044d0:	0482      	lsls	r2, r0, #18
 80044d2:	d505      	bpl.n	80044e0 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80044da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044de:	e7f1      	b.n	80044c4 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044e0:	04c3      	lsls	r3, r0, #19
 80044e2:	d519      	bpl.n	8004518 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80044e4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80044e6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80044e8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	041b      	lsls	r3, r3, #16
 80044f2:	0c1b      	lsrs	r3, r3, #16
 80044f4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80044f8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80044fc:	f023 0308 	bic.w	r3, r3, #8
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004508:	f002 f90e 	bl	8006728 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800450c:	6822      	ldr	r2, [r4, #0]
 800450e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004516:	e7d5      	b.n	80044c4 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004518:	0507      	lsls	r7, r0, #20
 800451a:	d548      	bpl.n	80045ae <HAL_PCD_IRQHandler+0x9d6>
 800451c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	4606      	mov	r6, r0
 8004522:	4619      	mov	r1, r3
 8004524:	461a      	mov	r2, r3
 8004526:	f103 0520 	add.w	r5, r3, #32
 800452a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800452e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004530:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8004534:	d1f9      	bne.n	800452a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004536:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800453a:	b292      	uxth	r2, r2
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004544:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	0412      	lsls	r2, r2, #16
 800454e:	0c12      	lsrs	r2, r2, #16
 8004550:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004554:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004558:	0556      	lsls	r6, r2, #21
 800455a:	d5fb      	bpl.n	8004554 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800455c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004564:	0412      	lsls	r2, r2, #16
 8004566:	0c12      	lsrs	r2, r2, #16
 8004568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800456c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004570:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8004574:	428d      	cmp	r5, r1
 8004576:	d1f9      	bne.n	800456c <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004578:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800457c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800457e:	b292      	uxth	r2, r2
 8004580:	f042 0208 	orr.w	r2, r2, #8
 8004584:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004588:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800458c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004590:	0412      	lsls	r2, r2, #16
 8004592:	0c12      	lsrs	r2, r2, #16
 8004594:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004598:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800459c:	b292      	uxth	r2, r2
 800459e:	f042 0204 	orr.w	r2, r2, #4
 80045a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80045a6:	f002 f8af 	bl	8006708 <HAL_PCD_SuspendCallback>
    return;
 80045aa:	f7ff bb27 	b.w	8003bfc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80045ae:	0582      	lsls	r2, r0, #22
 80045b0:	d50d      	bpl.n	80045ce <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045b2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80045b4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045b6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80045ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	0c1b      	lsrs	r3, r3, #16
 80045c2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80045c6:	f002 f888 	bl	80066da <HAL_PCD_SOFCallback>
    return;
 80045ca:	f7ff bb17 	b.w	8003bfc <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80045ce:	05c3      	lsls	r3, r0, #23
 80045d0:	f57f ab14 	bpl.w	8003bfc <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80045da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045de:	e771      	b.n	80044c4 <HAL_PCD_IRQHandler+0x8ec>

080045e0 <HAL_PCD_EP_Open>:
{
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	2428      	movs	r4, #40	@ 0x28
 80045e4:	4605      	mov	r5, r0
 80045e6:	f001 0007 	and.w	r0, r1, #7
 80045ea:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80045ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f0:	bf14      	ite	ne
 80045f2:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045f6:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80045fa:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80045fe:	bf15      	itete	ne
 8004600:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8004602:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8004604:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8004606:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460a:	bf14      	ite	ne
 800460c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800460e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8004610:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8004612:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8004614:	bf08      	it	eq
 8004616:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004618:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800461a:	bf08      	it	eq
 800461c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800461e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004620:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8004624:	2b01      	cmp	r3, #1
 8004626:	d009      	beq.n	800463c <HAL_PCD_EP_Open+0x5c>
 8004628:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800462a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800462c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004630:	f000 fc74 	bl	8004f1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004634:	2000      	movs	r0, #0
 8004636:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800463a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800463c:	2002      	movs	r0, #2
 800463e:	e7fc      	b.n	800463a <HAL_PCD_EP_Open+0x5a>

08004640 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004640:	2328      	movs	r3, #40	@ 0x28
 8004642:	f001 0207 	and.w	r2, r1, #7
 8004646:	4353      	muls	r3, r2
 8004648:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800464c:	b510      	push	{r4, lr}
 800464e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004650:	bf18      	it	ne
 8004652:	f103 0110 	addne.w	r1, r3, #16
 8004656:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004658:	bf0b      	itete	eq
 800465a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 800465e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004660:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004662:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004664:	bf0a      	itet	eq
 8004666:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004668:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800466a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800466e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004670:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8004674:	2b01      	cmp	r3, #1
 8004676:	d009      	beq.n	800468c <HAL_PCD_EP_Close+0x4c>
 8004678:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800467a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800467c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004680:	f000 fdac 	bl	80051dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004684:	2000      	movs	r0, #0
 8004686:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800468a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800468c:	2002      	movs	r0, #2
 800468e:	e7fc      	b.n	800468a <HAL_PCD_EP_Close+0x4a>

08004690 <HAL_PCD_EP_Receive>:
{
 8004690:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8004692:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8004694:	2600      	movs	r6, #0
 8004696:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800469a:	434c      	muls	r4, r1
 800469c:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800469e:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046a6:	4401      	add	r1, r0
  ep->xfer_len = len;
 80046a8:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80046ac:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80046b0:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046b4:	6800      	ldr	r0, [r0, #0]
 80046b6:	f000 feed 	bl	8005494 <USB_EPStartXfer>
}
 80046ba:	4630      	mov	r0, r6
 80046bc:	bd70      	pop	{r4, r5, r6, pc}

080046be <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046be:	2328      	movs	r3, #40	@ 0x28
 80046c0:	f001 0107 	and.w	r1, r1, #7
 80046c4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80046c8:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80046cc:	4770      	bx	lr

080046ce <HAL_PCD_EP_Transmit>:
{
 80046ce:	b570      	push	{r4, r5, r6, lr}
 80046d0:	2528      	movs	r5, #40	@ 0x28
 80046d2:	f001 0107 	and.w	r1, r1, #7
 80046d6:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80046d8:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80046da:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80046dc:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80046e0:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e2:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e4:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046e8:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80046ea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80046ee:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80046f0:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80046f2:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046f4:	6800      	ldr	r0, [r0, #0]
 80046f6:	f000 fecd 	bl	8005494 <USB_EPStartXfer>
}
 80046fa:	4630      	mov	r0, r6
 80046fc:	bd70      	pop	{r4, r5, r6, pc}

080046fe <HAL_PCD_EP_SetStall>:
{
 80046fe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004700:	7903      	ldrb	r3, [r0, #4]
 8004702:	f001 0507 	and.w	r5, r1, #7
 8004706:	42ab      	cmp	r3, r5
{
 8004708:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800470a:	d32a      	bcc.n	8004762 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800470c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004710:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8004714:	d01c      	beq.n	8004750 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8004716:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	436b      	muls	r3, r5
 800471a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800471e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004720:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004722:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8004724:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004726:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004728:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800472a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800472e:	429a      	cmp	r2, r3
 8004730:	d019      	beq.n	8004766 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004732:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004734:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004738:	f000 fe23 	bl	8005382 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800473c:	b925      	cbnz	r5, 8004748 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8004744:	f000 fe94 	bl	8005470 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004748:	2000      	movs	r0, #0
 800474a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800474e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004750:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004752:	434b      	muls	r3, r1
 8004754:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8004758:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800475a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800475c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8004760:	e7e0      	b.n	8004724 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8004762:	2001      	movs	r0, #1
 8004764:	e7f3      	b.n	800474e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8004766:	2002      	movs	r0, #2
 8004768:	e7f1      	b.n	800474e <HAL_PCD_EP_SetStall+0x50>

0800476a <HAL_PCD_EP_ClrStall>:
{
 800476a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800476c:	7902      	ldrb	r2, [r0, #4]
 800476e:	f001 030f 	and.w	r3, r1, #15
 8004772:	429a      	cmp	r2, r3
{
 8004774:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004776:	d326      	bcc.n	80047c6 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8004778:	2328      	movs	r3, #40	@ 0x28
 800477a:	f001 0207 	and.w	r2, r1, #7
 800477e:	4353      	muls	r3, r2
 8004780:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004784:	bf14      	ite	ne
 8004786:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800478a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800478e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8004790:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8004794:	bf15      	itete	ne
 8004796:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004798:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800479a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800479e:	bf14      	ite	ne
 80047a0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80047a2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80047a6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80047aa:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d00b      	beq.n	80047ca <HAL_PCD_EP_ClrStall+0x60>
 80047b2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80047b6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ba:	f000 fe02 	bl	80053c2 <USB_EPClearStall>
  return HAL_OK;
 80047be:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80047c0:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80047c6:	2001      	movs	r0, #1
 80047c8:	e7fc      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80047ca:	2002      	movs	r0, #2
 80047cc:	e7fa      	b.n	80047c4 <HAL_PCD_EP_ClrStall+0x5a>

080047ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047ce:	b510      	push	{r4, lr}
 80047d0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80047d2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d6:	bf1b      	ittet	ne
 80047d8:	f001 0107 	andne.w	r1, r1, #7
 80047dc:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047e0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047e4:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80047e6:	bf08      	it	eq
 80047e8:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047ec:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80047ee:	b91a      	cbnz	r2, 80047f8 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80047f0:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80047f2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80047f4:	2000      	movs	r0, #0
 80047f6:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80047f8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047fa:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80047fc:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047fe:	e7f9      	b.n	80047f4 <HAL_PCDEx_PMAConfig+0x26>

08004800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	4605      	mov	r5, r0
 8004806:	b338      	cbz	r0, 8004858 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	07db      	lsls	r3, r3, #31
 800480c:	d410      	bmi.n	8004830 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	682b      	ldr	r3, [r5, #0]
 8004810:	079f      	lsls	r7, r3, #30
 8004812:	d45e      	bmi.n	80048d2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	0719      	lsls	r1, r3, #28
 8004818:	f100 8095 	bmi.w	8004946 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	075a      	lsls	r2, r3, #29
 8004820:	f100 80c1 	bmi.w	80049a6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004824:	69eb      	ldr	r3, [r5, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 812c 	bne.w	8004a84 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800482c:	2000      	movs	r0, #0
 800482e:	e029      	b.n	8004884 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004830:	4c90      	ldr	r4, [pc, #576]	@ (8004a74 <HAL_RCC_OscConfig+0x274>)
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b04      	cmp	r3, #4
 800483a:	d007      	beq.n	800484c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b08      	cmp	r3, #8
 8004844:	d10a      	bne.n	800485c <HAL_RCC_OscConfig+0x5c>
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	03de      	lsls	r6, r3, #15
 800484a:	d507      	bpl.n	800485c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	039c      	lsls	r4, r3, #14
 8004850:	d5dd      	bpl.n	800480e <HAL_RCC_OscConfig+0xe>
 8004852:	686b      	ldr	r3, [r5, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1da      	bne.n	800480e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004858:	2001      	movs	r0, #1
 800485a:	e013      	b.n	8004884 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800485c:	686b      	ldr	r3, [r5, #4]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	d112      	bne.n	800488a <HAL_RCC_OscConfig+0x8a>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800486c:	f7fe ffa2 	bl	80037b4 <HAL_GetTick>
 8004870:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0398      	lsls	r0, r3, #14
 8004876:	d4ca      	bmi.n	800480e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe ff9c 	bl	80037b4 <HAL_GetTick>
 800487c:	1b80      	subs	r0, r0, r6
 800487e:	2864      	cmp	r0, #100	@ 0x64
 8004880:	d9f7      	bls.n	8004872 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004882:	2003      	movs	r0, #3
}
 8004884:	b002      	add	sp, #8
 8004886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488a:	b99b      	cbnz	r3, 80048b4 <HAL_RCC_OscConfig+0xb4>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800489a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800489c:	f7fe ff8a 	bl	80037b4 <HAL_GetTick>
 80048a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	0399      	lsls	r1, r3, #14
 80048a6:	d5b2      	bpl.n	800480e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe ff84 	bl	80037b4 <HAL_GetTick>
 80048ac:	1b80      	subs	r0, r0, r6
 80048ae:	2864      	cmp	r0, #100	@ 0x64
 80048b0:	d9f7      	bls.n	80048a2 <HAL_RCC_OscConfig+0xa2>
 80048b2:	e7e6      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	d103      	bne.n	80048c4 <HAL_RCC_OscConfig+0xc4>
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	e7cf      	b.n	8004864 <HAL_RCC_OscConfig+0x64>
 80048c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048d0:	e7cb      	b.n	800486a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048d2:	4c68      	ldr	r4, [pc, #416]	@ (8004a74 <HAL_RCC_OscConfig+0x274>)
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	f013 0f0c 	tst.w	r3, #12
 80048da:	d007      	beq.n	80048ec <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d110      	bne.n	8004908 <HAL_RCC_OscConfig+0x108>
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	03da      	lsls	r2, r3, #15
 80048ea:	d40d      	bmi.n	8004908 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	079b      	lsls	r3, r3, #30
 80048f0:	d502      	bpl.n	80048f8 <HAL_RCC_OscConfig+0xf8>
 80048f2:	692b      	ldr	r3, [r5, #16]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d1af      	bne.n	8004858 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	696a      	ldr	r2, [r5, #20]
 80048fc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004900:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	e785      	b.n	8004814 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004908:	692a      	ldr	r2, [r5, #16]
 800490a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <HAL_RCC_OscConfig+0x278>)
 800490c:	b16a      	cbz	r2, 800492a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004912:	f7fe ff4f 	bl	80037b4 <HAL_GetTick>
 8004916:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	079f      	lsls	r7, r3, #30
 800491c:	d4ec      	bmi.n	80048f8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800491e:	f7fe ff49 	bl	80037b4 <HAL_GetTick>
 8004922:	1b80      	subs	r0, r0, r6
 8004924:	2802      	cmp	r0, #2
 8004926:	d9f7      	bls.n	8004918 <HAL_RCC_OscConfig+0x118>
 8004928:	e7ab      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800492a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800492c:	f7fe ff42 	bl	80037b4 <HAL_GetTick>
 8004930:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0798      	lsls	r0, r3, #30
 8004936:	f57f af6d 	bpl.w	8004814 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493a:	f7fe ff3b 	bl	80037b4 <HAL_GetTick>
 800493e:	1b80      	subs	r0, r0, r6
 8004940:	2802      	cmp	r0, #2
 8004942:	d9f6      	bls.n	8004932 <HAL_RCC_OscConfig+0x132>
 8004944:	e79d      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004946:	69aa      	ldr	r2, [r5, #24]
 8004948:	4e4a      	ldr	r6, [pc, #296]	@ (8004a74 <HAL_RCC_OscConfig+0x274>)
 800494a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a78 <HAL_RCC_OscConfig+0x278>)
 800494c:	b1e2      	cbz	r2, 8004988 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800494e:	2201      	movs	r2, #1
 8004950:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004954:	f7fe ff2e 	bl	80037b4 <HAL_GetTick>
 8004958:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800495c:	079b      	lsls	r3, r3, #30
 800495e:	d50d      	bpl.n	800497c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004960:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004964:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <HAL_RCC_OscConfig+0x27c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	fbb3 f3f2 	udiv	r3, r3, r2
 800496c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800496e:	bf00      	nop
  }
  while (Delay --);
 8004970:	9b01      	ldr	r3, [sp, #4]
 8004972:	1e5a      	subs	r2, r3, #1
 8004974:	9201      	str	r2, [sp, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f9      	bne.n	800496e <HAL_RCC_OscConfig+0x16e>
 800497a:	e74f      	b.n	800481c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fe ff1a 	bl	80037b4 <HAL_GetTick>
 8004980:	1b00      	subs	r0, r0, r4
 8004982:	2802      	cmp	r0, #2
 8004984:	d9e9      	bls.n	800495a <HAL_RCC_OscConfig+0x15a>
 8004986:	e77c      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8004988:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800498c:	f7fe ff12 	bl	80037b4 <HAL_GetTick>
 8004990:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004992:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004994:	079f      	lsls	r7, r3, #30
 8004996:	f57f af41 	bpl.w	800481c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800499a:	f7fe ff0b 	bl	80037b4 <HAL_GetTick>
 800499e:	1b00      	subs	r0, r0, r4
 80049a0:	2802      	cmp	r0, #2
 80049a2:	d9f6      	bls.n	8004992 <HAL_RCC_OscConfig+0x192>
 80049a4:	e76d      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a6:	4c33      	ldr	r4, [pc, #204]	@ (8004a74 <HAL_RCC_OscConfig+0x274>)
 80049a8:	69e3      	ldr	r3, [r4, #28]
 80049aa:	00d8      	lsls	r0, r3, #3
 80049ac:	d424      	bmi.n	80049f8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80049ae:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b0:	69e3      	ldr	r3, [r4, #28]
 80049b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b6:	61e3      	str	r3, [r4, #28]
 80049b8:	69e3      	ldr	r3, [r4, #28]
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4e2f      	ldr	r6, [pc, #188]	@ (8004a80 <HAL_RCC_OscConfig+0x280>)
 80049c4:	6833      	ldr	r3, [r6, #0]
 80049c6:	05d9      	lsls	r1, r3, #23
 80049c8:	d518      	bpl.n	80049fc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ca:	68eb      	ldr	r3, [r5, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d126      	bne.n	8004a1e <HAL_RCC_OscConfig+0x21e>
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80049d8:	f7fe feec 	bl	80037b4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80049e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e2:	6a23      	ldr	r3, [r4, #32]
 80049e4:	079b      	lsls	r3, r3, #30
 80049e6:	d53f      	bpl.n	8004a68 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80049e8:	2f00      	cmp	r7, #0
 80049ea:	f43f af1b 	beq.w	8004824 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ee:	69e3      	ldr	r3, [r4, #28]
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f4:	61e3      	str	r3, [r4, #28]
 80049f6:	e715      	b.n	8004824 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80049f8:	2700      	movs	r7, #0
 80049fa:	e7e2      	b.n	80049c2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004a04:	f7fe fed6 	bl	80037b4 <HAL_GetTick>
 8004a08:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0a:	6833      	ldr	r3, [r6, #0]
 8004a0c:	05da      	lsls	r2, r3, #23
 8004a0e:	d4dc      	bmi.n	80049ca <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a10:	f7fe fed0 	bl	80037b4 <HAL_GetTick>
 8004a14:	eba0 0008 	sub.w	r0, r0, r8
 8004a18:	2864      	cmp	r0, #100	@ 0x64
 8004a1a:	d9f6      	bls.n	8004a0a <HAL_RCC_OscConfig+0x20a>
 8004a1c:	e731      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a1e:	b9ab      	cbnz	r3, 8004a4c <HAL_RCC_OscConfig+0x24c>
 8004a20:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	6223      	str	r3, [r4, #32]
 8004a2c:	6a23      	ldr	r3, [r4, #32]
 8004a2e:	f023 0304 	bic.w	r3, r3, #4
 8004a32:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004a34:	f7fe febe 	bl	80037b4 <HAL_GetTick>
 8004a38:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	6a23      	ldr	r3, [r4, #32]
 8004a3c:	0798      	lsls	r0, r3, #30
 8004a3e:	d5d3      	bpl.n	80049e8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fe feb8 	bl	80037b4 <HAL_GetTick>
 8004a44:	1b80      	subs	r0, r0, r6
 8004a46:	4540      	cmp	r0, r8
 8004a48:	d9f7      	bls.n	8004a3a <HAL_RCC_OscConfig+0x23a>
 8004a4a:	e71a      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	6a23      	ldr	r3, [r4, #32]
 8004a50:	d103      	bne.n	8004a5a <HAL_RCC_OscConfig+0x25a>
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	6223      	str	r3, [r4, #32]
 8004a58:	e7ba      	b.n	80049d0 <HAL_RCC_OscConfig+0x1d0>
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	6223      	str	r3, [r4, #32]
 8004a60:	6a23      	ldr	r3, [r4, #32]
 8004a62:	f023 0304 	bic.w	r3, r3, #4
 8004a66:	e7b6      	b.n	80049d6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe fea4 	bl	80037b4 <HAL_GetTick>
 8004a6c:	1b80      	subs	r0, r0, r6
 8004a6e:	4540      	cmp	r0, r8
 8004a70:	d9b7      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1e2>
 8004a72:	e706      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
 8004a74:	40021000 	.word	0x40021000
 8004a78:	42420000 	.word	0x42420000
 8004a7c:	2000000c 	.word	0x2000000c
 8004a80:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a84:	4c2a      	ldr	r4, [pc, #168]	@ (8004b30 <HAL_RCC_OscConfig+0x330>)
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	f002 020c 	and.w	r2, r2, #12
 8004a8c:	2a08      	cmp	r2, #8
 8004a8e:	d03e      	beq.n	8004b0e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a90:	2200      	movs	r2, #0
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	4b27      	ldr	r3, [pc, #156]	@ (8004b34 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8004a96:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a98:	d12c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004a9a:	f7fe fe8b 	bl	80037b4 <HAL_GetTick>
 8004a9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	0199      	lsls	r1, r3, #6
 8004aa4:	d420      	bmi.n	8004ae8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aa6:	6a2b      	ldr	r3, [r5, #32]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aac:	d105      	bne.n	8004aba <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aae:	6862      	ldr	r2, [r4, #4]
 8004ab0:	68a9      	ldr	r1, [r5, #8]
 8004ab2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aba:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004abc:	6862      	ldr	r2, [r4, #4]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004ac4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004ac6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_RCC_OscConfig+0x334>)
 8004acc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004ace:	f7fe fe71 	bl	80037b4 <HAL_GetTick>
 8004ad2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	f53f aea8 	bmi.w	800482c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fe fe6a 	bl	80037b4 <HAL_GetTick>
 8004ae0:	1b40      	subs	r0, r0, r5
 8004ae2:	2802      	cmp	r0, #2
 8004ae4:	d9f6      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x2d4>
 8004ae6:	e6cc      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe fe64 	bl	80037b4 <HAL_GetTick>
 8004aec:	1b80      	subs	r0, r0, r6
 8004aee:	2802      	cmp	r0, #2
 8004af0:	d9d6      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2a0>
 8004af2:	e6c6      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004af4:	f7fe fe5e 	bl	80037b4 <HAL_GetTick>
 8004af8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	f57f ae95 	bpl.w	800482c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b02:	f7fe fe57 	bl	80037b4 <HAL_GetTick>
 8004b06:	1b40      	subs	r0, r0, r5
 8004b08:	2802      	cmp	r0, #2
 8004b0a:	d9f6      	bls.n	8004afa <HAL_RCC_OscConfig+0x2fa>
 8004b0c:	e6b9      	b.n	8004882 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f43f aea2 	beq.w	8004858 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004b14:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	6a2b      	ldr	r3, [r5, #32]
 8004b18:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	f47f ae9b 	bne.w	8004858 <HAL_RCC_OscConfig+0x58>
 8004b22:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b24:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b28:	1ac0      	subs	r0, r0, r3
 8004b2a:	bf18      	it	ne
 8004b2c:	2001      	movne	r0, #1
 8004b2e:	e6a9      	b.n	8004884 <HAL_RCC_OscConfig+0x84>
 8004b30:	40021000 	.word	0x40021000
 8004b34:	42420000 	.word	0x42420000

08004b38 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004b38:	4a0d      	ldr	r2, [pc, #52]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x38>)
 8004b3a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004b3c:	f003 010c 	and.w	r1, r3, #12
 8004b40:	2908      	cmp	r1, #8
 8004b42:	d112      	bne.n	8004b6a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b44:	480b      	ldr	r0, [pc, #44]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b46:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b4a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b4c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b4e:	d509      	bpl.n	8004b64 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b50:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b52:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b54:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b58:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b5a:	4a08      	ldr	r2, [pc, #32]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x44>)
 8004b5c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b62:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x48>)
 8004b66:	4358      	muls	r0, r3
 8004b68:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8004b6a:	4803      	ldr	r0, [pc, #12]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	0800c26d 	.word	0x0800c26d
 8004b78:	007a1200 	.word	0x007a1200
 8004b7c:	0800c26b 	.word	0x0800c26b
 8004b80:	003d0900 	.word	0x003d0900

08004b84 <HAL_RCC_ClockConfig>:
{
 8004b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b88:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	b910      	cbnz	r0, 8004b94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b8e:	2001      	movs	r0, #1
}
 8004b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4a44      	ldr	r2, [pc, #272]	@ (8004ca8 <HAL_RCC_ClockConfig+0x124>)
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	d328      	bcc.n	8004bf2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba0:	6821      	ldr	r1, [r4, #0]
 8004ba2:	078e      	lsls	r6, r1, #30
 8004ba4:	d430      	bmi.n	8004c08 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	07ca      	lsls	r2, r1, #31
 8004ba8:	d443      	bmi.n	8004c32 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4a3f      	ldr	r2, [pc, #252]	@ (8004ca8 <HAL_RCC_ClockConfig+0x124>)
 8004bac:	6813      	ldr	r3, [r2, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	42ab      	cmp	r3, r5
 8004bb4:	d865      	bhi.n	8004c82 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	4d3c      	ldr	r5, [pc, #240]	@ (8004cac <HAL_RCC_ClockConfig+0x128>)
 8004bba:	f012 0f04 	tst.w	r2, #4
 8004bbe:	d16c      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	0713      	lsls	r3, r2, #28
 8004bc2:	d506      	bpl.n	8004bd2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bc4:	686b      	ldr	r3, [r5, #4]
 8004bc6:	6922      	ldr	r2, [r4, #16]
 8004bc8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004bcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004bd0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bd2:	f7ff ffb1 	bl	8004b38 <HAL_RCC_GetSysClockFreq>
 8004bd6:	686b      	ldr	r3, [r5, #4]
 8004bd8:	4a35      	ldr	r2, [pc, #212]	@ (8004cb0 <HAL_RCC_ClockConfig+0x12c>)
 8004bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	40d8      	lsrs	r0, r3
 8004be2:	4b34      	ldr	r3, [pc, #208]	@ (8004cb4 <HAL_RCC_ClockConfig+0x130>)
 8004be4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004be6:	4b34      	ldr	r3, [pc, #208]	@ (8004cb8 <HAL_RCC_ClockConfig+0x134>)
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f7fe fda1 	bl	8003730 <HAL_InitTick>
  return HAL_OK;
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e7ce      	b.n	8004b90 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	f023 0307 	bic.w	r3, r3, #7
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	428b      	cmp	r3, r1
 8004c04:	d1c3      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xa>
 8004c06:	e7cb      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCC_ClockConfig+0x128>)
 8004c0a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c0e:	bf1e      	ittt	ne
 8004c10:	685a      	ldrne	r2, [r3, #4]
 8004c12:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004c16:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c18:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c1a:	bf42      	ittt	mi
 8004c1c:	685a      	ldrmi	r2, [r3, #4]
 8004c1e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004c22:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	68a0      	ldr	r0, [r4, #8]
 8004c28:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c2c:	4302      	orrs	r2, r0
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	e7b9      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	4e1d      	ldr	r6, [pc, #116]	@ (8004cac <HAL_RCC_ClockConfig+0x128>)
 8004c36:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c38:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3a:	d11a      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	d0a5      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c42:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c48:	f023 0303 	bic.w	r3, r3, #3
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004c50:	f7fe fdb0 	bl	80037b4 <HAL_GetTick>
 8004c54:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	6873      	ldr	r3, [r6, #4]
 8004c58:	6862      	ldr	r2, [r4, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c62:	d0a2      	beq.n	8004baa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fe fda6 	bl	80037b4 <HAL_GetTick>
 8004c68:	1bc0      	subs	r0, r0, r7
 8004c6a:	4540      	cmp	r0, r8
 8004c6c:	d9f3      	bls.n	8004c56 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004c6e:	2003      	movs	r0, #3
 8004c70:	e78e      	b.n	8004b90 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c72:	2a02      	cmp	r2, #2
 8004c74:	d102      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c76:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004c7a:	e7e1      	b.n	8004c40 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7c:	f013 0f02 	tst.w	r3, #2
 8004c80:	e7de      	b.n	8004c40 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	f023 0307 	bic.w	r3, r3, #7
 8004c88:	432b      	orrs	r3, r5
 8004c8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	42ab      	cmp	r3, r5
 8004c94:	f47f af7b 	bne.w	8004b8e <HAL_RCC_ClockConfig+0xa>
 8004c98:	e78d      	b.n	8004bb6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c9a:	686b      	ldr	r3, [r5, #4]
 8004c9c:	68e1      	ldr	r1, [r4, #12]
 8004c9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	606b      	str	r3, [r5, #4]
 8004ca6:	e78b      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x3c>
 8004ca8:	40022000 	.word	0x40022000
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	0800c25b 	.word	0x0800c25b
 8004cb4:	2000000c 	.word	0x2000000c
 8004cb8:	20000014 	.word	0x20000014

08004cbc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004cbe:	4a05      	ldr	r2, [pc, #20]	@ (8004cd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004cc6:	5cd3      	ldrb	r3, [r2, r3]
 8004cc8:	4a03      	ldr	r2, [pc, #12]	@ (8004cd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004cca:	6810      	ldr	r0, [r2, #0]
}
 8004ccc:	40d8      	lsrs	r0, r3
 8004cce:	4770      	bx	lr
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	0800c253 	.word	0x0800c253
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cdc:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004cde:	4a05      	ldr	r2, [pc, #20]	@ (8004cf4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ce6:	5cd3      	ldrb	r3, [r2, r3]
 8004ce8:	4a03      	ldr	r2, [pc, #12]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004cea:	6810      	ldr	r0, [r2, #0]
}
 8004cec:	40d8      	lsrs	r0, r3
 8004cee:	4770      	bx	lr
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800c253 	.word	0x0800c253
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cfc:	6803      	ldr	r3, [r0, #0]
{
 8004cfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d02:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d04:	07d8      	lsls	r0, r3, #31
 8004d06:	d521      	bpl.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d08:	4c36      	ldr	r4, [pc, #216]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d0a:	69e3      	ldr	r3, [r4, #28]
 8004d0c:	00d9      	lsls	r1, r3, #3
 8004d0e:	d42b      	bmi.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004d10:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	69e3      	ldr	r3, [r4, #28]
 8004d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	61e3      	str	r3, [r4, #28]
 8004d1a:	69e3      	ldr	r3, [r4, #28]
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	4f30      	ldr	r7, [pc, #192]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	05da      	lsls	r2, r3, #23
 8004d2a:	d51f      	bpl.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d2e:	686a      	ldr	r2, [r5, #4]
 8004d30:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004d34:	d12e      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d36:	6a23      	ldr	r3, [r4, #32]
 8004d38:	686a      	ldr	r2, [r5, #4]
 8004d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d42:	b11e      	cbz	r6, 8004d4c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d44:	69e3      	ldr	r3, [r4, #28]
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d4c:	682a      	ldr	r2, [r5, #0]
 8004d4e:	0791      	lsls	r1, r2, #30
 8004d50:	d506      	bpl.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d52:	4924      	ldr	r1, [pc, #144]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d54:	68a8      	ldr	r0, [r5, #8]
 8004d56:	684b      	ldr	r3, [r1, #4]
 8004d58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004d5c:	4303      	orrs	r3, r0
 8004d5e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d60:	06d3      	lsls	r3, r2, #27
 8004d62:	d436      	bmi.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d64:	2000      	movs	r0, #0
 8004d66:	e012      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8004d68:	2600      	movs	r6, #0
 8004d6a:	e7db      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d72:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004d74:	f7fe fd1e 	bl	80037b4 <HAL_GetTick>
 8004d78:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	d4d5      	bmi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fe fd18 	bl	80037b4 <HAL_GetTick>
 8004d84:	eba0 0008 	sub.w	r0, r0, r8
 8004d88:	2864      	cmp	r0, #100	@ 0x64
 8004d8a:	d9f6      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
}
 8004d8e:	b002      	add	sp, #8
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d94:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d0cc      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004da2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004da6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dac:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dae:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8004db2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004db4:	d5bf      	bpl.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8004db6:	f7fe fcfd 	bl	80037b4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004dbe:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc0:	6a23      	ldr	r3, [r4, #32]
 8004dc2:	0798      	lsls	r0, r3, #30
 8004dc4:	d4b7      	bmi.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fe fcf5 	bl	80037b4 <HAL_GetTick>
 8004dca:	1bc0      	subs	r0, r0, r7
 8004dcc:	4540      	cmp	r0, r8
 8004dce:	d9f7      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004dd0:	e7dc      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dd2:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004dd4:	68e9      	ldr	r1, [r5, #12]
 8004dd6:	6853      	ldr	r3, [r2, #4]
 8004dd8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6053      	str	r3, [r2, #4]
 8004de0:	e7c0      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42420000 	.word	0x42420000

08004df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b510      	push	{r4, lr}
 8004df2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	6803      	ldr	r3, [r0, #0]
 8004df6:	68c1      	ldr	r1, [r0, #12]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e02:	6882      	ldr	r2, [r0, #8]
 8004e04:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004e06:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e08:	4302      	orrs	r2, r0
 8004e0a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004e0c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004e10:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e14:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004e16:	430a      	orrs	r2, r1
 8004e18:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	69a1      	ldr	r1, [r4, #24]
 8004e1e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e22:	430a      	orrs	r2, r1
 8004e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e26:	4a0e      	ldr	r2, [pc, #56]	@ (8004e60 <UART_SetConfig+0x70>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d115      	bne.n	8004e58 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7ff ff56 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e30:	2319      	movs	r3, #25
 8004e32:	4343      	muls	r3, r0
 8004e34:	6862      	ldr	r2, [r4, #4]
 8004e36:	6820      	ldr	r0, [r4, #0]
 8004e38:	0092      	lsls	r2, r2, #2
 8004e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3e:	2264      	movs	r2, #100	@ 0x64
 8004e40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e44:	fb02 3311 	mls	r3, r2, r1, r3
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	3332      	adds	r3, #50	@ 0x32
 8004e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e50:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004e54:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e56:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e58:	f7ff ff30 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 8004e5c:	e7e8      	b.n	8004e30 <UART_SetConfig+0x40>
 8004e5e:	bf00      	nop
 8004e60:	40013800 	.word	0x40013800

08004e64 <HAL_UART_Init>:
{
 8004e64:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004e66:	4604      	mov	r4, r0
 8004e68:	b348      	cbz	r0, 8004ebe <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004e6e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004e72:	b91b      	cbnz	r3, 8004e7c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004e74:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004e78:	f7fe fb80 	bl	800357c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004e7e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004e80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004e84:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004e86:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004e88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e8c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004e8e:	f7ff ffaf 	bl	8004df0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e92:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e94:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ea4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eac:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004eae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eba:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004ebc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	e7fc      	b.n	8004ebc <HAL_UART_Init+0x58>

08004ec2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	a804      	add	r0, sp, #16
 8004ec6:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004eca:	2000      	movs	r0, #0
 8004ecc:	b004      	add	sp, #16
 8004ece:	4770      	bx	lr

08004ed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ed0:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ed2:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004edc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8004ee0:	4770      	bx	lr

08004ee2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ee2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8004ee6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004eea:	045b      	lsls	r3, r3, #17
 8004eec:	0c5b      	lsrs	r3, r3, #17
 8004eee:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	4770      	bx	lr

08004ef6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	4770      	bx	lr

08004efa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004efa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004efc:	4604      	mov	r4, r0
 8004efe:	a804      	add	r0, sp, #16
 8004f00:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f04:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8004f0c:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f10:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f14:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8004f18:	b004      	add	sp, #16
 8004f1a:	bd10      	pop	{r4, pc}

08004f1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f1e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004f20:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f22:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8004f26:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f28:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8004f2c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8004f30:	0424      	lsls	r4, r4, #16
 8004f32:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8004f34:	2d03      	cmp	r5, #3
 8004f36:	d803      	bhi.n	8004f40 <USB_ActivateEndpoint+0x24>
 8004f38:	e8df f005 	tbb	[pc, r5]
 8004f3c:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f42:	f248 0680 	movw	r6, #32896	@ 0x8080
 8004f46:	4334      	orrs	r4, r6
 8004f48:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f4c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004f50:	4f9f      	ldr	r7, [pc, #636]	@ (80051d0 <USB_ActivateEndpoint+0x2b4>)
 8004f52:	b2a4      	uxth	r4, r4
 8004f54:	403c      	ands	r4, r7
 8004f56:	4314      	orrs	r4, r2
 8004f58:	4334      	orrs	r4, r6
 8004f5a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004f5e:	7b0c      	ldrb	r4, [r1, #12]
 8004f60:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	f040 808d 	bne.w	8005084 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f6a:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004f6c:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f6e:	0864      	lsrs	r4, r4, #1
 8004f70:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8004f72:	b37e      	cbz	r6, 8004fd4 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f74:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004f78:	b289      	uxth	r1, r1
 8004f7a:	4461      	add	r1, ip
 8004f7c:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f80:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f84:	0649      	lsls	r1, r1, #25
 8004f86:	d509      	bpl.n	8004f9c <USB_ActivateEndpoint+0x80>
 8004f88:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f8c:	b289      	uxth	r1, r1
 8004f8e:	4039      	ands	r1, r7
 8004f90:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004f94:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004f98:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f9c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004fa0:	4c8c      	ldr	r4, [pc, #560]	@ (80051d4 <USB_ActivateEndpoint+0x2b8>)
 8004fa2:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004fa4:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fa6:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004faa:	d001      	beq.n	8004fb0 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fac:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004fb4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004fb8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004fbc:	e04c      	b.n	8005058 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8004fbe:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8004fc0:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8004fc4:	e7bd      	b.n	8004f42 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fc6:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8004fca:	2000      	movs	r0, #0
 8004fcc:	e7b9      	b.n	8004f42 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fce:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8004fd2:	e7fa      	b.n	8004fca <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fd4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fd8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fda:	b2ad      	uxth	r5, r5
 8004fdc:	4465      	add	r5, ip
 8004fde:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fe2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004fe6:	293e      	cmp	r1, #62	@ 0x3e
 8004fe8:	b2a4      	uxth	r4, r4
 8004fea:	4464      	add	r4, ip
 8004fec:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8004ff0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004ff4:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8004ff8:	d92f      	bls.n	800505a <USB_ActivateEndpoint+0x13e>
 8004ffa:	094d      	lsrs	r5, r1, #5
 8004ffc:	06ce      	lsls	r6, r1, #27
 8004ffe:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005002:	bf08      	it	eq
 8005004:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8005008:	b289      	uxth	r1, r1
 800500a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800500e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005012:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005016:	b289      	uxth	r1, r1
 8005018:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800501c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005020:	044f      	lsls	r7, r1, #17
 8005022:	d50d      	bpl.n	8005040 <USB_ActivateEndpoint+0x124>
 8005024:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005028:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800502c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005030:	0409      	lsls	r1, r1, #16
 8005032:	0c09      	lsrs	r1, r1, #16
 8005034:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005038:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800503c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8005040:	4c65      	ldr	r4, [pc, #404]	@ (80051d8 <USB_ActivateEndpoint+0x2bc>)
 8005042:	b9c2      	cbnz	r2, 8005076 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	b292      	uxth	r2, r2
 8005048:	4022      	ands	r2, r4
 800504a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 800504e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005052:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005056:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005058:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800505a:	b911      	cbnz	r1, 8005062 <USB_ActivateEndpoint+0x146>
 800505c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005060:	e7d5      	b.n	800500e <USB_ActivateEndpoint+0xf2>
 8005062:	084d      	lsrs	r5, r1, #1
 8005064:	07c9      	lsls	r1, r1, #31
 8005066:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 800506a:	bf48      	it	mi
 800506c:	3501      	addmi	r5, #1
 800506e:	b289      	uxth	r1, r1
 8005070:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8005074:	e7cf      	b.n	8005016 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005076:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800507a:	b289      	uxth	r1, r1
 800507c:	4021      	ands	r1, r4
 800507e:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8005082:	e795      	b.n	8004fb0 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8005084:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005086:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800508a:	d15b      	bne.n	8005144 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800508c:	b2a4      	uxth	r4, r4
 800508e:	403c      	ands	r4, r7
 8005090:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8005094:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8005098:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800509c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80050a0:	890e      	ldrh	r6, [r1, #8]
 80050a2:	b2a4      	uxth	r4, r4
 80050a4:	0876      	lsrs	r6, r6, #1
 80050a6:	4464      	add	r4, ip
 80050a8:	0076      	lsls	r6, r6, #1
 80050aa:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 80050ae:	894e      	ldrh	r6, [r1, #10]
 80050b0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80050b4:	0876      	lsrs	r6, r6, #1
 80050b6:	b2a4      	uxth	r4, r4
 80050b8:	4464      	add	r4, ip
 80050ba:	0076      	lsls	r6, r6, #1
 80050bc:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80050c0:	7849      	ldrb	r1, [r1, #1]
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d148      	bne.n	8005158 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80050ca:	044e      	lsls	r6, r1, #17
 80050cc:	d50d      	bpl.n	80050ea <USB_ActivateEndpoint+0x1ce>
 80050ce:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80050d2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80050d6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80050da:	0409      	lsls	r1, r1, #16
 80050dc:	0c09      	lsrs	r1, r1, #16
 80050de:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80050e2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80050e6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80050ee:	064d      	lsls	r5, r1, #25
 80050f0:	d50d      	bpl.n	800510e <USB_ActivateEndpoint+0x1f2>
 80050f2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80050f6:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80050fa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80050fe:	0409      	lsls	r1, r1, #16
 8005100:	0c09      	lsrs	r1, r1, #16
 8005102:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005106:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800510a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800510e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8005112:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005116:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800511a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800511e:	0409      	lsls	r1, r1, #16
 8005120:	0c09      	lsrs	r1, r1, #16
 8005122:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8005126:	4321      	orrs	r1, r4
 8005128:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005130:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005134:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005138:	0409      	lsls	r1, r1, #16
 800513a:	0c09      	lsrs	r1, r1, #16
 800513c:	430c      	orrs	r4, r1
 800513e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8005142:	e789      	b.n	8005058 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005144:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8005148:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 800514c:	0424      	lsls	r4, r4, #16
 800514e:	0c24      	lsrs	r4, r4, #16
 8005150:	4326      	orrs	r6, r4
 8005152:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8005156:	e7a1      	b.n	800509c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005158:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800515c:	044c      	lsls	r4, r1, #17
 800515e:	d50d      	bpl.n	800517c <USB_ActivateEndpoint+0x260>
 8005160:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005164:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005168:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800516c:	0409      	lsls	r1, r1, #16
 800516e:	0c09      	lsrs	r1, r1, #16
 8005170:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005174:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005178:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800517c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005180:	0649      	lsls	r1, r1, #25
 8005182:	d50d      	bpl.n	80051a0 <USB_ActivateEndpoint+0x284>
 8005184:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005188:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800518c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005190:	0409      	lsls	r1, r1, #16
 8005192:	0c09      	lsrs	r1, r1, #16
 8005194:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005198:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800519c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051a0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80051a4:	4c0b      	ldr	r4, [pc, #44]	@ (80051d4 <USB_ActivateEndpoint+0x2b8>)
 80051a6:	b289      	uxth	r1, r1
 80051a8:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 80051aa:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051ac:	bf18      	it	ne
 80051ae:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051b2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80051b6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80051ba:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051be:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80051c2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80051c6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80051ca:	0409      	lsls	r1, r1, #16
 80051cc:	0c09      	lsrs	r1, r1, #16
 80051ce:	e6ef      	b.n	8004fb0 <USB_ActivateEndpoint+0x94>
 80051d0:	ffff8f8f 	.word	0xffff8f8f
 80051d4:	ffff8fbf 	.word	0xffff8fbf
 80051d8:	ffffbf8f 	.word	0xffffbf8f

080051dc <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80051dc:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051de:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80051e0:	7b09      	ldrb	r1, [r1, #12]
 80051e2:	bbd9      	cbnz	r1, 800525c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80051e4:	b30a      	cbz	r2, 800522a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80051ea:	0651      	lsls	r1, r2, #25
 80051ec:	d50d      	bpl.n	800520a <USB_DeactivateEndpoint+0x2e>
 80051ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80051f2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80051f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80051fa:	0412      	lsls	r2, r2, #16
 80051fc:	0c12      	lsrs	r2, r2, #16
 80051fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005202:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005206:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800520a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800520e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005216:	0412      	lsls	r2, r2, #16
 8005218:	0c12      	lsrs	r2, r2, #16
 800521a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800521e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005222:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005226:	2000      	movs	r0, #0
 8005228:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800522e:	0452      	lsls	r2, r2, #17
 8005230:	d50d      	bpl.n	800524e <USB_DeactivateEndpoint+0x72>
 8005232:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005236:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800523a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800523e:	0412      	lsls	r2, r2, #16
 8005240:	0c12      	lsrs	r2, r2, #16
 8005242:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005246:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800524a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800524e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005252:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005256:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800525a:	e7dc      	b.n	8005216 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800525c:	2a00      	cmp	r2, #0
 800525e:	d14a      	bne.n	80052f6 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005260:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005264:	0451      	lsls	r1, r2, #17
 8005266:	d50d      	bpl.n	8005284 <USB_DeactivateEndpoint+0xa8>
 8005268:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800526c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005270:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005274:	0412      	lsls	r2, r2, #16
 8005276:	0c12      	lsrs	r2, r2, #16
 8005278:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800527c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005280:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005284:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005288:	0652      	lsls	r2, r2, #25
 800528a:	d50d      	bpl.n	80052a8 <USB_DeactivateEndpoint+0xcc>
 800528c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005290:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005294:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005298:	0412      	lsls	r2, r2, #16
 800529a:	0c12      	lsrs	r2, r2, #16
 800529c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052a0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80052a4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052a8:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 80052ac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052b0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80052b4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80052b8:	0412      	lsls	r2, r2, #16
 80052ba:	0c12      	lsrs	r2, r2, #16
 80052bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052c0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80052c4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052d0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80052d4:	0412      	lsls	r2, r2, #16
 80052d6:	0c12      	lsrs	r2, r2, #16
 80052d8:	430a      	orrs	r2, r1
 80052da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052e2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80052e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052ea:	0412      	lsls	r2, r2, #16
 80052ec:	0c12      	lsrs	r2, r2, #16
 80052ee:	4311      	orrs	r1, r2
 80052f0:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80052f4:	e797      	b.n	8005226 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80052fa:	0451      	lsls	r1, r2, #17
 80052fc:	d50d      	bpl.n	800531a <USB_DeactivateEndpoint+0x13e>
 80052fe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005302:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005306:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800530a:	0412      	lsls	r2, r2, #16
 800530c:	0c12      	lsrs	r2, r2, #16
 800530e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005312:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005316:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800531a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800531e:	0652      	lsls	r2, r2, #25
 8005320:	d50d      	bpl.n	800533e <USB_DeactivateEndpoint+0x162>
 8005322:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005326:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800532a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800532e:	0412      	lsls	r2, r2, #16
 8005330:	0c12      	lsrs	r2, r2, #16
 8005332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005336:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800533a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800533e:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005342:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005346:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800534a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800534e:	0412      	lsls	r2, r2, #16
 8005350:	0c12      	lsrs	r2, r2, #16
 8005352:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005356:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800535a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800535e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005362:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005366:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800536a:	0412      	lsls	r2, r2, #16
 800536c:	0c12      	lsrs	r2, r2, #16
 800536e:	430a      	orrs	r2, r1
 8005370:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005374:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005378:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800537c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005380:	e7b3      	b.n	80052ea <USB_DeactivateEndpoint+0x10e>

08005382 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005382:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005384:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005386:	b18b      	cbz	r3, 80053ac <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005388:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800538c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800539c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80053a8:	2000      	movs	r0, #0
 80053aa:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053c0:	e7ec      	b.n	800539c <USB_EPSetStall+0x1a>

080053c2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80053c2:	7b0b      	ldrb	r3, [r1, #12]
 80053c4:	bb3b      	cbnz	r3, 8005416 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80053c6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80053ca:	b333      	cbz	r3, 800541a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053d0:	065b      	lsls	r3, r3, #25
 80053d2:	d50d      	bpl.n	80053f0 <USB_EPClearStall+0x2e>
 80053d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	0c1b      	lsrs	r3, r3, #16
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80053f0:	78cb      	ldrb	r3, [r1, #3]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d00f      	beq.n	8005416 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800540a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005412:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005416:	2000      	movs	r0, #0
 8005418:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800541a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800541e:	045b      	lsls	r3, r3, #17
 8005420:	d50d      	bpl.n	800543e <USB_EPClearStall+0x7c>
 8005422:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542e:	041b      	lsls	r3, r3, #16
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800543e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005452:	e7da      	b.n	800540a <USB_EPClearStall+0x48>

08005454 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005454:	b911      	cbnz	r1, 800545c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005456:	2380      	movs	r3, #128	@ 0x80
 8005458:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800545c:	2000      	movs	r0, #0
 800545e:	4770      	bx	lr

08005460 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005460:	2000      	movs	r0, #0
 8005462:	4770      	bx	lr

08005464 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005464:	2000      	movs	r0, #0
 8005466:	4770      	bx	lr

08005468 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005468:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 800546c:	b280      	uxth	r0, r0
 800546e:	4770      	bx	lr

08005470 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005470:	2000      	movs	r0, #0
 8005472:	4770      	bx	lr

08005474 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005474:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005478:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800547a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8005484:	4283      	cmp	r3, r0
 8005486:	d100      	bne.n	800548a <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005488:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800548a:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800548e:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005492:	e7f7      	b.n	8005484 <USB_WritePMA+0x10>

08005494 <USB_EPStartXfer>:
{
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8005498:	784b      	ldrb	r3, [r1, #1]
{
 800549a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800549c:	2b01      	cmp	r3, #1
{
 800549e:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 80054a0:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 80054a2:	f040 8118 	bne.w	80056d6 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 80054a6:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80054aa:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054ac:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 80054ae:	454f      	cmp	r7, r9
 80054b0:	bf28      	it	cs
 80054b2:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80054b4:	bb0a      	cbnz	r2, 80054fa <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054b6:	b2bf      	uxth	r7, r7
 80054b8:	88ea      	ldrh	r2, [r5, #6]
 80054ba:	463b      	mov	r3, r7
 80054bc:	f7ff ffda 	bl	8005474 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054c0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80054c4:	7829      	ldrb	r1, [r5, #0]
 80054c6:	b280      	uxth	r0, r0
 80054c8:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80054cc:	0109      	lsls	r1, r1, #4
 80054ce:	4402      	add	r2, r0
 80054d0:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054d2:	782a      	ldrb	r2, [r5, #0]
 80054d4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 80054e8:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80054f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 80054fa:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054fc:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8005500:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8005502:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005504:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8005508:	f040 80d0 	bne.w	80056ac <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800550c:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800550e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8005512:	f080 80b4 	bcs.w	800567e <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005516:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800551a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800551e:	0412      	lsls	r2, r2, #16
 8005520:	0c12      	lsrs	r2, r2, #16
 8005522:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8005526:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800552a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800552e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005532:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8005536:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005538:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800553c:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800553e:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005542:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005544:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005548:	d04e      	beq.n	80055e8 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800554a:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800554e:	4472      	add	r2, lr
 8005550:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005554:	896a      	ldrh	r2, [r5, #10]
 8005556:	f7ff ff8d 	bl	8005474 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800555a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800555c:	bf36      	itet	cc
 800555e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005560:	2300      	movcs	r3, #0
 8005562:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005564:	786a      	ldrb	r2, [r5, #1]
 8005566:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8005568:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800556c:	b2b3      	uxth	r3, r6
 800556e:	bb7a      	cbnz	r2, 80055d0 <USB_EPStartXfer+0x13c>
 8005570:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005574:	7828      	ldrb	r0, [r5, #0]
 8005576:	b292      	uxth	r2, r2
 8005578:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 800557c:	0100      	lsls	r0, r0, #4
 800557e:	4411      	add	r1, r2
 8005580:	5a42      	ldrh	r2, [r0, r1]
 8005582:	2e3e      	cmp	r6, #62	@ 0x3e
 8005584:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005588:	5242      	strh	r2, [r0, r1]
 800558a:	d914      	bls.n	80055b6 <USB_EPStartXfer+0x122>
 800558c:	5a42      	ldrh	r2, [r0, r1]
 800558e:	0977      	lsrs	r7, r6, #5
 8005590:	06f6      	lsls	r6, r6, #27
 8005592:	bf08      	it	eq
 8005594:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005598:	b292      	uxth	r2, r2
 800559a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800559e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80055a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055a6:	b292      	uxth	r2, r2
 80055a8:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055aa:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ac:	4651      	mov	r1, sl
 80055ae:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b0:	f7ff ff60 	bl	8005474 <USB_WritePMA>
 80055b4:	e78d      	b.n	80054d2 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055b6:	b90e      	cbnz	r6, 80055bc <USB_EPStartXfer+0x128>
 80055b8:	5a42      	ldrh	r2, [r0, r1]
 80055ba:	e7f0      	b.n	800559e <USB_EPStartXfer+0x10a>
 80055bc:	07f2      	lsls	r2, r6, #31
 80055be:	5a42      	ldrh	r2, [r0, r1]
 80055c0:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80055c4:	bf48      	it	mi
 80055c6:	3701      	addmi	r7, #1
 80055c8:	b292      	uxth	r2, r2
 80055ca:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80055ce:	e7ea      	b.n	80055a6 <USB_EPStartXfer+0x112>
 80055d0:	2a01      	cmp	r2, #1
 80055d2:	d1ea      	bne.n	80055aa <USB_EPStartXfer+0x116>
 80055d4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80055d8:	7829      	ldrb	r1, [r5, #0]
 80055da:	b280      	uxth	r0, r0
 80055dc:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80055e0:	0109      	lsls	r1, r1, #4
 80055e2:	4402      	add	r2, r0
 80055e4:	528b      	strh	r3, [r1, r2]
 80055e6:	e7e0      	b.n	80055aa <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055e8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80055ec:	4472      	add	r2, lr
 80055ee:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055f2:	892a      	ldrh	r2, [r5, #8]
 80055f4:	f7ff ff3e 	bl	8005474 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80055f8:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80055fa:	bf36      	itet	cc
 80055fc:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80055fe:	4643      	movcs	r3, r8
 8005600:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005602:	786a      	ldrb	r2, [r5, #1]
 8005604:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8005606:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800560a:	b2b3      	uxth	r3, r6
 800560c:	bb5a      	cbnz	r2, 8005666 <USB_EPStartXfer+0x1d2>
 800560e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005612:	7828      	ldrb	r0, [r5, #0]
 8005614:	b292      	uxth	r2, r2
 8005616:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800561a:	0100      	lsls	r0, r0, #4
 800561c:	4411      	add	r1, r2
 800561e:	5a42      	ldrh	r2, [r0, r1]
 8005620:	2e3e      	cmp	r6, #62	@ 0x3e
 8005622:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005626:	5242      	strh	r2, [r0, r1]
 8005628:	d910      	bls.n	800564c <USB_EPStartXfer+0x1b8>
 800562a:	5a42      	ldrh	r2, [r0, r1]
 800562c:	0977      	lsrs	r7, r6, #5
 800562e:	06f6      	lsls	r6, r6, #27
 8005630:	bf08      	it	eq
 8005632:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005636:	b292      	uxth	r2, r2
 8005638:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800563c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005640:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005644:	b292      	uxth	r2, r2
 8005646:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005648:	896a      	ldrh	r2, [r5, #10]
 800564a:	e7af      	b.n	80055ac <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800564c:	b90e      	cbnz	r6, 8005652 <USB_EPStartXfer+0x1be>
 800564e:	5a42      	ldrh	r2, [r0, r1]
 8005650:	e7f4      	b.n	800563c <USB_EPStartXfer+0x1a8>
 8005652:	07f2      	lsls	r2, r6, #31
 8005654:	5a42      	ldrh	r2, [r0, r1]
 8005656:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800565a:	bf48      	it	mi
 800565c:	3701      	addmi	r7, #1
 800565e:	b292      	uxth	r2, r2
 8005660:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005664:	e7ee      	b.n	8005644 <USB_EPStartXfer+0x1b0>
 8005666:	2a01      	cmp	r2, #1
 8005668:	d1ee      	bne.n	8005648 <USB_EPStartXfer+0x1b4>
 800566a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800566e:	7829      	ldrb	r1, [r5, #0]
 8005670:	b280      	uxth	r0, r0
 8005672:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8005676:	0109      	lsls	r1, r1, #4
 8005678:	4402      	add	r2, r0
 800567a:	528b      	strh	r3, [r1, r2]
 800567c:	e7e4      	b.n	8005648 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800567e:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8005682:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005686:	0412      	lsls	r2, r2, #16
 8005688:	0c12      	lsrs	r2, r2, #16
 800568a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800568e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005692:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005696:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800569a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800569e:	b29b      	uxth	r3, r3
 80056a0:	441a      	add	r2, r3
 80056a2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056a4:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a8:	892a      	ldrh	r2, [r5, #8]
 80056aa:	e781      	b.n	80055b0 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80056ac:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056ae:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80056b2:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056b4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056b8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056ba:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056bc:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056be:	d506      	bpl.n	80056ce <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056c0:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80056c4:	4432      	add	r2, r6
 80056c6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ca:	896a      	ldrh	r2, [r5, #10]
 80056cc:	e770      	b.n	80055b0 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056ce:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80056d2:	4432      	add	r2, r6
 80056d4:	e7e6      	b.n	80056a4 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d13b      	bne.n	8005752 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80056da:	698b      	ldr	r3, [r1, #24]
 80056dc:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056de:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 80056e2:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80056e4:	bf84      	itt	hi
 80056e6:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 80056e8:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056ea:	7829      	ldrb	r1, [r5, #0]
 80056ec:	61aa      	str	r2, [r5, #24]
 80056ee:	b280      	uxth	r0, r0
 80056f0:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80056f4:	0109      	lsls	r1, r1, #4
 80056f6:	4402      	add	r2, r0
 80056f8:	5a88      	ldrh	r0, [r1, r2]
 80056fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80056fc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005700:	5288      	strh	r0, [r1, r2]
 8005702:	d91a      	bls.n	800573a <USB_EPStartXfer+0x2a6>
 8005704:	0958      	lsrs	r0, r3, #5
 8005706:	06de      	lsls	r6, r3, #27
 8005708:	5a8b      	ldrh	r3, [r1, r2]
 800570a:	bf08      	it	eq
 800570c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800571a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571e:	b29b      	uxth	r3, r3
 8005720:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005722:	782a      	ldrb	r2, [r5, #0]
 8005724:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005728:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800572c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005730:	041b      	lsls	r3, r3, #16
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005738:	e6d6      	b.n	80054e8 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800573a:	b90b      	cbnz	r3, 8005740 <USB_EPStartXfer+0x2ac>
 800573c:	5a8b      	ldrh	r3, [r1, r2]
 800573e:	e7ea      	b.n	8005716 <USB_EPStartXfer+0x282>
 8005740:	0858      	lsrs	r0, r3, #1
 8005742:	07db      	lsls	r3, r3, #31
 8005744:	5a8b      	ldrh	r3, [r1, r2]
 8005746:	bf48      	it	mi
 8005748:	3001      	addmi	r0, #1
 800574a:	b29b      	uxth	r3, r3
 800574c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005750:	e7e5      	b.n	800571e <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8005752:	78ca      	ldrb	r2, [r1, #3]
 8005754:	2a02      	cmp	r2, #2
 8005756:	d170      	bne.n	800583a <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005758:	2b00      	cmp	r3, #0
 800575a:	d138      	bne.n	80057ce <USB_EPStartXfer+0x33a>
 800575c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005760:	780b      	ldrb	r3, [r1, #0]
 8005762:	b292      	uxth	r2, r2
 8005764:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	4410      	add	r0, r2
 800576c:	5ac2      	ldrh	r2, [r0, r3]
 800576e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005772:	52c2      	strh	r2, [r0, r3]
 8005774:	690a      	ldr	r2, [r1, #16]
 8005776:	2a3e      	cmp	r2, #62	@ 0x3e
 8005778:	d946      	bls.n	8005808 <USB_EPStartXfer+0x374>
 800577a:	5ac1      	ldrh	r1, [r0, r3]
 800577c:	0956      	lsrs	r6, r2, #5
 800577e:	06d7      	lsls	r7, r2, #27
 8005780:	bf08      	it	eq
 8005782:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005786:	b289      	uxth	r1, r1
 8005788:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800578c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005790:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005794:	b289      	uxth	r1, r1
 8005796:	52c1      	strh	r1, [r0, r3]
 8005798:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800579c:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80057a0:	b280      	uxth	r0, r0
 80057a2:	4401      	add	r1, r0
 80057a4:	5ac8      	ldrh	r0, [r1, r3]
 80057a6:	2a3e      	cmp	r2, #62	@ 0x3e
 80057a8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80057ac:	52c8      	strh	r0, [r1, r3]
 80057ae:	d938      	bls.n	8005822 <USB_EPStartXfer+0x38e>
 80057b0:	0950      	lsrs	r0, r2, #5
 80057b2:	06d7      	lsls	r7, r2, #27
 80057b4:	5aca      	ldrh	r2, [r1, r3]
 80057b6:	bf08      	it	eq
 80057b8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80057bc:	b292      	uxth	r2, r2
 80057be:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80057c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80057c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80057ca:	b292      	uxth	r2, r2
 80057cc:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80057ce:	69eb      	ldr	r3, [r5, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0a6      	beq.n	8005722 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80057d4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80057d8:	782a      	ldrb	r2, [r5, #0]
 80057da:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057de:	ea03 0001 	and.w	r0, r3, r1
 80057e2:	438b      	bics	r3, r1
 80057e4:	d001      	beq.n	80057ea <USB_EPStartXfer+0x356>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d19b      	bne.n	8005722 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80057ea:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005802:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8005806:	e78c      	b.n	8005722 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005808:	b90a      	cbnz	r2, 800580e <USB_EPStartXfer+0x37a>
 800580a:	5ac1      	ldrh	r1, [r0, r3]
 800580c:	e7be      	b.n	800578c <USB_EPStartXfer+0x2f8>
 800580e:	07d1      	lsls	r1, r2, #31
 8005810:	5ac1      	ldrh	r1, [r0, r3]
 8005812:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8005816:	bf48      	it	mi
 8005818:	3601      	addmi	r6, #1
 800581a:	b289      	uxth	r1, r1
 800581c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005820:	e7b8      	b.n	8005794 <USB_EPStartXfer+0x300>
 8005822:	b90a      	cbnz	r2, 8005828 <USB_EPStartXfer+0x394>
 8005824:	5aca      	ldrh	r2, [r1, r3]
 8005826:	e7cc      	b.n	80057c2 <USB_EPStartXfer+0x32e>
 8005828:	0850      	lsrs	r0, r2, #1
 800582a:	07d6      	lsls	r6, r2, #31
 800582c:	5aca      	ldrh	r2, [r1, r3]
 800582e:	bf48      	it	mi
 8005830:	3001      	addmi	r0, #1
 8005832:	b292      	uxth	r2, r2
 8005834:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005838:	e7c7      	b.n	80057ca <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800583a:	2a01      	cmp	r2, #1
 800583c:	d15d      	bne.n	80058fa <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800583e:	698a      	ldr	r2, [r1, #24]
 8005840:	6909      	ldr	r1, [r1, #16]
 8005842:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8005844:	bf94      	ite	ls
 8005846:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8005848:	1a50      	subhi	r0, r2, r1
 800584a:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 800584c:	bf88      	it	hi
 800584e:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005850:	2b00      	cmp	r3, #0
 8005852:	f47f af66 	bne.w	8005722 <USB_EPStartXfer+0x28e>
 8005856:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800585a:	782b      	ldrb	r3, [r5, #0]
 800585c:	b289      	uxth	r1, r1
 800585e:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4408      	add	r0, r1
 8005866:	5ac1      	ldrh	r1, [r0, r3]
 8005868:	2a3e      	cmp	r2, #62	@ 0x3e
 800586a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800586e:	52c1      	strh	r1, [r0, r3]
 8005870:	d92b      	bls.n	80058ca <USB_EPStartXfer+0x436>
 8005872:	06d1      	lsls	r1, r2, #27
 8005874:	5ac1      	ldrh	r1, [r0, r3]
 8005876:	ea4f 1652 	mov.w	r6, r2, lsr #5
 800587a:	bf08      	it	eq
 800587c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005880:	b289      	uxth	r1, r1
 8005882:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005886:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800588a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800588e:	b289      	uxth	r1, r1
 8005890:	52c1      	strh	r1, [r0, r3]
 8005892:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005896:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800589a:	b280      	uxth	r0, r0
 800589c:	4401      	add	r1, r0
 800589e:	5ac8      	ldrh	r0, [r1, r3]
 80058a0:	2a3e      	cmp	r2, #62	@ 0x3e
 80058a2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80058a6:	52c8      	strh	r0, [r1, r3]
 80058a8:	d91b      	bls.n	80058e2 <USB_EPStartXfer+0x44e>
 80058aa:	0950      	lsrs	r0, r2, #5
 80058ac:	06d6      	lsls	r6, r2, #27
 80058ae:	5aca      	ldrh	r2, [r1, r3]
 80058b0:	bf08      	it	eq
 80058b2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80058b6:	b292      	uxth	r2, r2
 80058b8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80058bc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80058c0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80058c4:	b292      	uxth	r2, r2
 80058c6:	52ca      	strh	r2, [r1, r3]
 80058c8:	e72b      	b.n	8005722 <USB_EPStartXfer+0x28e>
 80058ca:	b90a      	cbnz	r2, 80058d0 <USB_EPStartXfer+0x43c>
 80058cc:	5ac1      	ldrh	r1, [r0, r3]
 80058ce:	e7da      	b.n	8005886 <USB_EPStartXfer+0x3f2>
 80058d0:	5ac1      	ldrh	r1, [r0, r3]
 80058d2:	0856      	lsrs	r6, r2, #1
 80058d4:	07d7      	lsls	r7, r2, #31
 80058d6:	bf48      	it	mi
 80058d8:	3601      	addmi	r6, #1
 80058da:	b289      	uxth	r1, r1
 80058dc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80058e0:	e7d5      	b.n	800588e <USB_EPStartXfer+0x3fa>
 80058e2:	b90a      	cbnz	r2, 80058e8 <USB_EPStartXfer+0x454>
 80058e4:	5aca      	ldrh	r2, [r1, r3]
 80058e6:	e7e9      	b.n	80058bc <USB_EPStartXfer+0x428>
 80058e8:	0850      	lsrs	r0, r2, #1
 80058ea:	07d2      	lsls	r2, r2, #31
 80058ec:	5aca      	ldrh	r2, [r1, r3]
 80058ee:	bf48      	it	mi
 80058f0:	3001      	addmi	r0, #1
 80058f2:	b292      	uxth	r2, r2
 80058f4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80058f8:	e7e4      	b.n	80058c4 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 80058fa:	2001      	movs	r0, #1
 80058fc:	e5fb      	b.n	80054f6 <USB_EPStartXfer+0x62>

080058fe <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058fe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8005902:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005904:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005908:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800590a:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800590c:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800590e:	462e      	mov	r6, r5
 8005910:	3402      	adds	r4, #2
 8005912:	b936      	cbnz	r6, 8005922 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005914:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005916:	bf44      	itt	mi
 8005918:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800591c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005922:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8005926:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005928:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800592a:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800592e:	0a12      	lsrs	r2, r2, #8
 8005930:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8005934:	e7ec      	b.n	8005910 <USB_ReadPMA+0x12>

08005936 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005936:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800593a:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800593c:	b16b      	cbz	r3, 800595a <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800593e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005942:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8005946:	28ff      	cmp	r0, #255	@ 0xff
 8005948:	d007      	beq.n	800595a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4621      	mov	r1, r4
 800594e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8005952:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005954:	23ff      	movs	r3, #255	@ 0xff
 8005956:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800595a:	2000      	movs	r0, #0
 800595c:	bd10      	pop	{r4, pc}
	...

08005960 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005960:	2343      	movs	r3, #67	@ 0x43
 8005962:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005964:	4800      	ldr	r0, [pc, #0]	@ (8005968 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005966:	4770      	bx	lr
 8005968:	2000005c 	.word	0x2000005c

0800596c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800596c:	2343      	movs	r3, #67	@ 0x43
 800596e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005970:	4800      	ldr	r0, [pc, #0]	@ (8005974 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005972:	4770      	bx	lr
 8005974:	200000a0 	.word	0x200000a0

08005978 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005978:	2343      	movs	r3, #67	@ 0x43
 800597a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800597c:	4800      	ldr	r0, [pc, #0]	@ (8005980 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800597e:	4770      	bx	lr
 8005980:	20000018 	.word	0x20000018

08005984 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005984:	230a      	movs	r3, #10
 8005986:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005988:	4800      	ldr	r0, [pc, #0]	@ (800598c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800598a:	4770      	bx	lr
 800598c:	2000011c 	.word	0x2000011c

08005990 <USBD_CDC_DataOut>:
{
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005994:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005998:	f000 ff66 	bl	8006868 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800599c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059a0:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80059a4:	b14b      	cbz	r3, 80059ba <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059a6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80059aa:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80059b4:	4798      	blx	r3
    return USBD_OK;
 80059b6:	2000      	movs	r0, #0
}
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80059ba:	2002      	movs	r0, #2
 80059bc:	e7fc      	b.n	80059b8 <USBD_CDC_DataOut+0x28>

080059be <USBD_CDC_DataIn>:
{
 80059be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059c0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80059c4:	b1ce      	cbz	r6, 80059fa <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059c6:	2214      	movs	r2, #20
 80059c8:	fb02 0201 	mla	r2, r2, r1, r0
 80059cc:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059ce:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059d2:	b173      	cbz	r3, 80059f2 <USBD_CDC_DataIn+0x34>
 80059d4:	2728      	movs	r7, #40	@ 0x28
 80059d6:	fb07 5401 	mla	r4, r7, r1, r5
 80059da:	6a24      	ldr	r4, [r4, #32]
 80059dc:	fbb3 f5f4 	udiv	r5, r3, r4
 80059e0:	fb04 3315 	mls	r3, r4, r5, r3
 80059e4:	b92b      	cbnz	r3, 80059f2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80059e6:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059e8:	461a      	mov	r2, r3
 80059ea:	f000 ff2b 	bl	8006844 <USBD_LL_Transmit>
    return USBD_OK;
 80059ee:	2000      	movs	r0, #0
}
 80059f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 80059f8:	e7f9      	b.n	80059ee <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 80059fa:	2002      	movs	r0, #2
 80059fc:	e7f8      	b.n	80059f0 <USBD_CDC_DataIn+0x32>

080059fe <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 80059fe:	2300      	movs	r3, #0
{
 8005a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a02:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8005a04:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8005a08:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a0c:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8005a10:	4604      	mov	r4, r0
 8005a12:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a14:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a18:	d022      	beq.n	8005a60 <USBD_CDC_Setup+0x62>
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d13a      	bne.n	8005a94 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8005a1e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a20:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8005a22:	b1ba      	cbz	r2, 8005a54 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8005a24:	0639      	lsls	r1, r7, #24
 8005a26:	d50b      	bpl.n	8005a40 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a28:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	688f      	ldr	r7, [r1, #8]
 8005a30:	4631      	mov	r1, r6
 8005a32:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a34:	4631      	mov	r1, r6
 8005a36:	4620      	mov	r0, r4
 8005a38:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a3a:	f000 fc4d 	bl	80062d8 <USBD_CtlSendData>
 8005a3e:	e006      	b.n	8005a4e <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a40:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8005a42:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a46:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005a4a:	f000 fc5a 	bl	8006302 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005a4e:	2000      	movs	r0, #0
}
 8005a50:	b003      	add	sp, #12
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a54:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8005a58:	6884      	ldr	r4, [r0, #8]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	47a0      	blx	r4
 8005a5e:	e7f6      	b.n	8005a4e <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8005a60:	784b      	ldrb	r3, [r1, #1]
 8005a62:	2b0a      	cmp	r3, #10
 8005a64:	d00a      	beq.n	8005a7c <USBD_CDC_Setup+0x7e>
 8005a66:	2b0b      	cmp	r3, #11
 8005a68:	d010      	beq.n	8005a8c <USBD_CDC_Setup+0x8e>
 8005a6a:	b99b      	cbnz	r3, 8005a94 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d10f      	bne.n	8005a94 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005a74:	2202      	movs	r2, #2
 8005a76:	f10d 0106 	add.w	r1, sp, #6
 8005a7a:	e7de      	b.n	8005a3a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d107      	bne.n	8005a94 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a84:	2201      	movs	r2, #1
 8005a86:	f10d 0105 	add.w	r1, sp, #5
 8005a8a:	e7d6      	b.n	8005a3a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005a8c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d0dc      	beq.n	8005a4e <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8005a94:	4620      	mov	r0, r4
 8005a96:	4629      	mov	r1, r5
 8005a98:	f000 fbf7 	bl	800628a <USBD_CtlError>
            ret = USBD_FAIL;
 8005a9c:	2002      	movs	r0, #2
 8005a9e:	e7d7      	b.n	8005a50 <USBD_CDC_Setup+0x52>

08005aa0 <USBD_CDC_DeInit>:
{
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005aa4:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005aa6:	2181      	movs	r1, #129	@ 0x81
 8005aa8:	f000 fe97 	bl	80067da <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aac:	2101      	movs	r1, #1
 8005aae:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ab0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ab2:	f000 fe92 	bl	80067da <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ab6:	2182      	movs	r1, #130	@ 0x82
 8005ab8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aba:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005abe:	f000 fe8c 	bl	80067da <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005ac2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ac6:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8005ac8:	b14b      	cbz	r3, 8005ade <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aca:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ad2:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8005ad6:	f000 fecf 	bl	8006878 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ada:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8005ade:	2000      	movs	r0, #0
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}

08005ae2 <USBD_CDC_Init>:
{
 8005ae2:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae4:	7c03      	ldrb	r3, [r0, #16]
{
 8005ae6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae8:	bba3      	cbnz	r3, 8005b54 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aee:	2181      	movs	r1, #129	@ 0x81
 8005af0:	2202      	movs	r2, #2
 8005af2:	f000 fe66 	bl	80067c2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005af6:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005afc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005afe:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b00:	2202      	movs	r2, #2
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 fe5d 	bl	80067c2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b08:	2308      	movs	r3, #8
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	2182      	movs	r1, #130	@ 0x82
 8005b0e:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b10:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b14:	f000 fe55 	bl	80067c2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b1c:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b1e:	f000 fea7 	bl	8006870 <USBD_static_malloc>
 8005b22:	4606      	mov	r6, r0
 8005b24:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8005b28:	b1f8      	cbz	r0, 8005b6a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b2a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005b38:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b3c:	7c23      	ldrb	r3, [r4, #16]
 8005b3e:	b993      	cbnz	r3, 8005b66 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b44:	4629      	mov	r1, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8005b4c:	f000 fe83 	bl	8006856 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005b50:	2000      	movs	r0, #0
}
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b54:	2340      	movs	r3, #64	@ 0x40
 8005b56:	2181      	movs	r1, #129	@ 0x81
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f000 fe32 	bl	80067c2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b5e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b60:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b62:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b64:	e7cb      	b.n	8005afe <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b66:	2340      	movs	r3, #64	@ 0x40
 8005b68:	e7ec      	b.n	8005b44 <USBD_CDC_Init+0x62>
    ret = 1U;
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	e7f1      	b.n	8005b52 <USBD_CDC_Init+0x70>

08005b6e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005b6e:	b119      	cbz	r1, 8005b78 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005b70:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8005b74:	2000      	movs	r0, #0
 8005b76:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005b78:	2002      	movs	r0, #2
  }

  return ret;
}
 8005b7a:	4770      	bx	lr

08005b7c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b7c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005b80:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005b82:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005b86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8005b8a:	4770      	bx	lr

08005b8c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005b8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8005b90:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005b92:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8005b96:	4770      	bx	lr

08005b98 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b98:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8005b9c:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8005b9e:	b182      	cbz	r2, 8005bc2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8005ba0:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	b974      	cbnz	r4, 8005bc6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005ba8:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bac:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005bb0:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bb2:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005bb4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f000 fe43 	bl	8006844 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 8005bbe:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005bc0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8005bc2:	2002      	movs	r0, #2
 8005bc4:	e7fc      	b.n	8005bc0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	e7fa      	b.n	8005bc0 <USBD_CDC_TransmitPacket+0x28>

08005bca <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8005bce:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005bd0:	b162      	cbz	r2, 8005bec <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005bd4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	b933      	cbnz	r3, 8005be8 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8005bda:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005bde:	2101      	movs	r1, #1
 8005be0:	f000 fe39 	bl	8006856 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005be4:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005be6:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8005be8:	2340      	movs	r3, #64	@ 0x40
 8005bea:	e7f8      	b.n	8005bde <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8005bec:	2002      	movs	r0, #2
 8005bee:	e7fa      	b.n	8005be6 <USBD_CDC_ReceivePacket+0x1c>

08005bf0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bf0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bf2:	b180      	cbz	r0, 8005c16 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005bf4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005bf8:	b113      	cbz	r3, 8005c00 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c00:	b109      	cbz	r1, 8005c06 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8005c02:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c06:	2301      	movs	r3, #1
  pdev->id = id;
 8005c08:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c0a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c0e:	f000 fd8f 	bl	8006730 <USBD_LL_Init>

  return USBD_OK;
 8005c12:	2000      	movs	r0, #0
}
 8005c14:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005c16:	2002      	movs	r0, #2
 8005c18:	e7fc      	b.n	8005c14 <USBD_Init+0x24>

08005c1a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005c1a:	b119      	cbz	r1, 8005c24 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005c1c:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8005c20:	2000      	movs	r0, #0
 8005c22:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c24:	2002      	movs	r0, #2
  }

  return status;
}
 8005c26:	4770      	bx	lr

08005c28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c28:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c2a:	f000 fdc1 	bl	80067b0 <USBD_LL_Start>

  return USBD_OK;
}
 8005c2e:	2000      	movs	r0, #0
 8005c30:	bd08      	pop	{r3, pc}

08005c32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c32:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005c34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c38:	b133      	cbz	r3, 8005c48 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4798      	blx	r3
 8005c3e:	3800      	subs	r0, #0
 8005c40:	bf18      	it	ne
 8005c42:	2001      	movne	r0, #1
 8005c44:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005c46:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c48:	2002      	movs	r0, #2
 8005c4a:	e7fc      	b.n	8005c46 <USBD_SetClassConfig+0x14>

08005c4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005c4c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005c4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4798      	blx	r3

  return USBD_OK;
}
 8005c56:	2000      	movs	r0, #0
 8005c58:	bd08      	pop	{r3, pc}

08005c5a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c5a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c5c:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8005c60:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 fb06 	bl	8006274 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c68:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005c6a:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8005c6e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8005c72:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8005c76:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005c7a:	f001 031f 	and.w	r3, r1, #31
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d008      	beq.n	8005c94 <USBD_LL_SetupStage+0x3a>
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d00b      	beq.n	8005c9e <USBD_LL_SetupStage+0x44>
 8005c86:	b97b      	cbnz	r3, 8005ca8 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 f8fa 	bl	8005e84 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005c90:	2000      	movs	r0, #0
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005c94:	4629      	mov	r1, r5
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fa3c 	bl	8006114 <USBD_StdItfReq>
      break;
 8005c9c:	e7f8      	b.n	8005c90 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fa5b 	bl	800615c <USBD_StdEPReq>
      break;
 8005ca6:	e7f3      	b.n	8005c90 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005cae:	f000 fd9d 	bl	80067ec <USBD_LL_StallEP>
      break;
 8005cb2:	e7ed      	b.n	8005c90 <USBD_LL_SetupStage+0x36>

08005cb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005cba:	bb39      	cbnz	r1, 8005d0c <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cbc:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005cc0:	2a03      	cmp	r2, #3
 8005cc2:	d11c      	bne.n	8005cfe <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cc4:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8005cc8:	4295      	cmp	r5, r2
 8005cca:	d90b      	bls.n	8005ce4 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8005ccc:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005cce:	42aa      	cmp	r2, r5
 8005cd0:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8005cd2:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005cd6:	bf8c      	ite	hi
 8005cd8:	b2aa      	uxthhi	r2, r5
 8005cda:	b292      	uxthls	r2, r2
 8005cdc:	f000 fb1e 	bl	800631c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005ce0:	2000      	movs	r0, #0
}
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ce4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	b123      	cbz	r3, 8005cf6 <USBD_LL_DataOutStage+0x42>
 8005cec:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005cf0:	2a03      	cmp	r2, #3
 8005cf2:	d100      	bne.n	8005cf6 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8005cf4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fb18 	bl	800632c <USBD_CtlSendStatus>
 8005cfc:	e7f0      	b.n	8005ce0 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005cfe:	2a05      	cmp	r2, #5
 8005d00:	d1ee      	bne.n	8005ce0 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d02:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005d06:	f000 fd71 	bl	80067ec <USBD_LL_StallEP>
 8005d0a:	e7e9      	b.n	8005ce0 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d0c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	b12b      	cbz	r3, 8005d20 <USBD_LL_DataOutStage+0x6c>
 8005d14:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005d18:	2a03      	cmp	r2, #3
 8005d1a:	d101      	bne.n	8005d20 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8005d1c:	4798      	blx	r3
 8005d1e:	e7df      	b.n	8005ce0 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8005d20:	2002      	movs	r0, #2
 8005d22:	e7de      	b.n	8005ce2 <USBD_LL_DataOutStage+0x2e>

08005d24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	4604      	mov	r4, r0
 8005d28:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d2a:	460f      	mov	r7, r1
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d149      	bne.n	8005dc4 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d30:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005d34:	2a02      	cmp	r2, #2
 8005d36:	d13a      	bne.n	8005dae <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d38:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8005d3c:	42b5      	cmp	r5, r6
 8005d3e:	d911      	bls.n	8005d64 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8005d40:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d42:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8005d44:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005d46:	b2aa      	uxth	r2, r5
 8005d48:	f000 fad3 	bl	80062f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d4c:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4619      	mov	r1, r3
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 fd7f 	bl	8006856 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d58:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d02d      	beq.n	8005dbc <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005d60:	2000      	movs	r0, #0
}
 8005d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005d64:	69c3      	ldr	r3, [r0, #28]
 8005d66:	fbb3 f5f6 	udiv	r5, r3, r6
 8005d6a:	fb06 3515 	mls	r5, r6, r5, r3
 8005d6e:	b965      	cbnz	r5, 8005d8a <USBD_LL_DataInStage+0x66>
 8005d70:	429e      	cmp	r6, r3
 8005d72:	d80a      	bhi.n	8005d8a <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8005d74:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d206      	bcs.n	8005d8a <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	f000 fab8 	bl	80062f2 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d82:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8005d84:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d88:	e7e1      	b.n	8005d4e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005d8a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	b12b      	cbz	r3, 8005d9e <USBD_LL_DataInStage+0x7a>
 8005d92:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8005d96:	2a03      	cmp	r2, #3
 8005d98:	d101      	bne.n	8005d9e <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005d9e:	2180      	movs	r1, #128	@ 0x80
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fd23 	bl	80067ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 facb 	bl	8006342 <USBD_CtlReceiveStatus>
 8005dac:	e7d4      	b.n	8005d58 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005dae:	f032 0304 	bics.w	r3, r2, #4
 8005db2:	d1d1      	bne.n	8005d58 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005db4:	2180      	movs	r1, #128	@ 0x80
 8005db6:	f000 fd19 	bl	80067ec <USBD_LL_StallEP>
 8005dba:	e7cd      	b.n	8005d58 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8005dc2:	e7cd      	b.n	8005d60 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005dc4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	b12b      	cbz	r3, 8005dd8 <USBD_LL_DataInStage+0xb4>
 8005dcc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005dd0:	2a03      	cmp	r2, #3
 8005dd2:	d101      	bne.n	8005dd8 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8005dd4:	4798      	blx	r3
 8005dd6:	e7c3      	b.n	8005d60 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8005dd8:	2002      	movs	r0, #2
 8005dda:	e7c2      	b.n	8005d62 <USBD_LL_DataInStage+0x3e>

08005ddc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ddc:	2200      	movs	r2, #0
{
 8005dde:	b570      	push	{r4, r5, r6, lr}
 8005de0:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005de2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005de4:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005de6:	4611      	mov	r1, r2
 8005de8:	2340      	movs	r3, #64	@ 0x40
 8005dea:	f000 fcea 	bl	80067c2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dee:	4633      	mov	r3, r6
 8005df0:	2180      	movs	r1, #128	@ 0x80
 8005df2:	2200      	movs	r2, #0
 8005df4:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005df6:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dfa:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dfe:	f000 fce0 	bl	80067c2 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e02:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005e04:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e08:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e0a:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0c:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e10:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005e14:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e16:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8005e1a:	b123      	cbz	r3, 8005e26 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e1c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005e20:	4620      	mov	r0, r4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005e26:	2000      	movs	r0, #0
 8005e28:	bd70      	pop	{r4, r5, r6, pc}

08005e2a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005e2a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	4770      	bx	lr

08005e30 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005e30:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e34:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005e3e:	2000      	movs	r0, #0
 8005e40:	4770      	bx	lr

08005e42 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e42:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e46:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e48:	bf04      	itt	eq
 8005e4a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005e4e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005e52:	2000      	movs	r0, #0
 8005e54:	4770      	bx	lr

08005e56 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e56:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e58:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005e5c:	2a03      	cmp	r2, #3
 8005e5e:	d104      	bne.n	8005e6a <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8005e60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	b103      	cbz	r3, 8005e6a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005e68:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	bd08      	pop	{r3, pc}

08005e6e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005e72:	2180      	movs	r1, #128	@ 0x80
 8005e74:	f000 fcba 	bl	80067ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005e78:	4620      	mov	r0, r4
}
 8005e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f000 bcb4 	b.w	80067ec <USBD_LL_StallEP>

08005e84 <USBD_StdDevReq>:
{
 8005e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e86:	780b      	ldrb	r3, [r1, #0]
 8005e88:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e8e:	2b20      	cmp	r3, #32
{
 8005e90:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e92:	d006      	beq.n	8005ea2 <USBD_StdDevReq+0x1e>
 8005e94:	2b40      	cmp	r3, #64	@ 0x40
 8005e96:	d004      	beq.n	8005ea2 <USBD_StdDevReq+0x1e>
 8005e98:	b163      	cbz	r3, 8005eb4 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff ffe7 	bl	8005e6e <USBD_CtlError.constprop.0>
        break;
 8005ea0:	e005      	b.n	8005eae <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8005ea2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4798      	blx	r3
}
 8005eae:	2000      	movs	r0, #0
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005eb4:	784b      	ldrb	r3, [r1, #1]
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d8ef      	bhi.n	8005e9a <USBD_StdDevReq+0x16>
 8005eba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <USBD_StdDevReq+0x3c>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	080060c3 	.word	0x080060c3
 8005ec4:	080060f9 	.word	0x080060f9
 8005ec8:	08005e9b 	.word	0x08005e9b
 8005ecc:	080060eb 	.word	0x080060eb
 8005ed0:	08005e9b 	.word	0x08005e9b
 8005ed4:	08005fe9 	.word	0x08005fe9
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005e9b 	.word	0x08005e9b
 8005ee0:	08006093 	.word	0x08006093
 8005ee4:	0800602b 	.word	0x0800602b
  uint16_t len = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005eee:	884b      	ldrh	r3, [r1, #2]
 8005ef0:	0a1a      	lsrs	r2, r3, #8
 8005ef2:	3a01      	subs	r2, #1
 8005ef4:	2a06      	cmp	r2, #6
 8005ef6:	d8d0      	bhi.n	8005e9a <USBD_StdDevReq+0x16>
 8005ef8:	a101      	add	r1, pc, #4	@ (adr r1, 8005f00 <USBD_StdDevReq+0x7c>)
 8005efa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005efe:	bf00      	nop
 8005f00:	08005f1d 	.word	0x08005f1d
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f5b 	.word	0x08005f5b
 8005f0c:	08005e9b 	.word	0x08005e9b
 8005f10:	08005e9b 	.word	0x08005e9b
 8005f14:	08005f9f 	.word	0x08005f9f
 8005f18:	08005fb5 	.word	0x08005fb5
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f1c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f20:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f22:	7c20      	ldrb	r0, [r4, #16]
 8005f24:	f10d 0106 	add.w	r1, sp, #6
 8005f28:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005f2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005f2e:	88eb      	ldrh	r3, [r5, #6]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d054      	beq.n	8005fde <USBD_StdDevReq+0x15a>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d149      	bne.n	8005fcc <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 f9f7 	bl	800632c <USBD_CtlSendStatus>
 8005f3e:	e7b6      	b.n	8005eae <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f40:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005f42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f46:	b932      	cbnz	r2, 8005f56 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f4a:	f10d 0006 	add.w	r0, sp, #6
 8005f4e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f50:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f52:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005f54:	e7e9      	b.n	8005f2a <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	e7f7      	b.n	8005f4a <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b05      	cmp	r3, #5
 8005f5e:	d89c      	bhi.n	8005e9a <USBD_StdDevReq+0x16>
 8005f60:	e8df f003 	tbb	[pc, r3]
 8005f64:	110d0903 	.word	0x110d0903
 8005f68:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f6a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f6e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1d6      	bne.n	8005f22 <USBD_StdDevReq+0x9e>
 8005f74:	e791      	b.n	8005e9a <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f76:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	e7f8      	b.n	8005f70 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f7e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	e7f4      	b.n	8005f70 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	e7f0      	b.n	8005f70 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f8e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	e7ec      	b.n	8005f70 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f96:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	e7e8      	b.n	8005f70 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9e:	7c03      	ldrb	r3, [r0, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f47f af7a 	bne.w	8005e9a <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fa6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005faa:	f10d 0006 	add.w	r0, sp, #6
 8005fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb0:	4798      	blx	r3
  if (err != 0U)
 8005fb2:	e7ba      	b.n	8005f2a <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb4:	7c03      	ldrb	r3, [r0, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f47f af6f 	bne.w	8005e9a <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fbc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005fc0:	f10d 0006 	add.w	r0, sp, #6
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fc8:	2307      	movs	r3, #7
 8005fca:	e7c2      	b.n	8005f52 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bf28      	it	cs
 8005fd0:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005fd6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fda:	f000 f97d 	bl	80062d8 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005fde:	88eb      	ldrh	r3, [r5, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f af64 	bne.w	8005eae <USBD_StdDevReq+0x2a>
 8005fe6:	e7a7      	b.n	8005f38 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fe8:	888b      	ldrh	r3, [r1, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f af55 	bne.w	8005e9a <USBD_StdDevReq+0x16>
 8005ff0:	88cb      	ldrh	r3, [r1, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f47f af51 	bne.w	8005e9a <USBD_StdDevReq+0x16>
 8005ff8:	884d      	ldrh	r5, [r1, #2]
 8005ffa:	2d7f      	cmp	r5, #127	@ 0x7f
 8005ffc:	f63f af4d 	bhi.w	8005e9a <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006000:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006004:	2b03      	cmp	r3, #3
 8006006:	f43f af48 	beq.w	8005e9a <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800600a:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800600c:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 800600e:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006012:	f000 fc0e 	bl	8006832 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006016:	4620      	mov	r0, r4
 8006018:	f000 f988 	bl	800632c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800601c:	b11d      	cbz	r5, 8006026 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800601e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006020:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006024:	e743      	b.n	8005eae <USBD_StdDevReq+0x2a>
 8006026:	2301      	movs	r3, #1
 8006028:	e7fa      	b.n	8006020 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 800602a:	7889      	ldrb	r1, [r1, #2]
 800602c:	4d38      	ldr	r5, [pc, #224]	@ (8006110 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800602e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006030:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006032:	f63f af32 	bhi.w	8005e9a <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8006036:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800603a:	2b02      	cmp	r3, #2
 800603c:	d008      	beq.n	8006050 <USBD_StdDevReq+0x1cc>
 800603e:	2b03      	cmp	r3, #3
 8006040:	d015      	beq.n	800606e <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8006042:	f7ff ff14 	bl	8005e6e <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006046:	4620      	mov	r0, r4
 8006048:	7829      	ldrb	r1, [r5, #0]
 800604a:	f7ff fdff 	bl	8005c4c <USBD_ClrClassConfig>
        break;
 800604e:	e72e      	b.n	8005eae <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8006050:	2900      	cmp	r1, #0
 8006052:	f43f af71 	beq.w	8005f38 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8006056:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006058:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800605a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800605c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff fde6 	bl	8005c32 <USBD_SetClassConfig>
 8006066:	2802      	cmp	r0, #2
 8006068:	f47f af66 	bne.w	8005f38 <USBD_StdDevReq+0xb4>
 800606c:	e715      	b.n	8005e9a <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 800606e:	b931      	cbnz	r1, 800607e <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006070:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8006072:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006074:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8006078:	f7ff fde8 	bl	8005c4c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800607c:	e75c      	b.n	8005f38 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 800607e:	6841      	ldr	r1, [r0, #4]
 8006080:	2901      	cmp	r1, #1
 8006082:	f43f af59 	beq.w	8005f38 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006086:	b2c9      	uxtb	r1, r1
 8006088:	f7ff fde0 	bl	8005c4c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800608c:	7829      	ldrb	r1, [r5, #0]
 800608e:	6061      	str	r1, [r4, #4]
 8006090:	e7e6      	b.n	8006060 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8006092:	88ca      	ldrh	r2, [r1, #6]
 8006094:	2a01      	cmp	r2, #1
 8006096:	f47f af00 	bne.w	8005e9a <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 800609a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d80a      	bhi.n	80060b8 <USBD_StdDevReq+0x234>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f43f aef9 	beq.w	8005e9a <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 80060a8:	4601      	mov	r1, r0
 80060aa:	2300      	movs	r3, #0
 80060ac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f911 	bl	80062d8 <USBD_CtlSendData>
      break;
 80060b6:	e6fa      	b.n	8005eae <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	f47f aeee 	bne.w	8005e9a <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80060be:	1d01      	adds	r1, r0, #4
 80060c0:	e7f6      	b.n	80060b0 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 80060c2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f63f aee6 	bhi.w	8005e9a <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 80060ce:	88ca      	ldrh	r2, [r1, #6]
 80060d0:	2a02      	cmp	r2, #2
 80060d2:	f47f aee2 	bne.w	8005e9a <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 80060d6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80060da:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2303      	movne	r3, #3
 80060e4:	f841 3f0c 	str.w	r3, [r1, #12]!
 80060e8:	e7e2      	b.n	80060b0 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060ea:	884b      	ldrh	r3, [r1, #2]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f47f aede 	bne.w	8005eae <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 80060f2:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 80060f6:	e71f      	b.n	8005f38 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 80060f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2b02      	cmp	r3, #2
 8006100:	f63f aecb 	bhi.w	8005e9a <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006104:	884b      	ldrh	r3, [r1, #2]
 8006106:	2b01      	cmp	r3, #1
 8006108:	f47f aed1 	bne.w	8005eae <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	e7f0      	b.n	80060f2 <USBD_StdDevReq+0x26e>
 8006110:	20002768 	.word	0x20002768

08006114 <USBD_StdItfReq>:
{
 8006114:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006116:	780b      	ldrb	r3, [r1, #0]
{
 8006118:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800611a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800611e:	065b      	lsls	r3, r3, #25
{
 8006120:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006122:	d501      	bpl.n	8006128 <USBD_StdItfReq+0x14>
 8006124:	2a40      	cmp	r2, #64	@ 0x40
 8006126:	d115      	bne.n	8006154 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8006128:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800612c:	3b01      	subs	r3, #1
 800612e:	2b02      	cmp	r3, #2
 8006130:	d810      	bhi.n	8006154 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006132:	792b      	ldrb	r3, [r5, #4]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d80d      	bhi.n	8006154 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006138:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800613c:	4629      	mov	r1, r5
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4620      	mov	r0, r4
 8006142:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006144:	88eb      	ldrh	r3, [r5, #6]
 8006146:	b91b      	cbnz	r3, 8006150 <USBD_StdItfReq+0x3c>
 8006148:	b910      	cbnz	r0, 8006150 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f8ee 	bl	800632c <USBD_CtlSendStatus>
}
 8006150:	2000      	movs	r0, #0
 8006152:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fe8a 	bl	8005e6e <USBD_CtlError.constprop.0>
          break;
 800615a:	e7f9      	b.n	8006150 <USBD_StdItfReq+0x3c>

0800615c <USBD_StdEPReq>:
{
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	780a      	ldrb	r2, [r1, #0]
 8006160:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006162:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006166:	2a20      	cmp	r2, #32
{
 8006168:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 800616a:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616c:	d006      	beq.n	800617c <USBD_StdEPReq+0x20>
 800616e:	2a40      	cmp	r2, #64	@ 0x40
 8006170:	d004      	beq.n	800617c <USBD_StdEPReq+0x20>
 8006172:	b15a      	cbz	r2, 800618c <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fe7a 	bl	8005e6e <USBD_CtlError.constprop.0>
              break;
 800617a:	e005      	b.n	8006188 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 800617c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8006180:	4619      	mov	r1, r3
 8006182:	4620      	mov	r0, r4
 8006184:	6892      	ldr	r2, [r2, #8]
 8006186:	4790      	blx	r2
}
 8006188:	2000      	movs	r0, #0
 800618a:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800618c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800618e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8006190:	2a01      	cmp	r2, #1
 8006192:	d035      	beq.n	8006200 <USBD_StdEPReq+0xa4>
 8006194:	2a03      	cmp	r2, #3
 8006196:	d021      	beq.n	80061dc <USBD_StdEPReq+0x80>
 8006198:	2a00      	cmp	r2, #0
 800619a:	d1eb      	bne.n	8006174 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 800619c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d044      	beq.n	800622e <USBD_StdEPReq+0xd2>
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d1e5      	bne.n	8006174 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 80061a8:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061aa:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80061ae:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061b2:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80061b6:	d04b      	beq.n	8006250 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0da      	beq.n	8006174 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061be:	2514      	movs	r5, #20
 80061c0:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 80061c4:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061c8:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ca:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061cc:	d04b      	beq.n	8006266 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 fb1e 	bl	8006810 <USBD_LL_IsStallEP>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d04b      	beq.n	8006270 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 80061d8:	2301      	movs	r3, #1
 80061da:	e045      	b.n	8006268 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 80061dc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80061e0:	2a02      	cmp	r2, #2
 80061e2:	d01b      	beq.n	800621c <USBD_StdEPReq+0xc0>
 80061e4:	2a03      	cmp	r2, #3
 80061e6:	d1c5      	bne.n	8006174 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061e8:	885a      	ldrh	r2, [r3, #2]
 80061ea:	b92a      	cbnz	r2, 80061f8 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 80061ec:	064a      	lsls	r2, r1, #25
 80061ee:	d003      	beq.n	80061f8 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061f0:	88db      	ldrh	r3, [r3, #6]
 80061f2:	b90b      	cbnz	r3, 80061f8 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 80061f4:	f000 fafa 	bl	80067ec <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f897 	bl	800632c <USBD_CtlSendStatus>
              break;
 80061fe:	e7c3      	b.n	8006188 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8006200:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006204:	2a02      	cmp	r2, #2
 8006206:	d009      	beq.n	800621c <USBD_StdEPReq+0xc0>
 8006208:	2a03      	cmp	r2, #3
 800620a:	d1b3      	bne.n	8006174 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1ba      	bne.n	8006188 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006212:	064d      	lsls	r5, r1, #25
 8006214:	d0f0      	beq.n	80061f8 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006216:	f000 faf2 	bl	80067fe <USBD_LL_ClearStallEP>
 800621a:	e7ed      	b.n	80061f8 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800621c:	064b      	lsls	r3, r1, #25
 800621e:	d0a9      	beq.n	8006174 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8006220:	f000 fae4 	bl	80067ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006224:	2180      	movs	r1, #128	@ 0x80
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fae0 	bl	80067ec <USBD_LL_StallEP>
 800622c:	e7ac      	b.n	8006188 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800622e:	064a      	lsls	r2, r1, #25
 8006230:	d1a0      	bne.n	8006174 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006232:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8006234:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006238:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800623c:	bf4c      	ite	mi
 800623e:	f100 0114 	addmi.w	r1, r0, #20
 8006242:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8006246:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006248:	4620      	mov	r0, r4
 800624a:	f000 f845 	bl	80062d8 <USBD_CtlSendData>
              break;
 800624e:	e79b      	b.n	8006188 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006250:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006254:	2b00      	cmp	r3, #0
 8006256:	d08d      	beq.n	8006174 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006258:	2514      	movs	r5, #20
 800625a:	fb05 0501 	mla	r5, r5, r1, r0
 800625e:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006262:	2900      	cmp	r1, #0
 8006264:	d1b3      	bne.n	80061ce <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8006266:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8006268:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800626a:	2202      	movs	r2, #2
 800626c:	4629      	mov	r1, r5
 800626e:	e7eb      	b.n	8006248 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8006270:	6028      	str	r0, [r5, #0]
 8006272:	e7fa      	b.n	800626a <USBD_StdEPReq+0x10e>

08006274 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006274:	780b      	ldrb	r3, [r1, #0]
 8006276:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006278:	784b      	ldrb	r3, [r1, #1]
 800627a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800627c:	884b      	ldrh	r3, [r1, #2]
 800627e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006280:	888b      	ldrh	r3, [r1, #4]
 8006282:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006284:	88cb      	ldrh	r3, [r1, #6]
 8006286:	80c3      	strh	r3, [r0, #6]
}
 8006288:	4770      	bx	lr

0800628a <USBD_CtlError>:
{
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800628e:	2180      	movs	r1, #128	@ 0x80
 8006290:	f000 faac 	bl	80067ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006294:	4620      	mov	r0, r4
}
 8006296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800629a:	2100      	movs	r1, #0
 800629c:	f000 baa6 	b.w	80067ec <USBD_LL_StallEP>

080062a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	460d      	mov	r5, r1
 80062a4:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80062a6:	4604      	mov	r4, r0
 80062a8:	b170      	cbz	r0, 80062c8 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80062aa:	f7f9 ff51 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80062ae:	b2c3      	uxtb	r3, r0
 80062b0:	3301      	adds	r3, #1
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062b6:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062b8:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 80062ba:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062bc:	706b      	strb	r3, [r5, #1]
 80062be:	2302      	movs	r3, #2
 80062c0:	3c01      	subs	r4, #1
    while (*desc != '\0')
 80062c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80062c6:	b901      	cbnz	r1, 80062ca <USBD_GetString+0x2a>
}
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	54e9      	strb	r1, [r5, r3]
 80062ce:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80062d0:	3302      	adds	r3, #2
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	54a8      	strb	r0, [r5, r2]
 80062d6:	e7f4      	b.n	80062c2 <USBD_GetString+0x22>

080062d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80062d8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062da:	2202      	movs	r2, #2
{
 80062dc:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80062de:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062e2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062e6:	460a      	mov	r2, r1
 80062e8:	2100      	movs	r1, #0
 80062ea:	f000 faab 	bl	8006844 <USBD_LL_Transmit>

  return USBD_OK;
}
 80062ee:	2000      	movs	r0, #0
 80062f0:	bd10      	pop	{r4, pc}

080062f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062f2:	b508      	push	{r3, lr}
 80062f4:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062f6:	460a      	mov	r2, r1
 80062f8:	2100      	movs	r1, #0
 80062fa:	f000 faa3 	bl	8006844 <USBD_LL_Transmit>

  return USBD_OK;
}
 80062fe:	2000      	movs	r0, #0
 8006300:	bd08      	pop	{r3, pc}

08006302 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006302:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006304:	2203      	movs	r2, #3
{
 8006306:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006308:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800630c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006310:	460a      	mov	r2, r1
 8006312:	2100      	movs	r1, #0
 8006314:	f000 fa9f 	bl	8006856 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006318:	2000      	movs	r0, #0
 800631a:	bd10      	pop	{r4, pc}

0800631c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800631c:	b508      	push	{r3, lr}
 800631e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006320:	460a      	mov	r2, r1
 8006322:	2100      	movs	r1, #0
 8006324:	f000 fa97 	bl	8006856 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006328:	2000      	movs	r0, #0
 800632a:	bd08      	pop	{r3, pc}

0800632c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800632c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800632e:	2304      	movs	r3, #4
 8006330:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006334:	2300      	movs	r3, #0
 8006336:	461a      	mov	r2, r3
 8006338:	4619      	mov	r1, r3
 800633a:	f000 fa83 	bl	8006844 <USBD_LL_Transmit>

  return USBD_OK;
}
 800633e:	2000      	movs	r0, #0
 8006340:	bd08      	pop	{r3, pc}

08006342 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006342:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006344:	2305      	movs	r3, #5
 8006346:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634a:	2300      	movs	r3, #0
 800634c:	461a      	mov	r2, r3
 800634e:	4619      	mov	r1, r3
 8006350:	f000 fa81 	bl	8006856 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006354:	2000      	movs	r0, #0
 8006356:	bd08      	pop	{r3, pc}

08006358 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800635a:	2200      	movs	r2, #0
 800635c:	490e      	ldr	r1, [pc, #56]	@ (8006398 <MX_USB_DEVICE_Init+0x40>)
 800635e:	480f      	ldr	r0, [pc, #60]	@ (800639c <MX_USB_DEVICE_Init+0x44>)
 8006360:	f7ff fc46 	bl	8005bf0 <USBD_Init>
 8006364:	b108      	cbz	r0, 800636a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006366:	f7fc fc99 	bl	8002c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800636a:	490d      	ldr	r1, [pc, #52]	@ (80063a0 <MX_USB_DEVICE_Init+0x48>)
 800636c:	480b      	ldr	r0, [pc, #44]	@ (800639c <MX_USB_DEVICE_Init+0x44>)
 800636e:	f7ff fc54 	bl	8005c1a <USBD_RegisterClass>
 8006372:	b108      	cbz	r0, 8006378 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006374:	f7fc fc92 	bl	8002c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006378:	490a      	ldr	r1, [pc, #40]	@ (80063a4 <MX_USB_DEVICE_Init+0x4c>)
 800637a:	4808      	ldr	r0, [pc, #32]	@ (800639c <MX_USB_DEVICE_Init+0x44>)
 800637c:	f7ff fbf7 	bl	8005b6e <USBD_CDC_RegisterInterface>
 8006380:	b108      	cbz	r0, 8006386 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006382:	f7fc fc8b 	bl	8002c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006386:	4805      	ldr	r0, [pc, #20]	@ (800639c <MX_USB_DEVICE_Init+0x44>)
 8006388:	f7ff fc4e 	bl	8005c28 <USBD_Start>
 800638c:	b118      	cbz	r0, 8006396 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800638e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006392:	f7fc bc83 	b.w	8002c9c <Error_Handler>
}
 8006396:	bd08      	pop	{r3, pc}
 8006398:	2000016c 	.word	0x2000016c
 800639c:	2000276c 	.word	0x2000276c
 80063a0:	200000e4 	.word	0x200000e4
 80063a4:	20000128 	.word	0x20000128

080063a8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80063a8:	2000      	movs	r0, #0
 80063aa:	4770      	bx	lr

080063ac <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80063ac:	2000      	movs	r0, #0
 80063ae:	4770      	bx	lr

080063b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 80063b2:	2300      	movs	r3, #0
      usbCommandComplete = true;         // Marcar comando completo
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80063b4:	4d11      	ldr	r5, [pc, #68]	@ (80063fc <CDC_Receive_FS+0x4c>)
      usbBuffer[usbBufferIndex++] = receivedChar;
 80063b6:	4e12      	ldr	r6, [pc, #72]	@ (8006400 <CDC_Receive_FS+0x50>)
  for (uint32_t i = 0; i < *Len; i++) {
 80063b8:	680a      	ldr	r2, [r1, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d90a      	bls.n	80063d4 <CDC_Receive_FS+0x24>
    char receivedChar = Buf[i];
 80063be:	5cc4      	ldrb	r4, [r0, r3]
    if (receivedChar == '\n') {
 80063c0:	2c0a      	cmp	r4, #10
 80063c2:	d110      	bne.n	80063e6 <CDC_Receive_FS+0x36>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 80063c4:	2100      	movs	r1, #0
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <CDC_Receive_FS+0x4c>)
 80063c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006400 <CDC_Receive_FS+0x50>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 80063ce:	2201      	movs	r2, #1
 80063d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <CDC_Receive_FS+0x54>)
 80063d2:	701a      	strb	r2, [r3, #0]
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80063d4:	4601      	mov	r1, r0
 80063d6:	480c      	ldr	r0, [pc, #48]	@ (8006408 <CDC_Receive_FS+0x58>)
 80063d8:	f7ff fbd8 	bl	8005b8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80063dc:	480a      	ldr	r0, [pc, #40]	@ (8006408 <CDC_Receive_FS+0x58>)
 80063de:	f7ff fbf4 	bl	8005bca <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80063e2:	2000      	movs	r0, #0
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80063e6:	2c0d      	cmp	r4, #13
 80063e8:	d005      	beq.n	80063f6 <CDC_Receive_FS+0x46>
 80063ea:	682a      	ldr	r2, [r5, #0]
 80063ec:	2a62      	cmp	r2, #98	@ 0x62
      usbBuffer[usbBufferIndex++] = receivedChar;
 80063ee:	bf9e      	ittt	ls
 80063f0:	1c57      	addls	r7, r2, #1
 80063f2:	602f      	strls	r7, [r5, #0]
 80063f4:	54b4      	strbls	r4, [r6, r2]
  for (uint32_t i = 0; i < *Len; i++) {
 80063f6:	3301      	adds	r3, #1
 80063f8:	e7de      	b.n	80063b8 <CDC_Receive_FS+0x8>
 80063fa:	bf00      	nop
 80063fc:	200022ec 	.word	0x200022ec
 8006400:	200022f0 	.word	0x200022f0
 8006404:	200022e8 	.word	0x200022e8
 8006408:	2000276c 	.word	0x2000276c

0800640c <CDC_Init_FS>:
{
 800640c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800640e:	4c06      	ldr	r4, [pc, #24]	@ (8006428 <CDC_Init_FS+0x1c>)
 8006410:	2200      	movs	r2, #0
 8006412:	4620      	mov	r0, r4
 8006414:	4905      	ldr	r1, [pc, #20]	@ (800642c <CDC_Init_FS+0x20>)
 8006416:	f7ff fbb1 	bl	8005b7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800641a:	4620      	mov	r0, r4
 800641c:	4904      	ldr	r1, [pc, #16]	@ (8006430 <CDC_Init_FS+0x24>)
 800641e:	f7ff fbb5 	bl	8005b8c <USBD_CDC_SetRxBuffer>
}
 8006422:	2000      	movs	r0, #0
 8006424:	bd10      	pop	{r4, pc}
 8006426:	bf00      	nop
 8006428:	2000276c 	.word	0x2000276c
 800642c:	200039ac 	.word	0x200039ac
 8006430:	20003dac 	.word	0x20003dac

08006434 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006434:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006436:	4c09      	ldr	r4, [pc, #36]	@ (800645c <CDC_Transmit_FS+0x28>)
{
 8006438:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800643a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800643e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006442:	b943      	cbnz	r3, 8006456 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006444:	4601      	mov	r1, r0
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff fb98 	bl	8005b7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800644c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800644e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006452:	f7ff bba1 	b.w	8005b98 <USBD_CDC_TransmitPacket>
}
 8006456:	2001      	movs	r0, #1
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	2000276c 	.word	0x2000276c

08006460 <CDC_TxQueue_Init>:
/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
    txQueue.head = 0;
 8006460:	2200      	movs	r2, #0
    txQueue.tail = 0;
    txQueue.count = 0;
 8006462:	211e      	movs	r1, #30
    txQueue.head = 0;
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <CDC_TxQueue_Init+0x20>)
 8006466:	f8a3 2f78 	strh.w	r2, [r3, #3960]	@ 0xf78
    txQueue.count = 0;
 800646a:	f8a3 2f7a 	strh.w	r2, [r3, #3962]	@ 0xf7a
    txQueue.transmitting = false;
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800646e:	3901      	subs	r1, #1
        txQueue.messages[i].used = false;
 8006470:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
        txQueue.messages[i].length = 0;
 8006474:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8006478:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 800647c:	d1f7      	bne.n	800646e <CDC_TxQueue_Init+0xe>
    }
}
 800647e:	4770      	bx	lr
 8006480:	20002a30 	.word	0x20002a30

08006484 <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 8006484:	b538      	push	{r3, r4, r5, lr}
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8006486:	4c15      	ldr	r4, [pc, #84]	@ (80064dc <CDC_TxQueue_Add+0x58>)
{
 8006488:	460d      	mov	r5, r1
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 800648a:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 800648e:	2b1d      	cmp	r3, #29
 8006490:	d821      	bhi.n	80064d6 <CDC_TxQueue_Add+0x52>
 8006492:	2980      	cmp	r1, #128	@ 0x80
 8006494:	d81f      	bhi.n	80064d6 <CDC_TxQueue_Add+0x52>
        return false;
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
    memcpy(msg->data, data, length);
 8006496:	2284      	movs	r2, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 8006498:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
    memcpy(msg->data, data, length);
 800649c:	fb02 4303 	mla	r3, r2, r3, r4
 80064a0:	460a      	mov	r2, r1
 80064a2:	4601      	mov	r1, r0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f9f8 	bl	800789a <memcpy>
 80064aa:	4603      	mov	r3, r0
    msg->length = length;
 80064ac:	f8a0 5080 	strh.w	r5, [r0, #128]	@ 0x80
    msg->used = true;
 80064b0:	2001      	movs	r0, #1
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 80064b2:	221e      	movs	r2, #30
    msg->used = true;
 80064b4:	f883 0082 	strb.w	r0, [r3, #130]	@ 0x82
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 80064b8:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
 80064bc:	4403      	add	r3, r0
 80064be:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c2:	fb02 3311 	mls	r3, r2, r1, r3
 80064c6:	f884 3f78 	strb.w	r3, [r4, #3960]	@ 0xf78
    txQueue.count++;
 80064ca:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 80064ce:	4403      	add	r3, r0
 80064d0:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
    
    return true;
}
 80064d4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80064d6:	2000      	movs	r0, #0
 80064d8:	e7fc      	b.n	80064d4 <CDC_TxQueue_Add+0x50>
 80064da:	bf00      	nop
 80064dc:	20002a30 	.word	0x20002a30

080064e0 <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 80064e0:	b538      	push	{r3, r4, r5, lr}
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 80064e2:	4c19      	ldr	r4, [pc, #100]	@ (8006548 <CDC_TxQueue_Process+0x68>)
 80064e4:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 80064e8:	b36b      	cbz	r3, 8006546 <CDC_TxQueue_Process+0x66>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 80064ea:	f894 3f7b 	ldrb.w	r3, [r4, #3963]	@ 0xf7b
 80064ee:	b143      	cbz	r3, 8006502 <CDC_TxQueue_Process+0x22>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 80064f0:	2100      	movs	r1, #0
 80064f2:	4608      	mov	r0, r1
 80064f4:	f7ff ff9e 	bl	8006434 <CDC_Transmit_FS>
        if (result != USBD_BUSY) {
 80064f8:	2801      	cmp	r0, #1
 80064fa:	d024      	beq.n	8006546 <CDC_TxQueue_Process+0x66>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
    if (msg->used) {
 8006502:	2384      	movs	r3, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 8006504:	f894 5f79 	ldrb.w	r5, [r4, #3961]	@ 0xf79
    if (msg->used) {
 8006508:	fb03 4505 	mla	r5, r3, r5, r4
 800650c:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8006510:	b1cb      	cbz	r3, 8006546 <CDC_TxQueue_Process+0x66>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 8006512:	4628      	mov	r0, r5
 8006514:	f8b5 1080 	ldrh.w	r1, [r5, #128]	@ 0x80
 8006518:	f7ff ff8c 	bl	8006434 <CDC_Transmit_FS>
        
        if (result == USBD_OK) {
 800651c:	b998      	cbnz	r0, 8006546 <CDC_TxQueue_Process+0x66>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800651e:	2301      	movs	r3, #1
            msg->used = false;
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8006520:	221e      	movs	r2, #30
            txQueue.transmitting = true;  // Marcar como transmitiendo
 8006522:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8006526:	f894 3f79 	ldrb.w	r3, [r4, #3961]	@ 0xf79
            msg->used = false;
 800652a:	f885 0082 	strb.w	r0, [r5, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800652e:	3301      	adds	r3, #1
 8006530:	fbb3 f1f2 	udiv	r1, r3, r2
 8006534:	fb02 3311 	mls	r3, r2, r1, r3
 8006538:	f884 3f79 	strb.w	r3, [r4, #3961]	@ 0xf79
            txQueue.count--;
 800653c:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8006540:	3b01      	subs	r3, #1
 8006542:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	20002a30 	.word	0x20002a30

0800654c <CDC_Transmit_Queued>:
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
    return CDC_TxQueue_Add(data, length);
 800654c:	f7ff bf9a 	b.w	8006484 <CDC_TxQueue_Add>

08006550 <CDC_TxQueue_GetCount>:
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
    return txQueue.count;
}
 8006550:	4b01      	ldr	r3, [pc, #4]	@ (8006558 <CDC_TxQueue_GetCount+0x8>)
 8006552:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
 8006556:	4770      	bx	lr
 8006558:	20002a30 	.word	0x20002a30

0800655c <CDC_TxQueue_IsFull>:
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
    return (txQueue.count >= TX_QUEUE_SIZE);
 800655c:	4b03      	ldr	r3, [pc, #12]	@ (800656c <CDC_TxQueue_IsFull+0x10>)
 800655e:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
}
 8006562:	281d      	cmp	r0, #29
 8006564:	bf94      	ite	ls
 8006566:	2000      	movls	r0, #0
 8006568:	2001      	movhi	r0, #1
 800656a:	4770      	bx	lr
 800656c:	20002a30 	.word	0x20002a30

08006570 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006570:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006572:	4801      	ldr	r0, [pc, #4]	@ (8006578 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006574:	800b      	strh	r3, [r1, #0]
}
 8006576:	4770      	bx	lr
 8006578:	20000158 	.word	0x20000158

0800657c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800657c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800657e:	4801      	ldr	r0, [pc, #4]	@ (8006584 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006580:	800b      	strh	r3, [r1, #0]
}
 8006582:	4770      	bx	lr
 8006584:	20000154 	.word	0x20000154

08006588 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006588:	2300      	movs	r3, #0
 800658a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800658c:	461e      	mov	r6, r3
 800658e:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006590:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8006592:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006596:	bf34      	ite	cc
 8006598:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800659a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800659c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80065a0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80065a4:	3301      	adds	r3, #1
 80065a6:	b2dc      	uxtb	r4, r3
 80065a8:	42a2      	cmp	r2, r4
    value = value << 4;
 80065aa:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80065ae:	d8ef      	bhi.n	8006590 <IntToUnicode+0x8>
  }
}
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080065b4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80065b4:	231a      	movs	r3, #26
{
 80065b6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80065b8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80065ba:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <USBD_FS_SerialStrDescriptor+0x30>)
 80065bc:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 80065c0:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 80065c4:	1880      	adds	r0, r0, r2
 80065c6:	d00a      	beq.n	80065de <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80065c8:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80065cc:	4906      	ldr	r1, [pc, #24]	@ (80065e8 <USBD_FS_SerialStrDescriptor+0x34>)
 80065ce:	2208      	movs	r2, #8
 80065d0:	f7ff ffda 	bl	8006588 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80065d4:	2204      	movs	r2, #4
 80065d6:	4620      	mov	r0, r4
 80065d8:	3110      	adds	r1, #16
 80065da:	f7ff ffd5 	bl	8006588 <IntToUnicode>
}
 80065de:	4803      	ldr	r0, [pc, #12]	@ (80065ec <USBD_FS_SerialStrDescriptor+0x38>)
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	1ffff000 	.word	0x1ffff000
 80065e8:	2000013a 	.word	0x2000013a
 80065ec:	20000138 	.word	0x20000138

080065f0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80065f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065f2:	4c04      	ldr	r4, [pc, #16]	@ (8006604 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80065f4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80065f6:	4804      	ldr	r0, [pc, #16]	@ (8006608 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80065f8:	4621      	mov	r1, r4
 80065fa:	f7ff fe51 	bl	80062a0 <USBD_GetString>
}
 80065fe:	4620      	mov	r0, r4
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	200041ac 	.word	0x200041ac
 8006608:	0800c0ab 	.word	0x0800c0ab

0800660c <USBD_FS_ProductStrDescriptor>:
{
 800660c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800660e:	4c04      	ldr	r4, [pc, #16]	@ (8006620 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006610:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006612:	4804      	ldr	r0, [pc, #16]	@ (8006624 <USBD_FS_ProductStrDescriptor+0x18>)
 8006614:	4621      	mov	r1, r4
 8006616:	f7ff fe43 	bl	80062a0 <USBD_GetString>
}
 800661a:	4620      	mov	r0, r4
 800661c:	bd10      	pop	{r4, pc}
 800661e:	bf00      	nop
 8006620:	200041ac 	.word	0x200041ac
 8006624:	0800c0be 	.word	0x0800c0be

08006628 <USBD_FS_ConfigStrDescriptor>:
{
 8006628:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800662a:	4c04      	ldr	r4, [pc, #16]	@ (800663c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800662c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800662e:	4804      	ldr	r0, [pc, #16]	@ (8006640 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006630:	4621      	mov	r1, r4
 8006632:	f7ff fe35 	bl	80062a0 <USBD_GetString>
}
 8006636:	4620      	mov	r0, r4
 8006638:	bd10      	pop	{r4, pc}
 800663a:	bf00      	nop
 800663c:	200041ac 	.word	0x200041ac
 8006640:	0800c0d4 	.word	0x0800c0d4

08006644 <USBD_FS_InterfaceStrDescriptor>:
{
 8006644:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006646:	4c04      	ldr	r4, [pc, #16]	@ (8006658 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006648:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800664a:	4804      	ldr	r0, [pc, #16]	@ (800665c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800664c:	4621      	mov	r1, r4
 800664e:	f7ff fe27 	bl	80062a0 <USBD_GetString>
}
 8006652:	4620      	mov	r0, r4
 8006654:	bd10      	pop	{r4, pc}
 8006656:	bf00      	nop
 8006658:	200041ac 	.word	0x200041ac
 800665c:	0800c0df 	.word	0x0800c0df

08006660 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006660:	b118      	cbz	r0, 800666a <USBD_Get_USB_Status+0xa>
 8006662:	2802      	cmp	r0, #2
 8006664:	bf0c      	ite	eq
 8006666:	2001      	moveq	r0, #1
 8006668:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800666a:	4770      	bx	lr

0800666c <HAL_PCD_MspInit>:
{
 800666c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800666e:	4b0e      	ldr	r3, [pc, #56]	@ (80066a8 <HAL_PCD_MspInit+0x3c>)
 8006670:	6802      	ldr	r2, [r0, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d115      	bne.n	80066a2 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8006676:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800667a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800667c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800667e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006682:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006684:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006686:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006688:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800668a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006692:	f7fd f8b9 	bl	8003808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006696:	2014      	movs	r0, #20
}
 8006698:	b003      	add	sp, #12
 800669a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800669e:	f7fd b8e3 	b.w	8003868 <HAL_NVIC_EnableIRQ>
}
 80066a2:	b003      	add	sp, #12
 80066a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80066a8:	40005c00 	.word	0x40005c00

080066ac <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80066ac:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80066b0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80066b4:	f7ff bad1 	b.w	8005c5a <USBD_LL_SetupStage>

080066b8 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066b8:	2328      	movs	r3, #40	@ 0x28
 80066ba:	fb03 0301 	mla	r3, r3, r1, r0
 80066be:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80066c2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80066c6:	f7ff baf5 	b.w	8005cb4 <USBD_LL_DataOutStage>

080066ca <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066ca:	2328      	movs	r3, #40	@ 0x28
 80066cc:	fb03 0301 	mla	r3, r3, r1, r0
 80066d0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80066d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066d6:	f7ff bb25 	b.w	8005d24 <USBD_LL_DataInStage>

080066da <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80066da:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80066de:	f7ff bbba 	b.w	8005e56 <USBD_LL_SOF>

080066e2 <HAL_PCD_ResetCallback>:
{
 80066e2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066e4:	7983      	ldrb	r3, [r0, #6]
{
 80066e6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d001      	beq.n	80066f0 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80066ec:	f7fc fad6 	bl	8002c9c <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066f0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 80066f4:	2101      	movs	r1, #1
 80066f6:	f7ff fb98 	bl	8005e2a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066fa:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 80066fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006702:	f7ff bb6b 	b.w	8005ddc <USBD_LL_Reset>
	...

08006708 <HAL_PCD_SuspendCallback>:
{
 8006708:	b510      	push	{r4, lr}
 800670a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800670c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006710:	f7ff fb8e 	bl	8005e30 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006714:	7aa3      	ldrb	r3, [r4, #10]
 8006716:	b123      	cbz	r3, 8006722 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006718:	4a02      	ldr	r2, [pc, #8]	@ (8006724 <HAL_PCD_SuspendCallback+0x1c>)
 800671a:	6913      	ldr	r3, [r2, #16]
 800671c:	f043 0306 	orr.w	r3, r3, #6
 8006720:	6113      	str	r3, [r2, #16]
}
 8006722:	bd10      	pop	{r4, pc}
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006728:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800672c:	f7ff bb89 	b.w	8005e42 <USBD_LL_Resume>

08006730 <USBD_LL_Init>:
{
 8006730:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8006732:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <USBD_LL_Init+0x78>)
{
 8006734:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006736:	481d      	ldr	r0, [pc, #116]	@ (80067ac <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8006738:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800673a:	2308      	movs	r3, #8
 800673c:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800673e:	2302      	movs	r3, #2
 8006740:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006742:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8006744:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006748:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800674c:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800674e:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006750:	f7fd f9b2 	bl	8003ab8 <HAL_PCD_Init>
 8006754:	b108      	cbz	r0, 800675a <USBD_LL_Init+0x2a>
    Error_Handler( );
 8006756:	f7fc faa1 	bl	8002c9c <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800675a:	2200      	movs	r2, #0
 800675c:	2318      	movs	r3, #24
 800675e:	4611      	mov	r1, r2
 8006760:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006764:	f7fe f833 	bl	80047ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006768:	2358      	movs	r3, #88	@ 0x58
 800676a:	2200      	movs	r2, #0
 800676c:	2180      	movs	r1, #128	@ 0x80
 800676e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006772:	f7fe f82c 	bl	80047ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006776:	23c0      	movs	r3, #192	@ 0xc0
 8006778:	2200      	movs	r2, #0
 800677a:	2181      	movs	r1, #129	@ 0x81
 800677c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006780:	f7fe f825 	bl	80047ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006784:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006788:	2200      	movs	r2, #0
 800678a:	2101      	movs	r1, #1
 800678c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006790:	f7fe f81d 	bl	80047ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006798:	2200      	movs	r2, #0
 800679a:	2182      	movs	r1, #130	@ 0x82
 800679c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80067a0:	f7fe f815 	bl	80047ce <HAL_PCDEx_PMAConfig>
}
 80067a4:	2000      	movs	r0, #0
 80067a6:	bd10      	pop	{r4, pc}
 80067a8:	40005c00 	.word	0x40005c00
 80067ac:	200045cc 	.word	0x200045cc

080067b0 <USBD_LL_Start>:
{
 80067b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80067b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80067b6:	f7fd f9e2 	bl	8003b7e <HAL_PCD_Start>
}
 80067ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067be:	f7ff bf4f 	b.w	8006660 <USBD_Get_USB_Status>

080067c2 <USBD_LL_OpenEP>:
{
 80067c2:	b510      	push	{r4, lr}
 80067c4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 80067ca:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067cc:	4623      	mov	r3, r4
 80067ce:	f7fd ff07 	bl	80045e0 <HAL_PCD_EP_Open>
}
 80067d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d6:	f7ff bf43 	b.w	8006660 <USBD_Get_USB_Status>

080067da <USBD_LL_CloseEP>:
{
 80067da:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80067dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80067e0:	f7fd ff2e 	bl	8004640 <HAL_PCD_EP_Close>
}
 80067e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e8:	f7ff bf3a 	b.w	8006660 <USBD_Get_USB_Status>

080067ec <USBD_LL_StallEP>:
{
 80067ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80067ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80067f2:	f7fd ff84 	bl	80046fe <HAL_PCD_EP_SetStall>
}
 80067f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067fa:	f7ff bf31 	b.w	8006660 <USBD_Get_USB_Status>

080067fe <USBD_LL_ClearStallEP>:
{
 80067fe:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006800:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006804:	f7fd ffb1 	bl	800476a <HAL_PCD_EP_ClrStall>
}
 8006808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800680c:	f7ff bf28 	b.w	8006660 <USBD_Get_USB_Status>

08006810 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006810:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8006812:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006816:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800681a:	bf1b      	ittet	ne
 800681c:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8006820:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006824:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006828:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800682a:	bf08      	it	eq
 800682c:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8006830:	4770      	bx	lr

08006832 <USBD_LL_SetUSBAddress>:
{
 8006832:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006834:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006838:	f7fd f9ba 	bl	8003bb0 <HAL_PCD_SetAddress>
}
 800683c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006840:	f7ff bf0e 	b.w	8006660 <USBD_Get_USB_Status>

08006844 <USBD_LL_Transmit>:
{
 8006844:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006846:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800684a:	f7fd ff40 	bl	80046ce <HAL_PCD_EP_Transmit>
}
 800684e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006852:	f7ff bf05 	b.w	8006660 <USBD_Get_USB_Status>

08006856 <USBD_LL_PrepareReceive>:
{
 8006856:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006858:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800685c:	f7fd ff18 	bl	8004690 <HAL_PCD_EP_Receive>
}
 8006860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006864:	f7ff befc 	b.w	8006660 <USBD_Get_USB_Status>

08006868 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006868:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800686c:	f7fd bf27 	b.w	80046be <HAL_PCD_EP_GetRxCount>

08006870 <USBD_static_malloc>:
}
 8006870:	4800      	ldr	r0, [pc, #0]	@ (8006874 <USBD_static_malloc+0x4>)
 8006872:	4770      	bx	lr
 8006874:	200043ac 	.word	0x200043ac

08006878 <USBD_static_free>:
}
 8006878:	4770      	bx	lr

0800687a <HAL_PCDEx_SetConnectionState>:
}
 800687a:	4770      	bx	lr

0800687c <atof>:
 800687c:	2100      	movs	r1, #0
 800687e:	f000 bdfb 	b.w	8007478 <strtod>

08006882 <sulp>:
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	460f      	mov	r7, r1
 8006888:	4690      	mov	r8, r2
 800688a:	f001 ffc9 	bl	8008820 <__ulp>
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	f1b8 0f00 	cmp.w	r8, #0
 8006896:	d011      	beq.n	80068bc <sulp+0x3a>
 8006898:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800689c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dd0b      	ble.n	80068bc <sulp+0x3a>
 80068a4:	2400      	movs	r4, #0
 80068a6:	051b      	lsls	r3, r3, #20
 80068a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068ac:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068b0:	4622      	mov	r2, r4
 80068b2:	462b      	mov	r3, r5
 80068b4:	f7f9 fe10 	bl	80004d8 <__aeabi_dmul>
 80068b8:	4604      	mov	r4, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	4620      	mov	r0, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <_strtod_l>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b09f      	sub	sp, #124	@ 0x7c
 80068ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80068d0:	2200      	movs	r2, #0
 80068d2:	460c      	mov	r4, r1
 80068d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80068d6:	f04f 0a00 	mov.w	sl, #0
 80068da:	f04f 0b00 	mov.w	fp, #0
 80068de:	460a      	mov	r2, r1
 80068e0:	9005      	str	r0, [sp, #20]
 80068e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068e4:	7811      	ldrb	r1, [r2, #0]
 80068e6:	292b      	cmp	r1, #43	@ 0x2b
 80068e8:	d048      	beq.n	800697c <_strtod_l+0xb4>
 80068ea:	d836      	bhi.n	800695a <_strtod_l+0x92>
 80068ec:	290d      	cmp	r1, #13
 80068ee:	d830      	bhi.n	8006952 <_strtod_l+0x8a>
 80068f0:	2908      	cmp	r1, #8
 80068f2:	d830      	bhi.n	8006956 <_strtod_l+0x8e>
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d039      	beq.n	800696c <_strtod_l+0xa4>
 80068f8:	2200      	movs	r2, #0
 80068fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80068fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80068fe:	782a      	ldrb	r2, [r5, #0]
 8006900:	2a30      	cmp	r2, #48	@ 0x30
 8006902:	f040 80b0 	bne.w	8006a66 <_strtod_l+0x19e>
 8006906:	786a      	ldrb	r2, [r5, #1]
 8006908:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800690c:	2a58      	cmp	r2, #88	@ 0x58
 800690e:	d16c      	bne.n	80069ea <_strtod_l+0x122>
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006914:	4a8f      	ldr	r2, [pc, #572]	@ (8006b54 <_strtod_l+0x28c>)
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	ab1a      	add	r3, sp, #104	@ 0x68
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	9805      	ldr	r0, [sp, #20]
 800691e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006920:	a919      	add	r1, sp, #100	@ 0x64
 8006922:	f001 f87f 	bl	8007a24 <__gethex>
 8006926:	f010 060f 	ands.w	r6, r0, #15
 800692a:	4604      	mov	r4, r0
 800692c:	d005      	beq.n	800693a <_strtod_l+0x72>
 800692e:	2e06      	cmp	r6, #6
 8006930:	d126      	bne.n	8006980 <_strtod_l+0xb8>
 8006932:	2300      	movs	r3, #0
 8006934:	3501      	adds	r5, #1
 8006936:	9519      	str	r5, [sp, #100]	@ 0x64
 8006938:	930e      	str	r3, [sp, #56]	@ 0x38
 800693a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8582 	bne.w	8007446 <_strtod_l+0xb7e>
 8006942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006944:	b1bb      	cbz	r3, 8006976 <_strtod_l+0xae>
 8006946:	4650      	mov	r0, sl
 8006948:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800694c:	b01f      	add	sp, #124	@ 0x7c
 800694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006952:	2920      	cmp	r1, #32
 8006954:	d1d0      	bne.n	80068f8 <_strtod_l+0x30>
 8006956:	3201      	adds	r2, #1
 8006958:	e7c3      	b.n	80068e2 <_strtod_l+0x1a>
 800695a:	292d      	cmp	r1, #45	@ 0x2d
 800695c:	d1cc      	bne.n	80068f8 <_strtod_l+0x30>
 800695e:	2101      	movs	r1, #1
 8006960:	910e      	str	r1, [sp, #56]	@ 0x38
 8006962:	1c51      	adds	r1, r2, #1
 8006964:	9119      	str	r1, [sp, #100]	@ 0x64
 8006966:	7852      	ldrb	r2, [r2, #1]
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1c7      	bne.n	80068fc <_strtod_l+0x34>
 800696c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800696e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8566 	bne.w	8007442 <_strtod_l+0xb7a>
 8006976:	4650      	mov	r0, sl
 8006978:	4659      	mov	r1, fp
 800697a:	e7e7      	b.n	800694c <_strtod_l+0x84>
 800697c:	2100      	movs	r1, #0
 800697e:	e7ef      	b.n	8006960 <_strtod_l+0x98>
 8006980:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006982:	b13a      	cbz	r2, 8006994 <_strtod_l+0xcc>
 8006984:	2135      	movs	r1, #53	@ 0x35
 8006986:	a81c      	add	r0, sp, #112	@ 0x70
 8006988:	f002 f83a 	bl	8008a00 <__copybits>
 800698c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800698e:	9805      	ldr	r0, [sp, #20]
 8006990:	f001 fc1a 	bl	80081c8 <_Bfree>
 8006994:	3e01      	subs	r6, #1
 8006996:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006998:	2e04      	cmp	r6, #4
 800699a:	d806      	bhi.n	80069aa <_strtod_l+0xe2>
 800699c:	e8df f006 	tbb	[pc, r6]
 80069a0:	201d0314 	.word	0x201d0314
 80069a4:	14          	.byte	0x14
 80069a5:	00          	.byte	0x00
 80069a6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80069aa:	05e1      	lsls	r1, r4, #23
 80069ac:	bf48      	it	mi
 80069ae:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069b6:	0d1b      	lsrs	r3, r3, #20
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1bd      	bne.n	800693a <_strtod_l+0x72>
 80069be:	f000 ff37 	bl	8007830 <__errno>
 80069c2:	2322      	movs	r3, #34	@ 0x22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	e7b8      	b.n	800693a <_strtod_l+0x72>
 80069c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80069cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80069d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80069d4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069d8:	e7e7      	b.n	80069aa <_strtod_l+0xe2>
 80069da:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006b58 <_strtod_l+0x290>
 80069de:	e7e4      	b.n	80069aa <_strtod_l+0xe2>
 80069e0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80069e4:	f04f 3aff 	mov.w	sl, #4294967295
 80069e8:	e7df      	b.n	80069aa <_strtod_l+0xe2>
 80069ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b30      	cmp	r3, #48	@ 0x30
 80069f4:	d0f9      	beq.n	80069ea <_strtod_l+0x122>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d09f      	beq.n	800693a <_strtod_l+0x72>
 80069fa:	2301      	movs	r3, #1
 80069fc:	2700      	movs	r7, #0
 80069fe:	220a      	movs	r2, #10
 8006a00:	46b9      	mov	r9, r7
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a06:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006a08:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a0a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a0c:	7805      	ldrb	r5, [r0, #0]
 8006a0e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a12:	b2d9      	uxtb	r1, r3
 8006a14:	2909      	cmp	r1, #9
 8006a16:	d928      	bls.n	8006a6a <_strtod_l+0x1a2>
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4950      	ldr	r1, [pc, #320]	@ (8006b5c <_strtod_l+0x294>)
 8006a1c:	f000 fe9d 	bl	800775a <strncmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d032      	beq.n	8006a8a <_strtod_l+0x1c2>
 8006a24:	2000      	movs	r0, #0
 8006a26:	462a      	mov	r2, r5
 8006a28:	4603      	mov	r3, r0
 8006a2a:	464d      	mov	r5, r9
 8006a2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a2e:	2a65      	cmp	r2, #101	@ 0x65
 8006a30:	d001      	beq.n	8006a36 <_strtod_l+0x16e>
 8006a32:	2a45      	cmp	r2, #69	@ 0x45
 8006a34:	d114      	bne.n	8006a60 <_strtod_l+0x198>
 8006a36:	b91d      	cbnz	r5, 8006a40 <_strtod_l+0x178>
 8006a38:	9a08      	ldr	r2, [sp, #32]
 8006a3a:	4302      	orrs	r2, r0
 8006a3c:	d096      	beq.n	800696c <_strtod_l+0xa4>
 8006a3e:	2500      	movs	r5, #0
 8006a40:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a42:	1c62      	adds	r2, r4, #1
 8006a44:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a46:	7862      	ldrb	r2, [r4, #1]
 8006a48:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a4a:	d07a      	beq.n	8006b42 <_strtod_l+0x27a>
 8006a4c:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a4e:	d07e      	beq.n	8006b4e <_strtod_l+0x286>
 8006a50:	f04f 0c00 	mov.w	ip, #0
 8006a54:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a58:	2909      	cmp	r1, #9
 8006a5a:	f240 8085 	bls.w	8006b68 <_strtod_l+0x2a0>
 8006a5e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006a60:	f04f 0800 	mov.w	r8, #0
 8006a64:	e0a5      	b.n	8006bb2 <_strtod_l+0x2ea>
 8006a66:	2300      	movs	r3, #0
 8006a68:	e7c8      	b.n	80069fc <_strtod_l+0x134>
 8006a6a:	f1b9 0f08 	cmp.w	r9, #8
 8006a6e:	bfd8      	it	le
 8006a70:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006a72:	f100 0001 	add.w	r0, r0, #1
 8006a76:	bfd6      	itet	le
 8006a78:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a7c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006a80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006a82:	f109 0901 	add.w	r9, r9, #1
 8006a86:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a88:	e7bf      	b.n	8006a0a <_strtod_l+0x142>
 8006a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a90:	785a      	ldrb	r2, [r3, #1]
 8006a92:	f1b9 0f00 	cmp.w	r9, #0
 8006a96:	d03b      	beq.n	8006b10 <_strtod_l+0x248>
 8006a98:	464d      	mov	r5, r9
 8006a9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a9c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d912      	bls.n	8006aca <_strtod_l+0x202>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e7c2      	b.n	8006a2e <_strtod_l+0x166>
 8006aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aaa:	3001      	adds	r0, #1
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ab0:	785a      	ldrb	r2, [r3, #1]
 8006ab2:	2a30      	cmp	r2, #48	@ 0x30
 8006ab4:	d0f8      	beq.n	8006aa8 <_strtod_l+0x1e0>
 8006ab6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	f200 84c8 	bhi.w	8007450 <_strtod_l+0xb88>
 8006ac0:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ac8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006aca:	3a30      	subs	r2, #48	@ 0x30
 8006acc:	f100 0301 	add.w	r3, r0, #1
 8006ad0:	d018      	beq.n	8006b04 <_strtod_l+0x23c>
 8006ad2:	462e      	mov	r6, r5
 8006ad4:	f04f 0e0a 	mov.w	lr, #10
 8006ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ada:	4419      	add	r1, r3
 8006adc:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ade:	1c71      	adds	r1, r6, #1
 8006ae0:	eba1 0c05 	sub.w	ip, r1, r5
 8006ae4:	4563      	cmp	r3, ip
 8006ae6:	dc15      	bgt.n	8006b14 <_strtod_l+0x24c>
 8006ae8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006aec:	182b      	adds	r3, r5, r0
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	f105 0501 	add.w	r5, r5, #1
 8006af4:	4405      	add	r5, r0
 8006af6:	dc1a      	bgt.n	8006b2e <_strtod_l+0x266>
 8006af8:	230a      	movs	r3, #10
 8006afa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006afc:	fb03 2301 	mla	r3, r3, r1, r2
 8006b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b02:	2300      	movs	r3, #0
 8006b04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b06:	4618      	mov	r0, r3
 8006b08:	1c51      	adds	r1, r2, #1
 8006b0a:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b0c:	7852      	ldrb	r2, [r2, #1]
 8006b0e:	e7c5      	b.n	8006a9c <_strtod_l+0x1d4>
 8006b10:	4648      	mov	r0, r9
 8006b12:	e7ce      	b.n	8006ab2 <_strtod_l+0x1ea>
 8006b14:	2e08      	cmp	r6, #8
 8006b16:	dc05      	bgt.n	8006b24 <_strtod_l+0x25c>
 8006b18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006b1a:	fb0e f606 	mul.w	r6, lr, r6
 8006b1e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b20:	460e      	mov	r6, r1
 8006b22:	e7dc      	b.n	8006ade <_strtod_l+0x216>
 8006b24:	2910      	cmp	r1, #16
 8006b26:	bfd8      	it	le
 8006b28:	fb0e f707 	mulle.w	r7, lr, r7
 8006b2c:	e7f8      	b.n	8006b20 <_strtod_l+0x258>
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	bfdc      	itt	le
 8006b32:	230a      	movle	r3, #10
 8006b34:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b38:	e7e3      	b.n	8006b02 <_strtod_l+0x23a>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e77a      	b.n	8006a38 <_strtod_l+0x170>
 8006b42:	f04f 0c00 	mov.w	ip, #0
 8006b46:	1ca2      	adds	r2, r4, #2
 8006b48:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b4a:	78a2      	ldrb	r2, [r4, #2]
 8006b4c:	e782      	b.n	8006a54 <_strtod_l+0x18c>
 8006b4e:	f04f 0c01 	mov.w	ip, #1
 8006b52:	e7f8      	b.n	8006b46 <_strtod_l+0x27e>
 8006b54:	0800c294 	.word	0x0800c294
 8006b58:	7ff00000 	.word	0x7ff00000
 8006b5c:	0800c0ed 	.word	0x0800c0ed
 8006b60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b62:	1c51      	adds	r1, r2, #1
 8006b64:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b66:	7852      	ldrb	r2, [r2, #1]
 8006b68:	2a30      	cmp	r2, #48	@ 0x30
 8006b6a:	d0f9      	beq.n	8006b60 <_strtod_l+0x298>
 8006b6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006b70:	2908      	cmp	r1, #8
 8006b72:	f63f af75 	bhi.w	8006a60 <_strtod_l+0x198>
 8006b76:	f04f 080a 	mov.w	r8, #10
 8006b7a:	3a30      	subs	r2, #48	@ 0x30
 8006b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006b82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b84:	1c56      	adds	r6, r2, #1
 8006b86:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b88:	7852      	ldrb	r2, [r2, #1]
 8006b8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b8e:	f1be 0f09 	cmp.w	lr, #9
 8006b92:	d939      	bls.n	8006c08 <_strtod_l+0x340>
 8006b94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b9a:	1a76      	subs	r6, r6, r1
 8006b9c:	2e08      	cmp	r6, #8
 8006b9e:	dc03      	bgt.n	8006ba8 <_strtod_l+0x2e0>
 8006ba0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ba2:	4588      	cmp	r8, r1
 8006ba4:	bfa8      	it	ge
 8006ba6:	4688      	movge	r8, r1
 8006ba8:	f1bc 0f00 	cmp.w	ip, #0
 8006bac:	d001      	beq.n	8006bb2 <_strtod_l+0x2ea>
 8006bae:	f1c8 0800 	rsb	r8, r8, #0
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	d14e      	bne.n	8006c54 <_strtod_l+0x38c>
 8006bb6:	9908      	ldr	r1, [sp, #32]
 8006bb8:	4308      	orrs	r0, r1
 8006bba:	f47f aebe 	bne.w	800693a <_strtod_l+0x72>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f aed4 	bne.w	800696c <_strtod_l+0xa4>
 8006bc4:	2a69      	cmp	r2, #105	@ 0x69
 8006bc6:	d028      	beq.n	8006c1a <_strtod_l+0x352>
 8006bc8:	dc25      	bgt.n	8006c16 <_strtod_l+0x34e>
 8006bca:	2a49      	cmp	r2, #73	@ 0x49
 8006bcc:	d025      	beq.n	8006c1a <_strtod_l+0x352>
 8006bce:	2a4e      	cmp	r2, #78	@ 0x4e
 8006bd0:	f47f aecc 	bne.w	800696c <_strtod_l+0xa4>
 8006bd4:	4999      	ldr	r1, [pc, #612]	@ (8006e3c <_strtod_l+0x574>)
 8006bd6:	a819      	add	r0, sp, #100	@ 0x64
 8006bd8:	f001 f946 	bl	8007e68 <__match>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f aec5 	beq.w	800696c <_strtod_l+0xa4>
 8006be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b28      	cmp	r3, #40	@ 0x28
 8006be8:	d12e      	bne.n	8006c48 <_strtod_l+0x380>
 8006bea:	4995      	ldr	r1, [pc, #596]	@ (8006e40 <_strtod_l+0x578>)
 8006bec:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bee:	a819      	add	r0, sp, #100	@ 0x64
 8006bf0:	f001 f94e 	bl	8007e90 <__hexnan>
 8006bf4:	2805      	cmp	r0, #5
 8006bf6:	d127      	bne.n	8006c48 <_strtod_l+0x380>
 8006bf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bfa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006bfe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c06:	e698      	b.n	800693a <_strtod_l+0x72>
 8006c08:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c0a:	fb08 2101 	mla	r1, r8, r1, r2
 8006c0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c14:	e7b5      	b.n	8006b82 <_strtod_l+0x2ba>
 8006c16:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c18:	e7da      	b.n	8006bd0 <_strtod_l+0x308>
 8006c1a:	498a      	ldr	r1, [pc, #552]	@ (8006e44 <_strtod_l+0x57c>)
 8006c1c:	a819      	add	r0, sp, #100	@ 0x64
 8006c1e:	f001 f923 	bl	8007e68 <__match>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f43f aea2 	beq.w	800696c <_strtod_l+0xa4>
 8006c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c2a:	4987      	ldr	r1, [pc, #540]	@ (8006e48 <_strtod_l+0x580>)
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	a819      	add	r0, sp, #100	@ 0x64
 8006c30:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c32:	f001 f919 	bl	8007e68 <__match>
 8006c36:	b910      	cbnz	r0, 8006c3e <_strtod_l+0x376>
 8006c38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c3e:	f04f 0a00 	mov.w	sl, #0
 8006c42:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006e4c <_strtod_l+0x584>
 8006c46:	e678      	b.n	800693a <_strtod_l+0x72>
 8006c48:	4881      	ldr	r0, [pc, #516]	@ (8006e50 <_strtod_l+0x588>)
 8006c4a:	f000 fe35 	bl	80078b8 <nan>
 8006c4e:	4682      	mov	sl, r0
 8006c50:	468b      	mov	fp, r1
 8006c52:	e672      	b.n	800693a <_strtod_l+0x72>
 8006c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c56:	f1b9 0f00 	cmp.w	r9, #0
 8006c5a:	bf08      	it	eq
 8006c5c:	46a9      	moveq	r9, r5
 8006c5e:	eba8 0303 	sub.w	r3, r8, r3
 8006c62:	2d10      	cmp	r5, #16
 8006c64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006c66:	462c      	mov	r4, r5
 8006c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c6a:	bfa8      	it	ge
 8006c6c:	2410      	movge	r4, #16
 8006c6e:	f7f9 fbb9 	bl	80003e4 <__aeabi_ui2d>
 8006c72:	2d09      	cmp	r5, #9
 8006c74:	4682      	mov	sl, r0
 8006c76:	468b      	mov	fp, r1
 8006c78:	dc11      	bgt.n	8006c9e <_strtod_l+0x3d6>
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f43f ae5c 	beq.w	800693a <_strtod_l+0x72>
 8006c82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c84:	dd76      	ble.n	8006d74 <_strtod_l+0x4ac>
 8006c86:	2b16      	cmp	r3, #22
 8006c88:	dc5d      	bgt.n	8006d46 <_strtod_l+0x47e>
 8006c8a:	4972      	ldr	r1, [pc, #456]	@ (8006e54 <_strtod_l+0x58c>)
 8006c8c:	4652      	mov	r2, sl
 8006c8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c92:	465b      	mov	r3, fp
 8006c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c98:	f7f9 fc1e 	bl	80004d8 <__aeabi_dmul>
 8006c9c:	e7d7      	b.n	8006c4e <_strtod_l+0x386>
 8006c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e54 <_strtod_l+0x58c>)
 8006ca0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ca4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ca8:	f7f9 fc16 	bl	80004d8 <__aeabi_dmul>
 8006cac:	4682      	mov	sl, r0
 8006cae:	4638      	mov	r0, r7
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	f7f9 fb97 	bl	80003e4 <__aeabi_ui2d>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4650      	mov	r0, sl
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	f7f9 fa55 	bl	800016c <__adddf3>
 8006cc2:	2d0f      	cmp	r5, #15
 8006cc4:	4682      	mov	sl, r0
 8006cc6:	468b      	mov	fp, r1
 8006cc8:	ddd7      	ble.n	8006c7a <_strtod_l+0x3b2>
 8006cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ccc:	1b2c      	subs	r4, r5, r4
 8006cce:	441c      	add	r4, r3
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	f340 8093 	ble.w	8006dfc <_strtod_l+0x534>
 8006cd6:	f014 030f 	ands.w	r3, r4, #15
 8006cda:	d00a      	beq.n	8006cf2 <_strtod_l+0x42a>
 8006cdc:	495d      	ldr	r1, [pc, #372]	@ (8006e54 <_strtod_l+0x58c>)
 8006cde:	4652      	mov	r2, sl
 8006ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce8:	465b      	mov	r3, fp
 8006cea:	f7f9 fbf5 	bl	80004d8 <__aeabi_dmul>
 8006cee:	4682      	mov	sl, r0
 8006cf0:	468b      	mov	fp, r1
 8006cf2:	f034 040f 	bics.w	r4, r4, #15
 8006cf6:	d073      	beq.n	8006de0 <_strtod_l+0x518>
 8006cf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006cfc:	dd49      	ble.n	8006d92 <_strtod_l+0x4ca>
 8006cfe:	2400      	movs	r4, #0
 8006d00:	46a0      	mov	r8, r4
 8006d02:	46a1      	mov	r9, r4
 8006d04:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d06:	2322      	movs	r3, #34	@ 0x22
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	9a05      	ldr	r2, [sp, #20]
 8006d0e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006e4c <_strtod_l+0x584>
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f43f ae0f 	beq.w	800693a <_strtod_l+0x72>
 8006d1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d1e:	9805      	ldr	r0, [sp, #20]
 8006d20:	f001 fa52 	bl	80081c8 <_Bfree>
 8006d24:	4649      	mov	r1, r9
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	f001 fa4e 	bl	80081c8 <_Bfree>
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	9805      	ldr	r0, [sp, #20]
 8006d30:	f001 fa4a 	bl	80081c8 <_Bfree>
 8006d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d36:	9805      	ldr	r0, [sp, #20]
 8006d38:	f001 fa46 	bl	80081c8 <_Bfree>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	9805      	ldr	r0, [sp, #20]
 8006d40:	f001 fa42 	bl	80081c8 <_Bfree>
 8006d44:	e5f9      	b.n	800693a <_strtod_l+0x72>
 8006d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	dbbc      	blt.n	8006cca <_strtod_l+0x402>
 8006d50:	4c40      	ldr	r4, [pc, #256]	@ (8006e54 <_strtod_l+0x58c>)
 8006d52:	f1c5 050f 	rsb	r5, r5, #15
 8006d56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d60:	465b      	mov	r3, fp
 8006d62:	f7f9 fbb9 	bl	80004d8 <__aeabi_dmul>
 8006d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d68:	1b5d      	subs	r5, r3, r5
 8006d6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d72:	e791      	b.n	8006c98 <_strtod_l+0x3d0>
 8006d74:	3316      	adds	r3, #22
 8006d76:	dba8      	blt.n	8006cca <_strtod_l+0x402>
 8006d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	eba3 0808 	sub.w	r8, r3, r8
 8006d80:	4b34      	ldr	r3, [pc, #208]	@ (8006e54 <_strtod_l+0x58c>)
 8006d82:	4659      	mov	r1, fp
 8006d84:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d88:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d8c:	f7f9 fcce 	bl	800072c <__aeabi_ddiv>
 8006d90:	e75d      	b.n	8006c4e <_strtod_l+0x386>
 8006d92:	2300      	movs	r3, #0
 8006d94:	4650      	mov	r0, sl
 8006d96:	4659      	mov	r1, fp
 8006d98:	461e      	mov	r6, r3
 8006d9a:	4f2f      	ldr	r7, [pc, #188]	@ (8006e58 <_strtod_l+0x590>)
 8006d9c:	1124      	asrs	r4, r4, #4
 8006d9e:	2c01      	cmp	r4, #1
 8006da0:	dc21      	bgt.n	8006de6 <_strtod_l+0x51e>
 8006da2:	b10b      	cbz	r3, 8006da8 <_strtod_l+0x4e0>
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	492b      	ldr	r1, [pc, #172]	@ (8006e58 <_strtod_l+0x590>)
 8006daa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006dae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006db2:	4652      	mov	r2, sl
 8006db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006db8:	465b      	mov	r3, fp
 8006dba:	f7f9 fb8d 	bl	80004d8 <__aeabi_dmul>
 8006dbe:	4b23      	ldr	r3, [pc, #140]	@ (8006e4c <_strtod_l+0x584>)
 8006dc0:	460a      	mov	r2, r1
 8006dc2:	400b      	ands	r3, r1
 8006dc4:	4925      	ldr	r1, [pc, #148]	@ (8006e5c <_strtod_l+0x594>)
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	d898      	bhi.n	8006cfe <_strtod_l+0x436>
 8006dcc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf86      	itte	hi
 8006dd4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dd8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006e60 <_strtod_l+0x598>
 8006ddc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006de0:	2300      	movs	r3, #0
 8006de2:	9308      	str	r3, [sp, #32]
 8006de4:	e076      	b.n	8006ed4 <_strtod_l+0x60c>
 8006de6:	07e2      	lsls	r2, r4, #31
 8006de8:	d504      	bpl.n	8006df4 <_strtod_l+0x52c>
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	f7f9 fb73 	bl	80004d8 <__aeabi_dmul>
 8006df2:	2301      	movs	r3, #1
 8006df4:	3601      	adds	r6, #1
 8006df6:	1064      	asrs	r4, r4, #1
 8006df8:	3708      	adds	r7, #8
 8006dfa:	e7d0      	b.n	8006d9e <_strtod_l+0x4d6>
 8006dfc:	d0f0      	beq.n	8006de0 <_strtod_l+0x518>
 8006dfe:	4264      	negs	r4, r4
 8006e00:	f014 020f 	ands.w	r2, r4, #15
 8006e04:	d00a      	beq.n	8006e1c <_strtod_l+0x554>
 8006e06:	4b13      	ldr	r3, [pc, #76]	@ (8006e54 <_strtod_l+0x58c>)
 8006e08:	4650      	mov	r0, sl
 8006e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e0e:	4659      	mov	r1, fp
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 fc8a 	bl	800072c <__aeabi_ddiv>
 8006e18:	4682      	mov	sl, r0
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	1124      	asrs	r4, r4, #4
 8006e1e:	d0df      	beq.n	8006de0 <_strtod_l+0x518>
 8006e20:	2c1f      	cmp	r4, #31
 8006e22:	dd1f      	ble.n	8006e64 <_strtod_l+0x59c>
 8006e24:	2400      	movs	r4, #0
 8006e26:	46a0      	mov	r8, r4
 8006e28:	46a1      	mov	r9, r4
 8006e2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e2c:	2322      	movs	r3, #34	@ 0x22
 8006e2e:	9a05      	ldr	r2, [sp, #20]
 8006e30:	f04f 0a00 	mov.w	sl, #0
 8006e34:	f04f 0b00 	mov.w	fp, #0
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	e76b      	b.n	8006d14 <_strtod_l+0x44c>
 8006e3c:	0800c0f8 	.word	0x0800c0f8
 8006e40:	0800c280 	.word	0x0800c280
 8006e44:	0800c0ef 	.word	0x0800c0ef
 8006e48:	0800c0f2 	.word	0x0800c0f2
 8006e4c:	7ff00000 	.word	0x7ff00000
 8006e50:	0800c047 	.word	0x0800c047
 8006e54:	0800c308 	.word	0x0800c308
 8006e58:	0800c2e0 	.word	0x0800c2e0
 8006e5c:	7ca00000 	.word	0x7ca00000
 8006e60:	7fefffff 	.word	0x7fefffff
 8006e64:	f014 0310 	ands.w	r3, r4, #16
 8006e68:	bf18      	it	ne
 8006e6a:	236a      	movne	r3, #106	@ 0x6a
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	9308      	str	r3, [sp, #32]
 8006e70:	4659      	mov	r1, fp
 8006e72:	2300      	movs	r3, #0
 8006e74:	4e77      	ldr	r6, [pc, #476]	@ (8007054 <_strtod_l+0x78c>)
 8006e76:	07e7      	lsls	r7, r4, #31
 8006e78:	d504      	bpl.n	8006e84 <_strtod_l+0x5bc>
 8006e7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e7e:	f7f9 fb2b 	bl	80004d8 <__aeabi_dmul>
 8006e82:	2301      	movs	r3, #1
 8006e84:	1064      	asrs	r4, r4, #1
 8006e86:	f106 0608 	add.w	r6, r6, #8
 8006e8a:	d1f4      	bne.n	8006e76 <_strtod_l+0x5ae>
 8006e8c:	b10b      	cbz	r3, 8006e92 <_strtod_l+0x5ca>
 8006e8e:	4682      	mov	sl, r0
 8006e90:	468b      	mov	fp, r1
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	b1b3      	cbz	r3, 8006ec4 <_strtod_l+0x5fc>
 8006e96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	4659      	mov	r1, fp
 8006ea2:	dd0f      	ble.n	8006ec4 <_strtod_l+0x5fc>
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	dd58      	ble.n	8006f5a <_strtod_l+0x692>
 8006ea8:	2b34      	cmp	r3, #52	@ 0x34
 8006eaa:	bfd8      	it	le
 8006eac:	f04f 33ff 	movle.w	r3, #4294967295
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	bfcf      	iteee	gt
 8006eb6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006eba:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006ebe:	4093      	lslle	r3, r2
 8006ec0:	ea03 0b01 	andle.w	fp, r3, r1
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4659      	mov	r1, fp
 8006ecc:	f7f9 fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d1a7      	bne.n	8006e24 <_strtod_l+0x55c>
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ed6:	464a      	mov	r2, r9
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006edc:	462b      	mov	r3, r5
 8006ede:	9805      	ldr	r0, [sp, #20]
 8006ee0:	f001 f9da 	bl	8008298 <__s2b>
 8006ee4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f43f af09 	beq.w	8006cfe <_strtod_l+0x436>
 8006eec:	2400      	movs	r4, #0
 8006eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	eba3 0308 	sub.w	r3, r3, r8
 8006ef8:	bfa8      	it	ge
 8006efa:	2300      	movge	r3, #0
 8006efc:	46a0      	mov	r8, r4
 8006efe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f00:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f04:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f08:	9805      	ldr	r0, [sp, #20]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	f001 f91c 	bl	8008148 <_Balloc>
 8006f10:	4681      	mov	r9, r0
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f aef7 	beq.w	8006d06 <_strtod_l+0x43e>
 8006f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1a:	300c      	adds	r0, #12
 8006f1c:	691a      	ldr	r2, [r3, #16]
 8006f1e:	f103 010c 	add.w	r1, r3, #12
 8006f22:	3202      	adds	r2, #2
 8006f24:	0092      	lsls	r2, r2, #2
 8006f26:	f000 fcb8 	bl	800789a <memcpy>
 8006f2a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4652      	mov	r2, sl
 8006f34:	465b      	mov	r3, fp
 8006f36:	9805      	ldr	r0, [sp, #20]
 8006f38:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f3c:	f001 fcd8 	bl	80088f0 <__d2b>
 8006f40:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f43f aedf 	beq.w	8006d06 <_strtod_l+0x43e>
 8006f48:	2101      	movs	r1, #1
 8006f4a:	9805      	ldr	r0, [sp, #20]
 8006f4c:	f001 fa3a 	bl	80083c4 <__i2b>
 8006f50:	4680      	mov	r8, r0
 8006f52:	b948      	cbnz	r0, 8006f68 <_strtod_l+0x6a0>
 8006f54:	f04f 0800 	mov.w	r8, #0
 8006f58:	e6d5      	b.n	8006d06 <_strtod_l+0x43e>
 8006f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	ea03 0a0a 	and.w	sl, r3, sl
 8006f66:	e7ad      	b.n	8006ec4 <_strtod_l+0x5fc>
 8006f68:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006f6a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	bfab      	itete	ge
 8006f70:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006f72:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006f74:	18ef      	addge	r7, r5, r3
 8006f76:	1b5e      	sublt	r6, r3, r5
 8006f78:	9b08      	ldr	r3, [sp, #32]
 8006f7a:	bfa8      	it	ge
 8006f7c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006f7e:	eba5 0503 	sub.w	r5, r5, r3
 8006f82:	4415      	add	r5, r2
 8006f84:	4b34      	ldr	r3, [pc, #208]	@ (8007058 <_strtod_l+0x790>)
 8006f86:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f8a:	bfb8      	it	lt
 8006f8c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f94:	da50      	bge.n	8007038 <_strtod_l+0x770>
 8006f96:	1b5b      	subs	r3, r3, r5
 8006f98:	2b1f      	cmp	r3, #31
 8006f9a:	f04f 0101 	mov.w	r1, #1
 8006f9e:	eba2 0203 	sub.w	r2, r2, r3
 8006fa2:	dc3d      	bgt.n	8007020 <_strtod_l+0x758>
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006faa:	2300      	movs	r3, #0
 8006fac:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fae:	18bd      	adds	r5, r7, r2
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	42af      	cmp	r7, r5
 8006fb4:	4416      	add	r6, r2
 8006fb6:	441e      	add	r6, r3
 8006fb8:	463b      	mov	r3, r7
 8006fba:	bfa8      	it	ge
 8006fbc:	462b      	movge	r3, r5
 8006fbe:	42b3      	cmp	r3, r6
 8006fc0:	bfa8      	it	ge
 8006fc2:	4633      	movge	r3, r6
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfc2      	ittt	gt
 8006fc8:	1aed      	subgt	r5, r5, r3
 8006fca:	1af6      	subgt	r6, r6, r3
 8006fcc:	1aff      	subgt	r7, r7, r3
 8006fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	dd16      	ble.n	8007002 <_strtod_l+0x73a>
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	9805      	ldr	r0, [sp, #20]
 8006fda:	f001 faab 	bl	8008534 <__pow5mult>
 8006fde:	4680      	mov	r8, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0b7      	beq.n	8006f54 <_strtod_l+0x68c>
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006fe8:	9805      	ldr	r0, [sp, #20]
 8006fea:	f001 fa01 	bl	80083f0 <__multiply>
 8006fee:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	f43f ae88 	beq.w	8006d06 <_strtod_l+0x43e>
 8006ff6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff8:	9805      	ldr	r0, [sp, #20]
 8006ffa:	f001 f8e5 	bl	80081c8 <_Bfree>
 8006ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007000:	931a      	str	r3, [sp, #104]	@ 0x68
 8007002:	2d00      	cmp	r5, #0
 8007004:	dc1d      	bgt.n	8007042 <_strtod_l+0x77a>
 8007006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	dd27      	ble.n	800705c <_strtod_l+0x794>
 800700c:	4649      	mov	r1, r9
 800700e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007010:	9805      	ldr	r0, [sp, #20]
 8007012:	f001 fa8f 	bl	8008534 <__pow5mult>
 8007016:	4681      	mov	r9, r0
 8007018:	bb00      	cbnz	r0, 800705c <_strtod_l+0x794>
 800701a:	f04f 0900 	mov.w	r9, #0
 800701e:	e672      	b.n	8006d06 <_strtod_l+0x43e>
 8007020:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007024:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007028:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800702c:	35e2      	adds	r5, #226	@ 0xe2
 800702e:	fa01 f305 	lsl.w	r3, r1, r5
 8007032:	9310      	str	r3, [sp, #64]	@ 0x40
 8007034:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007036:	e7ba      	b.n	8006fae <_strtod_l+0x6e6>
 8007038:	2300      	movs	r3, #0
 800703a:	9310      	str	r3, [sp, #64]	@ 0x40
 800703c:	2301      	movs	r3, #1
 800703e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007040:	e7b5      	b.n	8006fae <_strtod_l+0x6e6>
 8007042:	462a      	mov	r2, r5
 8007044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007046:	9805      	ldr	r0, [sp, #20]
 8007048:	f001 face 	bl	80085e8 <__lshift>
 800704c:	901a      	str	r0, [sp, #104]	@ 0x68
 800704e:	2800      	cmp	r0, #0
 8007050:	d1d9      	bne.n	8007006 <_strtod_l+0x73e>
 8007052:	e658      	b.n	8006d06 <_strtod_l+0x43e>
 8007054:	0800c2a8 	.word	0x0800c2a8
 8007058:	fffffc02 	.word	0xfffffc02
 800705c:	2e00      	cmp	r6, #0
 800705e:	dd07      	ble.n	8007070 <_strtod_l+0x7a8>
 8007060:	4649      	mov	r1, r9
 8007062:	4632      	mov	r2, r6
 8007064:	9805      	ldr	r0, [sp, #20]
 8007066:	f001 fabf 	bl	80085e8 <__lshift>
 800706a:	4681      	mov	r9, r0
 800706c:	2800      	cmp	r0, #0
 800706e:	d0d4      	beq.n	800701a <_strtod_l+0x752>
 8007070:	2f00      	cmp	r7, #0
 8007072:	dd08      	ble.n	8007086 <_strtod_l+0x7be>
 8007074:	4641      	mov	r1, r8
 8007076:	463a      	mov	r2, r7
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	f001 fab5 	bl	80085e8 <__lshift>
 800707e:	4680      	mov	r8, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	f43f ae40 	beq.w	8006d06 <_strtod_l+0x43e>
 8007086:	464a      	mov	r2, r9
 8007088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	f001 fb34 	bl	80086f8 <__mdiff>
 8007090:	4604      	mov	r4, r0
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f ae37 	beq.w	8006d06 <_strtod_l+0x43e>
 8007098:	68c3      	ldr	r3, [r0, #12]
 800709a:	4641      	mov	r1, r8
 800709c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800709e:	2300      	movs	r3, #0
 80070a0:	60c3      	str	r3, [r0, #12]
 80070a2:	f001 fb0d 	bl	80086c0 <__mcmp>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	da3d      	bge.n	8007126 <_strtod_l+0x85e>
 80070aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ac:	ea53 030a 	orrs.w	r3, r3, sl
 80070b0:	d163      	bne.n	800717a <_strtod_l+0x8b2>
 80070b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d15f      	bne.n	800717a <_strtod_l+0x8b2>
 80070ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	051b      	lsls	r3, r3, #20
 80070c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070c6:	d958      	bls.n	800717a <_strtod_l+0x8b2>
 80070c8:	6963      	ldr	r3, [r4, #20]
 80070ca:	b913      	cbnz	r3, 80070d2 <_strtod_l+0x80a>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	dd53      	ble.n	800717a <_strtod_l+0x8b2>
 80070d2:	4621      	mov	r1, r4
 80070d4:	2201      	movs	r2, #1
 80070d6:	9805      	ldr	r0, [sp, #20]
 80070d8:	f001 fa86 	bl	80085e8 <__lshift>
 80070dc:	4641      	mov	r1, r8
 80070de:	4604      	mov	r4, r0
 80070e0:	f001 faee 	bl	80086c0 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dd48      	ble.n	800717a <_strtod_l+0x8b2>
 80070e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070ec:	9a08      	ldr	r2, [sp, #32]
 80070ee:	0d1b      	lsrs	r3, r3, #20
 80070f0:	051b      	lsls	r3, r3, #20
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	d062      	beq.n	80071bc <_strtod_l+0x8f4>
 80070f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070fa:	d85f      	bhi.n	80071bc <_strtod_l+0x8f4>
 80070fc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007100:	f67f ae94 	bls.w	8006e2c <_strtod_l+0x564>
 8007104:	4650      	mov	r0, sl
 8007106:	4659      	mov	r1, fp
 8007108:	4ba3      	ldr	r3, [pc, #652]	@ (8007398 <_strtod_l+0xad0>)
 800710a:	2200      	movs	r2, #0
 800710c:	f7f9 f9e4 	bl	80004d8 <__aeabi_dmul>
 8007110:	4ba2      	ldr	r3, [pc, #648]	@ (800739c <_strtod_l+0xad4>)
 8007112:	4682      	mov	sl, r0
 8007114:	400b      	ands	r3, r1
 8007116:	468b      	mov	fp, r1
 8007118:	2b00      	cmp	r3, #0
 800711a:	f47f adff 	bne.w	8006d1c <_strtod_l+0x454>
 800711e:	2322      	movs	r3, #34	@ 0x22
 8007120:	9a05      	ldr	r2, [sp, #20]
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	e5fa      	b.n	8006d1c <_strtod_l+0x454>
 8007126:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800712a:	d165      	bne.n	80071f8 <_strtod_l+0x930>
 800712c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800712e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007132:	b35a      	cbz	r2, 800718c <_strtod_l+0x8c4>
 8007134:	4a9a      	ldr	r2, [pc, #616]	@ (80073a0 <_strtod_l+0xad8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d12b      	bne.n	8007192 <_strtod_l+0x8ca>
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	4651      	mov	r1, sl
 800713e:	b303      	cbz	r3, 8007182 <_strtod_l+0x8ba>
 8007140:	465a      	mov	r2, fp
 8007142:	4b96      	ldr	r3, [pc, #600]	@ (800739c <_strtod_l+0xad4>)
 8007144:	4013      	ands	r3, r2
 8007146:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800714a:	f04f 32ff 	mov.w	r2, #4294967295
 800714e:	d81b      	bhi.n	8007188 <_strtod_l+0x8c0>
 8007150:	0d1b      	lsrs	r3, r3, #20
 8007152:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	4299      	cmp	r1, r3
 800715c:	d119      	bne.n	8007192 <_strtod_l+0x8ca>
 800715e:	4b91      	ldr	r3, [pc, #580]	@ (80073a4 <_strtod_l+0xadc>)
 8007160:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007162:	429a      	cmp	r2, r3
 8007164:	d102      	bne.n	800716c <_strtod_l+0x8a4>
 8007166:	3101      	adds	r1, #1
 8007168:	f43f adcd 	beq.w	8006d06 <_strtod_l+0x43e>
 800716c:	f04f 0a00 	mov.w	sl, #0
 8007170:	4b8a      	ldr	r3, [pc, #552]	@ (800739c <_strtod_l+0xad4>)
 8007172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007174:	401a      	ands	r2, r3
 8007176:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1c1      	bne.n	8007104 <_strtod_l+0x83c>
 8007180:	e5cc      	b.n	8006d1c <_strtod_l+0x454>
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	e7e8      	b.n	800715a <_strtod_l+0x892>
 8007188:	4613      	mov	r3, r2
 800718a:	e7e6      	b.n	800715a <_strtod_l+0x892>
 800718c:	ea53 030a 	orrs.w	r3, r3, sl
 8007190:	d0aa      	beq.n	80070e8 <_strtod_l+0x820>
 8007192:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007194:	b1db      	cbz	r3, 80071ce <_strtod_l+0x906>
 8007196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007198:	4213      	tst	r3, r2
 800719a:	d0ee      	beq.n	800717a <_strtod_l+0x8b2>
 800719c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800719e:	4650      	mov	r0, sl
 80071a0:	4659      	mov	r1, fp
 80071a2:	9a08      	ldr	r2, [sp, #32]
 80071a4:	b1bb      	cbz	r3, 80071d6 <_strtod_l+0x90e>
 80071a6:	f7ff fb6c 	bl	8006882 <sulp>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071b2:	f7f8 ffdb 	bl	800016c <__adddf3>
 80071b6:	4682      	mov	sl, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	e7de      	b.n	800717a <_strtod_l+0x8b2>
 80071bc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80071c0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071c4:	f04f 3aff 	mov.w	sl, #4294967295
 80071c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071cc:	e7d5      	b.n	800717a <_strtod_l+0x8b2>
 80071ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80071d0:	ea13 0f0a 	tst.w	r3, sl
 80071d4:	e7e1      	b.n	800719a <_strtod_l+0x8d2>
 80071d6:	f7ff fb54 	bl	8006882 <sulp>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071e2:	f7f8 ffc1 	bl	8000168 <__aeabi_dsub>
 80071e6:	2200      	movs	r2, #0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4682      	mov	sl, r0
 80071ec:	468b      	mov	fp, r1
 80071ee:	f7f9 fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d0c1      	beq.n	800717a <_strtod_l+0x8b2>
 80071f6:	e619      	b.n	8006e2c <_strtod_l+0x564>
 80071f8:	4641      	mov	r1, r8
 80071fa:	4620      	mov	r0, r4
 80071fc:	f001 fbd0 	bl	80089a0 <__ratio>
 8007200:	2200      	movs	r2, #0
 8007202:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	f7f9 fbe1 	bl	80009d0 <__aeabi_dcmple>
 800720e:	2800      	cmp	r0, #0
 8007210:	d06d      	beq.n	80072ee <_strtod_l+0xa26>
 8007212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d178      	bne.n	800730a <_strtod_l+0xa42>
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	d156      	bne.n	80072cc <_strtod_l+0xa04>
 800721e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007224:	2b00      	cmp	r3, #0
 8007226:	d158      	bne.n	80072da <_strtod_l+0xa12>
 8007228:	2200      	movs	r2, #0
 800722a:	4630      	mov	r0, r6
 800722c:	4639      	mov	r1, r7
 800722e:	4b5e      	ldr	r3, [pc, #376]	@ (80073a8 <_strtod_l+0xae0>)
 8007230:	f7f9 fbc4 	bl	80009bc <__aeabi_dcmplt>
 8007234:	2800      	cmp	r0, #0
 8007236:	d157      	bne.n	80072e8 <_strtod_l+0xa20>
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	2200      	movs	r2, #0
 800723e:	4b5b      	ldr	r3, [pc, #364]	@ (80073ac <_strtod_l+0xae4>)
 8007240:	f7f9 f94a 	bl	80004d8 <__aeabi_dmul>
 8007244:	4606      	mov	r6, r0
 8007246:	460f      	mov	r7, r1
 8007248:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800724c:	9606      	str	r6, [sp, #24]
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007254:	4d51      	ldr	r5, [pc, #324]	@ (800739c <_strtod_l+0xad4>)
 8007256:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800725a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800725c:	401d      	ands	r5, r3
 800725e:	4b54      	ldr	r3, [pc, #336]	@ (80073b0 <_strtod_l+0xae8>)
 8007260:	429d      	cmp	r5, r3
 8007262:	f040 80ab 	bne.w	80073bc <_strtod_l+0xaf4>
 8007266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007268:	4650      	mov	r0, sl
 800726a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800726e:	4659      	mov	r1, fp
 8007270:	f001 fad6 	bl	8008820 <__ulp>
 8007274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007278:	f7f9 f92e 	bl	80004d8 <__aeabi_dmul>
 800727c:	4652      	mov	r2, sl
 800727e:	465b      	mov	r3, fp
 8007280:	f7f8 ff74 	bl	800016c <__adddf3>
 8007284:	460b      	mov	r3, r1
 8007286:	4945      	ldr	r1, [pc, #276]	@ (800739c <_strtod_l+0xad4>)
 8007288:	4a4a      	ldr	r2, [pc, #296]	@ (80073b4 <_strtod_l+0xaec>)
 800728a:	4019      	ands	r1, r3
 800728c:	4291      	cmp	r1, r2
 800728e:	4682      	mov	sl, r0
 8007290:	d942      	bls.n	8007318 <_strtod_l+0xa50>
 8007292:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007294:	4b43      	ldr	r3, [pc, #268]	@ (80073a4 <_strtod_l+0xadc>)
 8007296:	429a      	cmp	r2, r3
 8007298:	d103      	bne.n	80072a2 <_strtod_l+0x9da>
 800729a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800729c:	3301      	adds	r3, #1
 800729e:	f43f ad32 	beq.w	8006d06 <_strtod_l+0x43e>
 80072a2:	f04f 3aff 	mov.w	sl, #4294967295
 80072a6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80073a4 <_strtod_l+0xadc>
 80072aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f000 ff8b 	bl	80081c8 <_Bfree>
 80072b2:	4649      	mov	r1, r9
 80072b4:	9805      	ldr	r0, [sp, #20]
 80072b6:	f000 ff87 	bl	80081c8 <_Bfree>
 80072ba:	4641      	mov	r1, r8
 80072bc:	9805      	ldr	r0, [sp, #20]
 80072be:	f000 ff83 	bl	80081c8 <_Bfree>
 80072c2:	4621      	mov	r1, r4
 80072c4:	9805      	ldr	r0, [sp, #20]
 80072c6:	f000 ff7f 	bl	80081c8 <_Bfree>
 80072ca:	e61c      	b.n	8006f06 <_strtod_l+0x63e>
 80072cc:	f1ba 0f01 	cmp.w	sl, #1
 80072d0:	d103      	bne.n	80072da <_strtod_l+0xa12>
 80072d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f43f ada9 	beq.w	8006e2c <_strtod_l+0x564>
 80072da:	2200      	movs	r2, #0
 80072dc:	4b36      	ldr	r3, [pc, #216]	@ (80073b8 <_strtod_l+0xaf0>)
 80072de:	2600      	movs	r6, #0
 80072e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072e4:	4f30      	ldr	r7, [pc, #192]	@ (80073a8 <_strtod_l+0xae0>)
 80072e6:	e7b3      	b.n	8007250 <_strtod_l+0x988>
 80072e8:	2600      	movs	r6, #0
 80072ea:	4f30      	ldr	r7, [pc, #192]	@ (80073ac <_strtod_l+0xae4>)
 80072ec:	e7ac      	b.n	8007248 <_strtod_l+0x980>
 80072ee:	4630      	mov	r0, r6
 80072f0:	4639      	mov	r1, r7
 80072f2:	4b2e      	ldr	r3, [pc, #184]	@ (80073ac <_strtod_l+0xae4>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	f7f9 f8ef 	bl	80004d8 <__aeabi_dmul>
 80072fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0a1      	beq.n	8007248 <_strtod_l+0x980>
 8007304:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007308:	e7a2      	b.n	8007250 <_strtod_l+0x988>
 800730a:	2200      	movs	r2, #0
 800730c:	4b26      	ldr	r3, [pc, #152]	@ (80073a8 <_strtod_l+0xae0>)
 800730e:	4616      	mov	r6, r2
 8007310:	461f      	mov	r7, r3
 8007312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007316:	e79b      	b.n	8007250 <_strtod_l+0x988>
 8007318:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800731c:	9b08      	ldr	r3, [sp, #32]
 800731e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1c1      	bne.n	80072aa <_strtod_l+0x9e2>
 8007326:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800732a:	0d1b      	lsrs	r3, r3, #20
 800732c:	051b      	lsls	r3, r3, #20
 800732e:	429d      	cmp	r5, r3
 8007330:	d1bb      	bne.n	80072aa <_strtod_l+0x9e2>
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 ff47 	bl	80011c8 <__aeabi_d2lz>
 800733a:	f7f9 f89f 	bl	800047c <__aeabi_l2d>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4630      	mov	r0, r6
 8007344:	4639      	mov	r1, r7
 8007346:	f7f8 ff0f 	bl	8000168 <__aeabi_dsub>
 800734a:	460b      	mov	r3, r1
 800734c:	4602      	mov	r2, r0
 800734e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007352:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007358:	ea46 060a 	orr.w	r6, r6, sl
 800735c:	431e      	orrs	r6, r3
 800735e:	d06a      	beq.n	8007436 <_strtod_l+0xb6e>
 8007360:	a309      	add	r3, pc, #36	@ (adr r3, 8007388 <_strtod_l+0xac0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f9 fb29 	bl	80009bc <__aeabi_dcmplt>
 800736a:	2800      	cmp	r0, #0
 800736c:	f47f acd6 	bne.w	8006d1c <_strtod_l+0x454>
 8007370:	a307      	add	r3, pc, #28	@ (adr r3, 8007390 <_strtod_l+0xac8>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800737a:	f7f9 fb3d 	bl	80009f8 <__aeabi_dcmpgt>
 800737e:	2800      	cmp	r0, #0
 8007380:	d093      	beq.n	80072aa <_strtod_l+0x9e2>
 8007382:	e4cb      	b.n	8006d1c <_strtod_l+0x454>
 8007384:	f3af 8000 	nop.w
 8007388:	94a03595 	.word	0x94a03595
 800738c:	3fdfffff 	.word	0x3fdfffff
 8007390:	35afe535 	.word	0x35afe535
 8007394:	3fe00000 	.word	0x3fe00000
 8007398:	39500000 	.word	0x39500000
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	000fffff 	.word	0x000fffff
 80073a4:	7fefffff 	.word	0x7fefffff
 80073a8:	3ff00000 	.word	0x3ff00000
 80073ac:	3fe00000 	.word	0x3fe00000
 80073b0:	7fe00000 	.word	0x7fe00000
 80073b4:	7c9fffff 	.word	0x7c9fffff
 80073b8:	bff00000 	.word	0xbff00000
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	b323      	cbz	r3, 800740a <_strtod_l+0xb42>
 80073c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80073c4:	d821      	bhi.n	800740a <_strtod_l+0xb42>
 80073c6:	a328      	add	r3, pc, #160	@ (adr r3, 8007468 <_strtod_l+0xba0>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	f7f9 fafe 	bl	80009d0 <__aeabi_dcmple>
 80073d4:	b1a0      	cbz	r0, 8007400 <_strtod_l+0xb38>
 80073d6:	4639      	mov	r1, r7
 80073d8:	4630      	mov	r0, r6
 80073da:	f7f9 fb55 	bl	8000a88 <__aeabi_d2uiz>
 80073de:	2801      	cmp	r0, #1
 80073e0:	bf38      	it	cc
 80073e2:	2001      	movcc	r0, #1
 80073e4:	f7f8 fffe 	bl	80003e4 <__aeabi_ui2d>
 80073e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	b9fb      	cbnz	r3, 8007430 <_strtod_l+0xb68>
 80073f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073f4:	9014      	str	r0, [sp, #80]	@ 0x50
 80073f6:	9315      	str	r3, [sp, #84]	@ 0x54
 80073f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80073fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007400:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007402:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007406:	1b5b      	subs	r3, r3, r5
 8007408:	9311      	str	r3, [sp, #68]	@ 0x44
 800740a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800740e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007412:	f001 fa05 	bl	8008820 <__ulp>
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4650      	mov	r0, sl
 800741c:	4659      	mov	r1, fp
 800741e:	f7f9 f85b 	bl	80004d8 <__aeabi_dmul>
 8007422:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007426:	f7f8 fea1 	bl	800016c <__adddf3>
 800742a:	4682      	mov	sl, r0
 800742c:	468b      	mov	fp, r1
 800742e:	e775      	b.n	800731c <_strtod_l+0xa54>
 8007430:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007434:	e7e0      	b.n	80073f8 <_strtod_l+0xb30>
 8007436:	a30e      	add	r3, pc, #56	@ (adr r3, 8007470 <_strtod_l+0xba8>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 fabe 	bl	80009bc <__aeabi_dcmplt>
 8007440:	e79d      	b.n	800737e <_strtod_l+0xab6>
 8007442:	2300      	movs	r3, #0
 8007444:	930e      	str	r3, [sp, #56]	@ 0x38
 8007446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007448:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	f7ff ba79 	b.w	8006942 <_strtod_l+0x7a>
 8007450:	2a65      	cmp	r2, #101	@ 0x65
 8007452:	f43f ab72 	beq.w	8006b3a <_strtod_l+0x272>
 8007456:	2a45      	cmp	r2, #69	@ 0x45
 8007458:	f43f ab6f 	beq.w	8006b3a <_strtod_l+0x272>
 800745c:	2301      	movs	r3, #1
 800745e:	f7ff bbaa 	b.w	8006bb6 <_strtod_l+0x2ee>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
 8007468:	ffc00000 	.word	0xffc00000
 800746c:	41dfffff 	.word	0x41dfffff
 8007470:	94a03595 	.word	0x94a03595
 8007474:	3fcfffff 	.word	0x3fcfffff

08007478 <strtod>:
 8007478:	460a      	mov	r2, r1
 800747a:	4601      	mov	r1, r0
 800747c:	4802      	ldr	r0, [pc, #8]	@ (8007488 <strtod+0x10>)
 800747e:	4b03      	ldr	r3, [pc, #12]	@ (800748c <strtod+0x14>)
 8007480:	6800      	ldr	r0, [r0, #0]
 8007482:	f7ff ba21 	b.w	80068c8 <_strtod_l>
 8007486:	bf00      	nop
 8007488:	20000300 	.word	0x20000300
 800748c:	20000194 	.word	0x20000194

08007490 <std>:
 8007490:	2300      	movs	r3, #0
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	e9c0 3300 	strd	r3, r3, [r0]
 800749a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800749e:	6083      	str	r3, [r0, #8]
 80074a0:	8181      	strh	r1, [r0, #12]
 80074a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074a4:	81c2      	strh	r2, [r0, #14]
 80074a6:	6183      	str	r3, [r0, #24]
 80074a8:	4619      	mov	r1, r3
 80074aa:	2208      	movs	r2, #8
 80074ac:	305c      	adds	r0, #92	@ 0x5c
 80074ae:	f000 f94c 	bl	800774a <memset>
 80074b2:	4b0d      	ldr	r3, [pc, #52]	@ (80074e8 <std+0x58>)
 80074b4:	6224      	str	r4, [r4, #32]
 80074b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80074b8:	4b0c      	ldr	r3, [pc, #48]	@ (80074ec <std+0x5c>)
 80074ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074bc:	4b0c      	ldr	r3, [pc, #48]	@ (80074f0 <std+0x60>)
 80074be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <std+0x64>)
 80074c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80074c4:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <std+0x68>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d006      	beq.n	80074d8 <std+0x48>
 80074ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ce:	4294      	cmp	r4, r2
 80074d0:	d002      	beq.n	80074d8 <std+0x48>
 80074d2:	33d0      	adds	r3, #208	@ 0xd0
 80074d4:	429c      	cmp	r4, r3
 80074d6:	d105      	bne.n	80074e4 <std+0x54>
 80074d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074e0:	f000 b9d0 	b.w	8007884 <__retarget_lock_init_recursive>
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	080076c5 	.word	0x080076c5
 80074ec:	080076e7 	.word	0x080076e7
 80074f0:	0800771f 	.word	0x0800771f
 80074f4:	08007743 	.word	0x08007743
 80074f8:	200048a4 	.word	0x200048a4

080074fc <stdio_exit_handler>:
 80074fc:	4a02      	ldr	r2, [pc, #8]	@ (8007508 <stdio_exit_handler+0xc>)
 80074fe:	4903      	ldr	r1, [pc, #12]	@ (800750c <stdio_exit_handler+0x10>)
 8007500:	4803      	ldr	r0, [pc, #12]	@ (8007510 <stdio_exit_handler+0x14>)
 8007502:	f000 b869 	b.w	80075d8 <_fwalk_sglue>
 8007506:	bf00      	nop
 8007508:	20000188 	.word	0x20000188
 800750c:	08009171 	.word	0x08009171
 8007510:	20000304 	.word	0x20000304

08007514 <cleanup_stdio>:
 8007514:	6841      	ldr	r1, [r0, #4]
 8007516:	4b0c      	ldr	r3, [pc, #48]	@ (8007548 <cleanup_stdio+0x34>)
 8007518:	b510      	push	{r4, lr}
 800751a:	4299      	cmp	r1, r3
 800751c:	4604      	mov	r4, r0
 800751e:	d001      	beq.n	8007524 <cleanup_stdio+0x10>
 8007520:	f001 fe26 	bl	8009170 <_fflush_r>
 8007524:	68a1      	ldr	r1, [r4, #8]
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <cleanup_stdio+0x38>)
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <cleanup_stdio+0x1e>
 800752c:	4620      	mov	r0, r4
 800752e:	f001 fe1f 	bl	8009170 <_fflush_r>
 8007532:	68e1      	ldr	r1, [r4, #12]
 8007534:	4b06      	ldr	r3, [pc, #24]	@ (8007550 <cleanup_stdio+0x3c>)
 8007536:	4299      	cmp	r1, r3
 8007538:	d004      	beq.n	8007544 <cleanup_stdio+0x30>
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007540:	f001 be16 	b.w	8009170 <_fflush_r>
 8007544:	bd10      	pop	{r4, pc}
 8007546:	bf00      	nop
 8007548:	200048a4 	.word	0x200048a4
 800754c:	2000490c 	.word	0x2000490c
 8007550:	20004974 	.word	0x20004974

08007554 <global_stdio_init.part.0>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <global_stdio_init.part.0+0x30>)
 8007558:	4c0b      	ldr	r4, [pc, #44]	@ (8007588 <global_stdio_init.part.0+0x34>)
 800755a:	4a0c      	ldr	r2, [pc, #48]	@ (800758c <global_stdio_init.part.0+0x38>)
 800755c:	4620      	mov	r0, r4
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	2104      	movs	r1, #4
 8007562:	2200      	movs	r2, #0
 8007564:	f7ff ff94 	bl	8007490 <std>
 8007568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800756c:	2201      	movs	r2, #1
 800756e:	2109      	movs	r1, #9
 8007570:	f7ff ff8e 	bl	8007490 <std>
 8007574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007578:	2202      	movs	r2, #2
 800757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757e:	2112      	movs	r1, #18
 8007580:	f7ff bf86 	b.w	8007490 <std>
 8007584:	200049dc 	.word	0x200049dc
 8007588:	200048a4 	.word	0x200048a4
 800758c:	080074fd 	.word	0x080074fd

08007590 <__sfp_lock_acquire>:
 8007590:	4801      	ldr	r0, [pc, #4]	@ (8007598 <__sfp_lock_acquire+0x8>)
 8007592:	f000 b978 	b.w	8007886 <__retarget_lock_acquire_recursive>
 8007596:	bf00      	nop
 8007598:	200049e5 	.word	0x200049e5

0800759c <__sfp_lock_release>:
 800759c:	4801      	ldr	r0, [pc, #4]	@ (80075a4 <__sfp_lock_release+0x8>)
 800759e:	f000 b973 	b.w	8007888 <__retarget_lock_release_recursive>
 80075a2:	bf00      	nop
 80075a4:	200049e5 	.word	0x200049e5

080075a8 <__sinit>:
 80075a8:	b510      	push	{r4, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	f7ff fff0 	bl	8007590 <__sfp_lock_acquire>
 80075b0:	6a23      	ldr	r3, [r4, #32]
 80075b2:	b11b      	cbz	r3, 80075bc <__sinit+0x14>
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f7ff bff0 	b.w	800759c <__sfp_lock_release>
 80075bc:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <__sinit+0x28>)
 80075be:	6223      	str	r3, [r4, #32]
 80075c0:	4b04      	ldr	r3, [pc, #16]	@ (80075d4 <__sinit+0x2c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f5      	bne.n	80075b4 <__sinit+0xc>
 80075c8:	f7ff ffc4 	bl	8007554 <global_stdio_init.part.0>
 80075cc:	e7f2      	b.n	80075b4 <__sinit+0xc>
 80075ce:	bf00      	nop
 80075d0:	08007515 	.word	0x08007515
 80075d4:	200049dc 	.word	0x200049dc

080075d8 <_fwalk_sglue>:
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4607      	mov	r7, r0
 80075de:	4688      	mov	r8, r1
 80075e0:	4614      	mov	r4, r2
 80075e2:	2600      	movs	r6, #0
 80075e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075e8:	f1b9 0901 	subs.w	r9, r9, #1
 80075ec:	d505      	bpl.n	80075fa <_fwalk_sglue+0x22>
 80075ee:	6824      	ldr	r4, [r4, #0]
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	d1f7      	bne.n	80075e4 <_fwalk_sglue+0xc>
 80075f4:	4630      	mov	r0, r6
 80075f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d907      	bls.n	8007610 <_fwalk_sglue+0x38>
 8007600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007604:	3301      	adds	r3, #1
 8007606:	d003      	beq.n	8007610 <_fwalk_sglue+0x38>
 8007608:	4629      	mov	r1, r5
 800760a:	4638      	mov	r0, r7
 800760c:	47c0      	blx	r8
 800760e:	4306      	orrs	r6, r0
 8007610:	3568      	adds	r5, #104	@ 0x68
 8007612:	e7e9      	b.n	80075e8 <_fwalk_sglue+0x10>

08007614 <sniprintf>:
 8007614:	b40c      	push	{r2, r3}
 8007616:	b530      	push	{r4, r5, lr}
 8007618:	4b18      	ldr	r3, [pc, #96]	@ (800767c <sniprintf+0x68>)
 800761a:	1e0c      	subs	r4, r1, #0
 800761c:	681d      	ldr	r5, [r3, #0]
 800761e:	b09d      	sub	sp, #116	@ 0x74
 8007620:	da08      	bge.n	8007634 <sniprintf+0x20>
 8007622:	238b      	movs	r3, #139	@ 0x8b
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	b01d      	add	sp, #116	@ 0x74
 800762c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007630:	b002      	add	sp, #8
 8007632:	4770      	bx	lr
 8007634:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007638:	f8ad 3014 	strh.w	r3, [sp, #20]
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007642:	bf0c      	ite	eq
 8007644:	4623      	moveq	r3, r4
 8007646:	f104 33ff 	addne.w	r3, r4, #4294967295
 800764a:	9304      	str	r3, [sp, #16]
 800764c:	9307      	str	r3, [sp, #28]
 800764e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007652:	9002      	str	r0, [sp, #8]
 8007654:	9006      	str	r0, [sp, #24]
 8007656:	f8ad 3016 	strh.w	r3, [sp, #22]
 800765a:	4628      	mov	r0, r5
 800765c:	ab21      	add	r3, sp, #132	@ 0x84
 800765e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007660:	a902      	add	r1, sp, #8
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	f001 fa78 	bl	8008b58 <_svfiprintf_r>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	bfbc      	itt	lt
 800766c:	238b      	movlt	r3, #139	@ 0x8b
 800766e:	602b      	strlt	r3, [r5, #0]
 8007670:	2c00      	cmp	r4, #0
 8007672:	d0da      	beq.n	800762a <sniprintf+0x16>
 8007674:	2200      	movs	r2, #0
 8007676:	9b02      	ldr	r3, [sp, #8]
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	e7d6      	b.n	800762a <sniprintf+0x16>
 800767c:	20000300 	.word	0x20000300

08007680 <siprintf>:
 8007680:	b40e      	push	{r1, r2, r3}
 8007682:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007686:	b510      	push	{r4, lr}
 8007688:	2400      	movs	r4, #0
 800768a:	b09d      	sub	sp, #116	@ 0x74
 800768c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800768e:	9002      	str	r0, [sp, #8]
 8007690:	9006      	str	r0, [sp, #24]
 8007692:	9107      	str	r1, [sp, #28]
 8007694:	9104      	str	r1, [sp, #16]
 8007696:	4809      	ldr	r0, [pc, #36]	@ (80076bc <siprintf+0x3c>)
 8007698:	4909      	ldr	r1, [pc, #36]	@ (80076c0 <siprintf+0x40>)
 800769a:	f853 2b04 	ldr.w	r2, [r3], #4
 800769e:	9105      	str	r1, [sp, #20]
 80076a0:	6800      	ldr	r0, [r0, #0]
 80076a2:	a902      	add	r1, sp, #8
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80076a8:	f001 fa56 	bl	8008b58 <_svfiprintf_r>
 80076ac:	9b02      	ldr	r3, [sp, #8]
 80076ae:	701c      	strb	r4, [r3, #0]
 80076b0:	b01d      	add	sp, #116	@ 0x74
 80076b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076b6:	b003      	add	sp, #12
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000300 	.word	0x20000300
 80076c0:	ffff0208 	.word	0xffff0208

080076c4 <__sread>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	460c      	mov	r4, r1
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	f000 f88c 	bl	80077e8 <_read_r>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	bfab      	itete	ge
 80076d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076d6:	89a3      	ldrhlt	r3, [r4, #12]
 80076d8:	181b      	addge	r3, r3, r0
 80076da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076de:	bfac      	ite	ge
 80076e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076e2:	81a3      	strhlt	r3, [r4, #12]
 80076e4:	bd10      	pop	{r4, pc}

080076e6 <__swrite>:
 80076e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ea:	461f      	mov	r7, r3
 80076ec:	898b      	ldrh	r3, [r1, #12]
 80076ee:	4605      	mov	r5, r0
 80076f0:	05db      	lsls	r3, r3, #23
 80076f2:	460c      	mov	r4, r1
 80076f4:	4616      	mov	r6, r2
 80076f6:	d505      	bpl.n	8007704 <__swrite+0x1e>
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 f860 	bl	80077c4 <_lseek_r>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	4632      	mov	r2, r6
 8007708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	4628      	mov	r0, r5
 8007710:	463b      	mov	r3, r7
 8007712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	f000 b877 	b.w	800780c <_write_r>

0800771e <__sseek>:
 800771e:	b510      	push	{r4, lr}
 8007720:	460c      	mov	r4, r1
 8007722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007726:	f000 f84d 	bl	80077c4 <_lseek_r>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	bf15      	itete	ne
 8007730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800773a:	81a3      	strheq	r3, [r4, #12]
 800773c:	bf18      	it	ne
 800773e:	81a3      	strhne	r3, [r4, #12]
 8007740:	bd10      	pop	{r4, pc}

08007742 <__sclose>:
 8007742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007746:	f000 b82d 	b.w	80077a4 <_close_r>

0800774a <memset>:
 800774a:	4603      	mov	r3, r0
 800774c:	4402      	add	r2, r0
 800774e:	4293      	cmp	r3, r2
 8007750:	d100      	bne.n	8007754 <memset+0xa>
 8007752:	4770      	bx	lr
 8007754:	f803 1b01 	strb.w	r1, [r3], #1
 8007758:	e7f9      	b.n	800774e <memset+0x4>

0800775a <strncmp>:
 800775a:	b510      	push	{r4, lr}
 800775c:	b16a      	cbz	r2, 800777a <strncmp+0x20>
 800775e:	3901      	subs	r1, #1
 8007760:	1884      	adds	r4, r0, r2
 8007762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800776a:	429a      	cmp	r2, r3
 800776c:	d103      	bne.n	8007776 <strncmp+0x1c>
 800776e:	42a0      	cmp	r0, r4
 8007770:	d001      	beq.n	8007776 <strncmp+0x1c>
 8007772:	2a00      	cmp	r2, #0
 8007774:	d1f5      	bne.n	8007762 <strncmp+0x8>
 8007776:	1ad0      	subs	r0, r2, r3
 8007778:	bd10      	pop	{r4, pc}
 800777a:	4610      	mov	r0, r2
 800777c:	e7fc      	b.n	8007778 <strncmp+0x1e>

0800777e <strncpy>:
 800777e:	4603      	mov	r3, r0
 8007780:	b510      	push	{r4, lr}
 8007782:	3901      	subs	r1, #1
 8007784:	b132      	cbz	r2, 8007794 <strncpy+0x16>
 8007786:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800778a:	3a01      	subs	r2, #1
 800778c:	f803 4b01 	strb.w	r4, [r3], #1
 8007790:	2c00      	cmp	r4, #0
 8007792:	d1f7      	bne.n	8007784 <strncpy+0x6>
 8007794:	2100      	movs	r1, #0
 8007796:	441a      	add	r2, r3
 8007798:	4293      	cmp	r3, r2
 800779a:	d100      	bne.n	800779e <strncpy+0x20>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	f803 1b01 	strb.w	r1, [r3], #1
 80077a2:	e7f9      	b.n	8007798 <strncpy+0x1a>

080077a4 <_close_r>:
 80077a4:	b538      	push	{r3, r4, r5, lr}
 80077a6:	2300      	movs	r3, #0
 80077a8:	4d05      	ldr	r5, [pc, #20]	@ (80077c0 <_close_r+0x1c>)
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	602b      	str	r3, [r5, #0]
 80077b0:	f7fb ff69 	bl	8003686 <_close>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d102      	bne.n	80077be <_close_r+0x1a>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	b103      	cbz	r3, 80077be <_close_r+0x1a>
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	200049e0 	.word	0x200049e0

080077c4 <_lseek_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	2200      	movs	r2, #0
 80077ce:	4d05      	ldr	r5, [pc, #20]	@ (80077e4 <_lseek_r+0x20>)
 80077d0:	602a      	str	r2, [r5, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f7fb ff61 	bl	800369a <_lseek>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_lseek_r+0x1e>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_lseek_r+0x1e>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	200049e0 	.word	0x200049e0

080077e8 <_read_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	2200      	movs	r2, #0
 80077f2:	4d05      	ldr	r5, [pc, #20]	@ (8007808 <_read_r+0x20>)
 80077f4:	602a      	str	r2, [r5, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	f7fb ff29 	bl	800364e <_read>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_read_r+0x1e>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_read_r+0x1e>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	200049e0 	.word	0x200049e0

0800780c <_write_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	2200      	movs	r2, #0
 8007816:	4d05      	ldr	r5, [pc, #20]	@ (800782c <_write_r+0x20>)
 8007818:	602a      	str	r2, [r5, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f7fb ff25 	bl	800366a <_write>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_write_r+0x1e>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_write_r+0x1e>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	200049e0 	.word	0x200049e0

08007830 <__errno>:
 8007830:	4b01      	ldr	r3, [pc, #4]	@ (8007838 <__errno+0x8>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000300 	.word	0x20000300

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	2600      	movs	r6, #0
 8007840:	4d0c      	ldr	r5, [pc, #48]	@ (8007874 <__libc_init_array+0x38>)
 8007842:	4c0d      	ldr	r4, [pc, #52]	@ (8007878 <__libc_init_array+0x3c>)
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	f003 fba0 	bl	800af90 <_init>
 8007850:	2600      	movs	r6, #0
 8007852:	4d0a      	ldr	r5, [pc, #40]	@ (800787c <__libc_init_array+0x40>)
 8007854:	4c0a      	ldr	r4, [pc, #40]	@ (8007880 <__libc_init_array+0x44>)
 8007856:	1b64      	subs	r4, r4, r5
 8007858:	10a4      	asrs	r4, r4, #2
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	0800c738 	.word	0x0800c738
 8007878:	0800c738 	.word	0x0800c738
 800787c:	0800c738 	.word	0x0800c738
 8007880:	0800c73c 	.word	0x0800c73c

08007884 <__retarget_lock_init_recursive>:
 8007884:	4770      	bx	lr

08007886 <__retarget_lock_acquire_recursive>:
 8007886:	4770      	bx	lr

08007888 <__retarget_lock_release_recursive>:
 8007888:	4770      	bx	lr

0800788a <strcpy>:
 800788a:	4603      	mov	r3, r0
 800788c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007890:	f803 2b01 	strb.w	r2, [r3], #1
 8007894:	2a00      	cmp	r2, #0
 8007896:	d1f9      	bne.n	800788c <strcpy+0x2>
 8007898:	4770      	bx	lr

0800789a <memcpy>:
 800789a:	440a      	add	r2, r1
 800789c:	4291      	cmp	r1, r2
 800789e:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a2:	d100      	bne.n	80078a6 <memcpy+0xc>
 80078a4:	4770      	bx	lr
 80078a6:	b510      	push	{r4, lr}
 80078a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ac:	4291      	cmp	r1, r2
 80078ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b2:	d1f9      	bne.n	80078a8 <memcpy+0xe>
 80078b4:	bd10      	pop	{r4, pc}
	...

080078b8 <nan>:
 80078b8:	2000      	movs	r0, #0
 80078ba:	4901      	ldr	r1, [pc, #4]	@ (80078c0 <nan+0x8>)
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	7ff80000 	.word	0x7ff80000

080078c4 <_free_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4605      	mov	r5, r0
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d040      	beq.n	800794e <_free_r+0x8a>
 80078cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d0:	1f0c      	subs	r4, r1, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bfb8      	it	lt
 80078d6:	18e4      	addlt	r4, r4, r3
 80078d8:	f000 fc2a 	bl	8008130 <__malloc_lock>
 80078dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007950 <_free_r+0x8c>)
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	b933      	cbnz	r3, 80078f0 <_free_r+0x2c>
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	4628      	mov	r0, r5
 80078e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ec:	f000 bc26 	b.w	800813c <__malloc_unlock>
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	d908      	bls.n	8007906 <_free_r+0x42>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	1821      	adds	r1, r4, r0
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf01      	itttt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	1809      	addeq	r1, r1, r0
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	e7ed      	b.n	80078e2 <_free_r+0x1e>
 8007906:	461a      	mov	r2, r3
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b10b      	cbz	r3, 8007910 <_free_r+0x4c>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x42>
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	1850      	adds	r0, r2, r1
 8007914:	42a0      	cmp	r0, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x6c>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	4401      	add	r1, r0
 800791c:	1850      	adds	r0, r2, r1
 800791e:	4283      	cmp	r3, r0
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	d1e0      	bne.n	80078e6 <_free_r+0x22>
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4408      	add	r0, r1
 800792a:	6010      	str	r0, [r2, #0]
 800792c:	6053      	str	r3, [r2, #4]
 800792e:	e7da      	b.n	80078e6 <_free_r+0x22>
 8007930:	d902      	bls.n	8007938 <_free_r+0x74>
 8007932:	230c      	movs	r3, #12
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	e7d6      	b.n	80078e6 <_free_r+0x22>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	1821      	adds	r1, r4, r0
 800793c:	428b      	cmp	r3, r1
 800793e:	bf01      	itttt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	1809      	addeq	r1, r1, r0
 8007946:	6021      	streq	r1, [r4, #0]
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6054      	str	r4, [r2, #4]
 800794c:	e7cb      	b.n	80078e6 <_free_r+0x22>
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	200049ec 	.word	0x200049ec

08007954 <rshift>:
 8007954:	6903      	ldr	r3, [r0, #16]
 8007956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800795a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800795e:	f100 0414 	add.w	r4, r0, #20
 8007962:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007966:	dd46      	ble.n	80079f6 <rshift+0xa2>
 8007968:	f011 011f 	ands.w	r1, r1, #31
 800796c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007974:	d10c      	bne.n	8007990 <rshift+0x3c>
 8007976:	4629      	mov	r1, r5
 8007978:	f100 0710 	add.w	r7, r0, #16
 800797c:	42b1      	cmp	r1, r6
 800797e:	d335      	bcc.n	80079ec <rshift+0x98>
 8007980:	1a9b      	subs	r3, r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	1eea      	subs	r2, r5, #3
 8007986:	4296      	cmp	r6, r2
 8007988:	bf38      	it	cc
 800798a:	2300      	movcc	r3, #0
 800798c:	4423      	add	r3, r4
 800798e:	e015      	b.n	80079bc <rshift+0x68>
 8007990:	46a1      	mov	r9, r4
 8007992:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007996:	f1c1 0820 	rsb	r8, r1, #32
 800799a:	40cf      	lsrs	r7, r1
 800799c:	f105 0e04 	add.w	lr, r5, #4
 80079a0:	4576      	cmp	r6, lr
 80079a2:	46f4      	mov	ip, lr
 80079a4:	d816      	bhi.n	80079d4 <rshift+0x80>
 80079a6:	1a9a      	subs	r2, r3, r2
 80079a8:	0092      	lsls	r2, r2, #2
 80079aa:	3a04      	subs	r2, #4
 80079ac:	3501      	adds	r5, #1
 80079ae:	42ae      	cmp	r6, r5
 80079b0:	bf38      	it	cc
 80079b2:	2200      	movcc	r2, #0
 80079b4:	18a3      	adds	r3, r4, r2
 80079b6:	50a7      	str	r7, [r4, r2]
 80079b8:	b107      	cbz	r7, 80079bc <rshift+0x68>
 80079ba:	3304      	adds	r3, #4
 80079bc:	42a3      	cmp	r3, r4
 80079be:	eba3 0204 	sub.w	r2, r3, r4
 80079c2:	bf08      	it	eq
 80079c4:	2300      	moveq	r3, #0
 80079c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079ca:	6102      	str	r2, [r0, #16]
 80079cc:	bf08      	it	eq
 80079ce:	6143      	streq	r3, [r0, #20]
 80079d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079d4:	f8dc c000 	ldr.w	ip, [ip]
 80079d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80079dc:	ea4c 0707 	orr.w	r7, ip, r7
 80079e0:	f849 7b04 	str.w	r7, [r9], #4
 80079e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079e8:	40cf      	lsrs	r7, r1
 80079ea:	e7d9      	b.n	80079a0 <rshift+0x4c>
 80079ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80079f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80079f4:	e7c2      	b.n	800797c <rshift+0x28>
 80079f6:	4623      	mov	r3, r4
 80079f8:	e7e0      	b.n	80079bc <rshift+0x68>

080079fa <__hexdig_fun>:
 80079fa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d802      	bhi.n	8007a08 <__hexdig_fun+0xe>
 8007a02:	3820      	subs	r0, #32
 8007a04:	b2c0      	uxtb	r0, r0
 8007a06:	4770      	bx	lr
 8007a08:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	d801      	bhi.n	8007a14 <__hexdig_fun+0x1a>
 8007a10:	3847      	subs	r0, #71	@ 0x47
 8007a12:	e7f7      	b.n	8007a04 <__hexdig_fun+0xa>
 8007a14:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007a18:	2b05      	cmp	r3, #5
 8007a1a:	d801      	bhi.n	8007a20 <__hexdig_fun+0x26>
 8007a1c:	3827      	subs	r0, #39	@ 0x27
 8007a1e:	e7f1      	b.n	8007a04 <__hexdig_fun+0xa>
 8007a20:	2000      	movs	r0, #0
 8007a22:	4770      	bx	lr

08007a24 <__gethex>:
 8007a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a28:	468a      	mov	sl, r1
 8007a2a:	4690      	mov	r8, r2
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	9302      	str	r3, [sp, #8]
 8007a30:	680b      	ldr	r3, [r1, #0]
 8007a32:	9001      	str	r0, [sp, #4]
 8007a34:	1c9c      	adds	r4, r3, #2
 8007a36:	46a1      	mov	r9, r4
 8007a38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a3c:	2830      	cmp	r0, #48	@ 0x30
 8007a3e:	d0fa      	beq.n	8007a36 <__gethex+0x12>
 8007a40:	eba9 0303 	sub.w	r3, r9, r3
 8007a44:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a48:	f7ff ffd7 	bl	80079fa <__hexdig_fun>
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d168      	bne.n	8007b24 <__gethex+0x100>
 8007a52:	2201      	movs	r2, #1
 8007a54:	4648      	mov	r0, r9
 8007a56:	499f      	ldr	r1, [pc, #636]	@ (8007cd4 <__gethex+0x2b0>)
 8007a58:	f7ff fe7f 	bl	800775a <strncmp>
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d167      	bne.n	8007b32 <__gethex+0x10e>
 8007a62:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007a66:	4626      	mov	r6, r4
 8007a68:	f7ff ffc7 	bl	80079fa <__hexdig_fun>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d062      	beq.n	8007b36 <__gethex+0x112>
 8007a70:	4623      	mov	r3, r4
 8007a72:	7818      	ldrb	r0, [r3, #0]
 8007a74:	4699      	mov	r9, r3
 8007a76:	2830      	cmp	r0, #48	@ 0x30
 8007a78:	f103 0301 	add.w	r3, r3, #1
 8007a7c:	d0f9      	beq.n	8007a72 <__gethex+0x4e>
 8007a7e:	f7ff ffbc 	bl	80079fa <__hexdig_fun>
 8007a82:	fab0 f580 	clz	r5, r0
 8007a86:	f04f 0b01 	mov.w	fp, #1
 8007a8a:	096d      	lsrs	r5, r5, #5
 8007a8c:	464a      	mov	r2, r9
 8007a8e:	4616      	mov	r6, r2
 8007a90:	7830      	ldrb	r0, [r6, #0]
 8007a92:	3201      	adds	r2, #1
 8007a94:	f7ff ffb1 	bl	80079fa <__hexdig_fun>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d1f8      	bne.n	8007a8e <__gethex+0x6a>
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	498c      	ldr	r1, [pc, #560]	@ (8007cd4 <__gethex+0x2b0>)
 8007aa2:	f7ff fe5a 	bl	800775a <strncmp>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d13f      	bne.n	8007b2a <__gethex+0x106>
 8007aaa:	b944      	cbnz	r4, 8007abe <__gethex+0x9a>
 8007aac:	1c74      	adds	r4, r6, #1
 8007aae:	4622      	mov	r2, r4
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	7830      	ldrb	r0, [r6, #0]
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	f7ff ffa0 	bl	80079fa <__hexdig_fun>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d1f8      	bne.n	8007ab0 <__gethex+0x8c>
 8007abe:	1ba4      	subs	r4, r4, r6
 8007ac0:	00a7      	lsls	r7, r4, #2
 8007ac2:	7833      	ldrb	r3, [r6, #0]
 8007ac4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ac8:	2b50      	cmp	r3, #80	@ 0x50
 8007aca:	d13e      	bne.n	8007b4a <__gethex+0x126>
 8007acc:	7873      	ldrb	r3, [r6, #1]
 8007ace:	2b2b      	cmp	r3, #43	@ 0x2b
 8007ad0:	d033      	beq.n	8007b3a <__gethex+0x116>
 8007ad2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ad4:	d034      	beq.n	8007b40 <__gethex+0x11c>
 8007ad6:	2400      	movs	r4, #0
 8007ad8:	1c71      	adds	r1, r6, #1
 8007ada:	7808      	ldrb	r0, [r1, #0]
 8007adc:	f7ff ff8d 	bl	80079fa <__hexdig_fun>
 8007ae0:	1e43      	subs	r3, r0, #1
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b18      	cmp	r3, #24
 8007ae6:	d830      	bhi.n	8007b4a <__gethex+0x126>
 8007ae8:	f1a0 0210 	sub.w	r2, r0, #16
 8007aec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007af0:	f7ff ff83 	bl	80079fa <__hexdig_fun>
 8007af4:	f100 3cff 	add.w	ip, r0, #4294967295
 8007af8:	fa5f fc8c 	uxtb.w	ip, ip
 8007afc:	f1bc 0f18 	cmp.w	ip, #24
 8007b00:	f04f 030a 	mov.w	r3, #10
 8007b04:	d91e      	bls.n	8007b44 <__gethex+0x120>
 8007b06:	b104      	cbz	r4, 8007b0a <__gethex+0xe6>
 8007b08:	4252      	negs	r2, r2
 8007b0a:	4417      	add	r7, r2
 8007b0c:	f8ca 1000 	str.w	r1, [sl]
 8007b10:	b1ed      	cbz	r5, 8007b4e <__gethex+0x12a>
 8007b12:	f1bb 0f00 	cmp.w	fp, #0
 8007b16:	bf0c      	ite	eq
 8007b18:	2506      	moveq	r5, #6
 8007b1a:	2500      	movne	r5, #0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	b005      	add	sp, #20
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	2500      	movs	r5, #0
 8007b26:	462c      	mov	r4, r5
 8007b28:	e7b0      	b.n	8007a8c <__gethex+0x68>
 8007b2a:	2c00      	cmp	r4, #0
 8007b2c:	d1c7      	bne.n	8007abe <__gethex+0x9a>
 8007b2e:	4627      	mov	r7, r4
 8007b30:	e7c7      	b.n	8007ac2 <__gethex+0x9e>
 8007b32:	464e      	mov	r6, r9
 8007b34:	462f      	mov	r7, r5
 8007b36:	2501      	movs	r5, #1
 8007b38:	e7c3      	b.n	8007ac2 <__gethex+0x9e>
 8007b3a:	2400      	movs	r4, #0
 8007b3c:	1cb1      	adds	r1, r6, #2
 8007b3e:	e7cc      	b.n	8007ada <__gethex+0xb6>
 8007b40:	2401      	movs	r4, #1
 8007b42:	e7fb      	b.n	8007b3c <__gethex+0x118>
 8007b44:	fb03 0002 	mla	r0, r3, r2, r0
 8007b48:	e7ce      	b.n	8007ae8 <__gethex+0xc4>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	e7de      	b.n	8007b0c <__gethex+0xe8>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	eba6 0309 	sub.w	r3, r6, r9
 8007b54:	3b01      	subs	r3, #1
 8007b56:	2b07      	cmp	r3, #7
 8007b58:	dc0a      	bgt.n	8007b70 <__gethex+0x14c>
 8007b5a:	9801      	ldr	r0, [sp, #4]
 8007b5c:	f000 faf4 	bl	8008148 <_Balloc>
 8007b60:	4604      	mov	r4, r0
 8007b62:	b940      	cbnz	r0, 8007b76 <__gethex+0x152>
 8007b64:	4602      	mov	r2, r0
 8007b66:	21e4      	movs	r1, #228	@ 0xe4
 8007b68:	4b5b      	ldr	r3, [pc, #364]	@ (8007cd8 <__gethex+0x2b4>)
 8007b6a:	485c      	ldr	r0, [pc, #368]	@ (8007cdc <__gethex+0x2b8>)
 8007b6c:	f001 fb60 	bl	8009230 <__assert_func>
 8007b70:	3101      	adds	r1, #1
 8007b72:	105b      	asrs	r3, r3, #1
 8007b74:	e7ef      	b.n	8007b56 <__gethex+0x132>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f100 0a14 	add.w	sl, r0, #20
 8007b7c:	4655      	mov	r5, sl
 8007b7e:	469b      	mov	fp, r3
 8007b80:	45b1      	cmp	r9, r6
 8007b82:	d337      	bcc.n	8007bf4 <__gethex+0x1d0>
 8007b84:	f845 bb04 	str.w	fp, [r5], #4
 8007b88:	eba5 050a 	sub.w	r5, r5, sl
 8007b8c:	10ad      	asrs	r5, r5, #2
 8007b8e:	6125      	str	r5, [r4, #16]
 8007b90:	4658      	mov	r0, fp
 8007b92:	f000 fbcb 	bl	800832c <__hi0bits>
 8007b96:	016d      	lsls	r5, r5, #5
 8007b98:	f8d8 6000 	ldr.w	r6, [r8]
 8007b9c:	1a2d      	subs	r5, r5, r0
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	dd54      	ble.n	8007c4c <__gethex+0x228>
 8007ba2:	1bad      	subs	r5, r5, r6
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 ff4d 	bl	8008a46 <__any_on>
 8007bac:	4681      	mov	r9, r0
 8007bae:	b178      	cbz	r0, 8007bd0 <__gethex+0x1ac>
 8007bb0:	f04f 0901 	mov.w	r9, #1
 8007bb4:	1e6b      	subs	r3, r5, #1
 8007bb6:	1159      	asrs	r1, r3, #5
 8007bb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007bbc:	f003 021f 	and.w	r2, r3, #31
 8007bc0:	fa09 f202 	lsl.w	r2, r9, r2
 8007bc4:	420a      	tst	r2, r1
 8007bc6:	d003      	beq.n	8007bd0 <__gethex+0x1ac>
 8007bc8:	454b      	cmp	r3, r9
 8007bca:	dc36      	bgt.n	8007c3a <__gethex+0x216>
 8007bcc:	f04f 0902 	mov.w	r9, #2
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff febe 	bl	8007954 <rshift>
 8007bd8:	442f      	add	r7, r5
 8007bda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bde:	42bb      	cmp	r3, r7
 8007be0:	da42      	bge.n	8007c68 <__gethex+0x244>
 8007be2:	4621      	mov	r1, r4
 8007be4:	9801      	ldr	r0, [sp, #4]
 8007be6:	f000 faef 	bl	80081c8 <_Bfree>
 8007bea:	2300      	movs	r3, #0
 8007bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bee:	25a3      	movs	r5, #163	@ 0xa3
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	e793      	b.n	8007b1c <__gethex+0xf8>
 8007bf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007bf8:	2a2e      	cmp	r2, #46	@ 0x2e
 8007bfa:	d012      	beq.n	8007c22 <__gethex+0x1fe>
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d104      	bne.n	8007c0a <__gethex+0x1e6>
 8007c00:	f845 bb04 	str.w	fp, [r5], #4
 8007c04:	f04f 0b00 	mov.w	fp, #0
 8007c08:	465b      	mov	r3, fp
 8007c0a:	7830      	ldrb	r0, [r6, #0]
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	f7ff fef4 	bl	80079fa <__hexdig_fun>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	f000 000f 	and.w	r0, r0, #15
 8007c18:	4098      	lsls	r0, r3
 8007c1a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007c1e:	3304      	adds	r3, #4
 8007c20:	e7ae      	b.n	8007b80 <__gethex+0x15c>
 8007c22:	45b1      	cmp	r9, r6
 8007c24:	d8ea      	bhi.n	8007bfc <__gethex+0x1d8>
 8007c26:	2201      	movs	r2, #1
 8007c28:	4630      	mov	r0, r6
 8007c2a:	492a      	ldr	r1, [pc, #168]	@ (8007cd4 <__gethex+0x2b0>)
 8007c2c:	9303      	str	r3, [sp, #12]
 8007c2e:	f7ff fd94 	bl	800775a <strncmp>
 8007c32:	9b03      	ldr	r3, [sp, #12]
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d1e1      	bne.n	8007bfc <__gethex+0x1d8>
 8007c38:	e7a2      	b.n	8007b80 <__gethex+0x15c>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	1ea9      	subs	r1, r5, #2
 8007c3e:	f000 ff02 	bl	8008a46 <__any_on>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0c2      	beq.n	8007bcc <__gethex+0x1a8>
 8007c46:	f04f 0903 	mov.w	r9, #3
 8007c4a:	e7c1      	b.n	8007bd0 <__gethex+0x1ac>
 8007c4c:	da09      	bge.n	8007c62 <__gethex+0x23e>
 8007c4e:	1b75      	subs	r5, r6, r5
 8007c50:	4621      	mov	r1, r4
 8007c52:	462a      	mov	r2, r5
 8007c54:	9801      	ldr	r0, [sp, #4]
 8007c56:	f000 fcc7 	bl	80085e8 <__lshift>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	1b7f      	subs	r7, r7, r5
 8007c5e:	f100 0a14 	add.w	sl, r0, #20
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	e7b8      	b.n	8007bda <__gethex+0x1b6>
 8007c68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c6c:	42bd      	cmp	r5, r7
 8007c6e:	dd6f      	ble.n	8007d50 <__gethex+0x32c>
 8007c70:	1bed      	subs	r5, r5, r7
 8007c72:	42ae      	cmp	r6, r5
 8007c74:	dc34      	bgt.n	8007ce0 <__gethex+0x2bc>
 8007c76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d022      	beq.n	8007cc4 <__gethex+0x2a0>
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d024      	beq.n	8007ccc <__gethex+0x2a8>
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d115      	bne.n	8007cb2 <__gethex+0x28e>
 8007c86:	42ae      	cmp	r6, r5
 8007c88:	d113      	bne.n	8007cb2 <__gethex+0x28e>
 8007c8a:	2e01      	cmp	r6, #1
 8007c8c:	d10b      	bne.n	8007ca6 <__gethex+0x282>
 8007c8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c92:	9a02      	ldr	r2, [sp, #8]
 8007c94:	2562      	movs	r5, #98	@ 0x62
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	f8ca 3000 	str.w	r3, [sl]
 8007ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca2:	601c      	str	r4, [r3, #0]
 8007ca4:	e73a      	b.n	8007b1c <__gethex+0xf8>
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	1e71      	subs	r1, r6, #1
 8007caa:	f000 fecc 	bl	8008a46 <__any_on>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d1ed      	bne.n	8007c8e <__gethex+0x26a>
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	9801      	ldr	r0, [sp, #4]
 8007cb6:	f000 fa87 	bl	80081c8 <_Bfree>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cbe:	2550      	movs	r5, #80	@ 0x50
 8007cc0:	6013      	str	r3, [r2, #0]
 8007cc2:	e72b      	b.n	8007b1c <__gethex+0xf8>
 8007cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f3      	bne.n	8007cb2 <__gethex+0x28e>
 8007cca:	e7e0      	b.n	8007c8e <__gethex+0x26a>
 8007ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1dd      	bne.n	8007c8e <__gethex+0x26a>
 8007cd2:	e7ee      	b.n	8007cb2 <__gethex+0x28e>
 8007cd4:	0800c0ed 	.word	0x0800c0ed
 8007cd8:	0800c103 	.word	0x0800c103
 8007cdc:	0800c114 	.word	0x0800c114
 8007ce0:	1e6f      	subs	r7, r5, #1
 8007ce2:	f1b9 0f00 	cmp.w	r9, #0
 8007ce6:	d130      	bne.n	8007d4a <__gethex+0x326>
 8007ce8:	b127      	cbz	r7, 8007cf4 <__gethex+0x2d0>
 8007cea:	4639      	mov	r1, r7
 8007cec:	4620      	mov	r0, r4
 8007cee:	f000 feaa 	bl	8008a46 <__any_on>
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	1b76      	subs	r6, r6, r5
 8007cfa:	2502      	movs	r5, #2
 8007cfc:	117a      	asrs	r2, r7, #5
 8007cfe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d02:	f007 071f 	and.w	r7, r7, #31
 8007d06:	40bb      	lsls	r3, r7
 8007d08:	4213      	tst	r3, r2
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	bf18      	it	ne
 8007d0e:	f049 0902 	orrne.w	r9, r9, #2
 8007d12:	f7ff fe1f 	bl	8007954 <rshift>
 8007d16:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007d1a:	f1b9 0f00 	cmp.w	r9, #0
 8007d1e:	d047      	beq.n	8007db0 <__gethex+0x38c>
 8007d20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d015      	beq.n	8007d54 <__gethex+0x330>
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d017      	beq.n	8007d5c <__gethex+0x338>
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d109      	bne.n	8007d44 <__gethex+0x320>
 8007d30:	f019 0f02 	tst.w	r9, #2
 8007d34:	d006      	beq.n	8007d44 <__gethex+0x320>
 8007d36:	f8da 3000 	ldr.w	r3, [sl]
 8007d3a:	ea49 0903 	orr.w	r9, r9, r3
 8007d3e:	f019 0f01 	tst.w	r9, #1
 8007d42:	d10e      	bne.n	8007d62 <__gethex+0x33e>
 8007d44:	f045 0510 	orr.w	r5, r5, #16
 8007d48:	e032      	b.n	8007db0 <__gethex+0x38c>
 8007d4a:	f04f 0901 	mov.w	r9, #1
 8007d4e:	e7d1      	b.n	8007cf4 <__gethex+0x2d0>
 8007d50:	2501      	movs	r5, #1
 8007d52:	e7e2      	b.n	8007d1a <__gethex+0x2f6>
 8007d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d56:	f1c3 0301 	rsb	r3, r3, #1
 8007d5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <__gethex+0x320>
 8007d62:	f04f 0c00 	mov.w	ip, #0
 8007d66:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d6a:	f104 0314 	add.w	r3, r4, #20
 8007d6e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d72:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d80:	d01b      	beq.n	8007dba <__gethex+0x396>
 8007d82:	3201      	adds	r2, #1
 8007d84:	6002      	str	r2, [r0, #0]
 8007d86:	2d02      	cmp	r5, #2
 8007d88:	f104 0314 	add.w	r3, r4, #20
 8007d8c:	d13c      	bne.n	8007e08 <__gethex+0x3e4>
 8007d8e:	f8d8 2000 	ldr.w	r2, [r8]
 8007d92:	3a01      	subs	r2, #1
 8007d94:	42b2      	cmp	r2, r6
 8007d96:	d109      	bne.n	8007dac <__gethex+0x388>
 8007d98:	2201      	movs	r2, #1
 8007d9a:	1171      	asrs	r1, r6, #5
 8007d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007da0:	f006 061f 	and.w	r6, r6, #31
 8007da4:	fa02 f606 	lsl.w	r6, r2, r6
 8007da8:	421e      	tst	r6, r3
 8007daa:	d13a      	bne.n	8007e22 <__gethex+0x3fe>
 8007dac:	f045 0520 	orr.w	r5, r5, #32
 8007db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db2:	601c      	str	r4, [r3, #0]
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	601f      	str	r7, [r3, #0]
 8007db8:	e6b0      	b.n	8007b1c <__gethex+0xf8>
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007dc0:	d8d9      	bhi.n	8007d76 <__gethex+0x352>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	459b      	cmp	fp, r3
 8007dc6:	db17      	blt.n	8007df8 <__gethex+0x3d4>
 8007dc8:	6861      	ldr	r1, [r4, #4]
 8007dca:	9801      	ldr	r0, [sp, #4]
 8007dcc:	3101      	adds	r1, #1
 8007dce:	f000 f9bb 	bl	8008148 <_Balloc>
 8007dd2:	4681      	mov	r9, r0
 8007dd4:	b918      	cbnz	r0, 8007dde <__gethex+0x3ba>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	2184      	movs	r1, #132	@ 0x84
 8007dda:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <__gethex+0x41c>)
 8007ddc:	e6c5      	b.n	8007b6a <__gethex+0x146>
 8007dde:	6922      	ldr	r2, [r4, #16]
 8007de0:	f104 010c 	add.w	r1, r4, #12
 8007de4:	3202      	adds	r2, #2
 8007de6:	0092      	lsls	r2, r2, #2
 8007de8:	300c      	adds	r0, #12
 8007dea:	f7ff fd56 	bl	800789a <memcpy>
 8007dee:	4621      	mov	r1, r4
 8007df0:	9801      	ldr	r0, [sp, #4]
 8007df2:	f000 f9e9 	bl	80081c8 <_Bfree>
 8007df6:	464c      	mov	r4, r9
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	6122      	str	r2, [r4, #16]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e04:	615a      	str	r2, [r3, #20]
 8007e06:	e7be      	b.n	8007d86 <__gethex+0x362>
 8007e08:	6922      	ldr	r2, [r4, #16]
 8007e0a:	455a      	cmp	r2, fp
 8007e0c:	dd0b      	ble.n	8007e26 <__gethex+0x402>
 8007e0e:	2101      	movs	r1, #1
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff fd9f 	bl	8007954 <rshift>
 8007e16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e1a:	3701      	adds	r7, #1
 8007e1c:	42bb      	cmp	r3, r7
 8007e1e:	f6ff aee0 	blt.w	8007be2 <__gethex+0x1be>
 8007e22:	2501      	movs	r5, #1
 8007e24:	e7c2      	b.n	8007dac <__gethex+0x388>
 8007e26:	f016 061f 	ands.w	r6, r6, #31
 8007e2a:	d0fa      	beq.n	8007e22 <__gethex+0x3fe>
 8007e2c:	4453      	add	r3, sl
 8007e2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e32:	f000 fa7b 	bl	800832c <__hi0bits>
 8007e36:	f1c6 0620 	rsb	r6, r6, #32
 8007e3a:	42b0      	cmp	r0, r6
 8007e3c:	dbe7      	blt.n	8007e0e <__gethex+0x3ea>
 8007e3e:	e7f0      	b.n	8007e22 <__gethex+0x3fe>
 8007e40:	0800c103 	.word	0x0800c103

08007e44 <L_shift>:
 8007e44:	f1c2 0208 	rsb	r2, r2, #8
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	b570      	push	{r4, r5, r6, lr}
 8007e4c:	f1c2 0620 	rsb	r6, r2, #32
 8007e50:	6843      	ldr	r3, [r0, #4]
 8007e52:	6804      	ldr	r4, [r0, #0]
 8007e54:	fa03 f506 	lsl.w	r5, r3, r6
 8007e58:	432c      	orrs	r4, r5
 8007e5a:	40d3      	lsrs	r3, r2
 8007e5c:	6004      	str	r4, [r0, #0]
 8007e5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e62:	4288      	cmp	r0, r1
 8007e64:	d3f4      	bcc.n	8007e50 <L_shift+0xc>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}

08007e68 <__match>:
 8007e68:	b530      	push	{r4, r5, lr}
 8007e6a:	6803      	ldr	r3, [r0, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e72:	b914      	cbnz	r4, 8007e7a <__match+0x12>
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	2001      	movs	r0, #1
 8007e78:	bd30      	pop	{r4, r5, pc}
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007e82:	2d19      	cmp	r5, #25
 8007e84:	bf98      	it	ls
 8007e86:	3220      	addls	r2, #32
 8007e88:	42a2      	cmp	r2, r4
 8007e8a:	d0f0      	beq.n	8007e6e <__match+0x6>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	e7f3      	b.n	8007e78 <__match+0x10>

08007e90 <__hexnan>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	2500      	movs	r5, #0
 8007e96:	680b      	ldr	r3, [r1, #0]
 8007e98:	4682      	mov	sl, r0
 8007e9a:	115e      	asrs	r6, r3, #5
 8007e9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ea0:	f013 031f 	ands.w	r3, r3, #31
 8007ea4:	bf18      	it	ne
 8007ea6:	3604      	addne	r6, #4
 8007ea8:	1f37      	subs	r7, r6, #4
 8007eaa:	4690      	mov	r8, r2
 8007eac:	46b9      	mov	r9, r7
 8007eae:	463c      	mov	r4, r7
 8007eb0:	46ab      	mov	fp, r5
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	6801      	ldr	r1, [r0, #0]
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007ebc:	9502      	str	r5, [sp, #8]
 8007ebe:	784a      	ldrb	r2, [r1, #1]
 8007ec0:	1c4b      	adds	r3, r1, #1
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	b342      	cbz	r2, 8007f18 <__hexnan+0x88>
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	9105      	str	r1, [sp, #20]
 8007eca:	9204      	str	r2, [sp, #16]
 8007ecc:	f7ff fd95 	bl	80079fa <__hexdig_fun>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d151      	bne.n	8007f78 <__hexnan+0xe8>
 8007ed4:	9a04      	ldr	r2, [sp, #16]
 8007ed6:	9905      	ldr	r1, [sp, #20]
 8007ed8:	2a20      	cmp	r2, #32
 8007eda:	d818      	bhi.n	8007f0e <__hexnan+0x7e>
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	459b      	cmp	fp, r3
 8007ee0:	dd13      	ble.n	8007f0a <__hexnan+0x7a>
 8007ee2:	454c      	cmp	r4, r9
 8007ee4:	d206      	bcs.n	8007ef4 <__hexnan+0x64>
 8007ee6:	2d07      	cmp	r5, #7
 8007ee8:	dc04      	bgt.n	8007ef4 <__hexnan+0x64>
 8007eea:	462a      	mov	r2, r5
 8007eec:	4649      	mov	r1, r9
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff ffa8 	bl	8007e44 <L_shift>
 8007ef4:	4544      	cmp	r4, r8
 8007ef6:	d952      	bls.n	8007f9e <__hexnan+0x10e>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f1a4 0904 	sub.w	r9, r4, #4
 8007efe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f02:	461d      	mov	r5, r3
 8007f04:	464c      	mov	r4, r9
 8007f06:	f8cd b008 	str.w	fp, [sp, #8]
 8007f0a:	9903      	ldr	r1, [sp, #12]
 8007f0c:	e7d7      	b.n	8007ebe <__hexnan+0x2e>
 8007f0e:	2a29      	cmp	r2, #41	@ 0x29
 8007f10:	d157      	bne.n	8007fc2 <__hexnan+0x132>
 8007f12:	3102      	adds	r1, #2
 8007f14:	f8ca 1000 	str.w	r1, [sl]
 8007f18:	f1bb 0f00 	cmp.w	fp, #0
 8007f1c:	d051      	beq.n	8007fc2 <__hexnan+0x132>
 8007f1e:	454c      	cmp	r4, r9
 8007f20:	d206      	bcs.n	8007f30 <__hexnan+0xa0>
 8007f22:	2d07      	cmp	r5, #7
 8007f24:	dc04      	bgt.n	8007f30 <__hexnan+0xa0>
 8007f26:	462a      	mov	r2, r5
 8007f28:	4649      	mov	r1, r9
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7ff ff8a 	bl	8007e44 <L_shift>
 8007f30:	4544      	cmp	r4, r8
 8007f32:	d936      	bls.n	8007fa2 <__hexnan+0x112>
 8007f34:	4623      	mov	r3, r4
 8007f36:	f1a8 0204 	sub.w	r2, r8, #4
 8007f3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f3e:	429f      	cmp	r7, r3
 8007f40:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f44:	d2f9      	bcs.n	8007f3a <__hexnan+0xaa>
 8007f46:	1b3b      	subs	r3, r7, r4
 8007f48:	f023 0303 	bic.w	r3, r3, #3
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	3401      	adds	r4, #1
 8007f50:	3e03      	subs	r6, #3
 8007f52:	42b4      	cmp	r4, r6
 8007f54:	bf88      	it	hi
 8007f56:	2304      	movhi	r3, #4
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4443      	add	r3, r8
 8007f5c:	f843 2b04 	str.w	r2, [r3], #4
 8007f60:	429f      	cmp	r7, r3
 8007f62:	d2fb      	bcs.n	8007f5c <__hexnan+0xcc>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	b91b      	cbnz	r3, 8007f70 <__hexnan+0xe0>
 8007f68:	4547      	cmp	r7, r8
 8007f6a:	d128      	bne.n	8007fbe <__hexnan+0x12e>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	2005      	movs	r0, #5
 8007f72:	b007      	add	sp, #28
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	3501      	adds	r5, #1
 8007f7a:	2d08      	cmp	r5, #8
 8007f7c:	f10b 0b01 	add.w	fp, fp, #1
 8007f80:	dd06      	ble.n	8007f90 <__hexnan+0x100>
 8007f82:	4544      	cmp	r4, r8
 8007f84:	d9c1      	bls.n	8007f0a <__hexnan+0x7a>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2501      	movs	r5, #1
 8007f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f8e:	3c04      	subs	r4, #4
 8007f90:	6822      	ldr	r2, [r4, #0]
 8007f92:	f000 000f 	and.w	r0, r0, #15
 8007f96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f9a:	6020      	str	r0, [r4, #0]
 8007f9c:	e7b5      	b.n	8007f0a <__hexnan+0x7a>
 8007f9e:	2508      	movs	r5, #8
 8007fa0:	e7b3      	b.n	8007f0a <__hexnan+0x7a>
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0dd      	beq.n	8007f64 <__hexnan+0xd4>
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	f1c3 0320 	rsb	r3, r3, #32
 8007fb0:	40da      	lsrs	r2, r3
 8007fb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007fbc:	e7d2      	b.n	8007f64 <__hexnan+0xd4>
 8007fbe:	3f04      	subs	r7, #4
 8007fc0:	e7d0      	b.n	8007f64 <__hexnan+0xd4>
 8007fc2:	2004      	movs	r0, #4
 8007fc4:	e7d5      	b.n	8007f72 <__hexnan+0xe2>
	...

08007fc8 <sbrk_aligned>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0f      	ldr	r6, [pc, #60]	@ (8008008 <sbrk_aligned+0x40>)
 8007fcc:	460c      	mov	r4, r1
 8007fce:	6831      	ldr	r1, [r6, #0]
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	b911      	cbnz	r1, 8007fda <sbrk_aligned+0x12>
 8007fd4:	f001 f90e 	bl	80091f4 <_sbrk_r>
 8007fd8:	6030      	str	r0, [r6, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f001 f909 	bl	80091f4 <_sbrk_r>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d103      	bne.n	8007fee <sbrk_aligned+0x26>
 8007fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8007fea:	4620      	mov	r0, r4
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	1cc4      	adds	r4, r0, #3
 8007ff0:	f024 0403 	bic.w	r4, r4, #3
 8007ff4:	42a0      	cmp	r0, r4
 8007ff6:	d0f8      	beq.n	8007fea <sbrk_aligned+0x22>
 8007ff8:	1a21      	subs	r1, r4, r0
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f001 f8fa 	bl	80091f4 <_sbrk_r>
 8008000:	3001      	adds	r0, #1
 8008002:	d1f2      	bne.n	8007fea <sbrk_aligned+0x22>
 8008004:	e7ef      	b.n	8007fe6 <sbrk_aligned+0x1e>
 8008006:	bf00      	nop
 8008008:	200049e8 	.word	0x200049e8

0800800c <_malloc_r>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	1ccd      	adds	r5, r1, #3
 8008012:	f025 0503 	bic.w	r5, r5, #3
 8008016:	3508      	adds	r5, #8
 8008018:	2d0c      	cmp	r5, #12
 800801a:	bf38      	it	cc
 800801c:	250c      	movcc	r5, #12
 800801e:	2d00      	cmp	r5, #0
 8008020:	4606      	mov	r6, r0
 8008022:	db01      	blt.n	8008028 <_malloc_r+0x1c>
 8008024:	42a9      	cmp	r1, r5
 8008026:	d904      	bls.n	8008032 <_malloc_r+0x26>
 8008028:	230c      	movs	r3, #12
 800802a:	6033      	str	r3, [r6, #0]
 800802c:	2000      	movs	r0, #0
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008108 <_malloc_r+0xfc>
 8008036:	f000 f87b 	bl	8008130 <__malloc_lock>
 800803a:	f8d8 3000 	ldr.w	r3, [r8]
 800803e:	461c      	mov	r4, r3
 8008040:	bb44      	cbnz	r4, 8008094 <_malloc_r+0x88>
 8008042:	4629      	mov	r1, r5
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff ffbf 	bl	8007fc8 <sbrk_aligned>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	4604      	mov	r4, r0
 800804e:	d158      	bne.n	8008102 <_malloc_r+0xf6>
 8008050:	f8d8 4000 	ldr.w	r4, [r8]
 8008054:	4627      	mov	r7, r4
 8008056:	2f00      	cmp	r7, #0
 8008058:	d143      	bne.n	80080e2 <_malloc_r+0xd6>
 800805a:	2c00      	cmp	r4, #0
 800805c:	d04b      	beq.n	80080f6 <_malloc_r+0xea>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	4639      	mov	r1, r7
 8008062:	4630      	mov	r0, r6
 8008064:	eb04 0903 	add.w	r9, r4, r3
 8008068:	f001 f8c4 	bl	80091f4 <_sbrk_r>
 800806c:	4581      	cmp	r9, r0
 800806e:	d142      	bne.n	80080f6 <_malloc_r+0xea>
 8008070:	6821      	ldr	r1, [r4, #0]
 8008072:	4630      	mov	r0, r6
 8008074:	1a6d      	subs	r5, r5, r1
 8008076:	4629      	mov	r1, r5
 8008078:	f7ff ffa6 	bl	8007fc8 <sbrk_aligned>
 800807c:	3001      	adds	r0, #1
 800807e:	d03a      	beq.n	80080f6 <_malloc_r+0xea>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	442b      	add	r3, r5
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	f8d8 3000 	ldr.w	r3, [r8]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	bb62      	cbnz	r2, 80080e8 <_malloc_r+0xdc>
 800808e:	f8c8 7000 	str.w	r7, [r8]
 8008092:	e00f      	b.n	80080b4 <_malloc_r+0xa8>
 8008094:	6822      	ldr	r2, [r4, #0]
 8008096:	1b52      	subs	r2, r2, r5
 8008098:	d420      	bmi.n	80080dc <_malloc_r+0xd0>
 800809a:	2a0b      	cmp	r2, #11
 800809c:	d917      	bls.n	80080ce <_malloc_r+0xc2>
 800809e:	1961      	adds	r1, r4, r5
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	6025      	str	r5, [r4, #0]
 80080a4:	bf18      	it	ne
 80080a6:	6059      	strne	r1, [r3, #4]
 80080a8:	6863      	ldr	r3, [r4, #4]
 80080aa:	bf08      	it	eq
 80080ac:	f8c8 1000 	streq.w	r1, [r8]
 80080b0:	5162      	str	r2, [r4, r5]
 80080b2:	604b      	str	r3, [r1, #4]
 80080b4:	4630      	mov	r0, r6
 80080b6:	f000 f841 	bl	800813c <__malloc_unlock>
 80080ba:	f104 000b 	add.w	r0, r4, #11
 80080be:	1d23      	adds	r3, r4, #4
 80080c0:	f020 0007 	bic.w	r0, r0, #7
 80080c4:	1ac2      	subs	r2, r0, r3
 80080c6:	bf1c      	itt	ne
 80080c8:	1a1b      	subne	r3, r3, r0
 80080ca:	50a3      	strne	r3, [r4, r2]
 80080cc:	e7af      	b.n	800802e <_malloc_r+0x22>
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	bf0c      	ite	eq
 80080d4:	f8c8 2000 	streq.w	r2, [r8]
 80080d8:	605a      	strne	r2, [r3, #4]
 80080da:	e7eb      	b.n	80080b4 <_malloc_r+0xa8>
 80080dc:	4623      	mov	r3, r4
 80080de:	6864      	ldr	r4, [r4, #4]
 80080e0:	e7ae      	b.n	8008040 <_malloc_r+0x34>
 80080e2:	463c      	mov	r4, r7
 80080e4:	687f      	ldr	r7, [r7, #4]
 80080e6:	e7b6      	b.n	8008056 <_malloc_r+0x4a>
 80080e8:	461a      	mov	r2, r3
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d1fb      	bne.n	80080e8 <_malloc_r+0xdc>
 80080f0:	2300      	movs	r3, #0
 80080f2:	6053      	str	r3, [r2, #4]
 80080f4:	e7de      	b.n	80080b4 <_malloc_r+0xa8>
 80080f6:	230c      	movs	r3, #12
 80080f8:	4630      	mov	r0, r6
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	f000 f81e 	bl	800813c <__malloc_unlock>
 8008100:	e794      	b.n	800802c <_malloc_r+0x20>
 8008102:	6005      	str	r5, [r0, #0]
 8008104:	e7d6      	b.n	80080b4 <_malloc_r+0xa8>
 8008106:	bf00      	nop
 8008108:	200049ec 	.word	0x200049ec

0800810c <__ascii_mbtowc>:
 800810c:	b082      	sub	sp, #8
 800810e:	b901      	cbnz	r1, 8008112 <__ascii_mbtowc+0x6>
 8008110:	a901      	add	r1, sp, #4
 8008112:	b142      	cbz	r2, 8008126 <__ascii_mbtowc+0x1a>
 8008114:	b14b      	cbz	r3, 800812a <__ascii_mbtowc+0x1e>
 8008116:	7813      	ldrb	r3, [r2, #0]
 8008118:	600b      	str	r3, [r1, #0]
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	1e10      	subs	r0, r2, #0
 800811e:	bf18      	it	ne
 8008120:	2001      	movne	r0, #1
 8008122:	b002      	add	sp, #8
 8008124:	4770      	bx	lr
 8008126:	4610      	mov	r0, r2
 8008128:	e7fb      	b.n	8008122 <__ascii_mbtowc+0x16>
 800812a:	f06f 0001 	mvn.w	r0, #1
 800812e:	e7f8      	b.n	8008122 <__ascii_mbtowc+0x16>

08008130 <__malloc_lock>:
 8008130:	4801      	ldr	r0, [pc, #4]	@ (8008138 <__malloc_lock+0x8>)
 8008132:	f7ff bba8 	b.w	8007886 <__retarget_lock_acquire_recursive>
 8008136:	bf00      	nop
 8008138:	200049e4 	.word	0x200049e4

0800813c <__malloc_unlock>:
 800813c:	4801      	ldr	r0, [pc, #4]	@ (8008144 <__malloc_unlock+0x8>)
 800813e:	f7ff bba3 	b.w	8007888 <__retarget_lock_release_recursive>
 8008142:	bf00      	nop
 8008144:	200049e4 	.word	0x200049e4

08008148 <_Balloc>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	69c6      	ldr	r6, [r0, #28]
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	b976      	cbnz	r6, 8008170 <_Balloc+0x28>
 8008152:	2010      	movs	r0, #16
 8008154:	f001 f89e 	bl	8009294 <malloc>
 8008158:	4602      	mov	r2, r0
 800815a:	61e0      	str	r0, [r4, #28]
 800815c:	b920      	cbnz	r0, 8008168 <_Balloc+0x20>
 800815e:	216b      	movs	r1, #107	@ 0x6b
 8008160:	4b17      	ldr	r3, [pc, #92]	@ (80081c0 <_Balloc+0x78>)
 8008162:	4818      	ldr	r0, [pc, #96]	@ (80081c4 <_Balloc+0x7c>)
 8008164:	f001 f864 	bl	8009230 <__assert_func>
 8008168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800816c:	6006      	str	r6, [r0, #0]
 800816e:	60c6      	str	r6, [r0, #12]
 8008170:	69e6      	ldr	r6, [r4, #28]
 8008172:	68f3      	ldr	r3, [r6, #12]
 8008174:	b183      	cbz	r3, 8008198 <_Balloc+0x50>
 8008176:	69e3      	ldr	r3, [r4, #28]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800817e:	b9b8      	cbnz	r0, 80081b0 <_Balloc+0x68>
 8008180:	2101      	movs	r1, #1
 8008182:	fa01 f605 	lsl.w	r6, r1, r5
 8008186:	1d72      	adds	r2, r6, #5
 8008188:	4620      	mov	r0, r4
 800818a:	0092      	lsls	r2, r2, #2
 800818c:	f001 f86e 	bl	800926c <_calloc_r>
 8008190:	b160      	cbz	r0, 80081ac <_Balloc+0x64>
 8008192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008196:	e00e      	b.n	80081b6 <_Balloc+0x6e>
 8008198:	2221      	movs	r2, #33	@ 0x21
 800819a:	2104      	movs	r1, #4
 800819c:	4620      	mov	r0, r4
 800819e:	f001 f865 	bl	800926c <_calloc_r>
 80081a2:	69e3      	ldr	r3, [r4, #28]
 80081a4:	60f0      	str	r0, [r6, #12]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e4      	bne.n	8008176 <_Balloc+0x2e>
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	6802      	ldr	r2, [r0, #0]
 80081b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081b6:	2300      	movs	r3, #0
 80081b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081bc:	e7f7      	b.n	80081ae <_Balloc+0x66>
 80081be:	bf00      	nop
 80081c0:	0800c174 	.word	0x0800c174
 80081c4:	0800c18b 	.word	0x0800c18b

080081c8 <_Bfree>:
 80081c8:	b570      	push	{r4, r5, r6, lr}
 80081ca:	69c6      	ldr	r6, [r0, #28]
 80081cc:	4605      	mov	r5, r0
 80081ce:	460c      	mov	r4, r1
 80081d0:	b976      	cbnz	r6, 80081f0 <_Bfree+0x28>
 80081d2:	2010      	movs	r0, #16
 80081d4:	f001 f85e 	bl	8009294 <malloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	61e8      	str	r0, [r5, #28]
 80081dc:	b920      	cbnz	r0, 80081e8 <_Bfree+0x20>
 80081de:	218f      	movs	r1, #143	@ 0x8f
 80081e0:	4b08      	ldr	r3, [pc, #32]	@ (8008204 <_Bfree+0x3c>)
 80081e2:	4809      	ldr	r0, [pc, #36]	@ (8008208 <_Bfree+0x40>)
 80081e4:	f001 f824 	bl	8009230 <__assert_func>
 80081e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081ec:	6006      	str	r6, [r0, #0]
 80081ee:	60c6      	str	r6, [r0, #12]
 80081f0:	b13c      	cbz	r4, 8008202 <_Bfree+0x3a>
 80081f2:	69eb      	ldr	r3, [r5, #28]
 80081f4:	6862      	ldr	r2, [r4, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081fc:	6021      	str	r1, [r4, #0]
 80081fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	0800c174 	.word	0x0800c174
 8008208:	0800c18b 	.word	0x0800c18b

0800820c <__multadd>:
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	4607      	mov	r7, r0
 8008212:	460c      	mov	r4, r1
 8008214:	461e      	mov	r6, r3
 8008216:	2000      	movs	r0, #0
 8008218:	690d      	ldr	r5, [r1, #16]
 800821a:	f101 0c14 	add.w	ip, r1, #20
 800821e:	f8dc 3000 	ldr.w	r3, [ip]
 8008222:	3001      	adds	r0, #1
 8008224:	b299      	uxth	r1, r3
 8008226:	fb02 6101 	mla	r1, r2, r1, r6
 800822a:	0c1e      	lsrs	r6, r3, #16
 800822c:	0c0b      	lsrs	r3, r1, #16
 800822e:	fb02 3306 	mla	r3, r2, r6, r3
 8008232:	b289      	uxth	r1, r1
 8008234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008238:	4285      	cmp	r5, r0
 800823a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800823e:	f84c 1b04 	str.w	r1, [ip], #4
 8008242:	dcec      	bgt.n	800821e <__multadd+0x12>
 8008244:	b30e      	cbz	r6, 800828a <__multadd+0x7e>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	42ab      	cmp	r3, r5
 800824a:	dc19      	bgt.n	8008280 <__multadd+0x74>
 800824c:	6861      	ldr	r1, [r4, #4]
 800824e:	4638      	mov	r0, r7
 8008250:	3101      	adds	r1, #1
 8008252:	f7ff ff79 	bl	8008148 <_Balloc>
 8008256:	4680      	mov	r8, r0
 8008258:	b928      	cbnz	r0, 8008266 <__multadd+0x5a>
 800825a:	4602      	mov	r2, r0
 800825c:	21ba      	movs	r1, #186	@ 0xba
 800825e:	4b0c      	ldr	r3, [pc, #48]	@ (8008290 <__multadd+0x84>)
 8008260:	480c      	ldr	r0, [pc, #48]	@ (8008294 <__multadd+0x88>)
 8008262:	f000 ffe5 	bl	8009230 <__assert_func>
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	f104 010c 	add.w	r1, r4, #12
 800826c:	3202      	adds	r2, #2
 800826e:	0092      	lsls	r2, r2, #2
 8008270:	300c      	adds	r0, #12
 8008272:	f7ff fb12 	bl	800789a <memcpy>
 8008276:	4621      	mov	r1, r4
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ffa5 	bl	80081c8 <_Bfree>
 800827e:	4644      	mov	r4, r8
 8008280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008284:	3501      	adds	r5, #1
 8008286:	615e      	str	r6, [r3, #20]
 8008288:	6125      	str	r5, [r4, #16]
 800828a:	4620      	mov	r0, r4
 800828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008290:	0800c103 	.word	0x0800c103
 8008294:	0800c18b 	.word	0x0800c18b

08008298 <__s2b>:
 8008298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800829c:	4615      	mov	r5, r2
 800829e:	2209      	movs	r2, #9
 80082a0:	461f      	mov	r7, r3
 80082a2:	3308      	adds	r3, #8
 80082a4:	460c      	mov	r4, r1
 80082a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80082aa:	4606      	mov	r6, r0
 80082ac:	2201      	movs	r2, #1
 80082ae:	2100      	movs	r1, #0
 80082b0:	429a      	cmp	r2, r3
 80082b2:	db09      	blt.n	80082c8 <__s2b+0x30>
 80082b4:	4630      	mov	r0, r6
 80082b6:	f7ff ff47 	bl	8008148 <_Balloc>
 80082ba:	b940      	cbnz	r0, 80082ce <__s2b+0x36>
 80082bc:	4602      	mov	r2, r0
 80082be:	21d3      	movs	r1, #211	@ 0xd3
 80082c0:	4b18      	ldr	r3, [pc, #96]	@ (8008324 <__s2b+0x8c>)
 80082c2:	4819      	ldr	r0, [pc, #100]	@ (8008328 <__s2b+0x90>)
 80082c4:	f000 ffb4 	bl	8009230 <__assert_func>
 80082c8:	0052      	lsls	r2, r2, #1
 80082ca:	3101      	adds	r1, #1
 80082cc:	e7f0      	b.n	80082b0 <__s2b+0x18>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	2d09      	cmp	r5, #9
 80082d2:	6143      	str	r3, [r0, #20]
 80082d4:	f04f 0301 	mov.w	r3, #1
 80082d8:	6103      	str	r3, [r0, #16]
 80082da:	dd16      	ble.n	800830a <__s2b+0x72>
 80082dc:	f104 0909 	add.w	r9, r4, #9
 80082e0:	46c8      	mov	r8, r9
 80082e2:	442c      	add	r4, r5
 80082e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082e8:	4601      	mov	r1, r0
 80082ea:	220a      	movs	r2, #10
 80082ec:	4630      	mov	r0, r6
 80082ee:	3b30      	subs	r3, #48	@ 0x30
 80082f0:	f7ff ff8c 	bl	800820c <__multadd>
 80082f4:	45a0      	cmp	r8, r4
 80082f6:	d1f5      	bne.n	80082e4 <__s2b+0x4c>
 80082f8:	f1a5 0408 	sub.w	r4, r5, #8
 80082fc:	444c      	add	r4, r9
 80082fe:	1b2d      	subs	r5, r5, r4
 8008300:	1963      	adds	r3, r4, r5
 8008302:	42bb      	cmp	r3, r7
 8008304:	db04      	blt.n	8008310 <__s2b+0x78>
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	2509      	movs	r5, #9
 800830c:	340a      	adds	r4, #10
 800830e:	e7f6      	b.n	80082fe <__s2b+0x66>
 8008310:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008314:	4601      	mov	r1, r0
 8008316:	220a      	movs	r2, #10
 8008318:	4630      	mov	r0, r6
 800831a:	3b30      	subs	r3, #48	@ 0x30
 800831c:	f7ff ff76 	bl	800820c <__multadd>
 8008320:	e7ee      	b.n	8008300 <__s2b+0x68>
 8008322:	bf00      	nop
 8008324:	0800c103 	.word	0x0800c103
 8008328:	0800c18b 	.word	0x0800c18b

0800832c <__hi0bits>:
 800832c:	4603      	mov	r3, r0
 800832e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008332:	bf3a      	itte	cc
 8008334:	0403      	lslcc	r3, r0, #16
 8008336:	2010      	movcc	r0, #16
 8008338:	2000      	movcs	r0, #0
 800833a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800833e:	bf3c      	itt	cc
 8008340:	021b      	lslcc	r3, r3, #8
 8008342:	3008      	addcc	r0, #8
 8008344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008348:	bf3c      	itt	cc
 800834a:	011b      	lslcc	r3, r3, #4
 800834c:	3004      	addcc	r0, #4
 800834e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008352:	bf3c      	itt	cc
 8008354:	009b      	lslcc	r3, r3, #2
 8008356:	3002      	addcc	r0, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	db05      	blt.n	8008368 <__hi0bits+0x3c>
 800835c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008360:	f100 0001 	add.w	r0, r0, #1
 8008364:	bf08      	it	eq
 8008366:	2020      	moveq	r0, #32
 8008368:	4770      	bx	lr

0800836a <__lo0bits>:
 800836a:	6803      	ldr	r3, [r0, #0]
 800836c:	4602      	mov	r2, r0
 800836e:	f013 0007 	ands.w	r0, r3, #7
 8008372:	d00b      	beq.n	800838c <__lo0bits+0x22>
 8008374:	07d9      	lsls	r1, r3, #31
 8008376:	d421      	bmi.n	80083bc <__lo0bits+0x52>
 8008378:	0798      	lsls	r0, r3, #30
 800837a:	bf49      	itett	mi
 800837c:	085b      	lsrmi	r3, r3, #1
 800837e:	089b      	lsrpl	r3, r3, #2
 8008380:	2001      	movmi	r0, #1
 8008382:	6013      	strmi	r3, [r2, #0]
 8008384:	bf5c      	itt	pl
 8008386:	2002      	movpl	r0, #2
 8008388:	6013      	strpl	r3, [r2, #0]
 800838a:	4770      	bx	lr
 800838c:	b299      	uxth	r1, r3
 800838e:	b909      	cbnz	r1, 8008394 <__lo0bits+0x2a>
 8008390:	2010      	movs	r0, #16
 8008392:	0c1b      	lsrs	r3, r3, #16
 8008394:	b2d9      	uxtb	r1, r3
 8008396:	b909      	cbnz	r1, 800839c <__lo0bits+0x32>
 8008398:	3008      	adds	r0, #8
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	0719      	lsls	r1, r3, #28
 800839e:	bf04      	itt	eq
 80083a0:	091b      	lsreq	r3, r3, #4
 80083a2:	3004      	addeq	r0, #4
 80083a4:	0799      	lsls	r1, r3, #30
 80083a6:	bf04      	itt	eq
 80083a8:	089b      	lsreq	r3, r3, #2
 80083aa:	3002      	addeq	r0, #2
 80083ac:	07d9      	lsls	r1, r3, #31
 80083ae:	d403      	bmi.n	80083b8 <__lo0bits+0x4e>
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	f100 0001 	add.w	r0, r0, #1
 80083b6:	d003      	beq.n	80083c0 <__lo0bits+0x56>
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	4770      	bx	lr
 80083bc:	2000      	movs	r0, #0
 80083be:	4770      	bx	lr
 80083c0:	2020      	movs	r0, #32
 80083c2:	4770      	bx	lr

080083c4 <__i2b>:
 80083c4:	b510      	push	{r4, lr}
 80083c6:	460c      	mov	r4, r1
 80083c8:	2101      	movs	r1, #1
 80083ca:	f7ff febd 	bl	8008148 <_Balloc>
 80083ce:	4602      	mov	r2, r0
 80083d0:	b928      	cbnz	r0, 80083de <__i2b+0x1a>
 80083d2:	f240 1145 	movw	r1, #325	@ 0x145
 80083d6:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <__i2b+0x24>)
 80083d8:	4804      	ldr	r0, [pc, #16]	@ (80083ec <__i2b+0x28>)
 80083da:	f000 ff29 	bl	8009230 <__assert_func>
 80083de:	2301      	movs	r3, #1
 80083e0:	6144      	str	r4, [r0, #20]
 80083e2:	6103      	str	r3, [r0, #16]
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	bf00      	nop
 80083e8:	0800c103 	.word	0x0800c103
 80083ec:	0800c18b 	.word	0x0800c18b

080083f0 <__multiply>:
 80083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f4:	4617      	mov	r7, r2
 80083f6:	690a      	ldr	r2, [r1, #16]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4689      	mov	r9, r1
 80083fc:	429a      	cmp	r2, r3
 80083fe:	bfa2      	ittt	ge
 8008400:	463b      	movge	r3, r7
 8008402:	460f      	movge	r7, r1
 8008404:	4699      	movge	r9, r3
 8008406:	693d      	ldr	r5, [r7, #16]
 8008408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	eb05 060a 	add.w	r6, r5, sl
 8008414:	42b3      	cmp	r3, r6
 8008416:	b085      	sub	sp, #20
 8008418:	bfb8      	it	lt
 800841a:	3101      	addlt	r1, #1
 800841c:	f7ff fe94 	bl	8008148 <_Balloc>
 8008420:	b930      	cbnz	r0, 8008430 <__multiply+0x40>
 8008422:	4602      	mov	r2, r0
 8008424:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008428:	4b40      	ldr	r3, [pc, #256]	@ (800852c <__multiply+0x13c>)
 800842a:	4841      	ldr	r0, [pc, #260]	@ (8008530 <__multiply+0x140>)
 800842c:	f000 ff00 	bl	8009230 <__assert_func>
 8008430:	f100 0414 	add.w	r4, r0, #20
 8008434:	4623      	mov	r3, r4
 8008436:	2200      	movs	r2, #0
 8008438:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800843c:	4573      	cmp	r3, lr
 800843e:	d320      	bcc.n	8008482 <__multiply+0x92>
 8008440:	f107 0814 	add.w	r8, r7, #20
 8008444:	f109 0114 	add.w	r1, r9, #20
 8008448:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800844c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008450:	9302      	str	r3, [sp, #8]
 8008452:	1beb      	subs	r3, r5, r7
 8008454:	3b15      	subs	r3, #21
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	3304      	adds	r3, #4
 800845c:	3715      	adds	r7, #21
 800845e:	42bd      	cmp	r5, r7
 8008460:	bf38      	it	cc
 8008462:	2304      	movcc	r3, #4
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	9103      	str	r1, [sp, #12]
 800846a:	428b      	cmp	r3, r1
 800846c:	d80c      	bhi.n	8008488 <__multiply+0x98>
 800846e:	2e00      	cmp	r6, #0
 8008470:	dd03      	ble.n	800847a <__multiply+0x8a>
 8008472:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008476:	2b00      	cmp	r3, #0
 8008478:	d055      	beq.n	8008526 <__multiply+0x136>
 800847a:	6106      	str	r6, [r0, #16]
 800847c:	b005      	add	sp, #20
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	f843 2b04 	str.w	r2, [r3], #4
 8008486:	e7d9      	b.n	800843c <__multiply+0x4c>
 8008488:	f8b1 a000 	ldrh.w	sl, [r1]
 800848c:	f1ba 0f00 	cmp.w	sl, #0
 8008490:	d01f      	beq.n	80084d2 <__multiply+0xe2>
 8008492:	46c4      	mov	ip, r8
 8008494:	46a1      	mov	r9, r4
 8008496:	2700      	movs	r7, #0
 8008498:	f85c 2b04 	ldr.w	r2, [ip], #4
 800849c:	f8d9 3000 	ldr.w	r3, [r9]
 80084a0:	fa1f fb82 	uxth.w	fp, r2
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80084aa:	443b      	add	r3, r7
 80084ac:	f8d9 7000 	ldr.w	r7, [r9]
 80084b0:	0c12      	lsrs	r2, r2, #16
 80084b2:	0c3f      	lsrs	r7, r7, #16
 80084b4:	fb0a 7202 	mla	r2, sl, r2, r7
 80084b8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80084bc:	b29b      	uxth	r3, r3
 80084be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084c2:	4565      	cmp	r5, ip
 80084c4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80084c8:	f849 3b04 	str.w	r3, [r9], #4
 80084cc:	d8e4      	bhi.n	8008498 <__multiply+0xa8>
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	50e7      	str	r7, [r4, r3]
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	3104      	adds	r1, #4
 80084d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084da:	f1b9 0f00 	cmp.w	r9, #0
 80084de:	d020      	beq.n	8008522 <__multiply+0x132>
 80084e0:	4647      	mov	r7, r8
 80084e2:	46a4      	mov	ip, r4
 80084e4:	f04f 0a00 	mov.w	sl, #0
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	f8b7 b000 	ldrh.w	fp, [r7]
 80084ee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	fb09 220b 	mla	r2, r9, fp, r2
 80084f8:	4452      	add	r2, sl
 80084fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084fe:	f84c 3b04 	str.w	r3, [ip], #4
 8008502:	f857 3b04 	ldr.w	r3, [r7], #4
 8008506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800850a:	f8bc 3000 	ldrh.w	r3, [ip]
 800850e:	42bd      	cmp	r5, r7
 8008510:	fb09 330a 	mla	r3, r9, sl, r3
 8008514:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800851c:	d8e5      	bhi.n	80084ea <__multiply+0xfa>
 800851e:	9a01      	ldr	r2, [sp, #4]
 8008520:	50a3      	str	r3, [r4, r2]
 8008522:	3404      	adds	r4, #4
 8008524:	e79f      	b.n	8008466 <__multiply+0x76>
 8008526:	3e01      	subs	r6, #1
 8008528:	e7a1      	b.n	800846e <__multiply+0x7e>
 800852a:	bf00      	nop
 800852c:	0800c103 	.word	0x0800c103
 8008530:	0800c18b 	.word	0x0800c18b

08008534 <__pow5mult>:
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008538:	4615      	mov	r5, r2
 800853a:	f012 0203 	ands.w	r2, r2, #3
 800853e:	4607      	mov	r7, r0
 8008540:	460e      	mov	r6, r1
 8008542:	d007      	beq.n	8008554 <__pow5mult+0x20>
 8008544:	4c25      	ldr	r4, [pc, #148]	@ (80085dc <__pow5mult+0xa8>)
 8008546:	3a01      	subs	r2, #1
 8008548:	2300      	movs	r3, #0
 800854a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800854e:	f7ff fe5d 	bl	800820c <__multadd>
 8008552:	4606      	mov	r6, r0
 8008554:	10ad      	asrs	r5, r5, #2
 8008556:	d03d      	beq.n	80085d4 <__pow5mult+0xa0>
 8008558:	69fc      	ldr	r4, [r7, #28]
 800855a:	b97c      	cbnz	r4, 800857c <__pow5mult+0x48>
 800855c:	2010      	movs	r0, #16
 800855e:	f000 fe99 	bl	8009294 <malloc>
 8008562:	4602      	mov	r2, r0
 8008564:	61f8      	str	r0, [r7, #28]
 8008566:	b928      	cbnz	r0, 8008574 <__pow5mult+0x40>
 8008568:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800856c:	4b1c      	ldr	r3, [pc, #112]	@ (80085e0 <__pow5mult+0xac>)
 800856e:	481d      	ldr	r0, [pc, #116]	@ (80085e4 <__pow5mult+0xb0>)
 8008570:	f000 fe5e 	bl	8009230 <__assert_func>
 8008574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008578:	6004      	str	r4, [r0, #0]
 800857a:	60c4      	str	r4, [r0, #12]
 800857c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008584:	b94c      	cbnz	r4, 800859a <__pow5mult+0x66>
 8008586:	f240 2171 	movw	r1, #625	@ 0x271
 800858a:	4638      	mov	r0, r7
 800858c:	f7ff ff1a 	bl	80083c4 <__i2b>
 8008590:	2300      	movs	r3, #0
 8008592:	4604      	mov	r4, r0
 8008594:	f8c8 0008 	str.w	r0, [r8, #8]
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	07eb      	lsls	r3, r5, #31
 80085a0:	d50a      	bpl.n	80085b8 <__pow5mult+0x84>
 80085a2:	4631      	mov	r1, r6
 80085a4:	4622      	mov	r2, r4
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7ff ff22 	bl	80083f0 <__multiply>
 80085ac:	4680      	mov	r8, r0
 80085ae:	4631      	mov	r1, r6
 80085b0:	4638      	mov	r0, r7
 80085b2:	f7ff fe09 	bl	80081c8 <_Bfree>
 80085b6:	4646      	mov	r6, r8
 80085b8:	106d      	asrs	r5, r5, #1
 80085ba:	d00b      	beq.n	80085d4 <__pow5mult+0xa0>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	b938      	cbnz	r0, 80085d0 <__pow5mult+0x9c>
 80085c0:	4622      	mov	r2, r4
 80085c2:	4621      	mov	r1, r4
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ff13 	bl	80083f0 <__multiply>
 80085ca:	6020      	str	r0, [r4, #0]
 80085cc:	f8c0 9000 	str.w	r9, [r0]
 80085d0:	4604      	mov	r4, r0
 80085d2:	e7e4      	b.n	800859e <__pow5mult+0x6a>
 80085d4:	4630      	mov	r0, r6
 80085d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085da:	bf00      	nop
 80085dc:	0800c2d0 	.word	0x0800c2d0
 80085e0:	0800c174 	.word	0x0800c174
 80085e4:	0800c18b 	.word	0x0800c18b

080085e8 <__lshift>:
 80085e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	460c      	mov	r4, r1
 80085ee:	4607      	mov	r7, r0
 80085f0:	4691      	mov	r9, r2
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	6849      	ldr	r1, [r1, #4]
 80085f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008600:	f108 0601 	add.w	r6, r8, #1
 8008604:	42b3      	cmp	r3, r6
 8008606:	db0b      	blt.n	8008620 <__lshift+0x38>
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff fd9d 	bl	8008148 <_Balloc>
 800860e:	4605      	mov	r5, r0
 8008610:	b948      	cbnz	r0, 8008626 <__lshift+0x3e>
 8008612:	4602      	mov	r2, r0
 8008614:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008618:	4b27      	ldr	r3, [pc, #156]	@ (80086b8 <__lshift+0xd0>)
 800861a:	4828      	ldr	r0, [pc, #160]	@ (80086bc <__lshift+0xd4>)
 800861c:	f000 fe08 	bl	8009230 <__assert_func>
 8008620:	3101      	adds	r1, #1
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	e7ee      	b.n	8008604 <__lshift+0x1c>
 8008626:	2300      	movs	r3, #0
 8008628:	f100 0114 	add.w	r1, r0, #20
 800862c:	f100 0210 	add.w	r2, r0, #16
 8008630:	4618      	mov	r0, r3
 8008632:	4553      	cmp	r3, sl
 8008634:	db33      	blt.n	800869e <__lshift+0xb6>
 8008636:	6920      	ldr	r0, [r4, #16]
 8008638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800863c:	f104 0314 	add.w	r3, r4, #20
 8008640:	f019 091f 	ands.w	r9, r9, #31
 8008644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800864c:	d02b      	beq.n	80086a6 <__lshift+0xbe>
 800864e:	468a      	mov	sl, r1
 8008650:	2200      	movs	r2, #0
 8008652:	f1c9 0e20 	rsb	lr, r9, #32
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	fa00 f009 	lsl.w	r0, r0, r9
 800865c:	4310      	orrs	r0, r2
 800865e:	f84a 0b04 	str.w	r0, [sl], #4
 8008662:	f853 2b04 	ldr.w	r2, [r3], #4
 8008666:	459c      	cmp	ip, r3
 8008668:	fa22 f20e 	lsr.w	r2, r2, lr
 800866c:	d8f3      	bhi.n	8008656 <__lshift+0x6e>
 800866e:	ebac 0304 	sub.w	r3, ip, r4
 8008672:	3b15      	subs	r3, #21
 8008674:	f023 0303 	bic.w	r3, r3, #3
 8008678:	3304      	adds	r3, #4
 800867a:	f104 0015 	add.w	r0, r4, #21
 800867e:	4560      	cmp	r0, ip
 8008680:	bf88      	it	hi
 8008682:	2304      	movhi	r3, #4
 8008684:	50ca      	str	r2, [r1, r3]
 8008686:	b10a      	cbz	r2, 800868c <__lshift+0xa4>
 8008688:	f108 0602 	add.w	r6, r8, #2
 800868c:	3e01      	subs	r6, #1
 800868e:	4638      	mov	r0, r7
 8008690:	4621      	mov	r1, r4
 8008692:	612e      	str	r6, [r5, #16]
 8008694:	f7ff fd98 	bl	80081c8 <_Bfree>
 8008698:	4628      	mov	r0, r5
 800869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869e:	f842 0f04 	str.w	r0, [r2, #4]!
 80086a2:	3301      	adds	r3, #1
 80086a4:	e7c5      	b.n	8008632 <__lshift+0x4a>
 80086a6:	3904      	subs	r1, #4
 80086a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ac:	459c      	cmp	ip, r3
 80086ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80086b2:	d8f9      	bhi.n	80086a8 <__lshift+0xc0>
 80086b4:	e7ea      	b.n	800868c <__lshift+0xa4>
 80086b6:	bf00      	nop
 80086b8:	0800c103 	.word	0x0800c103
 80086bc:	0800c18b 	.word	0x0800c18b

080086c0 <__mcmp>:
 80086c0:	4603      	mov	r3, r0
 80086c2:	690a      	ldr	r2, [r1, #16]
 80086c4:	6900      	ldr	r0, [r0, #16]
 80086c6:	b530      	push	{r4, r5, lr}
 80086c8:	1a80      	subs	r0, r0, r2
 80086ca:	d10e      	bne.n	80086ea <__mcmp+0x2a>
 80086cc:	3314      	adds	r3, #20
 80086ce:	3114      	adds	r1, #20
 80086d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086e0:	4295      	cmp	r5, r2
 80086e2:	d003      	beq.n	80086ec <__mcmp+0x2c>
 80086e4:	d205      	bcs.n	80086f2 <__mcmp+0x32>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	bd30      	pop	{r4, r5, pc}
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d3f3      	bcc.n	80086d8 <__mcmp+0x18>
 80086f0:	e7fb      	b.n	80086ea <__mcmp+0x2a>
 80086f2:	2001      	movs	r0, #1
 80086f4:	e7f9      	b.n	80086ea <__mcmp+0x2a>
	...

080086f8 <__mdiff>:
 80086f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4689      	mov	r9, r1
 80086fe:	4606      	mov	r6, r0
 8008700:	4611      	mov	r1, r2
 8008702:	4648      	mov	r0, r9
 8008704:	4614      	mov	r4, r2
 8008706:	f7ff ffdb 	bl	80086c0 <__mcmp>
 800870a:	1e05      	subs	r5, r0, #0
 800870c:	d112      	bne.n	8008734 <__mdiff+0x3c>
 800870e:	4629      	mov	r1, r5
 8008710:	4630      	mov	r0, r6
 8008712:	f7ff fd19 	bl	8008148 <_Balloc>
 8008716:	4602      	mov	r2, r0
 8008718:	b928      	cbnz	r0, 8008726 <__mdiff+0x2e>
 800871a:	f240 2137 	movw	r1, #567	@ 0x237
 800871e:	4b3e      	ldr	r3, [pc, #248]	@ (8008818 <__mdiff+0x120>)
 8008720:	483e      	ldr	r0, [pc, #248]	@ (800881c <__mdiff+0x124>)
 8008722:	f000 fd85 	bl	8009230 <__assert_func>
 8008726:	2301      	movs	r3, #1
 8008728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800872c:	4610      	mov	r0, r2
 800872e:	b003      	add	sp, #12
 8008730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	bfbc      	itt	lt
 8008736:	464b      	movlt	r3, r9
 8008738:	46a1      	movlt	r9, r4
 800873a:	4630      	mov	r0, r6
 800873c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008740:	bfba      	itte	lt
 8008742:	461c      	movlt	r4, r3
 8008744:	2501      	movlt	r5, #1
 8008746:	2500      	movge	r5, #0
 8008748:	f7ff fcfe 	bl	8008148 <_Balloc>
 800874c:	4602      	mov	r2, r0
 800874e:	b918      	cbnz	r0, 8008758 <__mdiff+0x60>
 8008750:	f240 2145 	movw	r1, #581	@ 0x245
 8008754:	4b30      	ldr	r3, [pc, #192]	@ (8008818 <__mdiff+0x120>)
 8008756:	e7e3      	b.n	8008720 <__mdiff+0x28>
 8008758:	f100 0b14 	add.w	fp, r0, #20
 800875c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008760:	f109 0310 	add.w	r3, r9, #16
 8008764:	60c5      	str	r5, [r0, #12]
 8008766:	f04f 0c00 	mov.w	ip, #0
 800876a:	f109 0514 	add.w	r5, r9, #20
 800876e:	46d9      	mov	r9, fp
 8008770:	6926      	ldr	r6, [r4, #16]
 8008772:	f104 0e14 	add.w	lr, r4, #20
 8008776:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800877a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008786:	f853 af04 	ldr.w	sl, [r3, #4]!
 800878a:	b281      	uxth	r1, r0
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	fa1f f38a 	uxth.w	r3, sl
 8008792:	1a5b      	subs	r3, r3, r1
 8008794:	0c00      	lsrs	r0, r0, #16
 8008796:	4463      	add	r3, ip
 8008798:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800879c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087a6:	4576      	cmp	r6, lr
 80087a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ac:	f849 3b04 	str.w	r3, [r9], #4
 80087b0:	d8e6      	bhi.n	8008780 <__mdiff+0x88>
 80087b2:	1b33      	subs	r3, r6, r4
 80087b4:	3b15      	subs	r3, #21
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	3415      	adds	r4, #21
 80087bc:	3304      	adds	r3, #4
 80087be:	42a6      	cmp	r6, r4
 80087c0:	bf38      	it	cc
 80087c2:	2304      	movcc	r3, #4
 80087c4:	441d      	add	r5, r3
 80087c6:	445b      	add	r3, fp
 80087c8:	461e      	mov	r6, r3
 80087ca:	462c      	mov	r4, r5
 80087cc:	4544      	cmp	r4, r8
 80087ce:	d30e      	bcc.n	80087ee <__mdiff+0xf6>
 80087d0:	f108 0103 	add.w	r1, r8, #3
 80087d4:	1b49      	subs	r1, r1, r5
 80087d6:	f021 0103 	bic.w	r1, r1, #3
 80087da:	3d03      	subs	r5, #3
 80087dc:	45a8      	cmp	r8, r5
 80087de:	bf38      	it	cc
 80087e0:	2100      	movcc	r1, #0
 80087e2:	440b      	add	r3, r1
 80087e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087e8:	b199      	cbz	r1, 8008812 <__mdiff+0x11a>
 80087ea:	6117      	str	r7, [r2, #16]
 80087ec:	e79e      	b.n	800872c <__mdiff+0x34>
 80087ee:	46e6      	mov	lr, ip
 80087f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80087f4:	fa1f fc81 	uxth.w	ip, r1
 80087f8:	44f4      	add	ip, lr
 80087fa:	0c08      	lsrs	r0, r1, #16
 80087fc:	4471      	add	r1, lr
 80087fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008802:	b289      	uxth	r1, r1
 8008804:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008808:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800880c:	f846 1b04 	str.w	r1, [r6], #4
 8008810:	e7dc      	b.n	80087cc <__mdiff+0xd4>
 8008812:	3f01      	subs	r7, #1
 8008814:	e7e6      	b.n	80087e4 <__mdiff+0xec>
 8008816:	bf00      	nop
 8008818:	0800c103 	.word	0x0800c103
 800881c:	0800c18b 	.word	0x0800c18b

08008820 <__ulp>:
 8008820:	4b0e      	ldr	r3, [pc, #56]	@ (800885c <__ulp+0x3c>)
 8008822:	400b      	ands	r3, r1
 8008824:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc08      	bgt.n	800883e <__ulp+0x1e>
 800882c:	425b      	negs	r3, r3
 800882e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008832:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008836:	da04      	bge.n	8008842 <__ulp+0x22>
 8008838:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800883c:	4113      	asrs	r3, r2
 800883e:	2200      	movs	r2, #0
 8008840:	e008      	b.n	8008854 <__ulp+0x34>
 8008842:	f1a2 0314 	sub.w	r3, r2, #20
 8008846:	2b1e      	cmp	r3, #30
 8008848:	bfd6      	itet	le
 800884a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800884e:	2201      	movgt	r2, #1
 8008850:	40da      	lsrle	r2, r3
 8008852:	2300      	movs	r3, #0
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	7ff00000 	.word	0x7ff00000

08008860 <__b2d>:
 8008860:	6902      	ldr	r2, [r0, #16]
 8008862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008864:	f100 0614 	add.w	r6, r0, #20
 8008868:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800886c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008870:	4f1e      	ldr	r7, [pc, #120]	@ (80088ec <__b2d+0x8c>)
 8008872:	4620      	mov	r0, r4
 8008874:	f7ff fd5a 	bl	800832c <__hi0bits>
 8008878:	4603      	mov	r3, r0
 800887a:	f1c0 0020 	rsb	r0, r0, #32
 800887e:	2b0a      	cmp	r3, #10
 8008880:	f1a2 0504 	sub.w	r5, r2, #4
 8008884:	6008      	str	r0, [r1, #0]
 8008886:	dc12      	bgt.n	80088ae <__b2d+0x4e>
 8008888:	42ae      	cmp	r6, r5
 800888a:	bf2c      	ite	cs
 800888c:	2200      	movcs	r2, #0
 800888e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008892:	f1c3 0c0b 	rsb	ip, r3, #11
 8008896:	3315      	adds	r3, #21
 8008898:	fa24 fe0c 	lsr.w	lr, r4, ip
 800889c:	fa04 f303 	lsl.w	r3, r4, r3
 80088a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80088a4:	ea4e 0107 	orr.w	r1, lr, r7
 80088a8:	431a      	orrs	r2, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ae:	42ae      	cmp	r6, r5
 80088b0:	bf36      	itet	cc
 80088b2:	f1a2 0508 	subcc.w	r5, r2, #8
 80088b6:	2200      	movcs	r2, #0
 80088b8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80088bc:	3b0b      	subs	r3, #11
 80088be:	d012      	beq.n	80088e6 <__b2d+0x86>
 80088c0:	f1c3 0720 	rsb	r7, r3, #32
 80088c4:	fa22 f107 	lsr.w	r1, r2, r7
 80088c8:	409c      	lsls	r4, r3
 80088ca:	430c      	orrs	r4, r1
 80088cc:	42b5      	cmp	r5, r6
 80088ce:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80088d2:	bf94      	ite	ls
 80088d4:	2400      	movls	r4, #0
 80088d6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80088da:	409a      	lsls	r2, r3
 80088dc:	40fc      	lsrs	r4, r7
 80088de:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80088e2:	4322      	orrs	r2, r4
 80088e4:	e7e1      	b.n	80088aa <__b2d+0x4a>
 80088e6:	ea44 0107 	orr.w	r1, r4, r7
 80088ea:	e7de      	b.n	80088aa <__b2d+0x4a>
 80088ec:	3ff00000 	.word	0x3ff00000

080088f0 <__d2b>:
 80088f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80088f4:	2101      	movs	r1, #1
 80088f6:	4690      	mov	r8, r2
 80088f8:	4699      	mov	r9, r3
 80088fa:	9e08      	ldr	r6, [sp, #32]
 80088fc:	f7ff fc24 	bl	8008148 <_Balloc>
 8008900:	4604      	mov	r4, r0
 8008902:	b930      	cbnz	r0, 8008912 <__d2b+0x22>
 8008904:	4602      	mov	r2, r0
 8008906:	f240 310f 	movw	r1, #783	@ 0x30f
 800890a:	4b23      	ldr	r3, [pc, #140]	@ (8008998 <__d2b+0xa8>)
 800890c:	4823      	ldr	r0, [pc, #140]	@ (800899c <__d2b+0xac>)
 800890e:	f000 fc8f 	bl	8009230 <__assert_func>
 8008912:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008916:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800891a:	b10d      	cbz	r5, 8008920 <__d2b+0x30>
 800891c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	f1b8 0300 	subs.w	r3, r8, #0
 8008926:	d024      	beq.n	8008972 <__d2b+0x82>
 8008928:	4668      	mov	r0, sp
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	f7ff fd1d 	bl	800836a <__lo0bits>
 8008930:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008934:	b1d8      	cbz	r0, 800896e <__d2b+0x7e>
 8008936:	f1c0 0320 	rsb	r3, r0, #32
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	430b      	orrs	r3, r1
 8008940:	40c2      	lsrs	r2, r0
 8008942:	6163      	str	r3, [r4, #20]
 8008944:	9201      	str	r2, [sp, #4]
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	bf0c      	ite	eq
 800894c:	2201      	moveq	r2, #1
 800894e:	2202      	movne	r2, #2
 8008950:	61a3      	str	r3, [r4, #24]
 8008952:	6122      	str	r2, [r4, #16]
 8008954:	b1ad      	cbz	r5, 8008982 <__d2b+0x92>
 8008956:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800895a:	4405      	add	r5, r0
 800895c:	6035      	str	r5, [r6, #0]
 800895e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	6018      	str	r0, [r3, #0]
 8008966:	4620      	mov	r0, r4
 8008968:	b002      	add	sp, #8
 800896a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800896e:	6161      	str	r1, [r4, #20]
 8008970:	e7e9      	b.n	8008946 <__d2b+0x56>
 8008972:	a801      	add	r0, sp, #4
 8008974:	f7ff fcf9 	bl	800836a <__lo0bits>
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	6163      	str	r3, [r4, #20]
 800897e:	3020      	adds	r0, #32
 8008980:	e7e7      	b.n	8008952 <__d2b+0x62>
 8008982:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008986:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800898a:	6030      	str	r0, [r6, #0]
 800898c:	6918      	ldr	r0, [r3, #16]
 800898e:	f7ff fccd 	bl	800832c <__hi0bits>
 8008992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008996:	e7e4      	b.n	8008962 <__d2b+0x72>
 8008998:	0800c103 	.word	0x0800c103
 800899c:	0800c18b 	.word	0x0800c18b

080089a0 <__ratio>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	b085      	sub	sp, #20
 80089a6:	e9cd 1000 	strd	r1, r0, [sp]
 80089aa:	a902      	add	r1, sp, #8
 80089ac:	f7ff ff58 	bl	8008860 <__b2d>
 80089b0:	468b      	mov	fp, r1
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	9800      	ldr	r0, [sp, #0]
 80089b8:	a903      	add	r1, sp, #12
 80089ba:	f7ff ff51 	bl	8008860 <__b2d>
 80089be:	460d      	mov	r5, r1
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	4689      	mov	r9, r1
 80089c4:	6919      	ldr	r1, [r3, #16]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	4604      	mov	r4, r0
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	4630      	mov	r0, r6
 80089ce:	1ac9      	subs	r1, r1, r3
 80089d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bfcd      	iteet	gt
 80089de:	463a      	movgt	r2, r7
 80089e0:	462a      	movle	r2, r5
 80089e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80089ea:	bfd8      	it	le
 80089ec:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80089f0:	464b      	mov	r3, r9
 80089f2:	4622      	mov	r2, r4
 80089f4:	4659      	mov	r1, fp
 80089f6:	f7f7 fe99 	bl	800072c <__aeabi_ddiv>
 80089fa:	b005      	add	sp, #20
 80089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a00 <__copybits>:
 8008a00:	3901      	subs	r1, #1
 8008a02:	b570      	push	{r4, r5, r6, lr}
 8008a04:	1149      	asrs	r1, r1, #5
 8008a06:	6914      	ldr	r4, [r2, #16]
 8008a08:	3101      	adds	r1, #1
 8008a0a:	f102 0314 	add.w	r3, r2, #20
 8008a0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a16:	1f05      	subs	r5, r0, #4
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d30c      	bcc.n	8008a36 <__copybits+0x36>
 8008a1c:	1aa3      	subs	r3, r4, r2
 8008a1e:	3b11      	subs	r3, #17
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	3211      	adds	r2, #17
 8008a26:	42a2      	cmp	r2, r4
 8008a28:	bf88      	it	hi
 8008a2a:	2300      	movhi	r3, #0
 8008a2c:	4418      	add	r0, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4288      	cmp	r0, r1
 8008a32:	d305      	bcc.n	8008a40 <__copybits+0x40>
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a3a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a3e:	e7eb      	b.n	8008a18 <__copybits+0x18>
 8008a40:	f840 3b04 	str.w	r3, [r0], #4
 8008a44:	e7f4      	b.n	8008a30 <__copybits+0x30>

08008a46 <__any_on>:
 8008a46:	f100 0214 	add.w	r2, r0, #20
 8008a4a:	6900      	ldr	r0, [r0, #16]
 8008a4c:	114b      	asrs	r3, r1, #5
 8008a4e:	4298      	cmp	r0, r3
 8008a50:	b510      	push	{r4, lr}
 8008a52:	db11      	blt.n	8008a78 <__any_on+0x32>
 8008a54:	dd0a      	ble.n	8008a6c <__any_on+0x26>
 8008a56:	f011 011f 	ands.w	r1, r1, #31
 8008a5a:	d007      	beq.n	8008a6c <__any_on+0x26>
 8008a5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a60:	fa24 f001 	lsr.w	r0, r4, r1
 8008a64:	fa00 f101 	lsl.w	r1, r0, r1
 8008a68:	428c      	cmp	r4, r1
 8008a6a:	d10b      	bne.n	8008a84 <__any_on+0x3e>
 8008a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d803      	bhi.n	8008a7c <__any_on+0x36>
 8008a74:	2000      	movs	r0, #0
 8008a76:	bd10      	pop	{r4, pc}
 8008a78:	4603      	mov	r3, r0
 8008a7a:	e7f7      	b.n	8008a6c <__any_on+0x26>
 8008a7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a80:	2900      	cmp	r1, #0
 8008a82:	d0f5      	beq.n	8008a70 <__any_on+0x2a>
 8008a84:	2001      	movs	r0, #1
 8008a86:	e7f6      	b.n	8008a76 <__any_on+0x30>

08008a88 <__ascii_wctomb>:
 8008a88:	4603      	mov	r3, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	b141      	cbz	r1, 8008aa0 <__ascii_wctomb+0x18>
 8008a8e:	2aff      	cmp	r2, #255	@ 0xff
 8008a90:	d904      	bls.n	8008a9c <__ascii_wctomb+0x14>
 8008a92:	228a      	movs	r2, #138	@ 0x8a
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	4770      	bx	lr
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	700a      	strb	r2, [r1, #0]
 8008aa0:	4770      	bx	lr

08008aa2 <__ssputs_r>:
 8008aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa6:	461f      	mov	r7, r3
 8008aa8:	688e      	ldr	r6, [r1, #8]
 8008aaa:	4682      	mov	sl, r0
 8008aac:	42be      	cmp	r6, r7
 8008aae:	460c      	mov	r4, r1
 8008ab0:	4690      	mov	r8, r2
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	d82d      	bhi.n	8008b12 <__ssputs_r+0x70>
 8008ab6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008abe:	d026      	beq.n	8008b0e <__ssputs_r+0x6c>
 8008ac0:	6965      	ldr	r5, [r4, #20]
 8008ac2:	6909      	ldr	r1, [r1, #16]
 8008ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ac8:	eba3 0901 	sub.w	r9, r3, r1
 8008acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ad0:	1c7b      	adds	r3, r7, #1
 8008ad2:	444b      	add	r3, r9
 8008ad4:	106d      	asrs	r5, r5, #1
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	bf38      	it	cc
 8008ada:	461d      	movcc	r5, r3
 8008adc:	0553      	lsls	r3, r2, #21
 8008ade:	d527      	bpl.n	8008b30 <__ssputs_r+0x8e>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7ff fa93 	bl	800800c <_malloc_r>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	b360      	cbz	r0, 8008b44 <__ssputs_r+0xa2>
 8008aea:	464a      	mov	r2, r9
 8008aec:	6921      	ldr	r1, [r4, #16]
 8008aee:	f7fe fed4 	bl	800789a <memcpy>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afc:	81a3      	strh	r3, [r4, #12]
 8008afe:	6126      	str	r6, [r4, #16]
 8008b00:	444e      	add	r6, r9
 8008b02:	6026      	str	r6, [r4, #0]
 8008b04:	463e      	mov	r6, r7
 8008b06:	6165      	str	r5, [r4, #20]
 8008b08:	eba5 0509 	sub.w	r5, r5, r9
 8008b0c:	60a5      	str	r5, [r4, #8]
 8008b0e:	42be      	cmp	r6, r7
 8008b10:	d900      	bls.n	8008b14 <__ssputs_r+0x72>
 8008b12:	463e      	mov	r6, r7
 8008b14:	4632      	mov	r2, r6
 8008b16:	4641      	mov	r1, r8
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	f000 fb51 	bl	80091c0 <memmove>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	68a3      	ldr	r3, [r4, #8]
 8008b22:	1b9b      	subs	r3, r3, r6
 8008b24:	60a3      	str	r3, [r4, #8]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	4433      	add	r3, r6
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	462a      	mov	r2, r5
 8008b32:	f000 fbb7 	bl	80092a4 <_realloc_r>
 8008b36:	4606      	mov	r6, r0
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d1e0      	bne.n	8008afe <__ssputs_r+0x5c>
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	6921      	ldr	r1, [r4, #16]
 8008b40:	f7fe fec0 	bl	80078c4 <_free_r>
 8008b44:	230c      	movs	r3, #12
 8008b46:	f8ca 3000 	str.w	r3, [sl]
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	e7e9      	b.n	8008b2c <__ssputs_r+0x8a>

08008b58 <_svfiprintf_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	4698      	mov	r8, r3
 8008b5e:	898b      	ldrh	r3, [r1, #12]
 8008b60:	4607      	mov	r7, r0
 8008b62:	061b      	lsls	r3, r3, #24
 8008b64:	460d      	mov	r5, r1
 8008b66:	4614      	mov	r4, r2
 8008b68:	b09d      	sub	sp, #116	@ 0x74
 8008b6a:	d510      	bpl.n	8008b8e <_svfiprintf_r+0x36>
 8008b6c:	690b      	ldr	r3, [r1, #16]
 8008b6e:	b973      	cbnz	r3, 8008b8e <_svfiprintf_r+0x36>
 8008b70:	2140      	movs	r1, #64	@ 0x40
 8008b72:	f7ff fa4b 	bl	800800c <_malloc_r>
 8008b76:	6028      	str	r0, [r5, #0]
 8008b78:	6128      	str	r0, [r5, #16]
 8008b7a:	b930      	cbnz	r0, 8008b8a <_svfiprintf_r+0x32>
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	b01d      	add	sp, #116	@ 0x74
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	2340      	movs	r3, #64	@ 0x40
 8008b8c:	616b      	str	r3, [r5, #20]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b92:	2320      	movs	r3, #32
 8008b94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b98:	2330      	movs	r3, #48	@ 0x30
 8008b9a:	f04f 0901 	mov.w	r9, #1
 8008b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008d3c <_svfiprintf_r+0x1e4>
 8008ba6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008baa:	4623      	mov	r3, r4
 8008bac:	469a      	mov	sl, r3
 8008bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bb2:	b10a      	cbz	r2, 8008bb8 <_svfiprintf_r+0x60>
 8008bb4:	2a25      	cmp	r2, #37	@ 0x25
 8008bb6:	d1f9      	bne.n	8008bac <_svfiprintf_r+0x54>
 8008bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bbc:	d00b      	beq.n	8008bd6 <_svfiprintf_r+0x7e>
 8008bbe:	465b      	mov	r3, fp
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	f7ff ff6c 	bl	8008aa2 <__ssputs_r>
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f000 80a7 	beq.w	8008d1e <_svfiprintf_r+0x1c6>
 8008bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bd2:	445a      	add	r2, fp
 8008bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 809f 	beq.w	8008d1e <_svfiprintf_r+0x1c6>
 8008be0:	2300      	movs	r3, #0
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bea:	f10a 0a01 	add.w	sl, sl, #1
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	9307      	str	r3, [sp, #28]
 8008bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bf8:	4654      	mov	r4, sl
 8008bfa:	2205      	movs	r2, #5
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	484e      	ldr	r0, [pc, #312]	@ (8008d3c <_svfiprintf_r+0x1e4>)
 8008c02:	f000 fb07 	bl	8009214 <memchr>
 8008c06:	9a04      	ldr	r2, [sp, #16]
 8008c08:	b9d8      	cbnz	r0, 8008c42 <_svfiprintf_r+0xea>
 8008c0a:	06d0      	lsls	r0, r2, #27
 8008c0c:	bf44      	itt	mi
 8008c0e:	2320      	movmi	r3, #32
 8008c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c14:	0711      	lsls	r1, r2, #28
 8008c16:	bf44      	itt	mi
 8008c18:	232b      	movmi	r3, #43	@ 0x2b
 8008c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c24:	d015      	beq.n	8008c52 <_svfiprintf_r+0xfa>
 8008c26:	4654      	mov	r4, sl
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f04f 0c0a 	mov.w	ip, #10
 8008c2e:	9a07      	ldr	r2, [sp, #28]
 8008c30:	4621      	mov	r1, r4
 8008c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c36:	3b30      	subs	r3, #48	@ 0x30
 8008c38:	2b09      	cmp	r3, #9
 8008c3a:	d94b      	bls.n	8008cd4 <_svfiprintf_r+0x17c>
 8008c3c:	b1b0      	cbz	r0, 8008c6c <_svfiprintf_r+0x114>
 8008c3e:	9207      	str	r2, [sp, #28]
 8008c40:	e014      	b.n	8008c6c <_svfiprintf_r+0x114>
 8008c42:	eba0 0308 	sub.w	r3, r0, r8
 8008c46:	fa09 f303 	lsl.w	r3, r9, r3
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	46a2      	mov	sl, r4
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	e7d2      	b.n	8008bf8 <_svfiprintf_r+0xa0>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	1d19      	adds	r1, r3, #4
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	9103      	str	r1, [sp, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bfbb      	ittet	lt
 8008c5e:	425b      	neglt	r3, r3
 8008c60:	f042 0202 	orrlt.w	r2, r2, #2
 8008c64:	9307      	strge	r3, [sp, #28]
 8008c66:	9307      	strlt	r3, [sp, #28]
 8008c68:	bfb8      	it	lt
 8008c6a:	9204      	strlt	r2, [sp, #16]
 8008c6c:	7823      	ldrb	r3, [r4, #0]
 8008c6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c70:	d10a      	bne.n	8008c88 <_svfiprintf_r+0x130>
 8008c72:	7863      	ldrb	r3, [r4, #1]
 8008c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c76:	d132      	bne.n	8008cde <_svfiprintf_r+0x186>
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	3402      	adds	r4, #2
 8008c7c:	1d1a      	adds	r2, r3, #4
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	9203      	str	r2, [sp, #12]
 8008c82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c86:	9305      	str	r3, [sp, #20]
 8008c88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008d40 <_svfiprintf_r+0x1e8>
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	4650      	mov	r0, sl
 8008c90:	7821      	ldrb	r1, [r4, #0]
 8008c92:	f000 fabf 	bl	8009214 <memchr>
 8008c96:	b138      	cbz	r0, 8008ca8 <_svfiprintf_r+0x150>
 8008c98:	2240      	movs	r2, #64	@ 0x40
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ca0:	4082      	lsls	r2, r0
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	3401      	adds	r4, #1
 8008ca6:	9304      	str	r3, [sp, #16]
 8008ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cac:	2206      	movs	r2, #6
 8008cae:	4825      	ldr	r0, [pc, #148]	@ (8008d44 <_svfiprintf_r+0x1ec>)
 8008cb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cb4:	f000 faae 	bl	8009214 <memchr>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d036      	beq.n	8008d2a <_svfiprintf_r+0x1d2>
 8008cbc:	4b22      	ldr	r3, [pc, #136]	@ (8008d48 <_svfiprintf_r+0x1f0>)
 8008cbe:	bb1b      	cbnz	r3, 8008d08 <_svfiprintf_r+0x1b0>
 8008cc0:	9b03      	ldr	r3, [sp, #12]
 8008cc2:	3307      	adds	r3, #7
 8008cc4:	f023 0307 	bic.w	r3, r3, #7
 8008cc8:	3308      	adds	r3, #8
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cce:	4433      	add	r3, r6
 8008cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd2:	e76a      	b.n	8008baa <_svfiprintf_r+0x52>
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cdc:	e7a8      	b.n	8008c30 <_svfiprintf_r+0xd8>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f04f 0c0a 	mov.w	ip, #10
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	9305      	str	r3, [sp, #20]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cf0:	3a30      	subs	r2, #48	@ 0x30
 8008cf2:	2a09      	cmp	r2, #9
 8008cf4:	d903      	bls.n	8008cfe <_svfiprintf_r+0x1a6>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0c6      	beq.n	8008c88 <_svfiprintf_r+0x130>
 8008cfa:	9105      	str	r1, [sp, #20]
 8008cfc:	e7c4      	b.n	8008c88 <_svfiprintf_r+0x130>
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2301      	movs	r3, #1
 8008d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d06:	e7f0      	b.n	8008cea <_svfiprintf_r+0x192>
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	462a      	mov	r2, r5
 8008d0e:	4638      	mov	r0, r7
 8008d10:	4b0e      	ldr	r3, [pc, #56]	@ (8008d4c <_svfiprintf_r+0x1f4>)
 8008d12:	a904      	add	r1, sp, #16
 8008d14:	f3af 8000 	nop.w
 8008d18:	1c42      	adds	r2, r0, #1
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	d1d6      	bne.n	8008ccc <_svfiprintf_r+0x174>
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	065b      	lsls	r3, r3, #25
 8008d22:	f53f af2d 	bmi.w	8008b80 <_svfiprintf_r+0x28>
 8008d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d28:	e72c      	b.n	8008b84 <_svfiprintf_r+0x2c>
 8008d2a:	ab03      	add	r3, sp, #12
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4638      	mov	r0, r7
 8008d32:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <_svfiprintf_r+0x1f4>)
 8008d34:	a904      	add	r1, sp, #16
 8008d36:	f000 f87d 	bl	8008e34 <_printf_i>
 8008d3a:	e7ed      	b.n	8008d18 <_svfiprintf_r+0x1c0>
 8008d3c:	0800c1e4 	.word	0x0800c1e4
 8008d40:	0800c1ea 	.word	0x0800c1ea
 8008d44:	0800c1ee 	.word	0x0800c1ee
 8008d48:	00000000 	.word	0x00000000
 8008d4c:	08008aa3 	.word	0x08008aa3

08008d50 <_printf_common>:
 8008d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	4616      	mov	r6, r2
 8008d56:	4698      	mov	r8, r3
 8008d58:	688a      	ldr	r2, [r1, #8]
 8008d5a:	690b      	ldr	r3, [r1, #16]
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	bfb8      	it	lt
 8008d62:	4613      	movlt	r3, r2
 8008d64:	6033      	str	r3, [r6, #0]
 8008d66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d70:	b10a      	cbz	r2, 8008d76 <_printf_common+0x26>
 8008d72:	3301      	adds	r3, #1
 8008d74:	6033      	str	r3, [r6, #0]
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	0699      	lsls	r1, r3, #26
 8008d7a:	bf42      	ittt	mi
 8008d7c:	6833      	ldrmi	r3, [r6, #0]
 8008d7e:	3302      	addmi	r3, #2
 8008d80:	6033      	strmi	r3, [r6, #0]
 8008d82:	6825      	ldr	r5, [r4, #0]
 8008d84:	f015 0506 	ands.w	r5, r5, #6
 8008d88:	d106      	bne.n	8008d98 <_printf_common+0x48>
 8008d8a:	f104 0a19 	add.w	sl, r4, #25
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	6832      	ldr	r2, [r6, #0]
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dc2b      	bgt.n	8008df0 <_printf_common+0xa0>
 8008d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	3b00      	subs	r3, #0
 8008da0:	bf18      	it	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	0692      	lsls	r2, r2, #26
 8008da6:	d430      	bmi.n	8008e0a <_printf_common+0xba>
 8008da8:	4641      	mov	r1, r8
 8008daa:	4638      	mov	r0, r7
 8008dac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008db0:	47c8      	blx	r9
 8008db2:	3001      	adds	r0, #1
 8008db4:	d023      	beq.n	8008dfe <_printf_common+0xae>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	6922      	ldr	r2, [r4, #16]
 8008dba:	f003 0306 	and.w	r3, r3, #6
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	bf14      	ite	ne
 8008dc2:	2500      	movne	r5, #0
 8008dc4:	6833      	ldreq	r3, [r6, #0]
 8008dc6:	f04f 0600 	mov.w	r6, #0
 8008dca:	bf08      	it	eq
 8008dcc:	68e5      	ldreq	r5, [r4, #12]
 8008dce:	f104 041a 	add.w	r4, r4, #26
 8008dd2:	bf08      	it	eq
 8008dd4:	1aed      	subeq	r5, r5, r3
 8008dd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008dda:	bf08      	it	eq
 8008ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008de0:	4293      	cmp	r3, r2
 8008de2:	bfc4      	itt	gt
 8008de4:	1a9b      	subgt	r3, r3, r2
 8008de6:	18ed      	addgt	r5, r5, r3
 8008de8:	42b5      	cmp	r5, r6
 8008dea:	d11a      	bne.n	8008e22 <_printf_common+0xd2>
 8008dec:	2000      	movs	r0, #0
 8008dee:	e008      	b.n	8008e02 <_printf_common+0xb2>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4652      	mov	r2, sl
 8008df4:	4641      	mov	r1, r8
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c8      	blx	r9
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d103      	bne.n	8008e06 <_printf_common+0xb6>
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	3501      	adds	r5, #1
 8008e08:	e7c1      	b.n	8008d8e <_printf_common+0x3e>
 8008e0a:	2030      	movs	r0, #48	@ 0x30
 8008e0c:	18e1      	adds	r1, r4, r3
 8008e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e18:	4422      	add	r2, r4
 8008e1a:	3302      	adds	r3, #2
 8008e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e20:	e7c2      	b.n	8008da8 <_printf_common+0x58>
 8008e22:	2301      	movs	r3, #1
 8008e24:	4622      	mov	r2, r4
 8008e26:	4641      	mov	r1, r8
 8008e28:	4638      	mov	r0, r7
 8008e2a:	47c8      	blx	r9
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d0e6      	beq.n	8008dfe <_printf_common+0xae>
 8008e30:	3601      	adds	r6, #1
 8008e32:	e7d9      	b.n	8008de8 <_printf_common+0x98>

08008e34 <_printf_i>:
 8008e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	7e0f      	ldrb	r7, [r1, #24]
 8008e3a:	4691      	mov	r9, r2
 8008e3c:	2f78      	cmp	r7, #120	@ 0x78
 8008e3e:	4680      	mov	r8, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	469a      	mov	sl, r3
 8008e44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e4a:	d807      	bhi.n	8008e5c <_printf_i+0x28>
 8008e4c:	2f62      	cmp	r7, #98	@ 0x62
 8008e4e:	d80a      	bhi.n	8008e66 <_printf_i+0x32>
 8008e50:	2f00      	cmp	r7, #0
 8008e52:	f000 80d1 	beq.w	8008ff8 <_printf_i+0x1c4>
 8008e56:	2f58      	cmp	r7, #88	@ 0x58
 8008e58:	f000 80b8 	beq.w	8008fcc <_printf_i+0x198>
 8008e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e64:	e03a      	b.n	8008edc <_printf_i+0xa8>
 8008e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e6a:	2b15      	cmp	r3, #21
 8008e6c:	d8f6      	bhi.n	8008e5c <_printf_i+0x28>
 8008e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e74 <_printf_i+0x40>)
 8008e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e74:	08008ecd 	.word	0x08008ecd
 8008e78:	08008ee1 	.word	0x08008ee1
 8008e7c:	08008e5d 	.word	0x08008e5d
 8008e80:	08008e5d 	.word	0x08008e5d
 8008e84:	08008e5d 	.word	0x08008e5d
 8008e88:	08008e5d 	.word	0x08008e5d
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008e5d 	.word	0x08008e5d
 8008e94:	08008e5d 	.word	0x08008e5d
 8008e98:	08008e5d 	.word	0x08008e5d
 8008e9c:	08008e5d 	.word	0x08008e5d
 8008ea0:	08008fdf 	.word	0x08008fdf
 8008ea4:	08008f0b 	.word	0x08008f0b
 8008ea8:	08008f99 	.word	0x08008f99
 8008eac:	08008e5d 	.word	0x08008e5d
 8008eb0:	08008e5d 	.word	0x08008e5d
 8008eb4:	08009001 	.word	0x08009001
 8008eb8:	08008e5d 	.word	0x08008e5d
 8008ebc:	08008f0b 	.word	0x08008f0b
 8008ec0:	08008e5d 	.word	0x08008e5d
 8008ec4:	08008e5d 	.word	0x08008e5d
 8008ec8:	08008fa1 	.word	0x08008fa1
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	1d1a      	adds	r2, r3, #4
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6032      	str	r2, [r6, #0]
 8008ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008edc:	2301      	movs	r3, #1
 8008ede:	e09c      	b.n	800901a <_printf_i+0x1e6>
 8008ee0:	6833      	ldr	r3, [r6, #0]
 8008ee2:	6820      	ldr	r0, [r4, #0]
 8008ee4:	1d19      	adds	r1, r3, #4
 8008ee6:	6031      	str	r1, [r6, #0]
 8008ee8:	0606      	lsls	r6, r0, #24
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0xbc>
 8008eec:	681d      	ldr	r5, [r3, #0]
 8008eee:	e003      	b.n	8008ef8 <_printf_i+0xc4>
 8008ef0:	0645      	lsls	r5, r0, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0xb8>
 8008ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	da03      	bge.n	8008f04 <_printf_i+0xd0>
 8008efc:	232d      	movs	r3, #45	@ 0x2d
 8008efe:	426d      	negs	r5, r5
 8008f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f04:	230a      	movs	r3, #10
 8008f06:	4858      	ldr	r0, [pc, #352]	@ (8009068 <_printf_i+0x234>)
 8008f08:	e011      	b.n	8008f2e <_printf_i+0xfa>
 8008f0a:	6821      	ldr	r1, [r4, #0]
 8008f0c:	6833      	ldr	r3, [r6, #0]
 8008f0e:	0608      	lsls	r0, r1, #24
 8008f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f14:	d402      	bmi.n	8008f1c <_printf_i+0xe8>
 8008f16:	0649      	lsls	r1, r1, #25
 8008f18:	bf48      	it	mi
 8008f1a:	b2ad      	uxthmi	r5, r5
 8008f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f1e:	6033      	str	r3, [r6, #0]
 8008f20:	bf14      	ite	ne
 8008f22:	230a      	movne	r3, #10
 8008f24:	2308      	moveq	r3, #8
 8008f26:	4850      	ldr	r0, [pc, #320]	@ (8009068 <_printf_i+0x234>)
 8008f28:	2100      	movs	r1, #0
 8008f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f2e:	6866      	ldr	r6, [r4, #4]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	60a6      	str	r6, [r4, #8]
 8008f34:	db05      	blt.n	8008f42 <_printf_i+0x10e>
 8008f36:	6821      	ldr	r1, [r4, #0]
 8008f38:	432e      	orrs	r6, r5
 8008f3a:	f021 0104 	bic.w	r1, r1, #4
 8008f3e:	6021      	str	r1, [r4, #0]
 8008f40:	d04b      	beq.n	8008fda <_printf_i+0x1a6>
 8008f42:	4616      	mov	r6, r2
 8008f44:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f48:	fb03 5711 	mls	r7, r3, r1, r5
 8008f4c:	5dc7      	ldrb	r7, [r0, r7]
 8008f4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f52:	462f      	mov	r7, r5
 8008f54:	42bb      	cmp	r3, r7
 8008f56:	460d      	mov	r5, r1
 8008f58:	d9f4      	bls.n	8008f44 <_printf_i+0x110>
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	d10b      	bne.n	8008f76 <_printf_i+0x142>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	07df      	lsls	r7, r3, #31
 8008f62:	d508      	bpl.n	8008f76 <_printf_i+0x142>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	6861      	ldr	r1, [r4, #4]
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	bfde      	ittt	le
 8008f6c:	2330      	movle	r3, #48	@ 0x30
 8008f6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f76:	1b92      	subs	r2, r2, r6
 8008f78:	6122      	str	r2, [r4, #16]
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	4640      	mov	r0, r8
 8008f80:	f8cd a000 	str.w	sl, [sp]
 8008f84:	aa03      	add	r2, sp, #12
 8008f86:	f7ff fee3 	bl	8008d50 <_printf_common>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d14a      	bne.n	8009024 <_printf_i+0x1f0>
 8008f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f92:	b004      	add	sp, #16
 8008f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	f043 0320 	orr.w	r3, r3, #32
 8008f9e:	6023      	str	r3, [r4, #0]
 8008fa0:	2778      	movs	r7, #120	@ 0x78
 8008fa2:	4832      	ldr	r0, [pc, #200]	@ (800906c <_printf_i+0x238>)
 8008fa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	6831      	ldr	r1, [r6, #0]
 8008fac:	061f      	lsls	r7, r3, #24
 8008fae:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fb2:	d402      	bmi.n	8008fba <_printf_i+0x186>
 8008fb4:	065f      	lsls	r7, r3, #25
 8008fb6:	bf48      	it	mi
 8008fb8:	b2ad      	uxthmi	r5, r5
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	07d9      	lsls	r1, r3, #31
 8008fbe:	bf44      	itt	mi
 8008fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc4:	6023      	strmi	r3, [r4, #0]
 8008fc6:	b11d      	cbz	r5, 8008fd0 <_printf_i+0x19c>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	e7ad      	b.n	8008f28 <_printf_i+0xf4>
 8008fcc:	4826      	ldr	r0, [pc, #152]	@ (8009068 <_printf_i+0x234>)
 8008fce:	e7e9      	b.n	8008fa4 <_printf_i+0x170>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	f023 0320 	bic.w	r3, r3, #32
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	e7f6      	b.n	8008fc8 <_printf_i+0x194>
 8008fda:	4616      	mov	r6, r2
 8008fdc:	e7bd      	b.n	8008f5a <_printf_i+0x126>
 8008fde:	6833      	ldr	r3, [r6, #0]
 8008fe0:	6825      	ldr	r5, [r4, #0]
 8008fe2:	1d18      	adds	r0, r3, #4
 8008fe4:	6961      	ldr	r1, [r4, #20]
 8008fe6:	6030      	str	r0, [r6, #0]
 8008fe8:	062e      	lsls	r6, r5, #24
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	d501      	bpl.n	8008ff2 <_printf_i+0x1be>
 8008fee:	6019      	str	r1, [r3, #0]
 8008ff0:	e002      	b.n	8008ff8 <_printf_i+0x1c4>
 8008ff2:	0668      	lsls	r0, r5, #25
 8008ff4:	d5fb      	bpl.n	8008fee <_printf_i+0x1ba>
 8008ff6:	8019      	strh	r1, [r3, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	e7bc      	b.n	8008f7a <_printf_i+0x146>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	2100      	movs	r1, #0
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	6032      	str	r2, [r6, #0]
 8009008:	681e      	ldr	r6, [r3, #0]
 800900a:	6862      	ldr	r2, [r4, #4]
 800900c:	4630      	mov	r0, r6
 800900e:	f000 f901 	bl	8009214 <memchr>
 8009012:	b108      	cbz	r0, 8009018 <_printf_i+0x1e4>
 8009014:	1b80      	subs	r0, r0, r6
 8009016:	6060      	str	r0, [r4, #4]
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	2300      	movs	r3, #0
 800901e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009022:	e7aa      	b.n	8008f7a <_printf_i+0x146>
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	47d0      	blx	sl
 800902e:	3001      	adds	r0, #1
 8009030:	d0ad      	beq.n	8008f8e <_printf_i+0x15a>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	079b      	lsls	r3, r3, #30
 8009036:	d413      	bmi.n	8009060 <_printf_i+0x22c>
 8009038:	68e0      	ldr	r0, [r4, #12]
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	4298      	cmp	r0, r3
 800903e:	bfb8      	it	lt
 8009040:	4618      	movlt	r0, r3
 8009042:	e7a6      	b.n	8008f92 <_printf_i+0x15e>
 8009044:	2301      	movs	r3, #1
 8009046:	4632      	mov	r2, r6
 8009048:	4649      	mov	r1, r9
 800904a:	4640      	mov	r0, r8
 800904c:	47d0      	blx	sl
 800904e:	3001      	adds	r0, #1
 8009050:	d09d      	beq.n	8008f8e <_printf_i+0x15a>
 8009052:	3501      	adds	r5, #1
 8009054:	68e3      	ldr	r3, [r4, #12]
 8009056:	9903      	ldr	r1, [sp, #12]
 8009058:	1a5b      	subs	r3, r3, r1
 800905a:	42ab      	cmp	r3, r5
 800905c:	dcf2      	bgt.n	8009044 <_printf_i+0x210>
 800905e:	e7eb      	b.n	8009038 <_printf_i+0x204>
 8009060:	2500      	movs	r5, #0
 8009062:	f104 0619 	add.w	r6, r4, #25
 8009066:	e7f5      	b.n	8009054 <_printf_i+0x220>
 8009068:	0800c1f5 	.word	0x0800c1f5
 800906c:	0800c206 	.word	0x0800c206

08009070 <__sflush_r>:
 8009070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	0716      	lsls	r6, r2, #28
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	d454      	bmi.n	8009128 <__sflush_r+0xb8>
 800907e:	684b      	ldr	r3, [r1, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	dc02      	bgt.n	800908a <__sflush_r+0x1a>
 8009084:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	dd48      	ble.n	800911c <__sflush_r+0xac>
 800908a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800908c:	2e00      	cmp	r6, #0
 800908e:	d045      	beq.n	800911c <__sflush_r+0xac>
 8009090:	2300      	movs	r3, #0
 8009092:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009096:	682f      	ldr	r7, [r5, #0]
 8009098:	6a21      	ldr	r1, [r4, #32]
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	d030      	beq.n	8009100 <__sflush_r+0x90>
 800909e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	0759      	lsls	r1, r3, #29
 80090a4:	d505      	bpl.n	80090b2 <__sflush_r+0x42>
 80090a6:	6863      	ldr	r3, [r4, #4]
 80090a8:	1ad2      	subs	r2, r2, r3
 80090aa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090ac:	b10b      	cbz	r3, 80090b2 <__sflush_r+0x42>
 80090ae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090b0:	1ad2      	subs	r2, r2, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	4628      	mov	r0, r5
 80090b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b8:	6a21      	ldr	r1, [r4, #32]
 80090ba:	47b0      	blx	r6
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	d106      	bne.n	80090d0 <__sflush_r+0x60>
 80090c2:	6829      	ldr	r1, [r5, #0]
 80090c4:	291d      	cmp	r1, #29
 80090c6:	d82b      	bhi.n	8009120 <__sflush_r+0xb0>
 80090c8:	4a28      	ldr	r2, [pc, #160]	@ (800916c <__sflush_r+0xfc>)
 80090ca:	40ca      	lsrs	r2, r1
 80090cc:	07d6      	lsls	r6, r2, #31
 80090ce:	d527      	bpl.n	8009120 <__sflush_r+0xb0>
 80090d0:	2200      	movs	r2, #0
 80090d2:	6062      	str	r2, [r4, #4]
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	04d9      	lsls	r1, r3, #19
 80090d8:	6022      	str	r2, [r4, #0]
 80090da:	d504      	bpl.n	80090e6 <__sflush_r+0x76>
 80090dc:	1c42      	adds	r2, r0, #1
 80090de:	d101      	bne.n	80090e4 <__sflush_r+0x74>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b903      	cbnz	r3, 80090e6 <__sflush_r+0x76>
 80090e4:	6560      	str	r0, [r4, #84]	@ 0x54
 80090e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090e8:	602f      	str	r7, [r5, #0]
 80090ea:	b1b9      	cbz	r1, 800911c <__sflush_r+0xac>
 80090ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f0:	4299      	cmp	r1, r3
 80090f2:	d002      	beq.n	80090fa <__sflush_r+0x8a>
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7fe fbe5 	bl	80078c4 <_free_r>
 80090fa:	2300      	movs	r3, #0
 80090fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80090fe:	e00d      	b.n	800911c <__sflush_r+0xac>
 8009100:	2301      	movs	r3, #1
 8009102:	4628      	mov	r0, r5
 8009104:	47b0      	blx	r6
 8009106:	4602      	mov	r2, r0
 8009108:	1c50      	adds	r0, r2, #1
 800910a:	d1c9      	bne.n	80090a0 <__sflush_r+0x30>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0c6      	beq.n	80090a0 <__sflush_r+0x30>
 8009112:	2b1d      	cmp	r3, #29
 8009114:	d001      	beq.n	800911a <__sflush_r+0xaa>
 8009116:	2b16      	cmp	r3, #22
 8009118:	d11d      	bne.n	8009156 <__sflush_r+0xe6>
 800911a:	602f      	str	r7, [r5, #0]
 800911c:	2000      	movs	r0, #0
 800911e:	e021      	b.n	8009164 <__sflush_r+0xf4>
 8009120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009124:	b21b      	sxth	r3, r3
 8009126:	e01a      	b.n	800915e <__sflush_r+0xee>
 8009128:	690f      	ldr	r7, [r1, #16]
 800912a:	2f00      	cmp	r7, #0
 800912c:	d0f6      	beq.n	800911c <__sflush_r+0xac>
 800912e:	0793      	lsls	r3, r2, #30
 8009130:	bf18      	it	ne
 8009132:	2300      	movne	r3, #0
 8009134:	680e      	ldr	r6, [r1, #0]
 8009136:	bf08      	it	eq
 8009138:	694b      	ldreq	r3, [r1, #20]
 800913a:	1bf6      	subs	r6, r6, r7
 800913c:	600f      	str	r7, [r1, #0]
 800913e:	608b      	str	r3, [r1, #8]
 8009140:	2e00      	cmp	r6, #0
 8009142:	ddeb      	ble.n	800911c <__sflush_r+0xac>
 8009144:	4633      	mov	r3, r6
 8009146:	463a      	mov	r2, r7
 8009148:	4628      	mov	r0, r5
 800914a:	6a21      	ldr	r1, [r4, #32]
 800914c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009150:	47e0      	blx	ip
 8009152:	2800      	cmp	r0, #0
 8009154:	dc07      	bgt.n	8009166 <__sflush_r+0xf6>
 8009156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800915a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	81a3      	strh	r3, [r4, #12]
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009166:	4407      	add	r7, r0
 8009168:	1a36      	subs	r6, r6, r0
 800916a:	e7e9      	b.n	8009140 <__sflush_r+0xd0>
 800916c:	20400001 	.word	0x20400001

08009170 <_fflush_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	b913      	cbnz	r3, 8009180 <_fflush_r+0x10>
 800917a:	2500      	movs	r5, #0
 800917c:	4628      	mov	r0, r5
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	b118      	cbz	r0, 800918a <_fflush_r+0x1a>
 8009182:	6a03      	ldr	r3, [r0, #32]
 8009184:	b90b      	cbnz	r3, 800918a <_fflush_r+0x1a>
 8009186:	f7fe fa0f 	bl	80075a8 <__sinit>
 800918a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f3      	beq.n	800917a <_fflush_r+0xa>
 8009192:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009194:	07d0      	lsls	r0, r2, #31
 8009196:	d404      	bmi.n	80091a2 <_fflush_r+0x32>
 8009198:	0599      	lsls	r1, r3, #22
 800919a:	d402      	bmi.n	80091a2 <_fflush_r+0x32>
 800919c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800919e:	f7fe fb72 	bl	8007886 <__retarget_lock_acquire_recursive>
 80091a2:	4628      	mov	r0, r5
 80091a4:	4621      	mov	r1, r4
 80091a6:	f7ff ff63 	bl	8009070 <__sflush_r>
 80091aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091ac:	4605      	mov	r5, r0
 80091ae:	07da      	lsls	r2, r3, #31
 80091b0:	d4e4      	bmi.n	800917c <_fflush_r+0xc>
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	059b      	lsls	r3, r3, #22
 80091b6:	d4e1      	bmi.n	800917c <_fflush_r+0xc>
 80091b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ba:	f7fe fb65 	bl	8007888 <__retarget_lock_release_recursive>
 80091be:	e7dd      	b.n	800917c <_fflush_r+0xc>

080091c0 <memmove>:
 80091c0:	4288      	cmp	r0, r1
 80091c2:	b510      	push	{r4, lr}
 80091c4:	eb01 0402 	add.w	r4, r1, r2
 80091c8:	d902      	bls.n	80091d0 <memmove+0x10>
 80091ca:	4284      	cmp	r4, r0
 80091cc:	4623      	mov	r3, r4
 80091ce:	d807      	bhi.n	80091e0 <memmove+0x20>
 80091d0:	1e43      	subs	r3, r0, #1
 80091d2:	42a1      	cmp	r1, r4
 80091d4:	d008      	beq.n	80091e8 <memmove+0x28>
 80091d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091de:	e7f8      	b.n	80091d2 <memmove+0x12>
 80091e0:	4601      	mov	r1, r0
 80091e2:	4402      	add	r2, r0
 80091e4:	428a      	cmp	r2, r1
 80091e6:	d100      	bne.n	80091ea <memmove+0x2a>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091f2:	e7f7      	b.n	80091e4 <memmove+0x24>

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	2300      	movs	r3, #0
 80091f8:	4d05      	ldr	r5, [pc, #20]	@ (8009210 <_sbrk_r+0x1c>)
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7fa fa4e 	bl	80036a0 <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	200049e0 	.word	0x200049e0

08009214 <memchr>:
 8009214:	4603      	mov	r3, r0
 8009216:	b510      	push	{r4, lr}
 8009218:	b2c9      	uxtb	r1, r1
 800921a:	4402      	add	r2, r0
 800921c:	4293      	cmp	r3, r2
 800921e:	4618      	mov	r0, r3
 8009220:	d101      	bne.n	8009226 <memchr+0x12>
 8009222:	2000      	movs	r0, #0
 8009224:	e003      	b.n	800922e <memchr+0x1a>
 8009226:	7804      	ldrb	r4, [r0, #0]
 8009228:	3301      	adds	r3, #1
 800922a:	428c      	cmp	r4, r1
 800922c:	d1f6      	bne.n	800921c <memchr+0x8>
 800922e:	bd10      	pop	{r4, pc}

08009230 <__assert_func>:
 8009230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009232:	4614      	mov	r4, r2
 8009234:	461a      	mov	r2, r3
 8009236:	4b09      	ldr	r3, [pc, #36]	@ (800925c <__assert_func+0x2c>)
 8009238:	4605      	mov	r5, r0
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68d8      	ldr	r0, [r3, #12]
 800923e:	b14c      	cbz	r4, 8009254 <__assert_func+0x24>
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <__assert_func+0x30>)
 8009242:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009246:	9100      	str	r1, [sp, #0]
 8009248:	462b      	mov	r3, r5
 800924a:	4906      	ldr	r1, [pc, #24]	@ (8009264 <__assert_func+0x34>)
 800924c:	f000 f858 	bl	8009300 <fiprintf>
 8009250:	f000 f868 	bl	8009324 <abort>
 8009254:	4b04      	ldr	r3, [pc, #16]	@ (8009268 <__assert_func+0x38>)
 8009256:	461c      	mov	r4, r3
 8009258:	e7f3      	b.n	8009242 <__assert_func+0x12>
 800925a:	bf00      	nop
 800925c:	20000300 	.word	0x20000300
 8009260:	0800c217 	.word	0x0800c217
 8009264:	0800c224 	.word	0x0800c224
 8009268:	0800c047 	.word	0x0800c047

0800926c <_calloc_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	fba1 5402 	umull	r5, r4, r1, r2
 8009272:	b934      	cbnz	r4, 8009282 <_calloc_r+0x16>
 8009274:	4629      	mov	r1, r5
 8009276:	f7fe fec9 	bl	800800c <_malloc_r>
 800927a:	4606      	mov	r6, r0
 800927c:	b928      	cbnz	r0, 800928a <_calloc_r+0x1e>
 800927e:	4630      	mov	r0, r6
 8009280:	bd70      	pop	{r4, r5, r6, pc}
 8009282:	220c      	movs	r2, #12
 8009284:	2600      	movs	r6, #0
 8009286:	6002      	str	r2, [r0, #0]
 8009288:	e7f9      	b.n	800927e <_calloc_r+0x12>
 800928a:	462a      	mov	r2, r5
 800928c:	4621      	mov	r1, r4
 800928e:	f7fe fa5c 	bl	800774a <memset>
 8009292:	e7f4      	b.n	800927e <_calloc_r+0x12>

08009294 <malloc>:
 8009294:	4b02      	ldr	r3, [pc, #8]	@ (80092a0 <malloc+0xc>)
 8009296:	4601      	mov	r1, r0
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	f7fe beb7 	b.w	800800c <_malloc_r>
 800929e:	bf00      	nop
 80092a0:	20000300 	.word	0x20000300

080092a4 <_realloc_r>:
 80092a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a8:	4607      	mov	r7, r0
 80092aa:	4614      	mov	r4, r2
 80092ac:	460d      	mov	r5, r1
 80092ae:	b921      	cbnz	r1, 80092ba <_realloc_r+0x16>
 80092b0:	4611      	mov	r1, r2
 80092b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	f7fe bea9 	b.w	800800c <_malloc_r>
 80092ba:	b92a      	cbnz	r2, 80092c8 <_realloc_r+0x24>
 80092bc:	f7fe fb02 	bl	80078c4 <_free_r>
 80092c0:	4625      	mov	r5, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	f000 f833 	bl	8009332 <_malloc_usable_size_r>
 80092cc:	4284      	cmp	r4, r0
 80092ce:	4606      	mov	r6, r0
 80092d0:	d802      	bhi.n	80092d8 <_realloc_r+0x34>
 80092d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092d6:	d8f4      	bhi.n	80092c2 <_realloc_r+0x1e>
 80092d8:	4621      	mov	r1, r4
 80092da:	4638      	mov	r0, r7
 80092dc:	f7fe fe96 	bl	800800c <_malloc_r>
 80092e0:	4680      	mov	r8, r0
 80092e2:	b908      	cbnz	r0, 80092e8 <_realloc_r+0x44>
 80092e4:	4645      	mov	r5, r8
 80092e6:	e7ec      	b.n	80092c2 <_realloc_r+0x1e>
 80092e8:	42b4      	cmp	r4, r6
 80092ea:	4622      	mov	r2, r4
 80092ec:	4629      	mov	r1, r5
 80092ee:	bf28      	it	cs
 80092f0:	4632      	movcs	r2, r6
 80092f2:	f7fe fad2 	bl	800789a <memcpy>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4638      	mov	r0, r7
 80092fa:	f7fe fae3 	bl	80078c4 <_free_r>
 80092fe:	e7f1      	b.n	80092e4 <_realloc_r+0x40>

08009300 <fiprintf>:
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	b503      	push	{r0, r1, lr}
 8009304:	4601      	mov	r1, r0
 8009306:	ab03      	add	r3, sp, #12
 8009308:	4805      	ldr	r0, [pc, #20]	@ (8009320 <fiprintf+0x20>)
 800930a:	f853 2b04 	ldr.w	r2, [r3], #4
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	f000 f83d 	bl	8009390 <_vfiprintf_r>
 8009316:	b002      	add	sp, #8
 8009318:	f85d eb04 	ldr.w	lr, [sp], #4
 800931c:	b003      	add	sp, #12
 800931e:	4770      	bx	lr
 8009320:	20000300 	.word	0x20000300

08009324 <abort>:
 8009324:	2006      	movs	r0, #6
 8009326:	b508      	push	{r3, lr}
 8009328:	f000 fa06 	bl	8009738 <raise>
 800932c:	2001      	movs	r0, #1
 800932e:	f7fa f988 	bl	8003642 <_exit>

08009332 <_malloc_usable_size_r>:
 8009332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009336:	1f18      	subs	r0, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	bfbc      	itt	lt
 800933c:	580b      	ldrlt	r3, [r1, r0]
 800933e:	18c0      	addlt	r0, r0, r3
 8009340:	4770      	bx	lr

08009342 <__sfputc_r>:
 8009342:	6893      	ldr	r3, [r2, #8]
 8009344:	b410      	push	{r4}
 8009346:	3b01      	subs	r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	6093      	str	r3, [r2, #8]
 800934c:	da07      	bge.n	800935e <__sfputc_r+0x1c>
 800934e:	6994      	ldr	r4, [r2, #24]
 8009350:	42a3      	cmp	r3, r4
 8009352:	db01      	blt.n	8009358 <__sfputc_r+0x16>
 8009354:	290a      	cmp	r1, #10
 8009356:	d102      	bne.n	800935e <__sfputc_r+0x1c>
 8009358:	bc10      	pop	{r4}
 800935a:	f000 b931 	b.w	80095c0 <__swbuf_r>
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	1c58      	adds	r0, r3, #1
 8009362:	6010      	str	r0, [r2, #0]
 8009364:	7019      	strb	r1, [r3, #0]
 8009366:	4608      	mov	r0, r1
 8009368:	bc10      	pop	{r4}
 800936a:	4770      	bx	lr

0800936c <__sfputs_r>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	4606      	mov	r6, r0
 8009370:	460f      	mov	r7, r1
 8009372:	4614      	mov	r4, r2
 8009374:	18d5      	adds	r5, r2, r3
 8009376:	42ac      	cmp	r4, r5
 8009378:	d101      	bne.n	800937e <__sfputs_r+0x12>
 800937a:	2000      	movs	r0, #0
 800937c:	e007      	b.n	800938e <__sfputs_r+0x22>
 800937e:	463a      	mov	r2, r7
 8009380:	4630      	mov	r0, r6
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	f7ff ffdc 	bl	8009342 <__sfputc_r>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	d1f3      	bne.n	8009376 <__sfputs_r+0xa>
 800938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009390 <_vfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	460d      	mov	r5, r1
 8009396:	4614      	mov	r4, r2
 8009398:	4698      	mov	r8, r3
 800939a:	4606      	mov	r6, r0
 800939c:	b09d      	sub	sp, #116	@ 0x74
 800939e:	b118      	cbz	r0, 80093a8 <_vfiprintf_r+0x18>
 80093a0:	6a03      	ldr	r3, [r0, #32]
 80093a2:	b90b      	cbnz	r3, 80093a8 <_vfiprintf_r+0x18>
 80093a4:	f7fe f900 	bl	80075a8 <__sinit>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x2a>
 80093b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b6:	f7fe fa66 	bl	8007886 <__retarget_lock_acquire_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	071b      	lsls	r3, r3, #28
 80093be:	d501      	bpl.n	80093c4 <_vfiprintf_r+0x34>
 80093c0:	692b      	ldr	r3, [r5, #16]
 80093c2:	b99b      	cbnz	r3, 80093ec <_vfiprintf_r+0x5c>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4630      	mov	r0, r6
 80093c8:	f000 f938 	bl	800963c <__swsetup_r>
 80093cc:	b170      	cbz	r0, 80093ec <_vfiprintf_r+0x5c>
 80093ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d0:	07dc      	lsls	r4, r3, #31
 80093d2:	d504      	bpl.n	80093de <_vfiprintf_r+0x4e>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	b01d      	add	sp, #116	@ 0x74
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	0598      	lsls	r0, r3, #22
 80093e2:	d4f7      	bmi.n	80093d4 <_vfiprintf_r+0x44>
 80093e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093e6:	f7fe fa4f 	bl	8007888 <__retarget_lock_release_recursive>
 80093ea:	e7f3      	b.n	80093d4 <_vfiprintf_r+0x44>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f0:	2320      	movs	r3, #32
 80093f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093f6:	2330      	movs	r3, #48	@ 0x30
 80093f8:	f04f 0901 	mov.w	r9, #1
 80093fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009400:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80095ac <_vfiprintf_r+0x21c>
 8009404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009408:	4623      	mov	r3, r4
 800940a:	469a      	mov	sl, r3
 800940c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009410:	b10a      	cbz	r2, 8009416 <_vfiprintf_r+0x86>
 8009412:	2a25      	cmp	r2, #37	@ 0x25
 8009414:	d1f9      	bne.n	800940a <_vfiprintf_r+0x7a>
 8009416:	ebba 0b04 	subs.w	fp, sl, r4
 800941a:	d00b      	beq.n	8009434 <_vfiprintf_r+0xa4>
 800941c:	465b      	mov	r3, fp
 800941e:	4622      	mov	r2, r4
 8009420:	4629      	mov	r1, r5
 8009422:	4630      	mov	r0, r6
 8009424:	f7ff ffa2 	bl	800936c <__sfputs_r>
 8009428:	3001      	adds	r0, #1
 800942a:	f000 80a7 	beq.w	800957c <_vfiprintf_r+0x1ec>
 800942e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009430:	445a      	add	r2, fp
 8009432:	9209      	str	r2, [sp, #36]	@ 0x24
 8009434:	f89a 3000 	ldrb.w	r3, [sl]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 809f 	beq.w	800957c <_vfiprintf_r+0x1ec>
 800943e:	2300      	movs	r3, #0
 8009440:	f04f 32ff 	mov.w	r2, #4294967295
 8009444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009448:	f10a 0a01 	add.w	sl, sl, #1
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	9307      	str	r3, [sp, #28]
 8009450:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009454:	931a      	str	r3, [sp, #104]	@ 0x68
 8009456:	4654      	mov	r4, sl
 8009458:	2205      	movs	r2, #5
 800945a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945e:	4853      	ldr	r0, [pc, #332]	@ (80095ac <_vfiprintf_r+0x21c>)
 8009460:	f7ff fed8 	bl	8009214 <memchr>
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	b9d8      	cbnz	r0, 80094a0 <_vfiprintf_r+0x110>
 8009468:	06d1      	lsls	r1, r2, #27
 800946a:	bf44      	itt	mi
 800946c:	2320      	movmi	r3, #32
 800946e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009472:	0713      	lsls	r3, r2, #28
 8009474:	bf44      	itt	mi
 8009476:	232b      	movmi	r3, #43	@ 0x2b
 8009478:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b2a      	cmp	r3, #42	@ 0x2a
 8009482:	d015      	beq.n	80094b0 <_vfiprintf_r+0x120>
 8009484:	4654      	mov	r4, sl
 8009486:	2000      	movs	r0, #0
 8009488:	f04f 0c0a 	mov.w	ip, #10
 800948c:	9a07      	ldr	r2, [sp, #28]
 800948e:	4621      	mov	r1, r4
 8009490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009494:	3b30      	subs	r3, #48	@ 0x30
 8009496:	2b09      	cmp	r3, #9
 8009498:	d94b      	bls.n	8009532 <_vfiprintf_r+0x1a2>
 800949a:	b1b0      	cbz	r0, 80094ca <_vfiprintf_r+0x13a>
 800949c:	9207      	str	r2, [sp, #28]
 800949e:	e014      	b.n	80094ca <_vfiprintf_r+0x13a>
 80094a0:	eba0 0308 	sub.w	r3, r0, r8
 80094a4:	fa09 f303 	lsl.w	r3, r9, r3
 80094a8:	4313      	orrs	r3, r2
 80094aa:	46a2      	mov	sl, r4
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	e7d2      	b.n	8009456 <_vfiprintf_r+0xc6>
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	1d19      	adds	r1, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	9103      	str	r1, [sp, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfbb      	ittet	lt
 80094bc:	425b      	neglt	r3, r3
 80094be:	f042 0202 	orrlt.w	r2, r2, #2
 80094c2:	9307      	strge	r3, [sp, #28]
 80094c4:	9307      	strlt	r3, [sp, #28]
 80094c6:	bfb8      	it	lt
 80094c8:	9204      	strlt	r2, [sp, #16]
 80094ca:	7823      	ldrb	r3, [r4, #0]
 80094cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ce:	d10a      	bne.n	80094e6 <_vfiprintf_r+0x156>
 80094d0:	7863      	ldrb	r3, [r4, #1]
 80094d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d4:	d132      	bne.n	800953c <_vfiprintf_r+0x1ac>
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	3402      	adds	r4, #2
 80094da:	1d1a      	adds	r2, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9203      	str	r2, [sp, #12]
 80094e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094e4:	9305      	str	r3, [sp, #20]
 80094e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80095b0 <_vfiprintf_r+0x220>
 80094ea:	2203      	movs	r2, #3
 80094ec:	4650      	mov	r0, sl
 80094ee:	7821      	ldrb	r1, [r4, #0]
 80094f0:	f7ff fe90 	bl	8009214 <memchr>
 80094f4:	b138      	cbz	r0, 8009506 <_vfiprintf_r+0x176>
 80094f6:	2240      	movs	r2, #64	@ 0x40
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	eba0 000a 	sub.w	r0, r0, sl
 80094fe:	4082      	lsls	r2, r0
 8009500:	4313      	orrs	r3, r2
 8009502:	3401      	adds	r4, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950a:	2206      	movs	r2, #6
 800950c:	4829      	ldr	r0, [pc, #164]	@ (80095b4 <_vfiprintf_r+0x224>)
 800950e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009512:	f7ff fe7f 	bl	8009214 <memchr>
 8009516:	2800      	cmp	r0, #0
 8009518:	d03f      	beq.n	800959a <_vfiprintf_r+0x20a>
 800951a:	4b27      	ldr	r3, [pc, #156]	@ (80095b8 <_vfiprintf_r+0x228>)
 800951c:	bb1b      	cbnz	r3, 8009566 <_vfiprintf_r+0x1d6>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	3307      	adds	r3, #7
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	3308      	adds	r3, #8
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800952c:	443b      	add	r3, r7
 800952e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009530:	e76a      	b.n	8009408 <_vfiprintf_r+0x78>
 8009532:	460c      	mov	r4, r1
 8009534:	2001      	movs	r0, #1
 8009536:	fb0c 3202 	mla	r2, ip, r2, r3
 800953a:	e7a8      	b.n	800948e <_vfiprintf_r+0xfe>
 800953c:	2300      	movs	r3, #0
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	4619      	mov	r1, r3
 8009544:	3401      	adds	r4, #1
 8009546:	9305      	str	r3, [sp, #20]
 8009548:	4620      	mov	r0, r4
 800954a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954e:	3a30      	subs	r2, #48	@ 0x30
 8009550:	2a09      	cmp	r2, #9
 8009552:	d903      	bls.n	800955c <_vfiprintf_r+0x1cc>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0c6      	beq.n	80094e6 <_vfiprintf_r+0x156>
 8009558:	9105      	str	r1, [sp, #20]
 800955a:	e7c4      	b.n	80094e6 <_vfiprintf_r+0x156>
 800955c:	4604      	mov	r4, r0
 800955e:	2301      	movs	r3, #1
 8009560:	fb0c 2101 	mla	r1, ip, r1, r2
 8009564:	e7f0      	b.n	8009548 <_vfiprintf_r+0x1b8>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4630      	mov	r0, r6
 800956e:	4b13      	ldr	r3, [pc, #76]	@ (80095bc <_vfiprintf_r+0x22c>)
 8009570:	a904      	add	r1, sp, #16
 8009572:	f3af 8000 	nop.w
 8009576:	4607      	mov	r7, r0
 8009578:	1c78      	adds	r0, r7, #1
 800957a:	d1d6      	bne.n	800952a <_vfiprintf_r+0x19a>
 800957c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	d405      	bmi.n	800958e <_vfiprintf_r+0x1fe>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d402      	bmi.n	800958e <_vfiprintf_r+0x1fe>
 8009588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800958a:	f7fe f97d 	bl	8007888 <__retarget_lock_release_recursive>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	065b      	lsls	r3, r3, #25
 8009592:	f53f af1f 	bmi.w	80093d4 <_vfiprintf_r+0x44>
 8009596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009598:	e71e      	b.n	80093d8 <_vfiprintf_r+0x48>
 800959a:	ab03      	add	r3, sp, #12
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	462a      	mov	r2, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	4b06      	ldr	r3, [pc, #24]	@ (80095bc <_vfiprintf_r+0x22c>)
 80095a4:	a904      	add	r1, sp, #16
 80095a6:	f7ff fc45 	bl	8008e34 <_printf_i>
 80095aa:	e7e4      	b.n	8009576 <_vfiprintf_r+0x1e6>
 80095ac:	0800c1e4 	.word	0x0800c1e4
 80095b0:	0800c1ea 	.word	0x0800c1ea
 80095b4:	0800c1ee 	.word	0x0800c1ee
 80095b8:	00000000 	.word	0x00000000
 80095bc:	0800936d 	.word	0x0800936d

080095c0 <__swbuf_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	4614      	mov	r4, r2
 80095c6:	4605      	mov	r5, r0
 80095c8:	b118      	cbz	r0, 80095d2 <__swbuf_r+0x12>
 80095ca:	6a03      	ldr	r3, [r0, #32]
 80095cc:	b90b      	cbnz	r3, 80095d2 <__swbuf_r+0x12>
 80095ce:	f7fd ffeb 	bl	80075a8 <__sinit>
 80095d2:	69a3      	ldr	r3, [r4, #24]
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	071a      	lsls	r2, r3, #28
 80095da:	d501      	bpl.n	80095e0 <__swbuf_r+0x20>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	b943      	cbnz	r3, 80095f2 <__swbuf_r+0x32>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 f82a 	bl	800963c <__swsetup_r>
 80095e8:	b118      	cbz	r0, 80095f2 <__swbuf_r+0x32>
 80095ea:	f04f 37ff 	mov.w	r7, #4294967295
 80095ee:	4638      	mov	r0, r7
 80095f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	6922      	ldr	r2, [r4, #16]
 80095f6:	b2f6      	uxtb	r6, r6
 80095f8:	1a98      	subs	r0, r3, r2
 80095fa:	6963      	ldr	r3, [r4, #20]
 80095fc:	4637      	mov	r7, r6
 80095fe:	4283      	cmp	r3, r0
 8009600:	dc05      	bgt.n	800960e <__swbuf_r+0x4e>
 8009602:	4621      	mov	r1, r4
 8009604:	4628      	mov	r0, r5
 8009606:	f7ff fdb3 	bl	8009170 <_fflush_r>
 800960a:	2800      	cmp	r0, #0
 800960c:	d1ed      	bne.n	80095ea <__swbuf_r+0x2a>
 800960e:	68a3      	ldr	r3, [r4, #8]
 8009610:	3b01      	subs	r3, #1
 8009612:	60a3      	str	r3, [r4, #8]
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	6022      	str	r2, [r4, #0]
 800961a:	701e      	strb	r6, [r3, #0]
 800961c:	6962      	ldr	r2, [r4, #20]
 800961e:	1c43      	adds	r3, r0, #1
 8009620:	429a      	cmp	r2, r3
 8009622:	d004      	beq.n	800962e <__swbuf_r+0x6e>
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	07db      	lsls	r3, r3, #31
 8009628:	d5e1      	bpl.n	80095ee <__swbuf_r+0x2e>
 800962a:	2e0a      	cmp	r6, #10
 800962c:	d1df      	bne.n	80095ee <__swbuf_r+0x2e>
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f7ff fd9d 	bl	8009170 <_fflush_r>
 8009636:	2800      	cmp	r0, #0
 8009638:	d0d9      	beq.n	80095ee <__swbuf_r+0x2e>
 800963a:	e7d6      	b.n	80095ea <__swbuf_r+0x2a>

0800963c <__swsetup_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4b29      	ldr	r3, [pc, #164]	@ (80096e4 <__swsetup_r+0xa8>)
 8009640:	4605      	mov	r5, r0
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	460c      	mov	r4, r1
 8009646:	b118      	cbz	r0, 8009650 <__swsetup_r+0x14>
 8009648:	6a03      	ldr	r3, [r0, #32]
 800964a:	b90b      	cbnz	r3, 8009650 <__swsetup_r+0x14>
 800964c:	f7fd ffac 	bl	80075a8 <__sinit>
 8009650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009654:	0719      	lsls	r1, r3, #28
 8009656:	d422      	bmi.n	800969e <__swsetup_r+0x62>
 8009658:	06da      	lsls	r2, r3, #27
 800965a:	d407      	bmi.n	800966c <__swsetup_r+0x30>
 800965c:	2209      	movs	r2, #9
 800965e:	602a      	str	r2, [r5, #0]
 8009660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	e033      	b.n	80096d4 <__swsetup_r+0x98>
 800966c:	0758      	lsls	r0, r3, #29
 800966e:	d512      	bpl.n	8009696 <__swsetup_r+0x5a>
 8009670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009672:	b141      	cbz	r1, 8009686 <__swsetup_r+0x4a>
 8009674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009678:	4299      	cmp	r1, r3
 800967a:	d002      	beq.n	8009682 <__swsetup_r+0x46>
 800967c:	4628      	mov	r0, r5
 800967e:	f7fe f921 	bl	80078c4 <_free_r>
 8009682:	2300      	movs	r3, #0
 8009684:	6363      	str	r3, [r4, #52]	@ 0x34
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	2300      	movs	r3, #0
 8009690:	6063      	str	r3, [r4, #4]
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f043 0308 	orr.w	r3, r3, #8
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	b94b      	cbnz	r3, 80096b6 <__swsetup_r+0x7a>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ac:	d003      	beq.n	80096b6 <__swsetup_r+0x7a>
 80096ae:	4621      	mov	r1, r4
 80096b0:	4628      	mov	r0, r5
 80096b2:	f000 f882 	bl	80097ba <__smakebuf_r>
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	f013 0201 	ands.w	r2, r3, #1
 80096be:	d00a      	beq.n	80096d6 <__swsetup_r+0x9a>
 80096c0:	2200      	movs	r2, #0
 80096c2:	60a2      	str	r2, [r4, #8]
 80096c4:	6962      	ldr	r2, [r4, #20]
 80096c6:	4252      	negs	r2, r2
 80096c8:	61a2      	str	r2, [r4, #24]
 80096ca:	6922      	ldr	r2, [r4, #16]
 80096cc:	b942      	cbnz	r2, 80096e0 <__swsetup_r+0xa4>
 80096ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096d2:	d1c5      	bne.n	8009660 <__swsetup_r+0x24>
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	0799      	lsls	r1, r3, #30
 80096d8:	bf58      	it	pl
 80096da:	6962      	ldrpl	r2, [r4, #20]
 80096dc:	60a2      	str	r2, [r4, #8]
 80096de:	e7f4      	b.n	80096ca <__swsetup_r+0x8e>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e7f7      	b.n	80096d4 <__swsetup_r+0x98>
 80096e4:	20000300 	.word	0x20000300

080096e8 <_raise_r>:
 80096e8:	291f      	cmp	r1, #31
 80096ea:	b538      	push	{r3, r4, r5, lr}
 80096ec:	4605      	mov	r5, r0
 80096ee:	460c      	mov	r4, r1
 80096f0:	d904      	bls.n	80096fc <_raise_r+0x14>
 80096f2:	2316      	movs	r3, #22
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096fe:	b112      	cbz	r2, 8009706 <_raise_r+0x1e>
 8009700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009704:	b94b      	cbnz	r3, 800971a <_raise_r+0x32>
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f830 	bl	800976c <_getpid_r>
 800970c:	4622      	mov	r2, r4
 800970e:	4601      	mov	r1, r0
 8009710:	4628      	mov	r0, r5
 8009712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009716:	f000 b817 	b.w	8009748 <_kill_r>
 800971a:	2b01      	cmp	r3, #1
 800971c:	d00a      	beq.n	8009734 <_raise_r+0x4c>
 800971e:	1c59      	adds	r1, r3, #1
 8009720:	d103      	bne.n	800972a <_raise_r+0x42>
 8009722:	2316      	movs	r3, #22
 8009724:	6003      	str	r3, [r0, #0]
 8009726:	2001      	movs	r0, #1
 8009728:	e7e7      	b.n	80096fa <_raise_r+0x12>
 800972a:	2100      	movs	r1, #0
 800972c:	4620      	mov	r0, r4
 800972e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009732:	4798      	blx	r3
 8009734:	2000      	movs	r0, #0
 8009736:	e7e0      	b.n	80096fa <_raise_r+0x12>

08009738 <raise>:
 8009738:	4b02      	ldr	r3, [pc, #8]	@ (8009744 <raise+0xc>)
 800973a:	4601      	mov	r1, r0
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	f7ff bfd3 	b.w	80096e8 <_raise_r>
 8009742:	bf00      	nop
 8009744:	20000300 	.word	0x20000300

08009748 <_kill_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	2300      	movs	r3, #0
 800974c:	4d06      	ldr	r5, [pc, #24]	@ (8009768 <_kill_r+0x20>)
 800974e:	4604      	mov	r4, r0
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f7f9 ff6c 	bl	8003632 <_kill>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d102      	bne.n	8009764 <_kill_r+0x1c>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	b103      	cbz	r3, 8009764 <_kill_r+0x1c>
 8009762:	6023      	str	r3, [r4, #0]
 8009764:	bd38      	pop	{r3, r4, r5, pc}
 8009766:	bf00      	nop
 8009768:	200049e0 	.word	0x200049e0

0800976c <_getpid_r>:
 800976c:	f7f9 bf5f 	b.w	800362e <_getpid>

08009770 <__swhatbuf_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	460c      	mov	r4, r1
 8009774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009778:	4615      	mov	r5, r2
 800977a:	2900      	cmp	r1, #0
 800977c:	461e      	mov	r6, r3
 800977e:	b096      	sub	sp, #88	@ 0x58
 8009780:	da0c      	bge.n	800979c <__swhatbuf_r+0x2c>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	2100      	movs	r1, #0
 8009786:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800978a:	bf14      	ite	ne
 800978c:	2340      	movne	r3, #64	@ 0x40
 800978e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009792:	2000      	movs	r0, #0
 8009794:	6031      	str	r1, [r6, #0]
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	b016      	add	sp, #88	@ 0x58
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	466a      	mov	r2, sp
 800979e:	f000 f849 	bl	8009834 <_fstat_r>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	dbed      	blt.n	8009782 <__swhatbuf_r+0x12>
 80097a6:	9901      	ldr	r1, [sp, #4]
 80097a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097b0:	4259      	negs	r1, r3
 80097b2:	4159      	adcs	r1, r3
 80097b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097b8:	e7eb      	b.n	8009792 <__swhatbuf_r+0x22>

080097ba <__smakebuf_r>:
 80097ba:	898b      	ldrh	r3, [r1, #12]
 80097bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097be:	079d      	lsls	r5, r3, #30
 80097c0:	4606      	mov	r6, r0
 80097c2:	460c      	mov	r4, r1
 80097c4:	d507      	bpl.n	80097d6 <__smakebuf_r+0x1c>
 80097c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	2301      	movs	r3, #1
 80097d0:	6163      	str	r3, [r4, #20]
 80097d2:	b003      	add	sp, #12
 80097d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d6:	466a      	mov	r2, sp
 80097d8:	ab01      	add	r3, sp, #4
 80097da:	f7ff ffc9 	bl	8009770 <__swhatbuf_r>
 80097de:	9f00      	ldr	r7, [sp, #0]
 80097e0:	4605      	mov	r5, r0
 80097e2:	4639      	mov	r1, r7
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7fe fc11 	bl	800800c <_malloc_r>
 80097ea:	b948      	cbnz	r0, 8009800 <__smakebuf_r+0x46>
 80097ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097f0:	059a      	lsls	r2, r3, #22
 80097f2:	d4ee      	bmi.n	80097d2 <__smakebuf_r+0x18>
 80097f4:	f023 0303 	bic.w	r3, r3, #3
 80097f8:	f043 0302 	orr.w	r3, r3, #2
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	e7e2      	b.n	80097c6 <__smakebuf_r+0xc>
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	b15b      	cbz	r3, 800982a <__smakebuf_r+0x70>
 8009812:	4630      	mov	r0, r6
 8009814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009818:	f000 f81e 	bl	8009858 <_isatty_r>
 800981c:	b128      	cbz	r0, 800982a <__smakebuf_r+0x70>
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	f043 0301 	orr.w	r3, r3, #1
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	431d      	orrs	r5, r3
 800982e:	81a5      	strh	r5, [r4, #12]
 8009830:	e7cf      	b.n	80097d2 <__smakebuf_r+0x18>
	...

08009834 <_fstat_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	2300      	movs	r3, #0
 8009838:	4d06      	ldr	r5, [pc, #24]	@ (8009854 <_fstat_r+0x20>)
 800983a:	4604      	mov	r4, r0
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	f7f9 ff23 	bl	800368c <_fstat>
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	d102      	bne.n	8009850 <_fstat_r+0x1c>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	b103      	cbz	r3, 8009850 <_fstat_r+0x1c>
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	bd38      	pop	{r3, r4, r5, pc}
 8009852:	bf00      	nop
 8009854:	200049e0 	.word	0x200049e0

08009858 <_isatty_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	2300      	movs	r3, #0
 800985c:	4d05      	ldr	r5, [pc, #20]	@ (8009874 <_isatty_r+0x1c>)
 800985e:	4604      	mov	r4, r0
 8009860:	4608      	mov	r0, r1
 8009862:	602b      	str	r3, [r5, #0]
 8009864:	f7f9 ff17 	bl	8003696 <_isatty>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_isatty_r+0x1a>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_isatty_r+0x1a>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	200049e0 	.word	0x200049e0

08009878 <atan2>:
 8009878:	f000 bb16 	b.w	8009ea8 <__ieee754_atan2>

0800987c <sqrt>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	f000 f8ab 	bl	80099dc <__ieee754_sqrt>
 8009886:	4632      	mov	r2, r6
 8009888:	4604      	mov	r4, r0
 800988a:	460d      	mov	r5, r1
 800988c:	463b      	mov	r3, r7
 800988e:	4630      	mov	r0, r6
 8009890:	4639      	mov	r1, r7
 8009892:	f7f7 f8bb 	bl	8000a0c <__aeabi_dcmpun>
 8009896:	b990      	cbnz	r0, 80098be <sqrt+0x42>
 8009898:	2200      	movs	r2, #0
 800989a:	2300      	movs	r3, #0
 800989c:	4630      	mov	r0, r6
 800989e:	4639      	mov	r1, r7
 80098a0:	f7f7 f88c 	bl	80009bc <__aeabi_dcmplt>
 80098a4:	b158      	cbz	r0, 80098be <sqrt+0x42>
 80098a6:	f7fd ffc3 	bl	8007830 <__errno>
 80098aa:	2321      	movs	r3, #33	@ 0x21
 80098ac:	2200      	movs	r2, #0
 80098ae:	6003      	str	r3, [r0, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7f6 ff39 	bl	800072c <__aeabi_ddiv>
 80098ba:	4604      	mov	r4, r0
 80098bc:	460d      	mov	r5, r1
 80098be:	4620      	mov	r0, r4
 80098c0:	4629      	mov	r1, r5
 80098c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098c4 <cos>:
 80098c4:	b530      	push	{r4, r5, lr}
 80098c6:	4d20      	ldr	r5, [pc, #128]	@ (8009948 <cos+0x84>)
 80098c8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80098cc:	42ac      	cmp	r4, r5
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	b087      	sub	sp, #28
 80098d4:	d806      	bhi.n	80098e4 <cos+0x20>
 80098d6:	2200      	movs	r2, #0
 80098d8:	2300      	movs	r3, #0
 80098da:	b007      	add	sp, #28
 80098dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098e0:	f000 b96a 	b.w	8009bb8 <__kernel_cos>
 80098e4:	4d19      	ldr	r5, [pc, #100]	@ (800994c <cos+0x88>)
 80098e6:	42ac      	cmp	r4, r5
 80098e8:	d903      	bls.n	80098f2 <cos+0x2e>
 80098ea:	f7f6 fc3d 	bl	8000168 <__aeabi_dsub>
 80098ee:	b007      	add	sp, #28
 80098f0:	bd30      	pop	{r4, r5, pc}
 80098f2:	aa02      	add	r2, sp, #8
 80098f4:	f000 fbac 	bl	800a050 <__ieee754_rem_pio2>
 80098f8:	f000 0003 	and.w	r0, r0, #3
 80098fc:	2801      	cmp	r0, #1
 80098fe:	d009      	beq.n	8009914 <cos+0x50>
 8009900:	2802      	cmp	r0, #2
 8009902:	d011      	beq.n	8009928 <cos+0x64>
 8009904:	b9b8      	cbnz	r0, 8009936 <cos+0x72>
 8009906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800990a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990e:	f000 f953 	bl	8009bb8 <__kernel_cos>
 8009912:	e7ec      	b.n	80098ee <cos+0x2a>
 8009914:	9000      	str	r0, [sp, #0]
 8009916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800991e:	f000 fa0b 	bl	8009d38 <__kernel_sin>
 8009922:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8009926:	e7e2      	b.n	80098ee <cos+0x2a>
 8009928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009930:	f000 f942 	bl	8009bb8 <__kernel_cos>
 8009934:	e7f5      	b.n	8009922 <cos+0x5e>
 8009936:	2301      	movs	r3, #1
 8009938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009942:	f000 f9f9 	bl	8009d38 <__kernel_sin>
 8009946:	e7d2      	b.n	80098ee <cos+0x2a>
 8009948:	3fe921fb 	.word	0x3fe921fb
 800994c:	7fefffff 	.word	0x7fefffff

08009950 <sin>:
 8009950:	b530      	push	{r4, r5, lr}
 8009952:	4d20      	ldr	r5, [pc, #128]	@ (80099d4 <sin+0x84>)
 8009954:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009958:	42ac      	cmp	r4, r5
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	b087      	sub	sp, #28
 8009960:	d806      	bhi.n	8009970 <sin+0x20>
 8009962:	2300      	movs	r3, #0
 8009964:	2200      	movs	r2, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	f000 f9e5 	bl	8009d38 <__kernel_sin>
 800996e:	e004      	b.n	800997a <sin+0x2a>
 8009970:	4d19      	ldr	r5, [pc, #100]	@ (80099d8 <sin+0x88>)
 8009972:	42ac      	cmp	r4, r5
 8009974:	d903      	bls.n	800997e <sin+0x2e>
 8009976:	f7f6 fbf7 	bl	8000168 <__aeabi_dsub>
 800997a:	b007      	add	sp, #28
 800997c:	bd30      	pop	{r4, r5, pc}
 800997e:	aa02      	add	r2, sp, #8
 8009980:	f000 fb66 	bl	800a050 <__ieee754_rem_pio2>
 8009984:	f000 0003 	and.w	r0, r0, #3
 8009988:	2801      	cmp	r0, #1
 800998a:	d009      	beq.n	80099a0 <sin+0x50>
 800998c:	2802      	cmp	r0, #2
 800998e:	d00e      	beq.n	80099ae <sin+0x5e>
 8009990:	b9c0      	cbnz	r0, 80099c4 <sin+0x74>
 8009992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009996:	2301      	movs	r3, #1
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800999e:	e7e4      	b.n	800996a <sin+0x1a>
 80099a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099a8:	f000 f906 	bl	8009bb8 <__kernel_cos>
 80099ac:	e7e5      	b.n	800997a <sin+0x2a>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ba:	f000 f9bd 	bl	8009d38 <__kernel_sin>
 80099be:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80099c2:	e7da      	b.n	800997a <sin+0x2a>
 80099c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099cc:	f000 f8f4 	bl	8009bb8 <__kernel_cos>
 80099d0:	e7f5      	b.n	80099be <sin+0x6e>
 80099d2:	bf00      	nop
 80099d4:	3fe921fb 	.word	0x3fe921fb
 80099d8:	7fefffff 	.word	0x7fefffff

080099dc <__ieee754_sqrt>:
 80099dc:	4a65      	ldr	r2, [pc, #404]	@ (8009b74 <__ieee754_sqrt+0x198>)
 80099de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e2:	438a      	bics	r2, r1
 80099e4:	4606      	mov	r6, r0
 80099e6:	460f      	mov	r7, r1
 80099e8:	460b      	mov	r3, r1
 80099ea:	4604      	mov	r4, r0
 80099ec:	d10e      	bne.n	8009a0c <__ieee754_sqrt+0x30>
 80099ee:	4602      	mov	r2, r0
 80099f0:	f7f6 fd72 	bl	80004d8 <__aeabi_dmul>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f6 fbb6 	bl	800016c <__adddf3>
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	4630      	mov	r0, r6
 8009a06:	4639      	mov	r1, r7
 8009a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	dc0c      	bgt.n	8009a2a <__ieee754_sqrt+0x4e>
 8009a10:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009a14:	4302      	orrs	r2, r0
 8009a16:	d0f5      	beq.n	8009a04 <__ieee754_sqrt+0x28>
 8009a18:	b189      	cbz	r1, 8009a3e <__ieee754_sqrt+0x62>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	f7f6 fba4 	bl	8000168 <__aeabi_dsub>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	f7f6 fe82 	bl	800072c <__aeabi_ddiv>
 8009a28:	e7ea      	b.n	8009a00 <__ieee754_sqrt+0x24>
 8009a2a:	150a      	asrs	r2, r1, #20
 8009a2c:	d115      	bne.n	8009a5a <__ieee754_sqrt+0x7e>
 8009a2e:	2100      	movs	r1, #0
 8009a30:	e009      	b.n	8009a46 <__ieee754_sqrt+0x6a>
 8009a32:	0ae3      	lsrs	r3, r4, #11
 8009a34:	3a15      	subs	r2, #21
 8009a36:	0564      	lsls	r4, r4, #21
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0fa      	beq.n	8009a32 <__ieee754_sqrt+0x56>
 8009a3c:	e7f7      	b.n	8009a2e <__ieee754_sqrt+0x52>
 8009a3e:	460a      	mov	r2, r1
 8009a40:	e7fa      	b.n	8009a38 <__ieee754_sqrt+0x5c>
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	3101      	adds	r1, #1
 8009a46:	02d8      	lsls	r0, r3, #11
 8009a48:	d5fb      	bpl.n	8009a42 <__ieee754_sqrt+0x66>
 8009a4a:	1e48      	subs	r0, r1, #1
 8009a4c:	1a12      	subs	r2, r2, r0
 8009a4e:	f1c1 0020 	rsb	r0, r1, #32
 8009a52:	fa24 f000 	lsr.w	r0, r4, r0
 8009a56:	4303      	orrs	r3, r0
 8009a58:	408c      	lsls	r4, r1
 8009a5a:	2700      	movs	r7, #0
 8009a5c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009a60:	2116      	movs	r1, #22
 8009a62:	07d2      	lsls	r2, r2, #31
 8009a64:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009a68:	463a      	mov	r2, r7
 8009a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a72:	bf5c      	itt	pl
 8009a74:	005b      	lslpl	r3, r3, #1
 8009a76:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009a7a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a7e:	bf58      	it	pl
 8009a80:	0064      	lslpl	r4, r4, #1
 8009a82:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009a86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a8a:	0064      	lsls	r4, r4, #1
 8009a8c:	1815      	adds	r5, r2, r0
 8009a8e:	429d      	cmp	r5, r3
 8009a90:	bfde      	ittt	le
 8009a92:	182a      	addle	r2, r5, r0
 8009a94:	1b5b      	suble	r3, r3, r5
 8009a96:	183f      	addle	r7, r7, r0
 8009a98:	0fe5      	lsrs	r5, r4, #31
 8009a9a:	3901      	subs	r1, #1
 8009a9c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009aa0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009aa4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009aa8:	d1f0      	bne.n	8009a8c <__ieee754_sqrt+0xb0>
 8009aaa:	460d      	mov	r5, r1
 8009aac:	2620      	movs	r6, #32
 8009aae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	eb00 0c01 	add.w	ip, r0, r1
 8009ab8:	dc02      	bgt.n	8009ac0 <__ieee754_sqrt+0xe4>
 8009aba:	d113      	bne.n	8009ae4 <__ieee754_sqrt+0x108>
 8009abc:	45a4      	cmp	ip, r4
 8009abe:	d811      	bhi.n	8009ae4 <__ieee754_sqrt+0x108>
 8009ac0:	f1bc 0f00 	cmp.w	ip, #0
 8009ac4:	eb0c 0100 	add.w	r1, ip, r0
 8009ac8:	da3e      	bge.n	8009b48 <__ieee754_sqrt+0x16c>
 8009aca:	2900      	cmp	r1, #0
 8009acc:	db3c      	blt.n	8009b48 <__ieee754_sqrt+0x16c>
 8009ace:	f102 0e01 	add.w	lr, r2, #1
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	4672      	mov	r2, lr
 8009ad6:	45a4      	cmp	ip, r4
 8009ad8:	bf88      	it	hi
 8009ada:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009ade:	eba4 040c 	sub.w	r4, r4, ip
 8009ae2:	4405      	add	r5, r0
 8009ae4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009ae8:	3e01      	subs	r6, #1
 8009aea:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009aee:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009af2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009af6:	d1dc      	bne.n	8009ab2 <__ieee754_sqrt+0xd6>
 8009af8:	431c      	orrs	r4, r3
 8009afa:	d01a      	beq.n	8009b32 <__ieee754_sqrt+0x156>
 8009afc:	4c1e      	ldr	r4, [pc, #120]	@ (8009b78 <__ieee754_sqrt+0x19c>)
 8009afe:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8009b7c <__ieee754_sqrt+0x1a0>
 8009b02:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b06:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b0a:	f7f6 fb2d 	bl	8000168 <__aeabi_dsub>
 8009b0e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4650      	mov	r0, sl
 8009b18:	4659      	mov	r1, fp
 8009b1a:	f7f6 ff59 	bl	80009d0 <__aeabi_dcmple>
 8009b1e:	b140      	cbz	r0, 8009b32 <__ieee754_sqrt+0x156>
 8009b20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009b2c:	d10e      	bne.n	8009b4c <__ieee754_sqrt+0x170>
 8009b2e:	4635      	mov	r5, r6
 8009b30:	3701      	adds	r7, #1
 8009b32:	107b      	asrs	r3, r7, #1
 8009b34:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b38:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8009b3c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009b40:	086b      	lsrs	r3, r5, #1
 8009b42:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8009b46:	e75b      	b.n	8009a00 <__ieee754_sqrt+0x24>
 8009b48:	4696      	mov	lr, r2
 8009b4a:	e7c2      	b.n	8009ad2 <__ieee754_sqrt+0xf6>
 8009b4c:	f7f6 fb0e 	bl	800016c <__adddf3>
 8009b50:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009b54:	4602      	mov	r2, r0
 8009b56:	460b      	mov	r3, r1
 8009b58:	4650      	mov	r0, sl
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	f7f6 ff2e 	bl	80009bc <__aeabi_dcmplt>
 8009b60:	b120      	cbz	r0, 8009b6c <__ieee754_sqrt+0x190>
 8009b62:	1cab      	adds	r3, r5, #2
 8009b64:	bf08      	it	eq
 8009b66:	3701      	addeq	r7, #1
 8009b68:	3502      	adds	r5, #2
 8009b6a:	e7e2      	b.n	8009b32 <__ieee754_sqrt+0x156>
 8009b6c:	1c6b      	adds	r3, r5, #1
 8009b6e:	f023 0501 	bic.w	r5, r3, #1
 8009b72:	e7de      	b.n	8009b32 <__ieee754_sqrt+0x156>
 8009b74:	7ff00000 	.word	0x7ff00000
 8009b78:	0800c4e0 	.word	0x0800c4e0
 8009b7c:	0800c4d8 	.word	0x0800c4d8

08009b80 <truncf>:
 8009b80:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009b84:	3b7f      	subs	r3, #127	@ 0x7f
 8009b86:	2b16      	cmp	r3, #22
 8009b88:	4601      	mov	r1, r0
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	dc0a      	bgt.n	8009ba4 <truncf+0x24>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 8009b94:	db04      	blt.n	8009ba0 <truncf+0x20>
 8009b96:	4a06      	ldr	r2, [pc, #24]	@ (8009bb0 <truncf+0x30>)
 8009b98:	fa42 f303 	asr.w	r3, r2, r3
 8009b9c:	4003      	ands	r3, r0
 8009b9e:	4319      	orrs	r1, r3
 8009ba0:	4608      	mov	r0, r1
 8009ba2:	bd10      	pop	{r4, pc}
 8009ba4:	2b80      	cmp	r3, #128	@ 0x80
 8009ba6:	d1fb      	bne.n	8009ba0 <truncf+0x20>
 8009ba8:	f7f6 ffe4 	bl	8000b74 <__addsf3>
 8009bac:	4601      	mov	r1, r0
 8009bae:	e7f7      	b.n	8009ba0 <truncf+0x20>
 8009bb0:	ff800000 	.word	0xff800000
 8009bb4:	00000000 	.word	0x00000000

08009bb8 <__kernel_cos>:
 8009bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009bc0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	e9cd 2300 	strd	r2, r3, [sp]
 8009bcc:	d204      	bcs.n	8009bd8 <__kernel_cos+0x20>
 8009bce:	f7f6 ff33 	bl	8000a38 <__aeabi_d2iz>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f000 8086 	beq.w	8009ce4 <__kernel_cos+0x12c>
 8009bd8:	4642      	mov	r2, r8
 8009bda:	464b      	mov	r3, r9
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7f6 fc7a 	bl	80004d8 <__aeabi_dmul>
 8009be4:	2200      	movs	r2, #0
 8009be6:	4b4e      	ldr	r3, [pc, #312]	@ (8009d20 <__kernel_cos+0x168>)
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	f7f6 fc74 	bl	80004d8 <__aeabi_dmul>
 8009bf0:	a33f      	add	r3, pc, #252	@ (adr r3, 8009cf0 <__kernel_cos+0x138>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fc6b 	bl	80004d8 <__aeabi_dmul>
 8009c02:	a33d      	add	r3, pc, #244	@ (adr r3, 8009cf8 <__kernel_cos+0x140>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 fab0 	bl	800016c <__adddf3>
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	462b      	mov	r3, r5
 8009c10:	f7f6 fc62 	bl	80004d8 <__aeabi_dmul>
 8009c14:	a33a      	add	r3, pc, #232	@ (adr r3, 8009d00 <__kernel_cos+0x148>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 faa5 	bl	8000168 <__aeabi_dsub>
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	f7f6 fc59 	bl	80004d8 <__aeabi_dmul>
 8009c26:	a338      	add	r3, pc, #224	@ (adr r3, 8009d08 <__kernel_cos+0x150>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fa9e 	bl	800016c <__adddf3>
 8009c30:	4622      	mov	r2, r4
 8009c32:	462b      	mov	r3, r5
 8009c34:	f7f6 fc50 	bl	80004d8 <__aeabi_dmul>
 8009c38:	a335      	add	r3, pc, #212	@ (adr r3, 8009d10 <__kernel_cos+0x158>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fa93 	bl	8000168 <__aeabi_dsub>
 8009c42:	4622      	mov	r2, r4
 8009c44:	462b      	mov	r3, r5
 8009c46:	f7f6 fc47 	bl	80004d8 <__aeabi_dmul>
 8009c4a:	a333      	add	r3, pc, #204	@ (adr r3, 8009d18 <__kernel_cos+0x160>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fa8c 	bl	800016c <__adddf3>
 8009c54:	4622      	mov	r2, r4
 8009c56:	462b      	mov	r3, r5
 8009c58:	f7f6 fc3e 	bl	80004d8 <__aeabi_dmul>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	462b      	mov	r3, r5
 8009c60:	f7f6 fc3a 	bl	80004d8 <__aeabi_dmul>
 8009c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c68:	4604      	mov	r4, r0
 8009c6a:	460d      	mov	r5, r1
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4649      	mov	r1, r9
 8009c70:	f7f6 fc32 	bl	80004d8 <__aeabi_dmul>
 8009c74:	460b      	mov	r3, r1
 8009c76:	4602      	mov	r2, r0
 8009c78:	4629      	mov	r1, r5
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f7f6 fa74 	bl	8000168 <__aeabi_dsub>
 8009c80:	4b28      	ldr	r3, [pc, #160]	@ (8009d24 <__kernel_cos+0x16c>)
 8009c82:	4680      	mov	r8, r0
 8009c84:	429e      	cmp	r6, r3
 8009c86:	4689      	mov	r9, r1
 8009c88:	d80e      	bhi.n	8009ca8 <__kernel_cos+0xf0>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4659      	mov	r1, fp
 8009c92:	f7f6 fa69 	bl	8000168 <__aeabi_dsub>
 8009c96:	4602      	mov	r2, r0
 8009c98:	2000      	movs	r0, #0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4922      	ldr	r1, [pc, #136]	@ (8009d28 <__kernel_cos+0x170>)
 8009c9e:	f7f6 fa63 	bl	8000168 <__aeabi_dsub>
 8009ca2:	b003      	add	sp, #12
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca8:	2400      	movs	r4, #0
 8009caa:	4b20      	ldr	r3, [pc, #128]	@ (8009d2c <__kernel_cos+0x174>)
 8009cac:	4622      	mov	r2, r4
 8009cae:	429e      	cmp	r6, r3
 8009cb0:	bf8c      	ite	hi
 8009cb2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009d30 <__kernel_cos+0x178>)
 8009cb4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009cb8:	462b      	mov	r3, r5
 8009cba:	2000      	movs	r0, #0
 8009cbc:	491a      	ldr	r1, [pc, #104]	@ (8009d28 <__kernel_cos+0x170>)
 8009cbe:	f7f6 fa53 	bl	8000168 <__aeabi_dsub>
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	462b      	mov	r3, r5
 8009cca:	4650      	mov	r0, sl
 8009ccc:	4659      	mov	r1, fp
 8009cce:	f7f6 fa4b 	bl	8000168 <__aeabi_dsub>
 8009cd2:	4642      	mov	r2, r8
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	f7f6 fa47 	bl	8000168 <__aeabi_dsub>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	e7dc      	b.n	8009c9e <__kernel_cos+0xe6>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	4910      	ldr	r1, [pc, #64]	@ (8009d28 <__kernel_cos+0x170>)
 8009ce8:	e7db      	b.n	8009ca2 <__kernel_cos+0xea>
 8009cea:	bf00      	nop
 8009cec:	f3af 8000 	nop.w
 8009cf0:	be8838d4 	.word	0xbe8838d4
 8009cf4:	bda8fae9 	.word	0xbda8fae9
 8009cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009cfc:	3e21ee9e 	.word	0x3e21ee9e
 8009d00:	809c52ad 	.word	0x809c52ad
 8009d04:	3e927e4f 	.word	0x3e927e4f
 8009d08:	19cb1590 	.word	0x19cb1590
 8009d0c:	3efa01a0 	.word	0x3efa01a0
 8009d10:	16c15177 	.word	0x16c15177
 8009d14:	3f56c16c 	.word	0x3f56c16c
 8009d18:	5555554c 	.word	0x5555554c
 8009d1c:	3fa55555 	.word	0x3fa55555
 8009d20:	3fe00000 	.word	0x3fe00000
 8009d24:	3fd33332 	.word	0x3fd33332
 8009d28:	3ff00000 	.word	0x3ff00000
 8009d2c:	3fe90000 	.word	0x3fe90000
 8009d30:	3fd20000 	.word	0x3fd20000
 8009d34:	00000000 	.word	0x00000000

08009d38 <__kernel_sin>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	461f      	mov	r7, r3
 8009d3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d42:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009d46:	4604      	mov	r4, r0
 8009d48:	460d      	mov	r5, r1
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	d203      	bcs.n	8009d58 <__kernel_sin+0x20>
 8009d50:	f7f6 fe72 	bl	8000a38 <__aeabi_d2iz>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d051      	beq.n	8009dfc <__kernel_sin+0xc4>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fbba 	bl	80004d8 <__aeabi_dmul>
 8009d64:	4682      	mov	sl, r0
 8009d66:	468b      	mov	fp, r1
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f7f6 fbb2 	bl	80004d8 <__aeabi_dmul>
 8009d74:	a33e      	add	r3, pc, #248	@ (adr r3, 8009e70 <__kernel_sin+0x138>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4689      	mov	r9, r1
 8009d7e:	4650      	mov	r0, sl
 8009d80:	4659      	mov	r1, fp
 8009d82:	f7f6 fba9 	bl	80004d8 <__aeabi_dmul>
 8009d86:	a33c      	add	r3, pc, #240	@ (adr r3, 8009e78 <__kernel_sin+0x140>)
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f7f6 f9ec 	bl	8000168 <__aeabi_dsub>
 8009d90:	4652      	mov	r2, sl
 8009d92:	465b      	mov	r3, fp
 8009d94:	f7f6 fba0 	bl	80004d8 <__aeabi_dmul>
 8009d98:	a339      	add	r3, pc, #228	@ (adr r3, 8009e80 <__kernel_sin+0x148>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 f9e5 	bl	800016c <__adddf3>
 8009da2:	4652      	mov	r2, sl
 8009da4:	465b      	mov	r3, fp
 8009da6:	f7f6 fb97 	bl	80004d8 <__aeabi_dmul>
 8009daa:	a337      	add	r3, pc, #220	@ (adr r3, 8009e88 <__kernel_sin+0x150>)
 8009dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db0:	f7f6 f9da 	bl	8000168 <__aeabi_dsub>
 8009db4:	4652      	mov	r2, sl
 8009db6:	465b      	mov	r3, fp
 8009db8:	f7f6 fb8e 	bl	80004d8 <__aeabi_dmul>
 8009dbc:	a334      	add	r3, pc, #208	@ (adr r3, 8009e90 <__kernel_sin+0x158>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 f9d3 	bl	800016c <__adddf3>
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8009dcc:	b9db      	cbnz	r3, 8009e06 <__kernel_sin+0xce>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	4659      	mov	r1, fp
 8009dd6:	f7f6 fb7f 	bl	80004d8 <__aeabi_dmul>
 8009dda:	a32f      	add	r3, pc, #188	@ (adr r3, 8009e98 <__kernel_sin+0x160>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 f9c2 	bl	8000168 <__aeabi_dsub>
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	f7f6 fb76 	bl	80004d8 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 f9ba 	bl	800016c <__adddf3>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	b005      	add	sp, #20
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	2200      	movs	r2, #0
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	4b24      	ldr	r3, [pc, #144]	@ (8009ea0 <__kernel_sin+0x168>)
 8009e0e:	f7f6 fb63 	bl	80004d8 <__aeabi_dmul>
 8009e12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fb5b 	bl	80004d8 <__aeabi_dmul>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e2a:	f7f6 f99d 	bl	8000168 <__aeabi_dsub>
 8009e2e:	4652      	mov	r2, sl
 8009e30:	465b      	mov	r3, fp
 8009e32:	f7f6 fb51 	bl	80004d8 <__aeabi_dmul>
 8009e36:	4632      	mov	r2, r6
 8009e38:	463b      	mov	r3, r7
 8009e3a:	f7f6 f995 	bl	8000168 <__aeabi_dsub>
 8009e3e:	a316      	add	r3, pc, #88	@ (adr r3, 8009e98 <__kernel_sin+0x160>)
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	4606      	mov	r6, r0
 8009e46:	460f      	mov	r7, r1
 8009e48:	4640      	mov	r0, r8
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	f7f6 fb44 	bl	80004d8 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 f988 	bl	800016c <__adddf3>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4620      	mov	r0, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7f6 f980 	bl	8000168 <__aeabi_dsub>
 8009e68:	e7c6      	b.n	8009df8 <__kernel_sin+0xc0>
 8009e6a:	bf00      	nop
 8009e6c:	f3af 8000 	nop.w
 8009e70:	5acfd57c 	.word	0x5acfd57c
 8009e74:	3de5d93a 	.word	0x3de5d93a
 8009e78:	8a2b9ceb 	.word	0x8a2b9ceb
 8009e7c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009e80:	57b1fe7d 	.word	0x57b1fe7d
 8009e84:	3ec71de3 	.word	0x3ec71de3
 8009e88:	19c161d5 	.word	0x19c161d5
 8009e8c:	3f2a01a0 	.word	0x3f2a01a0
 8009e90:	1110f8a6 	.word	0x1110f8a6
 8009e94:	3f811111 	.word	0x3f811111
 8009e98:	55555549 	.word	0x55555549
 8009e9c:	3fc55555 	.word	0x3fc55555
 8009ea0:	3fe00000 	.word	0x3fe00000
 8009ea4:	00000000 	.word	0x00000000

08009ea8 <__ieee754_atan2>:
 8009ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	4617      	mov	r7, r2
 8009eae:	4690      	mov	r8, r2
 8009eb0:	4699      	mov	r9, r3
 8009eb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009eb6:	427b      	negs	r3, r7
 8009eb8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800a040 <__ieee754_atan2+0x198>
 8009ebc:	433b      	orrs	r3, r7
 8009ebe:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ec2:	4553      	cmp	r3, sl
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	d809      	bhi.n	8009ede <__ieee754_atan2+0x36>
 8009eca:	4246      	negs	r6, r0
 8009ecc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009ed0:	4306      	orrs	r6, r0
 8009ed2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009ed6:	4556      	cmp	r6, sl
 8009ed8:	468e      	mov	lr, r1
 8009eda:	4683      	mov	fp, r0
 8009edc:	d908      	bls.n	8009ef0 <__ieee754_atan2+0x48>
 8009ede:	4642      	mov	r2, r8
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	f7f6 f941 	bl	800016c <__adddf3>
 8009eea:	4604      	mov	r4, r0
 8009eec:	460d      	mov	r5, r1
 8009eee:	e016      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009ef0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009ef4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ef8:	433e      	orrs	r6, r7
 8009efa:	d103      	bne.n	8009f04 <__ieee754_atan2+0x5c>
 8009efc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	f000 ba9e 	b.w	800a440 <atan>
 8009f04:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009f08:	f006 0602 	and.w	r6, r6, #2
 8009f0c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009f10:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009f14:	d107      	bne.n	8009f26 <__ieee754_atan2+0x7e>
 8009f16:	2e02      	cmp	r6, #2
 8009f18:	d064      	beq.n	8009fe4 <__ieee754_atan2+0x13c>
 8009f1a:	2e03      	cmp	r6, #3
 8009f1c:	d066      	beq.n	8009fec <__ieee754_atan2+0x144>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4629      	mov	r1, r5
 8009f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f26:	4317      	orrs	r7, r2
 8009f28:	d106      	bne.n	8009f38 <__ieee754_atan2+0x90>
 8009f2a:	f1be 0f00 	cmp.w	lr, #0
 8009f2e:	db68      	blt.n	800a002 <__ieee754_atan2+0x15a>
 8009f30:	a537      	add	r5, pc, #220	@ (adr r5, 800a010 <__ieee754_atan2+0x168>)
 8009f32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f36:	e7f2      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009f38:	4552      	cmp	r2, sl
 8009f3a:	d10f      	bne.n	8009f5c <__ieee754_atan2+0xb4>
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	f106 36ff 	add.w	r6, r6, #4294967295
 8009f42:	d107      	bne.n	8009f54 <__ieee754_atan2+0xac>
 8009f44:	2e02      	cmp	r6, #2
 8009f46:	d855      	bhi.n	8009ff4 <__ieee754_atan2+0x14c>
 8009f48:	4b3e      	ldr	r3, [pc, #248]	@ (800a044 <__ieee754_atan2+0x19c>)
 8009f4a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f52:	e7e4      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009f54:	2e02      	cmp	r6, #2
 8009f56:	d851      	bhi.n	8009ffc <__ieee754_atan2+0x154>
 8009f58:	4b3b      	ldr	r3, [pc, #236]	@ (800a048 <__ieee754_atan2+0x1a0>)
 8009f5a:	e7f6      	b.n	8009f4a <__ieee754_atan2+0xa2>
 8009f5c:	4553      	cmp	r3, sl
 8009f5e:	d0e4      	beq.n	8009f2a <__ieee754_atan2+0x82>
 8009f60:	1a9b      	subs	r3, r3, r2
 8009f62:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009f66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f6a:	da21      	bge.n	8009fb0 <__ieee754_atan2+0x108>
 8009f6c:	f1b9 0f00 	cmp.w	r9, #0
 8009f70:	da01      	bge.n	8009f76 <__ieee754_atan2+0xce>
 8009f72:	323c      	adds	r2, #60	@ 0x3c
 8009f74:	db20      	blt.n	8009fb8 <__ieee754_atan2+0x110>
 8009f76:	4642      	mov	r2, r8
 8009f78:	464b      	mov	r3, r9
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7f6 fbd5 	bl	800072c <__aeabi_ddiv>
 8009f82:	f000 fbed 	bl	800a760 <fabs>
 8009f86:	f000 fa5b 	bl	800a440 <atan>
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	460d      	mov	r5, r1
 8009f8e:	2e01      	cmp	r6, #1
 8009f90:	d015      	beq.n	8009fbe <__ieee754_atan2+0x116>
 8009f92:	2e02      	cmp	r6, #2
 8009f94:	d017      	beq.n	8009fc6 <__ieee754_atan2+0x11e>
 8009f96:	2e00      	cmp	r6, #0
 8009f98:	d0c1      	beq.n	8009f1e <__ieee754_atan2+0x76>
 8009f9a:	a31f      	add	r3, pc, #124	@ (adr r3, 800a018 <__ieee754_atan2+0x170>)
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 f8e0 	bl	8000168 <__aeabi_dsub>
 8009fa8:	a31d      	add	r3, pc, #116	@ (adr r3, 800a020 <__ieee754_atan2+0x178>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	e016      	b.n	8009fde <__ieee754_atan2+0x136>
 8009fb0:	a517      	add	r5, pc, #92	@ (adr r5, 800a010 <__ieee754_atan2+0x168>)
 8009fb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fb6:	e7ea      	b.n	8009f8e <__ieee754_atan2+0xe6>
 8009fb8:	2400      	movs	r4, #0
 8009fba:	2500      	movs	r5, #0
 8009fbc:	e7e7      	b.n	8009f8e <__ieee754_atan2+0xe6>
 8009fbe:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009fc2:	461d      	mov	r5, r3
 8009fc4:	e7ab      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009fc6:	a314      	add	r3, pc, #80	@ (adr r3, 800a018 <__ieee754_atan2+0x170>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 f8ca 	bl	8000168 <__aeabi_dsub>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	a111      	add	r1, pc, #68	@ (adr r1, 800a020 <__ieee754_atan2+0x178>)
 8009fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fde:	f7f6 f8c3 	bl	8000168 <__aeabi_dsub>
 8009fe2:	e782      	b.n	8009eea <__ieee754_atan2+0x42>
 8009fe4:	a50e      	add	r5, pc, #56	@ (adr r5, 800a020 <__ieee754_atan2+0x178>)
 8009fe6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fea:	e798      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009fec:	a50e      	add	r5, pc, #56	@ (adr r5, 800a028 <__ieee754_atan2+0x180>)
 8009fee:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ff2:	e794      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009ff4:	a50e      	add	r5, pc, #56	@ (adr r5, 800a030 <__ieee754_atan2+0x188>)
 8009ff6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ffa:	e790      	b.n	8009f1e <__ieee754_atan2+0x76>
 8009ffc:	2400      	movs	r4, #0
 8009ffe:	2500      	movs	r5, #0
 800a000:	e78d      	b.n	8009f1e <__ieee754_atan2+0x76>
 800a002:	a50d      	add	r5, pc, #52	@ (adr r5, 800a038 <__ieee754_atan2+0x190>)
 800a004:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a008:	e789      	b.n	8009f1e <__ieee754_atan2+0x76>
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w
 800a010:	54442d18 	.word	0x54442d18
 800a014:	3ff921fb 	.word	0x3ff921fb
 800a018:	33145c07 	.word	0x33145c07
 800a01c:	3ca1a626 	.word	0x3ca1a626
 800a020:	54442d18 	.word	0x54442d18
 800a024:	400921fb 	.word	0x400921fb
 800a028:	54442d18 	.word	0x54442d18
 800a02c:	c00921fb 	.word	0xc00921fb
 800a030:	54442d18 	.word	0x54442d18
 800a034:	3fe921fb 	.word	0x3fe921fb
 800a038:	54442d18 	.word	0x54442d18
 800a03c:	bff921fb 	.word	0xbff921fb
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	0800c500 	.word	0x0800c500
 800a048:	0800c4e8 	.word	0x0800c4e8
 800a04c:	00000000 	.word	0x00000000

0800a050 <__ieee754_rem_pio2>:
 800a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a054:	4bc4      	ldr	r3, [pc, #784]	@ (800a368 <__ieee754_rem_pio2+0x318>)
 800a056:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a05a:	b08d      	sub	sp, #52	@ 0x34
 800a05c:	4598      	cmp	r8, r3
 800a05e:	4606      	mov	r6, r0
 800a060:	460f      	mov	r7, r1
 800a062:	4614      	mov	r4, r2
 800a064:	9104      	str	r1, [sp, #16]
 800a066:	d807      	bhi.n	800a078 <__ieee754_rem_pio2+0x28>
 800a068:	e9c2 6700 	strd	r6, r7, [r2]
 800a06c:	2300      	movs	r3, #0
 800a06e:	2200      	movs	r2, #0
 800a070:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a074:	2500      	movs	r5, #0
 800a076:	e026      	b.n	800a0c6 <__ieee754_rem_pio2+0x76>
 800a078:	4bbc      	ldr	r3, [pc, #752]	@ (800a36c <__ieee754_rem_pio2+0x31c>)
 800a07a:	4598      	cmp	r8, r3
 800a07c:	d876      	bhi.n	800a16c <__ieee754_rem_pio2+0x11c>
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	4dbb      	ldr	r5, [pc, #748]	@ (800a370 <__ieee754_rem_pio2+0x320>)
 800a082:	2b00      	cmp	r3, #0
 800a084:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a330 <__ieee754_rem_pio2+0x2e0>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	dd38      	ble.n	800a0fe <__ieee754_rem_pio2+0xae>
 800a08c:	f7f6 f86c 	bl	8000168 <__aeabi_dsub>
 800a090:	45a8      	cmp	r8, r5
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	d01a      	beq.n	800a0ce <__ieee754_rem_pio2+0x7e>
 800a098:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a338 <__ieee754_rem_pio2+0x2e8>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f863 	bl	8000168 <__aeabi_dsub>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 f85b 	bl	8000168 <__aeabi_dsub>
 800a0b2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a338 <__ieee754_rem_pio2+0x2e8>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 f856 	bl	8000168 <__aeabi_dsub>
 800a0bc:	2501      	movs	r5, #1
 800a0be:	e9c4 8900 	strd	r8, r9, [r4]
 800a0c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	b00d      	add	sp, #52	@ 0x34
 800a0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ce:	a39c      	add	r3, pc, #624	@ (adr r3, 800a340 <__ieee754_rem_pio2+0x2f0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f848 	bl	8000168 <__aeabi_dsub>
 800a0d8:	a39b      	add	r3, pc, #620	@ (adr r3, 800a348 <__ieee754_rem_pio2+0x2f8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	f7f6 f841 	bl	8000168 <__aeabi_dsub>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 f839 	bl	8000168 <__aeabi_dsub>
 800a0f6:	a394      	add	r3, pc, #592	@ (adr r3, 800a348 <__ieee754_rem_pio2+0x2f8>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	e7dc      	b.n	800a0b8 <__ieee754_rem_pio2+0x68>
 800a0fe:	f7f6 f835 	bl	800016c <__adddf3>
 800a102:	45a8      	cmp	r8, r5
 800a104:	4606      	mov	r6, r0
 800a106:	460f      	mov	r7, r1
 800a108:	d018      	beq.n	800a13c <__ieee754_rem_pio2+0xec>
 800a10a:	a38b      	add	r3, pc, #556	@ (adr r3, 800a338 <__ieee754_rem_pio2+0x2e8>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 f82c 	bl	800016c <__adddf3>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4680      	mov	r8, r0
 800a11a:	4689      	mov	r9, r1
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 f822 	bl	8000168 <__aeabi_dsub>
 800a124:	a384      	add	r3, pc, #528	@ (adr r3, 800a338 <__ieee754_rem_pio2+0x2e8>)
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	f7f6 f81f 	bl	800016c <__adddf3>
 800a12e:	f04f 35ff 	mov.w	r5, #4294967295
 800a132:	e9c4 8900 	strd	r8, r9, [r4]
 800a136:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a13a:	e7c4      	b.n	800a0c6 <__ieee754_rem_pio2+0x76>
 800a13c:	a380      	add	r3, pc, #512	@ (adr r3, 800a340 <__ieee754_rem_pio2+0x2f0>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f813 	bl	800016c <__adddf3>
 800a146:	a380      	add	r3, pc, #512	@ (adr r3, 800a348 <__ieee754_rem_pio2+0x2f8>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	4606      	mov	r6, r0
 800a14e:	460f      	mov	r7, r1
 800a150:	f7f6 f80c 	bl	800016c <__adddf3>
 800a154:	4602      	mov	r2, r0
 800a156:	460b      	mov	r3, r1
 800a158:	4680      	mov	r8, r0
 800a15a:	4689      	mov	r9, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 f802 	bl	8000168 <__aeabi_dsub>
 800a164:	a378      	add	r3, pc, #480	@ (adr r3, 800a348 <__ieee754_rem_pio2+0x2f8>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	e7de      	b.n	800a12a <__ieee754_rem_pio2+0xda>
 800a16c:	4b81      	ldr	r3, [pc, #516]	@ (800a374 <__ieee754_rem_pio2+0x324>)
 800a16e:	4598      	cmp	r8, r3
 800a170:	f200 80cf 	bhi.w	800a312 <__ieee754_rem_pio2+0x2c2>
 800a174:	f000 faf4 	bl	800a760 <fabs>
 800a178:	a375      	add	r3, pc, #468	@ (adr r3, 800a350 <__ieee754_rem_pio2+0x300>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	4606      	mov	r6, r0
 800a180:	460f      	mov	r7, r1
 800a182:	f7f6 f9a9 	bl	80004d8 <__aeabi_dmul>
 800a186:	2200      	movs	r2, #0
 800a188:	4b7b      	ldr	r3, [pc, #492]	@ (800a378 <__ieee754_rem_pio2+0x328>)
 800a18a:	f7f5 ffef 	bl	800016c <__adddf3>
 800a18e:	f7f6 fc53 	bl	8000a38 <__aeabi_d2iz>
 800a192:	4605      	mov	r5, r0
 800a194:	f7f6 f936 	bl	8000404 <__aeabi_i2d>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1a0:	a363      	add	r3, pc, #396	@ (adr r3, 800a330 <__ieee754_rem_pio2+0x2e0>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	f7f6 f997 	bl	80004d8 <__aeabi_dmul>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7f5 ffd9 	bl	8000168 <__aeabi_dsub>
 800a1b6:	a360      	add	r3, pc, #384	@ (adr r3, 800a338 <__ieee754_rem_pio2+0x2e8>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c4:	f7f6 f988 	bl	80004d8 <__aeabi_dmul>
 800a1c8:	2d1f      	cmp	r5, #31
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	dc0c      	bgt.n	800a1ea <__ieee754_rem_pio2+0x19a>
 800a1d0:	4b6a      	ldr	r3, [pc, #424]	@ (800a37c <__ieee754_rem_pio2+0x32c>)
 800a1d2:	1e6a      	subs	r2, r5, #1
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	4543      	cmp	r3, r8
 800a1da:	d006      	beq.n	800a1ea <__ieee754_rem_pio2+0x19a>
 800a1dc:	4632      	mov	r2, r6
 800a1de:	463b      	mov	r3, r7
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	4659      	mov	r1, fp
 800a1e4:	f7f5 ffc0 	bl	8000168 <__aeabi_dsub>
 800a1e8:	e00e      	b.n	800a208 <__ieee754_rem_pio2+0x1b8>
 800a1ea:	463b      	mov	r3, r7
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4650      	mov	r0, sl
 800a1f0:	4659      	mov	r1, fp
 800a1f2:	f7f5 ffb9 	bl	8000168 <__aeabi_dsub>
 800a1f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1fa:	9305      	str	r3, [sp, #20]
 800a1fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a200:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a204:	2b10      	cmp	r3, #16
 800a206:	dc02      	bgt.n	800a20e <__ieee754_rem_pio2+0x1be>
 800a208:	e9c4 0100 	strd	r0, r1, [r4]
 800a20c:	e039      	b.n	800a282 <__ieee754_rem_pio2+0x232>
 800a20e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a340 <__ieee754_rem_pio2+0x2f0>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a218:	f7f6 f95e 	bl	80004d8 <__aeabi_dmul>
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4650      	mov	r0, sl
 800a226:	4659      	mov	r1, fp
 800a228:	f7f5 ff9e 	bl	8000168 <__aeabi_dsub>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4680      	mov	r8, r0
 800a232:	4689      	mov	r9, r1
 800a234:	4650      	mov	r0, sl
 800a236:	4659      	mov	r1, fp
 800a238:	f7f5 ff96 	bl	8000168 <__aeabi_dsub>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	f7f5 ff92 	bl	8000168 <__aeabi_dsub>
 800a244:	a340      	add	r3, pc, #256	@ (adr r3, 800a348 <__ieee754_rem_pio2+0x2f8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a252:	f7f6 f941 	bl	80004d8 <__aeabi_dmul>
 800a256:	4632      	mov	r2, r6
 800a258:	463b      	mov	r3, r7
 800a25a:	f7f5 ff85 	bl	8000168 <__aeabi_dsub>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4606      	mov	r6, r0
 800a264:	460f      	mov	r7, r1
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f5 ff7d 	bl	8000168 <__aeabi_dsub>
 800a26e:	9a05      	ldr	r2, [sp, #20]
 800a270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b31      	cmp	r3, #49	@ 0x31
 800a278:	dc20      	bgt.n	800a2bc <__ieee754_rem_pio2+0x26c>
 800a27a:	46c2      	mov	sl, r8
 800a27c:	46cb      	mov	fp, r9
 800a27e:	e9c4 0100 	strd	r0, r1, [r4]
 800a282:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a286:	4650      	mov	r0, sl
 800a288:	4642      	mov	r2, r8
 800a28a:	464b      	mov	r3, r9
 800a28c:	4659      	mov	r1, fp
 800a28e:	f7f5 ff6b 	bl	8000168 <__aeabi_dsub>
 800a292:	463b      	mov	r3, r7
 800a294:	4632      	mov	r2, r6
 800a296:	f7f5 ff67 	bl	8000168 <__aeabi_dsub>
 800a29a:	9b04      	ldr	r3, [sp, #16]
 800a29c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f6bf af10 	bge.w	800a0c6 <__ieee754_rem_pio2+0x76>
 800a2a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a2aa:	6063      	str	r3, [r4, #4]
 800a2ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a2b0:	f8c4 8000 	str.w	r8, [r4]
 800a2b4:	60a0      	str	r0, [r4, #8]
 800a2b6:	60e3      	str	r3, [r4, #12]
 800a2b8:	426d      	negs	r5, r5
 800a2ba:	e704      	b.n	800a0c6 <__ieee754_rem_pio2+0x76>
 800a2bc:	a326      	add	r3, pc, #152	@ (adr r3, 800a358 <__ieee754_rem_pio2+0x308>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c6:	f7f6 f907 	bl	80004d8 <__aeabi_dmul>
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460f      	mov	r7, r1
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ff47 	bl	8000168 <__aeabi_dsub>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4682      	mov	sl, r0
 800a2e0:	468b      	mov	fp, r1
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f5 ff3f 	bl	8000168 <__aeabi_dsub>
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	463b      	mov	r3, r7
 800a2ee:	f7f5 ff3b 	bl	8000168 <__aeabi_dsub>
 800a2f2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a360 <__ieee754_rem_pio2+0x310>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	460f      	mov	r7, r1
 800a2fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a300:	f7f6 f8ea 	bl	80004d8 <__aeabi_dmul>
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	f7f5 ff2e 	bl	8000168 <__aeabi_dsub>
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	e764      	b.n	800a1dc <__ieee754_rem_pio2+0x18c>
 800a312:	4b1b      	ldr	r3, [pc, #108]	@ (800a380 <__ieee754_rem_pio2+0x330>)
 800a314:	4598      	cmp	r8, r3
 800a316:	d935      	bls.n	800a384 <__ieee754_rem_pio2+0x334>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	f7f5 ff24 	bl	8000168 <__aeabi_dsub>
 800a320:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a324:	e9c4 0100 	strd	r0, r1, [r4]
 800a328:	e6a4      	b.n	800a074 <__ieee754_rem_pio2+0x24>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
 800a330:	54400000 	.word	0x54400000
 800a334:	3ff921fb 	.word	0x3ff921fb
 800a338:	1a626331 	.word	0x1a626331
 800a33c:	3dd0b461 	.word	0x3dd0b461
 800a340:	1a600000 	.word	0x1a600000
 800a344:	3dd0b461 	.word	0x3dd0b461
 800a348:	2e037073 	.word	0x2e037073
 800a34c:	3ba3198a 	.word	0x3ba3198a
 800a350:	6dc9c883 	.word	0x6dc9c883
 800a354:	3fe45f30 	.word	0x3fe45f30
 800a358:	2e000000 	.word	0x2e000000
 800a35c:	3ba3198a 	.word	0x3ba3198a
 800a360:	252049c1 	.word	0x252049c1
 800a364:	397b839a 	.word	0x397b839a
 800a368:	3fe921fb 	.word	0x3fe921fb
 800a36c:	4002d97b 	.word	0x4002d97b
 800a370:	3ff921fb 	.word	0x3ff921fb
 800a374:	413921fb 	.word	0x413921fb
 800a378:	3fe00000 	.word	0x3fe00000
 800a37c:	0800c518 	.word	0x0800c518
 800a380:	7fefffff 	.word	0x7fefffff
 800a384:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a388:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a38c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a390:	460f      	mov	r7, r1
 800a392:	f7f6 fb51 	bl	8000a38 <__aeabi_d2iz>
 800a396:	f7f6 f835 	bl	8000404 <__aeabi_i2d>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4630      	mov	r0, r6
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3a6:	f7f5 fedf 	bl	8000168 <__aeabi_dsub>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4b21      	ldr	r3, [pc, #132]	@ (800a434 <__ieee754_rem_pio2+0x3e4>)
 800a3ae:	f7f6 f893 	bl	80004d8 <__aeabi_dmul>
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	f7f6 fb3f 	bl	8000a38 <__aeabi_d2iz>
 800a3ba:	f7f6 f823 	bl	8000404 <__aeabi_i2d>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3ca:	f7f5 fecd 	bl	8000168 <__aeabi_dsub>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4b18      	ldr	r3, [pc, #96]	@ (800a434 <__ieee754_rem_pio2+0x3e4>)
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	f04f 0803 	mov.w	r8, #3
 800a3da:	2600      	movs	r6, #0
 800a3dc:	2700      	movs	r7, #0
 800a3de:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a3e2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	46c2      	mov	sl, r8
 800a3f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3f4:	f7f6 fad8 	bl	80009a8 <__aeabi_dcmpeq>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d1f4      	bne.n	800a3e6 <__ieee754_rem_pio2+0x396>
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a438 <__ieee754_rem_pio2+0x3e8>)
 800a3fe:	462a      	mov	r2, r5
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	2302      	movs	r3, #2
 800a404:	4621      	mov	r1, r4
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	a806      	add	r0, sp, #24
 800a40a:	4653      	mov	r3, sl
 800a40c:	f000 f9ac 	bl	800a768 <__kernel_rem_pio2>
 800a410:	9b04      	ldr	r3, [sp, #16]
 800a412:	4605      	mov	r5, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f6bf ae56 	bge.w	800a0c6 <__ieee754_rem_pio2+0x76>
 800a41a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a41e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a422:	e9c4 2300 	strd	r2, r3, [r4]
 800a426:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a42a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a42e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a432:	e741      	b.n	800a2b8 <__ieee754_rem_pio2+0x268>
 800a434:	41700000 	.word	0x41700000
 800a438:	0800c598 	.word	0x0800c598
 800a43c:	00000000 	.word	0x00000000

0800a440 <atan>:
 800a440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4bbc      	ldr	r3, [pc, #752]	@ (800a738 <atan+0x2f8>)
 800a446:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a44a:	429e      	cmp	r6, r3
 800a44c:	4604      	mov	r4, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	468b      	mov	fp, r1
 800a452:	d918      	bls.n	800a486 <atan+0x46>
 800a454:	4bb9      	ldr	r3, [pc, #740]	@ (800a73c <atan+0x2fc>)
 800a456:	429e      	cmp	r6, r3
 800a458:	d801      	bhi.n	800a45e <atan+0x1e>
 800a45a:	d109      	bne.n	800a470 <atan+0x30>
 800a45c:	b140      	cbz	r0, 800a470 <atan+0x30>
 800a45e:	4622      	mov	r2, r4
 800a460:	462b      	mov	r3, r5
 800a462:	4620      	mov	r0, r4
 800a464:	4629      	mov	r1, r5
 800a466:	f7f5 fe81 	bl	800016c <__adddf3>
 800a46a:	4604      	mov	r4, r0
 800a46c:	460d      	mov	r5, r1
 800a46e:	e006      	b.n	800a47e <atan+0x3e>
 800a470:	f1bb 0f00 	cmp.w	fp, #0
 800a474:	f340 8123 	ble.w	800a6be <atan+0x27e>
 800a478:	a593      	add	r5, pc, #588	@ (adr r5, 800a6c8 <atan+0x288>)
 800a47a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a486:	4bae      	ldr	r3, [pc, #696]	@ (800a740 <atan+0x300>)
 800a488:	429e      	cmp	r6, r3
 800a48a:	d811      	bhi.n	800a4b0 <atan+0x70>
 800a48c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a490:	429e      	cmp	r6, r3
 800a492:	d80a      	bhi.n	800a4aa <atan+0x6a>
 800a494:	a38e      	add	r3, pc, #568	@ (adr r3, 800a6d0 <atan+0x290>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	f7f5 fe67 	bl	800016c <__adddf3>
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4ba8      	ldr	r3, [pc, #672]	@ (800a744 <atan+0x304>)
 800a4a2:	f7f6 faa9 	bl	80009f8 <__aeabi_dcmpgt>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d1e9      	bne.n	800a47e <atan+0x3e>
 800a4aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a4ae:	e027      	b.n	800a500 <atan+0xc0>
 800a4b0:	f000 f956 	bl	800a760 <fabs>
 800a4b4:	4ba4      	ldr	r3, [pc, #656]	@ (800a748 <atan+0x308>)
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	429e      	cmp	r6, r3
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	f200 80b8 	bhi.w	800a630 <atan+0x1f0>
 800a4c0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a4c4:	429e      	cmp	r6, r3
 800a4c6:	f200 809c 	bhi.w	800a602 <atan+0x1c2>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	f7f5 fe4d 	bl	800016c <__adddf3>
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	4b9b      	ldr	r3, [pc, #620]	@ (800a744 <atan+0x304>)
 800a4d6:	f7f5 fe47 	bl	8000168 <__aeabi_dsub>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f5 fe40 	bl	800016c <__adddf3>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f6 f91a 	bl	800072c <__aeabi_ddiv>
 800a4f8:	f04f 0a00 	mov.w	sl, #0
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	4622      	mov	r2, r4
 800a502:	462b      	mov	r3, r5
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 ffe6 	bl	80004d8 <__aeabi_dmul>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4680      	mov	r8, r0
 800a512:	4689      	mov	r9, r1
 800a514:	f7f5 ffe0 	bl	80004d8 <__aeabi_dmul>
 800a518:	a36f      	add	r3, pc, #444	@ (adr r3, 800a6d8 <atan+0x298>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	4606      	mov	r6, r0
 800a520:	460f      	mov	r7, r1
 800a522:	f7f5 ffd9 	bl	80004d8 <__aeabi_dmul>
 800a526:	a36e      	add	r3, pc, #440	@ (adr r3, 800a6e0 <atan+0x2a0>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f5 fe1e 	bl	800016c <__adddf3>
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	f7f5 ffd0 	bl	80004d8 <__aeabi_dmul>
 800a538:	a36b      	add	r3, pc, #428	@ (adr r3, 800a6e8 <atan+0x2a8>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 fe15 	bl	800016c <__adddf3>
 800a542:	4632      	mov	r2, r6
 800a544:	463b      	mov	r3, r7
 800a546:	f7f5 ffc7 	bl	80004d8 <__aeabi_dmul>
 800a54a:	a369      	add	r3, pc, #420	@ (adr r3, 800a6f0 <atan+0x2b0>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fe0c 	bl	800016c <__adddf3>
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_dmul>
 800a55c:	a366      	add	r3, pc, #408	@ (adr r3, 800a6f8 <atan+0x2b8>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe03 	bl	800016c <__adddf3>
 800a566:	4632      	mov	r2, r6
 800a568:	463b      	mov	r3, r7
 800a56a:	f7f5 ffb5 	bl	80004d8 <__aeabi_dmul>
 800a56e:	a364      	add	r3, pc, #400	@ (adr r3, 800a700 <atan+0x2c0>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f5 fdfa 	bl	800016c <__adddf3>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f5 ffac 	bl	80004d8 <__aeabi_dmul>
 800a580:	a361      	add	r3, pc, #388	@ (adr r3, 800a708 <atan+0x2c8>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	4680      	mov	r8, r0
 800a588:	4689      	mov	r9, r1
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f5 ffa3 	bl	80004d8 <__aeabi_dmul>
 800a592:	a35f      	add	r3, pc, #380	@ (adr r3, 800a710 <atan+0x2d0>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f7f5 fde6 	bl	8000168 <__aeabi_dsub>
 800a59c:	4632      	mov	r2, r6
 800a59e:	463b      	mov	r3, r7
 800a5a0:	f7f5 ff9a 	bl	80004d8 <__aeabi_dmul>
 800a5a4:	a35c      	add	r3, pc, #368	@ (adr r3, 800a718 <atan+0x2d8>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	f7f5 fddd 	bl	8000168 <__aeabi_dsub>
 800a5ae:	4632      	mov	r2, r6
 800a5b0:	463b      	mov	r3, r7
 800a5b2:	f7f5 ff91 	bl	80004d8 <__aeabi_dmul>
 800a5b6:	a35a      	add	r3, pc, #360	@ (adr r3, 800a720 <atan+0x2e0>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	f7f5 fdd4 	bl	8000168 <__aeabi_dsub>
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	f7f5 ff88 	bl	80004d8 <__aeabi_dmul>
 800a5c8:	a357      	add	r3, pc, #348	@ (adr r3, 800a728 <atan+0x2e8>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 fdcb 	bl	8000168 <__aeabi_dsub>
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	f7f5 ff7f 	bl	80004d8 <__aeabi_dmul>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	f7f5 fdc3 	bl	800016c <__adddf3>
 800a5e6:	4622      	mov	r2, r4
 800a5e8:	462b      	mov	r3, r5
 800a5ea:	f7f5 ff75 	bl	80004d8 <__aeabi_dmul>
 800a5ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	d144      	bne.n	800a682 <atan+0x242>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f5 fdb4 	bl	8000168 <__aeabi_dsub>
 800a600:	e733      	b.n	800a46a <atan+0x2a>
 800a602:	2200      	movs	r2, #0
 800a604:	4b4f      	ldr	r3, [pc, #316]	@ (800a744 <atan+0x304>)
 800a606:	f7f5 fdaf 	bl	8000168 <__aeabi_dsub>
 800a60a:	2200      	movs	r2, #0
 800a60c:	4606      	mov	r6, r0
 800a60e:	460f      	mov	r7, r1
 800a610:	4620      	mov	r0, r4
 800a612:	4629      	mov	r1, r5
 800a614:	4b4b      	ldr	r3, [pc, #300]	@ (800a744 <atan+0x304>)
 800a616:	f7f5 fda9 	bl	800016c <__adddf3>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f6 f883 	bl	800072c <__aeabi_ddiv>
 800a626:	f04f 0a01 	mov.w	sl, #1
 800a62a:	4604      	mov	r4, r0
 800a62c:	460d      	mov	r5, r1
 800a62e:	e767      	b.n	800a500 <atan+0xc0>
 800a630:	4b46      	ldr	r3, [pc, #280]	@ (800a74c <atan+0x30c>)
 800a632:	429e      	cmp	r6, r3
 800a634:	d21a      	bcs.n	800a66c <atan+0x22c>
 800a636:	2200      	movs	r2, #0
 800a638:	4b45      	ldr	r3, [pc, #276]	@ (800a750 <atan+0x310>)
 800a63a:	f7f5 fd95 	bl	8000168 <__aeabi_dsub>
 800a63e:	2200      	movs	r2, #0
 800a640:	4606      	mov	r6, r0
 800a642:	460f      	mov	r7, r1
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	4b41      	ldr	r3, [pc, #260]	@ (800a750 <atan+0x310>)
 800a64a:	f7f5 ff45 	bl	80004d8 <__aeabi_dmul>
 800a64e:	2200      	movs	r2, #0
 800a650:	4b3c      	ldr	r3, [pc, #240]	@ (800a744 <atan+0x304>)
 800a652:	f7f5 fd8b 	bl	800016c <__adddf3>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	f7f6 f865 	bl	800072c <__aeabi_ddiv>
 800a662:	f04f 0a02 	mov.w	sl, #2
 800a666:	4604      	mov	r4, r0
 800a668:	460d      	mov	r5, r1
 800a66a:	e749      	b.n	800a500 <atan+0xc0>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	2000      	movs	r0, #0
 800a672:	4938      	ldr	r1, [pc, #224]	@ (800a754 <atan+0x314>)
 800a674:	f7f6 f85a 	bl	800072c <__aeabi_ddiv>
 800a678:	f04f 0a03 	mov.w	sl, #3
 800a67c:	4604      	mov	r4, r0
 800a67e:	460d      	mov	r5, r1
 800a680:	e73e      	b.n	800a500 <atan+0xc0>
 800a682:	4b35      	ldr	r3, [pc, #212]	@ (800a758 <atan+0x318>)
 800a684:	4e35      	ldr	r6, [pc, #212]	@ (800a75c <atan+0x31c>)
 800a686:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	f7f5 fd6b 	bl	8000168 <__aeabi_dsub>
 800a692:	4622      	mov	r2, r4
 800a694:	462b      	mov	r3, r5
 800a696:	f7f5 fd67 	bl	8000168 <__aeabi_dsub>
 800a69a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a6a6:	f7f5 fd5f 	bl	8000168 <__aeabi_dsub>
 800a6aa:	f1bb 0f00 	cmp.w	fp, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	f6bf aee4 	bge.w	800a47e <atan+0x3e>
 800a6b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6ba:	461d      	mov	r5, r3
 800a6bc:	e6df      	b.n	800a47e <atan+0x3e>
 800a6be:	a51c      	add	r5, pc, #112	@ (adr r5, 800a730 <atan+0x2f0>)
 800a6c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a6c4:	e6db      	b.n	800a47e <atan+0x3e>
 800a6c6:	bf00      	nop
 800a6c8:	54442d18 	.word	0x54442d18
 800a6cc:	3ff921fb 	.word	0x3ff921fb
 800a6d0:	8800759c 	.word	0x8800759c
 800a6d4:	7e37e43c 	.word	0x7e37e43c
 800a6d8:	e322da11 	.word	0xe322da11
 800a6dc:	3f90ad3a 	.word	0x3f90ad3a
 800a6e0:	24760deb 	.word	0x24760deb
 800a6e4:	3fa97b4b 	.word	0x3fa97b4b
 800a6e8:	a0d03d51 	.word	0xa0d03d51
 800a6ec:	3fb10d66 	.word	0x3fb10d66
 800a6f0:	c54c206e 	.word	0xc54c206e
 800a6f4:	3fb745cd 	.word	0x3fb745cd
 800a6f8:	920083ff 	.word	0x920083ff
 800a6fc:	3fc24924 	.word	0x3fc24924
 800a700:	5555550d 	.word	0x5555550d
 800a704:	3fd55555 	.word	0x3fd55555
 800a708:	2c6a6c2f 	.word	0x2c6a6c2f
 800a70c:	bfa2b444 	.word	0xbfa2b444
 800a710:	52defd9a 	.word	0x52defd9a
 800a714:	3fadde2d 	.word	0x3fadde2d
 800a718:	af749a6d 	.word	0xaf749a6d
 800a71c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a720:	fe231671 	.word	0xfe231671
 800a724:	3fbc71c6 	.word	0x3fbc71c6
 800a728:	9998ebc4 	.word	0x9998ebc4
 800a72c:	3fc99999 	.word	0x3fc99999
 800a730:	54442d18 	.word	0x54442d18
 800a734:	bff921fb 	.word	0xbff921fb
 800a738:	440fffff 	.word	0x440fffff
 800a73c:	7ff00000 	.word	0x7ff00000
 800a740:	3fdbffff 	.word	0x3fdbffff
 800a744:	3ff00000 	.word	0x3ff00000
 800a748:	3ff2ffff 	.word	0x3ff2ffff
 800a74c:	40038000 	.word	0x40038000
 800a750:	3ff80000 	.word	0x3ff80000
 800a754:	bff00000 	.word	0xbff00000
 800a758:	0800c6a0 	.word	0x0800c6a0
 800a75c:	0800c6c0 	.word	0x0800c6c0

0800a760 <fabs>:
 800a760:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a764:	4619      	mov	r1, r3
 800a766:	4770      	bx	lr

0800a768 <__kernel_rem_pio2>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a770:	9308      	str	r3, [sp, #32]
 800a772:	9104      	str	r1, [sp, #16]
 800a774:	4bba      	ldr	r3, [pc, #744]	@ (800aa60 <__kernel_rem_pio2+0x2f8>)
 800a776:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a778:	f112 0f14 	cmn.w	r2, #20
 800a77c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a780:	bfa8      	it	ge
 800a782:	1ed4      	subge	r4, r2, #3
 800a784:	9302      	str	r3, [sp, #8]
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	bfb8      	it	lt
 800a78a:	2400      	movlt	r4, #0
 800a78c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a790:	9306      	str	r3, [sp, #24]
 800a792:	bfa4      	itt	ge
 800a794:	2318      	movge	r3, #24
 800a796:	fb94 f4f3 	sdivge	r4, r4, r3
 800a79a:	f06f 0317 	mvn.w	r3, #23
 800a79e:	fb04 3303 	mla	r3, r4, r3, r3
 800a7a2:	eb03 0a02 	add.w	sl, r3, r2
 800a7a6:	9a06      	ldr	r2, [sp, #24]
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	1aa7      	subs	r7, r4, r2
 800a7ac:	eb03 0802 	add.w	r8, r3, r2
 800a7b0:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9009      	str	r0, [sp, #36]	@ 0x24
 800a7be:	ae20      	add	r6, sp, #128	@ 0x80
 800a7c0:	4545      	cmp	r5, r8
 800a7c2:	dd13      	ble.n	800a7ec <__kernel_rem_pio2+0x84>
 800a7c4:	2700      	movs	r7, #0
 800a7c6:	9a08      	ldr	r2, [sp, #32]
 800a7c8:	ab20      	add	r3, sp, #128	@ 0x80
 800a7ca:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a7ce:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a7d2:	9b02      	ldr	r3, [sp, #8]
 800a7d4:	429f      	cmp	r7, r3
 800a7d6:	dc33      	bgt.n	800a840 <__kernel_rem_pio2+0xd8>
 800a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f1a3 0908 	sub.w	r9, r3, #8
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	46a8      	mov	r8, r5
 800a7e4:	2600      	movs	r6, #0
 800a7e6:	e9cd 2300 	strd	r2, r3, [sp]
 800a7ea:	e01f      	b.n	800a82c <__kernel_rem_pio2+0xc4>
 800a7ec:	42ef      	cmn	r7, r5
 800a7ee:	d40b      	bmi.n	800a808 <__kernel_rem_pio2+0xa0>
 800a7f0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a7f4:	e9cd 2300 	strd	r2, r3, [sp]
 800a7f8:	f7f5 fe04 	bl	8000404 <__aeabi_i2d>
 800a7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a800:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a804:	3501      	adds	r5, #1
 800a806:	e7db      	b.n	800a7c0 <__kernel_rem_pio2+0x58>
 800a808:	4610      	mov	r0, r2
 800a80a:	4619      	mov	r1, r3
 800a80c:	e7f8      	b.n	800a800 <__kernel_rem_pio2+0x98>
 800a80e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a812:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a816:	f7f5 fe5f 	bl	80004d8 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a822:	f7f5 fca3 	bl	800016c <__adddf3>
 800a826:	e9cd 0100 	strd	r0, r1, [sp]
 800a82a:	3601      	adds	r6, #1
 800a82c:	9b06      	ldr	r3, [sp, #24]
 800a82e:	429e      	cmp	r6, r3
 800a830:	dded      	ble.n	800a80e <__kernel_rem_pio2+0xa6>
 800a832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a836:	3701      	adds	r7, #1
 800a838:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a83c:	3508      	adds	r5, #8
 800a83e:	e7c8      	b.n	800a7d2 <__kernel_rem_pio2+0x6a>
 800a840:	9b02      	ldr	r3, [sp, #8]
 800a842:	aa0c      	add	r2, sp, #48	@ 0x30
 800a844:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a84a:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a84c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a850:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a854:	930a      	str	r3, [sp, #40]	@ 0x28
 800a856:	ab98      	add	r3, sp, #608	@ 0x260
 800a858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a85c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a860:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a862:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a866:	ae0c      	add	r6, sp, #48	@ 0x30
 800a868:	4699      	mov	r9, r3
 800a86a:	46b0      	mov	r8, r6
 800a86c:	465f      	mov	r7, fp
 800a86e:	9307      	str	r3, [sp, #28]
 800a870:	2f00      	cmp	r7, #0
 800a872:	dc71      	bgt.n	800a958 <__kernel_rem_pio2+0x1f0>
 800a874:	4652      	mov	r2, sl
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	f000 fa95 	bl	800ada8 <scalbn>
 800a87e:	2200      	movs	r2, #0
 800a880:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a884:	4604      	mov	r4, r0
 800a886:	460d      	mov	r5, r1
 800a888:	f7f5 fe26 	bl	80004d8 <__aeabi_dmul>
 800a88c:	f000 fb00 	bl	800ae90 <floor>
 800a890:	2200      	movs	r2, #0
 800a892:	4b74      	ldr	r3, [pc, #464]	@ (800aa64 <__kernel_rem_pio2+0x2fc>)
 800a894:	f7f5 fe20 	bl	80004d8 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fc62 	bl	8000168 <__aeabi_dsub>
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	f7f6 f8c6 	bl	8000a38 <__aeabi_d2iz>
 800a8ac:	9005      	str	r0, [sp, #20]
 800a8ae:	f7f5 fda9 	bl	8000404 <__aeabi_i2d>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f5 fc55 	bl	8000168 <__aeabi_dsub>
 800a8be:	f1ba 0f00 	cmp.w	sl, #0
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	4689      	mov	r9, r1
 800a8c6:	dd6d      	ble.n	800a9a4 <__kernel_rem_pio2+0x23c>
 800a8c8:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a8cc:	ab0c      	add	r3, sp, #48	@ 0x30
 800a8ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8d2:	9c05      	ldr	r4, [sp, #20]
 800a8d4:	f1ca 0018 	rsb	r0, sl, #24
 800a8d8:	fa43 f200 	asr.w	r2, r3, r0
 800a8dc:	4414      	add	r4, r2
 800a8de:	4082      	lsls	r2, r0
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	aa0c      	add	r2, sp, #48	@ 0x30
 800a8e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a8e8:	f1ca 0217 	rsb	r2, sl, #23
 800a8ec:	9405      	str	r4, [sp, #20]
 800a8ee:	4113      	asrs	r3, r2
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	9b00      	ldr	r3, [sp, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dd64      	ble.n	800a9c2 <__kernel_rem_pio2+0x25a>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a8fe:	4614      	mov	r4, r2
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	3301      	adds	r3, #1
 800a904:	9305      	str	r3, [sp, #20]
 800a906:	4593      	cmp	fp, r2
 800a908:	f300 809d 	bgt.w	800aa46 <__kernel_rem_pio2+0x2de>
 800a90c:	f1ba 0f00 	cmp.w	sl, #0
 800a910:	dd07      	ble.n	800a922 <__kernel_rem_pio2+0x1ba>
 800a912:	f1ba 0f01 	cmp.w	sl, #1
 800a916:	f000 80b3 	beq.w	800aa80 <__kernel_rem_pio2+0x318>
 800a91a:	f1ba 0f02 	cmp.w	sl, #2
 800a91e:	f000 80ba 	beq.w	800aa96 <__kernel_rem_pio2+0x32e>
 800a922:	9b00      	ldr	r3, [sp, #0]
 800a924:	2b02      	cmp	r3, #2
 800a926:	d14c      	bne.n	800a9c2 <__kernel_rem_pio2+0x25a>
 800a928:	4642      	mov	r2, r8
 800a92a:	464b      	mov	r3, r9
 800a92c:	2000      	movs	r0, #0
 800a92e:	494e      	ldr	r1, [pc, #312]	@ (800aa68 <__kernel_rem_pio2+0x300>)
 800a930:	f7f5 fc1a 	bl	8000168 <__aeabi_dsub>
 800a934:	4680      	mov	r8, r0
 800a936:	4689      	mov	r9, r1
 800a938:	2c00      	cmp	r4, #0
 800a93a:	d042      	beq.n	800a9c2 <__kernel_rem_pio2+0x25a>
 800a93c:	4652      	mov	r2, sl
 800a93e:	2000      	movs	r0, #0
 800a940:	4949      	ldr	r1, [pc, #292]	@ (800aa68 <__kernel_rem_pio2+0x300>)
 800a942:	f000 fa31 	bl	800ada8 <scalbn>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f5 fc0b 	bl	8000168 <__aeabi_dsub>
 800a952:	4680      	mov	r8, r0
 800a954:	4689      	mov	r9, r1
 800a956:	e034      	b.n	800a9c2 <__kernel_rem_pio2+0x25a>
 800a958:	2200      	movs	r2, #0
 800a95a:	4b44      	ldr	r3, [pc, #272]	@ (800aa6c <__kernel_rem_pio2+0x304>)
 800a95c:	4620      	mov	r0, r4
 800a95e:	4629      	mov	r1, r5
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_dmul>
 800a964:	f7f6 f868 	bl	8000a38 <__aeabi_d2iz>
 800a968:	f7f5 fd4c 	bl	8000404 <__aeabi_i2d>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	e9cd 2300 	strd	r2, r3, [sp]
 800a974:	2200      	movs	r2, #0
 800a976:	4b3e      	ldr	r3, [pc, #248]	@ (800aa70 <__kernel_rem_pio2+0x308>)
 800a978:	f7f5 fdae 	bl	80004d8 <__aeabi_dmul>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f5 fbf0 	bl	8000168 <__aeabi_dsub>
 800a988:	f7f6 f856 	bl	8000a38 <__aeabi_d2iz>
 800a98c:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800a990:	f848 0b04 	str.w	r0, [r8], #4
 800a994:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a998:	f7f5 fbe8 	bl	800016c <__adddf3>
 800a99c:	3f01      	subs	r7, #1
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	e765      	b.n	800a870 <__kernel_rem_pio2+0x108>
 800a9a4:	d106      	bne.n	800a9b4 <__kernel_rem_pio2+0x24c>
 800a9a6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a9aa:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9b0:	15db      	asrs	r3, r3, #23
 800a9b2:	e79d      	b.n	800a8f0 <__kernel_rem_pio2+0x188>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4b2f      	ldr	r3, [pc, #188]	@ (800aa74 <__kernel_rem_pio2+0x30c>)
 800a9b8:	f7f6 f814 	bl	80009e4 <__aeabi_dcmpge>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d13f      	bne.n	800aa40 <__kernel_rem_pio2+0x2d8>
 800a9c0:	9000      	str	r0, [sp, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	f7f5 ffed 	bl	80009a8 <__aeabi_dcmpeq>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f000 80b0 	beq.w	800ab34 <__kernel_rem_pio2+0x3cc>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a9da:	9902      	ldr	r1, [sp, #8]
 800a9dc:	428b      	cmp	r3, r1
 800a9de:	da62      	bge.n	800aaa6 <__kernel_rem_pio2+0x33e>
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d077      	beq.n	800aad4 <__kernel_rem_pio2+0x36c>
 800a9e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9e8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9ea:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a9ee:	f1aa 0a18 	sub.w	sl, sl, #24
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f6      	beq.n	800a9e4 <__kernel_rem_pio2+0x27c>
 800a9f6:	4652      	mov	r2, sl
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	491b      	ldr	r1, [pc, #108]	@ (800aa68 <__kernel_rem_pio2+0x300>)
 800a9fc:	f000 f9d4 	bl	800ada8 <scalbn>
 800aa00:	465d      	mov	r5, fp
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	f04f 0900 	mov.w	r9, #0
 800aa0a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800aa0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa6c <__kernel_rem_pio2+0x304>
 800aa10:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800aa14:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800aa18:	2d00      	cmp	r5, #0
 800aa1a:	f280 80c1 	bge.w	800aba0 <__kernel_rem_pio2+0x438>
 800aa1e:	465d      	mov	r5, fp
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	f2c0 80f1 	blt.w	800ac08 <__kernel_rem_pio2+0x4a0>
 800aa26:	4b14      	ldr	r3, [pc, #80]	@ (800aa78 <__kernel_rem_pio2+0x310>)
 800aa28:	f04f 0900 	mov.w	r9, #0
 800aa2c:	9306      	str	r3, [sp, #24]
 800aa2e:	ab70      	add	r3, sp, #448	@ 0x1c0
 800aa30:	f04f 0a00 	mov.w	sl, #0
 800aa34:	2700      	movs	r7, #0
 800aa36:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800aa3a:	ebab 0605 	sub.w	r6, fp, r5
 800aa3e:	e0d7      	b.n	800abf0 <__kernel_rem_pio2+0x488>
 800aa40:	2302      	movs	r3, #2
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	e758      	b.n	800a8f8 <__kernel_rem_pio2+0x190>
 800aa46:	f856 3b04 	ldr.w	r3, [r6], #4
 800aa4a:	b9bc      	cbnz	r4, 800aa7c <__kernel_rem_pio2+0x314>
 800aa4c:	b123      	cbz	r3, 800aa58 <__kernel_rem_pio2+0x2f0>
 800aa4e:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800aa52:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa56:	2301      	movs	r3, #1
 800aa58:	461c      	mov	r4, r3
 800aa5a:	3201      	adds	r2, #1
 800aa5c:	e753      	b.n	800a906 <__kernel_rem_pio2+0x19e>
 800aa5e:	bf00      	nop
 800aa60:	0800c720 	.word	0x0800c720
 800aa64:	40200000 	.word	0x40200000
 800aa68:	3ff00000 	.word	0x3ff00000
 800aa6c:	3e700000 	.word	0x3e700000
 800aa70:	41700000 	.word	0x41700000
 800aa74:	3fe00000 	.word	0x3fe00000
 800aa78:	0800c6e0 	.word	0x0800c6e0
 800aa7c:	1acb      	subs	r3, r1, r3
 800aa7e:	e7e8      	b.n	800aa52 <__kernel_rem_pio2+0x2ea>
 800aa80:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa84:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa8e:	a90c      	add	r1, sp, #48	@ 0x30
 800aa90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa94:	e745      	b.n	800a922 <__kernel_rem_pio2+0x1ba>
 800aa96:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800aa9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aaa4:	e7f3      	b.n	800aa8e <__kernel_rem_pio2+0x326>
 800aaa6:	a90c      	add	r1, sp, #48	@ 0x30
 800aaa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	430a      	orrs	r2, r1
 800aab0:	e793      	b.n	800a9da <__kernel_rem_pio2+0x272>
 800aab2:	3401      	adds	r4, #1
 800aab4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aab8:	2a00      	cmp	r2, #0
 800aaba:	d0fa      	beq.n	800aab2 <__kernel_rem_pio2+0x34a>
 800aabc:	9b08      	ldr	r3, [sp, #32]
 800aabe:	aa20      	add	r2, sp, #128	@ 0x80
 800aac0:	445b      	add	r3, fp
 800aac2:	f10b 0801 	add.w	r8, fp, #1
 800aac6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aaca:	445c      	add	r4, fp
 800aacc:	4544      	cmp	r4, r8
 800aace:	da04      	bge.n	800aada <__kernel_rem_pio2+0x372>
 800aad0:	46a3      	mov	fp, r4
 800aad2:	e6c0      	b.n	800a856 <__kernel_rem_pio2+0xee>
 800aad4:	2401      	movs	r4, #1
 800aad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aad8:	e7ec      	b.n	800aab4 <__kernel_rem_pio2+0x34c>
 800aada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aadc:	46ab      	mov	fp, r5
 800aade:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aae2:	f7f5 fc8f 	bl	8000404 <__aeabi_i2d>
 800aae6:	f04f 0900 	mov.w	r9, #0
 800aaea:	2600      	movs	r6, #0
 800aaec:	2700      	movs	r7, #0
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	e9c5 0100 	strd	r0, r1, [r5]
 800aaf4:	3b08      	subs	r3, #8
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	9b06      	ldr	r3, [sp, #24]
 800aafa:	4599      	cmp	r9, r3
 800aafc:	dd07      	ble.n	800ab0e <__kernel_rem_pio2+0x3a6>
 800aafe:	9b07      	ldr	r3, [sp, #28]
 800ab00:	f108 0801 	add.w	r8, r8, #1
 800ab04:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800ab08:	3508      	adds	r5, #8
 800ab0a:	9307      	str	r3, [sp, #28]
 800ab0c:	e7de      	b.n	800aacc <__kernel_rem_pio2+0x364>
 800ab0e:	9900      	ldr	r1, [sp, #0]
 800ab10:	f109 0901 	add.w	r9, r9, #1
 800ab14:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800ab18:	9100      	str	r1, [sp, #0]
 800ab1a:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800ab1e:	f7f5 fcdb 	bl	80004d8 <__aeabi_dmul>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	f7f5 fb1f 	bl	800016c <__adddf3>
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	e7e1      	b.n	800aaf8 <__kernel_rem_pio2+0x390>
 800ab34:	f1ca 0200 	rsb	r2, sl, #0
 800ab38:	4640      	mov	r0, r8
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	f000 f934 	bl	800ada8 <scalbn>
 800ab40:	2200      	movs	r2, #0
 800ab42:	4b97      	ldr	r3, [pc, #604]	@ (800ada0 <__kernel_rem_pio2+0x638>)
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	f7f5 ff4c 	bl	80009e4 <__aeabi_dcmpge>
 800ab4c:	b300      	cbz	r0, 800ab90 <__kernel_rem_pio2+0x428>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4b94      	ldr	r3, [pc, #592]	@ (800ada4 <__kernel_rem_pio2+0x63c>)
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fcbf 	bl	80004d8 <__aeabi_dmul>
 800ab5a:	f7f5 ff6d 	bl	8000a38 <__aeabi_d2iz>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	f7f5 fc50 	bl	8000404 <__aeabi_i2d>
 800ab64:	2200      	movs	r2, #0
 800ab66:	4b8e      	ldr	r3, [pc, #568]	@ (800ada0 <__kernel_rem_pio2+0x638>)
 800ab68:	f7f5 fcb6 	bl	80004d8 <__aeabi_dmul>
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4629      	mov	r1, r5
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7f5 faf8 	bl	8000168 <__aeabi_dsub>
 800ab78:	f7f5 ff5e 	bl	8000a38 <__aeabi_d2iz>
 800ab7c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab7e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800ab82:	f10b 0b01 	add.w	fp, fp, #1
 800ab86:	f10a 0a18 	add.w	sl, sl, #24
 800ab8a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800ab8e:	e732      	b.n	800a9f6 <__kernel_rem_pio2+0x28e>
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 ff50 	bl	8000a38 <__aeabi_d2iz>
 800ab98:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab9a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800ab9e:	e72a      	b.n	800a9f6 <__kernel_rem_pio2+0x28e>
 800aba0:	ab0c      	add	r3, sp, #48	@ 0x30
 800aba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aba6:	f7f5 fc2d 	bl	8000404 <__aeabi_i2d>
 800abaa:	4632      	mov	r2, r6
 800abac:	463b      	mov	r3, r7
 800abae:	f7f5 fc93 	bl	80004d8 <__aeabi_dmul>
 800abb2:	464a      	mov	r2, r9
 800abb4:	e868 0102 	strd	r0, r1, [r8], #-8
 800abb8:	4653      	mov	r3, sl
 800abba:	4630      	mov	r0, r6
 800abbc:	4639      	mov	r1, r7
 800abbe:	f7f5 fc8b 	bl	80004d8 <__aeabi_dmul>
 800abc2:	3d01      	subs	r5, #1
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	e726      	b.n	800aa18 <__kernel_rem_pio2+0x2b0>
 800abca:	f8dd c018 	ldr.w	ip, [sp, #24]
 800abce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800abd2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800abd6:	f8cd c018 	str.w	ip, [sp, #24]
 800abda:	f7f5 fc7d 	bl	80004d8 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4648      	mov	r0, r9
 800abe4:	4651      	mov	r1, sl
 800abe6:	f7f5 fac1 	bl	800016c <__adddf3>
 800abea:	4681      	mov	r9, r0
 800abec:	468a      	mov	sl, r1
 800abee:	3701      	adds	r7, #1
 800abf0:	9b02      	ldr	r3, [sp, #8]
 800abf2:	429f      	cmp	r7, r3
 800abf4:	dc01      	bgt.n	800abfa <__kernel_rem_pio2+0x492>
 800abf6:	42b7      	cmp	r7, r6
 800abf8:	dde7      	ble.n	800abca <__kernel_rem_pio2+0x462>
 800abfa:	ab48      	add	r3, sp, #288	@ 0x120
 800abfc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ac00:	e9c6 9a00 	strd	r9, sl, [r6]
 800ac04:	3d01      	subs	r5, #1
 800ac06:	e70b      	b.n	800aa20 <__kernel_rem_pio2+0x2b8>
 800ac08:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	dc09      	bgt.n	800ac22 <__kernel_rem_pio2+0x4ba>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	dc2c      	bgt.n	800ac6c <__kernel_rem_pio2+0x504>
 800ac12:	d04e      	beq.n	800acb2 <__kernel_rem_pio2+0x54a>
 800ac14:	9b05      	ldr	r3, [sp, #20]
 800ac16:	f003 0007 	and.w	r0, r3, #7
 800ac1a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d1f5      	bne.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800ac28:	ab48      	add	r3, sp, #288	@ 0x120
 800ac2a:	441c      	add	r4, r3
 800ac2c:	4625      	mov	r5, r4
 800ac2e:	46da      	mov	sl, fp
 800ac30:	f1ba 0f00 	cmp.w	sl, #0
 800ac34:	dc63      	bgt.n	800acfe <__kernel_rem_pio2+0x596>
 800ac36:	4625      	mov	r5, r4
 800ac38:	46da      	mov	sl, fp
 800ac3a:	f1ba 0f01 	cmp.w	sl, #1
 800ac3e:	dc7b      	bgt.n	800ad38 <__kernel_rem_pio2+0x5d0>
 800ac40:	2000      	movs	r0, #0
 800ac42:	2100      	movs	r1, #0
 800ac44:	f1bb 0f01 	cmp.w	fp, #1
 800ac48:	f300 8093 	bgt.w	800ad72 <__kernel_rem_pio2+0x60a>
 800ac4c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800ac50:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 8092 	bne.w	800ad80 <__kernel_rem_pio2+0x618>
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	e9c3 5600 	strd	r5, r6, [r3]
 800ac62:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ac66:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac6a:	e7d3      	b.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800ac6c:	465d      	mov	r5, fp
 800ac6e:	2000      	movs	r0, #0
 800ac70:	2100      	movs	r1, #0
 800ac72:	ab48      	add	r3, sp, #288	@ 0x120
 800ac74:	441c      	add	r4, r3
 800ac76:	2d00      	cmp	r5, #0
 800ac78:	da32      	bge.n	800ace0 <__kernel_rem_pio2+0x578>
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d035      	beq.n	800acec <__kernel_rem_pio2+0x584>
 800ac80:	4602      	mov	r2, r0
 800ac82:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac86:	9c04      	ldr	r4, [sp, #16]
 800ac88:	2501      	movs	r5, #1
 800ac8a:	e9c4 2300 	strd	r2, r3, [r4]
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ac96:	f7f5 fa67 	bl	8000168 <__aeabi_dsub>
 800ac9a:	ac48      	add	r4, sp, #288	@ 0x120
 800ac9c:	45ab      	cmp	fp, r5
 800ac9e:	da28      	bge.n	800acf2 <__kernel_rem_pio2+0x58a>
 800aca0:	9b00      	ldr	r3, [sp, #0]
 800aca2:	b113      	cbz	r3, 800acaa <__kernel_rem_pio2+0x542>
 800aca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aca8:	4619      	mov	r1, r3
 800acaa:	9b04      	ldr	r3, [sp, #16]
 800acac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800acb0:	e7b0      	b.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800acb2:	2000      	movs	r0, #0
 800acb4:	2100      	movs	r1, #0
 800acb6:	ab48      	add	r3, sp, #288	@ 0x120
 800acb8:	441c      	add	r4, r3
 800acba:	f1bb 0f00 	cmp.w	fp, #0
 800acbe:	da08      	bge.n	800acd2 <__kernel_rem_pio2+0x56a>
 800acc0:	9b00      	ldr	r3, [sp, #0]
 800acc2:	b113      	cbz	r3, 800acca <__kernel_rem_pio2+0x562>
 800acc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acc8:	4619      	mov	r1, r3
 800acca:	9b04      	ldr	r3, [sp, #16]
 800accc:	e9c3 0100 	strd	r0, r1, [r3]
 800acd0:	e7a0      	b.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800acd2:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800acd6:	f7f5 fa49 	bl	800016c <__adddf3>
 800acda:	f10b 3bff 	add.w	fp, fp, #4294967295
 800acde:	e7ec      	b.n	800acba <__kernel_rem_pio2+0x552>
 800ace0:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ace4:	f7f5 fa42 	bl	800016c <__adddf3>
 800ace8:	3d01      	subs	r5, #1
 800acea:	e7c4      	b.n	800ac76 <__kernel_rem_pio2+0x50e>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	e7c9      	b.n	800ac86 <__kernel_rem_pio2+0x51e>
 800acf2:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800acf6:	f7f5 fa39 	bl	800016c <__adddf3>
 800acfa:	3501      	adds	r5, #1
 800acfc:	e7ce      	b.n	800ac9c <__kernel_rem_pio2+0x534>
 800acfe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad02:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad0e:	f7f5 fa2d 	bl	800016c <__adddf3>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4606      	mov	r6, r0
 800ad18:	460f      	mov	r7, r1
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f7f5 fa23 	bl	8000168 <__aeabi_dsub>
 800ad22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad26:	f7f5 fa21 	bl	800016c <__adddf3>
 800ad2a:	e865 0102 	strd	r0, r1, [r5], #-8
 800ad2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad32:	e9c5 6700 	strd	r6, r7, [r5]
 800ad36:	e77b      	b.n	800ac30 <__kernel_rem_pio2+0x4c8>
 800ad38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad3c:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ad40:	4640      	mov	r0, r8
 800ad42:	4649      	mov	r1, r9
 800ad44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad48:	f7f5 fa10 	bl	800016c <__adddf3>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4606      	mov	r6, r0
 800ad52:	460f      	mov	r7, r1
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 fa06 	bl	8000168 <__aeabi_dsub>
 800ad5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad60:	f7f5 fa04 	bl	800016c <__adddf3>
 800ad64:	e865 0102 	strd	r0, r1, [r5], #-8
 800ad68:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad6c:	e9c5 6700 	strd	r6, r7, [r5]
 800ad70:	e763      	b.n	800ac3a <__kernel_rem_pio2+0x4d2>
 800ad72:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ad76:	f7f5 f9f9 	bl	800016c <__adddf3>
 800ad7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad7e:	e761      	b.n	800ac44 <__kernel_rem_pio2+0x4dc>
 800ad80:	9b04      	ldr	r3, [sp, #16]
 800ad82:	9a04      	ldr	r2, [sp, #16]
 800ad84:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800ad88:	601d      	str	r5, [r3, #0]
 800ad8a:	605c      	str	r4, [r3, #4]
 800ad8c:	609f      	str	r7, [r3, #8]
 800ad8e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800ad92:	60d3      	str	r3, [r2, #12]
 800ad94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad98:	6110      	str	r0, [r2, #16]
 800ad9a:	6153      	str	r3, [r2, #20]
 800ad9c:	e73a      	b.n	800ac14 <__kernel_rem_pio2+0x4ac>
 800ad9e:	bf00      	nop
 800ada0:	41700000 	.word	0x41700000
 800ada4:	3e700000 	.word	0x3e700000

0800ada8 <scalbn>:
 800ada8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800adac:	4616      	mov	r6, r2
 800adae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adb2:	4683      	mov	fp, r0
 800adb4:	468c      	mov	ip, r1
 800adb6:	460b      	mov	r3, r1
 800adb8:	b982      	cbnz	r2, 800addc <scalbn+0x34>
 800adba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800adbe:	4303      	orrs	r3, r0
 800adc0:	d035      	beq.n	800ae2e <scalbn+0x86>
 800adc2:	4b2d      	ldr	r3, [pc, #180]	@ (800ae78 <scalbn+0xd0>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	f7f5 fb87 	bl	80004d8 <__aeabi_dmul>
 800adca:	4b2c      	ldr	r3, [pc, #176]	@ (800ae7c <scalbn+0xd4>)
 800adcc:	4683      	mov	fp, r0
 800adce:	429e      	cmp	r6, r3
 800add0:	468c      	mov	ip, r1
 800add2:	da0d      	bge.n	800adf0 <scalbn+0x48>
 800add4:	a324      	add	r3, pc, #144	@ (adr r3, 800ae68 <scalbn+0xc0>)
 800add6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adda:	e019      	b.n	800ae10 <scalbn+0x68>
 800addc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ade0:	42ba      	cmp	r2, r7
 800ade2:	d109      	bne.n	800adf8 <scalbn+0x50>
 800ade4:	4602      	mov	r2, r0
 800ade6:	f7f5 f9c1 	bl	800016c <__adddf3>
 800adea:	4683      	mov	fp, r0
 800adec:	468c      	mov	ip, r1
 800adee:	e01e      	b.n	800ae2e <scalbn+0x86>
 800adf0:	460b      	mov	r3, r1
 800adf2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adf6:	3a36      	subs	r2, #54	@ 0x36
 800adf8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800adfc:	428e      	cmp	r6, r1
 800adfe:	dd0a      	ble.n	800ae16 <scalbn+0x6e>
 800ae00:	a31b      	add	r3, pc, #108	@ (adr r3, 800ae70 <scalbn+0xc8>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	4665      	mov	r5, ip
 800ae08:	f363 051e 	bfi	r5, r3, #0, #31
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	481c      	ldr	r0, [pc, #112]	@ (800ae80 <scalbn+0xd8>)
 800ae10:	f7f5 fb62 	bl	80004d8 <__aeabi_dmul>
 800ae14:	e7e9      	b.n	800adea <scalbn+0x42>
 800ae16:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ae1a:	4432      	add	r2, r6
 800ae1c:	428a      	cmp	r2, r1
 800ae1e:	dcef      	bgt.n	800ae00 <scalbn+0x58>
 800ae20:	2a00      	cmp	r2, #0
 800ae22:	dd08      	ble.n	800ae36 <scalbn+0x8e>
 800ae24:	f36f 531e 	bfc	r3, #20, #11
 800ae28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae2c:	46ac      	mov	ip, r5
 800ae2e:	4658      	mov	r0, fp
 800ae30:	4661      	mov	r1, ip
 800ae32:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ae36:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ae3a:	da09      	bge.n	800ae50 <scalbn+0xa8>
 800ae3c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ae40:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ae44:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ae48:	480e      	ldr	r0, [pc, #56]	@ (800ae84 <scalbn+0xdc>)
 800ae4a:	f041 011f 	orr.w	r1, r1, #31
 800ae4e:	e7c1      	b.n	800add4 <scalbn+0x2c>
 800ae50:	3236      	adds	r2, #54	@ 0x36
 800ae52:	f36f 531e 	bfc	r3, #20, #11
 800ae56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4b09      	ldr	r3, [pc, #36]	@ (800ae88 <scalbn+0xe0>)
 800ae62:	e7d5      	b.n	800ae10 <scalbn+0x68>
 800ae64:	f3af 8000 	nop.w
 800ae68:	c2f8f359 	.word	0xc2f8f359
 800ae6c:	01a56e1f 	.word	0x01a56e1f
 800ae70:	8800759c 	.word	0x8800759c
 800ae74:	7e37e43c 	.word	0x7e37e43c
 800ae78:	43500000 	.word	0x43500000
 800ae7c:	ffff3cb0 	.word	0xffff3cb0
 800ae80:	8800759c 	.word	0x8800759c
 800ae84:	c2f8f359 	.word	0xc2f8f359
 800ae88:	3c900000 	.word	0x3c900000
 800ae8c:	00000000 	.word	0x00000000

0800ae90 <floor>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ae98:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800ae9c:	2e13      	cmp	r6, #19
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	460c      	mov	r4, r1
 800aea4:	4605      	mov	r5, r0
 800aea6:	4680      	mov	r8, r0
 800aea8:	dc35      	bgt.n	800af16 <floor+0x86>
 800aeaa:	2e00      	cmp	r6, #0
 800aeac:	da17      	bge.n	800aede <floor+0x4e>
 800aeae:	a334      	add	r3, pc, #208	@ (adr r3, 800af80 <floor+0xf0>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f7f5 f95a 	bl	800016c <__adddf3>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2300      	movs	r3, #0
 800aebc:	f7f5 fd9c 	bl	80009f8 <__aeabi_dcmpgt>
 800aec0:	b150      	cbz	r0, 800aed8 <floor+0x48>
 800aec2:	2c00      	cmp	r4, #0
 800aec4:	da57      	bge.n	800af76 <floor+0xe6>
 800aec6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800aeca:	432c      	orrs	r4, r5
 800aecc:	2500      	movs	r5, #0
 800aece:	42ac      	cmp	r4, r5
 800aed0:	4c2d      	ldr	r4, [pc, #180]	@ (800af88 <floor+0xf8>)
 800aed2:	bf08      	it	eq
 800aed4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800aed8:	4623      	mov	r3, r4
 800aeda:	462a      	mov	r2, r5
 800aedc:	e024      	b.n	800af28 <floor+0x98>
 800aede:	4f2b      	ldr	r7, [pc, #172]	@ (800af8c <floor+0xfc>)
 800aee0:	4137      	asrs	r7, r6
 800aee2:	ea01 0c07 	and.w	ip, r1, r7
 800aee6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800aeea:	d01d      	beq.n	800af28 <floor+0x98>
 800aeec:	a324      	add	r3, pc, #144	@ (adr r3, 800af80 <floor+0xf0>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f93b 	bl	800016c <__adddf3>
 800aef6:	2200      	movs	r2, #0
 800aef8:	2300      	movs	r3, #0
 800aefa:	f7f5 fd7d 	bl	80009f8 <__aeabi_dcmpgt>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d0ea      	beq.n	800aed8 <floor+0x48>
 800af02:	2c00      	cmp	r4, #0
 800af04:	bfbe      	ittt	lt
 800af06:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800af0a:	4133      	asrlt	r3, r6
 800af0c:	18e4      	addlt	r4, r4, r3
 800af0e:	2500      	movs	r5, #0
 800af10:	ea24 0407 	bic.w	r4, r4, r7
 800af14:	e7e0      	b.n	800aed8 <floor+0x48>
 800af16:	2e33      	cmp	r6, #51	@ 0x33
 800af18:	dd0a      	ble.n	800af30 <floor+0xa0>
 800af1a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800af1e:	d103      	bne.n	800af28 <floor+0x98>
 800af20:	f7f5 f924 	bl	800016c <__adddf3>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4610      	mov	r0, r2
 800af2a:	4619      	mov	r1, r3
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	f04f 3cff 	mov.w	ip, #4294967295
 800af34:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800af38:	fa2c f707 	lsr.w	r7, ip, r7
 800af3c:	4207      	tst	r7, r0
 800af3e:	d0f3      	beq.n	800af28 <floor+0x98>
 800af40:	a30f      	add	r3, pc, #60	@ (adr r3, 800af80 <floor+0xf0>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f911 	bl	800016c <__adddf3>
 800af4a:	2200      	movs	r2, #0
 800af4c:	2300      	movs	r3, #0
 800af4e:	f7f5 fd53 	bl	80009f8 <__aeabi_dcmpgt>
 800af52:	2800      	cmp	r0, #0
 800af54:	d0c0      	beq.n	800aed8 <floor+0x48>
 800af56:	2c00      	cmp	r4, #0
 800af58:	da0a      	bge.n	800af70 <floor+0xe0>
 800af5a:	2e14      	cmp	r6, #20
 800af5c:	d101      	bne.n	800af62 <floor+0xd2>
 800af5e:	3401      	adds	r4, #1
 800af60:	e006      	b.n	800af70 <floor+0xe0>
 800af62:	2301      	movs	r3, #1
 800af64:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800af68:	40b3      	lsls	r3, r6
 800af6a:	441d      	add	r5, r3
 800af6c:	4545      	cmp	r5, r8
 800af6e:	d3f6      	bcc.n	800af5e <floor+0xce>
 800af70:	ea25 0507 	bic.w	r5, r5, r7
 800af74:	e7b0      	b.n	800aed8 <floor+0x48>
 800af76:	2500      	movs	r5, #0
 800af78:	462c      	mov	r4, r5
 800af7a:	e7ad      	b.n	800aed8 <floor+0x48>
 800af7c:	f3af 8000 	nop.w
 800af80:	8800759c 	.word	0x8800759c
 800af84:	7e37e43c 	.word	0x7e37e43c
 800af88:	bff00000 	.word	0xbff00000
 800af8c:	000fffff 	.word	0x000fffff

0800af90 <_init>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr

0800af9c <_fini>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	bf00      	nop
 800afa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa2:	bc08      	pop	{r3}
 800afa4:	469e      	mov	lr, r3
 800afa6:	4770      	bx	lr
