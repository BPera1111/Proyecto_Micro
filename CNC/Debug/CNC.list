
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c408  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800c518  0800c518  0000d518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccdc  0800ccdc  0000e344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ccdc  0800ccdc  0000dcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cce4  0800cce4  0000e344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cce4  0800cce4  0000dce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cce8  0800cce8  0000dce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800ccec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  20000344  0800d030  0000e344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016f4  0800d030  0000e6f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ac  00000000  00000000  0000e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbf  00000000  00000000  0001bd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  0001f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a63a  00000000  00000000  0001ff49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb56  00000000  00000000  0003a583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893cc  00000000  00000000  0004a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d34a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000d34e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d7638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c500 	.word	0x0800c500

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800c500 	.word	0x0800c500

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmpun>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_fcmpun+0x14>
 8000fb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fba:	d108      	bne.n	8000fce <__aeabi_fcmpun+0x26>
 8000fbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc0:	d102      	bne.n	8000fc8 <__aeabi_fcmpun+0x20>
 8000fc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fc6:	d102      	bne.n	8000fce <__aeabi_fcmpun+0x26>
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0001 	mov.w	r0, #1
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_d2lz>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	2200      	movs	r2, #0
 8001024:	2300      	movs	r3, #0
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	f7ff fcc7 	bl	80009bc <__aeabi_dcmplt>
 800102e:	b928      	cbnz	r0, 800103c <__aeabi_d2lz+0x1c>
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001038:	f000 b80a 	b.w	8001050 <__aeabi_d2ulz>
 800103c:	4620      	mov	r0, r4
 800103e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001042:	f000 f805 	bl	8001050 <__aeabi_d2ulz>
 8001046:	4240      	negs	r0, r0
 8001048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800104c:	bd38      	pop	{r3, r4, r5, pc}
 800104e:	bf00      	nop

08001050 <__aeabi_d2ulz>:
 8001050:	b5d0      	push	{r4, r6, r7, lr}
 8001052:	2200      	movs	r2, #0
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <__aeabi_d2ulz+0x34>)
 8001056:	4606      	mov	r6, r0
 8001058:	460f      	mov	r7, r1
 800105a:	f7ff fa3d 	bl	80004d8 <__aeabi_dmul>
 800105e:	f7ff fcd5 	bl	8000a0c <__aeabi_d2uiz>
 8001062:	4604      	mov	r4, r0
 8001064:	f7ff f9be 	bl	80003e4 <__aeabi_ui2d>
 8001068:	2200      	movs	r2, #0
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <__aeabi_d2ulz+0x38>)
 800106c:	f7ff fa34 	bl	80004d8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4630      	mov	r0, r6
 8001076:	4639      	mov	r1, r7
 8001078:	f7ff f876 	bl	8000168 <__aeabi_dsub>
 800107c:	f7ff fcc6 	bl	8000a0c <__aeabi_d2uiz>
 8001080:	4621      	mov	r1, r4
 8001082:	bdd0      	pop	{r4, r6, r7, pc}
 8001084:	3df00000 	.word	0x3df00000
 8001088:	41f00000 	.word	0x41f00000

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
  HAL_Init();
 8001092:	f001 f973 	bl	800237c <HAL_Init>
  SystemClock_Config();
 8001096:	f000 f81d 	bl	80010d4 <SystemClock_Config>
  MX_GPIO_Init();
 800109a:	f000 f877 	bl	800118c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 800109e:	f007 fdab 	bl	8008bf8 <MX_USB_DEVICE_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 80010a2:	f000 fd4b 	bl	8001b3c <setup>

  // Envío inicial
  uint8_t mensaje[] = "G-code listo\r\n";
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <main+0x44>)
 80010a8:	463c      	mov	r4, r7
 80010aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ac:	c407      	stmia	r4!, {r0, r1, r2}
 80010ae:	8023      	strh	r3, [r4, #0]
 80010b0:	3402      	adds	r4, #2
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(mensaje, sizeof(mensaje) - 1);
 80010b6:	463b      	mov	r3, r7
 80010b8:	210e      	movs	r1, #14
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fe8a 	bl	8008dd4 <CDC_Transmit_FS>
  #endif

  while (1)
  {
    // Equivalente al loop() de Arduino
    loop();
 80010c0:	f000 fc40 	bl	8001944 <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 80010c4:	2032      	movs	r0, #50	@ 0x32
 80010c6:	f001 f9bb 	bl	8002440 <HAL_Delay>
    loop();
 80010ca:	bf00      	nop
 80010cc:	e7f8      	b.n	80010c0 <main+0x34>
 80010ce:	bf00      	nop
 80010d0:	0800c518 	.word	0x0800c518

080010d4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010de:	2228      	movs	r2, #40	@ 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f009 f983 	bl	800a3ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001120:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f9ce 	bl	80044cc <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001136:	f000 ffc5 	bl	80020c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800114a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fc3a 	bl	80049d0 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001162:	f000 ffaf 	bl	80020c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001166:	2310      	movs	r3, #16
 8001168:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800116a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fd88 	bl	8004c88 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800117e:	f000 ffa1 	bl	80020c4 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 80011e8:	2200      	movs	r2, #0
 80011ea:	f240 31d9 	movw	r1, #985	@ 0x3d9
 80011ee:	481d      	ldr	r0, [pc, #116]	@ (8001264 <MX_GPIO_Init+0xd8>)
 80011f0:	f001 fbf3 	bl	80029da <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80011fa:	481b      	ldr	r0, [pc, #108]	@ (8001268 <MX_GPIO_Init+0xdc>)
 80011fc:	f001 fbed 	bl	80029da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8001200:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8001204:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4812      	ldr	r0, [pc, #72]	@ (8001264 <MX_GPIO_Init+0xd8>)
 800121a:	f001 fa43 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800121e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	@ (8001264 <MX_GPIO_Init+0xd8>)
 8001234:	f001 fa36 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001238:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_GPIO_Init+0xdc>)
 8001252:	f001 fa27 	bl	80026a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40010800 	.word	0x40010800

0800126c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <delay_us+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <delay_us+0x44>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9a      	lsrs	r2, r3, #18
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <delay_us+0x48>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800128e:	bf00      	nop
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <delay_us+0x48>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f8      	bhi.n	8001290 <delay_us+0x24>
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	e0001000 	.word	0xe0001000

080012b8 <X_stepOnce>:

void X_stepOnce(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2140      	movs	r1, #64	@ 0x40
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <X_stepOnce+0x24>)
 80012c2:	f001 fb8a 	bl	80029da <HAL_GPIO_WritePin>
    delay_us(2);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f7ff ffd0 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <X_stepOnce+0x24>)
 80012d2:	f001 fb82 	bl	80029da <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <Y_stepOnce>:

void Y_stepOnce(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <Y_stepOnce+0x28>)
 80012ec:	f001 fb75 	bl	80029da <HAL_GPIO_WritePin>
    delay_us(2);
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff ffbb 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <Y_stepOnce+0x28>)
 80012fe:	f001 fb6c 	bl	80029da <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010c00 	.word	0x40010c00

0800130c <Z_stepOnce>:

void Z_stepOnce(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4807      	ldr	r0, [pc, #28]	@ (8001334 <Z_stepOnce+0x28>)
 8001318:	f001 fb5f 	bl	80029da <HAL_GPIO_WritePin>
    delay_us(2);
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff ffa5 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <Z_stepOnce+0x28>)
 800132a:	f001 fb56 	bl	80029da <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010800 	.word	0x40010800

08001338 <X_move>:

void X_move(int32_t steps, bool dir) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	461a      	mov	r2, r3
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <X_move+0x88>)
 800134c:	f001 fb45 	bl	80029da <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <X_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <X_move+0x88>)
 800135c:	f001 fb3d 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2102      	movs	r1, #2
 8001364:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <X_move+0x88>)
 8001366:	f001 fb38 	bl	80029da <HAL_GPIO_WritePin>
 800136a:	e009      	b.n	8001380 <X_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <X_move+0x88>)
 8001372:	f001 fb32 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <X_move+0x88>)
 800137c:	f001 fb2d 	bl	80029da <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e009      	b.n	800139a <X_move+0x62>
        X_stepOnce();
 8001386:	f7ff ff97 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 800138a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff6c 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dbf1      	blt.n	8001386 <X_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <X_move+0x88>)
 80013a8:	f001 fb17 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <X_move+0x88>)
 80013b2:	f001 fb12 	bl	80029da <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <Y_move>:

void Y_move(int32_t steps, bool dir) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2108      	movs	r1, #8
 80013d6:	481d      	ldr	r0, [pc, #116]	@ (800144c <Y_move+0x88>)
 80013d8:	f001 faff 	bl	80029da <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <Y_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2101      	movs	r1, #1
 80013e6:	4819      	ldr	r0, [pc, #100]	@ (800144c <Y_move+0x88>)
 80013e8:	f001 faf7 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	4816      	ldr	r0, [pc, #88]	@ (800144c <Y_move+0x88>)
 80013f2:	f001 faf2 	bl	80029da <HAL_GPIO_WritePin>
 80013f6:	e009      	b.n	800140c <Y_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4813      	ldr	r0, [pc, #76]	@ (800144c <Y_move+0x88>)
 80013fe:	f001 faec 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2102      	movs	r1, #2
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <Y_move+0x88>)
 8001408:	f001 fae7 	bl	80029da <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e009      	b.n	8001426 <Y_move+0x62>
        Y_stepOnce();
 8001412:	f7ff ff65 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001416:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff26 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbf1      	blt.n	8001412 <Y_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <Y_move+0x88>)
 8001434:	f001 fad1 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	4803      	ldr	r0, [pc, #12]	@ (800144c <Y_move+0x88>)
 800143e:	f001 facc 	bl	80029da <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <Z_move>:

void Z_move(int32_t steps, bool dir) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dir ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800146a:	481d      	ldr	r0, [pc, #116]	@ (80014e0 <Z_move+0x90>)
 800146c:	f001 fab5 	bl	80029da <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <Z_move+0x3c>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2101      	movs	r1, #1
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <Z_move+0x94>)
 800147c:	f001 faad 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2102      	movs	r1, #2
 8001484:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <Z_move+0x94>)
 8001486:	f001 faa8 	bl	80029da <HAL_GPIO_WritePin>
 800148a:	e009      	b.n	80014a0 <Z_move+0x50>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <Z_move+0x94>)
 8001492:	f001 faa2 	bl	80029da <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2102      	movs	r1, #2
 800149a:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <Z_move+0x94>)
 800149c:	f001 fa9d 	bl	80029da <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e009      	b.n	80014ba <Z_move+0x6a>
        Z_stepOnce();
 80014a6:	f7ff ff31 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 80014aa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fedc 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf1      	blt.n	80014a6 <Z_move+0x56>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <Z_move+0x94>)
 80014c8:	f001 fa87 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2102      	movs	r1, #2
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <Z_move+0x94>)
 80014d2:	f001 fa82 	bl	80029da <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00

080014e8 <extractParameter>:
void readUSBCommands(void) {
    // Esta función se implementará con callback de USB CDC
    // Por ahora vacía, se procesará en el callback
}

float extractParameter(const char* command, char param) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
    char* ptr = strchr(command, param);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f008 ff80 	bl	800a3fe <strchr>
 80014fe:	60f8      	str	r0, [r7, #12]
    if (ptr) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <extractParameter+0x38>
        return atof(ptr + 1);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3301      	adds	r3, #1
 800150a:	4618      	mov	r0, r3
 800150c:	f008 f840 	bl	8009590 <atof>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fa98 	bl	8000a4c <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	e000      	b.n	8001522 <extractParameter+0x3a>
    }
    return NAN; // Not a Number
 8001520:	4b02      	ldr	r3, [pc, #8]	@ (800152c <extractParameter+0x44>)
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	7fc00000 	.word	0x7fc00000

08001530 <moveAxes>:

void moveAxes(float x, float y, float z) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b0a2      	sub	sp, #136	@ 0x88
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
    // Convertir de milímetros a pasos usando valores específicos por eje
    int32_t xSteps = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t ySteps = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	67bb      	str	r3, [r7, #120]	@ 0x78
    int32_t zSteps = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	677b      	str	r3, [r7, #116]	@ 0x74
    bool xDir = true;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    bool yDir = true;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    bool zDir = true;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    
    if (!isnan(x)) {
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fd23 	bl	8000fa8 <__aeabi_fcmpun>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <moveAxes+0x70>
        // Calcular pasos relativos para el eje X (mm → pasos)
        int32_t targetX = x * STEPS_PER_MM_X; // Convertir mm a pasos (79 steps/mm)
 8001568:	4983      	ldr	r1, [pc, #524]	@ (8001778 <moveAxes+0x248>)
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fbcc 	bl	8000d08 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd2e 	bl	8000fd4 <__aeabi_f2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        xSteps = targetX - currentX;
 800157c:	4b7f      	ldr	r3, [pc, #508]	@ (800177c <moveAxes+0x24c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	67fb      	str	r3, [r7, #124]	@ 0x7c
        xDir = (xSteps >= 0);
 8001586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001588:	43db      	mvns	r3, r3
 800158a:	0fdb      	lsrs	r3, r3, #31
 800158c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        xSteps = abs(xSteps);
 8001590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfb8      	it	lt
 8001596:	425b      	neglt	r3, r3
 8001598:	67fb      	str	r3, [r7, #124]	@ 0x7c
        currentX = targetX; // Actualizar posición actual
 800159a:	4a78      	ldr	r2, [pc, #480]	@ (800177c <moveAxes+0x24c>)
 800159c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800159e:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(y)) {
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f7ff fd00 	bl	8000fa8 <__aeabi_fcmpun>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <moveAxes+0xb6>
        // Calcular pasos relativos para el eje Y (mm → pasos)
        int32_t targetY = y * STEPS_PER_MM_Y; // Convertir mm a pasos (79 steps/mm)
 80015ae:	4972      	ldr	r1, [pc, #456]	@ (8001778 <moveAxes+0x248>)
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fba9 	bl	8000d08 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fd0b 	bl	8000fd4 <__aeabi_f2iz>
 80015be:	4603      	mov	r3, r0
 80015c0:	66bb      	str	r3, [r7, #104]	@ 0x68
        ySteps = targetY - currentY;
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <moveAxes+0x250>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	67bb      	str	r3, [r7, #120]	@ 0x78
        yDir = (ySteps >= 0);
 80015cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015ce:	43db      	mvns	r3, r3
 80015d0:	0fdb      	lsrs	r3, r3, #31
 80015d2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        ySteps = abs(ySteps);
 80015d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfb8      	it	lt
 80015dc:	425b      	neglt	r3, r3
 80015de:	67bb      	str	r3, [r7, #120]	@ 0x78
        currentY = targetY; // Actualizar posición actual
 80015e0:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <moveAxes+0x250>)
 80015e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e4:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(z)) {
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fcdd 	bl	8000fa8 <__aeabi_fcmpun>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11b      	bne.n	800162c <moveAxes+0xfc>
        // Calcular pasos relativos para el eje Z (mm → pasos)
        int32_t targetZ = z * STEPS_PER_MM_Z; // Convertir mm a pasos (3930 steps/mm)
 80015f4:	4963      	ldr	r1, [pc, #396]	@ (8001784 <moveAxes+0x254>)
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fb86 	bl	8000d08 <__aeabi_fmul>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fce8 	bl	8000fd4 <__aeabi_f2iz>
 8001604:	4603      	mov	r3, r0
 8001606:	667b      	str	r3, [r7, #100]	@ 0x64
        zSteps = targetZ - currentZ;
 8001608:	4b5f      	ldr	r3, [pc, #380]	@ (8001788 <moveAxes+0x258>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	677b      	str	r3, [r7, #116]	@ 0x74
        zDir = (zSteps >= 0);
 8001612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001614:	43db      	mvns	r3, r3
 8001616:	0fdb      	lsrs	r3, r3, #31
 8001618:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
        zSteps = abs(zSteps);
 800161c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	677b      	str	r3, [r7, #116]	@ 0x74
        currentZ = targetZ; // Actualizar posición actual
 8001626:	4a58      	ldr	r2, [pc, #352]	@ (8001788 <moveAxes+0x258>)
 8001628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800162a:	6013      	str	r3, [r2, #0]
    }
    
    // Mover los motores
    if (xSteps > 0) {
 800162c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800162e:	2b00      	cmp	r3, #0
 8001630:	dd32      	ble.n	8001698 <moveAxes+0x168>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo X: %.2fmm (%ld pasos), dir: %s\r\n", 
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fcb7 	bl	8000fa8 <__aeabi_fcmpun>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <moveAxes+0x11c>
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e003      	b.n	8001654 <moveAxes+0x124>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001658:	2900      	cmp	r1, #0
 800165a:	d001      	beq.n	8001660 <moveAxes+0x130>
 800165c:	494b      	ldr	r1, [pc, #300]	@ (800178c <moveAxes+0x25c>)
 800165e:	e000      	b.n	8001662 <moveAxes+0x132>
 8001660:	494b      	ldr	r1, [pc, #300]	@ (8001790 <moveAxes+0x260>)
 8001662:	f107 0014 	add.w	r0, r7, #20
 8001666:	9101      	str	r1, [sp, #4]
 8001668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800166a:	9100      	str	r1, [sp, #0]
 800166c:	4949      	ldr	r1, [pc, #292]	@ (8001794 <moveAxes+0x264>)
 800166e:	f008 fe59 	bl	800a324 <siprintf>
               !isnan(x) ? x : 0.0, xSteps, xDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fd6a 	bl	8000150 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f007 fba4 	bl	8008dd4 <CDC_Transmit_FS>
        X_move(xSteps, xDir);
 800168c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001690:	4619      	mov	r1, r3
 8001692:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001694:	f7ff fe50 	bl	8001338 <X_move>
    }
    
    if (ySteps > 0) {
 8001698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd32      	ble.n	8001704 <moveAxes+0x1d4>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo Y: %.2fmm (%ld pasos), dir: %s\r\n", 
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff fc81 	bl	8000fa8 <__aeabi_fcmpun>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <moveAxes+0x188>
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e003      	b.n	80016c0 <moveAxes+0x190>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f897 1072 	ldrb.w	r1, [r7, #114]	@ 0x72
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d001      	beq.n	80016cc <moveAxes+0x19c>
 80016c8:	4930      	ldr	r1, [pc, #192]	@ (800178c <moveAxes+0x25c>)
 80016ca:	e000      	b.n	80016ce <moveAxes+0x19e>
 80016cc:	4930      	ldr	r1, [pc, #192]	@ (8001790 <moveAxes+0x260>)
 80016ce:	f107 0014 	add.w	r0, r7, #20
 80016d2:	9101      	str	r1, [sp, #4]
 80016d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016d6:	9100      	str	r1, [sp, #0]
 80016d8:	492f      	ldr	r1, [pc, #188]	@ (8001798 <moveAxes+0x268>)
 80016da:	f008 fe23 	bl	800a324 <siprintf>
               !isnan(y) ? y : 0.0, ySteps, yDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd34 	bl	8000150 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fb6e 	bl	8008dd4 <CDC_Transmit_FS>
        Y_move(ySteps, yDir);
 80016f8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80016fc:	4619      	mov	r1, r3
 80016fe:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001700:	f7ff fe60 	bl	80013c4 <Y_move>
    }
    
    if (zSteps > 0) {
 8001704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001706:	2b00      	cmp	r3, #0
 8001708:	dd32      	ble.n	8001770 <moveAxes+0x240>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo Z: %.2fmm (%ld pasos), dir: %s\r\n", 
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fc4b 	bl	8000fa8 <__aeabi_fcmpun>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <moveAxes+0x1f4>
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe fe85 	bl	8000428 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e003      	b.n	800172c <moveAxes+0x1fc>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f897 1071 	ldrb.w	r1, [r7, #113]	@ 0x71
 8001730:	2900      	cmp	r1, #0
 8001732:	d001      	beq.n	8001738 <moveAxes+0x208>
 8001734:	4915      	ldr	r1, [pc, #84]	@ (800178c <moveAxes+0x25c>)
 8001736:	e000      	b.n	800173a <moveAxes+0x20a>
 8001738:	4915      	ldr	r1, [pc, #84]	@ (8001790 <moveAxes+0x260>)
 800173a:	f107 0014 	add.w	r0, r7, #20
 800173e:	9101      	str	r1, [sp, #4]
 8001740:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001742:	9100      	str	r1, [sp, #0]
 8001744:	4915      	ldr	r1, [pc, #84]	@ (800179c <moveAxes+0x26c>)
 8001746:	f008 fded 	bl	800a324 <siprintf>
               !isnan(z) ? z : 0.0, zSteps, zDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fcfe 	bl	8000150 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f007 fb38 	bl	8008dd4 <CDC_Transmit_FS>
        Z_move(zSteps, zDir);
 8001764:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001768:	4619      	mov	r1, r3
 800176a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800176c:	f7ff fe70 	bl	8001450 <Z_move>
    }
}
 8001770:	bf00      	nop
 8001772:	3780      	adds	r7, #128	@ 0x80
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	429e0000 	.word	0x429e0000
 800177c:	20000360 	.word	0x20000360
 8001780:	20000364 	.word	0x20000364
 8001784:	4575a000 	.word	0x4575a000
 8001788:	20000368 	.word	0x20000368
 800178c:	0800c528 	.word	0x0800c528
 8001790:	0800c52c 	.word	0x0800c52c
 8001794:	0800c530 	.word	0x0800c530
 8001798:	0800c55c 	.word	0x0800c55c
 800179c:	0800c588 	.word	0x0800c588

080017a0 <processGcode>:

void processGcode(const char* command) {
 80017a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a4:	b0a6      	sub	sp, #152	@ 0x98
 80017a6:	af04      	add	r7, sp, #16
 80017a8:	6078      	str	r0, [r7, #4]
    // char msg[100];
    // sprintf(msg, "Procesando: %s\r\n", command);
    // CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
    
    // Procesar comando G0 o G1 (movimientos)
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80017aa:	2202      	movs	r2, #2
 80017ac:	4957      	ldr	r1, [pc, #348]	@ (800190c <processGcode+0x16c>)
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f008 fe32 	bl	800a418 <strncmp>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <processGcode+0x2a>
 80017ba:	2202      	movs	r2, #2
 80017bc:	4954      	ldr	r1, [pc, #336]	@ (8001910 <processGcode+0x170>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f008 fe2a 	bl	800a418 <strncmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <processGcode+0x5e>
        // Procesar movimiento
        float xPos = extractParameter(command, 'X');
 80017ca:	2158      	movs	r1, #88	@ 0x58
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe8b 	bl	80014e8 <extractParameter>
 80017d2:	67b8      	str	r0, [r7, #120]	@ 0x78
        float yPos = extractParameter(command, 'Y');
 80017d4:	2159      	movs	r1, #89	@ 0x59
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe86 	bl	80014e8 <extractParameter>
 80017dc:	6778      	str	r0, [r7, #116]	@ 0x74
        float zPos = extractParameter(command, 'Z');
 80017de:	215a      	movs	r1, #90	@ 0x5a
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe81 	bl	80014e8 <extractParameter>
 80017e6:	6738      	str	r0, [r7, #112]	@ 0x70
        
        // Mover los ejes
        moveAxes(xPos, yPos, zPos);
 80017e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80017ec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80017ee:	f7ff fe9f 	bl	8001530 <moveAxes>
        
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80017f2:	2104      	movs	r1, #4
 80017f4:	4847      	ldr	r0, [pc, #284]	@ (8001914 <processGcode+0x174>)
 80017f6:	f007 faed 	bl	8008dd4 <CDC_Transmit_FS>
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80017fa:	bf00      	nop
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
    }
    else {
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
    }
}
 80017fc:	e081      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "G28", 3) == 0) {
 80017fe:	2203      	movs	r2, #3
 8001800:	4945      	ldr	r1, [pc, #276]	@ (8001918 <processGcode+0x178>)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f008 fe08 	bl	800a418 <strncmp>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <processGcode+0x84>
        CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 800180e:	2116      	movs	r1, #22
 8001810:	4842      	ldr	r0, [pc, #264]	@ (800191c <processGcode+0x17c>)
 8001812:	f007 fadf 	bl	8008dd4 <CDC_Transmit_FS>
        performHoming();
 8001816:	f000 fabd 	bl	8001d94 <performHoming>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 800181a:	2104      	movs	r1, #4
 800181c:	483d      	ldr	r0, [pc, #244]	@ (8001914 <processGcode+0x174>)
 800181e:	f007 fad9 	bl	8008dd4 <CDC_Transmit_FS>
}
 8001822:	e06e      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "M114", 4) == 0) {
 8001824:	2204      	movs	r2, #4
 8001826:	493e      	ldr	r1, [pc, #248]	@ (8001920 <processGcode+0x180>)
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f008 fdf5 	bl	800a418 <strncmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d153      	bne.n	80018dc <processGcode+0x13c>
        float xPos = currentX / (float)STEPS_PER_MM_X;
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <processGcode+0x184>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa11 	bl	8000c60 <__aeabi_i2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4939      	ldr	r1, [pc, #228]	@ (8001928 <processGcode+0x188>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb14 	bl	8000e70 <__aeabi_fdiv>
 8001848:	4603      	mov	r3, r0
 800184a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        float yPos = currentY / (float)STEPS_PER_MM_Y;
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <processGcode+0x18c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa04 	bl	8000c60 <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4933      	ldr	r1, [pc, #204]	@ (8001928 <processGcode+0x188>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb07 	bl	8000e70 <__aeabi_fdiv>
 8001862:	4603      	mov	r3, r0
 8001864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001868:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <processGcode+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f9f7 	bl	8000c60 <__aeabi_i2f>
 8001872:	4603      	mov	r3, r0
 8001874:	492f      	ldr	r1, [pc, #188]	@ (8001934 <processGcode+0x194>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fafa 	bl	8000e70 <__aeabi_fdiv>
 800187c:	4603      	mov	r3, r0
 800187e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        sprintf(posMsg, "X:%.2f Y:%.2f Z:%.2f\r\n", xPos, yPos, zPos);
 8001880:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4680      	mov	r8, r0
 800188a:	4689      	mov	r9, r1
 800188c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800189a:	f7fe fdc5 	bl	8000428 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	f107 000c 	add.w	r0, r7, #12
 80018a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018aa:	e9cd 4500 	strd	r4, r5, [sp]
 80018ae:	4642      	mov	r2, r8
 80018b0:	464b      	mov	r3, r9
 80018b2:	4921      	ldr	r1, [pc, #132]	@ (8001938 <processGcode+0x198>)
 80018b4:	f008 fd36 	bl	800a324 <siprintf>
        CDC_Transmit_FS((uint8_t*)posMsg, strlen(posMsg));
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fc47 	bl	8000150 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fa81 	bl	8008dd4 <CDC_Transmit_FS>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80018d2:	2104      	movs	r1, #4
 80018d4:	480f      	ldr	r0, [pc, #60]	@ (8001914 <processGcode+0x174>)
 80018d6:	f007 fa7d 	bl	8008dd4 <CDC_Transmit_FS>
}
 80018da:	e012      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "M503", 4) == 0) {
 80018dc:	2204      	movs	r2, #4
 80018de:	4917      	ldr	r1, [pc, #92]	@ (800193c <processGcode+0x19c>)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f008 fd99 	bl	800a418 <strncmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <processGcode+0x15a>
        showConfiguration();
 80018ec:	f000 f95a 	bl	8001ba4 <showConfiguration>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80018f0:	2104      	movs	r1, #4
 80018f2:	4808      	ldr	r0, [pc, #32]	@ (8001914 <processGcode+0x174>)
 80018f4:	f007 fa6e 	bl	8008dd4 <CDC_Transmit_FS>
}
 80018f8:	e003      	b.n	8001902 <processGcode+0x162>
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
 80018fa:	2117      	movs	r1, #23
 80018fc:	4810      	ldr	r0, [pc, #64]	@ (8001940 <processGcode+0x1a0>)
 80018fe:	f007 fa69 	bl	8008dd4 <CDC_Transmit_FS>
}
 8001902:	bf00      	nop
 8001904:	3788      	adds	r7, #136	@ 0x88
 8001906:	46bd      	mov	sp, r7
 8001908:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800190c:	0800c5b4 	.word	0x0800c5b4
 8001910:	0800c5b8 	.word	0x0800c5b8
 8001914:	0800c5bc 	.word	0x0800c5bc
 8001918:	0800c5c4 	.word	0x0800c5c4
 800191c:	0800c5c8 	.word	0x0800c5c8
 8001920:	0800c5e0 	.word	0x0800c5e0
 8001924:	20000360 	.word	0x20000360
 8001928:	429e0000 	.word	0x429e0000
 800192c:	20000364 	.word	0x20000364
 8001930:	20000368 	.word	0x20000368
 8001934:	4575a000 	.word	0x4575a000
 8001938:	0800c5e8 	.word	0x0800c5e8
 800193c:	0800c600 	.word	0x0800c600
 8001940:	0800c608 	.word	0x0800c608

08001944 <loop>:

void loop(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
    static uint32_t lastEndstopCheck = 0;
    static bool endstopXWasPressed = false; 
    static bool endstopYWasPressed = false;
    static bool endstopZWasPressed = false;
    
    uint32_t currentTime = HAL_GetTick();
 800194a:	f000 fd6f 	bl	800242c <HAL_GetTick>
 800194e:	6078      	str	r0, [r7, #4]
        lastHeartbeat = currentTime;
        CDC_Transmit_FS((uint8_t*)"[HEARTBEAT] Sistema activo\r\n", 29);
    }
    #endif
    // Verificar fines de carrera solo cada 10ms para evitar spam
    if (currentTime - lastEndstopCheck > 10) {
 8001950:	4b6c      	ldr	r3, [pc, #432]	@ (8001b04 <loop+0x1c0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b0a      	cmp	r3, #10
 800195a:	f240 808d 	bls.w	8001a78 <loop+0x134>
        lastEndstopCheck = currentTime;
 800195e:	4a69      	ldr	r2, [pc, #420]	@ (8001b04 <loop+0x1c0>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
        
        // Fin de carrera X - solo mensaje cuando cambia de estado
        bool endstopX = (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001968:	4867      	ldr	r0, [pc, #412]	@ (8001b08 <loop+0x1c4>)
 800196a:	f001 f81f 	bl	80029ac <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	70fb      	strb	r3, [r7, #3]
        if (endstopX && !endstopXWasPressed) {
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <loop+0x5a>
 8001980:	4b62      	ldr	r3, [pc, #392]	@ (8001b0c <loop+0x1c8>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <loop+0x5a>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X activado\r\n", 27);
 800198e:	211b      	movs	r1, #27
 8001990:	485f      	ldr	r0, [pc, #380]	@ (8001b10 <loop+0x1cc>)
 8001992:	f007 fa1f 	bl	8008dd4 <CDC_Transmit_FS>
            // Opcional: detener motor X o hacer homing
            // X_move(100, false); // Retroceder 100 pasos
            endstopXWasPressed = true;
 8001996:	4b5d      	ldr	r3, [pc, #372]	@ (8001b0c <loop+0x1c8>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	e010      	b.n	80019c0 <loop+0x7c>
        } else if (!endstopX && endstopXWasPressed) {
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <loop+0x7c>
 80019aa:	4b58      	ldr	r3, [pc, #352]	@ (8001b0c <loop+0x1c8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <loop+0x7c>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X desactivado\r\n", 30);
 80019b2:	211e      	movs	r1, #30
 80019b4:	4857      	ldr	r0, [pc, #348]	@ (8001b14 <loop+0x1d0>)
 80019b6:	f007 fa0d 	bl	8008dd4 <CDC_Transmit_FS>
            endstopXWasPressed = false;
 80019ba:	4b54      	ldr	r3, [pc, #336]	@ (8001b0c <loop+0x1c8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Y
        bool endstopY = (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 80019c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c4:	4850      	ldr	r0, [pc, #320]	@ (8001b08 <loop+0x1c4>)
 80019c6:	f000 fff1 	bl	80029ac <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	70bb      	strb	r3, [r7, #2]
        if (endstopY && !endstopYWasPressed) {
 80019d6:	78bb      	ldrb	r3, [r7, #2]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <loop+0xb6>
 80019dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <loop+0x1d4>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f083 0301 	eor.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <loop+0xb6>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y activado\r\n", 27);
 80019ea:	211b      	movs	r1, #27
 80019ec:	484b      	ldr	r0, [pc, #300]	@ (8001b1c <loop+0x1d8>)
 80019ee:	f007 f9f1 	bl	8008dd4 <CDC_Transmit_FS>
            endstopYWasPressed = true;
 80019f2:	4b49      	ldr	r3, [pc, #292]	@ (8001b18 <loop+0x1d4>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e010      	b.n	8001a1c <loop+0xd8>
        } else if (!endstopY && endstopYWasPressed) {
 80019fa:	78bb      	ldrb	r3, [r7, #2]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00a      	beq.n	8001a1c <loop+0xd8>
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <loop+0x1d4>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <loop+0xd8>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y desactivado\r\n", 30);
 8001a0e:	211e      	movs	r1, #30
 8001a10:	4843      	ldr	r0, [pc, #268]	@ (8001b20 <loop+0x1dc>)
 8001a12:	f007 f9df 	bl	8008dd4 <CDC_Transmit_FS>
            endstopYWasPressed = false;
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <loop+0x1d4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Z
        bool endstopZ = (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001a1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a20:	4839      	ldr	r0, [pc, #228]	@ (8001b08 <loop+0x1c4>)
 8001a22:	f000 ffc3 	bl	80029ac <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	707b      	strb	r3, [r7, #1]
        if (endstopZ && !endstopZWasPressed) {
 8001a32:	787b      	ldrb	r3, [r7, #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <loop+0x112>
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <loop+0x1e0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <loop+0x112>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z activado\r\n", 27);
 8001a46:	211b      	movs	r1, #27
 8001a48:	4837      	ldr	r0, [pc, #220]	@ (8001b28 <loop+0x1e4>)
 8001a4a:	f007 f9c3 	bl	8008dd4 <CDC_Transmit_FS>
            endstopZWasPressed = true;
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <loop+0x1e0>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e010      	b.n	8001a78 <loop+0x134>
        } else if (!endstopZ && endstopZWasPressed) {
 8001a56:	787b      	ldrb	r3, [r7, #1]
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <loop+0x134>
 8001a62:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <loop+0x1e0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <loop+0x134>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z desactivado\r\n", 30);
 8001a6a:	211e      	movs	r1, #30
 8001a6c:	482f      	ldr	r0, [pc, #188]	@ (8001b2c <loop+0x1e8>)
 8001a6e:	f007 f9b1 	bl	8008dd4 <CDC_Transmit_FS>
            endstopZWasPressed = false;
 8001a72:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <loop+0x1e0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
        }
    }

    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <loop+0x1ec>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03c      	beq.n	8001afa <loop+0x1b6>
                usbBufferIndex, usbBuffer);
        CDC_Transmit_FS((uint8_t*)debugStatus, strlen(debugStatus));
        #endif
        
        // Verificar que el buffer no esté vacío y contenga algo más que espacios
        bool hasValidCommand = false;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
        for (int i = 0; i < usbBufferIndex; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	e01d      	b.n	8001ac6 <loop+0x182>
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8001a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001b34 <loop+0x1f0>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d014      	beq.n	8001ac0 <loop+0x17c>
 8001a96:	4a27      	ldr	r2, [pc, #156]	@ (8001b34 <loop+0x1f0>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b09      	cmp	r3, #9
 8001aa0:	d00e      	beq.n	8001ac0 <loop+0x17c>
 8001aa2:	4a24      	ldr	r2, [pc, #144]	@ (8001b34 <loop+0x1f0>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b0d      	cmp	r3, #13
 8001aac:	d008      	beq.n	8001ac0 <loop+0x17c>
 8001aae:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <loop+0x1f0>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d002      	beq.n	8001ac0 <loop+0x17c>
                hasValidCommand = true;
 8001aba:	2301      	movs	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
                break;
 8001abe:	e007      	b.n	8001ad0 <loop+0x18c>
        for (int i = 0; i < usbBufferIndex; i++) {
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <loop+0x1f4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbdc      	blt.n	8001a8a <loop+0x146>
            }
        }
        
        if (hasValidCommand && usbBufferIndex > 0) {
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <loop+0x1a0>
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <loop+0x1f4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	dd02      	ble.n	8001ae4 <loop+0x1a0>
            char debugMsg[120];
            sprintf(debugMsg, ">>> [%s]\r\n", usbBuffer);
            CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
            #endif
            
            processGcode(usbBuffer);
 8001ade:	4815      	ldr	r0, [pc, #84]	@ (8001b34 <loop+0x1f0>)
 8001ae0:	f7ff fe5e 	bl	80017a0 <processGcode>
        }
        
        // IMPORTANTE: Resetear todo después de procesar (o intentar procesar)
        usbBufferIndex = 0;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <loop+0x1f4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8001aea:	2264      	movs	r2, #100	@ 0x64
 8001aec:	2100      	movs	r1, #0
 8001aee:	4811      	ldr	r0, [pc, #68]	@ (8001b34 <loop+0x1f0>)
 8001af0:	f008 fc7d 	bl	800a3ee <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8001af4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <loop+0x1ec>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
    }
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003d8 	.word	0x200003d8
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	200003dc 	.word	0x200003dc
 8001b10:	0800c620 	.word	0x0800c620
 8001b14:	0800c63c 	.word	0x0800c63c
 8001b18:	200003dd 	.word	0x200003dd
 8001b1c:	0800c65c 	.word	0x0800c65c
 8001b20:	0800c678 	.word	0x0800c678
 8001b24:	200003de 	.word	0x200003de
 8001b28:	0800c698 	.word	0x0800c698
 8001b2c:	0800c6b4 	.word	0x0800c6b4
 8001b30:	200003d4 	.word	0x200003d4
 8001b34:	2000036c 	.word	0x2000036c
 8001b38:	200003d0 	.word	0x200003d0

08001b3c <setup>:

void setup(void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <setup+0x58>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a13      	ldr	r2, [pc, #76]	@ (8001b94 <setup+0x58>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <setup+0x5c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <setup+0x5c>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Habilita driver X
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5e:	480f      	ldr	r0, [pc, #60]	@ (8001b9c <setup+0x60>)
 8001b60:	f000 ff3b 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Y
 8001b64:	2200      	movs	r2, #0
 8001b66:	2110      	movs	r1, #16
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <setup+0x60>)
 8001b6a:	f000 ff36 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Z
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b74:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <setup+0x64>)
 8001b76:	f000 ff30 	bl	80029da <HAL_GPIO_WritePin>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4807      	ldr	r0, [pc, #28]	@ (8001b9c <setup+0x60>)
 8001b80:	f000 ff2b 	bl	80029da <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2102      	movs	r1, #2
 8001b88:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <setup+0x60>)
 8001b8a:	f000 ff26 	bl	80029da <HAL_GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000edf0 	.word	0xe000edf0
 8001b98:	e0001000 	.word	0xe0001000
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <showConfiguration>:

// Función auxiliar para movimiento genérico (no utilizada actualmente)
// Se mantiene para compatibilidad futura

// Función para mostrar la configuración actual del sistema
void showConfiguration(void) {
 8001ba4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba8:	b0ba      	sub	sp, #232	@ 0xe8
 8001baa:	af04      	add	r7, sp, #16
    char msg[200];
    
    CDC_Transmit_FS((uint8_t*)"=== CONFIGURACIÓN CNC ===\r\n", 28);
 8001bac:	211c      	movs	r1, #28
 8001bae:	4850      	ldr	r0, [pc, #320]	@ (8001cf0 <showConfiguration+0x14c>)
 8001bb0:	f007 f910 	bl	8008dd4 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	224f      	movs	r2, #79	@ 0x4f
 8001bb8:	494e      	ldr	r1, [pc, #312]	@ (8001cf4 <showConfiguration+0x150>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f008 fbb2 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fac4 	bl	8000150 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f007 f8ff 	bl	8008dd4 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	224f      	movs	r2, #79	@ 0x4f
 8001bda:	4947      	ldr	r1, [pc, #284]	@ (8001cf8 <showConfiguration+0x154>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f008 fba1 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fab3 	bl	8000150 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f007 f8ee 	bl	8008dd4 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001bfe:	493f      	ldr	r1, [pc, #252]	@ (8001cfc <showConfiguration+0x158>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f008 fb8f 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe faa1 	bl	8000150 <strlen>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f007 f8dc 	bl	8008dd4 <CDC_Transmit_FS>
    
    sprintf(msg, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001c1c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001c20:	461a      	mov	r2, r3
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	4936      	ldr	r1, [pc, #216]	@ (8001d00 <showConfiguration+0x15c>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f008 fb7c 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fa8e 	bl	8000150 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f007 f8c9 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Mostrar posición actual
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001c42:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <showConfiguration+0x160>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f80a 	bl	8000c60 <__aeabi_i2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	492e      	ldr	r1, [pc, #184]	@ (8001d08 <showConfiguration+0x164>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f90d 	bl	8000e70 <__aeabi_fdiv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <showConfiguration+0x168>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fffd 	bl	8000c60 <__aeabi_i2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4927      	ldr	r1, [pc, #156]	@ (8001d08 <showConfiguration+0x164>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f900 	bl	8000e70 <__aeabi_fdiv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001c76:	4b26      	ldr	r3, [pc, #152]	@ (8001d10 <showConfiguration+0x16c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fff0 	bl	8000c60 <__aeabi_i2f>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4924      	ldr	r1, [pc, #144]	@ (8001d14 <showConfiguration+0x170>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f8f3 	bl	8000e70 <__aeabi_fdiv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    sprintf(msg, "Posición actual: X%.2f Y%.2f Z%.2f mm\r\n", xPos, yPos, zPos);
 8001c90:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001c94:	f7fe fbc8 	bl	8000428 <__aeabi_f2d>
 8001c98:	4680      	mov	r8, r0
 8001c9a:	4689      	mov	r9, r1
 8001c9c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001ca0:	f7fe fbc2 	bl	8000428 <__aeabi_f2d>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	460d      	mov	r5, r1
 8001ca8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001cac:	f7fe fbbc 	bl	8000428 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	1d38      	adds	r0, r7, #4
 8001cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cba:	e9cd 4500 	strd	r4, r5, [sp]
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	4915      	ldr	r1, [pc, #84]	@ (8001d18 <showConfiguration+0x174>)
 8001cc4:	f008 fb2e 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fa40 	bl	8000150 <strlen>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f007 f87b 	bl	8008dd4 <CDC_Transmit_FS>
    
    CDC_Transmit_FS((uint8_t*)"=== FIN CONFIGURACIÓN ===\r\n", 28);
 8001cde:	211c      	movs	r1, #28
 8001ce0:	480e      	ldr	r0, [pc, #56]	@ (8001d1c <showConfiguration+0x178>)
 8001ce2:	f007 f877 	bl	8008dd4 <CDC_Transmit_FS>
}
 8001ce6:	bf00      	nop
 8001ce8:	37d8      	adds	r7, #216	@ 0xd8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cf0:	0800c6d4 	.word	0x0800c6d4
 8001cf4:	0800c6f4 	.word	0x0800c6f4
 8001cf8:	0800c70c 	.word	0x0800c70c
 8001cfc:	0800c724 	.word	0x0800c724
 8001d00:	0800c73c 	.word	0x0800c73c
 8001d04:	20000360 	.word	0x20000360
 8001d08:	429e0000 	.word	0x429e0000
 8001d0c:	20000364 	.word	0x20000364
 8001d10:	20000368 	.word	0x20000368
 8001d14:	4575a000 	.word	0x4575a000
 8001d18:	0800c750 	.word	0x0800c750
 8001d1c:	0800c77c 	.word	0x0800c77c

08001d20 <isEndstopPressed>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
    switch(axis) {
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b5a      	cmp	r3, #90	@ 0x5a
 8001d2e:	d01e      	beq.n	8001d6e <isEndstopPressed+0x4e>
 8001d30:	2b5a      	cmp	r3, #90	@ 0x5a
 8001d32:	dc28      	bgt.n	8001d86 <isEndstopPressed+0x66>
 8001d34:	2b58      	cmp	r3, #88	@ 0x58
 8001d36:	d002      	beq.n	8001d3e <isEndstopPressed+0x1e>
 8001d38:	2b59      	cmp	r3, #89	@ 0x59
 8001d3a:	d00c      	beq.n	8001d56 <isEndstopPressed+0x36>
 8001d3c:	e023      	b.n	8001d86 <isEndstopPressed+0x66>
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001d3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d42:	4813      	ldr	r0, [pc, #76]	@ (8001d90 <isEndstopPressed+0x70>)
 8001d44:	f000 fe32 	bl	80029ac <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e018      	b.n	8001d88 <isEndstopPressed+0x68>
        case 'Y':
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001d56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d5a:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <isEndstopPressed+0x70>)
 8001d5c:	f000 fe26 	bl	80029ac <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	e00c      	b.n	8001d88 <isEndstopPressed+0x68>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d72:	4807      	ldr	r0, [pc, #28]	@ (8001d90 <isEndstopPressed+0x70>)
 8001d74:	f000 fe1a 	bl	80029ac <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	e000      	b.n	8001d88 <isEndstopPressed+0x68>
        default:
            return false;
 8001d86:	2300      	movs	r3, #0
    }
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40010c00 	.word	0x40010c00

08001d94 <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b098      	sub	sp, #96	@ 0x60
 8001d98:	af00      	add	r7, sp, #0
    char msg[80];
    
    // Enviar mensaje de inicio de homing
    CDC_Transmit_FS((uint8_t*)"Iniciando secuencia de homingg...\r\n", 34);
 8001d9a:	2122      	movs	r1, #34	@ 0x22
 8001d9c:	48bb      	ldr	r0, [pc, #748]	@ (800208c <performHoming+0x2f8>)
 8001d9e:	f007 f819 	bl	8008dd4 <CDC_Transmit_FS>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(msg, "Fase 1: Buscando finales de carrera...\r\n");
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	49ba      	ldr	r1, [pc, #744]	@ (8002090 <performHoming+0x2fc>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f008 fabc 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe f9ce 	bl	8000150 <strlen>
 8001db4:	4603      	mov	r3, r0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f007 f809 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Homing del eje X
    sprintf(msg, "Homing eje X...\r\n");
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	49b3      	ldr	r1, [pc, #716]	@ (8002094 <performHoming+0x300>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 faac 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe f9be 	bl	8000150 <strlen>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f006 fff9 	bl	8008dd4 <CDC_Transmit_FS>

    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	48ac      	ldr	r0, [pc, #688]	@ (8002098 <performHoming+0x304>)
 8001de8:	f000 fdf7 	bl	80029da <HAL_GPIO_WritePin>
    // Mover hacia el final de carrera X (dirección negativa)
    while (!isEndstopPressed('X')) {
 8001dec:	e006      	b.n	8001dfc <performHoming+0x68>
        X_stepOnce();
 8001dee:	f7ff fa63 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001df2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fa38 	bl	800126c <delay_us>
    while (!isEndstopPressed('X')) {
 8001dfc:	2058      	movs	r0, #88	@ 0x58
 8001dfe:	f7ff ff8f 	bl	8001d20 <isEndstopPressed>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ef      	bne.n	8001dee <performHoming+0x5a>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	48a1      	ldr	r0, [pc, #644]	@ (8002098 <performHoming+0x304>)
 8001e14:	f000 fde1 	bl	80029da <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001e18:	2300      	movs	r3, #0
 8001e1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e1c:	e012      	b.n	8001e44 <performHoming+0xb0>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001e1e:	2058      	movs	r0, #88	@ 0x58
 8001e20:	f7ff ff7e 	bl	8001d20 <isEndstopPressed>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <performHoming+0xb8>
        X_stepOnce();
 8001e30:	f7ff fa42 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e34:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa17 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e40:	3301      	adds	r3, #1
 8001e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	dde9      	ble.n	8001e1e <performHoming+0x8a>
 8001e4a:	e000      	b.n	8001e4e <performHoming+0xba>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001e4c:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4891      	ldr	r0, [pc, #580]	@ (8002098 <performHoming+0x304>)
 8001e54:	f000 fdc1 	bl	80029da <HAL_GPIO_WritePin>
    while (!isEndstopPressed('X')) {
 8001e58:	e00a      	b.n	8001e70 <performHoming+0xdc>
        X_stepOnce();
 8001e5a:	f7ff fa2d 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001e5e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001e62:	461a      	mov	r2, r3
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f9fe 	bl	800126c <delay_us>
    while (!isEndstopPressed('X')) {
 8001e70:	2058      	movs	r0, #88	@ 0x58
 8001e72:	f7ff ff55 	bl	8001d20 <isEndstopPressed>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1eb      	bne.n	8001e5a <performHoming+0xc6>
    }
    
    currentX = 0; // Establecer posición home
 8001e82:	4b86      	ldr	r3, [pc, #536]	@ (800209c <performHoming+0x308>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje XX en posición home\r\n");
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4985      	ldr	r1, [pc, #532]	@ (80020a0 <performHoming+0x30c>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f008 fa49 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f95b 	bl	8000150 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f006 ff96 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Homing del eje Y
    sprintf(msg, "Homing eje Y...\r\n");
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	497e      	ldr	r1, [pc, #504]	@ (80020a4 <performHoming+0x310>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f008 fa39 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe f94b 	bl	8000150 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f006 ff86 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Y (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2108      	movs	r1, #8
 8001ecc:	4872      	ldr	r0, [pc, #456]	@ (8002098 <performHoming+0x304>)
 8001ece:	f000 fd84 	bl	80029da <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001ed2:	e006      	b.n	8001ee2 <performHoming+0x14e>
        Y_stepOnce();
 8001ed4:	f7ff fa04 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001ed8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff f9c5 	bl	800126c <delay_us>
    while (!isEndstopPressed('Y')) {
 8001ee2:	2059      	movs	r0, #89	@ 0x59
 8001ee4:	f7ff ff1c 	bl	8001d20 <isEndstopPressed>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ef      	bne.n	8001ed4 <performHoming+0x140>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	4867      	ldr	r0, [pc, #412]	@ (8002098 <performHoming+0x304>)
 8001efa:	f000 fd6e 	bl	80029da <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001efe:	2300      	movs	r3, #0
 8001f00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f02:	e012      	b.n	8001f2a <performHoming+0x196>
        if (!isEndstopPressed('Y')) break;
 8001f04:	2059      	movs	r0, #89	@ 0x59
 8001f06:	f7ff ff0b 	bl	8001d20 <isEndstopPressed>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f083 0301 	eor.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <performHoming+0x19e>
        Y_stepOnce();
 8001f16:	f7ff f9e3 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001f1a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f9a4 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001f24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f26:	3301      	adds	r3, #1
 8001f28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	dde9      	ble.n	8001f04 <performHoming+0x170>
 8001f30:	e000      	b.n	8001f34 <performHoming+0x1a0>
        if (!isEndstopPressed('Y')) break;
 8001f32:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001f34:	2200      	movs	r2, #0
 8001f36:	2108      	movs	r1, #8
 8001f38:	4857      	ldr	r0, [pc, #348]	@ (8002098 <performHoming+0x304>)
 8001f3a:	f000 fd4e 	bl	80029da <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001f3e:	e00a      	b.n	8001f56 <performHoming+0x1c2>
        Y_stepOnce();
 8001f40:	f7ff f9ce 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001f44:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f98b 	bl	800126c <delay_us>
    while (!isEndstopPressed('Y')) {
 8001f56:	2059      	movs	r0, #89	@ 0x59
 8001f58:	f7ff fee2 	bl	8001d20 <isEndstopPressed>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1eb      	bne.n	8001f40 <performHoming+0x1ac>
    }
    
    currentY = 0; // Establecer posición home
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <performHoming+0x314>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Y en posición home\r\n");
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	494e      	ldr	r1, [pc, #312]	@ (80020ac <performHoming+0x318>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 f9d6 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f8e8 	bl	8000150 <strlen>
 8001f80:	4603      	mov	r3, r0
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f006 ff23 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Homing del eje Z
    sprintf(msg, "Homing eje Z...\r\n");
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4947      	ldr	r1, [pc, #284]	@ (80020b0 <performHoming+0x31c>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 f9c6 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f8d8 	bl	8000150 <strlen>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 ff13 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Z (dirección negativa)
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fb4:	483f      	ldr	r0, [pc, #252]	@ (80020b4 <performHoming+0x320>)
 8001fb6:	f000 fd10 	bl	80029da <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001fba:	e006      	b.n	8001fca <performHoming+0x236>
        Z_stepOnce();
 8001fbc:	f7ff f9a6 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8001fc0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f951 	bl	800126c <delay_us>
    while (!isEndstopPressed('Z')) {
 8001fca:	205a      	movs	r0, #90	@ 0x5a
 8001fcc:	f7ff fea8 	bl	8001d20 <isEndstopPressed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f083 0301 	eor.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ef      	bne.n	8001fbc <performHoming+0x228>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe2:	4834      	ldr	r0, [pc, #208]	@ (80020b4 <performHoming+0x320>)
 8001fe4:	f000 fcf9 	bl	80029da <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001fe8:	2300      	movs	r3, #0
 8001fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fec:	e012      	b.n	8002014 <performHoming+0x280>
        if (!isEndstopPressed('Z')) break;
 8001fee:	205a      	movs	r0, #90	@ 0x5a
 8001ff0:	f7ff fe96 	bl	8001d20 <isEndstopPressed>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <performHoming+0x288>
        Z_stepOnce();
 8002000:	f7ff f984 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8002004:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f92f 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 800200e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002010:	3301      	adds	r3, #1
 8002012:	657b      	str	r3, [r7, #84]	@ 0x54
 8002014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002016:	2b09      	cmp	r3, #9
 8002018:	dde9      	ble.n	8001fee <performHoming+0x25a>
 800201a:	e000      	b.n	800201e <performHoming+0x28a>
        if (!isEndstopPressed('Z')) break;
 800201c:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002024:	4823      	ldr	r0, [pc, #140]	@ (80020b4 <performHoming+0x320>)
 8002026:	f000 fcd8 	bl	80029da <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 800202a:	e00a      	b.n	8002042 <performHoming+0x2ae>
        Z_stepOnce();
 800202c:	f7ff f96e 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8002030:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8002034:	461a      	mov	r2, r3
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f915 	bl	800126c <delay_us>
    while (!isEndstopPressed('Z')) {
 8002042:	205a      	movs	r0, #90	@ 0x5a
 8002044:	f7ff fe6c 	bl	8001d20 <isEndstopPressed>
 8002048:	4603      	mov	r3, r0
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1eb      	bne.n	800202c <performHoming+0x298>
    }
    
    currentZ = 0; // Establecer posición home
 8002054:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <performHoming+0x324>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Z en posición home\r\n");
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	4917      	ldr	r1, [pc, #92]	@ (80020bc <performHoming+0x328>)
 800205e:	4618      	mov	r0, r3
 8002060:	f008 f960 	bl	800a324 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f872 	bl	8000150 <strlen>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f006 fead 	bl	8008dd4 <CDC_Transmit_FS>
    
    // Mensaje final
    CDC_Transmit_FS((uint8_t*)"Homing completado. Todos los ejes en posición home.\r\n", 54);
 800207a:	2136      	movs	r1, #54	@ 0x36
 800207c:	4810      	ldr	r0, [pc, #64]	@ (80020c0 <performHoming+0x32c>)
 800207e:	f006 fea9 	bl	8008dd4 <CDC_Transmit_FS>
}
 8002082:	bf00      	nop
 8002084:	3760      	adds	r7, #96	@ 0x60
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800c79c 	.word	0x0800c79c
 8002090:	0800c7c0 	.word	0x0800c7c0
 8002094:	0800c7ec 	.word	0x0800c7ec
 8002098:	40010c00 	.word	0x40010c00
 800209c:	20000360 	.word	0x20000360
 80020a0:	0800c800 	.word	0x0800c800
 80020a4:	0800c81c 	.word	0x0800c81c
 80020a8:	20000364 	.word	0x20000364
 80020ac:	0800c830 	.word	0x0800c830
 80020b0:	0800c84c 	.word	0x0800c84c
 80020b4:	40010800 	.word	0x40010800
 80020b8:	20000368 	.word	0x20000368
 80020bc:	0800c860 	.word	0x0800c860
 80020c0:	0800c87c 	.word	0x0800c87c

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <Error_Handler+0x8>

080020d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_MspInit+0x5c>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	4a14      	ldr	r2, [pc, #80]	@ (800212c <HAL_MspInit+0x5c>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_MspInit+0x5c>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_MspInit+0x5c>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a0e      	ldr	r2, [pc, #56]	@ (800212c <HAL_MspInit+0x5c>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_MspInit+0x5c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_MspInit+0x60>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <HAL_MspInit+0x60>)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <NMI_Handler+0x4>

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <MemManage_Handler+0x4>

0800214c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <UsageFault_Handler+0x4>

0800215c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f000 f940 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002192:	f000 fd56 	bl	8002c42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200010b0 	.word	0x200010b0

080021a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return 1;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <_kill>:

int _kill(int pid, int sig)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b8:	f008 f986 	bl	800a4c8 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	2216      	movs	r2, #22
 80021c0:	601a      	str	r2, [r3, #0]
  return -1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_exit>:

void _exit (int status)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d6:	f04f 31ff 	mov.w	r1, #4294967295
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffe7 	bl	80021ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <_exit+0x12>

080021e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00a      	b.n	800220c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f6:	f3af 8000 	nop.w
 80021fa:	4601      	mov	r1, r0
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	60ba      	str	r2, [r7, #8]
 8002202:	b2ca      	uxtb	r2, r1
 8002204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	dbf0      	blt.n	80021f6 <_read+0x12>
  }

  return len;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e009      	b.n	8002244 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf1      	blt.n	8002230 <_write+0x12>
  }
  return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_close>:

int _close(int file)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800227c:	605a      	str	r2, [r3, #4]
  return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <_isatty>:

int _isatty(int file)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f008 f8ee 	bl	800a4c8 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20005000 	.word	0x20005000
 8002318:	00000400 	.word	0x00000400
 800231c:	200003e0 	.word	0x200003e0
 8002320:	200016f8 	.word	0x200016f8

08002324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002330:	f7ff fff8 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002334:	480b      	ldr	r0, [pc, #44]	@ (8002364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002336:	490c      	ldr	r1, [pc, #48]	@ (8002368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <LoopFillZerobss+0x16>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800233c:	e002      	b.n	8002344 <LoopCopyDataInit>

0800233e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002342:	3304      	adds	r3, #4

08002344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002348:	d3f9      	bcc.n	800233e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800234c:	4c09      	ldr	r4, [pc, #36]	@ (8002374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002350:	e001      	b.n	8002356 <LoopFillZerobss>

08002352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002354:	3204      	adds	r2, #4

08002356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002358:	d3fb      	bcc.n	8002352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235a:	f008 f8bb 	bl	800a4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800235e:	f7fe fe95 	bl	800108c <main>
  bx lr
 8002362:	4770      	bx	lr
  ldr r0, =_sdata
 8002364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002368:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 800236c:	0800ccec 	.word	0x0800ccec
  ldr r2, =_sbss
 8002370:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002374:	200016f4 	.word	0x200016f4

08002378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC1_2_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_Init+0x28>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <HAL_Init+0x28>)
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 f947 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	200f      	movs	r0, #15
 8002394:	f000 f808 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002398:	f7ff fe9a 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x54>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_InitTick+0x58>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f95f 	bl	800268a <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00e      	b.n	80023f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d80a      	bhi.n	80023f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023dc:	2200      	movs	r2, #0
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f000 f927 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e8:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <HAL_InitTick+0x5c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000008 	.word	0x20000008
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_IncTick+0x1c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_IncTick+0x20>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a03      	ldr	r2, [pc, #12]	@ (8002428 <HAL_IncTick+0x20>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000008 	.word	0x20000008
 8002428:	200003e4 	.word	0x200003e4

0800242c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return uwTick;
 8002430:	4b02      	ldr	r3, [pc, #8]	@ (800243c <HAL_GetTick+0x10>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	200003e4 	.word	0x200003e4

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff fff0 	bl	800242c <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffe0 	bl	800242c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4906      	ldr	r1, [pc, #24]	@ (8002520 <__NVIC_EnableIRQ+0x34>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	@ (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	@ (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	@ 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	@ (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff90 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff2d 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff42 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff90 	bl	8002578 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5f 	bl	8002524 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff35 	bl	80024ec <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b08b      	sub	sp, #44	@ 0x2c
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026b6:	e169      	b.n	800298c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026b8:	2201      	movs	r2, #1
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8158 	bne.w	8002986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a9a      	ldr	r2, [pc, #616]	@ (8002944 <HAL_GPIO_Init+0x2a0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d05e      	beq.n	800279e <HAL_GPIO_Init+0xfa>
 80026e0:	4a98      	ldr	r2, [pc, #608]	@ (8002944 <HAL_GPIO_Init+0x2a0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d875      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 80026e6:	4a98      	ldr	r2, [pc, #608]	@ (8002948 <HAL_GPIO_Init+0x2a4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d058      	beq.n	800279e <HAL_GPIO_Init+0xfa>
 80026ec:	4a96      	ldr	r2, [pc, #600]	@ (8002948 <HAL_GPIO_Init+0x2a4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d86f      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 80026f2:	4a96      	ldr	r2, [pc, #600]	@ (800294c <HAL_GPIO_Init+0x2a8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d052      	beq.n	800279e <HAL_GPIO_Init+0xfa>
 80026f8:	4a94      	ldr	r2, [pc, #592]	@ (800294c <HAL_GPIO_Init+0x2a8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d869      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 80026fe:	4a94      	ldr	r2, [pc, #592]	@ (8002950 <HAL_GPIO_Init+0x2ac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d04c      	beq.n	800279e <HAL_GPIO_Init+0xfa>
 8002704:	4a92      	ldr	r2, [pc, #584]	@ (8002950 <HAL_GPIO_Init+0x2ac>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d863      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 800270a:	4a92      	ldr	r2, [pc, #584]	@ (8002954 <HAL_GPIO_Init+0x2b0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d046      	beq.n	800279e <HAL_GPIO_Init+0xfa>
 8002710:	4a90      	ldr	r2, [pc, #576]	@ (8002954 <HAL_GPIO_Init+0x2b0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d85d      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 8002716:	2b12      	cmp	r3, #18
 8002718:	d82a      	bhi.n	8002770 <HAL_GPIO_Init+0xcc>
 800271a:	2b12      	cmp	r3, #18
 800271c:	d859      	bhi.n	80027d2 <HAL_GPIO_Init+0x12e>
 800271e:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <HAL_GPIO_Init+0x80>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	0800279f 	.word	0x0800279f
 8002728:	08002779 	.word	0x08002779
 800272c:	0800278b 	.word	0x0800278b
 8002730:	080027cd 	.word	0x080027cd
 8002734:	080027d3 	.word	0x080027d3
 8002738:	080027d3 	.word	0x080027d3
 800273c:	080027d3 	.word	0x080027d3
 8002740:	080027d3 	.word	0x080027d3
 8002744:	080027d3 	.word	0x080027d3
 8002748:	080027d3 	.word	0x080027d3
 800274c:	080027d3 	.word	0x080027d3
 8002750:	080027d3 	.word	0x080027d3
 8002754:	080027d3 	.word	0x080027d3
 8002758:	080027d3 	.word	0x080027d3
 800275c:	080027d3 	.word	0x080027d3
 8002760:	080027d3 	.word	0x080027d3
 8002764:	080027d3 	.word	0x080027d3
 8002768:	08002781 	.word	0x08002781
 800276c:	08002795 	.word	0x08002795
 8002770:	4a79      	ldr	r2, [pc, #484]	@ (8002958 <HAL_GPIO_Init+0x2b4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002776:	e02c      	b.n	80027d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e029      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	3304      	adds	r3, #4
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e024      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	3308      	adds	r3, #8
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e01f      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	330c      	adds	r3, #12
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e01a      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027a6:	2304      	movs	r3, #4
 80027a8:	623b      	str	r3, [r7, #32]
          break;
 80027aa:	e013      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b4:	2308      	movs	r3, #8
 80027b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	611a      	str	r2, [r3, #16]
          break;
 80027be:	e009      	b.n	80027d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c0:	2308      	movs	r3, #8
 80027c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	615a      	str	r2, [r3, #20]
          break;
 80027ca:	e003      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	e000      	b.n	80027d4 <HAL_GPIO_Init+0x130>
          break;
 80027d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2bff      	cmp	r3, #255	@ 0xff
 80027d8:	d801      	bhi.n	80027de <HAL_GPIO_Init+0x13a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	e001      	b.n	80027e2 <HAL_GPIO_Init+0x13e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3304      	adds	r3, #4
 80027e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2bff      	cmp	r3, #255	@ 0xff
 80027e8:	d802      	bhi.n	80027f0 <HAL_GPIO_Init+0x14c>
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x152>
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	3b08      	subs	r3, #8
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	210f      	movs	r1, #15
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	401a      	ands	r2, r3
 8002808:	6a39      	ldr	r1, [r7, #32]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	431a      	orrs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80b1 	beq.w	8002986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002824:	4b4d      	ldr	r3, [pc, #308]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a4c      	ldr	r2, [pc, #304]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b4a      	ldr	r3, [pc, #296]	@ (800295c <HAL_GPIO_Init+0x2b8>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800283c:	4a48      	ldr	r2, [pc, #288]	@ (8002960 <HAL_GPIO_Init+0x2bc>)
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a40      	ldr	r2, [pc, #256]	@ (8002964 <HAL_GPIO_Init+0x2c0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d013      	beq.n	8002890 <HAL_GPIO_Init+0x1ec>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a3f      	ldr	r2, [pc, #252]	@ (8002968 <HAL_GPIO_Init+0x2c4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_GPIO_Init+0x1e8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a3e      	ldr	r2, [pc, #248]	@ (800296c <HAL_GPIO_Init+0x2c8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0x1e4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a3d      	ldr	r2, [pc, #244]	@ (8002970 <HAL_GPIO_Init+0x2cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_GPIO_Init+0x1e0>
 8002880:	2303      	movs	r3, #3
 8002882:	e006      	b.n	8002892 <HAL_GPIO_Init+0x1ee>
 8002884:	2304      	movs	r3, #4
 8002886:	e004      	b.n	8002892 <HAL_GPIO_Init+0x1ee>
 8002888:	2302      	movs	r3, #2
 800288a:	e002      	b.n	8002892 <HAL_GPIO_Init+0x1ee>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_GPIO_Init+0x1ee>
 8002890:	2300      	movs	r3, #0
 8002892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002894:	f002 0203 	and.w	r2, r2, #3
 8002898:	0092      	lsls	r2, r2, #2
 800289a:	4093      	lsls	r3, r2
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028a2:	492f      	ldr	r1, [pc, #188]	@ (8002960 <HAL_GPIO_Init+0x2bc>)
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	492c      	ldr	r1, [pc, #176]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
 80028c8:	e006      	b.n	80028d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	4928      	ldr	r1, [pc, #160]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028e4:	4b23      	ldr	r3, [pc, #140]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4922      	ldr	r1, [pc, #136]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60cb      	str	r3, [r1, #12]
 80028f0:	e006      	b.n	8002900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	491e      	ldr	r1, [pc, #120]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4918      	ldr	r1, [pc, #96]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
 8002918:	e006      	b.n	8002928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800291a:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	43db      	mvns	r3, r3
 8002922:	4914      	ldr	r1, [pc, #80]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 8002924:	4013      	ands	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d021      	beq.n	8002978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002934:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	490e      	ldr	r1, [pc, #56]	@ (8002974 <HAL_GPIO_Init+0x2d0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e021      	b.n	8002986 <HAL_GPIO_Init+0x2e2>
 8002942:	bf00      	nop
 8002944:	10320000 	.word	0x10320000
 8002948:	10310000 	.word	0x10310000
 800294c:	10220000 	.word	0x10220000
 8002950:	10210000 	.word	0x10210000
 8002954:	10120000 	.word	0x10120000
 8002958:	10110000 	.word	0x10110000
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000
 8002964:	40010800 	.word	0x40010800
 8002968:	40010c00 	.word	0x40010c00
 800296c:	40011000 	.word	0x40011000
 8002970:	40011400 	.word	0x40011400
 8002974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	43db      	mvns	r3, r3
 8002980:	4909      	ldr	r1, [pc, #36]	@ (80029a8 <HAL_GPIO_Init+0x304>)
 8002982:	4013      	ands	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f ae8e 	bne.w	80026b8 <HAL_GPIO_Init+0x14>
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	372c      	adds	r7, #44	@ 0x2c
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
 80029c8:	e001      	b.n	80029ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	807b      	strh	r3, [r7, #2]
 80029e6:	4613      	mov	r3, r2
 80029e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ea:	787b      	ldrb	r3, [r7, #1]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f0:	887a      	ldrh	r2, [r7, #2]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029f6:	e003      	b.n	8002a00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029f8:	887b      	ldrh	r3, [r7, #2]
 80029fa:	041a      	lsls	r2, r3, #16
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	611a      	str	r2, [r3, #16]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0e8      	b.n	8002bee <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f006 fb03 	bl	800903c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 f9f6 	bl	8004e3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a58:	f002 f9cc 	bl	8004df4 <USB_CoreInit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0bf      	b.n	8002bee <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 f9fa 	bl	8004e6e <USB_SetCurrentMode>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b0      	b.n	8002bee <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e03e      	b.n	8002b10 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3311      	adds	r3, #17
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3313      	adds	r3, #19
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3320      	adds	r3, #32
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	3324      	adds	r3, #36	@ 0x24
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	791b      	ldrb	r3, [r3, #4]
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3bb      	bcc.n	8002a92 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e044      	b.n	8002baa <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3b5      	bcc.n	8002b20 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bbe:	f002 f962 	bl	8004e86 <USB_DevInit>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e00c      	b.n	8002bee <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fbe1 	bl	80073ae <USB_DevDisconnect>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_PCD_Start+0x16>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e016      	b.n	8002c3a <HAL_PCD_Start+0x44>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f002 f8f8 	bl	8004e0e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f006 fc7e 	bl	8009522 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fbb5 	bl	800739a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b088      	sub	sp, #32
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 fbb7 	bl	80073c2 <USB_ReadInterrupts>
 8002c54:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb1a 	bl	800329a <PCD_EP_ISR_Handler>

    return;
 8002c66:	e119      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c84:	b292      	uxth	r2, r2
 8002c86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f006 fa51 	bl	8009132 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c90:	2100      	movs	r1, #0
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f905 	bl	8002ea2 <HAL_PCD_SetAddress>

    return;
 8002c98:	e100      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cb6:	b292      	uxth	r2, r2
 8002cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cbc:	e0ee      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ce0:	e0dc      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d027      	beq.n	8002d3c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	b292      	uxth	r2, r2
 8002d00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0208 	bic.w	r2, r2, #8
 8002d16:	b292      	uxth	r2, r2
 8002d18:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f006 fa41 	bl	80091a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d34:	b292      	uxth	r2, r2
 8002d36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d3a:	e0af      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8083 	beq.w	8002e4e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e010      	b.n	8002d70 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3320      	adds	r3, #32
 8002d64:	443b      	add	r3, r7
 8002d66:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d6a:	7ffb      	ldrb	r3, [r7, #31]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	2b07      	cmp	r3, #7
 8002d74:	d9eb      	bls.n	8002d4e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0201 	orr.w	r2, r2, #1
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002da6:	bf00      	nop
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f6      	beq.n	8002da8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e00f      	b.n	8002df8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
 8002de0:	7ffa      	ldrb	r2, [r7, #31]
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	440a      	add	r2, r1
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3320      	adds	r3, #32
 8002dea:	443b      	add	r3, r7
 8002dec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002df0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	3301      	adds	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d9ec      	bls.n	8002dd8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0208 	orr.w	r2, r2, #8
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0204 	orr.w	r2, r2, #4
 8002e40:	b292      	uxth	r2, r2
 8002e42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f006 f992 	bl	8009170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e4c:	e026      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f006 f950 	bl	8009116 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e76:	e011      	b.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e94:	b292      	uxth	r2, r2
 8002e96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e9a:	bf00      	nop
  }
}
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_PCD_SetAddress+0x1a>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e012      	b.n	8002ee2 <HAL_PCD_SetAddress+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 fa4e 	bl	8007374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b084      	sub	sp, #16
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4603      	mov	r3, r0
 8002efa:	70fb      	strb	r3, [r7, #3]
 8002efc:	460b      	mov	r3, r1
 8002efe:	803b      	strh	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da0e      	bge.n	8002f2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	3310      	adds	r3, #16
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 0207 	and.w	r2, r3, #7
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f58:	883a      	ldrh	r2, [r7, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	78ba      	ldrb	r2, [r7, #2]
 8002f62:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f64:	78bb      	ldrb	r3, [r7, #2]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_PCD_EP_Open+0x94>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e00e      	b.n	8002f9c <HAL_PCD_EP_Open+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 ff97 	bl	8004ec0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0e      	bge.n	8002fd6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 0207 	and.w	r2, r3, #7
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	3310      	adds	r3, #16
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	705a      	strb	r2, [r3, #1]
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 0207 	and.w	r2, r3, #7
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_Close+0x6a>
 800300a:	2302      	movs	r3, #2
 800300c:	e00e      	b.n	800302c <HAL_PCD_EP_Close+0x88>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fb0f 	bl	8005640 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	460b      	mov	r3, r1
 8003042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003044:	7afb      	ldrb	r3, [r7, #11]
 8003046:	f003 0207 	and.w	r2, r3, #7
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	b2da      	uxtb	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6979      	ldr	r1, [r7, #20]
 8003086:	4618      	mov	r0, r3
 8003088:	f002 fcc6 	bl	8005a18 <USB_EPStartXfer>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 0207 	and.w	r2, r3, #7
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80030b8:	681b      	ldr	r3, [r3, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	7afb      	ldrb	r3, [r7, #11]
 80030d6:	f003 0207 	and.w	r2, r3, #7
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	3310      	adds	r3, #16
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	b2da      	uxtb	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6979      	ldr	r1, [r7, #20]
 8003122:	4618      	mov	r0, r3
 8003124:	f002 fc78 	bl	8005a18 <USB_EPStartXfer>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	7912      	ldrb	r2, [r2, #4]
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04c      	b.n	80031ea <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0e      	bge.n	8003176 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00c      	b.n	8003190 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_PCD_EP_SetStall+0x7e>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e01c      	b.n	80031ea <HAL_PCD_EP_SetStall+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 ffdb 	bl	800717a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f004 f900 	bl	80073e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	7912      	ldrb	r2, [r2, #4]
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e040      	b.n	8003292 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003210:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003214:	2b00      	cmp	r3, #0
 8003216:	da0e      	bge.n	8003236 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 0207 	and.w	r2, r3, #7
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	3310      	adds	r3, #16
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	705a      	strb	r2, [r3, #1]
 8003234:	e00e      	b.n	8003254 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 0207 	and.w	r2, r3, #7
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_EP_ClrStall+0x82>
 8003270:	2302      	movs	r3, #2
 8003272:	e00e      	b.n	8003292 <HAL_PCD_EP_ClrStall+0xa0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	f003 ffc9 	bl	800721a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b096      	sub	sp, #88	@ 0x58
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032a2:	e3bb      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80032be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f040 8175 	bne.w	80035b2 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d14e      	bne.n	8003372 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80032e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e4:	81fb      	strh	r3, [r7, #14]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3310      	adds	r3, #16
 80032fc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	3302      	adds	r3, #2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003328:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800332a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	441a      	add	r2, r3
 8003334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003336:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003338:	2100      	movs	r1, #0
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f005 fed1 	bl	80090e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7b5b      	ldrb	r3, [r3, #13]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8368 	beq.w	8003a1c <PCD_EP_ISR_Handler+0x782>
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 8363 	bne.w	8003a1c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7b5b      	ldrb	r3, [r3, #13]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003360:	b2da      	uxtb	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	735a      	strb	r2, [r3, #13]
 8003370:	e354      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003378:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338c:	2b00      	cmp	r3, #0
 800338e:	d034      	beq.n	80033fa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003398:	b29b      	uxth	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	3306      	adds	r3, #6
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f004 f857 	bl	8007482 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29a      	uxth	r2, r3
 80033dc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033e0:	4013      	ands	r3, r2
 80033e2:	823b      	strh	r3, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	8a3a      	ldrh	r2, [r7, #16]
 80033ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ee:	b292      	uxth	r2, r2
 80033f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f005 fe48 	bl	8009088 <HAL_PCD_SetupStageCallback>
 80033f8:	e310      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033fa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f280 830c 	bge.w	8003a1c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29a      	uxth	r2, r3
 800340c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003410:	4013      	ands	r3, r2
 8003412:	83fb      	strh	r3, [r7, #30]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	8bfa      	ldrh	r2, [r7, #30]
 800341a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800341e:	b292      	uxth	r2, r2
 8003420:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	3306      	adds	r3, #6
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <PCD_EP_ISR_Handler+0x1f0>
 8003456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d015      	beq.n	800348a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003468:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800346e:	b29b      	uxth	r3, r3
 8003470:	f004 f807 	bl	8007482 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	441a      	add	r2, r3
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f005 fe11 	bl	80090ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003494:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 82bd 	bne.w	8003a1c <PCD_EP_ISR_Handler+0x782>
 80034a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ae:	f000 82b5 	beq.w	8003a1c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	61bb      	str	r3, [r7, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034dc:	b29a      	uxth	r2, r3
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80034e8:	d91d      	bls.n	8003526 <PCD_EP_ISR_Handler+0x28c>
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <PCD_EP_ISR_Handler+0x26a>
 80034fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003500:	3b01      	subs	r3, #1
 8003502:	647b      	str	r3, [r7, #68]	@ 0x44
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29a      	uxth	r2, r3
 800350a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350c:	b29b      	uxth	r3, r3
 800350e:	029b      	lsls	r3, r3, #10
 8003510:	b29b      	uxth	r3, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29a      	uxth	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	e026      	b.n	8003574 <PCD_EP_ISR_Handler+0x2da>
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <PCD_EP_ISR_Handler+0x2aa>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353c:	b29a      	uxth	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	e017      	b.n	8003574 <PCD_EP_ISR_Handler+0x2da>
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	647b      	str	r3, [r7, #68]	@ 0x44
 800354c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <PCD_EP_ISR_Handler+0x2c4>
 8003558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355a:	3301      	adds	r3, #1
 800355c:	647b      	str	r3, [r7, #68]	@ 0x44
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29a      	uxth	r2, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003566:	b29b      	uxth	r3, r3
 8003568:	029b      	lsls	r3, r3, #10
 800356a:	b29b      	uxth	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	b29a      	uxth	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003584:	827b      	strh	r3, [r7, #18]
 8003586:	8a7b      	ldrh	r3, [r7, #18]
 8003588:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800358c:	827b      	strh	r3, [r7, #18]
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003594:	827b      	strh	r3, [r7, #18]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	8a7b      	ldrh	r3, [r7, #18]
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]
 80035b0:	e234      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035c6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f280 80fc 	bge.w	80037c8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035e6:	4013      	ands	r3, r2
 80035e8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80035fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003602:	b292      	uxth	r2, r2
 8003604:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003606:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	7b1b      	ldrb	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d125      	bne.n	8003670 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362c:	b29b      	uxth	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	3306      	adds	r3, #6
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8092 	beq.w	800377e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	6959      	ldr	r1, [r3, #20]
 8003662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003664:	88da      	ldrh	r2, [r3, #6]
 8003666:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800366a:	f003 ff0a 	bl	8007482 <USB_ReadPMA>
 800366e:	e086      	b.n	800377e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	78db      	ldrb	r3, [r3, #3]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d10a      	bne.n	800368e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800367c:	461a      	mov	r2, r3
 800367e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9d9 	bl	8003a38 <HAL_PCD_EP_DB_Receive>
 8003686:	4603      	mov	r3, r0
 8003688:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800368c:	e077      	b.n	800377e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80036be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d024      	beq.n	8003736 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	3302      	adds	r3, #2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003714:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02e      	beq.n	800377e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	6959      	ldr	r1, [r3, #20]
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	891a      	ldrh	r2, [r3, #8]
 800372c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003730:	f003 fea7 	bl	8007482 <USB_ReadPMA>
 8003734:	e023      	b.n	800377e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4413      	add	r3, r2
 800374a:	3306      	adds	r3, #6
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003762:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	6959      	ldr	r1, [r3, #20]
 8003772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003774:	895a      	ldrh	r2, [r3, #10]
 8003776:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800377a:	f003 fe82 	bl	8007482 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003786:	441a      	add	r2, r3
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800378c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003794:	441a      	add	r2, r3
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800379a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <PCD_EP_ISR_Handler+0x514>
 80037a2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80037a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d206      	bcs.n	80037bc <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80037ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4619      	mov	r1, r3
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f005 fc79 	bl	80090ac <HAL_PCD_DataOutStageCallback>
 80037ba:	e005      	b.n	80037c8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 f928 	bl	8005a18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80037c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8123 	beq.w	8003a1c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80037d6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	3310      	adds	r3, #16
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003804:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	441a      	add	r2, r3
 8003816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800381a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003822:	b29b      	uxth	r3, r3
 8003824:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	78db      	ldrb	r3, [r3, #3]
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 80a2 	bne.w	8003974 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003838:	7b1b      	ldrb	r3, [r3, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8093 	beq.w	8003966 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d046      	beq.n	80038da <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d126      	bne.n	80038a2 <PCD_EP_ISR_Handler+0x608>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	4413      	add	r3, r2
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
 800386c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	011a      	lsls	r2, r3, #4
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	4413      	add	r3, r2
 8003876:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800387a:	623b      	str	r3, [r7, #32]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003886:	b29a      	uxth	r2, r3
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389a:	b29a      	uxth	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e061      	b.n	8003966 <PCD_EP_ISR_Handler+0x6cc>
 80038a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d15d      	bne.n	8003966 <PCD_EP_ISR_Handler+0x6cc>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	4413      	add	r3, r2
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	011a      	lsls	r2, r3, #4
 80038c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ca:	4413      	add	r3, r2
 80038cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	2200      	movs	r2, #0
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e045      	b.n	8003966 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d126      	bne.n	8003936 <PCD_EP_ISR_Handler+0x69c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fc:	4413      	add	r3, r2
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	011a      	lsls	r2, r3, #4
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	4413      	add	r3, r2
 800390a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391a:	b29a      	uxth	r2, r3
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	801a      	strh	r2, [r3, #0]
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800392a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800392e:	b29a      	uxth	r2, r3
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	e017      	b.n	8003966 <PCD_EP_ISR_Handler+0x6cc>
 8003936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d113      	bne.n	8003966 <PCD_EP_ISR_Handler+0x6cc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	4413      	add	r3, r2
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003958:	4413      	add	r3, r2
 800395a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	2200      	movs	r2, #0
 8003964:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f005 fbb8 	bl	80090e2 <HAL_PCD_DataInStageCallback>
 8003972:	e053      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d146      	bne.n	8003a0e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	3302      	adds	r3, #2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80039ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d907      	bls.n	80039c8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80039b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039c0:	1ad2      	subs	r2, r2, r3
 80039c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c4:	619a      	str	r2, [r3, #24]
 80039c6:	e002      	b.n	80039ce <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80039c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f005 fb80 	bl	80090e2 <HAL_PCD_DataInStageCallback>
 80039e2:	e01b      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039ec:	441a      	add	r2, r3
 80039ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80039f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80039fa:	441a      	add	r2, r3
 80039fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 f806 	bl	8005a18 <USB_EPStartXfer>
 8003a0c:	e006      	b.n	8003a1c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a12:	461a      	mov	r2, r3
 8003a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f91b 	bl	8003c52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f6ff ac3b 	blt.w	80032a4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3758      	adds	r7, #88	@ 0x58
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d07e      	beq.n	8003b4e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	3302      	adds	r3, #2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	8b7b      	ldrh	r3, [r7, #26]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d306      	bcc.n	8003a92 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	8b7b      	ldrh	r3, [r7, #26]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	619a      	str	r2, [r3, #24]
 8003a90:	e002      	b.n	8003a98 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2200      	movs	r2, #0
 8003a96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d123      	bne.n	8003ae8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aba:	833b      	strh	r3, [r7, #24]
 8003abc:	8b3b      	ldrh	r3, [r7, #24]
 8003abe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ac2:	833b      	strh	r3, [r7, #24]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	8b3b      	ldrh	r3, [r7, #24]
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d01f      	beq.n	8003b32 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0c:	82fb      	strh	r3, [r7, #22]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	441a      	add	r2, r3
 8003b1c:	8afb      	ldrh	r3, [r7, #22]
 8003b1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8087 	beq.w	8003c48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6959      	ldr	r1, [r3, #20]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	891a      	ldrh	r2, [r3, #8]
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	f003 fc9b 	bl	8007482 <USB_ReadPMA>
 8003b4c:	e07c      	b.n	8003c48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	3306      	adds	r3, #6
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	8b7b      	ldrh	r3, [r7, #26]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d306      	bcc.n	8003b90 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	8b7b      	ldrh	r3, [r7, #26]
 8003b88:	1ad2      	subs	r2, r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	619a      	str	r2, [r3, #24]
 8003b8e:	e002      	b.n	8003b96 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2200      	movs	r2, #0
 8003b94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d123      	bne.n	8003be6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb8:	83fb      	strh	r3, [r7, #30]
 8003bba:	8bfb      	ldrh	r3, [r7, #30]
 8003bbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003bc0:	83fb      	strh	r3, [r7, #30]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11f      	bne.n	8003c30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	83bb      	strh	r3, [r7, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	8bbb      	ldrh	r3, [r7, #28]
 8003c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c30:	8b7b      	ldrh	r3, [r7, #26]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6959      	ldr	r1, [r3, #20]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	895a      	ldrh	r2, [r3, #10]
 8003c42:	8b7b      	ldrh	r3, [r7, #26]
 8003c44:	f003 fc1d 	bl	8007482 <USB_ReadPMA>
    }
  }

  return count;
 8003c48:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3720      	adds	r7, #32
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b0a4      	sub	sp, #144	@ 0x90
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 81dd 	beq.w	8004026 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3302      	adds	r3, #2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c94:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d907      	bls.n	8003cb4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003cac:	1ad2      	subs	r2, r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	e002      	b.n	8003cba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 80b9 	bne.w	8003e36 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d126      	bne.n	8003d1a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce0:	4413      	add	r3, r2
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	011a      	lsls	r2, r3, #4
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	4413      	add	r3, r2
 8003cee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	e01a      	b.n	8003d50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d116      	bne.n	8003d50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d36:	4413      	add	r3, r2
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	011a      	lsls	r2, r3, #4
 8003d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d42:	4413      	add	r3, r2
 8003d44:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d126      	bne.n	8003dac <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	011a      	lsls	r2, r3, #4
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	e017      	b.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d113      	bne.n	8003ddc <HAL_PCD_EP_DB_Transmit+0x18a>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	4413      	add	r3, r2
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f005 f97d 	bl	80090e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003de8:	88fb      	ldrh	r3, [r7, #6]
 8003dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 82fc 	beq.w	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	82fb      	strh	r3, [r7, #22]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	441a      	add	r2, r3
 8003e1e:	8afb      	ldrh	r3, [r7, #22]
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
 8003e34:	e2da      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d021      	beq.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	f040 82ae 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e98:	441a      	add	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	69da      	ldr	r2, [r3, #28]
 8003ea2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ea6:	441a      	add	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d30b      	bcc.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec8:	1ad2      	subs	r2, r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	621a      	str	r2, [r3, #32]
 8003ece:	e017      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ed8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003edc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ee8:	e00a      	b.n	8003f00 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d165      	bne.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x382>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f1c:	4413      	add	r3, r2
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	011a      	lsls	r2, r3, #4
 8003f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3e:	801a      	strh	r2, [r3, #0]
 8003f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f44:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f46:	d91d      	bls.n	8003f84 <HAL_PCD_EP_DB_Transmit+0x332>
 8003f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_PCD_EP_DB_Transmit+0x310>
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	801a      	strh	r2, [r3, #0]
 8003f82:	e044      	b.n	800400e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x350>
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e035      	b.n	800400e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_PCD_EP_DB_Transmit+0x36a>
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb8:	3301      	adds	r3, #1
 8003fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e01c      	b.n	800400e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d118      	bne.n	800400e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff0:	4413      	add	r3, r2
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	011a      	lsls	r2, r3, #4
 8003ffa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004002:	643b      	str	r3, [r7, #64]	@ 0x40
 8004004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004008:	b29a      	uxth	r2, r3
 800400a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800400c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6959      	ldr	r1, [r3, #20]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	891a      	ldrh	r2, [r3, #8]
 800401a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800401e:	b29b      	uxth	r3, r3
 8004020:	f003 f9e9 	bl	80073f6 <USB_WritePMA>
 8004024:	e1e2      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800402e:	b29b      	uxth	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	3306      	adds	r3, #6
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	6812      	ldr	r2, [r2, #0]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800405a:	429a      	cmp	r2, r3
 800405c:	d307      	bcc.n	800406e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	619a      	str	r2, [r3, #24]
 800406c:	e002      	b.n	8004074 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f040 80c0 	bne.w	80041fe <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	785b      	ldrb	r3, [r3, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d126      	bne.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800409a:	4413      	add	r3, r2
 800409c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	011a      	lsls	r2, r3, #4
 80040a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80040a6:	4413      	add	r3, r2
 80040a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040d0:	801a      	strh	r2, [r3, #0]
 80040d2:	e01a      	b.n	800410a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d116      	bne.n	800410a <HAL_PCD_EP_DB_Transmit+0x4b8>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f0:	4413      	add	r3, r2
 80040f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	011a      	lsls	r2, r3, #4
 80040fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fc:	4413      	add	r3, r2
 80040fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004102:	663b      	str	r3, [r7, #96]	@ 0x60
 8004104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004106:	2200      	movs	r2, #0
 8004108:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d12b      	bne.n	8004170 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800412c:	4413      	add	r3, r2
 800412e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	011a      	lsls	r2, r3, #4
 8004136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004138:	4413      	add	r3, r2
 800413a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800413e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004142:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800414e:	b29a      	uxth	r2, r3
 8004150:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	b29a      	uxth	r2, r3
 8004168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e017      	b.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d113      	bne.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004180:	b29b      	uxth	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004186:	4413      	add	r3, r2
 8004188:	677b      	str	r3, [r7, #116]	@ 0x74
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	011a      	lsls	r2, r3, #4
 8004190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004192:	4413      	add	r3, r2
 8004194:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
 800419a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f004 ff9b 	bl	80090e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 811a 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80041e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	8013      	strh	r3, [r2, #0]
 80041fc:	e0f6      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d121      	bne.n	800424c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004222:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80ca 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004260:	441a      	add	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800426e:	441a      	add	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d30b      	bcc.n	8004298 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004290:	1ad2      	subs	r2, r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	621a      	str	r2, [r3, #32]
 8004296:	e017      	b.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80042a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80042a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042b0:	e00a      	b.n	80042c8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2200      	movs	r2, #0
 80042be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	785b      	ldrb	r3, [r3, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d165      	bne.n	80043a2 <HAL_PCD_EP_DB_Transmit+0x750>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ea:	4413      	add	r3, r2
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	011a      	lsls	r2, r3, #4
 80042f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f6:	4413      	add	r3, r2
 80042f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004308:	b29a      	uxth	r2, r3
 800430a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800430c:	801a      	strh	r2, [r3, #0]
 800430e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004312:	2b3e      	cmp	r3, #62	@ 0x3e
 8004314:	d91d      	bls.n	8004352 <HAL_PCD_EP_DB_Transmit+0x700>
 8004316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <HAL_PCD_EP_DB_Transmit+0x6de>
 800432a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432c:	3b01      	subs	r3, #1
 800432e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	b29a      	uxth	r2, r3
 8004336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004338:	b29b      	uxth	r3, r3
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	b29b      	uxth	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b29b      	uxth	r3, r3
 8004342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800434a:	b29a      	uxth	r2, r3
 800434c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800434e:	801a      	strh	r2, [r3, #0]
 8004350:	e041      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_PCD_EP_DB_Transmit+0x71e>
 800435a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004368:	b29a      	uxth	r2, r3
 800436a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800436c:	801a      	strh	r2, [r3, #0]
 800436e:	e032      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_PCD_EP_DB_Transmit+0x738>
 8004384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004386:	3301      	adds	r3, #1
 8004388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800438a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29a      	uxth	r2, r3
 8004390:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004392:	b29b      	uxth	r3, r3
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	b29b      	uxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b29a      	uxth	r2, r3
 800439c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439e:	801a      	strh	r2, [r3, #0]
 80043a0:	e019      	b.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x784>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d115      	bne.n	80043d6 <HAL_PCD_EP_DB_Transmit+0x784>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	461a      	mov	r2, r3
 80043b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b8:	4413      	add	r3, r2
 80043ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	011a      	lsls	r2, r3, #4
 80043c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c4:	4413      	add	r3, r2
 80043c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6818      	ldr	r0, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6959      	ldr	r1, [r3, #20]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	895a      	ldrh	r2, [r3, #10]
 80043e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f003 f805 	bl	80073f6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	82bb      	strh	r3, [r7, #20]
 8004408:	8abb      	ldrh	r3, [r7, #20]
 800440a:	f083 0310 	eor.w	r3, r3, #16
 800440e:	82bb      	strh	r3, [r7, #20]
 8004410:	8abb      	ldrh	r3, [r7, #20]
 8004412:	f083 0320 	eor.w	r3, r3, #32
 8004416:	82bb      	strh	r3, [r7, #20]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	8abb      	ldrh	r3, [r7, #20]
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3790      	adds	r7, #144	@ 0x90
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	817b      	strh	r3, [r7, #10]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	3310      	adds	r3, #16
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e009      	b.n	8004490 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800447c:	897a      	ldrh	r2, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	80da      	strh	r2, [r3, #6]
 80044a4:	e00b      	b.n	80044be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2201      	movs	r2, #1
 80044aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e272      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8087 	beq.w	80045fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ec:	4b92      	ldr	r3, [pc, #584]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00c      	beq.n	8004512 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
 8004504:	4b8c      	ldr	r3, [pc, #560]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b89      	ldr	r3, [pc, #548]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x12c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d168      	bne.n	80045f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e24c      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x76>
 8004534:	4b80      	ldr	r3, [pc, #512]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7f      	ldr	r2, [pc, #508]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b7b      	ldr	r3, [pc, #492]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7a      	ldr	r2, [pc, #488]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b78      	ldr	r3, [pc, #480]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a77      	ldr	r2, [pc, #476]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xbc>
 800456e:	4b72      	ldr	r3, [pc, #456]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a71      	ldr	r2, [pc, #452]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b6f      	ldr	r3, [pc, #444]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6e      	ldr	r2, [pc, #440]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004588:	4b6b      	ldr	r3, [pc, #428]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6a      	ldr	r2, [pc, #424]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b68      	ldr	r3, [pc, #416]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a67      	ldr	r2, [pc, #412]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800459e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd ff40 	bl	800242c <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd ff3c 	bl	800242c <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e200      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe4>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd ff2c 	bl	800242c <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd ff28 	bl	800242c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1ec      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b53      	ldr	r3, [pc, #332]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x10c>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004606:	4b4c      	ldr	r3, [pc, #304]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004612:	4b49      	ldr	r3, [pc, #292]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
 800461e:	4b46      	ldr	r3, [pc, #280]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b43      	ldr	r3, [pc, #268]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1c0      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b3d      	ldr	r3, [pc, #244]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4939      	ldr	r1, [pc, #228]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b36      	ldr	r3, [pc, #216]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fd fee1 	bl	800242c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd fedd 	bl	800242c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1a1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b2d      	ldr	r3, [pc, #180]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b2a      	ldr	r3, [pc, #168]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4927      	ldr	r1, [pc, #156]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b26      	ldr	r3, [pc, #152]	@ (800473c <HAL_RCC_OscConfig+0x270>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd fec0 	bl	800242c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fd febc 	bl	800242c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e180      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03a      	beq.n	8004750 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b17      	ldr	r3, [pc, #92]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7fd fea0 	bl	800242c <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd fe9c 	bl	800242c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e160      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f000 fa9c 	bl	8004c4c <RCC_Delay>
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCC_OscConfig+0x274>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471c:	f7fd fe86 	bl	800242c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004722:	e00f      	b.n	8004744 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fe82 	bl	800242c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d908      	bls.n	8004744 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e146      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	42420000 	.word	0x42420000
 8004740:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b92      	ldr	r3, [pc, #584]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e9      	bne.n	8004724 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a6 	beq.w	80048aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b8b      	ldr	r3, [pc, #556]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	4b88      	ldr	r3, [pc, #544]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4a87      	ldr	r2, [pc, #540]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004778:	61d3      	str	r3, [r2, #28]
 800477a:	4b85      	ldr	r3, [pc, #532]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b82      	ldr	r3, [pc, #520]	@ (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d118      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b7f      	ldr	r3, [pc, #508]	@ (8004994 <HAL_RCC_OscConfig+0x4c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7e      	ldr	r2, [pc, #504]	@ (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fd fe43 	bl	800242c <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fd fe3f 	bl	800242c <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b64      	cmp	r3, #100	@ 0x64
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e103      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	4b75      	ldr	r3, [pc, #468]	@ (8004994 <HAL_RCC_OscConfig+0x4c8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x312>
 80047d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e02d      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x334>
 80047e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a69      	ldr	r2, [pc, #420]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	4b67      	ldr	r3, [pc, #412]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a66      	ldr	r2, [pc, #408]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	e01c      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d10c      	bne.n	8004822 <HAL_RCC_OscConfig+0x356>
 8004808:	4b61      	ldr	r3, [pc, #388]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a60      	ldr	r2, [pc, #384]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	4b5e      	ldr	r3, [pc, #376]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a5d      	ldr	r2, [pc, #372]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6213      	str	r3, [r2, #32]
 8004820:	e00b      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004822:	4b5b      	ldr	r3, [pc, #364]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a5a      	ldr	r2, [pc, #360]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6213      	str	r3, [r2, #32]
 800482e:	4b58      	ldr	r3, [pc, #352]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4a57      	ldr	r2, [pc, #348]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d015      	beq.n	800486e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd fdf3 	bl	800242c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd fdef 	bl	800242c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0b1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	4b4b      	ldr	r3, [pc, #300]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RCC_OscConfig+0x37e>
 800486c:	e014      	b.n	8004898 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fd fddd 	bl	800242c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd fdd9 	bl	800242c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e09b      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488c:	4b40      	ldr	r3, [pc, #256]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ee      	bne.n	8004876 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b3c      	ldr	r3, [pc, #240]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8087 	beq.w	80049c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b4:	4b36      	ldr	r3, [pc, #216]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d061      	beq.n	8004984 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d146      	bne.n	8004956 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd fdad 	bl	800242c <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd fda9 	bl	800242c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e06d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	4b29      	ldr	r3, [pc, #164]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d108      	bne.n	8004910 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048fe:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4921      	ldr	r1, [pc, #132]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004910:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a19      	ldr	r1, [r3, #32]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	430b      	orrs	r3, r1
 8004922:	491b      	ldr	r1, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004928:	4b1b      	ldr	r3, [pc, #108]	@ (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fd fd7d 	bl	800242c <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd fd79 	bl	800242c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e03d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004948:	4b11      	ldr	r3, [pc, #68]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x46a>
 8004954:	e035      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fd66 	bl	800242c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fd62 	bl	800242c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e026      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x498>
 8004982:	e01e      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e019      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800499c:	4b0b      	ldr	r3, [pc, #44]	@ (80049cc <HAL_RCC_OscConfig+0x500>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d0      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b67      	ldr	r3, [pc, #412]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4965      	ldr	r1, [pc, #404]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b63      	ldr	r3, [pc, #396]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b8      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a2c:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a58      	ldr	r2, [pc, #352]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a44:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a52      	ldr	r2, [pc, #328]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a50:	4b50      	ldr	r3, [pc, #320]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	494d      	ldr	r1, [pc, #308]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d040      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	4b47      	ldr	r3, [pc, #284]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b41      	ldr	r3, [pc, #260]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e073      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4936      	ldr	r1, [pc, #216]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fcb4 	bl	800242c <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fd fcb0 	bl	800242c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e053      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2d      	ldr	r3, [pc, #180]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b27      	ldr	r3, [pc, #156]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d210      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0207 	bic.w	r2, r3, #7
 8004b06:	4922      	ldr	r1, [pc, #136]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e032      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4916      	ldr	r1, [pc, #88]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b4a:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490e      	ldr	r1, [pc, #56]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f821 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490a      	ldr	r1, [pc, #40]	@ (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <HAL_RCC_ClockConfig+0x1cc>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd fc12 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800c8fc 	.word	0x0800c8fc
 8004b9c:	20000000 	.word	0x20000000
 8004ba0:	20000004 	.word	0x20000004

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x36>
 8004bd2:	e027      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004bd6:	613b      	str	r3, [r7, #16]
      break;
 8004bd8:	e027      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0c9b      	lsrs	r3, r3, #18
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	4a17      	ldr	r2, [pc, #92]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004be4:	5cd3      	ldrb	r3, [r2, r3]
 8004be6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bf2:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	0c5b      	lsrs	r3, r3, #17
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	4a11      	ldr	r2, [pc, #68]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bfe:	5cd3      	ldrb	r3, [r2, r3]
 8004c00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c06:	fb03 f202 	mul.w	r2, r3, r2
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e004      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0c      	ldr	r2, [pc, #48]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	613b      	str	r3, [r7, #16]
      break;
 8004c22:	e002      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c26:	613b      	str	r3, [r7, #16]
      break;
 8004c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2a:	693b      	ldr	r3, [r7, #16]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	0800c90c 	.word	0x0800c90c
 8004c44:	0800c91c 	.word	0x0800c91c
 8004c48:	003d0900 	.word	0x003d0900

08004c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <RCC_Delay+0x34>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0a      	ldr	r2, [pc, #40]	@ (8004c84 <RCC_Delay+0x38>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a5b      	lsrs	r3, r3, #9
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c68:	bf00      	nop
  }
  while (Delay --);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	60fa      	str	r2, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f9      	bne.n	8004c68 <RCC_Delay+0x1c>
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	20000000 	.word	0x20000000
 8004c84:	10624dd3 	.word	0x10624dd3

08004c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d07d      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	61d3      	str	r3, [r2, #28]
 8004cc0:	4b49      	ldr	r3, [pc, #292]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd0:	4b46      	ldr	r3, [pc, #280]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d118      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cdc:	4b43      	ldr	r3, [pc, #268]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a42      	ldr	r2, [pc, #264]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce8:	f7fd fba0 	bl	800242c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fd fb9c 	bl	800242c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e06d      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d02:	4b3a      	ldr	r3, [pc, #232]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d02e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d027      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b2e      	ldr	r3, [pc, #184]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d42:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fd fb6b 	bl	800242c <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fd fb67 	bl	800242c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e036      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ee      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4917      	ldr	r1, [pc, #92]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4a13      	ldr	r2, [pc, #76]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dac:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	490b      	ldr	r1, [pc, #44]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0310 	and.w	r3, r3, #16
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4904      	ldr	r1, [pc, #16]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40007000 	.word	0x40007000
 8004df0:	42420440 	.word	0x42420440

08004df4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e1e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e42:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b085      	sub	sp, #20
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	4638      	mov	r0, r7
 8004e90:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b09d      	sub	sp, #116	@ 0x74
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d81f      	bhi.n	8004f32 <USB_ActivateEndpoint+0x72>
 8004ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef8 <USB_ActivateEndpoint+0x38>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f25 	.word	0x08004f25
 8004f00:	08004f3b 	.word	0x08004f3b
 8004f04:	08004f17 	.word	0x08004f17
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f08:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f10:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f14:	e012      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f16:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f1a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004f1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f22:	e00b      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f30:	e004      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004f38:	e000      	b.n	8004f3c <USB_ActivateEndpoint+0x7c>
      break;
 8004f3a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	441a      	add	r2, r3
 8004f46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	7b1b      	ldrb	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 8178 	bne.w	800529c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8084 	beq.w	80050be <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	011a      	lsls	r2, r3, #4
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	88db      	ldrh	r3, [r3, #6]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	827b      	strh	r3, [r7, #18]
 8004ff8:	8a7b      	ldrh	r3, [r7, #18]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <USB_ActivateEndpoint+0x17a>
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005018:	823b      	strh	r3, [r7, #16]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8a3b      	ldrh	r3, [r7, #16]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005032:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d020      	beq.n	8005084 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005058:	81bb      	strh	r3, [r7, #12]
 800505a:	89bb      	ldrh	r3, [r7, #12]
 800505c:	f083 0320 	eor.w	r3, r3, #32
 8005060:	81bb      	strh	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	89bb      	ldrh	r3, [r7, #12]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e2d5      	b.n	8005630 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509a:	81fb      	strh	r3, [r7, #14]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	89fb      	ldrh	r3, [r7, #14]
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
 80050bc:	e2b8      	b.n	8005630 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	461a      	mov	r2, r3
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	4413      	add	r3, r2
 80050d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	88db      	ldrh	r3, [r3, #6]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	4413      	add	r3, r2
 8005104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	4413      	add	r3, r2
 8005110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005120:	b29a      	uxth	r2, r3
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b3e      	cmp	r3, #62	@ 0x3e
 800512c:	d91d      	bls.n	800516a <USB_ActivateEndpoint+0x2aa>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <USB_ActivateEndpoint+0x288>
 8005142:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005144:	3b01      	subs	r3, #1
 8005146:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29a      	uxth	r2, r3
 800514e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005150:	b29b      	uxth	r3, r3
 8005152:	029b      	lsls	r3, r3, #10
 8005154:	b29b      	uxth	r3, r3
 8005156:	4313      	orrs	r3, r2
 8005158:	b29b      	uxth	r3, r3
 800515a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005162:	b29a      	uxth	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e026      	b.n	80051b8 <USB_ActivateEndpoint+0x2f8>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <USB_ActivateEndpoint+0x2c8>
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29b      	uxth	r3, r3
 8005178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005180:	b29a      	uxth	r2, r3
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e017      	b.n	80051b8 <USB_ActivateEndpoint+0x2f8>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <USB_ActivateEndpoint+0x2e2>
 800519c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800519e:	3301      	adds	r3, #1
 80051a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	029b      	lsls	r3, r3, #10
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <USB_ActivateEndpoint+0x348>
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e6:	843b      	strh	r3, [r7, #32]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	441a      	add	r2, r3
 80051f2:	8c3b      	ldrh	r3, [r7, #32]
 80051f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005204:	b29b      	uxth	r3, r3
 8005206:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d124      	bne.n	800525a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	83bb      	strh	r3, [r7, #28]
 8005228:	8bbb      	ldrh	r3, [r7, #28]
 800522a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800522e:	83bb      	strh	r3, [r7, #28]
 8005230:	8bbb      	ldrh	r3, [r7, #28]
 8005232:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005236:	83bb      	strh	r3, [r7, #28]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8bbb      	ldrh	r3, [r7, #28]
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]
 8005258:	e1ea      	b.n	8005630 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800526c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005270:	83fb      	strh	r3, [r7, #30]
 8005272:	8bfb      	ldrh	r3, [r7, #30]
 8005274:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005278:	83fb      	strh	r3, [r7, #30]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	441a      	add	r2, r3
 8005284:	8bfb      	ldrh	r3, [r7, #30]
 8005286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800528a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800528e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005296:	b29b      	uxth	r3, r3
 8005298:	8013      	strh	r3, [r2, #0]
 800529a:	e1c9      	b.n	8005630 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11e      	bne.n	80052e2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052d4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80052d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
 80052e0:	e01d      	b.n	800531e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80052f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800530a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800530e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800531a:	b29b      	uxth	r3, r3
 800531c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005328:	b29b      	uxth	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800532e:	4413      	add	r3, r2
 8005330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	011a      	lsls	r2, r3, #4
 8005338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800533a:	4413      	add	r3, r2
 800533c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	891b      	ldrh	r3, [r3, #8]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	657b      	str	r3, [r7, #84]	@ 0x54
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	4413      	add	r3, r2
 8005364:	657b      	str	r3, [r7, #84]	@ 0x54
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536e:	4413      	add	r3, r2
 8005370:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005374:	653b      	str	r3, [r7, #80]	@ 0x50
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	895b      	ldrh	r3, [r3, #10]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f040 8093 	bne.w	80054b6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80053a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <USB_ActivateEndpoint+0x524>
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80053f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01b      	beq.n	8005434 <USB_ActivateEndpoint+0x574>
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800542c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800544c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800544e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005452:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005454:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005456:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800545a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800548e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005492:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
 80054b4:	e0bc      	b.n	8005630 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80054c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80054ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d01d      	beq.n	800550e <USB_ActivateEndpoint+0x64e>
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005502:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800551e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01d      	beq.n	8005566 <USB_ActivateEndpoint+0x6a6>
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800553c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005540:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800555e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	78db      	ldrb	r3, [r3, #3]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d024      	beq.n	80055b8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005584:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800558c:	f083 0320 	eor.w	r3, r3, #32
 8005590:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
 80055b6:	e01d      	b.n	80055f4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	441a      	add	r2, r3
 80055dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80055e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800561c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005620:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562c:	b29b      	uxth	r3, r3
 800562e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005630:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005634:	4618      	mov	r0, r3
 8005636:	3774      	adds	r7, #116	@ 0x74
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005640:	b480      	push	{r7}
 8005642:	b08d      	sub	sp, #52	@ 0x34
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808e 	bne.w	8005770 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d044      	beq.n	80056e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	81bb      	strh	r3, [r7, #12]
 800566a:	89bb      	ldrh	r3, [r7, #12]
 800566c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01b      	beq.n	80056ac <USB_DeactivateEndpoint+0x6c>
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	817b      	strh	r3, [r7, #10]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	897b      	ldrh	r3, [r7, #10]
 8005698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800569c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	813b      	strh	r3, [r7, #8]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	893b      	ldrh	r3, [r7, #8]
 80056d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	8013      	strh	r3, [r2, #0]
 80056e4:	e192      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	827b      	strh	r3, [r7, #18]
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01b      	beq.n	8005736 <USB_DeactivateEndpoint+0xf6>
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005714:	823b      	strh	r3, [r7, #16]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	441a      	add	r2, r3
 8005720:	8a3b      	ldrh	r3, [r7, #16]
 8005722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800572a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800572e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005732:	b29b      	uxth	r3, r3
 8005734:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	81fb      	strh	r3, [r7, #14]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	441a      	add	r2, r3
 8005758:	89fb      	ldrh	r3, [r7, #14]
 800575a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800576a:	b29b      	uxth	r3, r3
 800576c:	8013      	strh	r3, [r2, #0]
 800576e:	e14d      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 80a5 	bne.w	80058c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	843b      	strh	r3, [r7, #32]
 8005788:	8c3b      	ldrh	r3, [r7, #32]
 800578a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01b      	beq.n	80057ca <USB_DeactivateEndpoint+0x18a>
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a8:	83fb      	strh	r3, [r7, #30]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	441a      	add	r2, r3
 80057b4:	8bfb      	ldrh	r3, [r7, #30]
 80057b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	83bb      	strh	r3, [r7, #28]
 80057d8:	8bbb      	ldrh	r3, [r7, #28]
 80057da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01b      	beq.n	800581a <USB_DeactivateEndpoint+0x1da>
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f8:	837b      	strh	r3, [r7, #26]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005812:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005830:	833b      	strh	r3, [r7, #24]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	441a      	add	r2, r3
 800583c:	8b3b      	ldrh	r3, [r7, #24]
 800583e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800584a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800584e:	b29b      	uxth	r3, r3
 8005850:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005868:	82fb      	strh	r3, [r7, #22]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	8afb      	ldrh	r3, [r7, #22]
 8005876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800587a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a0:	82bb      	strh	r3, [r7, #20]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	441a      	add	r2, r3
 80058ac:	8abb      	ldrh	r3, [r7, #20]
 80058ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
 80058c2:	e0a3      	b.n	8005a0c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80058d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01b      	beq.n	8005914 <USB_DeactivateEndpoint+0x2d4>
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005908:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800590c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005910:	b29b      	uxth	r3, r3
 8005912:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <USB_DeactivateEndpoint+0x324>
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4413      	add	r3, r2
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	441a      	add	r2, r3
 80059be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	847b      	strh	r3, [r7, #34]	@ 0x22
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3734      	adds	r7, #52	@ 0x34
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0c2      	sub	sp, #264	@ 0x108
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	6018      	str	r0, [r3, #0]
 8005a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a30:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	f040 86b7 	bne.w	80067b2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d908      	bls.n	8005a72 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a70:	e007      	b.n	8005a82 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d13a      	bne.n	8005b08 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6959      	ldr	r1, [r3, #20]
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	88da      	ldrh	r2, [r3, #6]
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ab4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f001 fc9c 	bl	80073f6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	011a      	lsls	r2, r3, #4
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4413      	add	r3, r2
 8005af4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	f000 be1f 	b.w	8006746 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f040 8462 	bne.w	80063de <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	f240 83df 	bls.w	80062f6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b88:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba4:	1ad2      	subs	r2, r2, r3
 8005ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 81c7 	beq.w	8005f68 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d177      	bne.n	8005ce6 <USB_EPStartXfer+0x2ce>
 8005bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	4413      	add	r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	011a      	lsls	r2, r3, #4
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c48:	d921      	bls.n	8005c8e <USB_EPStartXfer+0x276>
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <USB_EPStartXfer+0x252>
 8005c60:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c64:	3b01      	subs	r3, #1
 8005c66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e050      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <USB_EPStartXfer+0x294>
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e041      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <USB_EPStartXfer+0x2b4>
 8005cc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e024      	b.n	8005d30 <USB_EPStartXfer+0x318>
 8005ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d11c      	bne.n	8005d30 <USB_EPStartXfer+0x318>
 8005cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	4413      	add	r3, r2
 8005d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	011a      	lsls	r2, r3, #4
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	895b      	ldrh	r3, [r3, #10]
 8005d3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6959      	ldr	r1, [r3, #20]
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d5e:	6800      	ldr	r0, [r0, #0]
 8005d60:	f001 fb49 	bl	80073f6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	441a      	add	r2, r3
 8005d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d90f      	bls.n	8005dbe <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	621a      	str	r2, [r3, #32]
 8005dbc:	e00e      	b.n	8005ddc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d177      	bne.n	8005edc <USB_EPStartXfer+0x4c4>
 8005dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	011a      	lsls	r2, r3, #4
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e3e:	d921      	bls.n	8005e84 <USB_EPStartXfer+0x46c>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4e:	f003 031f 	and.w	r3, r3, #31
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <USB_EPStartXfer+0x448>
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e056      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <USB_EPStartXfer+0x48a>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e047      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <USB_EPStartXfer+0x4aa>
 8005eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	029b      	lsls	r3, r3, #10
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	801a      	strh	r2, [r3, #0]
 8005eda:	e02a      	b.n	8005f32 <USB_EPStartXfer+0x51a>
 8005edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d122      	bne.n	8005f32 <USB_EPStartXfer+0x51a>
 8005eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	011a      	lsls	r2, r3, #4
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	891b      	ldrh	r3, [r3, #8]
 8005f3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6959      	ldr	r1, [r3, #20]
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f58:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f5c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f60:	6800      	ldr	r0, [r0, #0]
 8005f62:	f001 fa48 	bl	80073f6 <USB_WritePMA>
 8005f66:	e3ee      	b.n	8006746 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d177      	bne.n	8006068 <USB_EPStartXfer+0x650>
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f98:	4413      	add	r3, r2
 8005f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fca:	d921      	bls.n	8006010 <USB_EPStartXfer+0x5f8>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <USB_EPStartXfer+0x5d4>
 8005fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006008:	b29a      	uxth	r2, r3
 800600a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	e056      	b.n	80060be <USB_EPStartXfer+0x6a6>
 8006010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <USB_EPStartXfer+0x616>
 8006018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29a      	uxth	r2, r3
 8006028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e047      	b.n	80060be <USB_EPStartXfer+0x6a6>
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USB_EPStartXfer+0x636>
 8006044:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006048:	3301      	adds	r3, #1
 800604a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800604e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006058:	b29b      	uxth	r3, r3
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	b29b      	uxth	r3, r3
 800605e:	4313      	orrs	r3, r2
 8006060:	b29a      	uxth	r2, r3
 8006062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	e02a      	b.n	80060be <USB_EPStartXfer+0x6a6>
 8006068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d122      	bne.n	80060be <USB_EPStartXfer+0x6a6>
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	653b      	str	r3, [r7, #80]	@ 0x50
 8006084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006098:	4413      	add	r3, r2
 800609a:	653b      	str	r3, [r7, #80]	@ 0x50
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	011a      	lsls	r2, r3, #4
 80060aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	891b      	ldrh	r3, [r3, #8]
 80060ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6959      	ldr	r1, [r3, #20]
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060ec:	6800      	ldr	r0, [r0, #0]
 80060ee:	f001 f982 	bl	80073f6 <USB_WritePMA>
            ep->xfer_buff += len;
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	441a      	add	r2, r3
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d90f      	bls.n	800614c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800612c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	621a      	str	r2, [r3, #32]
 800614a:	e00e      	b.n	800616a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800614c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800616a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d177      	bne.n	8006276 <USB_EPStartXfer+0x85e>
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a6:	4413      	add	r3, r2
 80061a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	011a      	lsls	r2, r3, #4
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80061d8:	d921      	bls.n	800621e <USB_EPStartXfer+0x806>
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <USB_EPStartXfer+0x7e2>
 80061f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f4:	3b01      	subs	r3, #1
 80061f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006204:	b29b      	uxth	r3, r3
 8006206:	029b      	lsls	r3, r3, #10
 8006208:	b29b      	uxth	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b29b      	uxth	r3, r3
 800620e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006216:	b29a      	uxth	r2, r3
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e050      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <USB_EPStartXfer+0x824>
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e041      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006240:	085b      	lsrs	r3, r3, #1
 8006242:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <USB_EPStartXfer+0x844>
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006256:	3301      	adds	r3, #1
 8006258:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800625c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	4313      	orrs	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e024      	b.n	80062c0 <USB_EPStartXfer+0x8a8>
 8006276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d11c      	bne.n	80062c0 <USB_EPStartXfer+0x8a8>
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800629a:	4413      	add	r3, r2
 800629c:	643b      	str	r3, [r7, #64]	@ 0x40
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	011a      	lsls	r2, r3, #4
 80062ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ae:	4413      	add	r3, r2
 80062b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	895b      	ldrh	r3, [r3, #10]
 80062cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6959      	ldr	r1, [r3, #20]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80062e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80062ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80062ee:	6800      	ldr	r0, [r0, #0]
 80062f0:	f001 f881 	bl	80073f6 <USB_WritePMA>
 80062f4:	e227      	b.n	8006746 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006366:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800637c:	b29b      	uxth	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006382:	4413      	add	r3, r2
 8006384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	011a      	lsls	r2, r3, #4
 8006394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006396:	4413      	add	r3, r2
 8006398:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800639c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	891b      	ldrh	r3, [r3, #8]
 80063b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6959      	ldr	r1, [r3, #20]
 80063c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80063ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063d6:	6800      	ldr	r0, [r0, #0]
 80063d8:	f001 f80d 	bl	80073f6 <USB_WritePMA>
 80063dc:	e1b3      	b.n	8006746 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80c6 	beq.w	80065b0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d177      	bne.n	8006530 <USB_EPStartXfer+0xb18>
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645a:	b29b      	uxth	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006460:	4413      	add	r3, r2
 8006462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	011a      	lsls	r2, r3, #4
 8006472:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006474:	4413      	add	r3, r2
 8006476:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800647a:	667b      	str	r3, [r7, #100]	@ 0x64
 800647c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006486:	b29a      	uxth	r2, r3
 8006488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	2b3e      	cmp	r3, #62	@ 0x3e
 8006492:	d921      	bls.n	80064d8 <USB_EPStartXfer+0xac0>
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USB_EPStartXfer+0xa9c>
 80064aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064be:	b29b      	uxth	r3, r3
 80064c0:	029b      	lsls	r3, r3, #10
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4313      	orrs	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e050      	b.n	800657a <USB_EPStartXfer+0xb62>
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <USB_EPStartXfer+0xade>
 80064e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e041      	b.n	800657a <USB_EPStartXfer+0xb62>
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <USB_EPStartXfer+0xafe>
 800650c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006520:	b29b      	uxth	r3, r3
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	b29b      	uxth	r3, r3
 8006526:	4313      	orrs	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800652c:	801a      	strh	r2, [r3, #0]
 800652e:	e024      	b.n	800657a <USB_EPStartXfer+0xb62>
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	785b      	ldrb	r3, [r3, #1]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11c      	bne.n	800657a <USB_EPStartXfer+0xb62>
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006554:	4413      	add	r3, r2
 8006556:	673b      	str	r3, [r7, #112]	@ 0x70
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	011a      	lsls	r2, r3, #4
 8006566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006568:	4413      	add	r3, r2
 800656a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800656e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	b29a      	uxth	r2, r3
 8006576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	895b      	ldrh	r3, [r3, #10]
 8006586:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800658e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6959      	ldr	r1, [r3, #20]
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	b29b      	uxth	r3, r3
 800659c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065a8:	6800      	ldr	r0, [r0, #0]
 80065aa:	f000 ff24 	bl	80073f6 <USB_WritePMA>
 80065ae:	e0ca      	b.n	8006746 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d177      	bne.n	80066b0 <USB_EPStartXfer+0xc98>
 80065c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065e0:	4413      	add	r3, r2
 80065e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006606:	b29a      	uxth	r2, r3
 8006608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006610:	2b3e      	cmp	r3, #62	@ 0x3e
 8006612:	d921      	bls.n	8006658 <USB_EPStartXfer+0xc40>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <USB_EPStartXfer+0xc1c>
 800662a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800662e:	3b01      	subs	r3, #1
 8006630:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29a      	uxth	r2, r3
 800663a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800663e:	b29b      	uxth	r3, r3
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	b29b      	uxth	r3, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e05c      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <USB_EPStartXfer+0xc5e>
 8006660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	e04d      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <USB_EPStartXfer+0xc7e>
 800668c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006690:	3301      	adds	r3, #1
 8006692:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29a      	uxth	r2, r3
 800669c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4313      	orrs	r3, r2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	e030      	b.n	8006712 <USB_EPStartXfer+0xcfa>
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d128      	bne.n	8006712 <USB_EPStartXfer+0xcfa>
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066e4:	4413      	add	r3, r2
 80066e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	011a      	lsls	r2, r3, #4
 80066f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006710:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	891b      	ldrh	r3, [r3, #8]
 800671e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6959      	ldr	r1, [r3, #20]
 800672e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006732:	b29b      	uxth	r3, r3
 8006734:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006738:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800673c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006740:	6800      	ldr	r0, [r0, #0]
 8006742:	f000 fe58 	bl	80073f6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676c:	817b      	strh	r3, [r7, #10]
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f083 0310 	eor.w	r3, r3, #16
 8006774:	817b      	strh	r3, [r7, #10]
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	f083 0320 	eor.w	r3, r3, #32
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	441a      	add	r2, r3
 8006798:	897b      	ldrh	r3, [r7, #10]
 800679a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	8013      	strh	r3, [r2, #0]
 80067ae:	f000 bcde 	b.w	800716e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	7b1b      	ldrb	r3, [r3, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80bb 	bne.w	800693a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d917      	bls.n	8006810 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006800:	1ad2      	subs	r2, r2, r3
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	619a      	str	r2, [r3, #24]
 800680e:	e00e      	b.n	800682e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2200      	movs	r2, #0
 800682c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800682e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006852:	4413      	add	r3, r2
 8006854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800686a:	4413      	add	r3, r2
 800686c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006870:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688c:	2b3e      	cmp	r3, #62	@ 0x3e
 800688e:	d924      	bls.n	80068da <USB_EPStartXfer+0xec2>
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <USB_EPStartXfer+0xe98>
 80068a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068aa:	3b01      	subs	r3, #1
 80068ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068bc:	b29b      	uxth	r3, r3
 80068be:	029b      	lsls	r3, r3, #10
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4313      	orrs	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068d4:	801a      	strh	r2, [r3, #0]
 80068d6:	f000 bc10 	b.w	80070fa <USB_EPStartXfer+0x16e2>
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10c      	bne.n	80068fc <USB_EPStartXfer+0xee4>
 80068e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e3fe      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <USB_EPStartXfer+0xf04>
 8006912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006916:	3301      	adds	r3, #1
 8006918:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800691c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006928:	b29b      	uxth	r3, r3
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	b29b      	uxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b29a      	uxth	r2, r3
 8006932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e3df      	b.n	80070fa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	2b02      	cmp	r3, #2
 8006948:	f040 8218 	bne.w	8006d7c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 809d 	bne.w	8006a98 <USB_EPStartXfer+0x1080>
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800696c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800697a:	b29b      	uxth	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006982:	4413      	add	r3, r2
 8006984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	011a      	lsls	r2, r3, #4
 8006996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800699a:	4413      	add	r3, r2
 800699c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80069c6:	d92b      	bls.n	8006a20 <USB_EPStartXfer+0x1008>
 80069c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <USB_EPStartXfer+0xfe0>
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f2:	3b01      	subs	r3, #1
 80069f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e070      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10c      	bne.n	8006a4a <USB_EPStartXfer+0x1032>
 8006a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e05b      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <USB_EPStartXfer+0x1062>
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	e034      	b.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d12c      	bne.n	8006b02 <USB_EPStartXfer+0x10ea>
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006acc:	4413      	add	r3, r2
 8006ace:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	011a      	lsls	r2, r3, #4
 8006ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 809d 	bne.w	8006c5c <USB_EPStartXfer+0x1244>
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b46:	4413      	add	r3, r2
 8006b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	011a      	lsls	r2, r3, #4
 8006b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b8a:	d92b      	bls.n	8006be4 <USB_EPStartXfer+0x11cc>
 8006b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <USB_EPStartXfer+0x11a4>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	029b      	lsls	r3, r3, #10
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e069      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10c      	bne.n	8006c0e <USB_EPStartXfer+0x11f6>
 8006bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e054      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <USB_EPStartXfer+0x1226>
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	3301      	adds	r3, #1
 8006c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e02d      	b.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d125      	bne.n	8006cb8 <USB_EPStartXfer+0x12a0>
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cb6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8218 	beq.w	80070fa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <USB_EPStartXfer+0x12ea>
 8006cf6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 81f5 	bne.w	80070fa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f040 81ee 	bne.w	80070fa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d44:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
 8006d7a:	e1be      	b.n	80070fa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	78db      	ldrb	r3, [r3, #3]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 81b4 	bne.w	80070f6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d917      	bls.n	8006dda <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	619a      	str	r2, [r3, #24]
 8006dd8:	e00e      	b.n	8006df8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 8085 	bne.w	8006f14 <USB_EPStartXfer+0x14fc>
 8006e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e2e:	4413      	add	r3, r2
 8006e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	011a      	lsls	r2, r3, #4
 8006e42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e6a:	d923      	bls.n	8006eb4 <USB_EPStartXfer+0x149c>
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	095b      	lsrs	r3, r3, #5
 8006e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <USB_EPStartXfer+0x1474>
 8006e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e86:	3b01      	subs	r3, #1
 8006e88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	029b      	lsls	r3, r3, #10
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e060      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10c      	bne.n	8006ed6 <USB_EPStartXfer+0x14be>
 8006ebc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e04f      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <USB_EPStartXfer+0x14de>
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	029b      	lsls	r3, r3, #10
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	e030      	b.n	8006f76 <USB_EPStartXfer+0x155e>
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	785b      	ldrb	r3, [r3, #1]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <USB_EPStartXfer+0x155e>
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f48:	4413      	add	r3, r2
 8006f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	011a      	lsls	r2, r3, #4
 8006f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	785b      	ldrb	r3, [r3, #1]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 8085 	bne.w	80070a0 <USB_EPStartXfer+0x1688>
 8006f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fba:	4413      	add	r3, r2
 8006fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	011a      	lsls	r2, r3, #4
 8006fce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fee:	801a      	strh	r2, [r3, #0]
 8006ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ff6:	d923      	bls.n	8007040 <USB_EPStartXfer+0x1628>
 8006ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <USB_EPStartXfer+0x1600>
 800700e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007012:	3b01      	subs	r3, #1
 8007014:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	4313      	orrs	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e05c      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10c      	bne.n	8007062 <USB_EPStartXfer+0x164a>
 8007048:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e04b      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <USB_EPStartXfer+0x166a>
 8007078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e02c      	b.n	80070fa <USB_EPStartXfer+0x16e2>
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d124      	bne.n	80070fa <USB_EPStartXfer+0x16e2>
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070c6:	4413      	add	r3, r2
 80070c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070de:	4413      	add	r3, r2
 80070e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e001      	b.n	80070fa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e03a      	b.n	8007170 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007120:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007124:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007128:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800712c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007130:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007134:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007138:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800719e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071a2:	81bb      	strh	r3, [r7, #12]
 80071a4:	89bb      	ldrh	r3, [r7, #12]
 80071a6:	f083 0310 	eor.w	r3, r3, #16
 80071aa:	81bb      	strh	r3, [r7, #12]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	89bb      	ldrh	r3, [r7, #12]
 80071b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	8013      	strh	r3, [r2, #0]
 80071cc:	e01f      	b.n	800720e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e4:	81fb      	strh	r3, [r7, #14]
 80071e6:	89fb      	ldrh	r3, [r7, #14]
 80071e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80071ec:	81fb      	strh	r3, [r7, #14]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800721a:	b480      	push	{r7}
 800721c:	b087      	sub	sp, #28
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b1b      	ldrb	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 809d 	bne.w	8007368 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04c      	beq.n	80072d0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	823b      	strh	r3, [r7, #16]
 8007244:	8a3b      	ldrh	r3, [r7, #16]
 8007246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d01b      	beq.n	8007286 <USB_EPClearStall+0x6c>
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007264:	81fb      	strh	r3, [r7, #14]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	441a      	add	r2, r3
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800727a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800727e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007282:	b29b      	uxth	r3, r3
 8007284:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	78db      	ldrb	r3, [r3, #3]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d06c      	beq.n	8007368 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072a4:	81bb      	strh	r3, [r7, #12]
 80072a6:	89bb      	ldrh	r3, [r7, #12]
 80072a8:	f083 0320 	eor.w	r3, r3, #32
 80072ac:	81bb      	strh	r3, [r7, #12]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	441a      	add	r2, r3
 80072b8:	89bb      	ldrh	r3, [r7, #12]
 80072ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]
 80072ce:	e04b      	b.n	8007368 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	82fb      	strh	r3, [r7, #22]
 80072de:	8afb      	ldrh	r3, [r7, #22]
 80072e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <USB_EPClearStall+0x106>
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fe:	82bb      	strh	r3, [r7, #20]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	8abb      	ldrh	r3, [r7, #20]
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007314:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007336:	827b      	strh	r3, [r7, #18]
 8007338:	8a7b      	ldrh	r3, [r7, #18]
 800733a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800733e:	827b      	strh	r3, [r7, #18]
 8007340:	8a7b      	ldrh	r3, [r7, #18]
 8007342:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007346:	827b      	strh	r3, [r7, #18]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	441a      	add	r2, r3
 8007352:	8a7b      	ldrh	r3, [r7, #18]
 8007354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800735c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007364:	b29b      	uxth	r3, r3
 8007366:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d103      	bne.n	800738e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2280      	movs	r2, #128	@ 0x80
 800738a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	bc80      	pop	{r7}
 8007398:	4770      	bx	lr

0800739a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr

080073ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b083      	sub	sp, #12
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b08b      	sub	sp, #44	@ 0x2c
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	4611      	mov	r1, r2
 8007402:	461a      	mov	r2, r3
 8007404:	460b      	mov	r3, r1
 8007406:	80fb      	strh	r3, [r7, #6]
 8007408:	4613      	mov	r3, r2
 800740a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800740c:	88bb      	ldrh	r3, [r7, #4]
 800740e:	3301      	adds	r3, #1
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	005a      	lsls	r2, r3, #1
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007428:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e01f      	b.n	8007470 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b21b      	sxth	r3, r3
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	b21a      	sxth	r2, r3
 8007442:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007446:	4313      	orrs	r3, r2
 8007448:	b21b      	sxth	r3, r3
 800744a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	8a7a      	ldrh	r2, [r7, #18]
 8007450:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	3302      	adds	r3, #2
 8007456:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	3302      	adds	r3, #2
 800745c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	3301      	adds	r3, #1
 8007468:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	3b01      	subs	r3, #1
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1dc      	bne.n	8007430 <USB_WritePMA+0x3a>
  }
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	372c      	adds	r7, #44	@ 0x2c
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007482:	b480      	push	{r7}
 8007484:	b08b      	sub	sp, #44	@ 0x2c
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	4611      	mov	r1, r2
 800748e:	461a      	mov	r2, r3
 8007490:	460b      	mov	r3, r1
 8007492:	80fb      	strh	r3, [r7, #6]
 8007494:	4613      	mov	r3, r2
 8007496:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007498:	88bb      	ldrh	r3, [r7, #4]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	005a      	lsls	r2, r3, #1
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ba:	e01b      	b.n	80074f4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	3302      	adds	r3, #2
 80074c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	3302      	adds	r3, #2
 80074ec:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	3b01      	subs	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e0      	bne.n	80074bc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	b2da      	uxtb	r2, r3
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	701a      	strb	r2, [r3, #0]
  }
}
 8007516:	bf00      	nop
 8007518:	372c      	adds	r7, #44	@ 0x2c
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7c1b      	ldrb	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d115      	bne.n	8007564 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800753c:	2202      	movs	r2, #2
 800753e:	2181      	movs	r1, #129	@ 0x81
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 feb2 	bl	80092aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800754c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007550:	2202      	movs	r2, #2
 8007552:	2101      	movs	r1, #1
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 fea8 	bl	80092aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007562:	e012      	b.n	800758a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007564:	2340      	movs	r3, #64	@ 0x40
 8007566:	2202      	movs	r2, #2
 8007568:	2181      	movs	r1, #129	@ 0x81
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fe9d 	bl	80092aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007576:	2340      	movs	r3, #64	@ 0x40
 8007578:	2202      	movs	r2, #2
 800757a:	2101      	movs	r1, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 fe94 	bl	80092aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800758a:	2308      	movs	r3, #8
 800758c:	2203      	movs	r2, #3
 800758e:	2182      	movs	r1, #130	@ 0x82
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fe8a 	bl	80092aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800759c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80075a0:	f001 ffaa 	bl	80094f8 <USBD_static_malloc>
 80075a4:	4602      	mov	r2, r0
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e026      	b.n	800760a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7c1b      	ldrb	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075f0:	2101      	movs	r1, #1
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 ff49 	bl	800948a <USBD_LL_PrepareReceive>
 80075f8:	e007      	b.n	800760a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007600:	2340      	movs	r3, #64	@ 0x40
 8007602:	2101      	movs	r1, #1
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 ff40 	bl	800948a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007624:	2181      	movs	r1, #129	@ 0x81
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fe65 	bl	80092f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007632:	2101      	movs	r1, #1
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fe5e 	bl	80092f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007642:	2182      	movs	r1, #130	@ 0x82
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 fe56 	bl	80092f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00e      	beq.n	8007678 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766a:	4618      	mov	r0, r3
 800766c:	f001 ff50 	bl	8009510 <USBD_static_free>
    pdev->pClassData = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007692:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d039      	beq.n	8007720 <USBD_CDC_Setup+0x9e>
 80076ac:	2b20      	cmp	r3, #32
 80076ae:	d17f      	bne.n	80077b0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	88db      	ldrh	r3, [r3, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d029      	beq.n	800770c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b25b      	sxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da11      	bge.n	80076e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80076ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	88d2      	ldrh	r2, [r2, #6]
 80076d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076d6:	6939      	ldr	r1, [r7, #16]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	461a      	mov	r2, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fa06 	bl	8008af0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80076e4:	e06b      	b.n	80077be <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	785a      	ldrb	r2, [r3, #1]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	88db      	ldrh	r3, [r3, #6]
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076fc:	6939      	ldr	r1, [r7, #16]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88db      	ldrh	r3, [r3, #6]
 8007702:	461a      	mov	r2, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fa21 	bl	8008b4c <USBD_CtlPrepareRx>
      break;
 800770a:	e058      	b.n	80077be <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	7850      	ldrb	r0, [r2, #1]
 8007718:	2200      	movs	r2, #0
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	4798      	blx	r3
      break;
 800771e:	e04e      	b.n	80077be <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b0b      	cmp	r3, #11
 8007726:	d02e      	beq.n	8007786 <USBD_CDC_Setup+0x104>
 8007728:	2b0b      	cmp	r3, #11
 800772a:	dc38      	bgt.n	800779e <USBD_CDC_Setup+0x11c>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <USBD_CDC_Setup+0xb4>
 8007730:	2b0a      	cmp	r3, #10
 8007732:	d014      	beq.n	800775e <USBD_CDC_Setup+0xdc>
 8007734:	e033      	b.n	800779e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	2b03      	cmp	r3, #3
 800773e:	d107      	bne.n	8007750 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007740:	f107 030c 	add.w	r3, r7, #12
 8007744:	2202      	movs	r2, #2
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 f9d1 	bl	8008af0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800774e:	e02e      	b.n	80077ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f962 	bl	8008a1c <USBD_CtlError>
            ret = USBD_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	75fb      	strb	r3, [r7, #23]
          break;
 800775c:	e027      	b.n	80077ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007764:	2b03      	cmp	r3, #3
 8007766:	d107      	bne.n	8007778 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007768:	f107 030f 	add.w	r3, r7, #15
 800776c:	2201      	movs	r2, #1
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f9bd 	bl	8008af0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007776:	e01a      	b.n	80077ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f94e 	bl	8008a1c <USBD_CtlError>
            ret = USBD_FAIL;
 8007780:	2302      	movs	r3, #2
 8007782:	75fb      	strb	r3, [r7, #23]
          break;
 8007784:	e013      	b.n	80077ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800778c:	2b03      	cmp	r3, #3
 800778e:	d00d      	beq.n	80077ac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 f942 	bl	8008a1c <USBD_CtlError>
            ret = USBD_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800779c:	e006      	b.n	80077ac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 f93b 	bl	8008a1c <USBD_CtlError>
          ret = USBD_FAIL;
 80077a6:	2302      	movs	r3, #2
 80077a8:	75fb      	strb	r3, [r7, #23]
          break;
 80077aa:	e000      	b.n	80077ae <USBD_CDC_Setup+0x12c>
          break;
 80077ac:	bf00      	nop
      }
      break;
 80077ae:	e006      	b.n	80077be <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f932 	bl	8008a1c <USBD_CtlError>
      ret = USBD_FAIL;
 80077b8:	2302      	movs	r3, #2
 80077ba:	75fb      	strb	r3, [r7, #23]
      break;
 80077bc:	bf00      	nop
  }

  return ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077e2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d03a      	beq.n	8007864 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	440b      	add	r3, r1
 80077fc:	331c      	adds	r3, #28
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d029      	beq.n	8007858 <USBD_CDC_DataIn+0x90>
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	331c      	adds	r3, #28
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	78f9      	ldrb	r1, [r7, #3]
 8007818:	68b8      	ldr	r0, [r7, #8]
 800781a:	460b      	mov	r3, r1
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4403      	add	r3, r0
 8007824:	3320      	adds	r3, #32
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	fbb2 f1f3 	udiv	r1, r2, r3
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d110      	bne.n	8007858 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	331c      	adds	r3, #28
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800784a:	78f9      	ldrb	r1, [r7, #3]
 800784c:	2300      	movs	r3, #0
 800784e:	2200      	movs	r2, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fdf7 	bl	8009444 <USBD_LL_Transmit>
 8007856:	e003      	b.n	8007860 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	e000      	b.n	8007866 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007880:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fe22 	bl	80094d0 <USBD_LL_GetRxDataSize>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00d      	beq.n	80078ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80078b2:	4611      	mov	r1, r2
 80078b4:	4798      	blx	r3

    return USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d014      	beq.n	8007908 <USBD_CDC_EP0_RxReady+0x44>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80078e4:	2bff      	cmp	r3, #255	@ 0xff
 80078e6:	d00f      	beq.n	8007908 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80078f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	22ff      	movs	r2, #255	@ 0xff
 8007904:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2243      	movs	r2, #67	@ 0x43
 8007920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	@ (8007930 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	20000094 	.word	0x20000094

08007934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2243      	movs	r2, #67	@ 0x43
 8007940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007942:	4b03      	ldr	r3, [pc, #12]	@ (8007950 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000050 	.word	0x20000050

08007954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2243      	movs	r2, #67	@ 0x43
 8007960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007962:	4b03      	ldr	r3, [pc, #12]	@ (8007970 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200000d8 	.word	0x200000d8

08007974 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220a      	movs	r2, #10
 8007980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007982:	4b03      	ldr	r3, [pc, #12]	@ (8007990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	2000000c 	.word	0x2000000c

08007994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800799e:	2302      	movs	r3, #2
 80079a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01c      	beq.n	8007a6c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d115      	bne.n	8007a68 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2181      	movs	r1, #129	@ 0x81
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f001 fcf0 	bl	8009444 <USBD_LL_Transmit>

      return USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e002      	b.n	8007a6e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d017      	beq.n	8007ac0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 fcf0 	bl	800948a <USBD_LL_PrepareReceive>
 8007aaa:	e007      	b.n	8007abc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ab2:	2340      	movs	r3, #64	@ 0x40
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fce7 	bl	800948a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e01a      	b.n	8007b18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	79fa      	ldrb	r2, [r7, #7]
 8007b0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f001 fb55 	bl	80091c0 <USBD_LL_Init>

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d006      	beq.n	8007b42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
 8007b40:	e001      	b.n	8007b46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b42:	2302      	movs	r3, #2
 8007b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fb8a 	bl	8009274 <USBD_LL_Start>

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00c      	beq.n	8007bb2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fed8 	bl	80089aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d016      	beq.n	8007c4c <USBD_LL_SetupStage+0x6a>
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d81c      	bhi.n	8007c5c <USBD_LL_SetupStage+0x7a>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <USBD_LL_SetupStage+0x4a>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d008      	beq.n	8007c3c <USBD_LL_SetupStage+0x5a>
 8007c2a:	e017      	b.n	8007c5c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f9cb 	bl	8007fd0 <USBD_StdDevReq>
      break;
 8007c3a:	e01a      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fa2d 	bl	80080a4 <USBD_StdItfReq>
      break;
 8007c4a:	e012      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa6d 	bl	8008134 <USBD_StdEPReq>
      break;
 8007c5a:	e00a      	b.n	8007c72 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fb62 	bl	8009334 <USBD_LL_StallEP>
      break;
 8007c70:	bf00      	nop
  }

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d14b      	bne.n	8007d28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d134      	bne.n	8007d0c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d919      	bls.n	8007ce2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d203      	bcs.n	8007cd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	e002      	b.n	8007cd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 ff54 	bl	8008b88 <USBD_CtlContinueRx>
 8007ce0:	e038      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d105      	bne.n	8007d04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 ff51 	bl	8008bac <USBD_CtlSendStatus>
 8007d0a:	e023      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d11e      	bne.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f001 fb07 	bl	8009334 <USBD_LL_StallEP>
 8007d26:	e015      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00d      	beq.n	8007d50 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d108      	bne.n	8007d50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	7afa      	ldrb	r2, [r7, #11]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
 8007d4e:	e001      	b.n	8007d54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d50:	2302      	movs	r3, #2
 8007d52:	e000      	b.n	8007d56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	460b      	mov	r3, r1
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d17f      	bne.n	8007e72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3314      	adds	r3, #20
 8007d76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d15c      	bne.n	8007e3c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d915      	bls.n	8007dba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 febe 	bl	8008b28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dac:	2300      	movs	r3, #0
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f001 fb69 	bl	800948a <USBD_LL_PrepareReceive>
 8007db8:	e04e      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	6912      	ldr	r2, [r2, #16]
 8007dc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc6:	fb01 f202 	mul.w	r2, r1, r2
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11c      	bne.n	8007e0a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d316      	bcc.n	8007e0a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d20f      	bcs.n	8007e0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 fe9a 	bl	8008b28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fb41 	bl	800948a <USBD_LL_PrepareReceive>
 8007e08:	e026      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d105      	bne.n	8007e2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e2c:	2180      	movs	r1, #128	@ 0x80
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 fa80 	bl	8009334 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fecc 	bl	8008bd2 <USBD_CtlReceiveStatus>
 8007e3a:	e00d      	b.n	8007e58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d004      	beq.n	8007e50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e50:	2180      	movs	r1, #128	@ 0x80
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f001 fa6e 	bl	8009334 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d11d      	bne.n	8007e9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff fe81 	bl	8007b6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e70:	e015      	b.n	8007e9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d108      	bne.n	8007e9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	7afa      	ldrb	r2, [r7, #11]
 8007e92:	4611      	mov	r1, r2
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	4798      	blx	r3
 8007e98:	e001      	b.n	8007e9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e000      	b.n	8007ea0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007eb0:	2340      	movs	r3, #64	@ 0x40
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 f9f7 	bl	80092aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2240      	movs	r2, #64	@ 0x40
 8007ec8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ecc:	2340      	movs	r3, #64	@ 0x40
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2180      	movs	r1, #128	@ 0x80
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 f9e9 	bl	80092aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2240      	movs	r2, #64	@ 0x40
 8007ee2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6852      	ldr	r2, [r2, #4]
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d105      	bne.n	8007f8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d10b      	bne.n	8007fc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	d005      	beq.n	8007ff6 <USBD_StdDevReq+0x26>
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d84f      	bhi.n	800808e <USBD_StdDevReq+0xbe>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USBD_StdDevReq+0x36>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d14b      	bne.n	800808e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
      break;
 8008004:	e048      	b.n	8008098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b09      	cmp	r3, #9
 800800c:	d839      	bhi.n	8008082 <USBD_StdDevReq+0xb2>
 800800e:	a201      	add	r2, pc, #4	@ (adr r2, 8008014 <USBD_StdDevReq+0x44>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	08008065 	.word	0x08008065
 8008018:	08008079 	.word	0x08008079
 800801c:	08008083 	.word	0x08008083
 8008020:	0800806f 	.word	0x0800806f
 8008024:	08008083 	.word	0x08008083
 8008028:	08008047 	.word	0x08008047
 800802c:	0800803d 	.word	0x0800803d
 8008030:	08008083 	.word	0x08008083
 8008034:	0800805b 	.word	0x0800805b
 8008038:	08008051 	.word	0x08008051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9dc 	bl	80083fc <USBD_GetDescriptor>
          break;
 8008044:	e022      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb3f 	bl	80086cc <USBD_SetAddress>
          break;
 800804e:	e01d      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fb7e 	bl	8008754 <USBD_SetConfig>
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc07 	bl	8008870 <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc37 	bl	80088da <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fc65 	bl	8008940 <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fc74 	bl	8008968 <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fcc9 	bl	8008a1c <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fcc3 	bl	8008a1c <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d82e      	bhi.n	8008120 <USBD_StdItfReq+0x7c>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d12a      	bne.n	8008120 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d0:	3b01      	subs	r3, #1
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d81d      	bhi.n	8008112 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d813      	bhi.n	8008108 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d110      	bne.n	800811c <USBD_StdItfReq+0x78>
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10d      	bne.n	800811c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fd53 	bl	8008bac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008106:	e009      	b.n	800811c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fc86 	bl	8008a1c <USBD_CtlError>
          break;
 8008110:	e004      	b.n	800811c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fc81 	bl	8008a1c <USBD_CtlError>
          break;
 800811a:	e000      	b.n	800811e <USBD_StdItfReq+0x7a>
          break;
 800811c:	bf00      	nop
      }
      break;
 800811e:	e004      	b.n	800812a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc7a 	bl	8008a1c <USBD_CtlError>
      break;
 8008128:	bf00      	nop
  }

  return USBD_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	d007      	beq.n	8008164 <USBD_StdEPReq+0x30>
 8008154:	2b40      	cmp	r3, #64	@ 0x40
 8008156:	f200 8146 	bhi.w	80083e6 <USBD_StdEPReq+0x2b2>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <USBD_StdEPReq+0x40>
 800815e:	2b20      	cmp	r3, #32
 8008160:	f040 8141 	bne.w	80083e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
      break;
 8008172:	e13d      	b.n	80083f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800817c:	2b20      	cmp	r3, #32
 800817e:	d10a      	bne.n	8008196 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	e12d      	b.n	80083f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	785b      	ldrb	r3, [r3, #1]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d007      	beq.n	80081ae <USBD_StdEPReq+0x7a>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	f300 811b 	bgt.w	80083da <USBD_StdEPReq+0x2a6>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d072      	beq.n	800828e <USBD_StdEPReq+0x15a>
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d03a      	beq.n	8008222 <USBD_StdEPReq+0xee>
 80081ac:	e115      	b.n	80083da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d002      	beq.n	80081be <USBD_StdEPReq+0x8a>
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d015      	beq.n	80081e8 <USBD_StdEPReq+0xb4>
 80081bc:	e02b      	b.n	8008216 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00c      	beq.n	80081de <USBD_StdEPReq+0xaa>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b80      	cmp	r3, #128	@ 0x80
 80081c8:	d009      	beq.n	80081de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f8b0 	bl	8009334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081d4:	2180      	movs	r1, #128	@ 0x80
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f8ac 	bl	8009334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081dc:	e020      	b.n	8008220 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc1b 	bl	8008a1c <USBD_CtlError>
              break;
 80081e6:	e01b      	b.n	8008220 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10e      	bne.n	800820e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <USBD_StdEPReq+0xda>
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b80      	cmp	r3, #128	@ 0x80
 80081fa:	d008      	beq.n	800820e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f893 	bl	8009334 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fccc 	bl	8008bac <USBD_CtlSendStatus>

              break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fbff 	bl	8008a1c <USBD_CtlError>
              break;
 800821e:	bf00      	nop
          }
          break;
 8008220:	e0e0      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008228:	2b02      	cmp	r3, #2
 800822a:	d002      	beq.n	8008232 <USBD_StdEPReq+0xfe>
 800822c:	2b03      	cmp	r3, #3
 800822e:	d015      	beq.n	800825c <USBD_StdEPReq+0x128>
 8008230:	e026      	b.n	8008280 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <USBD_StdEPReq+0x11e>
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b80      	cmp	r3, #128	@ 0x80
 800823c:	d009      	beq.n	8008252 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 f876 	bl	8009334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008248:	2180      	movs	r1, #128	@ 0x80
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f872 	bl	8009334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008250:	e01c      	b.n	800828c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 fbe1 	bl	8008a1c <USBD_CtlError>
              break;
 800825a:	e017      	b.n	800828c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d112      	bne.n	800828a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f87d 	bl	8009372 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc97 	bl	8008bac <USBD_CtlSendStatus>
              }
              break;
 800827e:	e004      	b.n	800828a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fbca 	bl	8008a1c <USBD_CtlError>
              break;
 8008288:	e000      	b.n	800828c <USBD_StdEPReq+0x158>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e0aa      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008294:	2b02      	cmp	r3, #2
 8008296:	d002      	beq.n	800829e <USBD_StdEPReq+0x16a>
 8008298:	2b03      	cmp	r3, #3
 800829a:	d032      	beq.n	8008302 <USBD_StdEPReq+0x1ce>
 800829c:	e097      	b.n	80083ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <USBD_StdEPReq+0x180>
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b80      	cmp	r3, #128	@ 0x80
 80082a8:	d004      	beq.n	80082b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fbb5 	bl	8008a1c <USBD_CtlError>
                break;
 80082b2:	e091      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da0b      	bge.n	80082d4 <USBD_StdEPReq+0x1a0>
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3310      	adds	r3, #16
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	4413      	add	r3, r2
 80082d0:	3304      	adds	r3, #4
 80082d2:	e00b      	b.n	80082ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	4413      	add	r3, r2
 80082ea:	3304      	adds	r3, #4
 80082ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2202      	movs	r2, #2
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fbf8 	bl	8008af0 <USBD_CtlSendData>
              break;
 8008300:	e06a      	b.n	80083d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	da11      	bge.n	800832e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	f003 020f 	and.w	r2, r3, #15
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3318      	adds	r3, #24
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d117      	bne.n	8008354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fb78 	bl	8008a1c <USBD_CtlError>
                  break;
 800832c:	e054      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	f003 020f 	and.w	r2, r3, #15
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fb65 	bl	8008a1c <USBD_CtlError>
                  break;
 8008352:	e041      	b.n	80083d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008358:	2b00      	cmp	r3, #0
 800835a:	da0b      	bge.n	8008374 <USBD_StdEPReq+0x240>
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	3310      	adds	r3, #16
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	4413      	add	r3, r2
 8008370:	3304      	adds	r3, #4
 8008372:	e00b      	b.n	800838c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <USBD_StdEPReq+0x266>
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b80      	cmp	r3, #128	@ 0x80
 8008398:	d103      	bne.n	80083a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e00e      	b.n	80083c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f802 	bl	80093b0 <USBD_LL_IsStallEP>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e002      	b.n	80083c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2202      	movs	r2, #2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fb92 	bl	8008af0 <USBD_CtlSendData>
              break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fb23 	bl	8008a1c <USBD_CtlError>
              break;
 80083d6:	bf00      	nop
          }
          break;
 80083d8:	e004      	b.n	80083e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fb1d 	bl	8008a1c <USBD_CtlError>
          break;
 80083e2:	bf00      	nop
      }
      break;
 80083e4:	e004      	b.n	80083f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb17 	bl	8008a1c <USBD_CtlError>
      break;
 80083ee:	bf00      	nop
  }

  return ret;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	885b      	ldrh	r3, [r3, #2]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	2b06      	cmp	r3, #6
 800841e:	f200 8128 	bhi.w	8008672 <USBD_GetDescriptor+0x276>
 8008422:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <USBD_GetDescriptor+0x2c>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008445 	.word	0x08008445
 800842c:	0800845d 	.word	0x0800845d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	08008673 	.word	0x08008673
 8008438:	08008673 	.word	0x08008673
 800843c:	08008613 	.word	0x08008613
 8008440:	0800863f 	.word	0x0800863f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
      break;
 800845a:	e112      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7c1b      	ldrb	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800846a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800847e:	e100      	b.n	8008682 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	f107 0208 	add.w	r2, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	2202      	movs	r2, #2
 8008498:	701a      	strb	r2, [r3, #0]
      break;
 800849a:	e0f2      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	885b      	ldrh	r3, [r3, #2]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	f200 80ac 	bhi.w	8008600 <USBD_GetDescriptor+0x204>
 80084a8:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <USBD_GetDescriptor+0xb4>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008565 	.word	0x08008565
 80084c0:	08008599 	.word	0x08008599
 80084c4:	080085cd 	.word	0x080085cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e091      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fa94 	bl	8008a1c <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e089      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e077      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa7a 	bl	8008a1c <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e06f      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e05d      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa60 	bl	8008a1c <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e055      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	7c12      	ldrb	r2, [r2, #16]
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008586:	e043      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa46 	bl	8008a1c <USBD_CtlError>
            err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
          break;
 8008596:	e03b      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ba:	e029      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa2c 	bl	8008a1c <USBD_CtlError>
            err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ca:	e021      	b.n	8008610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7c12      	ldrb	r2, [r2, #16]
 80085e4:	f107 0108 	add.w	r1, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ee:	e00f      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa12 	bl	8008a1c <USBD_CtlError>
            err++;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	3301      	adds	r3, #1
 80085fc:	72fb      	strb	r3, [r7, #11]
          break;
 80085fe:	e007      	b.n	8008610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa0a 	bl	8008a1c <USBD_CtlError>
          err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800860e:	e038      	b.n	8008682 <USBD_GetDescriptor+0x286>
 8008610:	e037      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7c1b      	ldrb	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008622:	f107 0208 	add.w	r2, r7, #8
 8008626:	4610      	mov	r0, r2
 8008628:	4798      	blx	r3
 800862a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800862c:	e029      	b.n	8008682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f9f3 	bl	8008a1c <USBD_CtlError>
        err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	e021      	b.n	8008682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7c1b      	ldrb	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800864c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864e:	f107 0208 	add.w	r2, r7, #8
 8008652:	4610      	mov	r0, r2
 8008654:	4798      	blx	r3
 8008656:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	2207      	movs	r2, #7
 800865e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008660:	e00f      	b.n	8008682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f9d9 	bl	8008a1c <USBD_CtlError>
        err++;
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	3301      	adds	r3, #1
 800866e:	72fb      	strb	r3, [r7, #11]
      break;
 8008670:	e007      	b.n	8008682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9d1 	bl	8008a1c <USBD_CtlError>
      err++;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	3301      	adds	r3, #1
 800867e:	72fb      	strb	r3, [r7, #11]
      break;
 8008680:	bf00      	nop
  }

  if (err != 0U)
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11c      	bne.n	80086c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008688:	893b      	ldrh	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d011      	beq.n	80086b2 <USBD_GetDescriptor+0x2b6>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	88db      	ldrh	r3, [r3, #6]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00d      	beq.n	80086b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	88da      	ldrh	r2, [r3, #6]
 800869a:	893b      	ldrh	r3, [r7, #8]
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a6:	893b      	ldrh	r3, [r7, #8]
 80086a8:	461a      	mov	r2, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa1f 	bl	8008af0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	88db      	ldrh	r3, [r3, #6]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d104      	bne.n	80086c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa76 	bl	8008bac <USBD_CtlSendStatus>
 80086c0:	e000      	b.n	80086c4 <USBD_GetDescriptor+0x2c8>
    return;
 80086c2:	bf00      	nop
    }
  }
}
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop

080086cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	889b      	ldrh	r3, [r3, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d130      	bne.n	8008740 <USBD_SetAddress+0x74>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	88db      	ldrh	r3, [r3, #6]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d12c      	bne.n	8008740 <USBD_SetAddress+0x74>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	885b      	ldrh	r3, [r3, #2]
 80086ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80086ec:	d828      	bhi.n	8008740 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	885b      	ldrh	r3, [r3, #2]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	2b03      	cmp	r3, #3
 8008702:	d104      	bne.n	800870e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f988 	bl	8008a1c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870c:	e01d      	b.n	800874a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7bfa      	ldrb	r2, [r7, #15]
 8008712:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fe73 	bl	8009406 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa43 	bl	8008bac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008734:	e009      	b.n	800874a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873e:	e004      	b.n	800874a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f96a 	bl	8008a1c <USBD_CtlError>
  }
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	4b41      	ldr	r3, [pc, #260]	@ (800886c <USBD_SetConfig+0x118>)
 8008766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008768:	4b40      	ldr	r3, [pc, #256]	@ (800886c <USBD_SetConfig+0x118>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d904      	bls.n	800877a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f952 	bl	8008a1c <USBD_CtlError>
 8008778:	e075      	b.n	8008866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008780:	2b02      	cmp	r3, #2
 8008782:	d002      	beq.n	800878a <USBD_SetConfig+0x36>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d023      	beq.n	80087d0 <USBD_SetConfig+0x7c>
 8008788:	e062      	b.n	8008850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800878a:	4b38      	ldr	r3, [pc, #224]	@ (800886c <USBD_SetConfig+0x118>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01a      	beq.n	80087c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008792:	4b36      	ldr	r3, [pc, #216]	@ (800886c <USBD_SetConfig+0x118>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2203      	movs	r2, #3
 80087a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087a4:	4b31      	ldr	r3, [pc, #196]	@ (800886c <USBD_SetConfig+0x118>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff f9e7 	bl	8007b7e <USBD_SetClassConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d104      	bne.n	80087c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f92f 	bl	8008a1c <USBD_CtlError>
            return;
 80087be:	e052      	b.n	8008866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f9f3 	bl	8008bac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087c6:	e04e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9ef 	bl	8008bac <USBD_CtlSendStatus>
        break;
 80087ce:	e04a      	b.n	8008866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80087d0:	4b26      	ldr	r3, [pc, #152]	@ (800886c <USBD_SetConfig+0x118>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d112      	bne.n	80087fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80087e0:	4b22      	ldr	r3, [pc, #136]	@ (800886c <USBD_SetConfig+0x118>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087ea:	4b20      	ldr	r3, [pc, #128]	@ (800886c <USBD_SetConfig+0x118>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff f9e3 	bl	8007bbc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9d8 	bl	8008bac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087fc:	e033      	b.n	8008866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087fe:	4b1b      	ldr	r3, [pc, #108]	@ (800886c <USBD_SetConfig+0x118>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d01d      	beq.n	8008848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff f9d1 	bl	8007bbc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800881a:	4b14      	ldr	r3, [pc, #80]	@ (800886c <USBD_SetConfig+0x118>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008824:	4b11      	ldr	r3, [pc, #68]	@ (800886c <USBD_SetConfig+0x118>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f9a7 	bl	8007b7e <USBD_SetClassConfig>
 8008830:	4603      	mov	r3, r0
 8008832:	2b02      	cmp	r3, #2
 8008834:	d104      	bne.n	8008840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f8ef 	bl	8008a1c <USBD_CtlError>
            return;
 800883e:	e012      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9b3 	bl	8008bac <USBD_CtlSendStatus>
        break;
 8008846:	e00e      	b.n	8008866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9af 	bl	8008bac <USBD_CtlSendStatus>
        break;
 800884e:	e00a      	b.n	8008866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8e2 	bl	8008a1c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008858:	4b04      	ldr	r3, [pc, #16]	@ (800886c <USBD_SetConfig+0x118>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff f9ac 	bl	8007bbc <USBD_ClrClassConfig>
        break;
 8008864:	bf00      	nop
    }
  }
}
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	200003e8 	.word	0x200003e8

08008870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88db      	ldrh	r3, [r3, #6]
 800887e:	2b01      	cmp	r3, #1
 8008880:	d004      	beq.n	800888c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f8c9 	bl	8008a1c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800888a:	e022      	b.n	80088d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008892:	2b02      	cmp	r3, #2
 8008894:	dc02      	bgt.n	800889c <USBD_GetConfig+0x2c>
 8008896:	2b00      	cmp	r3, #0
 8008898:	dc03      	bgt.n	80088a2 <USBD_GetConfig+0x32>
 800889a:	e015      	b.n	80088c8 <USBD_GetConfig+0x58>
 800889c:	2b03      	cmp	r3, #3
 800889e:	d00b      	beq.n	80088b8 <USBD_GetConfig+0x48>
 80088a0:	e012      	b.n	80088c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3308      	adds	r3, #8
 80088ac:	2201      	movs	r2, #1
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f91d 	bl	8008af0 <USBD_CtlSendData>
        break;
 80088b6:	e00c      	b.n	80088d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3304      	adds	r3, #4
 80088bc:	2201      	movs	r2, #1
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f915 	bl	8008af0 <USBD_CtlSendData>
        break;
 80088c6:	e004      	b.n	80088d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8a6 	bl	8008a1c <USBD_CtlError>
        break;
 80088d0:	bf00      	nop
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ea:	3b01      	subs	r3, #1
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d81e      	bhi.n	800892e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d004      	beq.n	8008902 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f88e 	bl	8008a1c <USBD_CtlError>
        break;
 8008900:	e01a      	b.n	8008938 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f043 0202 	orr.w	r2, r3, #2
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	330c      	adds	r3, #12
 8008922:	2202      	movs	r2, #2
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f8e2 	bl	8008af0 <USBD_CtlSendData>
      break;
 800892c:	e004      	b.n	8008938 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f873 	bl	8008a1c <USBD_CtlError>
      break;
 8008936:	bf00      	nop
  }
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d106      	bne.n	8008960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f926 	bl	8008bac <USBD_CtlSendStatus>
  }
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008978:	3b01      	subs	r3, #1
 800897a:	2b02      	cmp	r3, #2
 800897c:	d80b      	bhi.n	8008996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	885b      	ldrh	r3, [r3, #2]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d10c      	bne.n	80089a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f90c 	bl	8008bac <USBD_CtlSendStatus>
      }
      break;
 8008994:	e004      	b.n	80089a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f83f 	bl	8008a1c <USBD_CtlError>
      break;
 800899e:	e000      	b.n	80089a2 <USBD_ClrFeature+0x3a>
      break;
 80089a0:	bf00      	nop
  }
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781a      	ldrb	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	785a      	ldrb	r2, [r3, #1]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3302      	adds	r3, #2
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	3303      	adds	r3, #3
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	021b      	lsls	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	3305      	adds	r3, #5
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	3306      	adds	r3, #6
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	3307      	adds	r3, #7
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	80da      	strh	r2, [r3, #6]

}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr

08008a1c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fc83 	bl	8009334 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a2e:	2100      	movs	r1, #0
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc7f 	bl	8009334 <USBD_LL_StallEP>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d032      	beq.n	8008aba <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f834 	bl	8008ac2 <USBD_GetLen>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	75fa      	strb	r2, [r7, #23]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4413      	add	r3, r2
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a7a:	7dfb      	ldrb	r3, [r7, #23]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	75fa      	strb	r2, [r7, #23]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	4413      	add	r3, r2
 8008a86:	2203      	movs	r2, #3
 8008a88:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a8a:	e012      	b.n	8008ab2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	60fa      	str	r2, [r7, #12]
 8008a92:	7dfa      	ldrb	r2, [r7, #23]
 8008a94:	1c51      	adds	r1, r2, #1
 8008a96:	75f9      	strb	r1, [r7, #23]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	440a      	add	r2, r1
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	75fa      	strb	r2, [r7, #23]
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e8      	bne.n	8008a8c <USBD_GetString+0x4e>
    }
  }
}
 8008aba:	bf00      	nop
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ace:	e005      	b.n	8008adc <USBD_GetLen+0x1a>
  {
    len++;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1f5      	bne.n	8008ad0 <USBD_GetLen+0xe>
  }

  return len;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2202      	movs	r2, #2
 8008b02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b0c:	88fa      	ldrh	r2, [r7, #6]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	2100      	movs	r1, #0
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fc93 	bl	8009444 <USBD_LL_Transmit>

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	4613      	mov	r3, r2
 8008b34:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fc81 	bl	8009444 <USBD_LL_Transmit>

  return USBD_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b62:	88fa      	ldrh	r2, [r7, #6]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b6a:	88fa      	ldrh	r2, [r7, #6]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	2100      	movs	r1, #0
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	f000 fc86 	bl	800948a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fc74 	bl	800948a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fc3e 	bl	8009444 <USBD_LL_Transmit>

  return USBD_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2205      	movs	r2, #5
 8008bde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008be2:	2300      	movs	r3, #0
 8008be4:	2200      	movs	r2, #0
 8008be6:	2100      	movs	r1, #0
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fc4e 	bl	800948a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4912      	ldr	r1, [pc, #72]	@ (8008c48 <MX_USB_DEVICE_Init+0x50>)
 8008c00:	4812      	ldr	r0, [pc, #72]	@ (8008c4c <MX_USB_DEVICE_Init+0x54>)
 8008c02:	f7fe ff62 	bl	8007aca <USBD_Init>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c0c:	f7f9 fa5a 	bl	80020c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c10:	490f      	ldr	r1, [pc, #60]	@ (8008c50 <MX_USB_DEVICE_Init+0x58>)
 8008c12:	480e      	ldr	r0, [pc, #56]	@ (8008c4c <MX_USB_DEVICE_Init+0x54>)
 8008c14:	f7fe ff84 	bl	8007b20 <USBD_RegisterClass>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c1e:	f7f9 fa51 	bl	80020c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c22:	490c      	ldr	r1, [pc, #48]	@ (8008c54 <MX_USB_DEVICE_Init+0x5c>)
 8008c24:	4809      	ldr	r0, [pc, #36]	@ (8008c4c <MX_USB_DEVICE_Init+0x54>)
 8008c26:	f7fe feb5 	bl	8007994 <USBD_CDC_RegisterInterface>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c30:	f7f9 fa48 	bl	80020c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c34:	4805      	ldr	r0, [pc, #20]	@ (8008c4c <MX_USB_DEVICE_Init+0x54>)
 8008c36:	f7fe ff8c 	bl	8007b52 <USBD_Start>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c40:	f7f9 fa40 	bl	80020c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c44:	bf00      	nop
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	2000012c 	.word	0x2000012c
 8008c4c:	200003ec 	.word	0x200003ec
 8008c50:	20000018 	.word	0x20000018
 8008c54:	2000011c 	.word	0x2000011c

08008c58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4905      	ldr	r1, [pc, #20]	@ (8008c74 <CDC_Init_FS+0x1c>)
 8008c60:	4805      	ldr	r0, [pc, #20]	@ (8008c78 <CDC_Init_FS+0x20>)
 8008c62:	f7fe fead 	bl	80079c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c66:	4905      	ldr	r1, [pc, #20]	@ (8008c7c <CDC_Init_FS+0x24>)
 8008c68:	4803      	ldr	r0, [pc, #12]	@ (8008c78 <CDC_Init_FS+0x20>)
 8008c6a:	f7fe fec2 	bl	80079f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000ab0 	.word	0x20000ab0
 8008c78:	200003ec 	.word	0x200003ec
 8008c7c:	200006b0 	.word	0x200006b0

08008c80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr
	...

08008c90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b23      	cmp	r3, #35	@ 0x23
 8008ca4:	d84a      	bhi.n	8008d3c <CDC_Control_FS+0xac>
 8008ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <CDC_Control_FS+0x1c>)
 8008ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cac:	08008d3d 	.word	0x08008d3d
 8008cb0:	08008d3d 	.word	0x08008d3d
 8008cb4:	08008d3d 	.word	0x08008d3d
 8008cb8:	08008d3d 	.word	0x08008d3d
 8008cbc:	08008d3d 	.word	0x08008d3d
 8008cc0:	08008d3d 	.word	0x08008d3d
 8008cc4:	08008d3d 	.word	0x08008d3d
 8008cc8:	08008d3d 	.word	0x08008d3d
 8008ccc:	08008d3d 	.word	0x08008d3d
 8008cd0:	08008d3d 	.word	0x08008d3d
 8008cd4:	08008d3d 	.word	0x08008d3d
 8008cd8:	08008d3d 	.word	0x08008d3d
 8008cdc:	08008d3d 	.word	0x08008d3d
 8008ce0:	08008d3d 	.word	0x08008d3d
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d3d 	.word	0x08008d3d
 8008cec:	08008d3d 	.word	0x08008d3d
 8008cf0:	08008d3d 	.word	0x08008d3d
 8008cf4:	08008d3d 	.word	0x08008d3d
 8008cf8:	08008d3d 	.word	0x08008d3d
 8008cfc:	08008d3d 	.word	0x08008d3d
 8008d00:	08008d3d 	.word	0x08008d3d
 8008d04:	08008d3d 	.word	0x08008d3d
 8008d08:	08008d3d 	.word	0x08008d3d
 8008d0c:	08008d3d 	.word	0x08008d3d
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008d3d 	.word	0x08008d3d
 8008d18:	08008d3d 	.word	0x08008d3d
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	08008d3d 	.word	0x08008d3d
 8008d24:	08008d3d 	.word	0x08008d3d
 8008d28:	08008d3d 	.word	0x08008d3d
 8008d2c:	08008d3d 	.word	0x08008d3d
 8008d30:	08008d3d 	.word	0x08008d3d
 8008d34:	08008d3d 	.word	0x08008d3d
 8008d38:	08008d3d 	.word	0x08008d3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d3c:	bf00      	nop
  }

  return (USBD_OK);
 8008d3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	e022      	b.n	8008da2 <CDC_Receive_FS+0x56>
    char receivedChar = Buf[i];
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	2b0a      	cmp	r3, #10
 8008d6a:	d108      	bne.n	8008d7e <CDC_Receive_FS+0x32>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 8008d6c:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <CDC_Receive_FS+0x78>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a15      	ldr	r2, [pc, #84]	@ (8008dc8 <CDC_Receive_FS+0x7c>)
 8008d72:	2100      	movs	r1, #0
 8008d74:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 8008d76:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <CDC_Receive_FS+0x80>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
 8008d7c:	e016      	b.n	8008dac <CDC_Receive_FS+0x60>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b0d      	cmp	r3, #13
 8008d82:	d00b      	beq.n	8008d9c <CDC_Receive_FS+0x50>
 8008d84:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc4 <CDC_Receive_FS+0x78>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b62      	cmp	r3, #98	@ 0x62
 8008d8a:	d807      	bhi.n	8008d9c <CDC_Receive_FS+0x50>
      usbBuffer[usbBufferIndex++] = receivedChar;
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <CDC_Receive_FS+0x78>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	1c5a      	adds	r2, r3, #1
 8008d92:	490c      	ldr	r1, [pc, #48]	@ (8008dc4 <CDC_Receive_FS+0x78>)
 8008d94:	600a      	str	r2, [r1, #0]
 8008d96:	490c      	ldr	r1, [pc, #48]	@ (8008dc8 <CDC_Receive_FS+0x7c>)
 8008d98:	7afa      	ldrb	r2, [r7, #11]
 8008d9a:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3d7      	bcc.n	8008d5c <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4808      	ldr	r0, [pc, #32]	@ (8008dd0 <CDC_Receive_FS+0x84>)
 8008db0:	f7fe fe1f 	bl	80079f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008db4:	4806      	ldr	r0, [pc, #24]	@ (8008dd0 <CDC_Receive_FS+0x84>)
 8008db6:	f7fe fe5e 	bl	8007a76 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008dba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	200003d0 	.word	0x200003d0
 8008dc8:	2000036c 	.word	0x2000036c
 8008dcc:	200003d4 	.word	0x200003d4
 8008dd0:	200003ec 	.word	0x200003ec

08008dd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008de4:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e00b      	b.n	8008e12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dfa:	887b      	ldrh	r3, [r7, #2]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4806      	ldr	r0, [pc, #24]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008e02:	f7fe fddd 	bl	80079c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e06:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <CDC_Transmit_FS+0x48>)
 8008e08:	f7fe fe06 	bl	8007a18 <USBD_CDC_TransmitPacket>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	200003ec 	.word	0x200003ec

08008e20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2212      	movs	r2, #18
 8008e30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	@ (8008e40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000148 	.word	0x20000148

08008e44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2204      	movs	r2, #4
 8008e54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e56:	4b03      	ldr	r3, [pc, #12]	@ (8008e64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	2000015c 	.word	0x2000015c

08008e68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4907      	ldr	r1, [pc, #28]	@ (8008e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e7e:	4808      	ldr	r0, [pc, #32]	@ (8008ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e80:	f7ff fddd 	bl	8008a3e <USBD_GetString>
 8008e84:	e004      	b.n	8008e90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	4904      	ldr	r1, [pc, #16]	@ (8008e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e8a:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e8c:	f7ff fdd7 	bl	8008a3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e90:	4b02      	ldr	r3, [pc, #8]	@ (8008e9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000eb0 	.word	0x20000eb0
 8008ea0:	0800c8b4 	.word	0x0800c8b4

08008ea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	4904      	ldr	r1, [pc, #16]	@ (8008ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008eb4:	4804      	ldr	r0, [pc, #16]	@ (8008ec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eb6:	f7ff fdc2 	bl	8008a3e <USBD_GetString>
  return USBD_StrDesc;
 8008eba:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000eb0 	.word	0x20000eb0
 8008ec8:	0800c8cc 	.word	0x0800c8cc

08008ecc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	221a      	movs	r2, #26
 8008edc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ede:	f000 f843 	bl	8008f68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ee2:	4b02      	ldr	r3, [pc, #8]	@ (8008eec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20000160 	.word	0x20000160

08008ef0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d105      	bne.n	8008f0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	4907      	ldr	r1, [pc, #28]	@ (8008f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f06:	4808      	ldr	r0, [pc, #32]	@ (8008f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f08:	f7ff fd99 	bl	8008a3e <USBD_GetString>
 8008f0c:	e004      	b.n	8008f18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4904      	ldr	r1, [pc, #16]	@ (8008f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f12:	4805      	ldr	r0, [pc, #20]	@ (8008f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f14:	f7ff fd93 	bl	8008a3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f18:	4b02      	ldr	r3, [pc, #8]	@ (8008f24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000eb0 	.word	0x20000eb0
 8008f28:	0800c8e0 	.word	0x0800c8e0

08008f2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d105      	bne.n	8008f4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	4907      	ldr	r1, [pc, #28]	@ (8008f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f42:	4808      	ldr	r0, [pc, #32]	@ (8008f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f44:	f7ff fd7b 	bl	8008a3e <USBD_GetString>
 8008f48:	e004      	b.n	8008f54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	4904      	ldr	r1, [pc, #16]	@ (8008f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f4e:	4805      	ldr	r0, [pc, #20]	@ (8008f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f50:	f7ff fd75 	bl	8008a3e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f54:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000eb0 	.word	0x20000eb0
 8008f64:	0800c8ec 	.word	0x0800c8ec

08008f68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fac <Get_SerialNum+0x44>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f74:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb0 <Get_SerialNum+0x48>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb4 <Get_SerialNum+0x4c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4413      	add	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d009      	beq.n	8008fa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f8e:	2208      	movs	r2, #8
 8008f90:	4909      	ldr	r1, [pc, #36]	@ (8008fb8 <Get_SerialNum+0x50>)
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 f814 	bl	8008fc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f98:	2204      	movs	r2, #4
 8008f9a:	4908      	ldr	r1, [pc, #32]	@ (8008fbc <Get_SerialNum+0x54>)
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f000 f80f 	bl	8008fc0 <IntToUnicode>
  }
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	1ffff7e8 	.word	0x1ffff7e8
 8008fb0:	1ffff7ec 	.word	0x1ffff7ec
 8008fb4:	1ffff7f0 	.word	0x1ffff7f0
 8008fb8:	20000162 	.word	0x20000162
 8008fbc:	20000172 	.word	0x20000172

08008fc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
 8008fd6:	e027      	b.n	8009028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	0f1b      	lsrs	r3, r3, #28
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d80b      	bhi.n	8008ff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	0f1b      	lsrs	r3, r3, #28
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	7dfb      	ldrb	r3, [r7, #23]
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	4619      	mov	r1, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	440b      	add	r3, r1
 8008ff0:	3230      	adds	r2, #48	@ 0x30
 8008ff2:	b2d2      	uxtb	r2, r2
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e00a      	b.n	800900e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	0f1b      	lsrs	r3, r3, #28
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	4619      	mov	r1, r3
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	440b      	add	r3, r1
 8009008:	3237      	adds	r2, #55	@ 0x37
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	3301      	adds	r3, #1
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	3301      	adds	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
 8009028:	7dfa      	ldrb	r2, [r7, #23]
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	429a      	cmp	r2, r3
 800902e:	d3d3      	bcc.n	8008fd8 <IntToUnicode+0x18>
  }
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr

0800903c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a0d      	ldr	r2, [pc, #52]	@ (8009080 <HAL_PCD_MspInit+0x44>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d113      	bne.n	8009076 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <HAL_PCD_MspInit+0x48>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	4a0c      	ldr	r2, [pc, #48]	@ (8009084 <HAL_PCD_MspInit+0x48>)
 8009054:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009058:	61d3      	str	r3, [r2, #28]
 800905a:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <HAL_PCD_MspInit+0x48>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	2014      	movs	r0, #20
 800906c:	f7f9 fae3 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009070:	2014      	movs	r0, #20
 8009072:	f7f9 fafc 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40005c00 	.word	0x40005c00
 8009084:	40021000 	.word	0x40021000

08009088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800909c:	4619      	mov	r1, r3
 800909e:	4610      	mov	r0, r2
 80090a0:	f7fe fd9f 	bl	8007be2 <USBD_LL_SetupStage>
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	6879      	ldr	r1, [r7, #4]
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	440b      	add	r3, r1
 80090cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f7fe fdd1 	bl	8007c7c <USBD_LL_DataOutStage>
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b082      	sub	sp, #8
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80090f4:	78fa      	ldrb	r2, [r7, #3]
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	440b      	add	r3, r1
 8009102:	3324      	adds	r3, #36	@ 0x24
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	4619      	mov	r1, r3
 800910a:	f7fe fe28 	bl	8007d5e <USBD_LL_DataInStage>
}
 800910e:	bf00      	nop
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe ff38 	bl	8007f9a <USBD_LL_SOF>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800913a:	2301      	movs	r3, #1
 800913c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	799b      	ldrb	r3, [r3, #6]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d001      	beq.n	800914a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009146:	f7f8 ffbd 	bl	80020c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009150:	7bfa      	ldrb	r2, [r7, #15]
 8009152:	4611      	mov	r1, r2
 8009154:	4618      	mov	r0, r3
 8009156:	f7fe fee8 	bl	8007f2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fea1 	bl	8007ea8 <USBD_LL_Reset>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fee2 	bl	8007f48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	7a9b      	ldrb	r3, [r3, #10]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <HAL_PCD_SuspendCallback+0x30>)
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	4a03      	ldr	r2, [pc, #12]	@ (80091a0 <HAL_PCD_SuspendCallback+0x30>)
 8009192:	f043 0306 	orr.w	r3, r3, #6
 8009196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fedc 	bl	8007f70 <USBD_LL_Resume>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80091c8:	4a28      	ldr	r2, [pc, #160]	@ (800926c <USBD_LL_Init+0xac>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a26      	ldr	r2, [pc, #152]	@ (800926c <USBD_LL_Init+0xac>)
 80091d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091d8:	4b24      	ldr	r3, [pc, #144]	@ (800926c <USBD_LL_Init+0xac>)
 80091da:	4a25      	ldr	r2, [pc, #148]	@ (8009270 <USBD_LL_Init+0xb0>)
 80091dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091de:	4b23      	ldr	r3, [pc, #140]	@ (800926c <USBD_LL_Init+0xac>)
 80091e0:	2208      	movs	r2, #8
 80091e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091e4:	4b21      	ldr	r3, [pc, #132]	@ (800926c <USBD_LL_Init+0xac>)
 80091e6:	2202      	movs	r2, #2
 80091e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091ea:	4b20      	ldr	r3, [pc, #128]	@ (800926c <USBD_LL_Init+0xac>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091f0:	4b1e      	ldr	r3, [pc, #120]	@ (800926c <USBD_LL_Init+0xac>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091f6:	4b1d      	ldr	r3, [pc, #116]	@ (800926c <USBD_LL_Init+0xac>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091fc:	481b      	ldr	r0, [pc, #108]	@ (800926c <USBD_LL_Init+0xac>)
 80091fe:	f7f9 fc04 	bl	8002a0a <HAL_PCD_Init>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009208:	f7f8 ff5c 	bl	80020c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009212:	2318      	movs	r3, #24
 8009214:	2200      	movs	r2, #0
 8009216:	2100      	movs	r1, #0
 8009218:	f7fb f915 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009222:	2358      	movs	r3, #88	@ 0x58
 8009224:	2200      	movs	r2, #0
 8009226:	2180      	movs	r1, #128	@ 0x80
 8009228:	f7fb f90d 	bl	8004446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009232:	23c0      	movs	r3, #192	@ 0xc0
 8009234:	2200      	movs	r2, #0
 8009236:	2181      	movs	r1, #129	@ 0x81
 8009238:	f7fb f905 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009242:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009246:	2200      	movs	r2, #0
 8009248:	2101      	movs	r1, #1
 800924a:	f7fb f8fc 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009258:	2200      	movs	r2, #0
 800925a:	2182      	movs	r1, #130	@ 0x82
 800925c:	f7fb f8f3 	bl	8004446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200010b0 	.word	0x200010b0
 8009270:	40005c00 	.word	0x40005c00

08009274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800928a:	4618      	mov	r0, r3
 800928c:	f7f9 fcb3 	bl	8002bf6 <HAL_PCD_Start>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 f94e 	bl	8009538 <USBD_Get_USB_Status>
 800929c:	4603      	mov	r3, r0
 800929e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	461a      	mov	r2, r3
 80092b8:	4603      	mov	r3, r0
 80092ba:	70fb      	strb	r3, [r7, #3]
 80092bc:	460b      	mov	r3, r1
 80092be:	70bb      	strb	r3, [r7, #2]
 80092c0:	4613      	mov	r3, r2
 80092c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092d2:	78bb      	ldrb	r3, [r7, #2]
 80092d4:	883a      	ldrh	r2, [r7, #0]
 80092d6:	78f9      	ldrb	r1, [r7, #3]
 80092d8:	f7f9 fe07 	bl	8002eea <HAL_PCD_EP_Open>
 80092dc:	4603      	mov	r3, r0
 80092de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f928 	bl	8009538 <USBD_Get_USB_Status>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	460b      	mov	r3, r1
 8009300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7f9 fe45 	bl	8002fa4 <HAL_PCD_EP_Close>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f909 	bl	8009538 <USBD_Get_USB_Status>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932a:	7bbb      	ldrb	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7f9 feed 	bl	8003132 <HAL_PCD_EP_SetStall>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f8ea 	bl	8009538 <USBD_Get_USB_Status>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009368:	7bbb      	ldrb	r3, [r7, #14]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7f9 ff2e 	bl	80031f2 <HAL_PCD_EP_ClrStall>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f8cb 	bl	8009538 <USBD_Get_USB_Status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80093c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	da0b      	bge.n	80093e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093d2:	68f9      	ldr	r1, [r7, #12]
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	440b      	add	r3, r1
 80093de:	3312      	adds	r3, #18
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	e00b      	b.n	80093fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	440b      	add	r3, r1
 80093f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80093fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr

08009406 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009420:	78fa      	ldrb	r2, [r7, #3]
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f7f9 fd3c 	bl	8002ea2 <HAL_PCD_SetAddress>
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f881 	bl	8009538 <USBD_Get_USB_Status>
 8009436:	4603      	mov	r3, r0
 8009438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943a:	7bbb      	ldrb	r3, [r7, #14]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	461a      	mov	r2, r3
 8009450:	460b      	mov	r3, r1
 8009452:	72fb      	strb	r3, [r7, #11]
 8009454:	4613      	mov	r3, r2
 8009456:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009466:	893b      	ldrh	r3, [r7, #8]
 8009468:	7af9      	ldrb	r1, [r7, #11]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	f7f9 fe2a 	bl	80030c4 <HAL_PCD_EP_Transmit>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f85e 	bl	8009538 <USBD_Get_USB_Status>
 800947c:	4603      	mov	r3, r0
 800947e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009480:	7dbb      	ldrb	r3, [r7, #22]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	461a      	mov	r2, r3
 8009496:	460b      	mov	r3, r1
 8009498:	72fb      	strb	r3, [r7, #11]
 800949a:	4613      	mov	r3, r2
 800949c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80094ac:	893b      	ldrh	r3, [r7, #8]
 80094ae:	7af9      	ldrb	r1, [r7, #11]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f7f9 fdbf 	bl	8003034 <HAL_PCD_EP_Receive>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f83b 	bl	8009538 <USBD_Get_USB_Status>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094e2:	78fa      	ldrb	r2, [r7, #3]
 80094e4:	4611      	mov	r1, r2
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f9 fdd5 	bl	8003096 <HAL_PCD_EP_GetRxCount>
 80094ec:	4603      	mov	r3, r0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009500:	4b02      	ldr	r3, [pc, #8]	@ (800950c <USBD_static_malloc+0x14>)
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr
 800950c:	20001388 	.word	0x20001388

08009510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr

08009522 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr

08009538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d817      	bhi.n	800957c <USBD_Get_USB_Status+0x44>
 800954c:	a201      	add	r2, pc, #4	@ (adr r2, 8009554 <USBD_Get_USB_Status+0x1c>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	08009565 	.word	0x08009565
 8009558:	0800956b 	.word	0x0800956b
 800955c:	08009571 	.word	0x08009571
 8009560:	08009577 	.word	0x08009577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
    break;
 8009568:	e00b      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800956a:	2302      	movs	r3, #2
 800956c:	73fb      	strb	r3, [r7, #15]
    break;
 800956e:	e008      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009570:	2301      	movs	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]
    break;
 8009574:	e005      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009576:	2302      	movs	r3, #2
 8009578:	73fb      	strb	r3, [r7, #15]
    break;
 800957a:	e002      	b.n	8009582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800957c:	2302      	movs	r3, #2
 800957e:	73fb      	strb	r3, [r7, #15]
    break;
 8009580:	bf00      	nop
  }
  return usb_status;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop

08009590 <atof>:
 8009590:	2100      	movs	r1, #0
 8009592:	f000 bdf9 	b.w	800a188 <strtod>

08009596 <sulp>:
 8009596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959a:	460f      	mov	r7, r1
 800959c:	4690      	mov	r8, r2
 800959e:	f001 ff83 	bl	800b4a8 <__ulp>
 80095a2:	4604      	mov	r4, r0
 80095a4:	460d      	mov	r5, r1
 80095a6:	f1b8 0f00 	cmp.w	r8, #0
 80095aa:	d011      	beq.n	80095d0 <sulp+0x3a>
 80095ac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd0b      	ble.n	80095d0 <sulp+0x3a>
 80095b8:	2400      	movs	r4, #0
 80095ba:	051b      	lsls	r3, r3, #20
 80095bc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80095c0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80095c4:	4622      	mov	r2, r4
 80095c6:	462b      	mov	r3, r5
 80095c8:	f7f6 ff86 	bl	80004d8 <__aeabi_dmul>
 80095cc:	4604      	mov	r4, r0
 80095ce:	460d      	mov	r5, r1
 80095d0:	4620      	mov	r0, r4
 80095d2:	4629      	mov	r1, r5
 80095d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095d8 <_strtod_l>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	b09f      	sub	sp, #124	@ 0x7c
 80095de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80095e0:	2200      	movs	r2, #0
 80095e2:	460c      	mov	r4, r1
 80095e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80095e6:	f04f 0a00 	mov.w	sl, #0
 80095ea:	f04f 0b00 	mov.w	fp, #0
 80095ee:	460a      	mov	r2, r1
 80095f0:	9005      	str	r0, [sp, #20]
 80095f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095f4:	7811      	ldrb	r1, [r2, #0]
 80095f6:	292b      	cmp	r1, #43	@ 0x2b
 80095f8:	d048      	beq.n	800968c <_strtod_l+0xb4>
 80095fa:	d836      	bhi.n	800966a <_strtod_l+0x92>
 80095fc:	290d      	cmp	r1, #13
 80095fe:	d830      	bhi.n	8009662 <_strtod_l+0x8a>
 8009600:	2908      	cmp	r1, #8
 8009602:	d830      	bhi.n	8009666 <_strtod_l+0x8e>
 8009604:	2900      	cmp	r1, #0
 8009606:	d039      	beq.n	800967c <_strtod_l+0xa4>
 8009608:	2200      	movs	r2, #0
 800960a:	920e      	str	r2, [sp, #56]	@ 0x38
 800960c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800960e:	782a      	ldrb	r2, [r5, #0]
 8009610:	2a30      	cmp	r2, #48	@ 0x30
 8009612:	f040 80b0 	bne.w	8009776 <_strtod_l+0x19e>
 8009616:	786a      	ldrb	r2, [r5, #1]
 8009618:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800961c:	2a58      	cmp	r2, #88	@ 0x58
 800961e:	d16c      	bne.n	80096fa <_strtod_l+0x122>
 8009620:	9302      	str	r3, [sp, #8]
 8009622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009624:	4a8f      	ldr	r2, [pc, #572]	@ (8009864 <_strtod_l+0x28c>)
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	ab1a      	add	r3, sp, #104	@ 0x68
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	9805      	ldr	r0, [sp, #20]
 800962e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009630:	a919      	add	r1, sp, #100	@ 0x64
 8009632:	f001 f83b 	bl	800a6ac <__gethex>
 8009636:	f010 060f 	ands.w	r6, r0, #15
 800963a:	4604      	mov	r4, r0
 800963c:	d005      	beq.n	800964a <_strtod_l+0x72>
 800963e:	2e06      	cmp	r6, #6
 8009640:	d126      	bne.n	8009690 <_strtod_l+0xb8>
 8009642:	2300      	movs	r3, #0
 8009644:	3501      	adds	r5, #1
 8009646:	9519      	str	r5, [sp, #100]	@ 0x64
 8009648:	930e      	str	r3, [sp, #56]	@ 0x38
 800964a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 8582 	bne.w	800a156 <_strtod_l+0xb7e>
 8009652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009654:	b1bb      	cbz	r3, 8009686 <_strtod_l+0xae>
 8009656:	4650      	mov	r0, sl
 8009658:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800965c:	b01f      	add	sp, #124	@ 0x7c
 800965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009662:	2920      	cmp	r1, #32
 8009664:	d1d0      	bne.n	8009608 <_strtod_l+0x30>
 8009666:	3201      	adds	r2, #1
 8009668:	e7c3      	b.n	80095f2 <_strtod_l+0x1a>
 800966a:	292d      	cmp	r1, #45	@ 0x2d
 800966c:	d1cc      	bne.n	8009608 <_strtod_l+0x30>
 800966e:	2101      	movs	r1, #1
 8009670:	910e      	str	r1, [sp, #56]	@ 0x38
 8009672:	1c51      	adds	r1, r2, #1
 8009674:	9119      	str	r1, [sp, #100]	@ 0x64
 8009676:	7852      	ldrb	r2, [r2, #1]
 8009678:	2a00      	cmp	r2, #0
 800967a:	d1c7      	bne.n	800960c <_strtod_l+0x34>
 800967c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800967e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009680:	2b00      	cmp	r3, #0
 8009682:	f040 8566 	bne.w	800a152 <_strtod_l+0xb7a>
 8009686:	4650      	mov	r0, sl
 8009688:	4659      	mov	r1, fp
 800968a:	e7e7      	b.n	800965c <_strtod_l+0x84>
 800968c:	2100      	movs	r1, #0
 800968e:	e7ef      	b.n	8009670 <_strtod_l+0x98>
 8009690:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009692:	b13a      	cbz	r2, 80096a4 <_strtod_l+0xcc>
 8009694:	2135      	movs	r1, #53	@ 0x35
 8009696:	a81c      	add	r0, sp, #112	@ 0x70
 8009698:	f001 fff6 	bl	800b688 <__copybits>
 800969c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	f001 fbd6 	bl	800ae50 <_Bfree>
 80096a4:	3e01      	subs	r6, #1
 80096a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80096a8:	2e04      	cmp	r6, #4
 80096aa:	d806      	bhi.n	80096ba <_strtod_l+0xe2>
 80096ac:	e8df f006 	tbb	[pc, r6]
 80096b0:	201d0314 	.word	0x201d0314
 80096b4:	14          	.byte	0x14
 80096b5:	00          	.byte	0x00
 80096b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80096ba:	05e1      	lsls	r1, r4, #23
 80096bc:	bf48      	it	mi
 80096be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80096c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096c6:	0d1b      	lsrs	r3, r3, #20
 80096c8:	051b      	lsls	r3, r3, #20
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1bd      	bne.n	800964a <_strtod_l+0x72>
 80096ce:	f000 fefb 	bl	800a4c8 <__errno>
 80096d2:	2322      	movs	r3, #34	@ 0x22
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	e7b8      	b.n	800964a <_strtod_l+0x72>
 80096d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80096dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80096e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096e8:	e7e7      	b.n	80096ba <_strtod_l+0xe2>
 80096ea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009868 <_strtod_l+0x290>
 80096ee:	e7e4      	b.n	80096ba <_strtod_l+0xe2>
 80096f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80096f4:	f04f 3aff 	mov.w	sl, #4294967295
 80096f8:	e7df      	b.n	80096ba <_strtod_l+0xe2>
 80096fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009700:	785b      	ldrb	r3, [r3, #1]
 8009702:	2b30      	cmp	r3, #48	@ 0x30
 8009704:	d0f9      	beq.n	80096fa <_strtod_l+0x122>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d09f      	beq.n	800964a <_strtod_l+0x72>
 800970a:	2301      	movs	r3, #1
 800970c:	2700      	movs	r7, #0
 800970e:	220a      	movs	r2, #10
 8009710:	46b9      	mov	r9, r7
 8009712:	9308      	str	r3, [sp, #32]
 8009714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009716:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009718:	930c      	str	r3, [sp, #48]	@ 0x30
 800971a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800971c:	7805      	ldrb	r5, [r0, #0]
 800971e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009722:	b2d9      	uxtb	r1, r3
 8009724:	2909      	cmp	r1, #9
 8009726:	d928      	bls.n	800977a <_strtod_l+0x1a2>
 8009728:	2201      	movs	r2, #1
 800972a:	4950      	ldr	r1, [pc, #320]	@ (800986c <_strtod_l+0x294>)
 800972c:	f000 fe74 	bl	800a418 <strncmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	d032      	beq.n	800979a <_strtod_l+0x1c2>
 8009734:	2000      	movs	r0, #0
 8009736:	462a      	mov	r2, r5
 8009738:	4603      	mov	r3, r0
 800973a:	464d      	mov	r5, r9
 800973c:	900a      	str	r0, [sp, #40]	@ 0x28
 800973e:	2a65      	cmp	r2, #101	@ 0x65
 8009740:	d001      	beq.n	8009746 <_strtod_l+0x16e>
 8009742:	2a45      	cmp	r2, #69	@ 0x45
 8009744:	d114      	bne.n	8009770 <_strtod_l+0x198>
 8009746:	b91d      	cbnz	r5, 8009750 <_strtod_l+0x178>
 8009748:	9a08      	ldr	r2, [sp, #32]
 800974a:	4302      	orrs	r2, r0
 800974c:	d096      	beq.n	800967c <_strtod_l+0xa4>
 800974e:	2500      	movs	r5, #0
 8009750:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009752:	1c62      	adds	r2, r4, #1
 8009754:	9219      	str	r2, [sp, #100]	@ 0x64
 8009756:	7862      	ldrb	r2, [r4, #1]
 8009758:	2a2b      	cmp	r2, #43	@ 0x2b
 800975a:	d07a      	beq.n	8009852 <_strtod_l+0x27a>
 800975c:	2a2d      	cmp	r2, #45	@ 0x2d
 800975e:	d07e      	beq.n	800985e <_strtod_l+0x286>
 8009760:	f04f 0c00 	mov.w	ip, #0
 8009764:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009768:	2909      	cmp	r1, #9
 800976a:	f240 8085 	bls.w	8009878 <_strtod_l+0x2a0>
 800976e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009770:	f04f 0800 	mov.w	r8, #0
 8009774:	e0a5      	b.n	80098c2 <_strtod_l+0x2ea>
 8009776:	2300      	movs	r3, #0
 8009778:	e7c8      	b.n	800970c <_strtod_l+0x134>
 800977a:	f1b9 0f08 	cmp.w	r9, #8
 800977e:	bfd8      	it	le
 8009780:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009782:	f100 0001 	add.w	r0, r0, #1
 8009786:	bfd6      	itet	le
 8009788:	fb02 3301 	mlale	r3, r2, r1, r3
 800978c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009790:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009792:	f109 0901 	add.w	r9, r9, #1
 8009796:	9019      	str	r0, [sp, #100]	@ 0x64
 8009798:	e7bf      	b.n	800971a <_strtod_l+0x142>
 800979a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	9219      	str	r2, [sp, #100]	@ 0x64
 80097a0:	785a      	ldrb	r2, [r3, #1]
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	d03b      	beq.n	8009820 <_strtod_l+0x248>
 80097a8:	464d      	mov	r5, r9
 80097aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80097ac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d912      	bls.n	80097da <_strtod_l+0x202>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e7c2      	b.n	800973e <_strtod_l+0x166>
 80097b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097ba:	3001      	adds	r0, #1
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	9219      	str	r2, [sp, #100]	@ 0x64
 80097c0:	785a      	ldrb	r2, [r3, #1]
 80097c2:	2a30      	cmp	r2, #48	@ 0x30
 80097c4:	d0f8      	beq.n	80097b8 <_strtod_l+0x1e0>
 80097c6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80097ca:	2b08      	cmp	r3, #8
 80097cc:	f200 84c8 	bhi.w	800a160 <_strtod_l+0xb88>
 80097d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80097d2:	2000      	movs	r0, #0
 80097d4:	4605      	mov	r5, r0
 80097d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80097da:	3a30      	subs	r2, #48	@ 0x30
 80097dc:	f100 0301 	add.w	r3, r0, #1
 80097e0:	d018      	beq.n	8009814 <_strtod_l+0x23c>
 80097e2:	462e      	mov	r6, r5
 80097e4:	f04f 0e0a 	mov.w	lr, #10
 80097e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097ea:	4419      	add	r1, r3
 80097ec:	910a      	str	r1, [sp, #40]	@ 0x28
 80097ee:	1c71      	adds	r1, r6, #1
 80097f0:	eba1 0c05 	sub.w	ip, r1, r5
 80097f4:	4563      	cmp	r3, ip
 80097f6:	dc15      	bgt.n	8009824 <_strtod_l+0x24c>
 80097f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80097fc:	182b      	adds	r3, r5, r0
 80097fe:	2b08      	cmp	r3, #8
 8009800:	f105 0501 	add.w	r5, r5, #1
 8009804:	4405      	add	r5, r0
 8009806:	dc1a      	bgt.n	800983e <_strtod_l+0x266>
 8009808:	230a      	movs	r3, #10
 800980a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800980c:	fb03 2301 	mla	r3, r3, r1, r2
 8009810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009812:	2300      	movs	r3, #0
 8009814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009816:	4618      	mov	r0, r3
 8009818:	1c51      	adds	r1, r2, #1
 800981a:	9119      	str	r1, [sp, #100]	@ 0x64
 800981c:	7852      	ldrb	r2, [r2, #1]
 800981e:	e7c5      	b.n	80097ac <_strtod_l+0x1d4>
 8009820:	4648      	mov	r0, r9
 8009822:	e7ce      	b.n	80097c2 <_strtod_l+0x1ea>
 8009824:	2e08      	cmp	r6, #8
 8009826:	dc05      	bgt.n	8009834 <_strtod_l+0x25c>
 8009828:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800982a:	fb0e f606 	mul.w	r6, lr, r6
 800982e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009830:	460e      	mov	r6, r1
 8009832:	e7dc      	b.n	80097ee <_strtod_l+0x216>
 8009834:	2910      	cmp	r1, #16
 8009836:	bfd8      	it	le
 8009838:	fb0e f707 	mulle.w	r7, lr, r7
 800983c:	e7f8      	b.n	8009830 <_strtod_l+0x258>
 800983e:	2b0f      	cmp	r3, #15
 8009840:	bfdc      	itt	le
 8009842:	230a      	movle	r3, #10
 8009844:	fb03 2707 	mlale	r7, r3, r7, r2
 8009848:	e7e3      	b.n	8009812 <_strtod_l+0x23a>
 800984a:	2300      	movs	r3, #0
 800984c:	930a      	str	r3, [sp, #40]	@ 0x28
 800984e:	2301      	movs	r3, #1
 8009850:	e77a      	b.n	8009748 <_strtod_l+0x170>
 8009852:	f04f 0c00 	mov.w	ip, #0
 8009856:	1ca2      	adds	r2, r4, #2
 8009858:	9219      	str	r2, [sp, #100]	@ 0x64
 800985a:	78a2      	ldrb	r2, [r4, #2]
 800985c:	e782      	b.n	8009764 <_strtod_l+0x18c>
 800985e:	f04f 0c01 	mov.w	ip, #1
 8009862:	e7f8      	b.n	8009856 <_strtod_l+0x27e>
 8009864:	0800ca98 	.word	0x0800ca98
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	0800c91e 	.word	0x0800c91e
 8009870:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009872:	1c51      	adds	r1, r2, #1
 8009874:	9119      	str	r1, [sp, #100]	@ 0x64
 8009876:	7852      	ldrb	r2, [r2, #1]
 8009878:	2a30      	cmp	r2, #48	@ 0x30
 800987a:	d0f9      	beq.n	8009870 <_strtod_l+0x298>
 800987c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009880:	2908      	cmp	r1, #8
 8009882:	f63f af75 	bhi.w	8009770 <_strtod_l+0x198>
 8009886:	f04f 080a 	mov.w	r8, #10
 800988a:	3a30      	subs	r2, #48	@ 0x30
 800988c:	9209      	str	r2, [sp, #36]	@ 0x24
 800988e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009890:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009892:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009894:	1c56      	adds	r6, r2, #1
 8009896:	9619      	str	r6, [sp, #100]	@ 0x64
 8009898:	7852      	ldrb	r2, [r2, #1]
 800989a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800989e:	f1be 0f09 	cmp.w	lr, #9
 80098a2:	d939      	bls.n	8009918 <_strtod_l+0x340>
 80098a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80098aa:	1a76      	subs	r6, r6, r1
 80098ac:	2e08      	cmp	r6, #8
 80098ae:	dc03      	bgt.n	80098b8 <_strtod_l+0x2e0>
 80098b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098b2:	4588      	cmp	r8, r1
 80098b4:	bfa8      	it	ge
 80098b6:	4688      	movge	r8, r1
 80098b8:	f1bc 0f00 	cmp.w	ip, #0
 80098bc:	d001      	beq.n	80098c2 <_strtod_l+0x2ea>
 80098be:	f1c8 0800 	rsb	r8, r8, #0
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	d14e      	bne.n	8009964 <_strtod_l+0x38c>
 80098c6:	9908      	ldr	r1, [sp, #32]
 80098c8:	4308      	orrs	r0, r1
 80098ca:	f47f aebe 	bne.w	800964a <_strtod_l+0x72>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f aed4 	bne.w	800967c <_strtod_l+0xa4>
 80098d4:	2a69      	cmp	r2, #105	@ 0x69
 80098d6:	d028      	beq.n	800992a <_strtod_l+0x352>
 80098d8:	dc25      	bgt.n	8009926 <_strtod_l+0x34e>
 80098da:	2a49      	cmp	r2, #73	@ 0x49
 80098dc:	d025      	beq.n	800992a <_strtod_l+0x352>
 80098de:	2a4e      	cmp	r2, #78	@ 0x4e
 80098e0:	f47f aecc 	bne.w	800967c <_strtod_l+0xa4>
 80098e4:	4999      	ldr	r1, [pc, #612]	@ (8009b4c <_strtod_l+0x574>)
 80098e6:	a819      	add	r0, sp, #100	@ 0x64
 80098e8:	f001 f902 	bl	800aaf0 <__match>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f43f aec5 	beq.w	800967c <_strtod_l+0xa4>
 80098f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b28      	cmp	r3, #40	@ 0x28
 80098f8:	d12e      	bne.n	8009958 <_strtod_l+0x380>
 80098fa:	4995      	ldr	r1, [pc, #596]	@ (8009b50 <_strtod_l+0x578>)
 80098fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80098fe:	a819      	add	r0, sp, #100	@ 0x64
 8009900:	f001 f90a 	bl	800ab18 <__hexnan>
 8009904:	2805      	cmp	r0, #5
 8009906:	d127      	bne.n	8009958 <_strtod_l+0x380>
 8009908:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800990a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800990e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009912:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009916:	e698      	b.n	800964a <_strtod_l+0x72>
 8009918:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800991a:	fb08 2101 	mla	r1, r8, r1, r2
 800991e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009922:	9209      	str	r2, [sp, #36]	@ 0x24
 8009924:	e7b5      	b.n	8009892 <_strtod_l+0x2ba>
 8009926:	2a6e      	cmp	r2, #110	@ 0x6e
 8009928:	e7da      	b.n	80098e0 <_strtod_l+0x308>
 800992a:	498a      	ldr	r1, [pc, #552]	@ (8009b54 <_strtod_l+0x57c>)
 800992c:	a819      	add	r0, sp, #100	@ 0x64
 800992e:	f001 f8df 	bl	800aaf0 <__match>
 8009932:	2800      	cmp	r0, #0
 8009934:	f43f aea2 	beq.w	800967c <_strtod_l+0xa4>
 8009938:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800993a:	4987      	ldr	r1, [pc, #540]	@ (8009b58 <_strtod_l+0x580>)
 800993c:	3b01      	subs	r3, #1
 800993e:	a819      	add	r0, sp, #100	@ 0x64
 8009940:	9319      	str	r3, [sp, #100]	@ 0x64
 8009942:	f001 f8d5 	bl	800aaf0 <__match>
 8009946:	b910      	cbnz	r0, 800994e <_strtod_l+0x376>
 8009948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800994a:	3301      	adds	r3, #1
 800994c:	9319      	str	r3, [sp, #100]	@ 0x64
 800994e:	f04f 0a00 	mov.w	sl, #0
 8009952:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009b5c <_strtod_l+0x584>
 8009956:	e678      	b.n	800964a <_strtod_l+0x72>
 8009958:	4881      	ldr	r0, [pc, #516]	@ (8009b60 <_strtod_l+0x588>)
 800995a:	f000 fdf1 	bl	800a540 <nan>
 800995e:	4682      	mov	sl, r0
 8009960:	468b      	mov	fp, r1
 8009962:	e672      	b.n	800964a <_strtod_l+0x72>
 8009964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	bf08      	it	eq
 800996c:	46a9      	moveq	r9, r5
 800996e:	eba8 0303 	sub.w	r3, r8, r3
 8009972:	2d10      	cmp	r5, #16
 8009974:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009976:	462c      	mov	r4, r5
 8009978:	9309      	str	r3, [sp, #36]	@ 0x24
 800997a:	bfa8      	it	ge
 800997c:	2410      	movge	r4, #16
 800997e:	f7f6 fd31 	bl	80003e4 <__aeabi_ui2d>
 8009982:	2d09      	cmp	r5, #9
 8009984:	4682      	mov	sl, r0
 8009986:	468b      	mov	fp, r1
 8009988:	dc11      	bgt.n	80099ae <_strtod_l+0x3d6>
 800998a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	f43f ae5c 	beq.w	800964a <_strtod_l+0x72>
 8009992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009994:	dd76      	ble.n	8009a84 <_strtod_l+0x4ac>
 8009996:	2b16      	cmp	r3, #22
 8009998:	dc5d      	bgt.n	8009a56 <_strtod_l+0x47e>
 800999a:	4972      	ldr	r1, [pc, #456]	@ (8009b64 <_strtod_l+0x58c>)
 800999c:	4652      	mov	r2, sl
 800999e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099a2:	465b      	mov	r3, fp
 80099a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099a8:	f7f6 fd96 	bl	80004d8 <__aeabi_dmul>
 80099ac:	e7d7      	b.n	800995e <_strtod_l+0x386>
 80099ae:	4b6d      	ldr	r3, [pc, #436]	@ (8009b64 <_strtod_l+0x58c>)
 80099b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80099b8:	f7f6 fd8e 	bl	80004d8 <__aeabi_dmul>
 80099bc:	4682      	mov	sl, r0
 80099be:	4638      	mov	r0, r7
 80099c0:	468b      	mov	fp, r1
 80099c2:	f7f6 fd0f 	bl	80003e4 <__aeabi_ui2d>
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4650      	mov	r0, sl
 80099cc:	4659      	mov	r1, fp
 80099ce:	f7f6 fbcd 	bl	800016c <__adddf3>
 80099d2:	2d0f      	cmp	r5, #15
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	ddd7      	ble.n	800998a <_strtod_l+0x3b2>
 80099da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099dc:	1b2c      	subs	r4, r5, r4
 80099de:	441c      	add	r4, r3
 80099e0:	2c00      	cmp	r4, #0
 80099e2:	f340 8093 	ble.w	8009b0c <_strtod_l+0x534>
 80099e6:	f014 030f 	ands.w	r3, r4, #15
 80099ea:	d00a      	beq.n	8009a02 <_strtod_l+0x42a>
 80099ec:	495d      	ldr	r1, [pc, #372]	@ (8009b64 <_strtod_l+0x58c>)
 80099ee:	4652      	mov	r2, sl
 80099f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f8:	465b      	mov	r3, fp
 80099fa:	f7f6 fd6d 	bl	80004d8 <__aeabi_dmul>
 80099fe:	4682      	mov	sl, r0
 8009a00:	468b      	mov	fp, r1
 8009a02:	f034 040f 	bics.w	r4, r4, #15
 8009a06:	d073      	beq.n	8009af0 <_strtod_l+0x518>
 8009a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a0c:	dd49      	ble.n	8009aa2 <_strtod_l+0x4ca>
 8009a0e:	2400      	movs	r4, #0
 8009a10:	46a0      	mov	r8, r4
 8009a12:	46a1      	mov	r9, r4
 8009a14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a16:	2322      	movs	r3, #34	@ 0x22
 8009a18:	f04f 0a00 	mov.w	sl, #0
 8009a1c:	9a05      	ldr	r2, [sp, #20]
 8009a1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009b5c <_strtod_l+0x584>
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f43f ae0f 	beq.w	800964a <_strtod_l+0x72>
 8009a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a2e:	9805      	ldr	r0, [sp, #20]
 8009a30:	f001 fa0e 	bl	800ae50 <_Bfree>
 8009a34:	4649      	mov	r1, r9
 8009a36:	9805      	ldr	r0, [sp, #20]
 8009a38:	f001 fa0a 	bl	800ae50 <_Bfree>
 8009a3c:	4641      	mov	r1, r8
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	f001 fa06 	bl	800ae50 <_Bfree>
 8009a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a46:	9805      	ldr	r0, [sp, #20]
 8009a48:	f001 fa02 	bl	800ae50 <_Bfree>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	9805      	ldr	r0, [sp, #20]
 8009a50:	f001 f9fe 	bl	800ae50 <_Bfree>
 8009a54:	e5f9      	b.n	800964a <_strtod_l+0x72>
 8009a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	dbbc      	blt.n	80099da <_strtod_l+0x402>
 8009a60:	4c40      	ldr	r4, [pc, #256]	@ (8009b64 <_strtod_l+0x58c>)
 8009a62:	f1c5 050f 	rsb	r5, r5, #15
 8009a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	465b      	mov	r3, fp
 8009a72:	f7f6 fd31 	bl	80004d8 <__aeabi_dmul>
 8009a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a78:	1b5d      	subs	r5, r3, r5
 8009a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a82:	e791      	b.n	80099a8 <_strtod_l+0x3d0>
 8009a84:	3316      	adds	r3, #22
 8009a86:	dba8      	blt.n	80099da <_strtod_l+0x402>
 8009a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	eba3 0808 	sub.w	r8, r3, r8
 8009a90:	4b34      	ldr	r3, [pc, #208]	@ (8009b64 <_strtod_l+0x58c>)
 8009a92:	4659      	mov	r1, fp
 8009a94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a9c:	f7f6 fe46 	bl	800072c <__aeabi_ddiv>
 8009aa0:	e75d      	b.n	800995e <_strtod_l+0x386>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	461e      	mov	r6, r3
 8009aaa:	4f2f      	ldr	r7, [pc, #188]	@ (8009b68 <_strtod_l+0x590>)
 8009aac:	1124      	asrs	r4, r4, #4
 8009aae:	2c01      	cmp	r4, #1
 8009ab0:	dc21      	bgt.n	8009af6 <_strtod_l+0x51e>
 8009ab2:	b10b      	cbz	r3, 8009ab8 <_strtod_l+0x4e0>
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	468b      	mov	fp, r1
 8009ab8:	492b      	ldr	r1, [pc, #172]	@ (8009b68 <_strtod_l+0x590>)
 8009aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ac2:	4652      	mov	r2, sl
 8009ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac8:	465b      	mov	r3, fp
 8009aca:	f7f6 fd05 	bl	80004d8 <__aeabi_dmul>
 8009ace:	4b23      	ldr	r3, [pc, #140]	@ (8009b5c <_strtod_l+0x584>)
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	400b      	ands	r3, r1
 8009ad4:	4925      	ldr	r1, [pc, #148]	@ (8009b6c <_strtod_l+0x594>)
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	428b      	cmp	r3, r1
 8009ada:	d898      	bhi.n	8009a0e <_strtod_l+0x436>
 8009adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf86      	itte	hi
 8009ae4:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ae8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009b70 <_strtod_l+0x598>
 8009aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009af0:	2300      	movs	r3, #0
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	e076      	b.n	8009be4 <_strtod_l+0x60c>
 8009af6:	07e2      	lsls	r2, r4, #31
 8009af8:	d504      	bpl.n	8009b04 <_strtod_l+0x52c>
 8009afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009afe:	f7f6 fceb 	bl	80004d8 <__aeabi_dmul>
 8009b02:	2301      	movs	r3, #1
 8009b04:	3601      	adds	r6, #1
 8009b06:	1064      	asrs	r4, r4, #1
 8009b08:	3708      	adds	r7, #8
 8009b0a:	e7d0      	b.n	8009aae <_strtod_l+0x4d6>
 8009b0c:	d0f0      	beq.n	8009af0 <_strtod_l+0x518>
 8009b0e:	4264      	negs	r4, r4
 8009b10:	f014 020f 	ands.w	r2, r4, #15
 8009b14:	d00a      	beq.n	8009b2c <_strtod_l+0x554>
 8009b16:	4b13      	ldr	r3, [pc, #76]	@ (8009b64 <_strtod_l+0x58c>)
 8009b18:	4650      	mov	r0, sl
 8009b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b1e:	4659      	mov	r1, fp
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fe02 	bl	800072c <__aeabi_ddiv>
 8009b28:	4682      	mov	sl, r0
 8009b2a:	468b      	mov	fp, r1
 8009b2c:	1124      	asrs	r4, r4, #4
 8009b2e:	d0df      	beq.n	8009af0 <_strtod_l+0x518>
 8009b30:	2c1f      	cmp	r4, #31
 8009b32:	dd1f      	ble.n	8009b74 <_strtod_l+0x59c>
 8009b34:	2400      	movs	r4, #0
 8009b36:	46a0      	mov	r8, r4
 8009b38:	46a1      	mov	r9, r4
 8009b3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b3c:	2322      	movs	r3, #34	@ 0x22
 8009b3e:	9a05      	ldr	r2, [sp, #20]
 8009b40:	f04f 0a00 	mov.w	sl, #0
 8009b44:	f04f 0b00 	mov.w	fp, #0
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	e76b      	b.n	8009a24 <_strtod_l+0x44c>
 8009b4c:	0800c929 	.word	0x0800c929
 8009b50:	0800ca84 	.word	0x0800ca84
 8009b54:	0800c920 	.word	0x0800c920
 8009b58:	0800c923 	.word	0x0800c923
 8009b5c:	7ff00000 	.word	0x7ff00000
 8009b60:	0800ca83 	.word	0x0800ca83
 8009b64:	0800cb10 	.word	0x0800cb10
 8009b68:	0800cae8 	.word	0x0800cae8
 8009b6c:	7ca00000 	.word	0x7ca00000
 8009b70:	7fefffff 	.word	0x7fefffff
 8009b74:	f014 0310 	ands.w	r3, r4, #16
 8009b78:	bf18      	it	ne
 8009b7a:	236a      	movne	r3, #106	@ 0x6a
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	9308      	str	r3, [sp, #32]
 8009b80:	4659      	mov	r1, fp
 8009b82:	2300      	movs	r3, #0
 8009b84:	4e77      	ldr	r6, [pc, #476]	@ (8009d64 <_strtod_l+0x78c>)
 8009b86:	07e7      	lsls	r7, r4, #31
 8009b88:	d504      	bpl.n	8009b94 <_strtod_l+0x5bc>
 8009b8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b8e:	f7f6 fca3 	bl	80004d8 <__aeabi_dmul>
 8009b92:	2301      	movs	r3, #1
 8009b94:	1064      	asrs	r4, r4, #1
 8009b96:	f106 0608 	add.w	r6, r6, #8
 8009b9a:	d1f4      	bne.n	8009b86 <_strtod_l+0x5ae>
 8009b9c:	b10b      	cbz	r3, 8009ba2 <_strtod_l+0x5ca>
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	468b      	mov	fp, r1
 8009ba2:	9b08      	ldr	r3, [sp, #32]
 8009ba4:	b1b3      	cbz	r3, 8009bd4 <_strtod_l+0x5fc>
 8009ba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009baa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	4659      	mov	r1, fp
 8009bb2:	dd0f      	ble.n	8009bd4 <_strtod_l+0x5fc>
 8009bb4:	2b1f      	cmp	r3, #31
 8009bb6:	dd58      	ble.n	8009c6a <_strtod_l+0x692>
 8009bb8:	2b34      	cmp	r3, #52	@ 0x34
 8009bba:	bfd8      	it	le
 8009bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8009bc0:	f04f 0a00 	mov.w	sl, #0
 8009bc4:	bfcf      	iteee	gt
 8009bc6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009bca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009bce:	4093      	lslle	r3, r2
 8009bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	f7f6 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d1a7      	bne.n	8009b34 <_strtod_l+0x55c>
 8009be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be6:	464a      	mov	r2, r9
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bec:	462b      	mov	r3, r5
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	f001 f996 	bl	800af20 <__s2b>
 8009bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f43f af09 	beq.w	8009a0e <_strtod_l+0x436>
 8009bfc:	2400      	movs	r4, #0
 8009bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	eba3 0308 	sub.w	r3, r3, r8
 8009c08:	bfa8      	it	ge
 8009c0a:	2300      	movge	r3, #0
 8009c0c:	46a0      	mov	r8, r4
 8009c0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c10:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c14:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	6859      	ldr	r1, [r3, #4]
 8009c1c:	f001 f8d8 	bl	800add0 <_Balloc>
 8009c20:	4681      	mov	r9, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f aef7 	beq.w	8009a16 <_strtod_l+0x43e>
 8009c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c2a:	300c      	adds	r0, #12
 8009c2c:	691a      	ldr	r2, [r3, #16]
 8009c2e:	f103 010c 	add.w	r1, r3, #12
 8009c32:	3202      	adds	r2, #2
 8009c34:	0092      	lsls	r2, r2, #2
 8009c36:	f000 fc74 	bl	800a522 <memcpy>
 8009c3a:	ab1c      	add	r3, sp, #112	@ 0x70
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4652      	mov	r2, sl
 8009c44:	465b      	mov	r3, fp
 8009c46:	9805      	ldr	r0, [sp, #20]
 8009c48:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c4c:	f001 fc94 	bl	800b578 <__d2b>
 8009c50:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c52:	2800      	cmp	r0, #0
 8009c54:	f43f aedf 	beq.w	8009a16 <_strtod_l+0x43e>
 8009c58:	2101      	movs	r1, #1
 8009c5a:	9805      	ldr	r0, [sp, #20]
 8009c5c:	f001 f9f6 	bl	800b04c <__i2b>
 8009c60:	4680      	mov	r8, r0
 8009c62:	b948      	cbnz	r0, 8009c78 <_strtod_l+0x6a0>
 8009c64:	f04f 0800 	mov.w	r8, #0
 8009c68:	e6d5      	b.n	8009a16 <_strtod_l+0x43e>
 8009c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	ea03 0a0a 	and.w	sl, r3, sl
 8009c76:	e7ad      	b.n	8009bd4 <_strtod_l+0x5fc>
 8009c78:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c7a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	bfab      	itete	ge
 8009c80:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c82:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c84:	18ef      	addge	r7, r5, r3
 8009c86:	1b5e      	sublt	r6, r3, r5
 8009c88:	9b08      	ldr	r3, [sp, #32]
 8009c8a:	bfa8      	it	ge
 8009c8c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c8e:	eba5 0503 	sub.w	r5, r5, r3
 8009c92:	4415      	add	r5, r2
 8009c94:	4b34      	ldr	r3, [pc, #208]	@ (8009d68 <_strtod_l+0x790>)
 8009c96:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c9a:	bfb8      	it	lt
 8009c9c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ca4:	da50      	bge.n	8009d48 <_strtod_l+0x770>
 8009ca6:	1b5b      	subs	r3, r3, r5
 8009ca8:	2b1f      	cmp	r3, #31
 8009caa:	f04f 0101 	mov.w	r1, #1
 8009cae:	eba2 0203 	sub.w	r2, r2, r3
 8009cb2:	dc3d      	bgt.n	8009d30 <_strtod_l+0x758>
 8009cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cbe:	18bd      	adds	r5, r7, r2
 8009cc0:	9b08      	ldr	r3, [sp, #32]
 8009cc2:	42af      	cmp	r7, r5
 8009cc4:	4416      	add	r6, r2
 8009cc6:	441e      	add	r6, r3
 8009cc8:	463b      	mov	r3, r7
 8009cca:	bfa8      	it	ge
 8009ccc:	462b      	movge	r3, r5
 8009cce:	42b3      	cmp	r3, r6
 8009cd0:	bfa8      	it	ge
 8009cd2:	4633      	movge	r3, r6
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfc2      	ittt	gt
 8009cd8:	1aed      	subgt	r5, r5, r3
 8009cda:	1af6      	subgt	r6, r6, r3
 8009cdc:	1aff      	subgt	r7, r7, r3
 8009cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dd16      	ble.n	8009d12 <_strtod_l+0x73a>
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	9805      	ldr	r0, [sp, #20]
 8009cea:	f001 fa67 	bl	800b1bc <__pow5mult>
 8009cee:	4680      	mov	r8, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0b7      	beq.n	8009c64 <_strtod_l+0x68c>
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009cf8:	9805      	ldr	r0, [sp, #20]
 8009cfa:	f001 f9bd 	bl	800b078 <__multiply>
 8009cfe:	900a      	str	r0, [sp, #40]	@ 0x28
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f43f ae88 	beq.w	8009a16 <_strtod_l+0x43e>
 8009d06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d08:	9805      	ldr	r0, [sp, #20]
 8009d0a:	f001 f8a1 	bl	800ae50 <_Bfree>
 8009d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	dc1d      	bgt.n	8009d52 <_strtod_l+0x77a>
 8009d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dd27      	ble.n	8009d6c <_strtod_l+0x794>
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d20:	9805      	ldr	r0, [sp, #20]
 8009d22:	f001 fa4b 	bl	800b1bc <__pow5mult>
 8009d26:	4681      	mov	r9, r0
 8009d28:	bb00      	cbnz	r0, 8009d6c <_strtod_l+0x794>
 8009d2a:	f04f 0900 	mov.w	r9, #0
 8009d2e:	e672      	b.n	8009a16 <_strtod_l+0x43e>
 8009d30:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d34:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d38:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009d3c:	35e2      	adds	r5, #226	@ 0xe2
 8009d3e:	fa01 f305 	lsl.w	r3, r1, r5
 8009d42:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d44:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d46:	e7ba      	b.n	8009cbe <_strtod_l+0x6e6>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d50:	e7b5      	b.n	8009cbe <_strtod_l+0x6e6>
 8009d52:	462a      	mov	r2, r5
 8009d54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d56:	9805      	ldr	r0, [sp, #20]
 8009d58:	f001 fa8a 	bl	800b270 <__lshift>
 8009d5c:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d1d9      	bne.n	8009d16 <_strtod_l+0x73e>
 8009d62:	e658      	b.n	8009a16 <_strtod_l+0x43e>
 8009d64:	0800cab0 	.word	0x0800cab0
 8009d68:	fffffc02 	.word	0xfffffc02
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	dd07      	ble.n	8009d80 <_strtod_l+0x7a8>
 8009d70:	4649      	mov	r1, r9
 8009d72:	4632      	mov	r2, r6
 8009d74:	9805      	ldr	r0, [sp, #20]
 8009d76:	f001 fa7b 	bl	800b270 <__lshift>
 8009d7a:	4681      	mov	r9, r0
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d0d4      	beq.n	8009d2a <_strtod_l+0x752>
 8009d80:	2f00      	cmp	r7, #0
 8009d82:	dd08      	ble.n	8009d96 <_strtod_l+0x7be>
 8009d84:	4641      	mov	r1, r8
 8009d86:	463a      	mov	r2, r7
 8009d88:	9805      	ldr	r0, [sp, #20]
 8009d8a:	f001 fa71 	bl	800b270 <__lshift>
 8009d8e:	4680      	mov	r8, r0
 8009d90:	2800      	cmp	r0, #0
 8009d92:	f43f ae40 	beq.w	8009a16 <_strtod_l+0x43e>
 8009d96:	464a      	mov	r2, r9
 8009d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	f001 faf0 	bl	800b380 <__mdiff>
 8009da0:	4604      	mov	r4, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f43f ae37 	beq.w	8009a16 <_strtod_l+0x43e>
 8009da8:	68c3      	ldr	r3, [r0, #12]
 8009daa:	4641      	mov	r1, r8
 8009dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dae:	2300      	movs	r3, #0
 8009db0:	60c3      	str	r3, [r0, #12]
 8009db2:	f001 fac9 	bl	800b348 <__mcmp>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	da3d      	bge.n	8009e36 <_strtod_l+0x85e>
 8009dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dbc:	ea53 030a 	orrs.w	r3, r3, sl
 8009dc0:	d163      	bne.n	8009e8a <_strtod_l+0x8b2>
 8009dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d15f      	bne.n	8009e8a <_strtod_l+0x8b2>
 8009dca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dce:	0d1b      	lsrs	r3, r3, #20
 8009dd0:	051b      	lsls	r3, r3, #20
 8009dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009dd6:	d958      	bls.n	8009e8a <_strtod_l+0x8b2>
 8009dd8:	6963      	ldr	r3, [r4, #20]
 8009dda:	b913      	cbnz	r3, 8009de2 <_strtod_l+0x80a>
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	dd53      	ble.n	8009e8a <_strtod_l+0x8b2>
 8009de2:	4621      	mov	r1, r4
 8009de4:	2201      	movs	r2, #1
 8009de6:	9805      	ldr	r0, [sp, #20]
 8009de8:	f001 fa42 	bl	800b270 <__lshift>
 8009dec:	4641      	mov	r1, r8
 8009dee:	4604      	mov	r4, r0
 8009df0:	f001 faaa 	bl	800b348 <__mcmp>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dd48      	ble.n	8009e8a <_strtod_l+0x8b2>
 8009df8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dfc:	9a08      	ldr	r2, [sp, #32]
 8009dfe:	0d1b      	lsrs	r3, r3, #20
 8009e00:	051b      	lsls	r3, r3, #20
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	d062      	beq.n	8009ecc <_strtod_l+0x8f4>
 8009e06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e0a:	d85f      	bhi.n	8009ecc <_strtod_l+0x8f4>
 8009e0c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e10:	f67f ae94 	bls.w	8009b3c <_strtod_l+0x564>
 8009e14:	4650      	mov	r0, sl
 8009e16:	4659      	mov	r1, fp
 8009e18:	4ba3      	ldr	r3, [pc, #652]	@ (800a0a8 <_strtod_l+0xad0>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fb5c 	bl	80004d8 <__aeabi_dmul>
 8009e20:	4ba2      	ldr	r3, [pc, #648]	@ (800a0ac <_strtod_l+0xad4>)
 8009e22:	4682      	mov	sl, r0
 8009e24:	400b      	ands	r3, r1
 8009e26:	468b      	mov	fp, r1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f adff 	bne.w	8009a2c <_strtod_l+0x454>
 8009e2e:	2322      	movs	r3, #34	@ 0x22
 8009e30:	9a05      	ldr	r2, [sp, #20]
 8009e32:	6013      	str	r3, [r2, #0]
 8009e34:	e5fa      	b.n	8009a2c <_strtod_l+0x454>
 8009e36:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009e3a:	d165      	bne.n	8009f08 <_strtod_l+0x930>
 8009e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e42:	b35a      	cbz	r2, 8009e9c <_strtod_l+0x8c4>
 8009e44:	4a9a      	ldr	r2, [pc, #616]	@ (800a0b0 <_strtod_l+0xad8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d12b      	bne.n	8009ea2 <_strtod_l+0x8ca>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	4651      	mov	r1, sl
 8009e4e:	b303      	cbz	r3, 8009e92 <_strtod_l+0x8ba>
 8009e50:	465a      	mov	r2, fp
 8009e52:	4b96      	ldr	r3, [pc, #600]	@ (800a0ac <_strtod_l+0xad4>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5e:	d81b      	bhi.n	8009e98 <_strtod_l+0x8c0>
 8009e60:	0d1b      	lsrs	r3, r3, #20
 8009e62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	d119      	bne.n	8009ea2 <_strtod_l+0x8ca>
 8009e6e:	4b91      	ldr	r3, [pc, #580]	@ (800a0b4 <_strtod_l+0xadc>)
 8009e70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d102      	bne.n	8009e7c <_strtod_l+0x8a4>
 8009e76:	3101      	adds	r1, #1
 8009e78:	f43f adcd 	beq.w	8009a16 <_strtod_l+0x43e>
 8009e7c:	f04f 0a00 	mov.w	sl, #0
 8009e80:	4b8a      	ldr	r3, [pc, #552]	@ (800a0ac <_strtod_l+0xad4>)
 8009e82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e84:	401a      	ands	r2, r3
 8009e86:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e8a:	9b08      	ldr	r3, [sp, #32]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1c1      	bne.n	8009e14 <_strtod_l+0x83c>
 8009e90:	e5cc      	b.n	8009a2c <_strtod_l+0x454>
 8009e92:	f04f 33ff 	mov.w	r3, #4294967295
 8009e96:	e7e8      	b.n	8009e6a <_strtod_l+0x892>
 8009e98:	4613      	mov	r3, r2
 8009e9a:	e7e6      	b.n	8009e6a <_strtod_l+0x892>
 8009e9c:	ea53 030a 	orrs.w	r3, r3, sl
 8009ea0:	d0aa      	beq.n	8009df8 <_strtod_l+0x820>
 8009ea2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ea4:	b1db      	cbz	r3, 8009ede <_strtod_l+0x906>
 8009ea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ea8:	4213      	tst	r3, r2
 8009eaa:	d0ee      	beq.n	8009e8a <_strtod_l+0x8b2>
 8009eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eae:	4650      	mov	r0, sl
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	9a08      	ldr	r2, [sp, #32]
 8009eb4:	b1bb      	cbz	r3, 8009ee6 <_strtod_l+0x90e>
 8009eb6:	f7ff fb6e 	bl	8009596 <sulp>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ec2:	f7f6 f953 	bl	800016c <__adddf3>
 8009ec6:	4682      	mov	sl, r0
 8009ec8:	468b      	mov	fp, r1
 8009eca:	e7de      	b.n	8009e8a <_strtod_l+0x8b2>
 8009ecc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ed0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009ed4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ed8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009edc:	e7d5      	b.n	8009e8a <_strtod_l+0x8b2>
 8009ede:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ee0:	ea13 0f0a 	tst.w	r3, sl
 8009ee4:	e7e1      	b.n	8009eaa <_strtod_l+0x8d2>
 8009ee6:	f7ff fb56 	bl	8009596 <sulp>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ef2:	f7f6 f939 	bl	8000168 <__aeabi_dsub>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4682      	mov	sl, r0
 8009efc:	468b      	mov	fp, r1
 8009efe:	f7f6 fd53 	bl	80009a8 <__aeabi_dcmpeq>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0c1      	beq.n	8009e8a <_strtod_l+0x8b2>
 8009f06:	e619      	b.n	8009b3c <_strtod_l+0x564>
 8009f08:	4641      	mov	r1, r8
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f001 fb8c 	bl	800b628 <__ratio>
 8009f10:	2200      	movs	r2, #0
 8009f12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	f7f6 fd59 	bl	80009d0 <__aeabi_dcmple>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d06d      	beq.n	8009ffe <_strtod_l+0xa26>
 8009f22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d178      	bne.n	800a01a <_strtod_l+0xa42>
 8009f28:	f1ba 0f00 	cmp.w	sl, #0
 8009f2c:	d156      	bne.n	8009fdc <_strtod_l+0xa04>
 8009f2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d158      	bne.n	8009fea <_strtod_l+0xa12>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	4b5e      	ldr	r3, [pc, #376]	@ (800a0b8 <_strtod_l+0xae0>)
 8009f40:	f7f6 fd3c 	bl	80009bc <__aeabi_dcmplt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d157      	bne.n	8009ff8 <_strtod_l+0xa20>
 8009f48:	4630      	mov	r0, r6
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4b5b      	ldr	r3, [pc, #364]	@ (800a0bc <_strtod_l+0xae4>)
 8009f50:	f7f6 fac2 	bl	80004d8 <__aeabi_dmul>
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f5c:	9606      	str	r6, [sp, #24]
 8009f5e:	9307      	str	r3, [sp, #28]
 8009f60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f64:	4d51      	ldr	r5, [pc, #324]	@ (800a0ac <_strtod_l+0xad4>)
 8009f66:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f6c:	401d      	ands	r5, r3
 8009f6e:	4b54      	ldr	r3, [pc, #336]	@ (800a0c0 <_strtod_l+0xae8>)
 8009f70:	429d      	cmp	r5, r3
 8009f72:	f040 80ab 	bne.w	800a0cc <_strtod_l+0xaf4>
 8009f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f78:	4650      	mov	r0, sl
 8009f7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f001 fa92 	bl	800b4a8 <__ulp>
 8009f84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f88:	f7f6 faa6 	bl	80004d8 <__aeabi_dmul>
 8009f8c:	4652      	mov	r2, sl
 8009f8e:	465b      	mov	r3, fp
 8009f90:	f7f6 f8ec 	bl	800016c <__adddf3>
 8009f94:	460b      	mov	r3, r1
 8009f96:	4945      	ldr	r1, [pc, #276]	@ (800a0ac <_strtod_l+0xad4>)
 8009f98:	4a4a      	ldr	r2, [pc, #296]	@ (800a0c4 <_strtod_l+0xaec>)
 8009f9a:	4019      	ands	r1, r3
 8009f9c:	4291      	cmp	r1, r2
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	d942      	bls.n	800a028 <_strtod_l+0xa50>
 8009fa2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fa4:	4b43      	ldr	r3, [pc, #268]	@ (800a0b4 <_strtod_l+0xadc>)
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d103      	bne.n	8009fb2 <_strtod_l+0x9da>
 8009faa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fac:	3301      	adds	r3, #1
 8009fae:	f43f ad32 	beq.w	8009a16 <_strtod_l+0x43e>
 8009fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8009fb6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a0b4 <_strtod_l+0xadc>
 8009fba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	f000 ff47 	bl	800ae50 <_Bfree>
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	9805      	ldr	r0, [sp, #20]
 8009fc6:	f000 ff43 	bl	800ae50 <_Bfree>
 8009fca:	4641      	mov	r1, r8
 8009fcc:	9805      	ldr	r0, [sp, #20]
 8009fce:	f000 ff3f 	bl	800ae50 <_Bfree>
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	9805      	ldr	r0, [sp, #20]
 8009fd6:	f000 ff3b 	bl	800ae50 <_Bfree>
 8009fda:	e61c      	b.n	8009c16 <_strtod_l+0x63e>
 8009fdc:	f1ba 0f01 	cmp.w	sl, #1
 8009fe0:	d103      	bne.n	8009fea <_strtod_l+0xa12>
 8009fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f43f ada9 	beq.w	8009b3c <_strtod_l+0x564>
 8009fea:	2200      	movs	r2, #0
 8009fec:	4b36      	ldr	r3, [pc, #216]	@ (800a0c8 <_strtod_l+0xaf0>)
 8009fee:	2600      	movs	r6, #0
 8009ff0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ff4:	4f30      	ldr	r7, [pc, #192]	@ (800a0b8 <_strtod_l+0xae0>)
 8009ff6:	e7b3      	b.n	8009f60 <_strtod_l+0x988>
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	4f30      	ldr	r7, [pc, #192]	@ (800a0bc <_strtod_l+0xae4>)
 8009ffc:	e7ac      	b.n	8009f58 <_strtod_l+0x980>
 8009ffe:	4630      	mov	r0, r6
 800a000:	4639      	mov	r1, r7
 800a002:	4b2e      	ldr	r3, [pc, #184]	@ (800a0bc <_strtod_l+0xae4>)
 800a004:	2200      	movs	r2, #0
 800a006:	f7f6 fa67 	bl	80004d8 <__aeabi_dmul>
 800a00a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0a1      	beq.n	8009f58 <_strtod_l+0x980>
 800a014:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a018:	e7a2      	b.n	8009f60 <_strtod_l+0x988>
 800a01a:	2200      	movs	r2, #0
 800a01c:	4b26      	ldr	r3, [pc, #152]	@ (800a0b8 <_strtod_l+0xae0>)
 800a01e:	4616      	mov	r6, r2
 800a020:	461f      	mov	r7, r3
 800a022:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a026:	e79b      	b.n	8009f60 <_strtod_l+0x988>
 800a028:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a02c:	9b08      	ldr	r3, [sp, #32]
 800a02e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1c1      	bne.n	8009fba <_strtod_l+0x9e2>
 800a036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a03a:	0d1b      	lsrs	r3, r3, #20
 800a03c:	051b      	lsls	r3, r3, #20
 800a03e:	429d      	cmp	r5, r3
 800a040:	d1bb      	bne.n	8009fba <_strtod_l+0x9e2>
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 ffeb 	bl	8001020 <__aeabi_d2lz>
 800a04a:	f7f6 fa17 	bl	800047c <__aeabi_l2d>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f887 	bl	8000168 <__aeabi_dsub>
 800a05a:	460b      	mov	r3, r1
 800a05c:	4602      	mov	r2, r0
 800a05e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a062:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a068:	ea46 060a 	orr.w	r6, r6, sl
 800a06c:	431e      	orrs	r6, r3
 800a06e:	d06a      	beq.n	800a146 <_strtod_l+0xb6e>
 800a070:	a309      	add	r3, pc, #36	@ (adr r3, 800a098 <_strtod_l+0xac0>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 fca1 	bl	80009bc <__aeabi_dcmplt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f47f acd6 	bne.w	8009a2c <_strtod_l+0x454>
 800a080:	a307      	add	r3, pc, #28	@ (adr r3, 800a0a0 <_strtod_l+0xac8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a08a:	f7f6 fcb5 	bl	80009f8 <__aeabi_dcmpgt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d093      	beq.n	8009fba <_strtod_l+0x9e2>
 800a092:	e4cb      	b.n	8009a2c <_strtod_l+0x454>
 800a094:	f3af 8000 	nop.w
 800a098:	94a03595 	.word	0x94a03595
 800a09c:	3fdfffff 	.word	0x3fdfffff
 800a0a0:	35afe535 	.word	0x35afe535
 800a0a4:	3fe00000 	.word	0x3fe00000
 800a0a8:	39500000 	.word	0x39500000
 800a0ac:	7ff00000 	.word	0x7ff00000
 800a0b0:	000fffff 	.word	0x000fffff
 800a0b4:	7fefffff 	.word	0x7fefffff
 800a0b8:	3ff00000 	.word	0x3ff00000
 800a0bc:	3fe00000 	.word	0x3fe00000
 800a0c0:	7fe00000 	.word	0x7fe00000
 800a0c4:	7c9fffff 	.word	0x7c9fffff
 800a0c8:	bff00000 	.word	0xbff00000
 800a0cc:	9b08      	ldr	r3, [sp, #32]
 800a0ce:	b323      	cbz	r3, 800a11a <_strtod_l+0xb42>
 800a0d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a0d4:	d821      	bhi.n	800a11a <_strtod_l+0xb42>
 800a0d6:	a328      	add	r3, pc, #160	@ (adr r3, 800a178 <_strtod_l+0xba0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 fc76 	bl	80009d0 <__aeabi_dcmple>
 800a0e4:	b1a0      	cbz	r0, 800a110 <_strtod_l+0xb38>
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f7f6 fc8f 	bl	8000a0c <__aeabi_d2uiz>
 800a0ee:	2801      	cmp	r0, #1
 800a0f0:	bf38      	it	cc
 800a0f2:	2001      	movcc	r0, #1
 800a0f4:	f7f6 f976 	bl	80003e4 <__aeabi_ui2d>
 800a0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460f      	mov	r7, r1
 800a0fe:	b9fb      	cbnz	r3, 800a140 <_strtod_l+0xb68>
 800a100:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a104:	9014      	str	r0, [sp, #80]	@ 0x50
 800a106:	9315      	str	r3, [sp, #84]	@ 0x54
 800a108:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a10c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a110:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a112:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a116:	1b5b      	subs	r3, r3, r5
 800a118:	9311      	str	r3, [sp, #68]	@ 0x44
 800a11a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a11e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a122:	f001 f9c1 	bl	800b4a8 <__ulp>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	4650      	mov	r0, sl
 800a12c:	4659      	mov	r1, fp
 800a12e:	f7f6 f9d3 	bl	80004d8 <__aeabi_dmul>
 800a132:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a136:	f7f6 f819 	bl	800016c <__adddf3>
 800a13a:	4682      	mov	sl, r0
 800a13c:	468b      	mov	fp, r1
 800a13e:	e775      	b.n	800a02c <_strtod_l+0xa54>
 800a140:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a144:	e7e0      	b.n	800a108 <_strtod_l+0xb30>
 800a146:	a30e      	add	r3, pc, #56	@ (adr r3, 800a180 <_strtod_l+0xba8>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 fc36 	bl	80009bc <__aeabi_dcmplt>
 800a150:	e79d      	b.n	800a08e <_strtod_l+0xab6>
 800a152:	2300      	movs	r3, #0
 800a154:	930e      	str	r3, [sp, #56]	@ 0x38
 800a156:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a158:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	f7ff ba79 	b.w	8009652 <_strtod_l+0x7a>
 800a160:	2a65      	cmp	r2, #101	@ 0x65
 800a162:	f43f ab72 	beq.w	800984a <_strtod_l+0x272>
 800a166:	2a45      	cmp	r2, #69	@ 0x45
 800a168:	f43f ab6f 	beq.w	800984a <_strtod_l+0x272>
 800a16c:	2301      	movs	r3, #1
 800a16e:	f7ff bbaa 	b.w	80098c6 <_strtod_l+0x2ee>
 800a172:	bf00      	nop
 800a174:	f3af 8000 	nop.w
 800a178:	ffc00000 	.word	0xffc00000
 800a17c:	41dfffff 	.word	0x41dfffff
 800a180:	94a03595 	.word	0x94a03595
 800a184:	3fcfffff 	.word	0x3fcfffff

0800a188 <strtod>:
 800a188:	460a      	mov	r2, r1
 800a18a:	4601      	mov	r1, r0
 800a18c:	4802      	ldr	r0, [pc, #8]	@ (800a198 <strtod+0x10>)
 800a18e:	4b03      	ldr	r3, [pc, #12]	@ (800a19c <strtod+0x14>)
 800a190:	6800      	ldr	r0, [r0, #0]
 800a192:	f7ff ba21 	b.w	80095d8 <_strtod_l>
 800a196:	bf00      	nop
 800a198:	200002f4 	.word	0x200002f4
 800a19c:	20000188 	.word	0x20000188

0800a1a0 <std>:
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ae:	6083      	str	r3, [r0, #8]
 800a1b0:	8181      	strh	r1, [r0, #12]
 800a1b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1b4:	81c2      	strh	r2, [r0, #14]
 800a1b6:	6183      	str	r3, [r0, #24]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	2208      	movs	r2, #8
 800a1bc:	305c      	adds	r0, #92	@ 0x5c
 800a1be:	f000 f916 	bl	800a3ee <memset>
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f8 <std+0x58>)
 800a1c4:	6224      	str	r4, [r4, #32]
 800a1c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <std+0x5c>)
 800a1ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <std+0x60>)
 800a1ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <std+0x64>)
 800a1d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <std+0x68>)
 800a1d6:	429c      	cmp	r4, r3
 800a1d8:	d006      	beq.n	800a1e8 <std+0x48>
 800a1da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1de:	4294      	cmp	r4, r2
 800a1e0:	d002      	beq.n	800a1e8 <std+0x48>
 800a1e2:	33d0      	adds	r3, #208	@ 0xd0
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	d105      	bne.n	800a1f4 <std+0x54>
 800a1e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f0:	f000 b994 	b.w	800a51c <__retarget_lock_init_recursive>
 800a1f4:	bd10      	pop	{r4, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0800a369 	.word	0x0800a369
 800a1fc:	0800a38b 	.word	0x0800a38b
 800a200:	0800a3c3 	.word	0x0800a3c3
 800a204:	0800a3e7 	.word	0x0800a3e7
 800a208:	200015a8 	.word	0x200015a8

0800a20c <stdio_exit_handler>:
 800a20c:	4a02      	ldr	r2, [pc, #8]	@ (800a218 <stdio_exit_handler+0xc>)
 800a20e:	4903      	ldr	r1, [pc, #12]	@ (800a21c <stdio_exit_handler+0x10>)
 800a210:	4803      	ldr	r0, [pc, #12]	@ (800a220 <stdio_exit_handler+0x14>)
 800a212:	f000 b869 	b.w	800a2e8 <_fwalk_sglue>
 800a216:	bf00      	nop
 800a218:	2000017c 	.word	0x2000017c
 800a21c:	0800bdf9 	.word	0x0800bdf9
 800a220:	200002f8 	.word	0x200002f8

0800a224 <cleanup_stdio>:
 800a224:	6841      	ldr	r1, [r0, #4]
 800a226:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <cleanup_stdio+0x34>)
 800a228:	b510      	push	{r4, lr}
 800a22a:	4299      	cmp	r1, r3
 800a22c:	4604      	mov	r4, r0
 800a22e:	d001      	beq.n	800a234 <cleanup_stdio+0x10>
 800a230:	f001 fde2 	bl	800bdf8 <_fflush_r>
 800a234:	68a1      	ldr	r1, [r4, #8]
 800a236:	4b09      	ldr	r3, [pc, #36]	@ (800a25c <cleanup_stdio+0x38>)
 800a238:	4299      	cmp	r1, r3
 800a23a:	d002      	beq.n	800a242 <cleanup_stdio+0x1e>
 800a23c:	4620      	mov	r0, r4
 800a23e:	f001 fddb 	bl	800bdf8 <_fflush_r>
 800a242:	68e1      	ldr	r1, [r4, #12]
 800a244:	4b06      	ldr	r3, [pc, #24]	@ (800a260 <cleanup_stdio+0x3c>)
 800a246:	4299      	cmp	r1, r3
 800a248:	d004      	beq.n	800a254 <cleanup_stdio+0x30>
 800a24a:	4620      	mov	r0, r4
 800a24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a250:	f001 bdd2 	b.w	800bdf8 <_fflush_r>
 800a254:	bd10      	pop	{r4, pc}
 800a256:	bf00      	nop
 800a258:	200015a8 	.word	0x200015a8
 800a25c:	20001610 	.word	0x20001610
 800a260:	20001678 	.word	0x20001678

0800a264 <global_stdio_init.part.0>:
 800a264:	b510      	push	{r4, lr}
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <global_stdio_init.part.0+0x30>)
 800a268:	4c0b      	ldr	r4, [pc, #44]	@ (800a298 <global_stdio_init.part.0+0x34>)
 800a26a:	4a0c      	ldr	r2, [pc, #48]	@ (800a29c <global_stdio_init.part.0+0x38>)
 800a26c:	4620      	mov	r0, r4
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	2104      	movs	r1, #4
 800a272:	2200      	movs	r2, #0
 800a274:	f7ff ff94 	bl	800a1a0 <std>
 800a278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a27c:	2201      	movs	r2, #1
 800a27e:	2109      	movs	r1, #9
 800a280:	f7ff ff8e 	bl	800a1a0 <std>
 800a284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a288:	2202      	movs	r2, #2
 800a28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28e:	2112      	movs	r1, #18
 800a290:	f7ff bf86 	b.w	800a1a0 <std>
 800a294:	200016e0 	.word	0x200016e0
 800a298:	200015a8 	.word	0x200015a8
 800a29c:	0800a20d 	.word	0x0800a20d

0800a2a0 <__sfp_lock_acquire>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	@ (800a2a8 <__sfp_lock_acquire+0x8>)
 800a2a2:	f000 b93c 	b.w	800a51e <__retarget_lock_acquire_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200016e9 	.word	0x200016e9

0800a2ac <__sfp_lock_release>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	@ (800a2b4 <__sfp_lock_release+0x8>)
 800a2ae:	f000 b937 	b.w	800a520 <__retarget_lock_release_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	200016e9 	.word	0x200016e9

0800a2b8 <__sinit>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	f7ff fff0 	bl	800a2a0 <__sfp_lock_acquire>
 800a2c0:	6a23      	ldr	r3, [r4, #32]
 800a2c2:	b11b      	cbz	r3, 800a2cc <__sinit+0x14>
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f7ff bff0 	b.w	800a2ac <__sfp_lock_release>
 800a2cc:	4b04      	ldr	r3, [pc, #16]	@ (800a2e0 <__sinit+0x28>)
 800a2ce:	6223      	str	r3, [r4, #32]
 800a2d0:	4b04      	ldr	r3, [pc, #16]	@ (800a2e4 <__sinit+0x2c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1f5      	bne.n	800a2c4 <__sinit+0xc>
 800a2d8:	f7ff ffc4 	bl	800a264 <global_stdio_init.part.0>
 800a2dc:	e7f2      	b.n	800a2c4 <__sinit+0xc>
 800a2de:	bf00      	nop
 800a2e0:	0800a225 	.word	0x0800a225
 800a2e4:	200016e0 	.word	0x200016e0

0800a2e8 <_fwalk_sglue>:
 800a2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	4688      	mov	r8, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	2600      	movs	r6, #0
 800a2f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a2fc:	d505      	bpl.n	800a30a <_fwalk_sglue+0x22>
 800a2fe:	6824      	ldr	r4, [r4, #0]
 800a300:	2c00      	cmp	r4, #0
 800a302:	d1f7      	bne.n	800a2f4 <_fwalk_sglue+0xc>
 800a304:	4630      	mov	r0, r6
 800a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d907      	bls.n	800a320 <_fwalk_sglue+0x38>
 800a310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a314:	3301      	adds	r3, #1
 800a316:	d003      	beq.n	800a320 <_fwalk_sglue+0x38>
 800a318:	4629      	mov	r1, r5
 800a31a:	4638      	mov	r0, r7
 800a31c:	47c0      	blx	r8
 800a31e:	4306      	orrs	r6, r0
 800a320:	3568      	adds	r5, #104	@ 0x68
 800a322:	e7e9      	b.n	800a2f8 <_fwalk_sglue+0x10>

0800a324 <siprintf>:
 800a324:	b40e      	push	{r1, r2, r3}
 800a326:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a32a:	b510      	push	{r4, lr}
 800a32c:	2400      	movs	r4, #0
 800a32e:	b09d      	sub	sp, #116	@ 0x74
 800a330:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a332:	9002      	str	r0, [sp, #8]
 800a334:	9006      	str	r0, [sp, #24]
 800a336:	9107      	str	r1, [sp, #28]
 800a338:	9104      	str	r1, [sp, #16]
 800a33a:	4809      	ldr	r0, [pc, #36]	@ (800a360 <siprintf+0x3c>)
 800a33c:	4909      	ldr	r1, [pc, #36]	@ (800a364 <siprintf+0x40>)
 800a33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a342:	9105      	str	r1, [sp, #20]
 800a344:	6800      	ldr	r0, [r0, #0]
 800a346:	a902      	add	r1, sp, #8
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a34c:	f001 fa48 	bl	800b7e0 <_svfiprintf_r>
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	701c      	strb	r4, [r3, #0]
 800a354:	b01d      	add	sp, #116	@ 0x74
 800a356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35a:	b003      	add	sp, #12
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	200002f4 	.word	0x200002f4
 800a364:	ffff0208 	.word	0xffff0208

0800a368 <__sread>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	460c      	mov	r4, r1
 800a36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a370:	f000 f886 	bl	800a480 <_read_r>
 800a374:	2800      	cmp	r0, #0
 800a376:	bfab      	itete	ge
 800a378:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a37a:	89a3      	ldrhlt	r3, [r4, #12]
 800a37c:	181b      	addge	r3, r3, r0
 800a37e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a382:	bfac      	ite	ge
 800a384:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a386:	81a3      	strhlt	r3, [r4, #12]
 800a388:	bd10      	pop	{r4, pc}

0800a38a <__swrite>:
 800a38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38e:	461f      	mov	r7, r3
 800a390:	898b      	ldrh	r3, [r1, #12]
 800a392:	4605      	mov	r5, r0
 800a394:	05db      	lsls	r3, r3, #23
 800a396:	460c      	mov	r4, r1
 800a398:	4616      	mov	r6, r2
 800a39a:	d505      	bpl.n	800a3a8 <__swrite+0x1e>
 800a39c:	2302      	movs	r3, #2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	f000 f85a 	bl	800a45c <_lseek_r>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	463b      	mov	r3, r7
 800a3b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3be:	f000 b871 	b.w	800a4a4 <_write_r>

0800a3c2 <__sseek>:
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ca:	f000 f847 	bl	800a45c <_lseek_r>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	bf15      	itete	ne
 800a3d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3de:	81a3      	strheq	r3, [r4, #12]
 800a3e0:	bf18      	it	ne
 800a3e2:	81a3      	strhne	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__sclose>:
 800a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ea:	f000 b827 	b.w	800a43c <_close_r>

0800a3ee <memset>:
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	4402      	add	r2, r0
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d100      	bne.n	800a3f8 <memset+0xa>
 800a3f6:	4770      	bx	lr
 800a3f8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3fc:	e7f9      	b.n	800a3f2 <memset+0x4>

0800a3fe <strchr>:
 800a3fe:	4603      	mov	r3, r0
 800a400:	b2c9      	uxtb	r1, r1
 800a402:	4618      	mov	r0, r3
 800a404:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a408:	b112      	cbz	r2, 800a410 <strchr+0x12>
 800a40a:	428a      	cmp	r2, r1
 800a40c:	d1f9      	bne.n	800a402 <strchr+0x4>
 800a40e:	4770      	bx	lr
 800a410:	2900      	cmp	r1, #0
 800a412:	bf18      	it	ne
 800a414:	2000      	movne	r0, #0
 800a416:	4770      	bx	lr

0800a418 <strncmp>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	b16a      	cbz	r2, 800a438 <strncmp+0x20>
 800a41c:	3901      	subs	r1, #1
 800a41e:	1884      	adds	r4, r0, r2
 800a420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a424:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a428:	429a      	cmp	r2, r3
 800a42a:	d103      	bne.n	800a434 <strncmp+0x1c>
 800a42c:	42a0      	cmp	r0, r4
 800a42e:	d001      	beq.n	800a434 <strncmp+0x1c>
 800a430:	2a00      	cmp	r2, #0
 800a432:	d1f5      	bne.n	800a420 <strncmp+0x8>
 800a434:	1ad0      	subs	r0, r2, r3
 800a436:	bd10      	pop	{r4, pc}
 800a438:	4610      	mov	r0, r2
 800a43a:	e7fc      	b.n	800a436 <strncmp+0x1e>

0800a43c <_close_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	2300      	movs	r3, #0
 800a440:	4d05      	ldr	r5, [pc, #20]	@ (800a458 <_close_r+0x1c>)
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f7 ff05 	bl	8002256 <_close>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_close_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_close_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	200016e4 	.word	0x200016e4

0800a45c <_lseek_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	4611      	mov	r1, r2
 800a464:	2200      	movs	r2, #0
 800a466:	4d05      	ldr	r5, [pc, #20]	@ (800a47c <_lseek_r+0x20>)
 800a468:	602a      	str	r2, [r5, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f7f7 ff17 	bl	800229e <_lseek>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_lseek_r+0x1e>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_lseek_r+0x1e>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	200016e4 	.word	0x200016e4

0800a480 <_read_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	4611      	mov	r1, r2
 800a488:	2200      	movs	r2, #0
 800a48a:	4d05      	ldr	r5, [pc, #20]	@ (800a4a0 <_read_r+0x20>)
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f7f7 fea8 	bl	80021e4 <_read>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_read_r+0x1e>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_read_r+0x1e>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	200016e4 	.word	0x200016e4

0800a4a4 <_write_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	4608      	mov	r0, r1
 800a4aa:	4611      	mov	r1, r2
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4d05      	ldr	r5, [pc, #20]	@ (800a4c4 <_write_r+0x20>)
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f7f7 feb3 	bl	800221e <_write>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_write_r+0x1e>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_write_r+0x1e>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	200016e4 	.word	0x200016e4

0800a4c8 <__errno>:
 800a4c8:	4b01      	ldr	r3, [pc, #4]	@ (800a4d0 <__errno+0x8>)
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	200002f4 	.word	0x200002f4

0800a4d4 <__libc_init_array>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	4d0c      	ldr	r5, [pc, #48]	@ (800a50c <__libc_init_array+0x38>)
 800a4da:	4c0d      	ldr	r4, [pc, #52]	@ (800a510 <__libc_init_array+0x3c>)
 800a4dc:	1b64      	subs	r4, r4, r5
 800a4de:	10a4      	asrs	r4, r4, #2
 800a4e0:	42a6      	cmp	r6, r4
 800a4e2:	d109      	bne.n	800a4f8 <__libc_init_array+0x24>
 800a4e4:	f002 f80c 	bl	800c500 <_init>
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	4d0a      	ldr	r5, [pc, #40]	@ (800a514 <__libc_init_array+0x40>)
 800a4ec:	4c0a      	ldr	r4, [pc, #40]	@ (800a518 <__libc_init_array+0x44>)
 800a4ee:	1b64      	subs	r4, r4, r5
 800a4f0:	10a4      	asrs	r4, r4, #2
 800a4f2:	42a6      	cmp	r6, r4
 800a4f4:	d105      	bne.n	800a502 <__libc_init_array+0x2e>
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}
 800a4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4fc:	4798      	blx	r3
 800a4fe:	3601      	adds	r6, #1
 800a500:	e7ee      	b.n	800a4e0 <__libc_init_array+0xc>
 800a502:	f855 3b04 	ldr.w	r3, [r5], #4
 800a506:	4798      	blx	r3
 800a508:	3601      	adds	r6, #1
 800a50a:	e7f2      	b.n	800a4f2 <__libc_init_array+0x1e>
 800a50c:	0800cce4 	.word	0x0800cce4
 800a510:	0800cce4 	.word	0x0800cce4
 800a514:	0800cce4 	.word	0x0800cce4
 800a518:	0800cce8 	.word	0x0800cce8

0800a51c <__retarget_lock_init_recursive>:
 800a51c:	4770      	bx	lr

0800a51e <__retarget_lock_acquire_recursive>:
 800a51e:	4770      	bx	lr

0800a520 <__retarget_lock_release_recursive>:
 800a520:	4770      	bx	lr

0800a522 <memcpy>:
 800a522:	440a      	add	r2, r1
 800a524:	4291      	cmp	r1, r2
 800a526:	f100 33ff 	add.w	r3, r0, #4294967295
 800a52a:	d100      	bne.n	800a52e <memcpy+0xc>
 800a52c:	4770      	bx	lr
 800a52e:	b510      	push	{r4, lr}
 800a530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a534:	4291      	cmp	r1, r2
 800a536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a53a:	d1f9      	bne.n	800a530 <memcpy+0xe>
 800a53c:	bd10      	pop	{r4, pc}
	...

0800a540 <nan>:
 800a540:	2000      	movs	r0, #0
 800a542:	4901      	ldr	r1, [pc, #4]	@ (800a548 <nan+0x8>)
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	7ff80000 	.word	0x7ff80000

0800a54c <_free_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4605      	mov	r5, r0
 800a550:	2900      	cmp	r1, #0
 800a552:	d040      	beq.n	800a5d6 <_free_r+0x8a>
 800a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a558:	1f0c      	subs	r4, r1, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfb8      	it	lt
 800a55e:	18e4      	addlt	r4, r4, r3
 800a560:	f000 fc2a 	bl	800adb8 <__malloc_lock>
 800a564:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d8 <_free_r+0x8c>)
 800a566:	6813      	ldr	r3, [r2, #0]
 800a568:	b933      	cbnz	r3, 800a578 <_free_r+0x2c>
 800a56a:	6063      	str	r3, [r4, #4]
 800a56c:	6014      	str	r4, [r2, #0]
 800a56e:	4628      	mov	r0, r5
 800a570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a574:	f000 bc26 	b.w	800adc4 <__malloc_unlock>
 800a578:	42a3      	cmp	r3, r4
 800a57a:	d908      	bls.n	800a58e <_free_r+0x42>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	1821      	adds	r1, r4, r0
 800a580:	428b      	cmp	r3, r1
 800a582:	bf01      	itttt	eq
 800a584:	6819      	ldreq	r1, [r3, #0]
 800a586:	685b      	ldreq	r3, [r3, #4]
 800a588:	1809      	addeq	r1, r1, r0
 800a58a:	6021      	streq	r1, [r4, #0]
 800a58c:	e7ed      	b.n	800a56a <_free_r+0x1e>
 800a58e:	461a      	mov	r2, r3
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	b10b      	cbz	r3, 800a598 <_free_r+0x4c>
 800a594:	42a3      	cmp	r3, r4
 800a596:	d9fa      	bls.n	800a58e <_free_r+0x42>
 800a598:	6811      	ldr	r1, [r2, #0]
 800a59a:	1850      	adds	r0, r2, r1
 800a59c:	42a0      	cmp	r0, r4
 800a59e:	d10b      	bne.n	800a5b8 <_free_r+0x6c>
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	4401      	add	r1, r0
 800a5a4:	1850      	adds	r0, r2, r1
 800a5a6:	4283      	cmp	r3, r0
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	d1e0      	bne.n	800a56e <_free_r+0x22>
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4408      	add	r0, r1
 800a5b2:	6010      	str	r0, [r2, #0]
 800a5b4:	6053      	str	r3, [r2, #4]
 800a5b6:	e7da      	b.n	800a56e <_free_r+0x22>
 800a5b8:	d902      	bls.n	800a5c0 <_free_r+0x74>
 800a5ba:	230c      	movs	r3, #12
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	e7d6      	b.n	800a56e <_free_r+0x22>
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	1821      	adds	r1, r4, r0
 800a5c4:	428b      	cmp	r3, r1
 800a5c6:	bf01      	itttt	eq
 800a5c8:	6819      	ldreq	r1, [r3, #0]
 800a5ca:	685b      	ldreq	r3, [r3, #4]
 800a5cc:	1809      	addeq	r1, r1, r0
 800a5ce:	6021      	streq	r1, [r4, #0]
 800a5d0:	6063      	str	r3, [r4, #4]
 800a5d2:	6054      	str	r4, [r2, #4]
 800a5d4:	e7cb      	b.n	800a56e <_free_r+0x22>
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
 800a5d8:	200016f0 	.word	0x200016f0

0800a5dc <rshift>:
 800a5dc:	6903      	ldr	r3, [r0, #16]
 800a5de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a5e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a5e6:	f100 0414 	add.w	r4, r0, #20
 800a5ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a5ee:	dd46      	ble.n	800a67e <rshift+0xa2>
 800a5f0:	f011 011f 	ands.w	r1, r1, #31
 800a5f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5fc:	d10c      	bne.n	800a618 <rshift+0x3c>
 800a5fe:	4629      	mov	r1, r5
 800a600:	f100 0710 	add.w	r7, r0, #16
 800a604:	42b1      	cmp	r1, r6
 800a606:	d335      	bcc.n	800a674 <rshift+0x98>
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	1eea      	subs	r2, r5, #3
 800a60e:	4296      	cmp	r6, r2
 800a610:	bf38      	it	cc
 800a612:	2300      	movcc	r3, #0
 800a614:	4423      	add	r3, r4
 800a616:	e015      	b.n	800a644 <rshift+0x68>
 800a618:	46a1      	mov	r9, r4
 800a61a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a61e:	f1c1 0820 	rsb	r8, r1, #32
 800a622:	40cf      	lsrs	r7, r1
 800a624:	f105 0e04 	add.w	lr, r5, #4
 800a628:	4576      	cmp	r6, lr
 800a62a:	46f4      	mov	ip, lr
 800a62c:	d816      	bhi.n	800a65c <rshift+0x80>
 800a62e:	1a9a      	subs	r2, r3, r2
 800a630:	0092      	lsls	r2, r2, #2
 800a632:	3a04      	subs	r2, #4
 800a634:	3501      	adds	r5, #1
 800a636:	42ae      	cmp	r6, r5
 800a638:	bf38      	it	cc
 800a63a:	2200      	movcc	r2, #0
 800a63c:	18a3      	adds	r3, r4, r2
 800a63e:	50a7      	str	r7, [r4, r2]
 800a640:	b107      	cbz	r7, 800a644 <rshift+0x68>
 800a642:	3304      	adds	r3, #4
 800a644:	42a3      	cmp	r3, r4
 800a646:	eba3 0204 	sub.w	r2, r3, r4
 800a64a:	bf08      	it	eq
 800a64c:	2300      	moveq	r3, #0
 800a64e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a652:	6102      	str	r2, [r0, #16]
 800a654:	bf08      	it	eq
 800a656:	6143      	streq	r3, [r0, #20]
 800a658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a65c:	f8dc c000 	ldr.w	ip, [ip]
 800a660:	fa0c fc08 	lsl.w	ip, ip, r8
 800a664:	ea4c 0707 	orr.w	r7, ip, r7
 800a668:	f849 7b04 	str.w	r7, [r9], #4
 800a66c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a670:	40cf      	lsrs	r7, r1
 800a672:	e7d9      	b.n	800a628 <rshift+0x4c>
 800a674:	f851 cb04 	ldr.w	ip, [r1], #4
 800a678:	f847 cf04 	str.w	ip, [r7, #4]!
 800a67c:	e7c2      	b.n	800a604 <rshift+0x28>
 800a67e:	4623      	mov	r3, r4
 800a680:	e7e0      	b.n	800a644 <rshift+0x68>

0800a682 <__hexdig_fun>:
 800a682:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a686:	2b09      	cmp	r3, #9
 800a688:	d802      	bhi.n	800a690 <__hexdig_fun+0xe>
 800a68a:	3820      	subs	r0, #32
 800a68c:	b2c0      	uxtb	r0, r0
 800a68e:	4770      	bx	lr
 800a690:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a694:	2b05      	cmp	r3, #5
 800a696:	d801      	bhi.n	800a69c <__hexdig_fun+0x1a>
 800a698:	3847      	subs	r0, #71	@ 0x47
 800a69a:	e7f7      	b.n	800a68c <__hexdig_fun+0xa>
 800a69c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a6a0:	2b05      	cmp	r3, #5
 800a6a2:	d801      	bhi.n	800a6a8 <__hexdig_fun+0x26>
 800a6a4:	3827      	subs	r0, #39	@ 0x27
 800a6a6:	e7f1      	b.n	800a68c <__hexdig_fun+0xa>
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	4770      	bx	lr

0800a6ac <__gethex>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	468a      	mov	sl, r1
 800a6b2:	4690      	mov	r8, r2
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	9302      	str	r3, [sp, #8]
 800a6b8:	680b      	ldr	r3, [r1, #0]
 800a6ba:	9001      	str	r0, [sp, #4]
 800a6bc:	1c9c      	adds	r4, r3, #2
 800a6be:	46a1      	mov	r9, r4
 800a6c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6c4:	2830      	cmp	r0, #48	@ 0x30
 800a6c6:	d0fa      	beq.n	800a6be <__gethex+0x12>
 800a6c8:	eba9 0303 	sub.w	r3, r9, r3
 800a6cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a6d0:	f7ff ffd7 	bl	800a682 <__hexdig_fun>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d168      	bne.n	800a7ac <__gethex+0x100>
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4648      	mov	r0, r9
 800a6de:	499f      	ldr	r1, [pc, #636]	@ (800a95c <__gethex+0x2b0>)
 800a6e0:	f7ff fe9a 	bl	800a418 <strncmp>
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d167      	bne.n	800a7ba <__gethex+0x10e>
 800a6ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a6ee:	4626      	mov	r6, r4
 800a6f0:	f7ff ffc7 	bl	800a682 <__hexdig_fun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d062      	beq.n	800a7be <__gethex+0x112>
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	7818      	ldrb	r0, [r3, #0]
 800a6fc:	4699      	mov	r9, r3
 800a6fe:	2830      	cmp	r0, #48	@ 0x30
 800a700:	f103 0301 	add.w	r3, r3, #1
 800a704:	d0f9      	beq.n	800a6fa <__gethex+0x4e>
 800a706:	f7ff ffbc 	bl	800a682 <__hexdig_fun>
 800a70a:	fab0 f580 	clz	r5, r0
 800a70e:	f04f 0b01 	mov.w	fp, #1
 800a712:	096d      	lsrs	r5, r5, #5
 800a714:	464a      	mov	r2, r9
 800a716:	4616      	mov	r6, r2
 800a718:	7830      	ldrb	r0, [r6, #0]
 800a71a:	3201      	adds	r2, #1
 800a71c:	f7ff ffb1 	bl	800a682 <__hexdig_fun>
 800a720:	2800      	cmp	r0, #0
 800a722:	d1f8      	bne.n	800a716 <__gethex+0x6a>
 800a724:	2201      	movs	r2, #1
 800a726:	4630      	mov	r0, r6
 800a728:	498c      	ldr	r1, [pc, #560]	@ (800a95c <__gethex+0x2b0>)
 800a72a:	f7ff fe75 	bl	800a418 <strncmp>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d13f      	bne.n	800a7b2 <__gethex+0x106>
 800a732:	b944      	cbnz	r4, 800a746 <__gethex+0x9a>
 800a734:	1c74      	adds	r4, r6, #1
 800a736:	4622      	mov	r2, r4
 800a738:	4616      	mov	r6, r2
 800a73a:	7830      	ldrb	r0, [r6, #0]
 800a73c:	3201      	adds	r2, #1
 800a73e:	f7ff ffa0 	bl	800a682 <__hexdig_fun>
 800a742:	2800      	cmp	r0, #0
 800a744:	d1f8      	bne.n	800a738 <__gethex+0x8c>
 800a746:	1ba4      	subs	r4, r4, r6
 800a748:	00a7      	lsls	r7, r4, #2
 800a74a:	7833      	ldrb	r3, [r6, #0]
 800a74c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a750:	2b50      	cmp	r3, #80	@ 0x50
 800a752:	d13e      	bne.n	800a7d2 <__gethex+0x126>
 800a754:	7873      	ldrb	r3, [r6, #1]
 800a756:	2b2b      	cmp	r3, #43	@ 0x2b
 800a758:	d033      	beq.n	800a7c2 <__gethex+0x116>
 800a75a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a75c:	d034      	beq.n	800a7c8 <__gethex+0x11c>
 800a75e:	2400      	movs	r4, #0
 800a760:	1c71      	adds	r1, r6, #1
 800a762:	7808      	ldrb	r0, [r1, #0]
 800a764:	f7ff ff8d 	bl	800a682 <__hexdig_fun>
 800a768:	1e43      	subs	r3, r0, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b18      	cmp	r3, #24
 800a76e:	d830      	bhi.n	800a7d2 <__gethex+0x126>
 800a770:	f1a0 0210 	sub.w	r2, r0, #16
 800a774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a778:	f7ff ff83 	bl	800a682 <__hexdig_fun>
 800a77c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a780:	fa5f fc8c 	uxtb.w	ip, ip
 800a784:	f1bc 0f18 	cmp.w	ip, #24
 800a788:	f04f 030a 	mov.w	r3, #10
 800a78c:	d91e      	bls.n	800a7cc <__gethex+0x120>
 800a78e:	b104      	cbz	r4, 800a792 <__gethex+0xe6>
 800a790:	4252      	negs	r2, r2
 800a792:	4417      	add	r7, r2
 800a794:	f8ca 1000 	str.w	r1, [sl]
 800a798:	b1ed      	cbz	r5, 800a7d6 <__gethex+0x12a>
 800a79a:	f1bb 0f00 	cmp.w	fp, #0
 800a79e:	bf0c      	ite	eq
 800a7a0:	2506      	moveq	r5, #6
 800a7a2:	2500      	movne	r5, #0
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	b005      	add	sp, #20
 800a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ac:	2500      	movs	r5, #0
 800a7ae:	462c      	mov	r4, r5
 800a7b0:	e7b0      	b.n	800a714 <__gethex+0x68>
 800a7b2:	2c00      	cmp	r4, #0
 800a7b4:	d1c7      	bne.n	800a746 <__gethex+0x9a>
 800a7b6:	4627      	mov	r7, r4
 800a7b8:	e7c7      	b.n	800a74a <__gethex+0x9e>
 800a7ba:	464e      	mov	r6, r9
 800a7bc:	462f      	mov	r7, r5
 800a7be:	2501      	movs	r5, #1
 800a7c0:	e7c3      	b.n	800a74a <__gethex+0x9e>
 800a7c2:	2400      	movs	r4, #0
 800a7c4:	1cb1      	adds	r1, r6, #2
 800a7c6:	e7cc      	b.n	800a762 <__gethex+0xb6>
 800a7c8:	2401      	movs	r4, #1
 800a7ca:	e7fb      	b.n	800a7c4 <__gethex+0x118>
 800a7cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a7d0:	e7ce      	b.n	800a770 <__gethex+0xc4>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	e7de      	b.n	800a794 <__gethex+0xe8>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	eba6 0309 	sub.w	r3, r6, r9
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	2b07      	cmp	r3, #7
 800a7e0:	dc0a      	bgt.n	800a7f8 <__gethex+0x14c>
 800a7e2:	9801      	ldr	r0, [sp, #4]
 800a7e4:	f000 faf4 	bl	800add0 <_Balloc>
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	b940      	cbnz	r0, 800a7fe <__gethex+0x152>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	21e4      	movs	r1, #228	@ 0xe4
 800a7f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a960 <__gethex+0x2b4>)
 800a7f2:	485c      	ldr	r0, [pc, #368]	@ (800a964 <__gethex+0x2b8>)
 800a7f4:	f001 fb60 	bl	800beb8 <__assert_func>
 800a7f8:	3101      	adds	r1, #1
 800a7fa:	105b      	asrs	r3, r3, #1
 800a7fc:	e7ef      	b.n	800a7de <__gethex+0x132>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f100 0a14 	add.w	sl, r0, #20
 800a804:	4655      	mov	r5, sl
 800a806:	469b      	mov	fp, r3
 800a808:	45b1      	cmp	r9, r6
 800a80a:	d337      	bcc.n	800a87c <__gethex+0x1d0>
 800a80c:	f845 bb04 	str.w	fp, [r5], #4
 800a810:	eba5 050a 	sub.w	r5, r5, sl
 800a814:	10ad      	asrs	r5, r5, #2
 800a816:	6125      	str	r5, [r4, #16]
 800a818:	4658      	mov	r0, fp
 800a81a:	f000 fbcb 	bl	800afb4 <__hi0bits>
 800a81e:	016d      	lsls	r5, r5, #5
 800a820:	f8d8 6000 	ldr.w	r6, [r8]
 800a824:	1a2d      	subs	r5, r5, r0
 800a826:	42b5      	cmp	r5, r6
 800a828:	dd54      	ble.n	800a8d4 <__gethex+0x228>
 800a82a:	1bad      	subs	r5, r5, r6
 800a82c:	4629      	mov	r1, r5
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 ff4d 	bl	800b6ce <__any_on>
 800a834:	4681      	mov	r9, r0
 800a836:	b178      	cbz	r0, 800a858 <__gethex+0x1ac>
 800a838:	f04f 0901 	mov.w	r9, #1
 800a83c:	1e6b      	subs	r3, r5, #1
 800a83e:	1159      	asrs	r1, r3, #5
 800a840:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a844:	f003 021f 	and.w	r2, r3, #31
 800a848:	fa09 f202 	lsl.w	r2, r9, r2
 800a84c:	420a      	tst	r2, r1
 800a84e:	d003      	beq.n	800a858 <__gethex+0x1ac>
 800a850:	454b      	cmp	r3, r9
 800a852:	dc36      	bgt.n	800a8c2 <__gethex+0x216>
 800a854:	f04f 0902 	mov.w	r9, #2
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff febe 	bl	800a5dc <rshift>
 800a860:	442f      	add	r7, r5
 800a862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a866:	42bb      	cmp	r3, r7
 800a868:	da42      	bge.n	800a8f0 <__gethex+0x244>
 800a86a:	4621      	mov	r1, r4
 800a86c:	9801      	ldr	r0, [sp, #4]
 800a86e:	f000 faef 	bl	800ae50 <_Bfree>
 800a872:	2300      	movs	r3, #0
 800a874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a876:	25a3      	movs	r5, #163	@ 0xa3
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	e793      	b.n	800a7a4 <__gethex+0xf8>
 800a87c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a880:	2a2e      	cmp	r2, #46	@ 0x2e
 800a882:	d012      	beq.n	800a8aa <__gethex+0x1fe>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d104      	bne.n	800a892 <__gethex+0x1e6>
 800a888:	f845 bb04 	str.w	fp, [r5], #4
 800a88c:	f04f 0b00 	mov.w	fp, #0
 800a890:	465b      	mov	r3, fp
 800a892:	7830      	ldrb	r0, [r6, #0]
 800a894:	9303      	str	r3, [sp, #12]
 800a896:	f7ff fef4 	bl	800a682 <__hexdig_fun>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	f000 000f 	and.w	r0, r0, #15
 800a8a0:	4098      	lsls	r0, r3
 800a8a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	e7ae      	b.n	800a808 <__gethex+0x15c>
 800a8aa:	45b1      	cmp	r9, r6
 800a8ac:	d8ea      	bhi.n	800a884 <__gethex+0x1d8>
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	492a      	ldr	r1, [pc, #168]	@ (800a95c <__gethex+0x2b0>)
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	f7ff fdaf 	bl	800a418 <strncmp>
 800a8ba:	9b03      	ldr	r3, [sp, #12]
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d1e1      	bne.n	800a884 <__gethex+0x1d8>
 800a8c0:	e7a2      	b.n	800a808 <__gethex+0x15c>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	1ea9      	subs	r1, r5, #2
 800a8c6:	f000 ff02 	bl	800b6ce <__any_on>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d0c2      	beq.n	800a854 <__gethex+0x1a8>
 800a8ce:	f04f 0903 	mov.w	r9, #3
 800a8d2:	e7c1      	b.n	800a858 <__gethex+0x1ac>
 800a8d4:	da09      	bge.n	800a8ea <__gethex+0x23e>
 800a8d6:	1b75      	subs	r5, r6, r5
 800a8d8:	4621      	mov	r1, r4
 800a8da:	462a      	mov	r2, r5
 800a8dc:	9801      	ldr	r0, [sp, #4]
 800a8de:	f000 fcc7 	bl	800b270 <__lshift>
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	1b7f      	subs	r7, r7, r5
 800a8e6:	f100 0a14 	add.w	sl, r0, #20
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	e7b8      	b.n	800a862 <__gethex+0x1b6>
 800a8f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a8f4:	42bd      	cmp	r5, r7
 800a8f6:	dd6f      	ble.n	800a9d8 <__gethex+0x32c>
 800a8f8:	1bed      	subs	r5, r5, r7
 800a8fa:	42ae      	cmp	r6, r5
 800a8fc:	dc34      	bgt.n	800a968 <__gethex+0x2bc>
 800a8fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a902:	2b02      	cmp	r3, #2
 800a904:	d022      	beq.n	800a94c <__gethex+0x2a0>
 800a906:	2b03      	cmp	r3, #3
 800a908:	d024      	beq.n	800a954 <__gethex+0x2a8>
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d115      	bne.n	800a93a <__gethex+0x28e>
 800a90e:	42ae      	cmp	r6, r5
 800a910:	d113      	bne.n	800a93a <__gethex+0x28e>
 800a912:	2e01      	cmp	r6, #1
 800a914:	d10b      	bne.n	800a92e <__gethex+0x282>
 800a916:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a91a:	9a02      	ldr	r2, [sp, #8]
 800a91c:	2562      	movs	r5, #98	@ 0x62
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	2301      	movs	r3, #1
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	f8ca 3000 	str.w	r3, [sl]
 800a928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a92a:	601c      	str	r4, [r3, #0]
 800a92c:	e73a      	b.n	800a7a4 <__gethex+0xf8>
 800a92e:	4620      	mov	r0, r4
 800a930:	1e71      	subs	r1, r6, #1
 800a932:	f000 fecc 	bl	800b6ce <__any_on>
 800a936:	2800      	cmp	r0, #0
 800a938:	d1ed      	bne.n	800a916 <__gethex+0x26a>
 800a93a:	4621      	mov	r1, r4
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	f000 fa87 	bl	800ae50 <_Bfree>
 800a942:	2300      	movs	r3, #0
 800a944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a946:	2550      	movs	r5, #80	@ 0x50
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e72b      	b.n	800a7a4 <__gethex+0xf8>
 800a94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f3      	bne.n	800a93a <__gethex+0x28e>
 800a952:	e7e0      	b.n	800a916 <__gethex+0x26a>
 800a954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1dd      	bne.n	800a916 <__gethex+0x26a>
 800a95a:	e7ee      	b.n	800a93a <__gethex+0x28e>
 800a95c:	0800c91e 	.word	0x0800c91e
 800a960:	0800c934 	.word	0x0800c934
 800a964:	0800c945 	.word	0x0800c945
 800a968:	1e6f      	subs	r7, r5, #1
 800a96a:	f1b9 0f00 	cmp.w	r9, #0
 800a96e:	d130      	bne.n	800a9d2 <__gethex+0x326>
 800a970:	b127      	cbz	r7, 800a97c <__gethex+0x2d0>
 800a972:	4639      	mov	r1, r7
 800a974:	4620      	mov	r0, r4
 800a976:	f000 feaa 	bl	800b6ce <__any_on>
 800a97a:	4681      	mov	r9, r0
 800a97c:	2301      	movs	r3, #1
 800a97e:	4629      	mov	r1, r5
 800a980:	1b76      	subs	r6, r6, r5
 800a982:	2502      	movs	r5, #2
 800a984:	117a      	asrs	r2, r7, #5
 800a986:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a98a:	f007 071f 	and.w	r7, r7, #31
 800a98e:	40bb      	lsls	r3, r7
 800a990:	4213      	tst	r3, r2
 800a992:	4620      	mov	r0, r4
 800a994:	bf18      	it	ne
 800a996:	f049 0902 	orrne.w	r9, r9, #2
 800a99a:	f7ff fe1f 	bl	800a5dc <rshift>
 800a99e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	d047      	beq.n	800aa38 <__gethex+0x38c>
 800a9a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d015      	beq.n	800a9dc <__gethex+0x330>
 800a9b0:	2b03      	cmp	r3, #3
 800a9b2:	d017      	beq.n	800a9e4 <__gethex+0x338>
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d109      	bne.n	800a9cc <__gethex+0x320>
 800a9b8:	f019 0f02 	tst.w	r9, #2
 800a9bc:	d006      	beq.n	800a9cc <__gethex+0x320>
 800a9be:	f8da 3000 	ldr.w	r3, [sl]
 800a9c2:	ea49 0903 	orr.w	r9, r9, r3
 800a9c6:	f019 0f01 	tst.w	r9, #1
 800a9ca:	d10e      	bne.n	800a9ea <__gethex+0x33e>
 800a9cc:	f045 0510 	orr.w	r5, r5, #16
 800a9d0:	e032      	b.n	800aa38 <__gethex+0x38c>
 800a9d2:	f04f 0901 	mov.w	r9, #1
 800a9d6:	e7d1      	b.n	800a97c <__gethex+0x2d0>
 800a9d8:	2501      	movs	r5, #1
 800a9da:	e7e2      	b.n	800a9a2 <__gethex+0x2f6>
 800a9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9de:	f1c3 0301 	rsb	r3, r3, #1
 800a9e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0f0      	beq.n	800a9cc <__gethex+0x320>
 800a9ea:	f04f 0c00 	mov.w	ip, #0
 800a9ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9f2:	f104 0314 	add.w	r3, r4, #20
 800a9f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa08:	d01b      	beq.n	800aa42 <__gethex+0x396>
 800aa0a:	3201      	adds	r2, #1
 800aa0c:	6002      	str	r2, [r0, #0]
 800aa0e:	2d02      	cmp	r5, #2
 800aa10:	f104 0314 	add.w	r3, r4, #20
 800aa14:	d13c      	bne.n	800aa90 <__gethex+0x3e4>
 800aa16:	f8d8 2000 	ldr.w	r2, [r8]
 800aa1a:	3a01      	subs	r2, #1
 800aa1c:	42b2      	cmp	r2, r6
 800aa1e:	d109      	bne.n	800aa34 <__gethex+0x388>
 800aa20:	2201      	movs	r2, #1
 800aa22:	1171      	asrs	r1, r6, #5
 800aa24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa28:	f006 061f 	and.w	r6, r6, #31
 800aa2c:	fa02 f606 	lsl.w	r6, r2, r6
 800aa30:	421e      	tst	r6, r3
 800aa32:	d13a      	bne.n	800aaaa <__gethex+0x3fe>
 800aa34:	f045 0520 	orr.w	r5, r5, #32
 800aa38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa3a:	601c      	str	r4, [r3, #0]
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	601f      	str	r7, [r3, #0]
 800aa40:	e6b0      	b.n	800a7a4 <__gethex+0xf8>
 800aa42:	4299      	cmp	r1, r3
 800aa44:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa48:	d8d9      	bhi.n	800a9fe <__gethex+0x352>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	459b      	cmp	fp, r3
 800aa4e:	db17      	blt.n	800aa80 <__gethex+0x3d4>
 800aa50:	6861      	ldr	r1, [r4, #4]
 800aa52:	9801      	ldr	r0, [sp, #4]
 800aa54:	3101      	adds	r1, #1
 800aa56:	f000 f9bb 	bl	800add0 <_Balloc>
 800aa5a:	4681      	mov	r9, r0
 800aa5c:	b918      	cbnz	r0, 800aa66 <__gethex+0x3ba>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	2184      	movs	r1, #132	@ 0x84
 800aa62:	4b19      	ldr	r3, [pc, #100]	@ (800aac8 <__gethex+0x41c>)
 800aa64:	e6c5      	b.n	800a7f2 <__gethex+0x146>
 800aa66:	6922      	ldr	r2, [r4, #16]
 800aa68:	f104 010c 	add.w	r1, r4, #12
 800aa6c:	3202      	adds	r2, #2
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	300c      	adds	r0, #12
 800aa72:	f7ff fd56 	bl	800a522 <memcpy>
 800aa76:	4621      	mov	r1, r4
 800aa78:	9801      	ldr	r0, [sp, #4]
 800aa7a:	f000 f9e9 	bl	800ae50 <_Bfree>
 800aa7e:	464c      	mov	r4, r9
 800aa80:	6923      	ldr	r3, [r4, #16]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	6122      	str	r2, [r4, #16]
 800aa86:	2201      	movs	r2, #1
 800aa88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa8c:	615a      	str	r2, [r3, #20]
 800aa8e:	e7be      	b.n	800aa0e <__gethex+0x362>
 800aa90:	6922      	ldr	r2, [r4, #16]
 800aa92:	455a      	cmp	r2, fp
 800aa94:	dd0b      	ble.n	800aaae <__gethex+0x402>
 800aa96:	2101      	movs	r1, #1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7ff fd9f 	bl	800a5dc <rshift>
 800aa9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aaa2:	3701      	adds	r7, #1
 800aaa4:	42bb      	cmp	r3, r7
 800aaa6:	f6ff aee0 	blt.w	800a86a <__gethex+0x1be>
 800aaaa:	2501      	movs	r5, #1
 800aaac:	e7c2      	b.n	800aa34 <__gethex+0x388>
 800aaae:	f016 061f 	ands.w	r6, r6, #31
 800aab2:	d0fa      	beq.n	800aaaa <__gethex+0x3fe>
 800aab4:	4453      	add	r3, sl
 800aab6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aaba:	f000 fa7b 	bl	800afb4 <__hi0bits>
 800aabe:	f1c6 0620 	rsb	r6, r6, #32
 800aac2:	42b0      	cmp	r0, r6
 800aac4:	dbe7      	blt.n	800aa96 <__gethex+0x3ea>
 800aac6:	e7f0      	b.n	800aaaa <__gethex+0x3fe>
 800aac8:	0800c934 	.word	0x0800c934

0800aacc <L_shift>:
 800aacc:	f1c2 0208 	rsb	r2, r2, #8
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	f1c2 0620 	rsb	r6, r2, #32
 800aad8:	6843      	ldr	r3, [r0, #4]
 800aada:	6804      	ldr	r4, [r0, #0]
 800aadc:	fa03 f506 	lsl.w	r5, r3, r6
 800aae0:	432c      	orrs	r4, r5
 800aae2:	40d3      	lsrs	r3, r2
 800aae4:	6004      	str	r4, [r0, #0]
 800aae6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaea:	4288      	cmp	r0, r1
 800aaec:	d3f4      	bcc.n	800aad8 <L_shift+0xc>
 800aaee:	bd70      	pop	{r4, r5, r6, pc}

0800aaf0 <__match>:
 800aaf0:	b530      	push	{r4, r5, lr}
 800aaf2:	6803      	ldr	r3, [r0, #0]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aafa:	b914      	cbnz	r4, 800ab02 <__match+0x12>
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	2001      	movs	r0, #1
 800ab00:	bd30      	pop	{r4, r5, pc}
 800ab02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab0a:	2d19      	cmp	r5, #25
 800ab0c:	bf98      	it	ls
 800ab0e:	3220      	addls	r2, #32
 800ab10:	42a2      	cmp	r2, r4
 800ab12:	d0f0      	beq.n	800aaf6 <__match+0x6>
 800ab14:	2000      	movs	r0, #0
 800ab16:	e7f3      	b.n	800ab00 <__match+0x10>

0800ab18 <__hexnan>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	680b      	ldr	r3, [r1, #0]
 800ab20:	4682      	mov	sl, r0
 800ab22:	115e      	asrs	r6, r3, #5
 800ab24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab28:	f013 031f 	ands.w	r3, r3, #31
 800ab2c:	bf18      	it	ne
 800ab2e:	3604      	addne	r6, #4
 800ab30:	1f37      	subs	r7, r6, #4
 800ab32:	4690      	mov	r8, r2
 800ab34:	46b9      	mov	r9, r7
 800ab36:	463c      	mov	r4, r7
 800ab38:	46ab      	mov	fp, r5
 800ab3a:	b087      	sub	sp, #28
 800ab3c:	6801      	ldr	r1, [r0, #0]
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab44:	9502      	str	r5, [sp, #8]
 800ab46:	784a      	ldrb	r2, [r1, #1]
 800ab48:	1c4b      	adds	r3, r1, #1
 800ab4a:	9303      	str	r3, [sp, #12]
 800ab4c:	b342      	cbz	r2, 800aba0 <__hexnan+0x88>
 800ab4e:	4610      	mov	r0, r2
 800ab50:	9105      	str	r1, [sp, #20]
 800ab52:	9204      	str	r2, [sp, #16]
 800ab54:	f7ff fd95 	bl	800a682 <__hexdig_fun>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d151      	bne.n	800ac00 <__hexnan+0xe8>
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	9905      	ldr	r1, [sp, #20]
 800ab60:	2a20      	cmp	r2, #32
 800ab62:	d818      	bhi.n	800ab96 <__hexnan+0x7e>
 800ab64:	9b02      	ldr	r3, [sp, #8]
 800ab66:	459b      	cmp	fp, r3
 800ab68:	dd13      	ble.n	800ab92 <__hexnan+0x7a>
 800ab6a:	454c      	cmp	r4, r9
 800ab6c:	d206      	bcs.n	800ab7c <__hexnan+0x64>
 800ab6e:	2d07      	cmp	r5, #7
 800ab70:	dc04      	bgt.n	800ab7c <__hexnan+0x64>
 800ab72:	462a      	mov	r2, r5
 800ab74:	4649      	mov	r1, r9
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff ffa8 	bl	800aacc <L_shift>
 800ab7c:	4544      	cmp	r4, r8
 800ab7e:	d952      	bls.n	800ac26 <__hexnan+0x10e>
 800ab80:	2300      	movs	r3, #0
 800ab82:	f1a4 0904 	sub.w	r9, r4, #4
 800ab86:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab8a:	461d      	mov	r5, r3
 800ab8c:	464c      	mov	r4, r9
 800ab8e:	f8cd b008 	str.w	fp, [sp, #8]
 800ab92:	9903      	ldr	r1, [sp, #12]
 800ab94:	e7d7      	b.n	800ab46 <__hexnan+0x2e>
 800ab96:	2a29      	cmp	r2, #41	@ 0x29
 800ab98:	d157      	bne.n	800ac4a <__hexnan+0x132>
 800ab9a:	3102      	adds	r1, #2
 800ab9c:	f8ca 1000 	str.w	r1, [sl]
 800aba0:	f1bb 0f00 	cmp.w	fp, #0
 800aba4:	d051      	beq.n	800ac4a <__hexnan+0x132>
 800aba6:	454c      	cmp	r4, r9
 800aba8:	d206      	bcs.n	800abb8 <__hexnan+0xa0>
 800abaa:	2d07      	cmp	r5, #7
 800abac:	dc04      	bgt.n	800abb8 <__hexnan+0xa0>
 800abae:	462a      	mov	r2, r5
 800abb0:	4649      	mov	r1, r9
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff ff8a 	bl	800aacc <L_shift>
 800abb8:	4544      	cmp	r4, r8
 800abba:	d936      	bls.n	800ac2a <__hexnan+0x112>
 800abbc:	4623      	mov	r3, r4
 800abbe:	f1a8 0204 	sub.w	r2, r8, #4
 800abc2:	f853 1b04 	ldr.w	r1, [r3], #4
 800abc6:	429f      	cmp	r7, r3
 800abc8:	f842 1f04 	str.w	r1, [r2, #4]!
 800abcc:	d2f9      	bcs.n	800abc2 <__hexnan+0xaa>
 800abce:	1b3b      	subs	r3, r7, r4
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	3304      	adds	r3, #4
 800abd6:	3401      	adds	r4, #1
 800abd8:	3e03      	subs	r6, #3
 800abda:	42b4      	cmp	r4, r6
 800abdc:	bf88      	it	hi
 800abde:	2304      	movhi	r3, #4
 800abe0:	2200      	movs	r2, #0
 800abe2:	4443      	add	r3, r8
 800abe4:	f843 2b04 	str.w	r2, [r3], #4
 800abe8:	429f      	cmp	r7, r3
 800abea:	d2fb      	bcs.n	800abe4 <__hexnan+0xcc>
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	b91b      	cbnz	r3, 800abf8 <__hexnan+0xe0>
 800abf0:	4547      	cmp	r7, r8
 800abf2:	d128      	bne.n	800ac46 <__hexnan+0x12e>
 800abf4:	2301      	movs	r3, #1
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	2005      	movs	r0, #5
 800abfa:	b007      	add	sp, #28
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	3501      	adds	r5, #1
 800ac02:	2d08      	cmp	r5, #8
 800ac04:	f10b 0b01 	add.w	fp, fp, #1
 800ac08:	dd06      	ble.n	800ac18 <__hexnan+0x100>
 800ac0a:	4544      	cmp	r4, r8
 800ac0c:	d9c1      	bls.n	800ab92 <__hexnan+0x7a>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2501      	movs	r5, #1
 800ac12:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac16:	3c04      	subs	r4, #4
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	f000 000f 	and.w	r0, r0, #15
 800ac1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac22:	6020      	str	r0, [r4, #0]
 800ac24:	e7b5      	b.n	800ab92 <__hexnan+0x7a>
 800ac26:	2508      	movs	r5, #8
 800ac28:	e7b3      	b.n	800ab92 <__hexnan+0x7a>
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0dd      	beq.n	800abec <__hexnan+0xd4>
 800ac30:	f04f 32ff 	mov.w	r2, #4294967295
 800ac34:	f1c3 0320 	rsb	r3, r3, #32
 800ac38:	40da      	lsrs	r2, r3
 800ac3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac44:	e7d2      	b.n	800abec <__hexnan+0xd4>
 800ac46:	3f04      	subs	r7, #4
 800ac48:	e7d0      	b.n	800abec <__hexnan+0xd4>
 800ac4a:	2004      	movs	r0, #4
 800ac4c:	e7d5      	b.n	800abfa <__hexnan+0xe2>
	...

0800ac50 <sbrk_aligned>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	4e0f      	ldr	r6, [pc, #60]	@ (800ac90 <sbrk_aligned+0x40>)
 800ac54:	460c      	mov	r4, r1
 800ac56:	6831      	ldr	r1, [r6, #0]
 800ac58:	4605      	mov	r5, r0
 800ac5a:	b911      	cbnz	r1, 800ac62 <sbrk_aligned+0x12>
 800ac5c:	f001 f90e 	bl	800be7c <_sbrk_r>
 800ac60:	6030      	str	r0, [r6, #0]
 800ac62:	4621      	mov	r1, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	f001 f909 	bl	800be7c <_sbrk_r>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d103      	bne.n	800ac76 <sbrk_aligned+0x26>
 800ac6e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac72:	4620      	mov	r0, r4
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	1cc4      	adds	r4, r0, #3
 800ac78:	f024 0403 	bic.w	r4, r4, #3
 800ac7c:	42a0      	cmp	r0, r4
 800ac7e:	d0f8      	beq.n	800ac72 <sbrk_aligned+0x22>
 800ac80:	1a21      	subs	r1, r4, r0
 800ac82:	4628      	mov	r0, r5
 800ac84:	f001 f8fa 	bl	800be7c <_sbrk_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d1f2      	bne.n	800ac72 <sbrk_aligned+0x22>
 800ac8c:	e7ef      	b.n	800ac6e <sbrk_aligned+0x1e>
 800ac8e:	bf00      	nop
 800ac90:	200016ec 	.word	0x200016ec

0800ac94 <_malloc_r>:
 800ac94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	1ccd      	adds	r5, r1, #3
 800ac9a:	f025 0503 	bic.w	r5, r5, #3
 800ac9e:	3508      	adds	r5, #8
 800aca0:	2d0c      	cmp	r5, #12
 800aca2:	bf38      	it	cc
 800aca4:	250c      	movcc	r5, #12
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	4606      	mov	r6, r0
 800acaa:	db01      	blt.n	800acb0 <_malloc_r+0x1c>
 800acac:	42a9      	cmp	r1, r5
 800acae:	d904      	bls.n	800acba <_malloc_r+0x26>
 800acb0:	230c      	movs	r3, #12
 800acb2:	6033      	str	r3, [r6, #0]
 800acb4:	2000      	movs	r0, #0
 800acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad90 <_malloc_r+0xfc>
 800acbe:	f000 f87b 	bl	800adb8 <__malloc_lock>
 800acc2:	f8d8 3000 	ldr.w	r3, [r8]
 800acc6:	461c      	mov	r4, r3
 800acc8:	bb44      	cbnz	r4, 800ad1c <_malloc_r+0x88>
 800acca:	4629      	mov	r1, r5
 800accc:	4630      	mov	r0, r6
 800acce:	f7ff ffbf 	bl	800ac50 <sbrk_aligned>
 800acd2:	1c43      	adds	r3, r0, #1
 800acd4:	4604      	mov	r4, r0
 800acd6:	d158      	bne.n	800ad8a <_malloc_r+0xf6>
 800acd8:	f8d8 4000 	ldr.w	r4, [r8]
 800acdc:	4627      	mov	r7, r4
 800acde:	2f00      	cmp	r7, #0
 800ace0:	d143      	bne.n	800ad6a <_malloc_r+0xd6>
 800ace2:	2c00      	cmp	r4, #0
 800ace4:	d04b      	beq.n	800ad7e <_malloc_r+0xea>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	4639      	mov	r1, r7
 800acea:	4630      	mov	r0, r6
 800acec:	eb04 0903 	add.w	r9, r4, r3
 800acf0:	f001 f8c4 	bl	800be7c <_sbrk_r>
 800acf4:	4581      	cmp	r9, r0
 800acf6:	d142      	bne.n	800ad7e <_malloc_r+0xea>
 800acf8:	6821      	ldr	r1, [r4, #0]
 800acfa:	4630      	mov	r0, r6
 800acfc:	1a6d      	subs	r5, r5, r1
 800acfe:	4629      	mov	r1, r5
 800ad00:	f7ff ffa6 	bl	800ac50 <sbrk_aligned>
 800ad04:	3001      	adds	r0, #1
 800ad06:	d03a      	beq.n	800ad7e <_malloc_r+0xea>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	442b      	add	r3, r5
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	bb62      	cbnz	r2, 800ad70 <_malloc_r+0xdc>
 800ad16:	f8c8 7000 	str.w	r7, [r8]
 800ad1a:	e00f      	b.n	800ad3c <_malloc_r+0xa8>
 800ad1c:	6822      	ldr	r2, [r4, #0]
 800ad1e:	1b52      	subs	r2, r2, r5
 800ad20:	d420      	bmi.n	800ad64 <_malloc_r+0xd0>
 800ad22:	2a0b      	cmp	r2, #11
 800ad24:	d917      	bls.n	800ad56 <_malloc_r+0xc2>
 800ad26:	1961      	adds	r1, r4, r5
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	6025      	str	r5, [r4, #0]
 800ad2c:	bf18      	it	ne
 800ad2e:	6059      	strne	r1, [r3, #4]
 800ad30:	6863      	ldr	r3, [r4, #4]
 800ad32:	bf08      	it	eq
 800ad34:	f8c8 1000 	streq.w	r1, [r8]
 800ad38:	5162      	str	r2, [r4, r5]
 800ad3a:	604b      	str	r3, [r1, #4]
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f000 f841 	bl	800adc4 <__malloc_unlock>
 800ad42:	f104 000b 	add.w	r0, r4, #11
 800ad46:	1d23      	adds	r3, r4, #4
 800ad48:	f020 0007 	bic.w	r0, r0, #7
 800ad4c:	1ac2      	subs	r2, r0, r3
 800ad4e:	bf1c      	itt	ne
 800ad50:	1a1b      	subne	r3, r3, r0
 800ad52:	50a3      	strne	r3, [r4, r2]
 800ad54:	e7af      	b.n	800acb6 <_malloc_r+0x22>
 800ad56:	6862      	ldr	r2, [r4, #4]
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	bf0c      	ite	eq
 800ad5c:	f8c8 2000 	streq.w	r2, [r8]
 800ad60:	605a      	strne	r2, [r3, #4]
 800ad62:	e7eb      	b.n	800ad3c <_malloc_r+0xa8>
 800ad64:	4623      	mov	r3, r4
 800ad66:	6864      	ldr	r4, [r4, #4]
 800ad68:	e7ae      	b.n	800acc8 <_malloc_r+0x34>
 800ad6a:	463c      	mov	r4, r7
 800ad6c:	687f      	ldr	r7, [r7, #4]
 800ad6e:	e7b6      	b.n	800acde <_malloc_r+0x4a>
 800ad70:	461a      	mov	r2, r3
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	d1fb      	bne.n	800ad70 <_malloc_r+0xdc>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6053      	str	r3, [r2, #4]
 800ad7c:	e7de      	b.n	800ad3c <_malloc_r+0xa8>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	4630      	mov	r0, r6
 800ad82:	6033      	str	r3, [r6, #0]
 800ad84:	f000 f81e 	bl	800adc4 <__malloc_unlock>
 800ad88:	e794      	b.n	800acb4 <_malloc_r+0x20>
 800ad8a:	6005      	str	r5, [r0, #0]
 800ad8c:	e7d6      	b.n	800ad3c <_malloc_r+0xa8>
 800ad8e:	bf00      	nop
 800ad90:	200016f0 	.word	0x200016f0

0800ad94 <__ascii_mbtowc>:
 800ad94:	b082      	sub	sp, #8
 800ad96:	b901      	cbnz	r1, 800ad9a <__ascii_mbtowc+0x6>
 800ad98:	a901      	add	r1, sp, #4
 800ad9a:	b142      	cbz	r2, 800adae <__ascii_mbtowc+0x1a>
 800ad9c:	b14b      	cbz	r3, 800adb2 <__ascii_mbtowc+0x1e>
 800ad9e:	7813      	ldrb	r3, [r2, #0]
 800ada0:	600b      	str	r3, [r1, #0]
 800ada2:	7812      	ldrb	r2, [r2, #0]
 800ada4:	1e10      	subs	r0, r2, #0
 800ada6:	bf18      	it	ne
 800ada8:	2001      	movne	r0, #1
 800adaa:	b002      	add	sp, #8
 800adac:	4770      	bx	lr
 800adae:	4610      	mov	r0, r2
 800adb0:	e7fb      	b.n	800adaa <__ascii_mbtowc+0x16>
 800adb2:	f06f 0001 	mvn.w	r0, #1
 800adb6:	e7f8      	b.n	800adaa <__ascii_mbtowc+0x16>

0800adb8 <__malloc_lock>:
 800adb8:	4801      	ldr	r0, [pc, #4]	@ (800adc0 <__malloc_lock+0x8>)
 800adba:	f7ff bbb0 	b.w	800a51e <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	200016e8 	.word	0x200016e8

0800adc4 <__malloc_unlock>:
 800adc4:	4801      	ldr	r0, [pc, #4]	@ (800adcc <__malloc_unlock+0x8>)
 800adc6:	f7ff bbab 	b.w	800a520 <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	200016e8 	.word	0x200016e8

0800add0 <_Balloc>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	69c6      	ldr	r6, [r0, #28]
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	b976      	cbnz	r6, 800adf8 <_Balloc+0x28>
 800adda:	2010      	movs	r0, #16
 800addc:	f001 f89e 	bl	800bf1c <malloc>
 800ade0:	4602      	mov	r2, r0
 800ade2:	61e0      	str	r0, [r4, #28]
 800ade4:	b920      	cbnz	r0, 800adf0 <_Balloc+0x20>
 800ade6:	216b      	movs	r1, #107	@ 0x6b
 800ade8:	4b17      	ldr	r3, [pc, #92]	@ (800ae48 <_Balloc+0x78>)
 800adea:	4818      	ldr	r0, [pc, #96]	@ (800ae4c <_Balloc+0x7c>)
 800adec:	f001 f864 	bl	800beb8 <__assert_func>
 800adf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf4:	6006      	str	r6, [r0, #0]
 800adf6:	60c6      	str	r6, [r0, #12]
 800adf8:	69e6      	ldr	r6, [r4, #28]
 800adfa:	68f3      	ldr	r3, [r6, #12]
 800adfc:	b183      	cbz	r3, 800ae20 <_Balloc+0x50>
 800adfe:	69e3      	ldr	r3, [r4, #28]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae06:	b9b8      	cbnz	r0, 800ae38 <_Balloc+0x68>
 800ae08:	2101      	movs	r1, #1
 800ae0a:	fa01 f605 	lsl.w	r6, r1, r5
 800ae0e:	1d72      	adds	r2, r6, #5
 800ae10:	4620      	mov	r0, r4
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	f001 f86e 	bl	800bef4 <_calloc_r>
 800ae18:	b160      	cbz	r0, 800ae34 <_Balloc+0x64>
 800ae1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae1e:	e00e      	b.n	800ae3e <_Balloc+0x6e>
 800ae20:	2221      	movs	r2, #33	@ 0x21
 800ae22:	2104      	movs	r1, #4
 800ae24:	4620      	mov	r0, r4
 800ae26:	f001 f865 	bl	800bef4 <_calloc_r>
 800ae2a:	69e3      	ldr	r3, [r4, #28]
 800ae2c:	60f0      	str	r0, [r6, #12]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e4      	bne.n	800adfe <_Balloc+0x2e>
 800ae34:	2000      	movs	r0, #0
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	6802      	ldr	r2, [r0, #0]
 800ae3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae44:	e7f7      	b.n	800ae36 <_Balloc+0x66>
 800ae46:	bf00      	nop
 800ae48:	0800c9a5 	.word	0x0800c9a5
 800ae4c:	0800c9bc 	.word	0x0800c9bc

0800ae50 <_Bfree>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	69c6      	ldr	r6, [r0, #28]
 800ae54:	4605      	mov	r5, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	b976      	cbnz	r6, 800ae78 <_Bfree+0x28>
 800ae5a:	2010      	movs	r0, #16
 800ae5c:	f001 f85e 	bl	800bf1c <malloc>
 800ae60:	4602      	mov	r2, r0
 800ae62:	61e8      	str	r0, [r5, #28]
 800ae64:	b920      	cbnz	r0, 800ae70 <_Bfree+0x20>
 800ae66:	218f      	movs	r1, #143	@ 0x8f
 800ae68:	4b08      	ldr	r3, [pc, #32]	@ (800ae8c <_Bfree+0x3c>)
 800ae6a:	4809      	ldr	r0, [pc, #36]	@ (800ae90 <_Bfree+0x40>)
 800ae6c:	f001 f824 	bl	800beb8 <__assert_func>
 800ae70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae74:	6006      	str	r6, [r0, #0]
 800ae76:	60c6      	str	r6, [r0, #12]
 800ae78:	b13c      	cbz	r4, 800ae8a <_Bfree+0x3a>
 800ae7a:	69eb      	ldr	r3, [r5, #28]
 800ae7c:	6862      	ldr	r2, [r4, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae84:	6021      	str	r1, [r4, #0]
 800ae86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	0800c9a5 	.word	0x0800c9a5
 800ae90:	0800c9bc 	.word	0x0800c9bc

0800ae94 <__multadd>:
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	4607      	mov	r7, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	461e      	mov	r6, r3
 800ae9e:	2000      	movs	r0, #0
 800aea0:	690d      	ldr	r5, [r1, #16]
 800aea2:	f101 0c14 	add.w	ip, r1, #20
 800aea6:	f8dc 3000 	ldr.w	r3, [ip]
 800aeaa:	3001      	adds	r0, #1
 800aeac:	b299      	uxth	r1, r3
 800aeae:	fb02 6101 	mla	r1, r2, r1, r6
 800aeb2:	0c1e      	lsrs	r6, r3, #16
 800aeb4:	0c0b      	lsrs	r3, r1, #16
 800aeb6:	fb02 3306 	mla	r3, r2, r6, r3
 800aeba:	b289      	uxth	r1, r1
 800aebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aec0:	4285      	cmp	r5, r0
 800aec2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aec6:	f84c 1b04 	str.w	r1, [ip], #4
 800aeca:	dcec      	bgt.n	800aea6 <__multadd+0x12>
 800aecc:	b30e      	cbz	r6, 800af12 <__multadd+0x7e>
 800aece:	68a3      	ldr	r3, [r4, #8]
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc19      	bgt.n	800af08 <__multadd+0x74>
 800aed4:	6861      	ldr	r1, [r4, #4]
 800aed6:	4638      	mov	r0, r7
 800aed8:	3101      	adds	r1, #1
 800aeda:	f7ff ff79 	bl	800add0 <_Balloc>
 800aede:	4680      	mov	r8, r0
 800aee0:	b928      	cbnz	r0, 800aeee <__multadd+0x5a>
 800aee2:	4602      	mov	r2, r0
 800aee4:	21ba      	movs	r1, #186	@ 0xba
 800aee6:	4b0c      	ldr	r3, [pc, #48]	@ (800af18 <__multadd+0x84>)
 800aee8:	480c      	ldr	r0, [pc, #48]	@ (800af1c <__multadd+0x88>)
 800aeea:	f000 ffe5 	bl	800beb8 <__assert_func>
 800aeee:	6922      	ldr	r2, [r4, #16]
 800aef0:	f104 010c 	add.w	r1, r4, #12
 800aef4:	3202      	adds	r2, #2
 800aef6:	0092      	lsls	r2, r2, #2
 800aef8:	300c      	adds	r0, #12
 800aefa:	f7ff fb12 	bl	800a522 <memcpy>
 800aefe:	4621      	mov	r1, r4
 800af00:	4638      	mov	r0, r7
 800af02:	f7ff ffa5 	bl	800ae50 <_Bfree>
 800af06:	4644      	mov	r4, r8
 800af08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af0c:	3501      	adds	r5, #1
 800af0e:	615e      	str	r6, [r3, #20]
 800af10:	6125      	str	r5, [r4, #16]
 800af12:	4620      	mov	r0, r4
 800af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af18:	0800c934 	.word	0x0800c934
 800af1c:	0800c9bc 	.word	0x0800c9bc

0800af20 <__s2b>:
 800af20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af24:	4615      	mov	r5, r2
 800af26:	2209      	movs	r2, #9
 800af28:	461f      	mov	r7, r3
 800af2a:	3308      	adds	r3, #8
 800af2c:	460c      	mov	r4, r1
 800af2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af32:	4606      	mov	r6, r0
 800af34:	2201      	movs	r2, #1
 800af36:	2100      	movs	r1, #0
 800af38:	429a      	cmp	r2, r3
 800af3a:	db09      	blt.n	800af50 <__s2b+0x30>
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7ff ff47 	bl	800add0 <_Balloc>
 800af42:	b940      	cbnz	r0, 800af56 <__s2b+0x36>
 800af44:	4602      	mov	r2, r0
 800af46:	21d3      	movs	r1, #211	@ 0xd3
 800af48:	4b18      	ldr	r3, [pc, #96]	@ (800afac <__s2b+0x8c>)
 800af4a:	4819      	ldr	r0, [pc, #100]	@ (800afb0 <__s2b+0x90>)
 800af4c:	f000 ffb4 	bl	800beb8 <__assert_func>
 800af50:	0052      	lsls	r2, r2, #1
 800af52:	3101      	adds	r1, #1
 800af54:	e7f0      	b.n	800af38 <__s2b+0x18>
 800af56:	9b08      	ldr	r3, [sp, #32]
 800af58:	2d09      	cmp	r5, #9
 800af5a:	6143      	str	r3, [r0, #20]
 800af5c:	f04f 0301 	mov.w	r3, #1
 800af60:	6103      	str	r3, [r0, #16]
 800af62:	dd16      	ble.n	800af92 <__s2b+0x72>
 800af64:	f104 0909 	add.w	r9, r4, #9
 800af68:	46c8      	mov	r8, r9
 800af6a:	442c      	add	r4, r5
 800af6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af70:	4601      	mov	r1, r0
 800af72:	220a      	movs	r2, #10
 800af74:	4630      	mov	r0, r6
 800af76:	3b30      	subs	r3, #48	@ 0x30
 800af78:	f7ff ff8c 	bl	800ae94 <__multadd>
 800af7c:	45a0      	cmp	r8, r4
 800af7e:	d1f5      	bne.n	800af6c <__s2b+0x4c>
 800af80:	f1a5 0408 	sub.w	r4, r5, #8
 800af84:	444c      	add	r4, r9
 800af86:	1b2d      	subs	r5, r5, r4
 800af88:	1963      	adds	r3, r4, r5
 800af8a:	42bb      	cmp	r3, r7
 800af8c:	db04      	blt.n	800af98 <__s2b+0x78>
 800af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af92:	2509      	movs	r5, #9
 800af94:	340a      	adds	r4, #10
 800af96:	e7f6      	b.n	800af86 <__s2b+0x66>
 800af98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af9c:	4601      	mov	r1, r0
 800af9e:	220a      	movs	r2, #10
 800afa0:	4630      	mov	r0, r6
 800afa2:	3b30      	subs	r3, #48	@ 0x30
 800afa4:	f7ff ff76 	bl	800ae94 <__multadd>
 800afa8:	e7ee      	b.n	800af88 <__s2b+0x68>
 800afaa:	bf00      	nop
 800afac:	0800c934 	.word	0x0800c934
 800afb0:	0800c9bc 	.word	0x0800c9bc

0800afb4 <__hi0bits>:
 800afb4:	4603      	mov	r3, r0
 800afb6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afba:	bf3a      	itte	cc
 800afbc:	0403      	lslcc	r3, r0, #16
 800afbe:	2010      	movcc	r0, #16
 800afc0:	2000      	movcs	r0, #0
 800afc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afc6:	bf3c      	itt	cc
 800afc8:	021b      	lslcc	r3, r3, #8
 800afca:	3008      	addcc	r0, #8
 800afcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afd0:	bf3c      	itt	cc
 800afd2:	011b      	lslcc	r3, r3, #4
 800afd4:	3004      	addcc	r0, #4
 800afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afda:	bf3c      	itt	cc
 800afdc:	009b      	lslcc	r3, r3, #2
 800afde:	3002      	addcc	r0, #2
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db05      	blt.n	800aff0 <__hi0bits+0x3c>
 800afe4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800afe8:	f100 0001 	add.w	r0, r0, #1
 800afec:	bf08      	it	eq
 800afee:	2020      	moveq	r0, #32
 800aff0:	4770      	bx	lr

0800aff2 <__lo0bits>:
 800aff2:	6803      	ldr	r3, [r0, #0]
 800aff4:	4602      	mov	r2, r0
 800aff6:	f013 0007 	ands.w	r0, r3, #7
 800affa:	d00b      	beq.n	800b014 <__lo0bits+0x22>
 800affc:	07d9      	lsls	r1, r3, #31
 800affe:	d421      	bmi.n	800b044 <__lo0bits+0x52>
 800b000:	0798      	lsls	r0, r3, #30
 800b002:	bf49      	itett	mi
 800b004:	085b      	lsrmi	r3, r3, #1
 800b006:	089b      	lsrpl	r3, r3, #2
 800b008:	2001      	movmi	r0, #1
 800b00a:	6013      	strmi	r3, [r2, #0]
 800b00c:	bf5c      	itt	pl
 800b00e:	2002      	movpl	r0, #2
 800b010:	6013      	strpl	r3, [r2, #0]
 800b012:	4770      	bx	lr
 800b014:	b299      	uxth	r1, r3
 800b016:	b909      	cbnz	r1, 800b01c <__lo0bits+0x2a>
 800b018:	2010      	movs	r0, #16
 800b01a:	0c1b      	lsrs	r3, r3, #16
 800b01c:	b2d9      	uxtb	r1, r3
 800b01e:	b909      	cbnz	r1, 800b024 <__lo0bits+0x32>
 800b020:	3008      	adds	r0, #8
 800b022:	0a1b      	lsrs	r3, r3, #8
 800b024:	0719      	lsls	r1, r3, #28
 800b026:	bf04      	itt	eq
 800b028:	091b      	lsreq	r3, r3, #4
 800b02a:	3004      	addeq	r0, #4
 800b02c:	0799      	lsls	r1, r3, #30
 800b02e:	bf04      	itt	eq
 800b030:	089b      	lsreq	r3, r3, #2
 800b032:	3002      	addeq	r0, #2
 800b034:	07d9      	lsls	r1, r3, #31
 800b036:	d403      	bmi.n	800b040 <__lo0bits+0x4e>
 800b038:	085b      	lsrs	r3, r3, #1
 800b03a:	f100 0001 	add.w	r0, r0, #1
 800b03e:	d003      	beq.n	800b048 <__lo0bits+0x56>
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	4770      	bx	lr
 800b044:	2000      	movs	r0, #0
 800b046:	4770      	bx	lr
 800b048:	2020      	movs	r0, #32
 800b04a:	4770      	bx	lr

0800b04c <__i2b>:
 800b04c:	b510      	push	{r4, lr}
 800b04e:	460c      	mov	r4, r1
 800b050:	2101      	movs	r1, #1
 800b052:	f7ff febd 	bl	800add0 <_Balloc>
 800b056:	4602      	mov	r2, r0
 800b058:	b928      	cbnz	r0, 800b066 <__i2b+0x1a>
 800b05a:	f240 1145 	movw	r1, #325	@ 0x145
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <__i2b+0x24>)
 800b060:	4804      	ldr	r0, [pc, #16]	@ (800b074 <__i2b+0x28>)
 800b062:	f000 ff29 	bl	800beb8 <__assert_func>
 800b066:	2301      	movs	r3, #1
 800b068:	6144      	str	r4, [r0, #20]
 800b06a:	6103      	str	r3, [r0, #16]
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	bf00      	nop
 800b070:	0800c934 	.word	0x0800c934
 800b074:	0800c9bc 	.word	0x0800c9bc

0800b078 <__multiply>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	4617      	mov	r7, r2
 800b07e:	690a      	ldr	r2, [r1, #16]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	4689      	mov	r9, r1
 800b084:	429a      	cmp	r2, r3
 800b086:	bfa2      	ittt	ge
 800b088:	463b      	movge	r3, r7
 800b08a:	460f      	movge	r7, r1
 800b08c:	4699      	movge	r9, r3
 800b08e:	693d      	ldr	r5, [r7, #16]
 800b090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	eb05 060a 	add.w	r6, r5, sl
 800b09c:	42b3      	cmp	r3, r6
 800b09e:	b085      	sub	sp, #20
 800b0a0:	bfb8      	it	lt
 800b0a2:	3101      	addlt	r1, #1
 800b0a4:	f7ff fe94 	bl	800add0 <_Balloc>
 800b0a8:	b930      	cbnz	r0, 800b0b8 <__multiply+0x40>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0b0:	4b40      	ldr	r3, [pc, #256]	@ (800b1b4 <__multiply+0x13c>)
 800b0b2:	4841      	ldr	r0, [pc, #260]	@ (800b1b8 <__multiply+0x140>)
 800b0b4:	f000 ff00 	bl	800beb8 <__assert_func>
 800b0b8:	f100 0414 	add.w	r4, r0, #20
 800b0bc:	4623      	mov	r3, r4
 800b0be:	2200      	movs	r2, #0
 800b0c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b0c4:	4573      	cmp	r3, lr
 800b0c6:	d320      	bcc.n	800b10a <__multiply+0x92>
 800b0c8:	f107 0814 	add.w	r8, r7, #20
 800b0cc:	f109 0114 	add.w	r1, r9, #20
 800b0d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b0d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b0d8:	9302      	str	r3, [sp, #8]
 800b0da:	1beb      	subs	r3, r5, r7
 800b0dc:	3b15      	subs	r3, #21
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	3715      	adds	r7, #21
 800b0e6:	42bd      	cmp	r5, r7
 800b0e8:	bf38      	it	cc
 800b0ea:	2304      	movcc	r3, #4
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	9103      	str	r1, [sp, #12]
 800b0f2:	428b      	cmp	r3, r1
 800b0f4:	d80c      	bhi.n	800b110 <__multiply+0x98>
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	dd03      	ble.n	800b102 <__multiply+0x8a>
 800b0fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d055      	beq.n	800b1ae <__multiply+0x136>
 800b102:	6106      	str	r6, [r0, #16]
 800b104:	b005      	add	sp, #20
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	f843 2b04 	str.w	r2, [r3], #4
 800b10e:	e7d9      	b.n	800b0c4 <__multiply+0x4c>
 800b110:	f8b1 a000 	ldrh.w	sl, [r1]
 800b114:	f1ba 0f00 	cmp.w	sl, #0
 800b118:	d01f      	beq.n	800b15a <__multiply+0xe2>
 800b11a:	46c4      	mov	ip, r8
 800b11c:	46a1      	mov	r9, r4
 800b11e:	2700      	movs	r7, #0
 800b120:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b124:	f8d9 3000 	ldr.w	r3, [r9]
 800b128:	fa1f fb82 	uxth.w	fp, r2
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	fb0a 330b 	mla	r3, sl, fp, r3
 800b132:	443b      	add	r3, r7
 800b134:	f8d9 7000 	ldr.w	r7, [r9]
 800b138:	0c12      	lsrs	r2, r2, #16
 800b13a:	0c3f      	lsrs	r7, r7, #16
 800b13c:	fb0a 7202 	mla	r2, sl, r2, r7
 800b140:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b144:	b29b      	uxth	r3, r3
 800b146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b14a:	4565      	cmp	r5, ip
 800b14c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b150:	f849 3b04 	str.w	r3, [r9], #4
 800b154:	d8e4      	bhi.n	800b120 <__multiply+0xa8>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	50e7      	str	r7, [r4, r3]
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	3104      	adds	r1, #4
 800b15e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b162:	f1b9 0f00 	cmp.w	r9, #0
 800b166:	d020      	beq.n	800b1aa <__multiply+0x132>
 800b168:	4647      	mov	r7, r8
 800b16a:	46a4      	mov	ip, r4
 800b16c:	f04f 0a00 	mov.w	sl, #0
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	f8b7 b000 	ldrh.w	fp, [r7]
 800b176:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	fb09 220b 	mla	r2, r9, fp, r2
 800b180:	4452      	add	r2, sl
 800b182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b186:	f84c 3b04 	str.w	r3, [ip], #4
 800b18a:	f857 3b04 	ldr.w	r3, [r7], #4
 800b18e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b192:	f8bc 3000 	ldrh.w	r3, [ip]
 800b196:	42bd      	cmp	r5, r7
 800b198:	fb09 330a 	mla	r3, r9, sl, r3
 800b19c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b1a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1a4:	d8e5      	bhi.n	800b172 <__multiply+0xfa>
 800b1a6:	9a01      	ldr	r2, [sp, #4]
 800b1a8:	50a3      	str	r3, [r4, r2]
 800b1aa:	3404      	adds	r4, #4
 800b1ac:	e79f      	b.n	800b0ee <__multiply+0x76>
 800b1ae:	3e01      	subs	r6, #1
 800b1b0:	e7a1      	b.n	800b0f6 <__multiply+0x7e>
 800b1b2:	bf00      	nop
 800b1b4:	0800c934 	.word	0x0800c934
 800b1b8:	0800c9bc 	.word	0x0800c9bc

0800b1bc <__pow5mult>:
 800b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c0:	4615      	mov	r5, r2
 800b1c2:	f012 0203 	ands.w	r2, r2, #3
 800b1c6:	4607      	mov	r7, r0
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	d007      	beq.n	800b1dc <__pow5mult+0x20>
 800b1cc:	4c25      	ldr	r4, [pc, #148]	@ (800b264 <__pow5mult+0xa8>)
 800b1ce:	3a01      	subs	r2, #1
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1d6:	f7ff fe5d 	bl	800ae94 <__multadd>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	10ad      	asrs	r5, r5, #2
 800b1de:	d03d      	beq.n	800b25c <__pow5mult+0xa0>
 800b1e0:	69fc      	ldr	r4, [r7, #28]
 800b1e2:	b97c      	cbnz	r4, 800b204 <__pow5mult+0x48>
 800b1e4:	2010      	movs	r0, #16
 800b1e6:	f000 fe99 	bl	800bf1c <malloc>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	61f8      	str	r0, [r7, #28]
 800b1ee:	b928      	cbnz	r0, 800b1fc <__pow5mult+0x40>
 800b1f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b268 <__pow5mult+0xac>)
 800b1f6:	481d      	ldr	r0, [pc, #116]	@ (800b26c <__pow5mult+0xb0>)
 800b1f8:	f000 fe5e 	bl	800beb8 <__assert_func>
 800b1fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b200:	6004      	str	r4, [r0, #0]
 800b202:	60c4      	str	r4, [r0, #12]
 800b204:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b20c:	b94c      	cbnz	r4, 800b222 <__pow5mult+0x66>
 800b20e:	f240 2171 	movw	r1, #625	@ 0x271
 800b212:	4638      	mov	r0, r7
 800b214:	f7ff ff1a 	bl	800b04c <__i2b>
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	f04f 0900 	mov.w	r9, #0
 800b226:	07eb      	lsls	r3, r5, #31
 800b228:	d50a      	bpl.n	800b240 <__pow5mult+0x84>
 800b22a:	4631      	mov	r1, r6
 800b22c:	4622      	mov	r2, r4
 800b22e:	4638      	mov	r0, r7
 800b230:	f7ff ff22 	bl	800b078 <__multiply>
 800b234:	4680      	mov	r8, r0
 800b236:	4631      	mov	r1, r6
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff fe09 	bl	800ae50 <_Bfree>
 800b23e:	4646      	mov	r6, r8
 800b240:	106d      	asrs	r5, r5, #1
 800b242:	d00b      	beq.n	800b25c <__pow5mult+0xa0>
 800b244:	6820      	ldr	r0, [r4, #0]
 800b246:	b938      	cbnz	r0, 800b258 <__pow5mult+0x9c>
 800b248:	4622      	mov	r2, r4
 800b24a:	4621      	mov	r1, r4
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7ff ff13 	bl	800b078 <__multiply>
 800b252:	6020      	str	r0, [r4, #0]
 800b254:	f8c0 9000 	str.w	r9, [r0]
 800b258:	4604      	mov	r4, r0
 800b25a:	e7e4      	b.n	800b226 <__pow5mult+0x6a>
 800b25c:	4630      	mov	r0, r6
 800b25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b262:	bf00      	nop
 800b264:	0800cad8 	.word	0x0800cad8
 800b268:	0800c9a5 	.word	0x0800c9a5
 800b26c:	0800c9bc 	.word	0x0800c9bc

0800b270 <__lshift>:
 800b270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	460c      	mov	r4, r1
 800b276:	4607      	mov	r7, r0
 800b278:	4691      	mov	r9, r2
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6849      	ldr	r1, [r1, #4]
 800b27e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b288:	f108 0601 	add.w	r6, r8, #1
 800b28c:	42b3      	cmp	r3, r6
 800b28e:	db0b      	blt.n	800b2a8 <__lshift+0x38>
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff fd9d 	bl	800add0 <_Balloc>
 800b296:	4605      	mov	r5, r0
 800b298:	b948      	cbnz	r0, 800b2ae <__lshift+0x3e>
 800b29a:	4602      	mov	r2, r0
 800b29c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2a0:	4b27      	ldr	r3, [pc, #156]	@ (800b340 <__lshift+0xd0>)
 800b2a2:	4828      	ldr	r0, [pc, #160]	@ (800b344 <__lshift+0xd4>)
 800b2a4:	f000 fe08 	bl	800beb8 <__assert_func>
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	e7ee      	b.n	800b28c <__lshift+0x1c>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f100 0114 	add.w	r1, r0, #20
 800b2b4:	f100 0210 	add.w	r2, r0, #16
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	4553      	cmp	r3, sl
 800b2bc:	db33      	blt.n	800b326 <__lshift+0xb6>
 800b2be:	6920      	ldr	r0, [r4, #16]
 800b2c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2c4:	f104 0314 	add.w	r3, r4, #20
 800b2c8:	f019 091f 	ands.w	r9, r9, #31
 800b2cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2d4:	d02b      	beq.n	800b32e <__lshift+0xbe>
 800b2d6:	468a      	mov	sl, r1
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f1c9 0e20 	rsb	lr, r9, #32
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b2e4:	4310      	orrs	r0, r2
 800b2e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	459c      	cmp	ip, r3
 800b2f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2f4:	d8f3      	bhi.n	800b2de <__lshift+0x6e>
 800b2f6:	ebac 0304 	sub.w	r3, ip, r4
 800b2fa:	3b15      	subs	r3, #21
 800b2fc:	f023 0303 	bic.w	r3, r3, #3
 800b300:	3304      	adds	r3, #4
 800b302:	f104 0015 	add.w	r0, r4, #21
 800b306:	4560      	cmp	r0, ip
 800b308:	bf88      	it	hi
 800b30a:	2304      	movhi	r3, #4
 800b30c:	50ca      	str	r2, [r1, r3]
 800b30e:	b10a      	cbz	r2, 800b314 <__lshift+0xa4>
 800b310:	f108 0602 	add.w	r6, r8, #2
 800b314:	3e01      	subs	r6, #1
 800b316:	4638      	mov	r0, r7
 800b318:	4621      	mov	r1, r4
 800b31a:	612e      	str	r6, [r5, #16]
 800b31c:	f7ff fd98 	bl	800ae50 <_Bfree>
 800b320:	4628      	mov	r0, r5
 800b322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b326:	f842 0f04 	str.w	r0, [r2, #4]!
 800b32a:	3301      	adds	r3, #1
 800b32c:	e7c5      	b.n	800b2ba <__lshift+0x4a>
 800b32e:	3904      	subs	r1, #4
 800b330:	f853 2b04 	ldr.w	r2, [r3], #4
 800b334:	459c      	cmp	ip, r3
 800b336:	f841 2f04 	str.w	r2, [r1, #4]!
 800b33a:	d8f9      	bhi.n	800b330 <__lshift+0xc0>
 800b33c:	e7ea      	b.n	800b314 <__lshift+0xa4>
 800b33e:	bf00      	nop
 800b340:	0800c934 	.word	0x0800c934
 800b344:	0800c9bc 	.word	0x0800c9bc

0800b348 <__mcmp>:
 800b348:	4603      	mov	r3, r0
 800b34a:	690a      	ldr	r2, [r1, #16]
 800b34c:	6900      	ldr	r0, [r0, #16]
 800b34e:	b530      	push	{r4, r5, lr}
 800b350:	1a80      	subs	r0, r0, r2
 800b352:	d10e      	bne.n	800b372 <__mcmp+0x2a>
 800b354:	3314      	adds	r3, #20
 800b356:	3114      	adds	r1, #20
 800b358:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b35c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b360:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b364:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b368:	4295      	cmp	r5, r2
 800b36a:	d003      	beq.n	800b374 <__mcmp+0x2c>
 800b36c:	d205      	bcs.n	800b37a <__mcmp+0x32>
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	bd30      	pop	{r4, r5, pc}
 800b374:	42a3      	cmp	r3, r4
 800b376:	d3f3      	bcc.n	800b360 <__mcmp+0x18>
 800b378:	e7fb      	b.n	800b372 <__mcmp+0x2a>
 800b37a:	2001      	movs	r0, #1
 800b37c:	e7f9      	b.n	800b372 <__mcmp+0x2a>
	...

0800b380 <__mdiff>:
 800b380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	4689      	mov	r9, r1
 800b386:	4606      	mov	r6, r0
 800b388:	4611      	mov	r1, r2
 800b38a:	4648      	mov	r0, r9
 800b38c:	4614      	mov	r4, r2
 800b38e:	f7ff ffdb 	bl	800b348 <__mcmp>
 800b392:	1e05      	subs	r5, r0, #0
 800b394:	d112      	bne.n	800b3bc <__mdiff+0x3c>
 800b396:	4629      	mov	r1, r5
 800b398:	4630      	mov	r0, r6
 800b39a:	f7ff fd19 	bl	800add0 <_Balloc>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	b928      	cbnz	r0, 800b3ae <__mdiff+0x2e>
 800b3a2:	f240 2137 	movw	r1, #567	@ 0x237
 800b3a6:	4b3e      	ldr	r3, [pc, #248]	@ (800b4a0 <__mdiff+0x120>)
 800b3a8:	483e      	ldr	r0, [pc, #248]	@ (800b4a4 <__mdiff+0x124>)
 800b3aa:	f000 fd85 	bl	800beb8 <__assert_func>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	b003      	add	sp, #12
 800b3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3bc:	bfbc      	itt	lt
 800b3be:	464b      	movlt	r3, r9
 800b3c0:	46a1      	movlt	r9, r4
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3c8:	bfba      	itte	lt
 800b3ca:	461c      	movlt	r4, r3
 800b3cc:	2501      	movlt	r5, #1
 800b3ce:	2500      	movge	r5, #0
 800b3d0:	f7ff fcfe 	bl	800add0 <_Balloc>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	b918      	cbnz	r0, 800b3e0 <__mdiff+0x60>
 800b3d8:	f240 2145 	movw	r1, #581	@ 0x245
 800b3dc:	4b30      	ldr	r3, [pc, #192]	@ (800b4a0 <__mdiff+0x120>)
 800b3de:	e7e3      	b.n	800b3a8 <__mdiff+0x28>
 800b3e0:	f100 0b14 	add.w	fp, r0, #20
 800b3e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3e8:	f109 0310 	add.w	r3, r9, #16
 800b3ec:	60c5      	str	r5, [r0, #12]
 800b3ee:	f04f 0c00 	mov.w	ip, #0
 800b3f2:	f109 0514 	add.w	r5, r9, #20
 800b3f6:	46d9      	mov	r9, fp
 800b3f8:	6926      	ldr	r6, [r4, #16]
 800b3fa:	f104 0e14 	add.w	lr, r4, #20
 800b3fe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b402:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b40e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b412:	b281      	uxth	r1, r0
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	fa1f f38a 	uxth.w	r3, sl
 800b41a:	1a5b      	subs	r3, r3, r1
 800b41c:	0c00      	lsrs	r0, r0, #16
 800b41e:	4463      	add	r3, ip
 800b420:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b424:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b428:	b29b      	uxth	r3, r3
 800b42a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b42e:	4576      	cmp	r6, lr
 800b430:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b434:	f849 3b04 	str.w	r3, [r9], #4
 800b438:	d8e6      	bhi.n	800b408 <__mdiff+0x88>
 800b43a:	1b33      	subs	r3, r6, r4
 800b43c:	3b15      	subs	r3, #21
 800b43e:	f023 0303 	bic.w	r3, r3, #3
 800b442:	3415      	adds	r4, #21
 800b444:	3304      	adds	r3, #4
 800b446:	42a6      	cmp	r6, r4
 800b448:	bf38      	it	cc
 800b44a:	2304      	movcc	r3, #4
 800b44c:	441d      	add	r5, r3
 800b44e:	445b      	add	r3, fp
 800b450:	461e      	mov	r6, r3
 800b452:	462c      	mov	r4, r5
 800b454:	4544      	cmp	r4, r8
 800b456:	d30e      	bcc.n	800b476 <__mdiff+0xf6>
 800b458:	f108 0103 	add.w	r1, r8, #3
 800b45c:	1b49      	subs	r1, r1, r5
 800b45e:	f021 0103 	bic.w	r1, r1, #3
 800b462:	3d03      	subs	r5, #3
 800b464:	45a8      	cmp	r8, r5
 800b466:	bf38      	it	cc
 800b468:	2100      	movcc	r1, #0
 800b46a:	440b      	add	r3, r1
 800b46c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b470:	b199      	cbz	r1, 800b49a <__mdiff+0x11a>
 800b472:	6117      	str	r7, [r2, #16]
 800b474:	e79e      	b.n	800b3b4 <__mdiff+0x34>
 800b476:	46e6      	mov	lr, ip
 800b478:	f854 1b04 	ldr.w	r1, [r4], #4
 800b47c:	fa1f fc81 	uxth.w	ip, r1
 800b480:	44f4      	add	ip, lr
 800b482:	0c08      	lsrs	r0, r1, #16
 800b484:	4471      	add	r1, lr
 800b486:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b48a:	b289      	uxth	r1, r1
 800b48c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b490:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b494:	f846 1b04 	str.w	r1, [r6], #4
 800b498:	e7dc      	b.n	800b454 <__mdiff+0xd4>
 800b49a:	3f01      	subs	r7, #1
 800b49c:	e7e6      	b.n	800b46c <__mdiff+0xec>
 800b49e:	bf00      	nop
 800b4a0:	0800c934 	.word	0x0800c934
 800b4a4:	0800c9bc 	.word	0x0800c9bc

0800b4a8 <__ulp>:
 800b4a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b4e4 <__ulp+0x3c>)
 800b4aa:	400b      	ands	r3, r1
 800b4ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc08      	bgt.n	800b4c6 <__ulp+0x1e>
 800b4b4:	425b      	negs	r3, r3
 800b4b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b4ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4be:	da04      	bge.n	800b4ca <__ulp+0x22>
 800b4c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b4c4:	4113      	asrs	r3, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	e008      	b.n	800b4dc <__ulp+0x34>
 800b4ca:	f1a2 0314 	sub.w	r3, r2, #20
 800b4ce:	2b1e      	cmp	r3, #30
 800b4d0:	bfd6      	itet	le
 800b4d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b4d6:	2201      	movgt	r2, #1
 800b4d8:	40da      	lsrle	r2, r3
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	7ff00000 	.word	0x7ff00000

0800b4e8 <__b2d>:
 800b4e8:	6902      	ldr	r2, [r0, #16]
 800b4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ec:	f100 0614 	add.w	r6, r0, #20
 800b4f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b4f4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b4f8:	4f1e      	ldr	r7, [pc, #120]	@ (800b574 <__b2d+0x8c>)
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7ff fd5a 	bl	800afb4 <__hi0bits>
 800b500:	4603      	mov	r3, r0
 800b502:	f1c0 0020 	rsb	r0, r0, #32
 800b506:	2b0a      	cmp	r3, #10
 800b508:	f1a2 0504 	sub.w	r5, r2, #4
 800b50c:	6008      	str	r0, [r1, #0]
 800b50e:	dc12      	bgt.n	800b536 <__b2d+0x4e>
 800b510:	42ae      	cmp	r6, r5
 800b512:	bf2c      	ite	cs
 800b514:	2200      	movcs	r2, #0
 800b516:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b51a:	f1c3 0c0b 	rsb	ip, r3, #11
 800b51e:	3315      	adds	r3, #21
 800b520:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b524:	fa04 f303 	lsl.w	r3, r4, r3
 800b528:	fa22 f20c 	lsr.w	r2, r2, ip
 800b52c:	ea4e 0107 	orr.w	r1, lr, r7
 800b530:	431a      	orrs	r2, r3
 800b532:	4610      	mov	r0, r2
 800b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b536:	42ae      	cmp	r6, r5
 800b538:	bf36      	itet	cc
 800b53a:	f1a2 0508 	subcc.w	r5, r2, #8
 800b53e:	2200      	movcs	r2, #0
 800b540:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b544:	3b0b      	subs	r3, #11
 800b546:	d012      	beq.n	800b56e <__b2d+0x86>
 800b548:	f1c3 0720 	rsb	r7, r3, #32
 800b54c:	fa22 f107 	lsr.w	r1, r2, r7
 800b550:	409c      	lsls	r4, r3
 800b552:	430c      	orrs	r4, r1
 800b554:	42b5      	cmp	r5, r6
 800b556:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b55a:	bf94      	ite	ls
 800b55c:	2400      	movls	r4, #0
 800b55e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b562:	409a      	lsls	r2, r3
 800b564:	40fc      	lsrs	r4, r7
 800b566:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b56a:	4322      	orrs	r2, r4
 800b56c:	e7e1      	b.n	800b532 <__b2d+0x4a>
 800b56e:	ea44 0107 	orr.w	r1, r4, r7
 800b572:	e7de      	b.n	800b532 <__b2d+0x4a>
 800b574:	3ff00000 	.word	0x3ff00000

0800b578 <__d2b>:
 800b578:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b57c:	2101      	movs	r1, #1
 800b57e:	4690      	mov	r8, r2
 800b580:	4699      	mov	r9, r3
 800b582:	9e08      	ldr	r6, [sp, #32]
 800b584:	f7ff fc24 	bl	800add0 <_Balloc>
 800b588:	4604      	mov	r4, r0
 800b58a:	b930      	cbnz	r0, 800b59a <__d2b+0x22>
 800b58c:	4602      	mov	r2, r0
 800b58e:	f240 310f 	movw	r1, #783	@ 0x30f
 800b592:	4b23      	ldr	r3, [pc, #140]	@ (800b620 <__d2b+0xa8>)
 800b594:	4823      	ldr	r0, [pc, #140]	@ (800b624 <__d2b+0xac>)
 800b596:	f000 fc8f 	bl	800beb8 <__assert_func>
 800b59a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b59e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5a2:	b10d      	cbz	r5, 800b5a8 <__d2b+0x30>
 800b5a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5a8:	9301      	str	r3, [sp, #4]
 800b5aa:	f1b8 0300 	subs.w	r3, r8, #0
 800b5ae:	d024      	beq.n	800b5fa <__d2b+0x82>
 800b5b0:	4668      	mov	r0, sp
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	f7ff fd1d 	bl	800aff2 <__lo0bits>
 800b5b8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5bc:	b1d8      	cbz	r0, 800b5f6 <__d2b+0x7e>
 800b5be:	f1c0 0320 	rsb	r3, r0, #32
 800b5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	40c2      	lsrs	r2, r0
 800b5ca:	6163      	str	r3, [r4, #20]
 800b5cc:	9201      	str	r2, [sp, #4]
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2201      	moveq	r2, #1
 800b5d6:	2202      	movne	r2, #2
 800b5d8:	61a3      	str	r3, [r4, #24]
 800b5da:	6122      	str	r2, [r4, #16]
 800b5dc:	b1ad      	cbz	r5, 800b60a <__d2b+0x92>
 800b5de:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b5e2:	4405      	add	r5, r0
 800b5e4:	6035      	str	r5, [r6, #0]
 800b5e6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ec:	6018      	str	r0, [r3, #0]
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	b002      	add	sp, #8
 800b5f2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b5f6:	6161      	str	r1, [r4, #20]
 800b5f8:	e7e9      	b.n	800b5ce <__d2b+0x56>
 800b5fa:	a801      	add	r0, sp, #4
 800b5fc:	f7ff fcf9 	bl	800aff2 <__lo0bits>
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	6163      	str	r3, [r4, #20]
 800b606:	3020      	adds	r0, #32
 800b608:	e7e7      	b.n	800b5da <__d2b+0x62>
 800b60a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b60e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b612:	6030      	str	r0, [r6, #0]
 800b614:	6918      	ldr	r0, [r3, #16]
 800b616:	f7ff fccd 	bl	800afb4 <__hi0bits>
 800b61a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b61e:	e7e4      	b.n	800b5ea <__d2b+0x72>
 800b620:	0800c934 	.word	0x0800c934
 800b624:	0800c9bc 	.word	0x0800c9bc

0800b628 <__ratio>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	b085      	sub	sp, #20
 800b62e:	e9cd 1000 	strd	r1, r0, [sp]
 800b632:	a902      	add	r1, sp, #8
 800b634:	f7ff ff58 	bl	800b4e8 <__b2d>
 800b638:	468b      	mov	fp, r1
 800b63a:	4606      	mov	r6, r0
 800b63c:	460f      	mov	r7, r1
 800b63e:	9800      	ldr	r0, [sp, #0]
 800b640:	a903      	add	r1, sp, #12
 800b642:	f7ff ff51 	bl	800b4e8 <__b2d>
 800b646:	460d      	mov	r5, r1
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	4689      	mov	r9, r1
 800b64c:	6919      	ldr	r1, [r3, #16]
 800b64e:	9b00      	ldr	r3, [sp, #0]
 800b650:	4604      	mov	r4, r0
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	4630      	mov	r0, r6
 800b656:	1ac9      	subs	r1, r1, r3
 800b658:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b65c:	1a9b      	subs	r3, r3, r2
 800b65e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfcd      	iteet	gt
 800b666:	463a      	movgt	r2, r7
 800b668:	462a      	movle	r2, r5
 800b66a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b66e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b672:	bfd8      	it	le
 800b674:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b678:	464b      	mov	r3, r9
 800b67a:	4622      	mov	r2, r4
 800b67c:	4659      	mov	r1, fp
 800b67e:	f7f5 f855 	bl	800072c <__aeabi_ddiv>
 800b682:	b005      	add	sp, #20
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b688 <__copybits>:
 800b688:	3901      	subs	r1, #1
 800b68a:	b570      	push	{r4, r5, r6, lr}
 800b68c:	1149      	asrs	r1, r1, #5
 800b68e:	6914      	ldr	r4, [r2, #16]
 800b690:	3101      	adds	r1, #1
 800b692:	f102 0314 	add.w	r3, r2, #20
 800b696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b69a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b69e:	1f05      	subs	r5, r0, #4
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d30c      	bcc.n	800b6be <__copybits+0x36>
 800b6a4:	1aa3      	subs	r3, r4, r2
 800b6a6:	3b11      	subs	r3, #17
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	3211      	adds	r2, #17
 800b6ae:	42a2      	cmp	r2, r4
 800b6b0:	bf88      	it	hi
 800b6b2:	2300      	movhi	r3, #0
 800b6b4:	4418      	add	r0, r3
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	4288      	cmp	r0, r1
 800b6ba:	d305      	bcc.n	800b6c8 <__copybits+0x40>
 800b6bc:	bd70      	pop	{r4, r5, r6, pc}
 800b6be:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6c2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6c6:	e7eb      	b.n	800b6a0 <__copybits+0x18>
 800b6c8:	f840 3b04 	str.w	r3, [r0], #4
 800b6cc:	e7f4      	b.n	800b6b8 <__copybits+0x30>

0800b6ce <__any_on>:
 800b6ce:	f100 0214 	add.w	r2, r0, #20
 800b6d2:	6900      	ldr	r0, [r0, #16]
 800b6d4:	114b      	asrs	r3, r1, #5
 800b6d6:	4298      	cmp	r0, r3
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	db11      	blt.n	800b700 <__any_on+0x32>
 800b6dc:	dd0a      	ble.n	800b6f4 <__any_on+0x26>
 800b6de:	f011 011f 	ands.w	r1, r1, #31
 800b6e2:	d007      	beq.n	800b6f4 <__any_on+0x26>
 800b6e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6e8:	fa24 f001 	lsr.w	r0, r4, r1
 800b6ec:	fa00 f101 	lsl.w	r1, r0, r1
 800b6f0:	428c      	cmp	r4, r1
 800b6f2:	d10b      	bne.n	800b70c <__any_on+0x3e>
 800b6f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d803      	bhi.n	800b704 <__any_on+0x36>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	bd10      	pop	{r4, pc}
 800b700:	4603      	mov	r3, r0
 800b702:	e7f7      	b.n	800b6f4 <__any_on+0x26>
 800b704:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b708:	2900      	cmp	r1, #0
 800b70a:	d0f5      	beq.n	800b6f8 <__any_on+0x2a>
 800b70c:	2001      	movs	r0, #1
 800b70e:	e7f6      	b.n	800b6fe <__any_on+0x30>

0800b710 <__ascii_wctomb>:
 800b710:	4603      	mov	r3, r0
 800b712:	4608      	mov	r0, r1
 800b714:	b141      	cbz	r1, 800b728 <__ascii_wctomb+0x18>
 800b716:	2aff      	cmp	r2, #255	@ 0xff
 800b718:	d904      	bls.n	800b724 <__ascii_wctomb+0x14>
 800b71a:	228a      	movs	r2, #138	@ 0x8a
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	4770      	bx	lr
 800b724:	2001      	movs	r0, #1
 800b726:	700a      	strb	r2, [r1, #0]
 800b728:	4770      	bx	lr

0800b72a <__ssputs_r>:
 800b72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72e:	461f      	mov	r7, r3
 800b730:	688e      	ldr	r6, [r1, #8]
 800b732:	4682      	mov	sl, r0
 800b734:	42be      	cmp	r6, r7
 800b736:	460c      	mov	r4, r1
 800b738:	4690      	mov	r8, r2
 800b73a:	680b      	ldr	r3, [r1, #0]
 800b73c:	d82d      	bhi.n	800b79a <__ssputs_r+0x70>
 800b73e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b742:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b746:	d026      	beq.n	800b796 <__ssputs_r+0x6c>
 800b748:	6965      	ldr	r5, [r4, #20]
 800b74a:	6909      	ldr	r1, [r1, #16]
 800b74c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b750:	eba3 0901 	sub.w	r9, r3, r1
 800b754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b758:	1c7b      	adds	r3, r7, #1
 800b75a:	444b      	add	r3, r9
 800b75c:	106d      	asrs	r5, r5, #1
 800b75e:	429d      	cmp	r5, r3
 800b760:	bf38      	it	cc
 800b762:	461d      	movcc	r5, r3
 800b764:	0553      	lsls	r3, r2, #21
 800b766:	d527      	bpl.n	800b7b8 <__ssputs_r+0x8e>
 800b768:	4629      	mov	r1, r5
 800b76a:	f7ff fa93 	bl	800ac94 <_malloc_r>
 800b76e:	4606      	mov	r6, r0
 800b770:	b360      	cbz	r0, 800b7cc <__ssputs_r+0xa2>
 800b772:	464a      	mov	r2, r9
 800b774:	6921      	ldr	r1, [r4, #16]
 800b776:	f7fe fed4 	bl	800a522 <memcpy>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b784:	81a3      	strh	r3, [r4, #12]
 800b786:	6126      	str	r6, [r4, #16]
 800b788:	444e      	add	r6, r9
 800b78a:	6026      	str	r6, [r4, #0]
 800b78c:	463e      	mov	r6, r7
 800b78e:	6165      	str	r5, [r4, #20]
 800b790:	eba5 0509 	sub.w	r5, r5, r9
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	42be      	cmp	r6, r7
 800b798:	d900      	bls.n	800b79c <__ssputs_r+0x72>
 800b79a:	463e      	mov	r6, r7
 800b79c:	4632      	mov	r2, r6
 800b79e:	4641      	mov	r1, r8
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	f000 fb51 	bl	800be48 <memmove>
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	68a3      	ldr	r3, [r4, #8]
 800b7aa:	1b9b      	subs	r3, r3, r6
 800b7ac:	60a3      	str	r3, [r4, #8]
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	4433      	add	r3, r6
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	f000 fbb7 	bl	800bf2c <_realloc_r>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d1e0      	bne.n	800b786 <__ssputs_r+0x5c>
 800b7c4:	4650      	mov	r0, sl
 800b7c6:	6921      	ldr	r1, [r4, #16]
 800b7c8:	f7fe fec0 	bl	800a54c <_free_r>
 800b7cc:	230c      	movs	r3, #12
 800b7ce:	f8ca 3000 	str.w	r3, [sl]
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	e7e9      	b.n	800b7b4 <__ssputs_r+0x8a>

0800b7e0 <_svfiprintf_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	4698      	mov	r8, r3
 800b7e6:	898b      	ldrh	r3, [r1, #12]
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	061b      	lsls	r3, r3, #24
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	b09d      	sub	sp, #116	@ 0x74
 800b7f2:	d510      	bpl.n	800b816 <_svfiprintf_r+0x36>
 800b7f4:	690b      	ldr	r3, [r1, #16]
 800b7f6:	b973      	cbnz	r3, 800b816 <_svfiprintf_r+0x36>
 800b7f8:	2140      	movs	r1, #64	@ 0x40
 800b7fa:	f7ff fa4b 	bl	800ac94 <_malloc_r>
 800b7fe:	6028      	str	r0, [r5, #0]
 800b800:	6128      	str	r0, [r5, #16]
 800b802:	b930      	cbnz	r0, 800b812 <_svfiprintf_r+0x32>
 800b804:	230c      	movs	r3, #12
 800b806:	603b      	str	r3, [r7, #0]
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	b01d      	add	sp, #116	@ 0x74
 800b80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b812:	2340      	movs	r3, #64	@ 0x40
 800b814:	616b      	str	r3, [r5, #20]
 800b816:	2300      	movs	r3, #0
 800b818:	9309      	str	r3, [sp, #36]	@ 0x24
 800b81a:	2320      	movs	r3, #32
 800b81c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b820:	2330      	movs	r3, #48	@ 0x30
 800b822:	f04f 0901 	mov.w	r9, #1
 800b826:	f8cd 800c 	str.w	r8, [sp, #12]
 800b82a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b9c4 <_svfiprintf_r+0x1e4>
 800b82e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b832:	4623      	mov	r3, r4
 800b834:	469a      	mov	sl, r3
 800b836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b83a:	b10a      	cbz	r2, 800b840 <_svfiprintf_r+0x60>
 800b83c:	2a25      	cmp	r2, #37	@ 0x25
 800b83e:	d1f9      	bne.n	800b834 <_svfiprintf_r+0x54>
 800b840:	ebba 0b04 	subs.w	fp, sl, r4
 800b844:	d00b      	beq.n	800b85e <_svfiprintf_r+0x7e>
 800b846:	465b      	mov	r3, fp
 800b848:	4622      	mov	r2, r4
 800b84a:	4629      	mov	r1, r5
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff ff6c 	bl	800b72a <__ssputs_r>
 800b852:	3001      	adds	r0, #1
 800b854:	f000 80a7 	beq.w	800b9a6 <_svfiprintf_r+0x1c6>
 800b858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b85a:	445a      	add	r2, fp
 800b85c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b85e:	f89a 3000 	ldrb.w	r3, [sl]
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 809f 	beq.w	800b9a6 <_svfiprintf_r+0x1c6>
 800b868:	2300      	movs	r3, #0
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b872:	f10a 0a01 	add.w	sl, sl, #1
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	9307      	str	r3, [sp, #28]
 800b87a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b87e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b880:	4654      	mov	r4, sl
 800b882:	2205      	movs	r2, #5
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	484e      	ldr	r0, [pc, #312]	@ (800b9c4 <_svfiprintf_r+0x1e4>)
 800b88a:	f000 fb07 	bl	800be9c <memchr>
 800b88e:	9a04      	ldr	r2, [sp, #16]
 800b890:	b9d8      	cbnz	r0, 800b8ca <_svfiprintf_r+0xea>
 800b892:	06d0      	lsls	r0, r2, #27
 800b894:	bf44      	itt	mi
 800b896:	2320      	movmi	r3, #32
 800b898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b89c:	0711      	lsls	r1, r2, #28
 800b89e:	bf44      	itt	mi
 800b8a0:	232b      	movmi	r3, #43	@ 0x2b
 800b8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ac:	d015      	beq.n	800b8da <_svfiprintf_r+0xfa>
 800b8ae:	4654      	mov	r4, sl
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f04f 0c0a 	mov.w	ip, #10
 800b8b6:	9a07      	ldr	r2, [sp, #28]
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8be:	3b30      	subs	r3, #48	@ 0x30
 800b8c0:	2b09      	cmp	r3, #9
 800b8c2:	d94b      	bls.n	800b95c <_svfiprintf_r+0x17c>
 800b8c4:	b1b0      	cbz	r0, 800b8f4 <_svfiprintf_r+0x114>
 800b8c6:	9207      	str	r2, [sp, #28]
 800b8c8:	e014      	b.n	800b8f4 <_svfiprintf_r+0x114>
 800b8ca:	eba0 0308 	sub.w	r3, r0, r8
 800b8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	46a2      	mov	sl, r4
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	e7d2      	b.n	800b880 <_svfiprintf_r+0xa0>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	1d19      	adds	r1, r3, #4
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	9103      	str	r1, [sp, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bfbb      	ittet	lt
 800b8e6:	425b      	neglt	r3, r3
 800b8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8ec:	9307      	strge	r3, [sp, #28]
 800b8ee:	9307      	strlt	r3, [sp, #28]
 800b8f0:	bfb8      	it	lt
 800b8f2:	9204      	strlt	r2, [sp, #16]
 800b8f4:	7823      	ldrb	r3, [r4, #0]
 800b8f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8f8:	d10a      	bne.n	800b910 <_svfiprintf_r+0x130>
 800b8fa:	7863      	ldrb	r3, [r4, #1]
 800b8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8fe:	d132      	bne.n	800b966 <_svfiprintf_r+0x186>
 800b900:	9b03      	ldr	r3, [sp, #12]
 800b902:	3402      	adds	r4, #2
 800b904:	1d1a      	adds	r2, r3, #4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	9203      	str	r2, [sp, #12]
 800b90a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b90e:	9305      	str	r3, [sp, #20]
 800b910:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b9c8 <_svfiprintf_r+0x1e8>
 800b914:	2203      	movs	r2, #3
 800b916:	4650      	mov	r0, sl
 800b918:	7821      	ldrb	r1, [r4, #0]
 800b91a:	f000 fabf 	bl	800be9c <memchr>
 800b91e:	b138      	cbz	r0, 800b930 <_svfiprintf_r+0x150>
 800b920:	2240      	movs	r2, #64	@ 0x40
 800b922:	9b04      	ldr	r3, [sp, #16]
 800b924:	eba0 000a 	sub.w	r0, r0, sl
 800b928:	4082      	lsls	r2, r0
 800b92a:	4313      	orrs	r3, r2
 800b92c:	3401      	adds	r4, #1
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b934:	2206      	movs	r2, #6
 800b936:	4825      	ldr	r0, [pc, #148]	@ (800b9cc <_svfiprintf_r+0x1ec>)
 800b938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b93c:	f000 faae 	bl	800be9c <memchr>
 800b940:	2800      	cmp	r0, #0
 800b942:	d036      	beq.n	800b9b2 <_svfiprintf_r+0x1d2>
 800b944:	4b22      	ldr	r3, [pc, #136]	@ (800b9d0 <_svfiprintf_r+0x1f0>)
 800b946:	bb1b      	cbnz	r3, 800b990 <_svfiprintf_r+0x1b0>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	3307      	adds	r3, #7
 800b94c:	f023 0307 	bic.w	r3, r3, #7
 800b950:	3308      	adds	r3, #8
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b956:	4433      	add	r3, r6
 800b958:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95a:	e76a      	b.n	800b832 <_svfiprintf_r+0x52>
 800b95c:	460c      	mov	r4, r1
 800b95e:	2001      	movs	r0, #1
 800b960:	fb0c 3202 	mla	r2, ip, r2, r3
 800b964:	e7a8      	b.n	800b8b8 <_svfiprintf_r+0xd8>
 800b966:	2300      	movs	r3, #0
 800b968:	f04f 0c0a 	mov.w	ip, #10
 800b96c:	4619      	mov	r1, r3
 800b96e:	3401      	adds	r4, #1
 800b970:	9305      	str	r3, [sp, #20]
 800b972:	4620      	mov	r0, r4
 800b974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b978:	3a30      	subs	r2, #48	@ 0x30
 800b97a:	2a09      	cmp	r2, #9
 800b97c:	d903      	bls.n	800b986 <_svfiprintf_r+0x1a6>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0c6      	beq.n	800b910 <_svfiprintf_r+0x130>
 800b982:	9105      	str	r1, [sp, #20]
 800b984:	e7c4      	b.n	800b910 <_svfiprintf_r+0x130>
 800b986:	4604      	mov	r4, r0
 800b988:	2301      	movs	r3, #1
 800b98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98e:	e7f0      	b.n	800b972 <_svfiprintf_r+0x192>
 800b990:	ab03      	add	r3, sp, #12
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	462a      	mov	r2, r5
 800b996:	4638      	mov	r0, r7
 800b998:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d4 <_svfiprintf_r+0x1f4>)
 800b99a:	a904      	add	r1, sp, #16
 800b99c:	f3af 8000 	nop.w
 800b9a0:	1c42      	adds	r2, r0, #1
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	d1d6      	bne.n	800b954 <_svfiprintf_r+0x174>
 800b9a6:	89ab      	ldrh	r3, [r5, #12]
 800b9a8:	065b      	lsls	r3, r3, #25
 800b9aa:	f53f af2d 	bmi.w	800b808 <_svfiprintf_r+0x28>
 800b9ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9b0:	e72c      	b.n	800b80c <_svfiprintf_r+0x2c>
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	4b06      	ldr	r3, [pc, #24]	@ (800b9d4 <_svfiprintf_r+0x1f4>)
 800b9bc:	a904      	add	r1, sp, #16
 800b9be:	f000 f87d 	bl	800babc <_printf_i>
 800b9c2:	e7ed      	b.n	800b9a0 <_svfiprintf_r+0x1c0>
 800b9c4:	0800ca15 	.word	0x0800ca15
 800b9c8:	0800ca1b 	.word	0x0800ca1b
 800b9cc:	0800ca1f 	.word	0x0800ca1f
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	0800b72b 	.word	0x0800b72b

0800b9d8 <_printf_common>:
 800b9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	4616      	mov	r6, r2
 800b9de:	4698      	mov	r8, r3
 800b9e0:	688a      	ldr	r2, [r1, #8]
 800b9e2:	690b      	ldr	r3, [r1, #16]
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	bfb8      	it	lt
 800b9ea:	4613      	movlt	r3, r2
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9f8:	b10a      	cbz	r2, 800b9fe <_printf_common+0x26>
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	0699      	lsls	r1, r3, #26
 800ba02:	bf42      	ittt	mi
 800ba04:	6833      	ldrmi	r3, [r6, #0]
 800ba06:	3302      	addmi	r3, #2
 800ba08:	6033      	strmi	r3, [r6, #0]
 800ba0a:	6825      	ldr	r5, [r4, #0]
 800ba0c:	f015 0506 	ands.w	r5, r5, #6
 800ba10:	d106      	bne.n	800ba20 <_printf_common+0x48>
 800ba12:	f104 0a19 	add.w	sl, r4, #25
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	6832      	ldr	r2, [r6, #0]
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	42ab      	cmp	r3, r5
 800ba1e:	dc2b      	bgt.n	800ba78 <_printf_common+0xa0>
 800ba20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba24:	6822      	ldr	r2, [r4, #0]
 800ba26:	3b00      	subs	r3, #0
 800ba28:	bf18      	it	ne
 800ba2a:	2301      	movne	r3, #1
 800ba2c:	0692      	lsls	r2, r2, #26
 800ba2e:	d430      	bmi.n	800ba92 <_printf_common+0xba>
 800ba30:	4641      	mov	r1, r8
 800ba32:	4638      	mov	r0, r7
 800ba34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba38:	47c8      	blx	r9
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d023      	beq.n	800ba86 <_printf_common+0xae>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	6922      	ldr	r2, [r4, #16]
 800ba42:	f003 0306 	and.w	r3, r3, #6
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	bf14      	ite	ne
 800ba4a:	2500      	movne	r5, #0
 800ba4c:	6833      	ldreq	r3, [r6, #0]
 800ba4e:	f04f 0600 	mov.w	r6, #0
 800ba52:	bf08      	it	eq
 800ba54:	68e5      	ldreq	r5, [r4, #12]
 800ba56:	f104 041a 	add.w	r4, r4, #26
 800ba5a:	bf08      	it	eq
 800ba5c:	1aed      	subeq	r5, r5, r3
 800ba5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba62:	bf08      	it	eq
 800ba64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	bfc4      	itt	gt
 800ba6c:	1a9b      	subgt	r3, r3, r2
 800ba6e:	18ed      	addgt	r5, r5, r3
 800ba70:	42b5      	cmp	r5, r6
 800ba72:	d11a      	bne.n	800baaa <_printf_common+0xd2>
 800ba74:	2000      	movs	r0, #0
 800ba76:	e008      	b.n	800ba8a <_printf_common+0xb2>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	4641      	mov	r1, r8
 800ba7e:	4638      	mov	r0, r7
 800ba80:	47c8      	blx	r9
 800ba82:	3001      	adds	r0, #1
 800ba84:	d103      	bne.n	800ba8e <_printf_common+0xb6>
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8e:	3501      	adds	r5, #1
 800ba90:	e7c1      	b.n	800ba16 <_printf_common+0x3e>
 800ba92:	2030      	movs	r0, #48	@ 0x30
 800ba94:	18e1      	adds	r1, r4, r3
 800ba96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800baa0:	4422      	add	r2, r4
 800baa2:	3302      	adds	r3, #2
 800baa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baa8:	e7c2      	b.n	800ba30 <_printf_common+0x58>
 800baaa:	2301      	movs	r3, #1
 800baac:	4622      	mov	r2, r4
 800baae:	4641      	mov	r1, r8
 800bab0:	4638      	mov	r0, r7
 800bab2:	47c8      	blx	r9
 800bab4:	3001      	adds	r0, #1
 800bab6:	d0e6      	beq.n	800ba86 <_printf_common+0xae>
 800bab8:	3601      	adds	r6, #1
 800baba:	e7d9      	b.n	800ba70 <_printf_common+0x98>

0800babc <_printf_i>:
 800babc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	7e0f      	ldrb	r7, [r1, #24]
 800bac2:	4691      	mov	r9, r2
 800bac4:	2f78      	cmp	r7, #120	@ 0x78
 800bac6:	4680      	mov	r8, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	469a      	mov	sl, r3
 800bacc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bace:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bad2:	d807      	bhi.n	800bae4 <_printf_i+0x28>
 800bad4:	2f62      	cmp	r7, #98	@ 0x62
 800bad6:	d80a      	bhi.n	800baee <_printf_i+0x32>
 800bad8:	2f00      	cmp	r7, #0
 800bada:	f000 80d1 	beq.w	800bc80 <_printf_i+0x1c4>
 800bade:	2f58      	cmp	r7, #88	@ 0x58
 800bae0:	f000 80b8 	beq.w	800bc54 <_printf_i+0x198>
 800bae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800baec:	e03a      	b.n	800bb64 <_printf_i+0xa8>
 800baee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baf2:	2b15      	cmp	r3, #21
 800baf4:	d8f6      	bhi.n	800bae4 <_printf_i+0x28>
 800baf6:	a101      	add	r1, pc, #4	@ (adr r1, 800bafc <_printf_i+0x40>)
 800baf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bafc:	0800bb55 	.word	0x0800bb55
 800bb00:	0800bb69 	.word	0x0800bb69
 800bb04:	0800bae5 	.word	0x0800bae5
 800bb08:	0800bae5 	.word	0x0800bae5
 800bb0c:	0800bae5 	.word	0x0800bae5
 800bb10:	0800bae5 	.word	0x0800bae5
 800bb14:	0800bb69 	.word	0x0800bb69
 800bb18:	0800bae5 	.word	0x0800bae5
 800bb1c:	0800bae5 	.word	0x0800bae5
 800bb20:	0800bae5 	.word	0x0800bae5
 800bb24:	0800bae5 	.word	0x0800bae5
 800bb28:	0800bc67 	.word	0x0800bc67
 800bb2c:	0800bb93 	.word	0x0800bb93
 800bb30:	0800bc21 	.word	0x0800bc21
 800bb34:	0800bae5 	.word	0x0800bae5
 800bb38:	0800bae5 	.word	0x0800bae5
 800bb3c:	0800bc89 	.word	0x0800bc89
 800bb40:	0800bae5 	.word	0x0800bae5
 800bb44:	0800bb93 	.word	0x0800bb93
 800bb48:	0800bae5 	.word	0x0800bae5
 800bb4c:	0800bae5 	.word	0x0800bae5
 800bb50:	0800bc29 	.word	0x0800bc29
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	1d1a      	adds	r2, r3, #4
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6032      	str	r2, [r6, #0]
 800bb5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb64:	2301      	movs	r3, #1
 800bb66:	e09c      	b.n	800bca2 <_printf_i+0x1e6>
 800bb68:	6833      	ldr	r3, [r6, #0]
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	1d19      	adds	r1, r3, #4
 800bb6e:	6031      	str	r1, [r6, #0]
 800bb70:	0606      	lsls	r6, r0, #24
 800bb72:	d501      	bpl.n	800bb78 <_printf_i+0xbc>
 800bb74:	681d      	ldr	r5, [r3, #0]
 800bb76:	e003      	b.n	800bb80 <_printf_i+0xc4>
 800bb78:	0645      	lsls	r5, r0, #25
 800bb7a:	d5fb      	bpl.n	800bb74 <_printf_i+0xb8>
 800bb7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	da03      	bge.n	800bb8c <_printf_i+0xd0>
 800bb84:	232d      	movs	r3, #45	@ 0x2d
 800bb86:	426d      	negs	r5, r5
 800bb88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb8c:	230a      	movs	r3, #10
 800bb8e:	4858      	ldr	r0, [pc, #352]	@ (800bcf0 <_printf_i+0x234>)
 800bb90:	e011      	b.n	800bbb6 <_printf_i+0xfa>
 800bb92:	6821      	ldr	r1, [r4, #0]
 800bb94:	6833      	ldr	r3, [r6, #0]
 800bb96:	0608      	lsls	r0, r1, #24
 800bb98:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb9c:	d402      	bmi.n	800bba4 <_printf_i+0xe8>
 800bb9e:	0649      	lsls	r1, r1, #25
 800bba0:	bf48      	it	mi
 800bba2:	b2ad      	uxthmi	r5, r5
 800bba4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bba6:	6033      	str	r3, [r6, #0]
 800bba8:	bf14      	ite	ne
 800bbaa:	230a      	movne	r3, #10
 800bbac:	2308      	moveq	r3, #8
 800bbae:	4850      	ldr	r0, [pc, #320]	@ (800bcf0 <_printf_i+0x234>)
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbb6:	6866      	ldr	r6, [r4, #4]
 800bbb8:	2e00      	cmp	r6, #0
 800bbba:	60a6      	str	r6, [r4, #8]
 800bbbc:	db05      	blt.n	800bbca <_printf_i+0x10e>
 800bbbe:	6821      	ldr	r1, [r4, #0]
 800bbc0:	432e      	orrs	r6, r5
 800bbc2:	f021 0104 	bic.w	r1, r1, #4
 800bbc6:	6021      	str	r1, [r4, #0]
 800bbc8:	d04b      	beq.n	800bc62 <_printf_i+0x1a6>
 800bbca:	4616      	mov	r6, r2
 800bbcc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbd0:	fb03 5711 	mls	r7, r3, r1, r5
 800bbd4:	5dc7      	ldrb	r7, [r0, r7]
 800bbd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbda:	462f      	mov	r7, r5
 800bbdc:	42bb      	cmp	r3, r7
 800bbde:	460d      	mov	r5, r1
 800bbe0:	d9f4      	bls.n	800bbcc <_printf_i+0x110>
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d10b      	bne.n	800bbfe <_printf_i+0x142>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	07df      	lsls	r7, r3, #31
 800bbea:	d508      	bpl.n	800bbfe <_printf_i+0x142>
 800bbec:	6923      	ldr	r3, [r4, #16]
 800bbee:	6861      	ldr	r1, [r4, #4]
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	bfde      	ittt	le
 800bbf4:	2330      	movle	r3, #48	@ 0x30
 800bbf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbfe:	1b92      	subs	r2, r2, r6
 800bc00:	6122      	str	r2, [r4, #16]
 800bc02:	464b      	mov	r3, r9
 800bc04:	4621      	mov	r1, r4
 800bc06:	4640      	mov	r0, r8
 800bc08:	f8cd a000 	str.w	sl, [sp]
 800bc0c:	aa03      	add	r2, sp, #12
 800bc0e:	f7ff fee3 	bl	800b9d8 <_printf_common>
 800bc12:	3001      	adds	r0, #1
 800bc14:	d14a      	bne.n	800bcac <_printf_i+0x1f0>
 800bc16:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1a:	b004      	add	sp, #16
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	f043 0320 	orr.w	r3, r3, #32
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	2778      	movs	r7, #120	@ 0x78
 800bc2a:	4832      	ldr	r0, [pc, #200]	@ (800bcf4 <_printf_i+0x238>)
 800bc2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	6831      	ldr	r1, [r6, #0]
 800bc34:	061f      	lsls	r7, r3, #24
 800bc36:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc3a:	d402      	bmi.n	800bc42 <_printf_i+0x186>
 800bc3c:	065f      	lsls	r7, r3, #25
 800bc3e:	bf48      	it	mi
 800bc40:	b2ad      	uxthmi	r5, r5
 800bc42:	6031      	str	r1, [r6, #0]
 800bc44:	07d9      	lsls	r1, r3, #31
 800bc46:	bf44      	itt	mi
 800bc48:	f043 0320 	orrmi.w	r3, r3, #32
 800bc4c:	6023      	strmi	r3, [r4, #0]
 800bc4e:	b11d      	cbz	r5, 800bc58 <_printf_i+0x19c>
 800bc50:	2310      	movs	r3, #16
 800bc52:	e7ad      	b.n	800bbb0 <_printf_i+0xf4>
 800bc54:	4826      	ldr	r0, [pc, #152]	@ (800bcf0 <_printf_i+0x234>)
 800bc56:	e7e9      	b.n	800bc2c <_printf_i+0x170>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	f023 0320 	bic.w	r3, r3, #32
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	e7f6      	b.n	800bc50 <_printf_i+0x194>
 800bc62:	4616      	mov	r6, r2
 800bc64:	e7bd      	b.n	800bbe2 <_printf_i+0x126>
 800bc66:	6833      	ldr	r3, [r6, #0]
 800bc68:	6825      	ldr	r5, [r4, #0]
 800bc6a:	1d18      	adds	r0, r3, #4
 800bc6c:	6961      	ldr	r1, [r4, #20]
 800bc6e:	6030      	str	r0, [r6, #0]
 800bc70:	062e      	lsls	r6, r5, #24
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	d501      	bpl.n	800bc7a <_printf_i+0x1be>
 800bc76:	6019      	str	r1, [r3, #0]
 800bc78:	e002      	b.n	800bc80 <_printf_i+0x1c4>
 800bc7a:	0668      	lsls	r0, r5, #25
 800bc7c:	d5fb      	bpl.n	800bc76 <_printf_i+0x1ba>
 800bc7e:	8019      	strh	r1, [r3, #0]
 800bc80:	2300      	movs	r3, #0
 800bc82:	4616      	mov	r6, r2
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	e7bc      	b.n	800bc02 <_printf_i+0x146>
 800bc88:	6833      	ldr	r3, [r6, #0]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	1d1a      	adds	r2, r3, #4
 800bc8e:	6032      	str	r2, [r6, #0]
 800bc90:	681e      	ldr	r6, [r3, #0]
 800bc92:	6862      	ldr	r2, [r4, #4]
 800bc94:	4630      	mov	r0, r6
 800bc96:	f000 f901 	bl	800be9c <memchr>
 800bc9a:	b108      	cbz	r0, 800bca0 <_printf_i+0x1e4>
 800bc9c:	1b80      	subs	r0, r0, r6
 800bc9e:	6060      	str	r0, [r4, #4]
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	2300      	movs	r3, #0
 800bca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcaa:	e7aa      	b.n	800bc02 <_printf_i+0x146>
 800bcac:	4632      	mov	r2, r6
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	47d0      	blx	sl
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	d0ad      	beq.n	800bc16 <_printf_i+0x15a>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	079b      	lsls	r3, r3, #30
 800bcbe:	d413      	bmi.n	800bce8 <_printf_i+0x22c>
 800bcc0:	68e0      	ldr	r0, [r4, #12]
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	4298      	cmp	r0, r3
 800bcc6:	bfb8      	it	lt
 800bcc8:	4618      	movlt	r0, r3
 800bcca:	e7a6      	b.n	800bc1a <_printf_i+0x15e>
 800bccc:	2301      	movs	r3, #1
 800bcce:	4632      	mov	r2, r6
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	47d0      	blx	sl
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d09d      	beq.n	800bc16 <_printf_i+0x15a>
 800bcda:	3501      	adds	r5, #1
 800bcdc:	68e3      	ldr	r3, [r4, #12]
 800bcde:	9903      	ldr	r1, [sp, #12]
 800bce0:	1a5b      	subs	r3, r3, r1
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	dcf2      	bgt.n	800bccc <_printf_i+0x210>
 800bce6:	e7eb      	b.n	800bcc0 <_printf_i+0x204>
 800bce8:	2500      	movs	r5, #0
 800bcea:	f104 0619 	add.w	r6, r4, #25
 800bcee:	e7f5      	b.n	800bcdc <_printf_i+0x220>
 800bcf0:	0800ca26 	.word	0x0800ca26
 800bcf4:	0800ca37 	.word	0x0800ca37

0800bcf8 <__sflush_r>:
 800bcf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	0716      	lsls	r6, r2, #28
 800bd00:	4605      	mov	r5, r0
 800bd02:	460c      	mov	r4, r1
 800bd04:	d454      	bmi.n	800bdb0 <__sflush_r+0xb8>
 800bd06:	684b      	ldr	r3, [r1, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc02      	bgt.n	800bd12 <__sflush_r+0x1a>
 800bd0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dd48      	ble.n	800bda4 <__sflush_r+0xac>
 800bd12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd14:	2e00      	cmp	r6, #0
 800bd16:	d045      	beq.n	800bda4 <__sflush_r+0xac>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd1e:	682f      	ldr	r7, [r5, #0]
 800bd20:	6a21      	ldr	r1, [r4, #32]
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	d030      	beq.n	800bd88 <__sflush_r+0x90>
 800bd26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	0759      	lsls	r1, r3, #29
 800bd2c:	d505      	bpl.n	800bd3a <__sflush_r+0x42>
 800bd2e:	6863      	ldr	r3, [r4, #4]
 800bd30:	1ad2      	subs	r2, r2, r3
 800bd32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd34:	b10b      	cbz	r3, 800bd3a <__sflush_r+0x42>
 800bd36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd40:	6a21      	ldr	r1, [r4, #32]
 800bd42:	47b0      	blx	r6
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	d106      	bne.n	800bd58 <__sflush_r+0x60>
 800bd4a:	6829      	ldr	r1, [r5, #0]
 800bd4c:	291d      	cmp	r1, #29
 800bd4e:	d82b      	bhi.n	800bda8 <__sflush_r+0xb0>
 800bd50:	4a28      	ldr	r2, [pc, #160]	@ (800bdf4 <__sflush_r+0xfc>)
 800bd52:	40ca      	lsrs	r2, r1
 800bd54:	07d6      	lsls	r6, r2, #31
 800bd56:	d527      	bpl.n	800bda8 <__sflush_r+0xb0>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	6062      	str	r2, [r4, #4]
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	04d9      	lsls	r1, r3, #19
 800bd60:	6022      	str	r2, [r4, #0]
 800bd62:	d504      	bpl.n	800bd6e <__sflush_r+0x76>
 800bd64:	1c42      	adds	r2, r0, #1
 800bd66:	d101      	bne.n	800bd6c <__sflush_r+0x74>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b903      	cbnz	r3, 800bd6e <__sflush_r+0x76>
 800bd6c:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd70:	602f      	str	r7, [r5, #0]
 800bd72:	b1b9      	cbz	r1, 800bda4 <__sflush_r+0xac>
 800bd74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd78:	4299      	cmp	r1, r3
 800bd7a:	d002      	beq.n	800bd82 <__sflush_r+0x8a>
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f7fe fbe5 	bl	800a54c <_free_r>
 800bd82:	2300      	movs	r3, #0
 800bd84:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd86:	e00d      	b.n	800bda4 <__sflush_r+0xac>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b0      	blx	r6
 800bd8e:	4602      	mov	r2, r0
 800bd90:	1c50      	adds	r0, r2, #1
 800bd92:	d1c9      	bne.n	800bd28 <__sflush_r+0x30>
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d0c6      	beq.n	800bd28 <__sflush_r+0x30>
 800bd9a:	2b1d      	cmp	r3, #29
 800bd9c:	d001      	beq.n	800bda2 <__sflush_r+0xaa>
 800bd9e:	2b16      	cmp	r3, #22
 800bda0:	d11d      	bne.n	800bdde <__sflush_r+0xe6>
 800bda2:	602f      	str	r7, [r5, #0]
 800bda4:	2000      	movs	r0, #0
 800bda6:	e021      	b.n	800bdec <__sflush_r+0xf4>
 800bda8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdac:	b21b      	sxth	r3, r3
 800bdae:	e01a      	b.n	800bde6 <__sflush_r+0xee>
 800bdb0:	690f      	ldr	r7, [r1, #16]
 800bdb2:	2f00      	cmp	r7, #0
 800bdb4:	d0f6      	beq.n	800bda4 <__sflush_r+0xac>
 800bdb6:	0793      	lsls	r3, r2, #30
 800bdb8:	bf18      	it	ne
 800bdba:	2300      	movne	r3, #0
 800bdbc:	680e      	ldr	r6, [r1, #0]
 800bdbe:	bf08      	it	eq
 800bdc0:	694b      	ldreq	r3, [r1, #20]
 800bdc2:	1bf6      	subs	r6, r6, r7
 800bdc4:	600f      	str	r7, [r1, #0]
 800bdc6:	608b      	str	r3, [r1, #8]
 800bdc8:	2e00      	cmp	r6, #0
 800bdca:	ddeb      	ble.n	800bda4 <__sflush_r+0xac>
 800bdcc:	4633      	mov	r3, r6
 800bdce:	463a      	mov	r2, r7
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	6a21      	ldr	r1, [r4, #32]
 800bdd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bdd8:	47e0      	blx	ip
 800bdda:	2800      	cmp	r0, #0
 800bddc:	dc07      	bgt.n	800bdee <__sflush_r+0xf6>
 800bdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bde6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdea:	81a3      	strh	r3, [r4, #12]
 800bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdee:	4407      	add	r7, r0
 800bdf0:	1a36      	subs	r6, r6, r0
 800bdf2:	e7e9      	b.n	800bdc8 <__sflush_r+0xd0>
 800bdf4:	20400001 	.word	0x20400001

0800bdf8 <_fflush_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b913      	cbnz	r3, 800be08 <_fflush_r+0x10>
 800be02:	2500      	movs	r5, #0
 800be04:	4628      	mov	r0, r5
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	b118      	cbz	r0, 800be12 <_fflush_r+0x1a>
 800be0a:	6a03      	ldr	r3, [r0, #32]
 800be0c:	b90b      	cbnz	r3, 800be12 <_fflush_r+0x1a>
 800be0e:	f7fe fa53 	bl	800a2b8 <__sinit>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f3      	beq.n	800be02 <_fflush_r+0xa>
 800be1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be1c:	07d0      	lsls	r0, r2, #31
 800be1e:	d404      	bmi.n	800be2a <_fflush_r+0x32>
 800be20:	0599      	lsls	r1, r3, #22
 800be22:	d402      	bmi.n	800be2a <_fflush_r+0x32>
 800be24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be26:	f7fe fb7a 	bl	800a51e <__retarget_lock_acquire_recursive>
 800be2a:	4628      	mov	r0, r5
 800be2c:	4621      	mov	r1, r4
 800be2e:	f7ff ff63 	bl	800bcf8 <__sflush_r>
 800be32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be34:	4605      	mov	r5, r0
 800be36:	07da      	lsls	r2, r3, #31
 800be38:	d4e4      	bmi.n	800be04 <_fflush_r+0xc>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	059b      	lsls	r3, r3, #22
 800be3e:	d4e1      	bmi.n	800be04 <_fflush_r+0xc>
 800be40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be42:	f7fe fb6d 	bl	800a520 <__retarget_lock_release_recursive>
 800be46:	e7dd      	b.n	800be04 <_fflush_r+0xc>

0800be48 <memmove>:
 800be48:	4288      	cmp	r0, r1
 800be4a:	b510      	push	{r4, lr}
 800be4c:	eb01 0402 	add.w	r4, r1, r2
 800be50:	d902      	bls.n	800be58 <memmove+0x10>
 800be52:	4284      	cmp	r4, r0
 800be54:	4623      	mov	r3, r4
 800be56:	d807      	bhi.n	800be68 <memmove+0x20>
 800be58:	1e43      	subs	r3, r0, #1
 800be5a:	42a1      	cmp	r1, r4
 800be5c:	d008      	beq.n	800be70 <memmove+0x28>
 800be5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be66:	e7f8      	b.n	800be5a <memmove+0x12>
 800be68:	4601      	mov	r1, r0
 800be6a:	4402      	add	r2, r0
 800be6c:	428a      	cmp	r2, r1
 800be6e:	d100      	bne.n	800be72 <memmove+0x2a>
 800be70:	bd10      	pop	{r4, pc}
 800be72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be7a:	e7f7      	b.n	800be6c <memmove+0x24>

0800be7c <_sbrk_r>:
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	2300      	movs	r3, #0
 800be80:	4d05      	ldr	r5, [pc, #20]	@ (800be98 <_sbrk_r+0x1c>)
 800be82:	4604      	mov	r4, r0
 800be84:	4608      	mov	r0, r1
 800be86:	602b      	str	r3, [r5, #0]
 800be88:	f7f6 fa16 	bl	80022b8 <_sbrk>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_sbrk_r+0x1a>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_sbrk_r+0x1a>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	200016e4 	.word	0x200016e4

0800be9c <memchr>:
 800be9c:	4603      	mov	r3, r0
 800be9e:	b510      	push	{r4, lr}
 800bea0:	b2c9      	uxtb	r1, r1
 800bea2:	4402      	add	r2, r0
 800bea4:	4293      	cmp	r3, r2
 800bea6:	4618      	mov	r0, r3
 800bea8:	d101      	bne.n	800beae <memchr+0x12>
 800beaa:	2000      	movs	r0, #0
 800beac:	e003      	b.n	800beb6 <memchr+0x1a>
 800beae:	7804      	ldrb	r4, [r0, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	428c      	cmp	r4, r1
 800beb4:	d1f6      	bne.n	800bea4 <memchr+0x8>
 800beb6:	bd10      	pop	{r4, pc}

0800beb8 <__assert_func>:
 800beb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800beba:	4614      	mov	r4, r2
 800bebc:	461a      	mov	r2, r3
 800bebe:	4b09      	ldr	r3, [pc, #36]	@ (800bee4 <__assert_func+0x2c>)
 800bec0:	4605      	mov	r5, r0
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68d8      	ldr	r0, [r3, #12]
 800bec6:	b14c      	cbz	r4, 800bedc <__assert_func+0x24>
 800bec8:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <__assert_func+0x30>)
 800beca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bece:	9100      	str	r1, [sp, #0]
 800bed0:	462b      	mov	r3, r5
 800bed2:	4906      	ldr	r1, [pc, #24]	@ (800beec <__assert_func+0x34>)
 800bed4:	f000 f858 	bl	800bf88 <fiprintf>
 800bed8:	f000 f868 	bl	800bfac <abort>
 800bedc:	4b04      	ldr	r3, [pc, #16]	@ (800bef0 <__assert_func+0x38>)
 800bede:	461c      	mov	r4, r3
 800bee0:	e7f3      	b.n	800beca <__assert_func+0x12>
 800bee2:	bf00      	nop
 800bee4:	200002f4 	.word	0x200002f4
 800bee8:	0800ca48 	.word	0x0800ca48
 800beec:	0800ca55 	.word	0x0800ca55
 800bef0:	0800ca83 	.word	0x0800ca83

0800bef4 <_calloc_r>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	fba1 5402 	umull	r5, r4, r1, r2
 800befa:	b934      	cbnz	r4, 800bf0a <_calloc_r+0x16>
 800befc:	4629      	mov	r1, r5
 800befe:	f7fe fec9 	bl	800ac94 <_malloc_r>
 800bf02:	4606      	mov	r6, r0
 800bf04:	b928      	cbnz	r0, 800bf12 <_calloc_r+0x1e>
 800bf06:	4630      	mov	r0, r6
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	220c      	movs	r2, #12
 800bf0c:	2600      	movs	r6, #0
 800bf0e:	6002      	str	r2, [r0, #0]
 800bf10:	e7f9      	b.n	800bf06 <_calloc_r+0x12>
 800bf12:	462a      	mov	r2, r5
 800bf14:	4621      	mov	r1, r4
 800bf16:	f7fe fa6a 	bl	800a3ee <memset>
 800bf1a:	e7f4      	b.n	800bf06 <_calloc_r+0x12>

0800bf1c <malloc>:
 800bf1c:	4b02      	ldr	r3, [pc, #8]	@ (800bf28 <malloc+0xc>)
 800bf1e:	4601      	mov	r1, r0
 800bf20:	6818      	ldr	r0, [r3, #0]
 800bf22:	f7fe beb7 	b.w	800ac94 <_malloc_r>
 800bf26:	bf00      	nop
 800bf28:	200002f4 	.word	0x200002f4

0800bf2c <_realloc_r>:
 800bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	4607      	mov	r7, r0
 800bf32:	4614      	mov	r4, r2
 800bf34:	460d      	mov	r5, r1
 800bf36:	b921      	cbnz	r1, 800bf42 <_realloc_r+0x16>
 800bf38:	4611      	mov	r1, r2
 800bf3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3e:	f7fe bea9 	b.w	800ac94 <_malloc_r>
 800bf42:	b92a      	cbnz	r2, 800bf50 <_realloc_r+0x24>
 800bf44:	f7fe fb02 	bl	800a54c <_free_r>
 800bf48:	4625      	mov	r5, r4
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	f000 f833 	bl	800bfba <_malloc_usable_size_r>
 800bf54:	4284      	cmp	r4, r0
 800bf56:	4606      	mov	r6, r0
 800bf58:	d802      	bhi.n	800bf60 <_realloc_r+0x34>
 800bf5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf5e:	d8f4      	bhi.n	800bf4a <_realloc_r+0x1e>
 800bf60:	4621      	mov	r1, r4
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7fe fe96 	bl	800ac94 <_malloc_r>
 800bf68:	4680      	mov	r8, r0
 800bf6a:	b908      	cbnz	r0, 800bf70 <_realloc_r+0x44>
 800bf6c:	4645      	mov	r5, r8
 800bf6e:	e7ec      	b.n	800bf4a <_realloc_r+0x1e>
 800bf70:	42b4      	cmp	r4, r6
 800bf72:	4622      	mov	r2, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	bf28      	it	cs
 800bf78:	4632      	movcs	r2, r6
 800bf7a:	f7fe fad2 	bl	800a522 <memcpy>
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4638      	mov	r0, r7
 800bf82:	f7fe fae3 	bl	800a54c <_free_r>
 800bf86:	e7f1      	b.n	800bf6c <_realloc_r+0x40>

0800bf88 <fiprintf>:
 800bf88:	b40e      	push	{r1, r2, r3}
 800bf8a:	b503      	push	{r0, r1, lr}
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	ab03      	add	r3, sp, #12
 800bf90:	4805      	ldr	r0, [pc, #20]	@ (800bfa8 <fiprintf+0x20>)
 800bf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf96:	6800      	ldr	r0, [r0, #0]
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	f000 f83d 	bl	800c018 <_vfiprintf_r>
 800bf9e:	b002      	add	sp, #8
 800bfa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfa4:	b003      	add	sp, #12
 800bfa6:	4770      	bx	lr
 800bfa8:	200002f4 	.word	0x200002f4

0800bfac <abort>:
 800bfac:	2006      	movs	r0, #6
 800bfae:	b508      	push	{r3, lr}
 800bfb0:	f000 fa06 	bl	800c3c0 <raise>
 800bfb4:	2001      	movs	r0, #1
 800bfb6:	f7f6 f90a 	bl	80021ce <_exit>

0800bfba <_malloc_usable_size_r>:
 800bfba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfbe:	1f18      	subs	r0, r3, #4
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	bfbc      	itt	lt
 800bfc4:	580b      	ldrlt	r3, [r1, r0]
 800bfc6:	18c0      	addlt	r0, r0, r3
 800bfc8:	4770      	bx	lr

0800bfca <__sfputc_r>:
 800bfca:	6893      	ldr	r3, [r2, #8]
 800bfcc:	b410      	push	{r4}
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	6093      	str	r3, [r2, #8]
 800bfd4:	da07      	bge.n	800bfe6 <__sfputc_r+0x1c>
 800bfd6:	6994      	ldr	r4, [r2, #24]
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	db01      	blt.n	800bfe0 <__sfputc_r+0x16>
 800bfdc:	290a      	cmp	r1, #10
 800bfde:	d102      	bne.n	800bfe6 <__sfputc_r+0x1c>
 800bfe0:	bc10      	pop	{r4}
 800bfe2:	f000 b931 	b.w	800c248 <__swbuf_r>
 800bfe6:	6813      	ldr	r3, [r2, #0]
 800bfe8:	1c58      	adds	r0, r3, #1
 800bfea:	6010      	str	r0, [r2, #0]
 800bfec:	7019      	strb	r1, [r3, #0]
 800bfee:	4608      	mov	r0, r1
 800bff0:	bc10      	pop	{r4}
 800bff2:	4770      	bx	lr

0800bff4 <__sfputs_r>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	4614      	mov	r4, r2
 800bffc:	18d5      	adds	r5, r2, r3
 800bffe:	42ac      	cmp	r4, r5
 800c000:	d101      	bne.n	800c006 <__sfputs_r+0x12>
 800c002:	2000      	movs	r0, #0
 800c004:	e007      	b.n	800c016 <__sfputs_r+0x22>
 800c006:	463a      	mov	r2, r7
 800c008:	4630      	mov	r0, r6
 800c00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00e:	f7ff ffdc 	bl	800bfca <__sfputc_r>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d1f3      	bne.n	800bffe <__sfputs_r+0xa>
 800c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c018 <_vfiprintf_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	460d      	mov	r5, r1
 800c01e:	4614      	mov	r4, r2
 800c020:	4698      	mov	r8, r3
 800c022:	4606      	mov	r6, r0
 800c024:	b09d      	sub	sp, #116	@ 0x74
 800c026:	b118      	cbz	r0, 800c030 <_vfiprintf_r+0x18>
 800c028:	6a03      	ldr	r3, [r0, #32]
 800c02a:	b90b      	cbnz	r3, 800c030 <_vfiprintf_r+0x18>
 800c02c:	f7fe f944 	bl	800a2b8 <__sinit>
 800c030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d405      	bmi.n	800c042 <_vfiprintf_r+0x2a>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_vfiprintf_r+0x2a>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7fe fa6e 	bl	800a51e <__retarget_lock_acquire_recursive>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	071b      	lsls	r3, r3, #28
 800c046:	d501      	bpl.n	800c04c <_vfiprintf_r+0x34>
 800c048:	692b      	ldr	r3, [r5, #16]
 800c04a:	b99b      	cbnz	r3, 800c074 <_vfiprintf_r+0x5c>
 800c04c:	4629      	mov	r1, r5
 800c04e:	4630      	mov	r0, r6
 800c050:	f000 f938 	bl	800c2c4 <__swsetup_r>
 800c054:	b170      	cbz	r0, 800c074 <_vfiprintf_r+0x5c>
 800c056:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c058:	07dc      	lsls	r4, r3, #31
 800c05a:	d504      	bpl.n	800c066 <_vfiprintf_r+0x4e>
 800c05c:	f04f 30ff 	mov.w	r0, #4294967295
 800c060:	b01d      	add	sp, #116	@ 0x74
 800c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	0598      	lsls	r0, r3, #22
 800c06a:	d4f7      	bmi.n	800c05c <_vfiprintf_r+0x44>
 800c06c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c06e:	f7fe fa57 	bl	800a520 <__retarget_lock_release_recursive>
 800c072:	e7f3      	b.n	800c05c <_vfiprintf_r+0x44>
 800c074:	2300      	movs	r3, #0
 800c076:	9309      	str	r3, [sp, #36]	@ 0x24
 800c078:	2320      	movs	r3, #32
 800c07a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c07e:	2330      	movs	r3, #48	@ 0x30
 800c080:	f04f 0901 	mov.w	r9, #1
 800c084:	f8cd 800c 	str.w	r8, [sp, #12]
 800c088:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c234 <_vfiprintf_r+0x21c>
 800c08c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c090:	4623      	mov	r3, r4
 800c092:	469a      	mov	sl, r3
 800c094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c098:	b10a      	cbz	r2, 800c09e <_vfiprintf_r+0x86>
 800c09a:	2a25      	cmp	r2, #37	@ 0x25
 800c09c:	d1f9      	bne.n	800c092 <_vfiprintf_r+0x7a>
 800c09e:	ebba 0b04 	subs.w	fp, sl, r4
 800c0a2:	d00b      	beq.n	800c0bc <_vfiprintf_r+0xa4>
 800c0a4:	465b      	mov	r3, fp
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7ff ffa2 	bl	800bff4 <__sfputs_r>
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	f000 80a7 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0b8:	445a      	add	r2, fp
 800c0ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 809f 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d0:	f10a 0a01 	add.w	sl, sl, #1
 800c0d4:	9304      	str	r3, [sp, #16]
 800c0d6:	9307      	str	r3, [sp, #28]
 800c0d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0de:	4654      	mov	r4, sl
 800c0e0:	2205      	movs	r2, #5
 800c0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e6:	4853      	ldr	r0, [pc, #332]	@ (800c234 <_vfiprintf_r+0x21c>)
 800c0e8:	f7ff fed8 	bl	800be9c <memchr>
 800c0ec:	9a04      	ldr	r2, [sp, #16]
 800c0ee:	b9d8      	cbnz	r0, 800c128 <_vfiprintf_r+0x110>
 800c0f0:	06d1      	lsls	r1, r2, #27
 800c0f2:	bf44      	itt	mi
 800c0f4:	2320      	movmi	r3, #32
 800c0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0fa:	0713      	lsls	r3, r2, #28
 800c0fc:	bf44      	itt	mi
 800c0fe:	232b      	movmi	r3, #43	@ 0x2b
 800c100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c104:	f89a 3000 	ldrb.w	r3, [sl]
 800c108:	2b2a      	cmp	r3, #42	@ 0x2a
 800c10a:	d015      	beq.n	800c138 <_vfiprintf_r+0x120>
 800c10c:	4654      	mov	r4, sl
 800c10e:	2000      	movs	r0, #0
 800c110:	f04f 0c0a 	mov.w	ip, #10
 800c114:	9a07      	ldr	r2, [sp, #28]
 800c116:	4621      	mov	r1, r4
 800c118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c11c:	3b30      	subs	r3, #48	@ 0x30
 800c11e:	2b09      	cmp	r3, #9
 800c120:	d94b      	bls.n	800c1ba <_vfiprintf_r+0x1a2>
 800c122:	b1b0      	cbz	r0, 800c152 <_vfiprintf_r+0x13a>
 800c124:	9207      	str	r2, [sp, #28]
 800c126:	e014      	b.n	800c152 <_vfiprintf_r+0x13a>
 800c128:	eba0 0308 	sub.w	r3, r0, r8
 800c12c:	fa09 f303 	lsl.w	r3, r9, r3
 800c130:	4313      	orrs	r3, r2
 800c132:	46a2      	mov	sl, r4
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	e7d2      	b.n	800c0de <_vfiprintf_r+0xc6>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	1d19      	adds	r1, r3, #4
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	9103      	str	r1, [sp, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bfbb      	ittet	lt
 800c144:	425b      	neglt	r3, r3
 800c146:	f042 0202 	orrlt.w	r2, r2, #2
 800c14a:	9307      	strge	r3, [sp, #28]
 800c14c:	9307      	strlt	r3, [sp, #28]
 800c14e:	bfb8      	it	lt
 800c150:	9204      	strlt	r2, [sp, #16]
 800c152:	7823      	ldrb	r3, [r4, #0]
 800c154:	2b2e      	cmp	r3, #46	@ 0x2e
 800c156:	d10a      	bne.n	800c16e <_vfiprintf_r+0x156>
 800c158:	7863      	ldrb	r3, [r4, #1]
 800c15a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c15c:	d132      	bne.n	800c1c4 <_vfiprintf_r+0x1ac>
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	3402      	adds	r4, #2
 800c162:	1d1a      	adds	r2, r3, #4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	9203      	str	r2, [sp, #12]
 800c168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c238 <_vfiprintf_r+0x220>
 800c172:	2203      	movs	r2, #3
 800c174:	4650      	mov	r0, sl
 800c176:	7821      	ldrb	r1, [r4, #0]
 800c178:	f7ff fe90 	bl	800be9c <memchr>
 800c17c:	b138      	cbz	r0, 800c18e <_vfiprintf_r+0x176>
 800c17e:	2240      	movs	r2, #64	@ 0x40
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	eba0 000a 	sub.w	r0, r0, sl
 800c186:	4082      	lsls	r2, r0
 800c188:	4313      	orrs	r3, r2
 800c18a:	3401      	adds	r4, #1
 800c18c:	9304      	str	r3, [sp, #16]
 800c18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c192:	2206      	movs	r2, #6
 800c194:	4829      	ldr	r0, [pc, #164]	@ (800c23c <_vfiprintf_r+0x224>)
 800c196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c19a:	f7ff fe7f 	bl	800be9c <memchr>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d03f      	beq.n	800c222 <_vfiprintf_r+0x20a>
 800c1a2:	4b27      	ldr	r3, [pc, #156]	@ (800c240 <_vfiprintf_r+0x228>)
 800c1a4:	bb1b      	cbnz	r3, 800c1ee <_vfiprintf_r+0x1d6>
 800c1a6:	9b03      	ldr	r3, [sp, #12]
 800c1a8:	3307      	adds	r3, #7
 800c1aa:	f023 0307 	bic.w	r3, r3, #7
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	9303      	str	r3, [sp, #12]
 800c1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b4:	443b      	add	r3, r7
 800c1b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1b8:	e76a      	b.n	800c090 <_vfiprintf_r+0x78>
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	2001      	movs	r0, #1
 800c1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c2:	e7a8      	b.n	800c116 <_vfiprintf_r+0xfe>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f04f 0c0a 	mov.w	ip, #10
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	4620      	mov	r0, r4
 800c1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d6:	3a30      	subs	r2, #48	@ 0x30
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d903      	bls.n	800c1e4 <_vfiprintf_r+0x1cc>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0c6      	beq.n	800c16e <_vfiprintf_r+0x156>
 800c1e0:	9105      	str	r1, [sp, #20]
 800c1e2:	e7c4      	b.n	800c16e <_vfiprintf_r+0x156>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ec:	e7f0      	b.n	800c1d0 <_vfiprintf_r+0x1b8>
 800c1ee:	ab03      	add	r3, sp, #12
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	462a      	mov	r2, r5
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4b13      	ldr	r3, [pc, #76]	@ (800c244 <_vfiprintf_r+0x22c>)
 800c1f8:	a904      	add	r1, sp, #16
 800c1fa:	f3af 8000 	nop.w
 800c1fe:	4607      	mov	r7, r0
 800c200:	1c78      	adds	r0, r7, #1
 800c202:	d1d6      	bne.n	800c1b2 <_vfiprintf_r+0x19a>
 800c204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c206:	07d9      	lsls	r1, r3, #31
 800c208:	d405      	bmi.n	800c216 <_vfiprintf_r+0x1fe>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	059a      	lsls	r2, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_vfiprintf_r+0x1fe>
 800c210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c212:	f7fe f985 	bl	800a520 <__retarget_lock_release_recursive>
 800c216:	89ab      	ldrh	r3, [r5, #12]
 800c218:	065b      	lsls	r3, r3, #25
 800c21a:	f53f af1f 	bmi.w	800c05c <_vfiprintf_r+0x44>
 800c21e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c220:	e71e      	b.n	800c060 <_vfiprintf_r+0x48>
 800c222:	ab03      	add	r3, sp, #12
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	462a      	mov	r2, r5
 800c228:	4630      	mov	r0, r6
 800c22a:	4b06      	ldr	r3, [pc, #24]	@ (800c244 <_vfiprintf_r+0x22c>)
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	f7ff fc45 	bl	800babc <_printf_i>
 800c232:	e7e4      	b.n	800c1fe <_vfiprintf_r+0x1e6>
 800c234:	0800ca15 	.word	0x0800ca15
 800c238:	0800ca1b 	.word	0x0800ca1b
 800c23c:	0800ca1f 	.word	0x0800ca1f
 800c240:	00000000 	.word	0x00000000
 800c244:	0800bff5 	.word	0x0800bff5

0800c248 <__swbuf_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	460e      	mov	r6, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	4605      	mov	r5, r0
 800c250:	b118      	cbz	r0, 800c25a <__swbuf_r+0x12>
 800c252:	6a03      	ldr	r3, [r0, #32]
 800c254:	b90b      	cbnz	r3, 800c25a <__swbuf_r+0x12>
 800c256:	f7fe f82f 	bl	800a2b8 <__sinit>
 800c25a:	69a3      	ldr	r3, [r4, #24]
 800c25c:	60a3      	str	r3, [r4, #8]
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	071a      	lsls	r2, r3, #28
 800c262:	d501      	bpl.n	800c268 <__swbuf_r+0x20>
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	b943      	cbnz	r3, 800c27a <__swbuf_r+0x32>
 800c268:	4621      	mov	r1, r4
 800c26a:	4628      	mov	r0, r5
 800c26c:	f000 f82a 	bl	800c2c4 <__swsetup_r>
 800c270:	b118      	cbz	r0, 800c27a <__swbuf_r+0x32>
 800c272:	f04f 37ff 	mov.w	r7, #4294967295
 800c276:	4638      	mov	r0, r7
 800c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27a:	6823      	ldr	r3, [r4, #0]
 800c27c:	6922      	ldr	r2, [r4, #16]
 800c27e:	b2f6      	uxtb	r6, r6
 800c280:	1a98      	subs	r0, r3, r2
 800c282:	6963      	ldr	r3, [r4, #20]
 800c284:	4637      	mov	r7, r6
 800c286:	4283      	cmp	r3, r0
 800c288:	dc05      	bgt.n	800c296 <__swbuf_r+0x4e>
 800c28a:	4621      	mov	r1, r4
 800c28c:	4628      	mov	r0, r5
 800c28e:	f7ff fdb3 	bl	800bdf8 <_fflush_r>
 800c292:	2800      	cmp	r0, #0
 800c294:	d1ed      	bne.n	800c272 <__swbuf_r+0x2a>
 800c296:	68a3      	ldr	r3, [r4, #8]
 800c298:	3b01      	subs	r3, #1
 800c29a:	60a3      	str	r3, [r4, #8]
 800c29c:	6823      	ldr	r3, [r4, #0]
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	6022      	str	r2, [r4, #0]
 800c2a2:	701e      	strb	r6, [r3, #0]
 800c2a4:	6962      	ldr	r2, [r4, #20]
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d004      	beq.n	800c2b6 <__swbuf_r+0x6e>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	07db      	lsls	r3, r3, #31
 800c2b0:	d5e1      	bpl.n	800c276 <__swbuf_r+0x2e>
 800c2b2:	2e0a      	cmp	r6, #10
 800c2b4:	d1df      	bne.n	800c276 <__swbuf_r+0x2e>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	f7ff fd9d 	bl	800bdf8 <_fflush_r>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0d9      	beq.n	800c276 <__swbuf_r+0x2e>
 800c2c2:	e7d6      	b.n	800c272 <__swbuf_r+0x2a>

0800c2c4 <__swsetup_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4b29      	ldr	r3, [pc, #164]	@ (800c36c <__swsetup_r+0xa8>)
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	b118      	cbz	r0, 800c2d8 <__swsetup_r+0x14>
 800c2d0:	6a03      	ldr	r3, [r0, #32]
 800c2d2:	b90b      	cbnz	r3, 800c2d8 <__swsetup_r+0x14>
 800c2d4:	f7fd fff0 	bl	800a2b8 <__sinit>
 800c2d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2dc:	0719      	lsls	r1, r3, #28
 800c2de:	d422      	bmi.n	800c326 <__swsetup_r+0x62>
 800c2e0:	06da      	lsls	r2, r3, #27
 800c2e2:	d407      	bmi.n	800c2f4 <__swsetup_r+0x30>
 800c2e4:	2209      	movs	r2, #9
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	e033      	b.n	800c35c <__swsetup_r+0x98>
 800c2f4:	0758      	lsls	r0, r3, #29
 800c2f6:	d512      	bpl.n	800c31e <__swsetup_r+0x5a>
 800c2f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2fa:	b141      	cbz	r1, 800c30e <__swsetup_r+0x4a>
 800c2fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c300:	4299      	cmp	r1, r3
 800c302:	d002      	beq.n	800c30a <__swsetup_r+0x46>
 800c304:	4628      	mov	r0, r5
 800c306:	f7fe f921 	bl	800a54c <_free_r>
 800c30a:	2300      	movs	r3, #0
 800c30c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	2300      	movs	r3, #0
 800c318:	6063      	str	r3, [r4, #4]
 800c31a:	6923      	ldr	r3, [r4, #16]
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	f043 0308 	orr.w	r3, r3, #8
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	b94b      	cbnz	r3, 800c33e <__swsetup_r+0x7a>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c334:	d003      	beq.n	800c33e <__swsetup_r+0x7a>
 800c336:	4621      	mov	r1, r4
 800c338:	4628      	mov	r0, r5
 800c33a:	f000 f882 	bl	800c442 <__smakebuf_r>
 800c33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c342:	f013 0201 	ands.w	r2, r3, #1
 800c346:	d00a      	beq.n	800c35e <__swsetup_r+0x9a>
 800c348:	2200      	movs	r2, #0
 800c34a:	60a2      	str	r2, [r4, #8]
 800c34c:	6962      	ldr	r2, [r4, #20]
 800c34e:	4252      	negs	r2, r2
 800c350:	61a2      	str	r2, [r4, #24]
 800c352:	6922      	ldr	r2, [r4, #16]
 800c354:	b942      	cbnz	r2, 800c368 <__swsetup_r+0xa4>
 800c356:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c35a:	d1c5      	bne.n	800c2e8 <__swsetup_r+0x24>
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	0799      	lsls	r1, r3, #30
 800c360:	bf58      	it	pl
 800c362:	6962      	ldrpl	r2, [r4, #20]
 800c364:	60a2      	str	r2, [r4, #8]
 800c366:	e7f4      	b.n	800c352 <__swsetup_r+0x8e>
 800c368:	2000      	movs	r0, #0
 800c36a:	e7f7      	b.n	800c35c <__swsetup_r+0x98>
 800c36c:	200002f4 	.word	0x200002f4

0800c370 <_raise_r>:
 800c370:	291f      	cmp	r1, #31
 800c372:	b538      	push	{r3, r4, r5, lr}
 800c374:	4605      	mov	r5, r0
 800c376:	460c      	mov	r4, r1
 800c378:	d904      	bls.n	800c384 <_raise_r+0x14>
 800c37a:	2316      	movs	r3, #22
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	f04f 30ff 	mov.w	r0, #4294967295
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c386:	b112      	cbz	r2, 800c38e <_raise_r+0x1e>
 800c388:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c38c:	b94b      	cbnz	r3, 800c3a2 <_raise_r+0x32>
 800c38e:	4628      	mov	r0, r5
 800c390:	f000 f830 	bl	800c3f4 <_getpid_r>
 800c394:	4622      	mov	r2, r4
 800c396:	4601      	mov	r1, r0
 800c398:	4628      	mov	r0, r5
 800c39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c39e:	f000 b817 	b.w	800c3d0 <_kill_r>
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d00a      	beq.n	800c3bc <_raise_r+0x4c>
 800c3a6:	1c59      	adds	r1, r3, #1
 800c3a8:	d103      	bne.n	800c3b2 <_raise_r+0x42>
 800c3aa:	2316      	movs	r3, #22
 800c3ac:	6003      	str	r3, [r0, #0]
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	e7e7      	b.n	800c382 <_raise_r+0x12>
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3ba:	4798      	blx	r3
 800c3bc:	2000      	movs	r0, #0
 800c3be:	e7e0      	b.n	800c382 <_raise_r+0x12>

0800c3c0 <raise>:
 800c3c0:	4b02      	ldr	r3, [pc, #8]	@ (800c3cc <raise+0xc>)
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	6818      	ldr	r0, [r3, #0]
 800c3c6:	f7ff bfd3 	b.w	800c370 <_raise_r>
 800c3ca:	bf00      	nop
 800c3cc:	200002f4 	.word	0x200002f4

0800c3d0 <_kill_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4d06      	ldr	r5, [pc, #24]	@ (800c3f0 <_kill_r+0x20>)
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	4611      	mov	r1, r2
 800c3dc:	602b      	str	r3, [r5, #0]
 800c3de:	f7f5 fee6 	bl	80021ae <_kill>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	d102      	bne.n	800c3ec <_kill_r+0x1c>
 800c3e6:	682b      	ldr	r3, [r5, #0]
 800c3e8:	b103      	cbz	r3, 800c3ec <_kill_r+0x1c>
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	bd38      	pop	{r3, r4, r5, pc}
 800c3ee:	bf00      	nop
 800c3f0:	200016e4 	.word	0x200016e4

0800c3f4 <_getpid_r>:
 800c3f4:	f7f5 bed4 	b.w	80021a0 <_getpid>

0800c3f8 <__swhatbuf_r>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c400:	4615      	mov	r5, r2
 800c402:	2900      	cmp	r1, #0
 800c404:	461e      	mov	r6, r3
 800c406:	b096      	sub	sp, #88	@ 0x58
 800c408:	da0c      	bge.n	800c424 <__swhatbuf_r+0x2c>
 800c40a:	89a3      	ldrh	r3, [r4, #12]
 800c40c:	2100      	movs	r1, #0
 800c40e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c412:	bf14      	ite	ne
 800c414:	2340      	movne	r3, #64	@ 0x40
 800c416:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c41a:	2000      	movs	r0, #0
 800c41c:	6031      	str	r1, [r6, #0]
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	b016      	add	sp, #88	@ 0x58
 800c422:	bd70      	pop	{r4, r5, r6, pc}
 800c424:	466a      	mov	r2, sp
 800c426:	f000 f849 	bl	800c4bc <_fstat_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	dbed      	blt.n	800c40a <__swhatbuf_r+0x12>
 800c42e:	9901      	ldr	r1, [sp, #4]
 800c430:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c434:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c438:	4259      	negs	r1, r3
 800c43a:	4159      	adcs	r1, r3
 800c43c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c440:	e7eb      	b.n	800c41a <__swhatbuf_r+0x22>

0800c442 <__smakebuf_r>:
 800c442:	898b      	ldrh	r3, [r1, #12]
 800c444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c446:	079d      	lsls	r5, r3, #30
 800c448:	4606      	mov	r6, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	d507      	bpl.n	800c45e <__smakebuf_r+0x1c>
 800c44e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	6123      	str	r3, [r4, #16]
 800c456:	2301      	movs	r3, #1
 800c458:	6163      	str	r3, [r4, #20]
 800c45a:	b003      	add	sp, #12
 800c45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c45e:	466a      	mov	r2, sp
 800c460:	ab01      	add	r3, sp, #4
 800c462:	f7ff ffc9 	bl	800c3f8 <__swhatbuf_r>
 800c466:	9f00      	ldr	r7, [sp, #0]
 800c468:	4605      	mov	r5, r0
 800c46a:	4639      	mov	r1, r7
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7fe fc11 	bl	800ac94 <_malloc_r>
 800c472:	b948      	cbnz	r0, 800c488 <__smakebuf_r+0x46>
 800c474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c478:	059a      	lsls	r2, r3, #22
 800c47a:	d4ee      	bmi.n	800c45a <__smakebuf_r+0x18>
 800c47c:	f023 0303 	bic.w	r3, r3, #3
 800c480:	f043 0302 	orr.w	r3, r3, #2
 800c484:	81a3      	strh	r3, [r4, #12]
 800c486:	e7e2      	b.n	800c44e <__smakebuf_r+0xc>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c48e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c492:	81a3      	strh	r3, [r4, #12]
 800c494:	9b01      	ldr	r3, [sp, #4]
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	b15b      	cbz	r3, 800c4b2 <__smakebuf_r+0x70>
 800c49a:	4630      	mov	r0, r6
 800c49c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4a0:	f000 f81e 	bl	800c4e0 <_isatty_r>
 800c4a4:	b128      	cbz	r0, 800c4b2 <__smakebuf_r+0x70>
 800c4a6:	89a3      	ldrh	r3, [r4, #12]
 800c4a8:	f023 0303 	bic.w	r3, r3, #3
 800c4ac:	f043 0301 	orr.w	r3, r3, #1
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	89a3      	ldrh	r3, [r4, #12]
 800c4b4:	431d      	orrs	r5, r3
 800c4b6:	81a5      	strh	r5, [r4, #12]
 800c4b8:	e7cf      	b.n	800c45a <__smakebuf_r+0x18>
	...

0800c4bc <_fstat_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4d06      	ldr	r5, [pc, #24]	@ (800c4dc <_fstat_r+0x20>)
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	4608      	mov	r0, r1
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	602b      	str	r3, [r5, #0]
 800c4ca:	f7f5 fecf 	bl	800226c <_fstat>
 800c4ce:	1c43      	adds	r3, r0, #1
 800c4d0:	d102      	bne.n	800c4d8 <_fstat_r+0x1c>
 800c4d2:	682b      	ldr	r3, [r5, #0]
 800c4d4:	b103      	cbz	r3, 800c4d8 <_fstat_r+0x1c>
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	bd38      	pop	{r3, r4, r5, pc}
 800c4da:	bf00      	nop
 800c4dc:	200016e4 	.word	0x200016e4

0800c4e0 <_isatty_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4d05      	ldr	r5, [pc, #20]	@ (800c4fc <_isatty_r+0x1c>)
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	f7f5 fecd 	bl	800228a <_isatty>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_isatty_r+0x1a>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_isatty_r+0x1a>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	200016e4 	.word	0x200016e4

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr
