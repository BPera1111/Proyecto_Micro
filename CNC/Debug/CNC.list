
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d0  0800ad98  0800ad98  0000bd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c468  0800c468  0000e350  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c468  0800c468  0000d468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c470  0800c470  0000e350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c470  0800c470  0000d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c474  0800c474  0000d474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800c478  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000469c  20000350  0800c7c8  0000e350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049ec  0800c7c8  0000e9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001940c  00000000  00000000  0000e379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ab  00000000  00000000  00027785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009f01  00000000  00000000  0002bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d7  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2da  00000000  00000000  00037977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180d6  00000000  00000000  00052c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a82a  00000000  00000000  0006ad27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5551  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dcc  00000000  00000000  000f5594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000f9360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad80 	.word	0x0800ad80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800ad80 	.word	0x0800ad80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f7ff fbf3 	bl	80009bc <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x1c>
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f8ea 	bl	80003e4 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffa2 	bl	8000168 <__aeabi_dsub>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <check_soft_limits>:
  * @param  x_defined: True si X está definido en el comando
  * @param  y_defined: True si Y está definido en el comando
  * @param  z_defined: True si Z está definido en el comando
  * @retval STATUS_OK si está dentro de límites, STATUS_SOFT_LIMIT_ERROR si está fuera
  */
uint8_t check_soft_limits(float target_x, float target_y, float target_z, bool x_defined, bool y_defined, bool z_defined) {
 8001234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001238:	b09e      	sub	sp, #120	@ 0x78
 800123a:	4607      	mov	r7, r0
 800123c:	460e      	mov	r6, r1
 800123e:	4615      	mov	r5, r2
 8001240:	f89d 8090 	ldrb.w	r8, [sp, #144]	@ 0x90
 8001244:	f89d 4094 	ldrb.w	r4, [sp, #148]	@ 0x94
    char msg[100];
    
    // Verificar límites para eje X
    if (x_defined) {
 8001248:	b323      	cbz	r3, 8001294 <check_soft_limits+0x60>
        if (target_x < MIN_TRAVEL_X || target_x > MAX_TRAVEL_X) {
 800124a:	2100      	movs	r1, #0
 800124c:	f7ff ff38 	bl	80010c0 <__aeabi_fcmplt>
 8001250:	b920      	cbnz	r0, 800125c <check_soft_limits+0x28>
 8001252:	4638      	mov	r0, r7
 8001254:	492c      	ldr	r1, [pc, #176]	@ (8001308 <check_soft_limits+0xd4>)
 8001256:	f7ff ff51 	bl	80010fc <__aeabi_fcmpgt>
 800125a:	b1d8      	cbz	r0, 8001294 <check_soft_limits+0x60>
            sprintf(msg, "Error: X=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 800125c:	4638      	mov	r0, r7
 800125e:	f7ff f8e3 	bl	8000428 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	2000      	movs	r0, #0
 8001266:	460b      	mov	r3, r1
 8001268:	4928      	ldr	r1, [pc, #160]	@ (800130c <check_soft_limits+0xd8>)
 800126a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800126e:	2100      	movs	r1, #0
 8001270:	2000      	movs	r0, #0
 8001272:	e9cd 0100 	strd	r0, r1, [sp]
 8001276:	4926      	ldr	r1, [pc, #152]	@ (8001310 <check_soft_limits+0xdc>)
    }
    
    // Verificar límites para eje Y
    if (y_defined) {
        if (target_y < MIN_TRAVEL_Y || target_y > MAX_TRAVEL_Y) {
            sprintf(msg, "Error: Y=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 8001278:	a805      	add	r0, sp, #20
 800127a:	f006 f8f9 	bl	8007470 <siprintf>
                   target_y, MIN_TRAVEL_Y, MAX_TRAVEL_Y);
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800127e:	a805      	add	r0, sp, #20
 8001280:	f7fe ff66 	bl	8000150 <strlen>
 8001284:	b281      	uxth	r1, r0
 8001286:	a805      	add	r0, sp, #20
 8001288:	f004 ffcc 	bl	8006224 <CDC_Transmit_FS>
            return STATUS_SOFT_LIMIT_ERROR;
 800128c:	2005      	movs	r0, #5
            return STATUS_SOFT_LIMIT_ERROR;
        }
    }
    
    return STATUS_OK;  // Todas las coordenadas están dentro de límites
}
 800128e:	b01e      	add	sp, #120	@ 0x78
 8001290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (y_defined) {
 8001294:	f1b8 0f00 	cmp.w	r8, #0
 8001298:	d018      	beq.n	80012cc <check_soft_limits+0x98>
        if (target_y < MIN_TRAVEL_Y || target_y > MAX_TRAVEL_Y) {
 800129a:	2100      	movs	r1, #0
 800129c:	4630      	mov	r0, r6
 800129e:	f7ff ff0f 	bl	80010c0 <__aeabi_fcmplt>
 80012a2:	b920      	cbnz	r0, 80012ae <check_soft_limits+0x7a>
 80012a4:	4630      	mov	r0, r6
 80012a6:	4918      	ldr	r1, [pc, #96]	@ (8001308 <check_soft_limits+0xd4>)
 80012a8:	f7ff ff28 	bl	80010fc <__aeabi_fcmpgt>
 80012ac:	b170      	cbz	r0, 80012cc <check_soft_limits+0x98>
            sprintf(msg, "Error: Y=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff f8ba 	bl	8000428 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	2000      	movs	r0, #0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4914      	ldr	r1, [pc, #80]	@ (800130c <check_soft_limits+0xd8>)
 80012bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	e9cd 0100 	strd	r0, r1, [sp]
 80012c8:	4912      	ldr	r1, [pc, #72]	@ (8001314 <check_soft_limits+0xe0>)
 80012ca:	e7d5      	b.n	8001278 <check_soft_limits+0x44>
    if (z_defined) {
 80012cc:	b1cc      	cbz	r4, 8001302 <check_soft_limits+0xce>
        if (target_z < MIN_TRAVEL_Z || target_z > MAX_TRAVEL_Z) {
 80012ce:	2100      	movs	r1, #0
 80012d0:	4628      	mov	r0, r5
 80012d2:	f7ff fef5 	bl	80010c0 <__aeabi_fcmplt>
 80012d6:	b928      	cbnz	r0, 80012e4 <check_soft_limits+0xb0>
 80012d8:	4628      	mov	r0, r5
 80012da:	490b      	ldr	r1, [pc, #44]	@ (8001308 <check_soft_limits+0xd4>)
 80012dc:	f7ff ff0e 	bl	80010fc <__aeabi_fcmpgt>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d0d4      	beq.n	800128e <check_soft_limits+0x5a>
            sprintf(msg, "Error: Z=%.2f fuera de límites [%.1f, %.1f]\r\n", 
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff f89f 	bl	8000428 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	2000      	movs	r0, #0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4906      	ldr	r1, [pc, #24]	@ (800130c <check_soft_limits+0xd8>)
 80012f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	e9cd 0100 	strd	r0, r1, [sp]
 80012fe:	4906      	ldr	r1, [pc, #24]	@ (8001318 <check_soft_limits+0xe4>)
 8001300:	e7ba      	b.n	8001278 <check_soft_limits+0x44>
    return STATUS_OK;  // Todas las coordenadas están dentro de límites
 8001302:	4620      	mov	r0, r4
 8001304:	e7c3      	b.n	800128e <check_soft_limits+0x5a>
 8001306:	bf00      	nop
 8001308:	43200000 	.word	0x43200000
 800130c:	40640000 	.word	0x40640000
 8001310:	0800ad98 	.word	0x0800ad98
 8001314:	0800adc7 	.word	0x0800adc7
 8001318:	0800adf6 	.word	0x0800adf6

0800131c <report_machine_limits>:
  * @brief  Reporta los límites de la máquina por USB
  * @retval None
  */
void report_machine_limits(void) {
    char msg[200];
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 800131c:	2200      	movs	r2, #0
 800131e:	2300      	movs	r3, #0
 8001320:	2000      	movs	r0, #0
void report_machine_limits(void) {
 8001322:	b500      	push	{lr}
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 8001324:	490c      	ldr	r1, [pc, #48]	@ (8001358 <report_machine_limits+0x3c>)
void report_machine_limits(void) {
 8001326:	b0bd      	sub	sp, #244	@ 0xf4
    sprintf(msg, "Límites de la máquina:\r\nX: [%.1f, %.1f] mm\r\nY: [%.1f, %.1f] mm\r\nZ: [%.1f, %.1f] mm\r\n",
 8001328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800132c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001338:	e9cd 0100 	strd	r0, r1, [sp]
 800133c:	4907      	ldr	r1, [pc, #28]	@ (800135c <report_machine_limits+0x40>)
 800133e:	a80a      	add	r0, sp, #40	@ 0x28
 8001340:	f006 f896 	bl	8007470 <siprintf>
           MIN_TRAVEL_X, MAX_TRAVEL_X, MIN_TRAVEL_Y, MAX_TRAVEL_Y, MIN_TRAVEL_Z, MAX_TRAVEL_Z);
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001344:	a80a      	add	r0, sp, #40	@ 0x28
 8001346:	f7fe ff03 	bl	8000150 <strlen>
 800134a:	b281      	uxth	r1, r0
 800134c:	a80a      	add	r0, sp, #40	@ 0x28
 800134e:	f004 ff69 	bl	8006224 <CDC_Transmit_FS>
}
 8001352:	b03d      	add	sp, #244	@ 0xf4
 8001354:	f85d fb04 	ldr.w	pc, [sp], #4
 8001358:	40640000 	.word	0x40640000
 800135c:	0800ae25 	.word	0x0800ae25

08001360 <gc_init>:
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 8001360:	2200      	movs	r2, #0
 8001362:	4b02      	ldr	r3, [pc, #8]	@ (800136c <gc_init+0xc>)
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	709a      	strb	r2, [r3, #2]
    // gc_state_modal.distance = 0;                    // G90 (absoluto) por defecto
    // gc_state_modal.feed_rate = 0;                   // G94 por defecto
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
    // gc_state_modal.coolant = 0;                     // M9 (coolant off) por defecto
    gc_state_modal.program_flow = 0;                // Normal execution
}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000036c 	.word	0x2000036c

08001370 <gc_clear_block>:

/**
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
 8001370:	b510      	push	{r4, lr}
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001372:	4c0d      	ldr	r4, [pc, #52]	@ (80013a8 <gc_clear_block+0x38>)
 8001374:	2225      	movs	r2, #37	@ 0x25
 8001376:	2100      	movs	r1, #0
 8001378:	4620      	mov	r0, r4
 800137a:	f006 f8de 	bl	800753a <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 800137e:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <gc_clear_block+0x3c>)
 8001380:	8811      	ldrh	r1, [r2, #0]
 8001382:	7892      	ldrb	r2, [r2, #2]
 8001384:	f824 1c03 	strh.w	r1, [r4, #-3]
 8001388:	f804 2c01 	strb.w	r2, [r4, #-1]
    
    // Inicializar valores como indefinidos
    gc_block.values.x = NAN;
 800138c:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <gc_clear_block+0x40>)
 800138e:	f8c4 2001 	str.w	r2, [r4, #1]
    gc_block.values.y = NAN;
 8001392:	f8c4 2005 	str.w	r2, [r4, #5]
    gc_block.values.z = NAN;
 8001396:	f8c4 2009 	str.w	r2, [r4, #9]
    gc_block.values.f = NAN;
 800139a:	f8c4 200d 	str.w	r2, [r4, #13]
    gc_block.values.s = NAN;
 800139e:	f8c4 2011 	str.w	r2, [r4, #17]
    //gc_block.values.n = -1;
    gc_block.values.p = 0;
    // gc_block.values.l = 0;
    gc_block.values.r = NAN;
 80013a2:	f8c4 2015 	str.w	r2, [r4, #21]
    gc_block.values.y_defined = false;
    gc_block.values.z_defined = false;
    gc_block.values.f_defined = false;
    gc_block.values.s_defined = false;
    gc_block.values.r_defined = false;
}
 80013a6:	bd10      	pop	{r4, pc}
 80013a8:	20000373 	.word	0x20000373
 80013ac:	2000036c 	.word	0x2000036c
 80013b0:	7fc00000 	.word	0x7fc00000

080013b4 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	4615      	mov	r5, r2
    char *ptr = line + *char_counter;
 80013b8:	780b      	ldrb	r3, [r1, #0]
 80013ba:	18c4      	adds	r4, r0, r3
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 80013bc:	7823      	ldrb	r3, [r4, #0]
 80013be:	4620      	mov	r0, r4
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	f104 0401 	add.w	r4, r4, #1
 80013c6:	d005      	beq.n	80013d4 <read_float+0x20>
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d003      	beq.n	80013d4 <read_float+0x20>
        ptr++; 
        (*char_counter)++;
    }
    
    if (c == 0) return false;  // Fin de línea
 80013cc:	b933      	cbnz	r3, 80013dc <read_float+0x28>
 80013ce:	2400      	movs	r4, #0
    
    if (!found_digit) return false;
    
    *float_ptr = atof(start);
    return true;
}
 80013d0:	4620      	mov	r0, r4
 80013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (*char_counter)++;
 80013d4:	780b      	ldrb	r3, [r1, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	700b      	strb	r3, [r1, #0]
 80013da:	e7ef      	b.n	80013bc <read_float+0x8>
    if (c == '+' || c == '-') { 
 80013dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80013de:	d001      	beq.n	80013e4 <read_float+0x30>
 80013e0:	2b2d      	cmp	r3, #45	@ 0x2d
 80013e2:	d117      	bne.n	8001414 <read_float+0x60>
        (*char_counter)++;
 80013e4:	780a      	ldrb	r2, [r1, #0]
        ptr++; 
 80013e6:	1c43      	adds	r3, r0, #1
        (*char_counter)++;
 80013e8:	3201      	adds	r2, #1
 80013ea:	700a      	strb	r2, [r1, #0]
            found_decimal = true;
 80013ec:	2400      	movs	r4, #0
 80013ee:	4626      	mov	r6, r4
 80013f0:	3b01      	subs	r3, #1
    while ((c = *ptr) != 0) {
 80013f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80013f6:	b12a      	cbz	r2, 8001404 <read_float+0x50>
        if (c >= '0' && c <= '9') {
 80013f8:	f1a2 0730 	sub.w	r7, r2, #48	@ 0x30
 80013fc:	2f09      	cmp	r7, #9
 80013fe:	d912      	bls.n	8001426 <read_float+0x72>
        } else if (c == '.' && !found_decimal) {
 8001400:	2a2e      	cmp	r2, #46	@ 0x2e
 8001402:	d009      	beq.n	8001418 <read_float+0x64>
    if (!found_digit) return false;
 8001404:	2c00      	cmp	r4, #0
 8001406:	d0e2      	beq.n	80013ce <read_float+0x1a>
    *float_ptr = atof(start);
 8001408:	f005 f930 	bl	800666c <atof>
 800140c:	f7ff fb5c 	bl	8000ac8 <__aeabi_d2f>
 8001410:	6028      	str	r0, [r5, #0]
    return true;
 8001412:	e7dd      	b.n	80013d0 <read_float+0x1c>
 8001414:	4603      	mov	r3, r0
 8001416:	e7e9      	b.n	80013ec <read_float+0x38>
        } else if (c == '.' && !found_decimal) {
 8001418:	2e00      	cmp	r6, #0
 800141a:	d1f3      	bne.n	8001404 <read_float+0x50>
            found_decimal = true;
 800141c:	2601      	movs	r6, #1
        (*char_counter)++;
 800141e:	780a      	ldrb	r2, [r1, #0]
 8001420:	3201      	adds	r2, #1
 8001422:	700a      	strb	r2, [r1, #0]
 8001424:	e7e5      	b.n	80013f2 <read_float+0x3e>
            found_digit = true;
 8001426:	2401      	movs	r4, #1
 8001428:	e7f9      	b.n	800141e <read_float+0x6a>
	...

0800142c <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 800142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t char_counter = 0;
 800142e:	2600      	movs	r6, #0
uint8_t gc_parse_line(char *line) {
 8001430:	4607      	mov	r7, r0
    uint8_t char_counter = 0;
 8001432:	f88d 6003 	strb.w	r6, [sp, #3]
    uint8_t int_value = 0;
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
    uint8_t word_bit = 0;
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 8001436:	f7ff ff9b 	bl	8001370 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 800143a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800143e:	5cfc      	ldrb	r4, [r7, r3]
 8001440:	b914      	cbnz	r4, 8001448 <gc_parse_line+0x1c>
 8001442:	e048      	b.n	80014d6 <gc_parse_line+0xaa>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 8001444:	3301      	adds	r3, #1
 8001446:	b2db      	uxtb	r3, r3
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 8001448:	5cfc      	ldrb	r4, [r7, r3]
 800144a:	2c20      	cmp	r4, #32
 800144c:	d0fa      	beq.n	8001444 <gc_parse_line+0x18>
 800144e:	2c09      	cmp	r4, #9
 8001450:	d0f8      	beq.n	8001444 <gc_parse_line+0x18>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
        if (letter == 0) break;  // Fin de línea
 8001452:	2c00      	cmp	r4, #0
 8001454:	d03f      	beq.n	80014d6 <gc_parse_line+0xaa>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 8001456:	f1a4 0261 	sub.w	r2, r4, #97	@ 0x61
 800145a:	2a19      	cmp	r2, #25
            letter -= 32;
 800145c:	bf98      	it	ls
 800145e:	3c20      	subls	r4, #32
        }
        
        char_counter++;
 8001460:	f103 0301 	add.w	r3, r3, #1
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001464:	4638      	mov	r0, r7
 8001466:	aa01      	add	r2, sp, #4
 8001468:	f10d 0103 	add.w	r1, sp, #3
            letter -= 32;
 800146c:	bf98      	it	ls
 800146e:	b2e4      	uxtbls	r4, r4
        char_counter++;
 8001470:	f88d 3003 	strb.w	r3, [sp, #3]
        if (!read_float(line, &char_counter, &value)) {
 8001474:	f7ff ff9e 	bl	80013b4 <read_float>
 8001478:	2800      	cmp	r0, #0
 800147a:	f000 808a 	beq.w	8001592 <gc_parse_line+0x166>
            return STATUS_BAD_NUMBER_FORMAT;
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 800147e:	9d01      	ldr	r5, [sp, #4]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001480:	3c46      	subs	r4, #70	@ 0x46
        int_value = truncf(value);
 8001482:	4628      	mov	r0, r5
 8001484:	f008 fa74 	bl	8009970 <truncf>
 8001488:	f7ff fe7e 	bl	8001188 <__aeabi_f2uiz>
 800148c:	b2c3      	uxtb	r3, r0
        switch (letter) {
 800148e:	2c14      	cmp	r4, #20
 8001490:	d815      	bhi.n	80014be <gc_parse_line+0x92>
 8001492:	e8df f004 	tbb	[pc, r4]
 8001496:	0b61      	.short	0x0b61
 8001498:	14141414 	.word	0x14141414
 800149c:	14142314 	.word	0x14142314
 80014a0:	7278146f 	.word	0x7278146f
 80014a4:	14141414 	.word	0x14141414
 80014a8:	5752      	.short	0x5752
 80014aa:	5c          	.byte	0x5c
 80014ab:	00          	.byte	0x00
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014ac:	2b63      	cmp	r3, #99	@ 0x63
 80014ae:	d806      	bhi.n	80014be <gc_parse_line+0x92>
                
                switch (int_value) {
 80014b0:	2b1c      	cmp	r3, #28
 80014b2:	d030      	beq.n	8001516 <gc_parse_line+0xea>
 80014b4:	d805      	bhi.n	80014c2 <gc_parse_line+0x96>
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d905      	bls.n	80014c6 <gc_parse_line+0x9a>
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d02b      	beq.n	8001516 <gc_parse_line+0xea>
                
            case 'M':
                // Validar rango de comandos M
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
                
                switch (int_value) {
 80014be:	2414      	movs	r4, #20
 80014c0:	e009      	b.n	80014d6 <gc_parse_line+0xaa>
                switch (int_value) {
 80014c2:	2b5c      	cmp	r3, #92	@ 0x5c
 80014c4:	e7fa      	b.n	80014bc <gc_parse_line+0x90>
                        gc_block.modal.motion = int_value;
 80014c6:	4a34      	ldr	r2, [pc, #208]	@ (8001598 <gc_parse_line+0x16c>)
 80014c8:	7013      	strb	r3, [r2, #0]
                        word_bit = MODAL_GROUP_G1;
 80014ca:	2201      	movs	r2, #1
                if (bit_istrue(command_words, bit(word_bit))) {
 80014cc:	fa46 f302 	asr.w	r3, r6, r2
 80014d0:	07db      	lsls	r3, r3, #31
 80014d2:	d52d      	bpl.n	8001530 <gc_parse_line+0x104>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80014d4:	2415      	movs	r4, #21
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
}
 80014d6:	4620      	mov	r0, r4
 80014d8:	b003      	add	sp, #12
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 80014dc:	2b63      	cmp	r3, #99	@ 0x63
 80014de:	d8ee      	bhi.n	80014be <gc_parse_line+0x92>
                switch (int_value) {
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d018      	beq.n	8001516 <gc_parse_line+0xea>
 80014e4:	d812      	bhi.n	800150c <gc_parse_line+0xe0>
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d8e9      	bhi.n	80014be <gc_parse_line+0x92>
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d8e7      	bhi.n	80014be <gc_parse_line+0x92>
 80014ee:	a201      	add	r2, pc, #4	@ (adr r2, 80014f4 <gc_parse_line+0xc8>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001521 	.word	0x08001521
 80014f8:	080014bf 	.word	0x080014bf
 80014fc:	08001521 	.word	0x08001521
 8001500:	08001529 	.word	0x08001529
 8001504:	080014bf 	.word	0x080014bf
 8001508:	08001529 	.word	0x08001529
 800150c:	2b12      	cmp	r3, #18
 800150e:	d002      	beq.n	8001516 <gc_parse_line+0xea>
 8001510:	2b54      	cmp	r3, #84	@ 0x54
 8001512:	d1d4      	bne.n	80014be <gc_parse_line+0x92>
 8001514:	2312      	movs	r3, #18
                        gc_block.non_modal_command = 28;  // G28 - Home
 8001516:	4a20      	ldr	r2, [pc, #128]	@ (8001598 <gc_parse_line+0x16c>)
 8001518:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
                        word_bit = MODAL_GROUP_G0;
 800151c:	2200      	movs	r2, #0
 800151e:	e7d5      	b.n	80014cc <gc_parse_line+0xa0>
                        gc_block.modal.program_flow = int_value;
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <gc_parse_line+0x16c>)
 8001522:	7093      	strb	r3, [r2, #2]
                        word_bit = MODAL_GROUP_M4;
 8001524:	220b      	movs	r2, #11
                        break;
 8001526:	e7d1      	b.n	80014cc <gc_parse_line+0xa0>
                        gc_block.modal.spindle = int_value;
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <gc_parse_line+0x16c>)
 800152a:	7053      	strb	r3, [r2, #1]
                        word_bit = MODAL_GROUP_M7;
 800152c:	220c      	movs	r2, #12
                        break;
 800152e:	e7cd      	b.n	80014cc <gc_parse_line+0xa0>
                command_words |= bit(word_bit);
 8001530:	2301      	movs	r3, #1
 8001532:	4093      	lsls	r3, r2
 8001534:	4333      	orrs	r3, r6
 8001536:	b29e      	uxth	r6, r3
                break;
 8001538:	e77f      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.x_defined = true;
 800153a:	2201      	movs	r2, #1
                gc_block.values.x = value;
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <gc_parse_line+0x16c>)
 800153e:	605d      	str	r5, [r3, #4]
                gc_block.values.x_defined = true;
 8001540:	775a      	strb	r2, [r3, #29]
                break;
 8001542:	e77a      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.y_defined = true;
 8001544:	2201      	movs	r2, #1
                gc_block.values.y = value;
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <gc_parse_line+0x16c>)
 8001548:	609d      	str	r5, [r3, #8]
                gc_block.values.y_defined = true;
 800154a:	779a      	strb	r2, [r3, #30]
                break;
 800154c:	e775      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.z_defined = true;
 800154e:	2201      	movs	r2, #1
                gc_block.values.z = value;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <gc_parse_line+0x16c>)
 8001552:	60dd      	str	r5, [r3, #12]
                gc_block.values.z_defined = true;
 8001554:	77da      	strb	r2, [r3, #31]
                break;
 8001556:	e770      	b.n	800143a <gc_parse_line+0xe>
                gc_block.values.f_defined = true;
 8001558:	2201      	movs	r2, #1
                gc_block.values.f = value;
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <gc_parse_line+0x16c>)
 800155c:	611d      	str	r5, [r3, #16]
                gc_block.values.f_defined = true;
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001562:	2100      	movs	r1, #0
 8001564:	4628      	mov	r0, r5
 8001566:	f7ff fdab 	bl	80010c0 <__aeabi_fcmplt>
 800156a:	2800      	cmp	r0, #0
 800156c:	f43f af65 	beq.w	800143a <gc_parse_line+0xe>
 8001570:	2404      	movs	r4, #4
 8001572:	e7b0      	b.n	80014d6 <gc_parse_line+0xaa>
                gc_block.values.p = int_value;
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <gc_parse_line+0x16c>)
 8001576:	7713      	strb	r3, [r2, #28]
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001578:	e7f3      	b.n	8001562 <gc_parse_line+0x136>
                gc_block.values.s_defined = true;
 800157a:	2201      	movs	r2, #1
                gc_block.values.s = value;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <gc_parse_line+0x16c>)
 800157e:	615d      	str	r5, [r3, #20]
                gc_block.values.s_defined = true;
 8001580:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001584:	e7ed      	b.n	8001562 <gc_parse_line+0x136>
                gc_block.values.r_defined = true;
 8001586:	2201      	movs	r2, #1
                gc_block.values.r = value;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <gc_parse_line+0x16c>)
 800158a:	619d      	str	r5, [r3, #24]
                gc_block.values.r_defined = true;
 800158c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001590:	e7e7      	b.n	8001562 <gc_parse_line+0x136>
            return STATUS_BAD_NUMBER_FORMAT;
 8001592:	2402      	movs	r4, #2
 8001594:	e79f      	b.n	80014d6 <gc_parse_line+0xaa>
 8001596:	bf00      	nop
 8001598:	20000370 	.word	0x20000370

0800159c <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 800159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 80015a0:	4c74      	ldr	r4, [pc, #464]	@ (8001774 <gc_execute_block+0x1d8>)
uint8_t gc_execute_block(void) {
 80015a2:	b09e      	sub	sp, #120	@ 0x78
    switch (gc_block.non_modal_command) {
 80015a4:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d078      	beq.n	800169e <gc_execute_block+0x102>
 80015ac:	d810      	bhi.n	80015d0 <gc_execute_block+0x34>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d058      	beq.n	8001664 <gc_execute_block+0xc8>
 80015b2:	2b11      	cmp	r3, #17
 80015b4:	d06c      	beq.n	8001690 <gc_execute_block+0xf4>
            disableSteppers();
            break;
    }
    
    // Verificar límites de software antes de ejecutar comandos de movimiento
    if (gc_block.modal.motion == MOTION_MODE_SEEK || 
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d977      	bls.n	80016ac <gc_execute_block+0x110>
            }
        }
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 80015bc:	7823      	ldrb	r3, [r4, #0]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	f200 8094 	bhi.w	80016ec <gc_execute_block+0x150>
 80015c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80015c8:	009e0085 	.word	0x009e0085
 80015cc:	00c100b1 	.word	0x00c100b1
    switch (gc_block.non_modal_command) {
 80015d0:	2b1c      	cmp	r3, #28
 80015d2:	d056      	beq.n	8001682 <gc_execute_block+0xe6>
 80015d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d6:	d1ee      	bne.n	80015b6 <gc_execute_block+0x1a>
            if (gc_block.values.x_defined) {
 80015d8:	7f63      	ldrb	r3, [r4, #29]
 80015da:	4e67      	ldr	r6, [pc, #412]	@ (8001778 <gc_execute_block+0x1dc>)
 80015dc:	b133      	cbz	r3, 80015ec <gc_execute_block+0x50>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 80015de:	4967      	ldr	r1, [pc, #412]	@ (800177c <gc_execute_block+0x1e0>)
 80015e0:	6860      	ldr	r0, [r4, #4]
 80015e2:	f7ff fbcf 	bl	8000d84 <__aeabi_fmul>
 80015e6:	f7ff fda9 	bl	800113c <__aeabi_f2iz>
 80015ea:	6030      	str	r0, [r6, #0]
            if (gc_block.values.y_defined) {
 80015ec:	7fa3      	ldrb	r3, [r4, #30]
 80015ee:	4d64      	ldr	r5, [pc, #400]	@ (8001780 <gc_execute_block+0x1e4>)
 80015f0:	b133      	cbz	r3, 8001600 <gc_execute_block+0x64>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 80015f2:	4962      	ldr	r1, [pc, #392]	@ (800177c <gc_execute_block+0x1e0>)
 80015f4:	68a0      	ldr	r0, [r4, #8]
 80015f6:	f7ff fbc5 	bl	8000d84 <__aeabi_fmul>
 80015fa:	f7ff fd9f 	bl	800113c <__aeabi_f2iz>
 80015fe:	6028      	str	r0, [r5, #0]
            if (gc_block.values.z_defined) {
 8001600:	7fe3      	ldrb	r3, [r4, #31]
 8001602:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8001784 <gc_execute_block+0x1e8>
 8001606:	b13b      	cbz	r3, 8001618 <gc_execute_block+0x7c>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 8001608:	495f      	ldr	r1, [pc, #380]	@ (8001788 <gc_execute_block+0x1ec>)
 800160a:	68e0      	ldr	r0, [r4, #12]
 800160c:	f7ff fbba 	bl	8000d84 <__aeabi_fmul>
 8001610:	f7ff fd94 	bl	800113c <__aeabi_f2iz>
 8001614:	f8c8 0000 	str.w	r0, [r8]
                   currentX/(float)STEPS_PER_MM_X, 
 8001618:	6830      	ldr	r0, [r6, #0]
 800161a:	f7ff fb5f 	bl	8000cdc <__aeabi_i2f>
 800161e:	4957      	ldr	r1, [pc, #348]	@ (800177c <gc_execute_block+0x1e0>)
 8001620:	f7ff fc64 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 8001624:	f7fe ff00 	bl	8000428 <__aeabi_f2d>
 8001628:	4606      	mov	r6, r0
                   currentZ/(float)STEPS_PER_MM_Z);
 800162a:	f8d8 0000 	ldr.w	r0, [r8]
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800162e:	460f      	mov	r7, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 8001630:	f7ff fb54 	bl	8000cdc <__aeabi_i2f>
 8001634:	4954      	ldr	r1, [pc, #336]	@ (8001788 <gc_execute_block+0x1ec>)
 8001636:	f7ff fc59 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800163a:	f7fe fef5 	bl	8000428 <__aeabi_f2d>
 800163e:	e9cd 0102 	strd	r0, r1, [sp, #8]
                   currentY/(float)STEPS_PER_MM_Y, 
 8001642:	6828      	ldr	r0, [r5, #0]
 8001644:	f7ff fb4a 	bl	8000cdc <__aeabi_i2f>
 8001648:	494c      	ldr	r1, [pc, #304]	@ (800177c <gc_execute_block+0x1e0>)
 800164a:	f7ff fc4f 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 800164e:	f7fe feeb 	bl	8000428 <__aeabi_f2d>
 8001652:	4632      	mov	r2, r6
 8001654:	e9cd 0100 	strd	r0, r1, [sp]
 8001658:	463b      	mov	r3, r7
 800165a:	494c      	ldr	r1, [pc, #304]	@ (800178c <gc_execute_block+0x1f0>)
 800165c:	a805      	add	r0, sp, #20
 800165e:	f005 ff07 	bl	8007470 <siprintf>
 8001662:	e006      	b.n	8001672 <gc_execute_block+0xd6>
            if (gc_block.values.p > 0) {
 8001664:	7f22      	ldrb	r2, [r4, #28]
 8001666:	2a00      	cmp	r2, #0
 8001668:	d0a5      	beq.n	80015b6 <gc_execute_block+0x1a>
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 800166a:	4949      	ldr	r1, [pc, #292]	@ (8001790 <gc_execute_block+0x1f4>)
 800166c:	a805      	add	r0, sp, #20
 800166e:	f005 feff 	bl	8007470 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001672:	a805      	add	r0, sp, #20
 8001674:	f7fe fd6c 	bl	8000150 <strlen>
 8001678:	b281      	uxth	r1, r0
 800167a:	a805      	add	r0, sp, #20
 800167c:	f004 fdd2 	bl	8006224 <CDC_Transmit_FS>
            break;
 8001680:	e799      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 8001682:	2116      	movs	r1, #22
 8001684:	4843      	ldr	r0, [pc, #268]	@ (8001794 <gc_execute_block+0x1f8>)
 8001686:	f004 fdcd 	bl	8006224 <CDC_Transmit_FS>
            performHoming();
 800168a:	f000 fb07 	bl	8001c9c <performHoming>
            break;
 800168e:	e792      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 8001690:	211b      	movs	r1, #27
 8001692:	4841      	ldr	r0, [pc, #260]	@ (8001798 <gc_execute_block+0x1fc>)
 8001694:	f004 fdc6 	bl	8006224 <CDC_Transmit_FS>
            enableSteppers();
 8001698:	f001 fb6e 	bl	8002d78 <enableSteppers>
            break;
 800169c:	e78b      	b.n	80015b6 <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 800169e:	2118      	movs	r1, #24
 80016a0:	483e      	ldr	r0, [pc, #248]	@ (800179c <gc_execute_block+0x200>)
 80016a2:	f004 fdbf 	bl	8006224 <CDC_Transmit_FS>
            disableSteppers();
 80016a6:	f001 fb81 	bl	8002dac <disableSteppers>
            break;
 80016aa:	e784      	b.n	80015b6 <gc_execute_block+0x1a>
        if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016ac:	69e3      	ldr	r3, [r4, #28]
 80016ae:	2bff      	cmp	r3, #255	@ 0xff
 80016b0:	d984      	bls.n	80015bc <gc_execute_block+0x20>
            uint8_t limit_status = check_soft_limits(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 80016b2:	7fe3      	ldrb	r3, [r4, #31]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	7fa3      	ldrb	r3, [r4, #30]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	7f63      	ldrb	r3, [r4, #29]
 80016bc:	68e2      	ldr	r2, [r4, #12]
 80016be:	68a1      	ldr	r1, [r4, #8]
 80016c0:	6860      	ldr	r0, [r4, #4]
 80016c2:	f7ff fdb7 	bl	8001234 <check_soft_limits>
            if (limit_status != STATUS_OK) {
 80016c6:	2800      	cmp	r0, #0
 80016c8:	f43f af78 	beq.w	80015bc <gc_execute_block+0x20>
        
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
    
    return STATUS_OK;
}
 80016cc:	b01e      	add	sp, #120	@ 0x78
 80016ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016d2:	69e3      	ldr	r3, [r4, #28]
 80016d4:	2bff      	cmp	r3, #255	@ 0xff
 80016d6:	d909      	bls.n	80016ec <gc_execute_block+0x150>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 80016d8:	7fe3      	ldrb	r3, [r4, #31]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	7fa3      	ldrb	r3, [r4, #30]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	7f63      	ldrb	r3, [r4, #29]
 80016e2:	68e2      	ldr	r2, [r4, #12]
 80016e4:	68a1      	ldr	r1, [r4, #8]
 80016e6:	6860      	ldr	r0, [r4, #4]
 80016e8:	f000 f940 	bl	800196c <moveAxesRapidCallback>
    switch (gc_block.modal.spindle) {
 80016ec:	7863      	ldrb	r3, [r4, #1]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d037      	beq.n	8001762 <gc_execute_block+0x1c6>
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d03a      	beq.n	800176c <gc_execute_block+0x1d0>
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 80016f6:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <gc_execute_block+0x204>)
 80016f8:	8821      	ldrh	r1, [r4, #0]
 80016fa:	78a2      	ldrb	r2, [r4, #2]
    return STATUS_OK;
 80016fc:	2000      	movs	r0, #0
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 80016fe:	8019      	strh	r1, [r3, #0]
 8001700:	709a      	strb	r2, [r3, #2]
    return STATUS_OK;
 8001702:	e7e3      	b.n	80016cc <gc_execute_block+0x130>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001704:	69e3      	ldr	r3, [r4, #28]
 8001706:	2bff      	cmp	r3, #255	@ 0xff
 8001708:	d9f0      	bls.n	80016ec <gc_execute_block+0x150>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 800170a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800170e:	9303      	str	r3, [sp, #12]
 8001710:	7fe3      	ldrb	r3, [r4, #31]
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	7fa3      	ldrb	r3, [r4, #30]
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	7f63      	ldrb	r3, [r4, #29]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	6923      	ldr	r3, [r4, #16]
 800171e:	68e2      	ldr	r2, [r4, #12]
 8001720:	68a1      	ldr	r1, [r4, #8]
 8001722:	6860      	ldr	r0, [r4, #4]
 8001724:	f000 f93a 	bl	800199c <moveAxesLinearCallback>
 8001728:	e7e0      	b.n	80016ec <gc_execute_block+0x150>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 800172a:	69e3      	ldr	r3, [r4, #28]
 800172c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001730:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001734:	b913      	cbnz	r3, 800173c <gc_execute_block+0x1a0>
 8001736:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800173a:	b133      	cbz	r3, 800174a <gc_execute_block+0x1ae>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 1);  // 1 para sentido horario
 800173c:	2301      	movs	r3, #1
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 800173e:	69a2      	ldr	r2, [r4, #24]
 8001740:	68a1      	ldr	r1, [r4, #8]
 8001742:	6860      	ldr	r0, [r4, #4]
 8001744:	f000 f928 	bl	8001998 <moveAxesArcCallback>
                break;
 8001748:	e7d0      	b.n	80016ec <gc_execute_block+0x150>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 800174a:	69e3      	ldr	r3, [r4, #28]
 800174c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001750:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001754:	b91b      	cbnz	r3, 800175e <gc_execute_block+0x1c2>
 8001756:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0c6      	beq.n	80016ec <gc_execute_block+0x150>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 800175e:	2300      	movs	r3, #0
 8001760:	e7ed      	b.n	800173e <gc_execute_block+0x1a2>
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001762:	2117      	movs	r1, #23
 8001764:	480f      	ldr	r0, [pc, #60]	@ (80017a4 <gc_execute_block+0x208>)
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001766:	f004 fd5d 	bl	8006224 <CDC_Transmit_FS>
            break;
 800176a:	e7c4      	b.n	80016f6 <gc_execute_block+0x15a>
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 800176c:	2115      	movs	r1, #21
 800176e:	480e      	ldr	r0, [pc, #56]	@ (80017a8 <gc_execute_block+0x20c>)
 8001770:	e7f9      	b.n	8001766 <gc_execute_block+0x1ca>
 8001772:	bf00      	nop
 8001774:	20000370 	.word	0x20000370
 8001778:	20002358 	.word	0x20002358
 800177c:	429e0000 	.word	0x429e0000
 8001780:	20002354 	.word	0x20002354
 8001784:	20002350 	.word	0x20002350
 8001788:	4575a000 	.word	0x4575a000
 800178c:	0800aeaf 	.word	0x0800aeaf
 8001790:	0800ae7c 	.word	0x0800ae7c
 8001794:	0800ae98 	.word	0x0800ae98
 8001798:	0800aeda 	.word	0x0800aeda
 800179c:	0800aef6 	.word	0x0800aef6
 80017a0:	2000036c 	.word	0x2000036c
 80017a4:	0800af0f 	.word	0x0800af0f
 80017a8:	0800af27 	.word	0x0800af27

080017ac <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 80017ac:	b508      	push	{r3, lr}
 80017ae:	1e42      	subs	r2, r0, #1
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 80017b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80017b4:	b933      	cbnz	r3, 80017c4 <gc_execute_line+0x18>
            line[i] -= 32;  // Convertir a mayúscula
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 80017b6:	f7ff fe39 	bl	800142c <gc_parse_line>
    if (status_code != STATUS_OK) {
 80017ba:	b950      	cbnz	r0, 80017d2 <gc_execute_line+0x26>
    if (status_code != STATUS_OK) {
        return status_code;
    }
    
    return STATUS_OK;
}
 80017bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    status_code = gc_execute_block();
 80017c0:	f7ff beec 	b.w	800159c <gc_execute_block>
        if (line[i] >= 'a' && line[i] <= 'z') {
 80017c4:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 80017c8:	2919      	cmp	r1, #25
            line[i] -= 32;  // Convertir a mayúscula
 80017ca:	bf9c      	itt	ls
 80017cc:	3b20      	subls	r3, #32
 80017ce:	7013      	strbls	r3, [r2, #0]
    for (int i = 0; line[i] != 0; i++) {
 80017d0:	e7ee      	b.n	80017b0 <gc_execute_line+0x4>
}
 80017d2:	bd08      	pop	{r3, pc}

080017d4 <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 80017d4:	b500      	push	{lr}
 80017d6:	4602      	mov	r2, r0
 80017d8:	b089      	sub	sp, #36	@ 0x24
    switch (status_code) {
 80017da:	281c      	cmp	r0, #28
 80017dc:	d841      	bhi.n	8001862 <report_status_message+0x8e>
 80017de:	e8df f000 	tbb	[pc, r0]
 80017e2:	160f      	.short	0x160f
 80017e4:	221f1c19 	.word	0x221f1c19
 80017e8:	40404040 	.word	0x40404040
 80017ec:	40404040 	.word	0x40404040
 80017f0:	40404040 	.word	0x40404040
 80017f4:	28254040 	.word	0x28254040
 80017f8:	34312e2b 	.word	0x34312e2b
 80017fc:	3a37      	.short	0x3a37
 80017fe:	3d          	.byte	0x3d
 80017ff:	00          	.byte	0x00
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 8001800:	2104      	movs	r1, #4
 8001802:	481f      	ldr	r0, [pc, #124]	@ (8001880 <report_status_message+0xac>)
                sprintf(msg, "error:%d\r\n", status_code);
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
            }
            break;
    }
}
 8001804:	b009      	add	sp, #36	@ 0x24
 8001806:	f85d eb04 	ldr.w	lr, [sp], #4
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 800180a:	f004 bd0b 	b.w	8006224 <CDC_Transmit_FS>
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 800180e:	2124      	movs	r1, #36	@ 0x24
 8001810:	481c      	ldr	r0, [pc, #112]	@ (8001884 <report_status_message+0xb0>)
 8001812:	e7f7      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 8001814:	211e      	movs	r1, #30
 8001816:	481c      	ldr	r0, [pc, #112]	@ (8001888 <report_status_message+0xb4>)
 8001818:	e7f4      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 800181a:	211e      	movs	r1, #30
 800181c:	481b      	ldr	r0, [pc, #108]	@ (800188c <report_status_message+0xb8>)
 800181e:	e7f1      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 8001820:	211b      	movs	r1, #27
 8001822:	481b      	ldr	r0, [pc, #108]	@ (8001890 <report_status_message+0xbc>)
 8001824:	e7ee      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:5 (Soft limit exceeded)\r\n", 32);
 8001826:	2120      	movs	r1, #32
 8001828:	481a      	ldr	r0, [pc, #104]	@ (8001894 <report_status_message+0xc0>)
 800182a:	e7eb      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 800182c:	2121      	movs	r1, #33	@ 0x21
 800182e:	481a      	ldr	r0, [pc, #104]	@ (8001898 <report_status_message+0xc4>)
 8001830:	e7e8      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 8001832:	2123      	movs	r1, #35	@ 0x23
 8001834:	4819      	ldr	r0, [pc, #100]	@ (800189c <report_status_message+0xc8>)
 8001836:	e7e5      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 8001838:	2121      	movs	r1, #33	@ 0x21
 800183a:	4819      	ldr	r0, [pc, #100]	@ (80018a0 <report_status_message+0xcc>)
 800183c:	e7e2      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 800183e:	2127      	movs	r1, #39	@ 0x27
 8001840:	4818      	ldr	r0, [pc, #96]	@ (80018a4 <report_status_message+0xd0>)
 8001842:	e7df      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 8001844:	2123      	movs	r1, #35	@ 0x23
 8001846:	4818      	ldr	r0, [pc, #96]	@ (80018a8 <report_status_message+0xd4>)
 8001848:	e7dc      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 800184a:	211b      	movs	r1, #27
 800184c:	4817      	ldr	r0, [pc, #92]	@ (80018ac <report_status_message+0xd8>)
 800184e:	e7d9      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 8001850:	211b      	movs	r1, #27
 8001852:	4817      	ldr	r0, [pc, #92]	@ (80018b0 <report_status_message+0xdc>)
 8001854:	e7d6      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 8001856:	2121      	movs	r1, #33	@ 0x21
 8001858:	4816      	ldr	r0, [pc, #88]	@ (80018b4 <report_status_message+0xe0>)
 800185a:	e7d3      	b.n	8001804 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 800185c:	2120      	movs	r1, #32
 800185e:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <report_status_message+0xe4>)
 8001860:	e7d0      	b.n	8001804 <report_status_message+0x30>
                sprintf(msg, "error:%d\r\n", status_code);
 8001862:	4916      	ldr	r1, [pc, #88]	@ (80018bc <report_status_message+0xe8>)
 8001864:	4668      	mov	r0, sp
 8001866:	f005 fe03 	bl	8007470 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800186a:	4668      	mov	r0, sp
 800186c:	f7fe fc70 	bl	8000150 <strlen>
 8001870:	b281      	uxth	r1, r0
 8001872:	4668      	mov	r0, sp
 8001874:	f004 fcd6 	bl	8006224 <CDC_Transmit_FS>
}
 8001878:	b009      	add	sp, #36	@ 0x24
 800187a:	f85d fb04 	ldr.w	pc, [sp], #4
 800187e:	bf00      	nop
 8001880:	0800af3d 	.word	0x0800af3d
 8001884:	0800af42 	.word	0x0800af42
 8001888:	0800af66 	.word	0x0800af66
 800188c:	0800af84 	.word	0x0800af84
 8001890:	0800afa2 	.word	0x0800afa2
 8001894:	0800afbd 	.word	0x0800afbd
 8001898:	0800afdd 	.word	0x0800afdd
 800189c:	0800affe 	.word	0x0800affe
 80018a0:	0800b021 	.word	0x0800b021
 80018a4:	0800b042 	.word	0x0800b042
 80018a8:	0800b069 	.word	0x0800b069
 80018ac:	0800b08c 	.word	0x0800b08c
 80018b0:	0800b0a7 	.word	0x0800b0a7
 80018b4:	0800b0c2 	.word	0x0800b0c2
 80018b8:	0800b0e3 	.word	0x0800b0e3
 80018bc:	0800b103 	.word	0x0800b103

080018c0 <isEndstopPressed.part.0>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
    switch(axis) {
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 80018c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
bool isEndstopPressed(char axis) {
 80018c4:	b508      	push	{r3, lr}
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 80018c6:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <isEndstopPressed.part.0+0x14>)
 80018c8:	f001 ffce 	bl	8003868 <HAL_GPIO_ReadPin>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
        default:
            return false;
    }
}
 80018cc:	fab0 f080 	clz	r0, r0
 80018d0:	0940      	lsrs	r0, r0, #5
 80018d2:	bd08      	pop	{r3, pc}
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <sendUSBText>:
void sendUSBText(const char* message) {
 80018d8:	b510      	push	{r4, lr}
 80018da:	4604      	mov	r4, r0
    uint16_t len = strlen(message);
 80018dc:	f7fe fc38 	bl	8000150 <strlen>
    CDC_Transmit_Queued((uint8_t*)message, len);
 80018e0:	b281      	uxth	r1, r0
 80018e2:	4620      	mov	r0, r4
}
 80018e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_Queued((uint8_t*)message, len);
 80018e8:	f004 bd28 	b.w	800633c <CDC_Transmit_Queued>

080018ec <setup>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <setup+0x78>)
void setup(void) {
 80018ee:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018f0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 80018f4:	2503      	movs	r5, #3
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018fe:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
 8001902:	6813      	ldr	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 8001904:	4c18      	ldr	r4, [pc, #96]	@ (8001968 <setup+0x7c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]
    enableSteppers();
 800190c:	f001 fa34 	bl	8002d78 <enableSteppers>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2102      	movs	r1, #2
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <setup+0x7c>)
 8001916:	f001 ffad 	bl	8003874 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2101      	movs	r1, #1
 800191e:	4812      	ldr	r0, [pc, #72]	@ (8001968 <setup+0x7c>)
 8001920:	f001 ffa8 	bl	8003874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2102      	movs	r1, #2
 8001928:	4620      	mov	r0, r4
 800192a:	f001 ffa3 	bl	8003874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	4620      	mov	r0, r4
 8001932:	4611      	mov	r1, r2
 8001934:	f001 ff9e 	bl	8003874 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 8001938:	2096      	movs	r0, #150	@ 0x96
 800193a:	f001 fe4b 	bl	80035d4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2102      	movs	r1, #2
 8001942:	4620      	mov	r0, r4
 8001944:	f001 ff96 	bl	8003874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	4620      	mov	r0, r4
 800194e:	f001 ff91 	bl	8003874 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 8001952:	2096      	movs	r0, #150	@ 0x96
 8001954:	f001 fe3e 	bl	80035d4 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001958:	3d01      	subs	r5, #1
 800195a:	d1e3      	bne.n	8001924 <setup+0x38>
}
 800195c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    gc_init();
 8001960:	f7ff bcfe 	b.w	8001360 <gc_init>
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	40010c00 	.word	0x40010c00

0800196c <moveAxesRapidCallback>:
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 800196c:	b430      	push	{r4, r5}
 800196e:	f89d 5008 	ldrb.w	r5, [sp, #8]
 8001972:	f89d 400c 	ldrb.w	r4, [sp, #12]
    float target_x = x_defined ? x : NAN;
 8001976:	b903      	cbnz	r3, 800197a <moveAxesRapidCallback+0xe>
 8001978:	4805      	ldr	r0, [pc, #20]	@ (8001990 <moveAxesRapidCallback+0x24>)
    float target_y = y_defined ? y : NAN;
 800197a:	b905      	cbnz	r5, 800197e <moveAxesRapidCallback+0x12>
 800197c:	4904      	ldr	r1, [pc, #16]	@ (8001990 <moveAxesRapidCallback+0x24>)
    float target_z = z_defined ? z : NAN;
 800197e:	b904      	cbnz	r4, 8001982 <moveAxesRapidCallback+0x16>
 8001980:	4a03      	ldr	r2, [pc, #12]	@ (8001990 <moveAxesRapidCallback+0x24>)
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 8001982:	2301      	movs	r3, #1
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <moveAxesRapidCallback+0x28>)
}
 8001988:	bc30      	pop	{r4, r5}
    moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f001 ba28 	b.w	8002de0 <moveAxesWithFeedRate>
 8001990:	7fc00000 	.word	0x7fc00000
 8001994:	20000004 	.word	0x20000004

08001998 <moveAxesArcCallback>:
    arc_move_r(x, y, r, clockwise);
 8001998:	f001 bb5e 	b.w	8003058 <arc_move_r>

0800199c <moveAxesLinearCallback>:
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 800199c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a0:	461f      	mov	r7, r3
 80019a2:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	4616      	mov	r6, r2
 80019ac:	f89d b028 	ldrb.w	fp, [sp, #40]	@ 0x28
 80019b0:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 80019b4:	f89d 9030 	ldrb.w	r9, [sp, #48]	@ 0x30
 80019b8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80019fc <moveAxesLinearCallback+0x60>
    if (f_defined && feedRate > 0) {
 80019bc:	b133      	cbz	r3, 80019cc <moveAxesLinearCallback+0x30>
 80019be:	2100      	movs	r1, #0
 80019c0:	4638      	mov	r0, r7
 80019c2:	f7ff fb9b 	bl	80010fc <__aeabi_fcmpgt>
 80019c6:	b108      	cbz	r0, 80019cc <moveAxesLinearCallback+0x30>
        currentFeedRate = feedRate;
 80019c8:	f8c8 7000 	str.w	r7, [r8]
    float target_x = x_defined ? x : NAN;
 80019cc:	f1bb 0f00 	cmp.w	fp, #0
 80019d0:	d100      	bne.n	80019d4 <moveAxesLinearCallback+0x38>
 80019d2:	4c0b      	ldr	r4, [pc, #44]	@ (8001a00 <moveAxesLinearCallback+0x64>)
    float target_y = y_defined ? y : NAN;
 80019d4:	f1ba 0f00 	cmp.w	sl, #0
 80019d8:	d100      	bne.n	80019dc <moveAxesLinearCallback+0x40>
 80019da:	4d09      	ldr	r5, [pc, #36]	@ (8001a00 <moveAxesLinearCallback+0x64>)
    float target_z = z_defined ? z : NAN;
 80019dc:	f1b9 0f00 	cmp.w	r9, #0
 80019e0:	d100      	bne.n	80019e4 <moveAxesLinearCallback+0x48>
 80019e2:	4e07      	ldr	r6, [pc, #28]	@ (8001a00 <moveAxesLinearCallback+0x64>)
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 80019e4:	2300      	movs	r3, #0
 80019e6:	4632      	mov	r2, r6
 80019e8:	4629      	mov	r1, r5
 80019ea:	4620      	mov	r0, r4
 80019ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80019ee:	f8d8 3000 	ldr.w	r3, [r8]
}
 80019f2:	b001      	add	sp, #4
 80019f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 80019f8:	f001 b9f2 	b.w	8002de0 <moveAxesWithFeedRate>
 80019fc:	20000008 	.word	0x20000008
 8001a00:	7fc00000 	.word	0x7fc00000

08001a04 <showConfiguration>:
void showConfiguration(void) {
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a08:	f240 35b6 	movw	r5, #950	@ 0x3b6
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a0c:	4c80      	ldr	r4, [pc, #512]	@ (8001c10 <showConfiguration+0x20c>)
void showConfiguration(void) {
 8001a0e:	b085      	sub	sp, #20
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8001a10:	4880      	ldr	r0, [pc, #512]	@ (8001c14 <showConfiguration+0x210>)
 8001a12:	f7ff ff61 	bl	80018d8 <sendUSBText>
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001a16:	224f      	movs	r2, #79	@ 0x4f
 8001a18:	497f      	ldr	r1, [pc, #508]	@ (8001c18 <showConfiguration+0x214>)
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f005 fd28 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff ff59 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a26:	462a      	mov	r2, r5
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f005 fd85 	bl	800753a <memset>
    sprintf(outputBuffer, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001a30:	224f      	movs	r2, #79	@ 0x4f
 8001a32:	497a      	ldr	r1, [pc, #488]	@ (8001c1c <showConfiguration+0x218>)
 8001a34:	4620      	mov	r0, r4
 8001a36:	f005 fd1b 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff ff4c 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a40:	462a      	mov	r2, r5
 8001a42:	2100      	movs	r1, #0
 8001a44:	4620      	mov	r0, r4
 8001a46:	f005 fd78 	bl	800753a <memset>
    sprintf(outputBuffer, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001a4a:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001a4e:	4974      	ldr	r1, [pc, #464]	@ (8001c20 <showConfiguration+0x21c>)
 8001a50:	4620      	mov	r0, r4
 8001a52:	f005 fd0d 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff ff3e 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a5c:	462a      	mov	r2, r5
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4620      	mov	r0, r4
 8001a62:	f005 fd6a 	bl	800753a <memset>
    sprintf(outputBuffer, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001a66:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001a6a:	496e      	ldr	r1, [pc, #440]	@ (8001c24 <showConfiguration+0x220>)
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f005 fcff 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff30 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001a78:	462a      	mov	r2, r5
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f005 fd5c 	bl	800753a <memset>
    int feed_int = (int)currentFeedRate;
 8001a82:	4b69      	ldr	r3, [pc, #420]	@ (8001c28 <showConfiguration+0x224>)
 8001a84:	681f      	ldr	r7, [r3, #0]
 8001a86:	4638      	mov	r0, r7
 8001a88:	f7ff fb58 	bl	800113c <__aeabi_f2iz>
 8001a8c:	4606      	mov	r6, r0
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001a8e:	f7ff f925 	bl	8000cdc <__aeabi_i2f>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4638      	mov	r0, r7
 8001a96:	f7ff f86b 	bl	8000b70 <__aeabi_fsub>
 8001a9a:	4964      	ldr	r1, [pc, #400]	@ (8001c2c <showConfiguration+0x228>)
 8001a9c:	f7ff f972 	bl	8000d84 <__aeabi_fmul>
 8001aa0:	f7ff fb4c 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001aa4:	4632      	mov	r2, r6
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001aa6:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001aa8:	4961      	ldr	r1, [pc, #388]	@ (8001c30 <showConfiguration+0x22c>)
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f005 fce0 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f7ff ff11 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ab6:	462a      	mov	r2, r5
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4620      	mov	r0, r4
 8001abc:	f005 fd3d 	bl	800753a <memset>
    int rapid_int = (int)rapidRate;
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c34 <showConfiguration+0x230>)
 8001ac2:	681f      	ldr	r7, [r3, #0]
 8001ac4:	4638      	mov	r0, r7
 8001ac6:	f7ff fb39 	bl	800113c <__aeabi_f2iz>
 8001aca:	4606      	mov	r6, r0
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001acc:	f7ff f906 	bl	8000cdc <__aeabi_i2f>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4638      	mov	r0, r7
 8001ad4:	f7ff f84c 	bl	8000b70 <__aeabi_fsub>
 8001ad8:	4954      	ldr	r1, [pc, #336]	@ (8001c2c <showConfiguration+0x228>)
 8001ada:	f7ff f953 	bl	8000d84 <__aeabi_fmul>
 8001ade:	f7ff fb2d 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001ae2:	4632      	mov	r2, r6
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001ae4:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001ae6:	4954      	ldr	r1, [pc, #336]	@ (8001c38 <showConfiguration+0x234>)
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f005 fcc1 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff fef2 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001af4:	462a      	mov	r2, r5
 8001af6:	2100      	movs	r1, #0
 8001af8:	4620      	mov	r0, r4
 8001afa:	f005 fd1e 	bl	800753a <memset>
    int max_int = (int)maxFeedRate;
 8001afe:	4b4f      	ldr	r3, [pc, #316]	@ (8001c3c <showConfiguration+0x238>)
 8001b00:	681f      	ldr	r7, [r3, #0]
 8001b02:	4638      	mov	r0, r7
 8001b04:	f7ff fb1a 	bl	800113c <__aeabi_f2iz>
 8001b08:	4606      	mov	r6, r0
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b0a:	f7ff f8e7 	bl	8000cdc <__aeabi_i2f>
 8001b0e:	4601      	mov	r1, r0
 8001b10:	4638      	mov	r0, r7
 8001b12:	f7ff f82d 	bl	8000b70 <__aeabi_fsub>
 8001b16:	4945      	ldr	r1, [pc, #276]	@ (8001c2c <showConfiguration+0x228>)
 8001b18:	f7ff f934 	bl	8000d84 <__aeabi_fmul>
 8001b1c:	f7ff fb0e 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b20:	4632      	mov	r2, r6
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001b22:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001b24:	4946      	ldr	r1, [pc, #280]	@ (8001c40 <showConfiguration+0x23c>)
 8001b26:	4620      	mov	r0, r4
 8001b28:	f005 fca2 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff fed3 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b32:	462a      	mov	r2, r5
 8001b34:	2100      	movs	r1, #0
 8001b36:	4620      	mov	r0, r4
 8001b38:	f005 fcff 	bl	800753a <memset>
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001b3c:	4b41      	ldr	r3, [pc, #260]	@ (8001c44 <showConfiguration+0x240>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f7ff f8cc 	bl	8000cdc <__aeabi_i2f>
 8001b44:	4940      	ldr	r1, [pc, #256]	@ (8001c48 <showConfiguration+0x244>)
 8001b46:	f7ff f9d1 	bl	8000eec <__aeabi_fdiv>
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <showConfiguration+0x248>)
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001b4c:	4683      	mov	fp, r0
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f7ff f8c4 	bl	8000cdc <__aeabi_i2f>
 8001b54:	493c      	ldr	r1, [pc, #240]	@ (8001c48 <showConfiguration+0x244>)
 8001b56:	f7ff f9c9 	bl	8000eec <__aeabi_fdiv>
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <showConfiguration+0x24c>)
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001b5c:	4680      	mov	r8, r0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f7ff f8bc 	bl	8000cdc <__aeabi_i2f>
 8001b64:	493b      	ldr	r1, [pc, #236]	@ (8001c54 <showConfiguration+0x250>)
 8001b66:	f7ff f9c1 	bl	8000eec <__aeabi_fdiv>
 8001b6a:	4682      	mov	sl, r0
    int x_int = (int)xPos;
 8001b6c:	4658      	mov	r0, fp
 8001b6e:	f7ff fae5 	bl	800113c <__aeabi_f2iz>
 8001b72:	4606      	mov	r6, r0
    int y_int = (int)yPos;
 8001b74:	4640      	mov	r0, r8
 8001b76:	f7ff fae1 	bl	800113c <__aeabi_f2iz>
 8001b7a:	4607      	mov	r7, r0
    int z_int = (int)zPos;
 8001b7c:	4650      	mov	r0, sl
 8001b7e:	f7ff fadd 	bl	800113c <__aeabi_f2iz>
 8001b82:	4681      	mov	r9, r0
    int x_dec = (int)((xPos - x_int) * 100);
 8001b84:	4630      	mov	r0, r6
 8001b86:	f7ff f8a9 	bl	8000cdc <__aeabi_i2f>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4658      	mov	r0, fp
 8001b8e:	f7fe ffef 	bl	8000b70 <__aeabi_fsub>
 8001b92:	4931      	ldr	r1, [pc, #196]	@ (8001c58 <showConfiguration+0x254>)
 8001b94:	f7ff f8f6 	bl	8000d84 <__aeabi_fmul>
 8001b98:	f7ff fad0 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001b9c:	ea80 7be0 	eor.w	fp, r0, r0, asr #31
 8001ba0:	ebab 7be0 	sub.w	fp, fp, r0, asr #31
    int z_dec = (int)((zPos - z_int) * 100);
 8001ba4:	4648      	mov	r0, r9
 8001ba6:	f7ff f899 	bl	8000cdc <__aeabi_i2f>
 8001baa:	4601      	mov	r1, r0
 8001bac:	4650      	mov	r0, sl
 8001bae:	f7fe ffdf 	bl	8000b70 <__aeabi_fsub>
 8001bb2:	4929      	ldr	r1, [pc, #164]	@ (8001c58 <showConfiguration+0x254>)
 8001bb4:	f7ff f8e6 	bl	8000d84 <__aeabi_fmul>
 8001bb8:	f7ff fac0 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	bfb8      	it	lt
 8001bc0:	4240      	neglt	r0, r0
 8001bc2:	e9cd 9002 	strd	r9, r0, [sp, #8]
    int y_dec = (int)((yPos - y_int) * 100);
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	f7ff f888 	bl	8000cdc <__aeabi_i2f>
 8001bcc:	4601      	mov	r1, r0
 8001bce:	4640      	mov	r0, r8
 8001bd0:	f7fe ffce 	bl	8000b70 <__aeabi_fsub>
 8001bd4:	4920      	ldr	r1, [pc, #128]	@ (8001c58 <showConfiguration+0x254>)
 8001bd6:	f7ff f8d5 	bl	8000d84 <__aeabi_fmul>
 8001bda:	f7ff faaf 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001bde:	2800      	cmp	r0, #0
 8001be0:	bfb8      	it	lt
 8001be2:	4240      	neglt	r0, r0
 8001be4:	465b      	mov	r3, fp
 8001be6:	4632      	mov	r2, r6
 8001be8:	e9cd 7000 	strd	r7, r0, [sp]
 8001bec:	491b      	ldr	r1, [pc, #108]	@ (8001c5c <showConfiguration+0x258>)
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f005 fc3e 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff fe6f 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001bfa:	462a      	mov	r2, r5
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f005 fc9b 	bl	800753a <memset>
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c04:	4816      	ldr	r0, [pc, #88]	@ (8001c60 <showConfiguration+0x25c>)
}
 8001c06:	b005      	add	sp, #20
 8001c08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001c0c:	f7ff be64 	b.w	80018d8 <sendUSBText>
 8001c10:	2000235c 	.word	0x2000235c
 8001c14:	0800b10e 	.word	0x0800b10e
 8001c18:	0800b12b 	.word	0x0800b12b
 8001c1c:	0800b140 	.word	0x0800b140
 8001c20:	0800b155 	.word	0x0800b155
 8001c24:	0800b16a 	.word	0x0800b16a
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	41200000 	.word	0x41200000
 8001c30:	0800b17e 	.word	0x0800b17e
 8001c34:	20000004 	.word	0x20000004
 8001c38:	0800b19f 	.word	0x0800b19f
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	0800b1c6 	.word	0x0800b1c6
 8001c44:	20002358 	.word	0x20002358
 8001c48:	429e0000 	.word	0x429e0000
 8001c4c:	20002354 	.word	0x20002354
 8001c50:	20002350 	.word	0x20002350
 8001c54:	4575a000 	.word	0x4575a000
 8001c58:	42c80000 	.word	0x42c80000
 8001c5c:	0800b1e8 	.word	0x0800b1e8
 8001c60:	0800b21a 	.word	0x0800b21a

08001c64 <isEndstopPressed>:
    switch(axis) {
 8001c64:	2859      	cmp	r0, #89	@ 0x59
bool isEndstopPressed(char axis) {
 8001c66:	b508      	push	{r3, lr}
    switch(axis) {
 8001c68:	d007      	beq.n	8001c7a <isEndstopPressed+0x16>
 8001c6a:	285a      	cmp	r0, #90	@ 0x5a
 8001c6c:	d00e      	beq.n	8001c8c <isEndstopPressed+0x28>
 8001c6e:	2858      	cmp	r0, #88	@ 0x58
 8001c70:	d10f      	bne.n	8001c92 <isEndstopPressed+0x2e>
}
 8001c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c76:	f7ff be23 	b.w	80018c0 <isEndstopPressed.part.0>
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001c7e:	4806      	ldr	r0, [pc, #24]	@ (8001c98 <isEndstopPressed+0x34>)
 8001c80:	f001 fdf2 	bl	8003868 <HAL_GPIO_ReadPin>
 8001c84:	fab0 f080 	clz	r0, r0
 8001c88:	0940      	lsrs	r0, r0, #5
}
 8001c8a:	bd08      	pop	{r3, pc}
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001c8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c90:	e7f5      	b.n	8001c7e <isEndstopPressed+0x1a>
    switch(axis) {
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7f9      	b.n	8001c8a <isEndstopPressed+0x26>
 8001c96:	bf00      	nop
 8001c98:	40010c00 	.word	0x40010c00

08001c9c <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8001c9c:	b510      	push	{r4, lr}
    // char msg[80];
    // HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
    
    // Enviar mensaje de inicio de homing
    sendUSBText("Iniciando secuencia de homingg...\r\n");
 8001c9e:	4897      	ldr	r0, [pc, #604]	@ (8001efc <performHoming+0x260>)
 8001ca0:	f7ff fe1a 	bl	80018d8 <sendUSBText>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(outputBuffer, "Fase 1: Buscando finales de carrera...\r\n");
 8001ca4:	4996      	ldr	r1, [pc, #600]	@ (8001f00 <performHoming+0x264>)
 8001ca6:	4897      	ldr	r0, [pc, #604]	@ (8001f04 <performHoming+0x268>)
 8001ca8:	f005 fce7 	bl	800767a <strcpy>
    // sendUSBText((uint8_t*)msg);
    sendUSBText(outputBuffer);
 8001cac:	4895      	ldr	r0, [pc, #596]	@ (8001f04 <performHoming+0x268>)
 8001cae:	f7ff fe13 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001cb2:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4892      	ldr	r0, [pc, #584]	@ (8001f04 <performHoming+0x268>)
 8001cba:	f005 fc3e 	bl	800753a <memset>

    // Homing del eje X
    sprintf(outputBuffer, "Homing eje X...\r\n");
 8001cbe:	4992      	ldr	r1, [pc, #584]	@ (8001f08 <performHoming+0x26c>)
 8001cc0:	4890      	ldr	r0, [pc, #576]	@ (8001f04 <performHoming+0x268>)
 8001cc2:	f005 fcda 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
 8001cc6:	488f      	ldr	r0, [pc, #572]	@ (8001f04 <performHoming+0x268>)
 8001cc8:	f7ff fe06 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ccc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	488c      	ldr	r0, [pc, #560]	@ (8001f04 <performHoming+0x268>)
 8001cd4:	f005 fc31 	bl	800753a <memset>
    CDC_TxQueue_Process();
 8001cd8:	f004 fafa 	bl	80062d0 <CDC_TxQueue_Process>

    // Mover hacia el final de carrera X (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2180      	movs	r1, #128	@ 0x80
 8001ce0:	488a      	ldr	r0, [pc, #552]	@ (8001f0c <performHoming+0x270>)
 8001ce2:	f001 fdc7 	bl	8003874 <HAL_GPIO_WritePin>
    switch(axis) {
 8001ce6:	f7ff fdeb 	bl	80018c0 <isEndstopPressed.part.0>
    while (!isEndstopPressed('X')) {
 8001cea:	b378      	cbz	r0, 8001d4c <performHoming+0xb0>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001cec:	2201      	movs	r2, #1
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	4886      	ldr	r0, [pc, #536]	@ (8001f0c <performHoming+0x270>)
 8001cf2:	f001 fdbf 	bl	8003874 <HAL_GPIO_WritePin>
 8001cf6:	249e      	movs	r4, #158	@ 0x9e
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 8001cf8:	f000 fffe 	bl	8002cf8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001cfc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d00:	f000 ffb6 	bl	8002c70 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001d04:	3c01      	subs	r4, #1
 8001d06:	d1f7      	bne.n	8001cf8 <performHoming+0x5c>
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001d08:	4622      	mov	r2, r4
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	487f      	ldr	r0, [pc, #508]	@ (8001f0c <performHoming+0x270>)
 8001d0e:	f001 fdb1 	bl	8003874 <HAL_GPIO_WritePin>
 8001d12:	249e      	movs	r4, #158	@ 0x9e
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 8001d14:	f000 fff0 	bl	8002cf8 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3);
 8001d18:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001d1c:	f000 ffa8 	bl	8002c70 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001d20:	3c01      	subs	r4, #1
 8001d22:	d1f7      	bne.n	8001d14 <performHoming+0x78>
    switch(axis) {
 8001d24:	f7ff fdcc 	bl	80018c0 <isEndstopPressed.part.0>
    }
    if (!isEndstopPressed('X')) {
 8001d28:	b9b8      	cbnz	r0, 8001d5a <performHoming+0xbe>
        sprintf(outputBuffer, "Error: Final de carrera X no presionado\r\n");
 8001d2a:	4979      	ldr	r1, [pc, #484]	@ (8001f10 <performHoming+0x274>)
        //if (!isEndstopPressed('Y'));
        Y_stepOnce();
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
    }
    if (!isEndstopPressed('Y')) {
        sprintf(outputBuffer, "Error: Final de carrera Y no presionado\r\n");
 8001d2c:	4875      	ldr	r0, [pc, #468]	@ (8001f04 <performHoming+0x268>)
 8001d2e:	f005 fca4 	bl	800767a <strcpy>
        sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d32:	4874      	ldr	r0, [pc, #464]	@ (8001f04 <performHoming+0x268>)
 8001d34:	f7ff fdd0 	bl	80018d8 <sendUSBText>
 8001d38:	f004 faca 	bl	80062d0 <CDC_TxQueue_Process>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d3c:	4621      	mov	r1, r4

    CDC_TxQueue_Process();

    // Rehabilitar interrupciones
    // HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8001d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d42:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d46:	486f      	ldr	r0, [pc, #444]	@ (8001f04 <performHoming+0x268>)
 8001d48:	f005 bbf7 	b.w	800753a <memset>
        X_stepOnce();
 8001d4c:	f000 ffd4 	bl	8002cf8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d50:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001d54:	f000 ff8c 	bl	8002c70 <delay_us>
 8001d58:	e7c5      	b.n	8001ce6 <performHoming+0x4a>
    currentX = 0; // Establecer posición home
 8001d5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f14 <performHoming+0x278>)
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001d5c:	496e      	ldr	r1, [pc, #440]	@ (8001f18 <performHoming+0x27c>)
 8001d5e:	4869      	ldr	r0, [pc, #420]	@ (8001f04 <performHoming+0x268>)
    currentX = 0; // Establecer posición home
 8001d60:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001d62:	f005 fc8a 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d66:	4867      	ldr	r0, [pc, #412]	@ (8001f04 <performHoming+0x268>)
 8001d68:	f7ff fdb6 	bl	80018d8 <sendUSBText>
 8001d6c:	f004 fab0 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d70:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d74:	4621      	mov	r1, r4
 8001d76:	4863      	ldr	r0, [pc, #396]	@ (8001f04 <performHoming+0x268>)
 8001d78:	f005 fbdf 	bl	800753a <memset>
    CDC_TxQueue_Process();
 8001d7c:	f004 faa8 	bl	80062d0 <CDC_TxQueue_Process>
    sprintf(outputBuffer, "Homing eje Y...\r\n");
 8001d80:	4966      	ldr	r1, [pc, #408]	@ (8001f1c <performHoming+0x280>)
 8001d82:	4860      	ldr	r0, [pc, #384]	@ (8001f04 <performHoming+0x268>)
 8001d84:	f005 fc79 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001d88:	485e      	ldr	r0, [pc, #376]	@ (8001f04 <performHoming+0x268>)
 8001d8a:	f7ff fda5 	bl	80018d8 <sendUSBText>
 8001d8e:	f004 fa9f 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d92:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001d96:	4621      	mov	r1, r4
 8001d98:	485a      	ldr	r0, [pc, #360]	@ (8001f04 <performHoming+0x268>)
 8001d9a:	f005 fbce 	bl	800753a <memset>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001d9e:	4622      	mov	r2, r4
 8001da0:	2108      	movs	r1, #8
 8001da2:	485a      	ldr	r0, [pc, #360]	@ (8001f0c <performHoming+0x270>)
 8001da4:	f001 fd66 	bl	8003874 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001da8:	2059      	movs	r0, #89	@ 0x59
 8001daa:	f7ff ff5b 	bl	8001c64 <isEndstopPressed>
 8001dae:	b308      	cbz	r0, 8001df4 <performHoming+0x158>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001db0:	2201      	movs	r2, #1
 8001db2:	2108      	movs	r1, #8
 8001db4:	4855      	ldr	r0, [pc, #340]	@ (8001f0c <performHoming+0x270>)
 8001db6:	f001 fd5d 	bl	8003874 <HAL_GPIO_WritePin>
 8001dba:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001dbc:	f000 ffb0 	bl	8002d20 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001dc0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001dc4:	f000 ff54 	bl	8002c70 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001dc8:	3c01      	subs	r4, #1
 8001dca:	d1f7      	bne.n	8001dbc <performHoming+0x120>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001dcc:	4622      	mov	r2, r4
 8001dce:	2108      	movs	r1, #8
 8001dd0:	484e      	ldr	r0, [pc, #312]	@ (8001f0c <performHoming+0x270>)
 8001dd2:	f001 fd4f 	bl	8003874 <HAL_GPIO_WritePin>
 8001dd6:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001dd8:	f000 ffa2 	bl	8002d20 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001ddc:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001de0:	f000 ff46 	bl	8002c70 <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001de4:	3c01      	subs	r4, #1
 8001de6:	d1f7      	bne.n	8001dd8 <performHoming+0x13c>
    if (!isEndstopPressed('Y')) {
 8001de8:	2059      	movs	r0, #89	@ 0x59
 8001dea:	f7ff ff3b 	bl	8001c64 <isEndstopPressed>
 8001dee:	b940      	cbnz	r0, 8001e02 <performHoming+0x166>
        sprintf(outputBuffer, "Error: Final de carrera Y no presionado\r\n");
 8001df0:	494b      	ldr	r1, [pc, #300]	@ (8001f20 <performHoming+0x284>)
 8001df2:	e79b      	b.n	8001d2c <performHoming+0x90>
        Y_stepOnce();
 8001df4:	f000 ff94 	bl	8002d20 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001df8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001dfc:	f000 ff38 	bl	8002c70 <delay_us>
 8001e00:	e7d2      	b.n	8001da8 <performHoming+0x10c>
    currentY = 0; // Establecer posición home
 8001e02:	4b48      	ldr	r3, [pc, #288]	@ (8001f24 <performHoming+0x288>)
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e04:	4948      	ldr	r1, [pc, #288]	@ (8001f28 <performHoming+0x28c>)
 8001e06:	483f      	ldr	r0, [pc, #252]	@ (8001f04 <performHoming+0x268>)
    currentY = 0; // Establecer posición home
 8001e08:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001e0a:	f005 fc36 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e0e:	483d      	ldr	r0, [pc, #244]	@ (8001f04 <performHoming+0x268>)
 8001e10:	f7ff fd62 	bl	80018d8 <sendUSBText>
 8001e14:	f004 fa5c 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	4839      	ldr	r0, [pc, #228]	@ (8001f04 <performHoming+0x268>)
 8001e20:	f005 fb8b 	bl	800753a <memset>
    CDC_TxQueue_Process();
 8001e24:	f004 fa54 	bl	80062d0 <CDC_TxQueue_Process>
    sprintf(outputBuffer, "Homing eje Z...\r\n");
 8001e28:	4940      	ldr	r1, [pc, #256]	@ (8001f2c <performHoming+0x290>)
 8001e2a:	4836      	ldr	r0, [pc, #216]	@ (8001f04 <performHoming+0x268>)
 8001e2c:	f005 fc25 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e30:	4834      	ldr	r0, [pc, #208]	@ (8001f04 <performHoming+0x268>)
 8001e32:	f7ff fd51 	bl	80018d8 <sendUSBText>
 8001e36:	f004 fa4b 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e3a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001e3e:	4621      	mov	r1, r4
 8001e40:	4830      	ldr	r0, [pc, #192]	@ (8001f04 <performHoming+0x268>)
 8001e42:	f005 fb7a 	bl	800753a <memset>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e4c:	4838      	ldr	r0, [pc, #224]	@ (8001f30 <performHoming+0x294>)
 8001e4e:	f001 fd11 	bl	8003874 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001e52:	205a      	movs	r0, #90	@ 0x5a
 8001e54:	f7ff ff06 	bl	8001c64 <isEndstopPressed>
 8001e58:	b328      	cbz	r0, 8001ea6 <performHoming+0x20a>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e60:	4833      	ldr	r0, [pc, #204]	@ (8001f30 <performHoming+0x294>)
 8001e62:	f001 fd07 	bl	8003874 <HAL_GPIO_WritePin>
 8001e66:	f640 745a 	movw	r4, #3930	@ 0xf5a
        Z_stepOnce();
 8001e6a:	f000 ff6f 	bl	8002d4c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001e6e:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001e72:	f000 fefd 	bl	8002c70 <delay_us>
    for (int i = 0; i < 1*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001e76:	3c01      	subs	r4, #1
 8001e78:	d1f7      	bne.n	8001e6a <performHoming+0x1ce>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e80:	482b      	ldr	r0, [pc, #172]	@ (8001f30 <performHoming+0x294>)
 8001e82:	f001 fcf7 	bl	8003874 <HAL_GPIO_WritePin>
 8001e86:	f640 745a 	movw	r4, #3930	@ 0xf5a
        Z_stepOnce();
 8001e8a:	f000 ff5f 	bl	8002d4c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3); // Movimiento lento para precisión
 8001e8e:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001e92:	f000 feed 	bl	8002c70 <delay_us>
    for (int i = 0; i < 1*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001e96:	3c01      	subs	r4, #1
 8001e98:	d1f7      	bne.n	8001e8a <performHoming+0x1ee>
    if (!isEndstopPressed('Z')) {
 8001e9a:	205a      	movs	r0, #90	@ 0x5a
 8001e9c:	f7ff fee2 	bl	8001c64 <isEndstopPressed>
 8001ea0:	b940      	cbnz	r0, 8001eb4 <performHoming+0x218>
        sprintf(outputBuffer, "Error: Final de carrera Z no presionado\r\n");
 8001ea2:	4924      	ldr	r1, [pc, #144]	@ (8001f34 <performHoming+0x298>)
 8001ea4:	e742      	b.n	8001d2c <performHoming+0x90>
        Z_stepOnce();
 8001ea6:	f000 ff51 	bl	8002d4c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001eaa:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001eae:	f000 fedf 	bl	8002c70 <delay_us>
 8001eb2:	e7ce      	b.n	8001e52 <performHoming+0x1b6>
    currentZ = 0; // Establecer posición home
 8001eb4:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <performHoming+0x29c>)
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001eb6:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <performHoming+0x2a0>)
 8001eb8:	4812      	ldr	r0, [pc, #72]	@ (8001f04 <performHoming+0x268>)
    currentZ = 0; // Establecer posición home
 8001eba:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001ebc:	f005 fbdd 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001ec0:	4810      	ldr	r0, [pc, #64]	@ (8001f04 <performHoming+0x268>)
 8001ec2:	f7ff fd09 	bl	80018d8 <sendUSBText>
 8001ec6:	f004 fa03 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001eca:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001ece:	4621      	mov	r1, r4
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <performHoming+0x268>)
 8001ed2:	f005 fb32 	bl	800753a <memset>
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8001ed6:	491a      	ldr	r1, [pc, #104]	@ (8001f40 <performHoming+0x2a4>)
 8001ed8:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <performHoming+0x268>)
 8001eda:	f005 fbce 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <performHoming+0x268>)
 8001ee0:	f7ff fcfa 	bl	80018d8 <sendUSBText>
 8001ee4:	f004 f9f4 	bl	80062d0 <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ee8:	4621      	mov	r1, r4
 8001eea:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <performHoming+0x268>)
 8001ef0:	f005 fb23 	bl	800753a <memset>
}
 8001ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_TxQueue_Process();
 8001ef8:	f004 b9ea 	b.w	80062d0 <CDC_TxQueue_Process>
 8001efc:	0800b237 	.word	0x0800b237
 8001f00:	0800b25b 	.word	0x0800b25b
 8001f04:	2000235c 	.word	0x2000235c
 8001f08:	0800b284 	.word	0x0800b284
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	0800b296 	.word	0x0800b296
 8001f14:	20002358 	.word	0x20002358
 8001f18:	0800b2c0 	.word	0x0800b2c0
 8001f1c:	0800b2da 	.word	0x0800b2da
 8001f20:	0800b2ec 	.word	0x0800b2ec
 8001f24:	20002354 	.word	0x20002354
 8001f28:	0800b316 	.word	0x0800b316
 8001f2c:	0800b330 	.word	0x0800b330
 8001f30:	40010800 	.word	0x40010800
 8001f34:	0800b342 	.word	0x0800b342
 8001f38:	20002350 	.word	0x20002350
 8001f3c:	0800b36c 	.word	0x0800b36c
 8001f40:	0800b386 	.word	0x0800b386

08001f44 <startProgramStorage>:
/**
  * @brief  Inicia el modo de almacenamiento de programa
  * @retval None
  */
void startProgramStorage(void) {
    isStoringProgram = true;
 8001f44:	2201      	movs	r2, #1
void startProgramStorage(void) {
 8001f46:	b510      	push	{r4, lr}
    programLineCount = 0;
 8001f48:	2400      	movs	r4, #0
    isStoringProgram = true;
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <startProgramStorage+0x3c>)
 8001f4c:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f84 <startProgramStorage+0x40>)
 8001f50:	601c      	str	r4, [r3, #0]
    isProgramLoaded = false;
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <startProgramStorage+0x44>)
 8001f54:	701c      	strb	r4, [r3, #0]
    
    // Limpiar buffer de programa
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <startProgramStorage+0x48>)
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8001f58:	4618      	mov	r0, r3
 8001f5a:	2250      	movs	r2, #80	@ 0x50
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f005 faec 	bl	800753a <memset>
 8001f62:	4603      	mov	r3, r0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8001f64:	3401      	adds	r4, #1
 8001f66:	2c64      	cmp	r4, #100	@ 0x64
 8001f68:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001f6c:	d1f4      	bne.n	8001f58 <startProgramStorage+0x14>
    }
    
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 8001f6e:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <startProgramStorage+0x4c>)
 8001f70:	f7ff fcb2 	bl	80018d8 <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
    //sendUSBText("ok\r\n");
}
 8001f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 8001f78:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <startProgramStorage+0x50>)
 8001f7a:	f7ff bcad 	b.w	80018d8 <sendUSBText>
 8001f7e:	bf00      	nop
 8001f80:	2000039a 	.word	0x2000039a
 8001f84:	200003a0 	.word	0x200003a0
 8001f88:	20000399 	.word	0x20000399
 8001f8c:	200003a4 	.word	0x200003a4
 8001f90:	0800b3bd 	.word	0x0800b3bd
 8001f94:	0800b3f4 	.word	0x0800b3f4

08001f98 <stopProgramStorage>:

/**
  * @brief  Detiene el modo de almacenamiento de programa
  * @retval None
  */
void stopProgramStorage(void) {
 8001f98:	b510      	push	{r4, lr}
    isStoringProgram = false;
 8001f9a:	2400      	movs	r4, #0
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <stopProgramStorage+0x44>)
 8001f9e:	701c      	strb	r4, [r3, #0]
    
    if (programLineCount > 0) {
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <stopProgramStorage+0x48>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	42a2      	cmp	r2, r4
 8001fa6:	dd17      	ble.n	8001fd8 <stopProgramStorage+0x40>
        isProgramLoaded = true;
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <stopProgramStorage+0x4c>)
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8001fac:	480e      	ldr	r0, [pc, #56]	@ (8001fe8 <stopProgramStorage+0x50>)
        isProgramLoaded = true;
 8001fae:	7019      	strb	r1, [r3, #0]
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8001fb0:	490e      	ldr	r1, [pc, #56]	@ (8001fec <stopProgramStorage+0x54>)
 8001fb2:	f005 fa5d 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
 8001fb6:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <stopProgramStorage+0x50>)
 8001fb8:	f7ff fc8e 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001fbc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <stopProgramStorage+0x50>)
 8001fc4:	f005 fab9 	bl	800753a <memset>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 8001fc8:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <stopProgramStorage+0x58>)
    } else {
        sendUSBText("No se almacenaron lineas\r\n");
 8001fca:	f7ff fc85 	bl	80018d8 <sendUSBText>
    }
    
    sendUSBText("ok\r\n");
}
 8001fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("ok\r\n");
 8001fd2:	4808      	ldr	r0, [pc, #32]	@ (8001ff4 <stopProgramStorage+0x5c>)
 8001fd4:	f7ff bc80 	b.w	80018d8 <sendUSBText>
        sendUSBText("No se almacenaron lineas\r\n");
 8001fd8:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <stopProgramStorage+0x60>)
 8001fda:	e7f6      	b.n	8001fca <stopProgramStorage+0x32>
 8001fdc:	2000039a 	.word	0x2000039a
 8001fe0:	200003a0 	.word	0x200003a0
 8001fe4:	20000399 	.word	0x20000399
 8001fe8:	2000235c 	.word	0x2000235c
 8001fec:	0800b419 	.word	0x0800b419
 8001ff0:	0800b443 	.word	0x0800b443
 8001ff4:	0800af3d 	.word	0x0800af3d
 8001ff8:	0800b488 	.word	0x0800b488

08001ffc <addLineToProgram>:
/**
  * @brief  Agrega una línea al programa almacenado
  * @param  line: Línea de G-code a agregar
  * @retval true si se agregó exitosamente, false si hay error
  */
bool addLineToProgram(const char* line) {
 8001ffc:	b530      	push	{r4, r5, lr}
    if (programLineCount >= MAX_GCODE_LINES) {
 8001ffe:	4c41      	ldr	r4, [pc, #260]	@ (8002104 <addLineToProgram+0x108>)
bool addLineToProgram(const char* line) {
 8002000:	b0bd      	sub	sp, #244	@ 0xf4
    if (programLineCount >= MAX_GCODE_LINES) {
 8002002:	6823      	ldr	r3, [r4, #0]
 8002004:	2b63      	cmp	r3, #99	@ 0x63
 8002006:	dd03      	ble.n	8002010 <addLineToProgram+0x14>
        sendUSBText("error: buffer de programa lleno\r\n");
 8002008:	483f      	ldr	r0, [pc, #252]	@ (8002108 <addLineToProgram+0x10c>)
        if (limit_status != STATUS_OK) {
            char error_msg[150];
            sprintf(error_msg, "error: línea %d viola límites - ", programLineCount + 1);
            sendUSBText(error_msg);
            report_status_message(limit_status);
            sendUSBText("Carga de programa cancelada\r\n");
 800200a:	f7ff fc65 	bl	80018d8 <sendUSBText>
            return false;
 800200e:	e046      	b.n	800209e <addLineToProgram+0xa2>
 8002010:	4601      	mov	r1, r0
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 8002012:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002016:	2b20      	cmp	r3, #32
 8002018:	d0fa      	beq.n	8002010 <addLineToProgram+0x14>
 800201a:	2b09      	cmp	r3, #9
 800201c:	d0f8      	beq.n	8002010 <addLineToProgram+0x14>
    if (strlen(start) == 0) {
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06d      	beq.n	80020fe <addLineToProgram+0x102>
    line_copy[MAX_LINE_LENGTH - 1] = '\0';
 8002022:	2500      	movs	r5, #0
    strncpy(line_copy, start, MAX_LINE_LENGTH - 1);
 8002024:	224f      	movs	r2, #79	@ 0x4f
 8002026:	a802      	add	r0, sp, #8
 8002028:	f005 faa1 	bl	800756e <strncpy>
    int len = strlen(line_copy);
 800202c:	a802      	add	r0, sp, #8
    line_copy[MAX_LINE_LENGTH - 1] = '\0';
 800202e:	f88d 5057 	strb.w	r5, [sp, #87]	@ 0x57
    int len = strlen(line_copy);
 8002032:	f7fe f88d 	bl	8000150 <strlen>
    while (len > 0 && (line_copy[len-1] == '\r' || line_copy[len-1] == '\n')) {
 8002036:	ab02      	add	r3, sp, #8
 8002038:	4403      	add	r3, r0
 800203a:	b130      	cbz	r0, 800204a <addLineToProgram+0x4e>
 800203c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8002040:	3801      	subs	r0, #1
 8002042:	2a0d      	cmp	r2, #13
 8002044:	d02e      	beq.n	80020a4 <addLineToProgram+0xa8>
 8002046:	2a0a      	cmp	r2, #10
 8002048:	d02c      	beq.n	80020a4 <addLineToProgram+0xa8>
    if (strncmp(line_copy, "G0", 2) == 0 || strncmp(line_copy, "G1", 2) == 0 || 
 800204a:	2202      	movs	r2, #2
 800204c:	492f      	ldr	r1, [pc, #188]	@ (800210c <addLineToProgram+0x110>)
 800204e:	a802      	add	r0, sp, #8
 8002050:	f005 fa7b 	bl	800754a <strncmp>
 8002054:	b190      	cbz	r0, 800207c <addLineToProgram+0x80>
 8002056:	2202      	movs	r2, #2
 8002058:	492d      	ldr	r1, [pc, #180]	@ (8002110 <addLineToProgram+0x114>)
 800205a:	a802      	add	r0, sp, #8
 800205c:	f005 fa75 	bl	800754a <strncmp>
 8002060:	b160      	cbz	r0, 800207c <addLineToProgram+0x80>
        strncmp(line_copy, "G2", 2) == 0 || strncmp(line_copy, "G3", 2) == 0) {
 8002062:	2202      	movs	r2, #2
 8002064:	492b      	ldr	r1, [pc, #172]	@ (8002114 <addLineToProgram+0x118>)
 8002066:	a802      	add	r0, sp, #8
 8002068:	f005 fa6f 	bl	800754a <strncmp>
    if (strncmp(line_copy, "G0", 2) == 0 || strncmp(line_copy, "G1", 2) == 0 || 
 800206c:	b130      	cbz	r0, 800207c <addLineToProgram+0x80>
        strncmp(line_copy, "G2", 2) == 0 || strncmp(line_copy, "G3", 2) == 0) {
 800206e:	2202      	movs	r2, #2
 8002070:	4929      	ldr	r1, [pc, #164]	@ (8002118 <addLineToProgram+0x11c>)
 8002072:	a802      	add	r0, sp, #8
 8002074:	f005 fa69 	bl	800754a <strncmp>
 8002078:	2800      	cmp	r0, #0
 800207a:	d131      	bne.n	80020e0 <addLineToProgram+0xe4>
        uint8_t parse_status = gc_parse_line(line_copy);
 800207c:	a802      	add	r0, sp, #8
 800207e:	f7ff f9d5 	bl	800142c <gc_parse_line>
        if (parse_status != STATUS_OK) {
 8002082:	4605      	mov	r5, r0
 8002084:	b188      	cbz	r0, 80020aa <addLineToProgram+0xae>
            sprintf(error_msg, "error: línea %d - ", programLineCount + 1);
 8002086:	6822      	ldr	r2, [r4, #0]
 8002088:	4924      	ldr	r1, [pc, #144]	@ (800211c <addLineToProgram+0x120>)
 800208a:	3201      	adds	r2, #1
 800208c:	a816      	add	r0, sp, #88	@ 0x58
 800208e:	f005 f9ef 	bl	8007470 <siprintf>
            sendUSBText(error_msg);
 8002092:	a816      	add	r0, sp, #88	@ 0x58
 8002094:	f7ff fc20 	bl	80018d8 <sendUSBText>
            report_status_message(parse_status);
 8002098:	4628      	mov	r0, r5
 800209a:	f7ff fb9b 	bl	80017d4 <report_status_message>
        return false; // Buffer lleno
 800209e:	2000      	movs	r0, #0
    strncpy(gcodeProgram[programLineCount], line_copy, MAX_LINE_LENGTH - 1);
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
    
    programLineCount++;
    return true;
}
 80020a0:	b03d      	add	sp, #244	@ 0xf4
 80020a2:	bd30      	pop	{r4, r5, pc}
        line_copy[len-1] = '\0';
 80020a4:	f803 5d01 	strb.w	r5, [r3, #-1]!
        len--;
 80020a8:	e7c7      	b.n	800203a <addLineToProgram+0x3e>
        uint8_t limit_status = check_soft_limits(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 80020aa:	481d      	ldr	r0, [pc, #116]	@ (8002120 <addLineToProgram+0x124>)
 80020ac:	7fc3      	ldrb	r3, [r0, #31]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	7f83      	ldrb	r3, [r0, #30]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	7f43      	ldrb	r3, [r0, #29]
 80020b6:	68c2      	ldr	r2, [r0, #12]
 80020b8:	6881      	ldr	r1, [r0, #8]
 80020ba:	6840      	ldr	r0, [r0, #4]
 80020bc:	f7ff f8ba 	bl	8001234 <check_soft_limits>
        if (limit_status != STATUS_OK) {
 80020c0:	4605      	mov	r5, r0
 80020c2:	b168      	cbz	r0, 80020e0 <addLineToProgram+0xe4>
            sprintf(error_msg, "error: línea %d viola límites - ", programLineCount + 1);
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	4917      	ldr	r1, [pc, #92]	@ (8002124 <addLineToProgram+0x128>)
 80020c8:	3201      	adds	r2, #1
 80020ca:	a816      	add	r0, sp, #88	@ 0x58
 80020cc:	f005 f9d0 	bl	8007470 <siprintf>
            sendUSBText(error_msg);
 80020d0:	a816      	add	r0, sp, #88	@ 0x58
 80020d2:	f7ff fc01 	bl	80018d8 <sendUSBText>
            report_status_message(limit_status);
 80020d6:	4628      	mov	r0, r5
 80020d8:	f7ff fb7c 	bl	80017d4 <report_status_message>
            sendUSBText("Carga de programa cancelada\r\n");
 80020dc:	4812      	ldr	r0, [pc, #72]	@ (8002128 <addLineToProgram+0x12c>)
 80020de:	e794      	b.n	800200a <addLineToProgram+0xe>
    strncpy(gcodeProgram[programLineCount], line_copy, MAX_LINE_LENGTH - 1);
 80020e0:	2250      	movs	r2, #80	@ 0x50
 80020e2:	6825      	ldr	r5, [r4, #0]
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <addLineToProgram+0x130>)
 80020e6:	a902      	add	r1, sp, #8
 80020e8:	fb02 3305 	mla	r3, r2, r5, r3
 80020ec:	224f      	movs	r2, #79	@ 0x4f
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fa3d 	bl	800756e <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 80020f4:	2200      	movs	r2, #0
    programLineCount++;
 80020f6:	3501      	adds	r5, #1
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 80020f8:	f880 204f 	strb.w	r2, [r0, #79]	@ 0x4f
    programLineCount++;
 80020fc:	6025      	str	r5, [r4, #0]
        return true; // Línea vacía, no la almacenamos pero no es error
 80020fe:	2001      	movs	r0, #1
 8002100:	e7ce      	b.n	80020a0 <addLineToProgram+0xa4>
 8002102:	bf00      	nop
 8002104:	200003a0 	.word	0x200003a0
 8002108:	0800b4a3 	.word	0x0800b4a3
 800210c:	0800b4c5 	.word	0x0800b4c5
 8002110:	0800b4c8 	.word	0x0800b4c8
 8002114:	0800b4cb 	.word	0x0800b4cb
 8002118:	0800b4ce 	.word	0x0800b4ce
 800211c:	0800b4d1 	.word	0x0800b4d1
 8002120:	20000370 	.word	0x20000370
 8002124:	0800b4e5 	.word	0x0800b4e5
 8002128:	0800b508 	.word	0x0800b508
 800212c:	200003a4 	.word	0x200003a4

08002130 <clearProgram>:

/**
  * @brief  Limpia el programa almacenado
  * @retval None
  */
void clearProgram(void) {
 8002130:	b538      	push	{r3, r4, r5, lr}
    programLineCount = 0;
 8002132:	2400      	movs	r4, #0
 8002134:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <clearProgram+0x38>)
 8002136:	4d0d      	ldr	r5, [pc, #52]	@ (800216c <clearProgram+0x3c>)
 8002138:	6014      	str	r4, [r2, #0]
    currentExecutingLine = 0;
 800213a:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <clearProgram+0x40>)
 800213c:	6014      	str	r4, [r2, #0]
    isProgramLoaded = false;
 800213e:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <clearProgram+0x44>)
 8002140:	7014      	strb	r4, [r2, #0]
    isProgramRunning = false;
 8002142:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <clearProgram+0x48>)
 8002144:	7014      	strb	r4, [r2, #0]
    isStoringProgram = false;
 8002146:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <clearProgram+0x4c>)
 8002148:	7014      	strb	r4, [r2, #0]
    
    // Limpiar buffer
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 800214a:	4628      	mov	r0, r5
 800214c:	2250      	movs	r2, #80	@ 0x50
 800214e:	2100      	movs	r1, #0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002150:	3401      	adds	r4, #1
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8002152:	f005 f9f2 	bl	800753a <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002156:	2c64      	cmp	r4, #100	@ 0x64
 8002158:	f105 0550 	add.w	r5, r5, #80	@ 0x50
 800215c:	d1f5      	bne.n	800214a <clearProgram+0x1a>
    }
    
    sendUSBText("Programa limpiado\r\n");
 800215e:	4808      	ldr	r0, [pc, #32]	@ (8002180 <clearProgram+0x50>)
    //sendUSBText("ok\r\n");
}
 8002160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendUSBText("Programa limpiado\r\n");
 8002164:	f7ff bbb8 	b.w	80018d8 <sendUSBText>
 8002168:	200003a0 	.word	0x200003a0
 800216c:	200003a4 	.word	0x200003a4
 8002170:	2000039c 	.word	0x2000039c
 8002174:	20000399 	.word	0x20000399
 8002178:	20000398 	.word	0x20000398
 800217c:	2000039a 	.word	0x2000039a
 8002180:	0800b526 	.word	0x0800b526

08002184 <runProgram>:
  * @brief  Ejecuta el programa completo almacenado usando el planner
  * @retval None
  */
void runProgram(void) {

    if (!isProgramLoaded || programLineCount == 0) {
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <runProgram+0x5c>)
void runProgram(void) {
 8002186:	b510      	push	{r4, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b113      	cbz	r3, 8002192 <runProgram+0xe>
 800218c:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <runProgram+0x60>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	b972      	cbnz	r2, 80021b0 <runProgram+0x2c>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8002192:	4915      	ldr	r1, [pc, #84]	@ (80021e8 <runProgram+0x64>)
 8002194:	4815      	ldr	r0, [pc, #84]	@ (80021ec <runProgram+0x68>)
 8002196:	f005 fa70 	bl	800767a <strcpy>
        sendUSBText(outputBuffer);
 800219a:	4814      	ldr	r0, [pc, #80]	@ (80021ec <runProgram+0x68>)
 800219c:	f7ff fb9c 	bl	80018d8 <sendUSBText>
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
}
 80021a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80021a4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80021a8:	2100      	movs	r1, #0
 80021aa:	4810      	ldr	r0, [pc, #64]	@ (80021ec <runProgram+0x68>)
 80021ac:	f005 b9c5 	b.w	800753a <memset>
    isProgramRunning = true;
 80021b0:	2101      	movs	r1, #1
    currentExecutingLine = 0;
 80021b2:	2400      	movs	r4, #0
    isProgramRunning = true;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <runProgram+0x6c>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021b6:	480d      	ldr	r0, [pc, #52]	@ (80021ec <runProgram+0x68>)
    isProgramRunning = true;
 80021b8:	7019      	strb	r1, [r3, #0]
    currentExecutingLine = 0;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <runProgram+0x70>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021bc:	490e      	ldr	r1, [pc, #56]	@ (80021f8 <runProgram+0x74>)
    currentExecutingLine = 0;
 80021be:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021c0:	f005 f956 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 80021c4:	4809      	ldr	r0, [pc, #36]	@ (80021ec <runProgram+0x68>)
 80021c6:	f7ff fb87 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80021ca:	4621      	mov	r1, r4
 80021cc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80021d0:	4806      	ldr	r0, [pc, #24]	@ (80021ec <runProgram+0x68>)
 80021d2:	f005 f9b2 	bl	800753a <memset>
}
 80021d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
 80021da:	4808      	ldr	r0, [pc, #32]	@ (80021fc <runProgram+0x78>)
 80021dc:	f7ff bb7c 	b.w	80018d8 <sendUSBText>
 80021e0:	20000399 	.word	0x20000399
 80021e4:	200003a0 	.word	0x200003a0
 80021e8:	0800b53a 	.word	0x0800b53a
 80021ec:	2000235c 	.word	0x2000235c
 80021f0:	20000398 	.word	0x20000398
 80021f4:	2000039c 	.word	0x2000039c
 80021f8:	0800b55b 	.word	0x0800b55b
 80021fc:	0800b58a 	.word	0x0800b58a

08002200 <runNextLine>:

/**
  * @brief  Ejecuta la siguiente línea del programa
  * @retval None
  */
void runNextLine(void) {
 8002200:	b570      	push	{r4, r5, r6, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 8002202:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <runNextLine+0xc8>)
void runNextLine(void) {
 8002204:	b094      	sub	sp, #80	@ 0x50
    if (!isProgramLoaded || programLineCount == 0) {
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b113      	cbz	r3, 8002210 <runNextLine+0x10>
 800220a:	4b30      	ldr	r3, [pc, #192]	@ (80022cc <runNextLine+0xcc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b97b      	cbnz	r3, 8002230 <runNextLine+0x30>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8002210:	492f      	ldr	r1, [pc, #188]	@ (80022d0 <runNextLine+0xd0>)
 8002212:	4830      	ldr	r0, [pc, #192]	@ (80022d4 <runNextLine+0xd4>)
 8002214:	f005 fa31 	bl	800767a <strcpy>
        sendUSBText(outputBuffer);
 8002218:	482e      	ldr	r0, [pc, #184]	@ (80022d4 <runNextLine+0xd4>)
 800221a:	f7ff fb5d 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800221e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002222:	2100      	movs	r1, #0
 8002224:	482b      	ldr	r0, [pc, #172]	@ (80022d4 <runNextLine+0xd4>)
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 8002226:	b014      	add	sp, #80	@ 0x50
 8002228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800222c:	f005 b985 	b.w	800753a <memset>
    if (currentExecutingLine >= programLineCount) {
 8002230:	4c29      	ldr	r4, [pc, #164]	@ (80022d8 <runNextLine+0xd8>)
 8002232:	6822      	ldr	r2, [r4, #0]
 8002234:	4293      	cmp	r3, r2
 8002236:	dc11      	bgt.n	800225c <runNextLine+0x5c>
        sprintf(outputBuffer, "Programa completado\r\n");
 8002238:	4928      	ldr	r1, [pc, #160]	@ (80022dc <runNextLine+0xdc>)
 800223a:	4826      	ldr	r0, [pc, #152]	@ (80022d4 <runNextLine+0xd4>)
 800223c:	f005 fa1d 	bl	800767a <strcpy>
        sendUSBText(outputBuffer);
 8002240:	4824      	ldr	r0, [pc, #144]	@ (80022d4 <runNextLine+0xd4>)
 8002242:	f7ff fb49 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002246:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800224a:	2100      	movs	r1, #0
 800224c:	4821      	ldr	r0, [pc, #132]	@ (80022d4 <runNextLine+0xd4>)
 800224e:	f005 f974 	bl	800753a <memset>
        isProgramRunning = false;
 8002252:	2200      	movs	r2, #0
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <runNextLine+0xe0>)
 8002256:	701a      	strb	r2, [r3, #0]
}
 8002258:	b014      	add	sp, #80	@ 0x50
 800225a:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 800225c:	2650      	movs	r6, #80	@ 0x50
 800225e:	4d21      	ldr	r5, [pc, #132]	@ (80022e4 <runNextLine+0xe4>)
 8002260:	4921      	ldr	r1, [pc, #132]	@ (80022e8 <runNextLine+0xe8>)
 8002262:	fb06 5302 	mla	r3, r6, r2, r5
 8002266:	481b      	ldr	r0, [pc, #108]	@ (80022d4 <runNextLine+0xd4>)
 8002268:	3201      	adds	r2, #1
 800226a:	f005 f901 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 800226e:	4819      	ldr	r0, [pc, #100]	@ (80022d4 <runNextLine+0xd4>)
 8002270:	f7ff fb32 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002274:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002278:	2100      	movs	r1, #0
 800227a:	4816      	ldr	r0, [pc, #88]	@ (80022d4 <runNextLine+0xd4>)
 800227c:	f005 f95d 	bl	800753a <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002280:	6821      	ldr	r1, [r4, #0]
 8002282:	224f      	movs	r2, #79	@ 0x4f
 8002284:	fb06 5101 	mla	r1, r6, r1, r5
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002288:	2500      	movs	r5, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800228a:	4668      	mov	r0, sp
 800228c:	f005 f96f 	bl	800756e <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 8002290:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002292:	f88d 504f 	strb.w	r5, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 8002296:	f7ff fa89 	bl	80017ac <gc_execute_line>
        currentExecutingLine++;
 800229a:	6823      	ldr	r3, [r4, #0]
    if (status == STATUS_OK) {
 800229c:	4602      	mov	r2, r0
        currentExecutingLine++;
 800229e:	3301      	adds	r3, #1
    if (status == STATUS_OK) {
 80022a0:	b908      	cbnz	r0, 80022a6 <runNextLine+0xa6>
        currentExecutingLine++;
 80022a2:	6023      	str	r3, [r4, #0]
 80022a4:	e7d8      	b.n	8002258 <runNextLine+0x58>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 80022a6:	4911      	ldr	r1, [pc, #68]	@ (80022ec <runNextLine+0xec>)
 80022a8:	480a      	ldr	r0, [pc, #40]	@ (80022d4 <runNextLine+0xd4>)
 80022aa:	f005 f8e1 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
 80022ae:	4809      	ldr	r0, [pc, #36]	@ (80022d4 <runNextLine+0xd4>)
 80022b0:	f7ff fb12 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80022b4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80022b8:	4629      	mov	r1, r5
 80022ba:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <runNextLine+0xd4>)
 80022bc:	f005 f93d 	bl	800753a <memset>
        isProgramRunning = false;
 80022c0:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <runNextLine+0xe0>)
 80022c2:	701d      	strb	r5, [r3, #0]
 80022c4:	e7c8      	b.n	8002258 <runNextLine+0x58>
 80022c6:	bf00      	nop
 80022c8:	20000399 	.word	0x20000399
 80022cc:	200003a0 	.word	0x200003a0
 80022d0:	0800b53a 	.word	0x0800b53a
 80022d4:	2000235c 	.word	0x2000235c
 80022d8:	2000039c 	.word	0x2000039c
 80022dc:	0800b5c2 	.word	0x0800b5c2
 80022e0:	20000398 	.word	0x20000398
 80022e4:	200003a4 	.word	0x200003a4
 80022e8:	0800b5d8 	.word	0x0800b5d8
 80022ec:	0800b5f2 	.word	0x0800b5f2

080022f0 <pauseProgram>:

/**
  * @brief  Pausa la ejecución del programa
  * @retval None
  */
void pauseProgram(void) {
 80022f0:	b570      	push	{r4, r5, r6, lr}
    isProgramRunning = false;
 80022f2:	2500      	movs	r5, #0
    sprintf(outputBuffer, "Programa pausado\r\n");
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80022f4:	f240 36b6 	movw	r6, #950	@ 0x3b6
    sprintf(outputBuffer, "Programa pausado\r\n");
 80022f8:	4c0e      	ldr	r4, [pc, #56]	@ (8002334 <pauseProgram+0x44>)
    isProgramRunning = false;
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <pauseProgram+0x48>)
    sprintf(outputBuffer, "Programa pausado\r\n");
 80022fc:	490f      	ldr	r1, [pc, #60]	@ (800233c <pauseProgram+0x4c>)
 80022fe:	4620      	mov	r0, r4
    isProgramRunning = false;
 8002300:	701d      	strb	r5, [r3, #0]
    sprintf(outputBuffer, "Programa pausado\r\n");
 8002302:	f005 f9ba 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff fae6 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800230c:	4632      	mov	r2, r6
 800230e:	4629      	mov	r1, r5
 8002310:	4620      	mov	r0, r4
 8002312:	f005 f912 	bl	800753a <memset>
    sprintf(outputBuffer, "ok\r\n");
 8002316:	490a      	ldr	r1, [pc, #40]	@ (8002340 <pauseProgram+0x50>)
 8002318:	4620      	mov	r0, r4
 800231a:	f005 f9ae 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
 800231e:	4620      	mov	r0, r4
 8002320:	f7ff fada 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002324:	4632      	mov	r2, r6
 8002326:	4629      	mov	r1, r5
 8002328:	4620      	mov	r0, r4
}
 800232a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800232e:	f005 b904 	b.w	800753a <memset>
 8002332:	bf00      	nop
 8002334:	2000235c 	.word	0x2000235c
 8002338:	20000398 	.word	0x20000398
 800233c:	0800b611 	.word	0x0800b611
 8002340:	0800af3d 	.word	0x0800af3d

08002344 <showHelp>:

/**
  * @brief  Muestra la ayuda del sistema de programas G-code
  * @retval None
  */
void showHelp(void) {
 8002344:	b508      	push	{r3, lr}
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 8002346:	4837      	ldr	r0, [pc, #220]	@ (8002424 <showHelp+0xe0>)
 8002348:	f7ff fac6 	bl	80018d8 <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 800234c:	4836      	ldr	r0, [pc, #216]	@ (8002428 <showHelp+0xe4>)
 800234e:	f7ff fac3 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 8002352:	4836      	ldr	r0, [pc, #216]	@ (800242c <showHelp+0xe8>)
 8002354:	f7ff fac0 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 8002358:	4835      	ldr	r0, [pc, #212]	@ (8002430 <showHelp+0xec>)
 800235a:	f7ff fabd 	bl	80018d8 <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 800235e:	4835      	ldr	r0, [pc, #212]	@ (8002434 <showHelp+0xf0>)
 8002360:	f7ff faba 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 8002364:	4834      	ldr	r0, [pc, #208]	@ (8002438 <showHelp+0xf4>)
 8002366:	f7ff fab7 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 800236a:	4834      	ldr	r0, [pc, #208]	@ (800243c <showHelp+0xf8>)
 800236c:	f7ff fab4 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 8002370:	4833      	ldr	r0, [pc, #204]	@ (8002440 <showHelp+0xfc>)
 8002372:	f7ff fab1 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_STATUS - Estado del programa actual\r\n");
 8002376:	4833      	ldr	r0, [pc, #204]	@ (8002444 <showHelp+0x100>)
 8002378:	f7ff faae 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 800237c:	4832      	ldr	r0, [pc, #200]	@ (8002448 <showHelp+0x104>)
 800237e:	f7ff faab 	bl	80018d8 <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 8002382:	4832      	ldr	r0, [pc, #200]	@ (800244c <showHelp+0x108>)
 8002384:	f7ff faa8 	bl	80018d8 <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 8002388:	4831      	ldr	r0, [pc, #196]	@ (8002450 <showHelp+0x10c>)
 800238a:	f7ff faa5 	bl	80018d8 <sendUSBText>
    sendUSBText("PLANNER_STATUS - Estado del planner de movimientos\r\n");
 800238e:	4831      	ldr	r0, [pc, #196]	@ (8002454 <showHelp+0x110>)
 8002390:	f7ff faa2 	bl	80018d8 <sendUSBText>
    sendUSBText("PLANNER_ENABLE - Habilita el planner lookahead\r\n");
 8002394:	4830      	ldr	r0, [pc, #192]	@ (8002458 <showHelp+0x114>)
 8002396:	f7ff fa9f 	bl	80018d8 <sendUSBText>
    sendUSBText("PLANNER_DISABLE- Deshabilita el planner lookahead\r\n");
 800239a:	4830      	ldr	r0, [pc, #192]	@ (800245c <showHelp+0x118>)
 800239c:	f7ff fa9c 	bl	80018d8 <sendUSBText>
    sendUSBText("PLANNER_SYNC   - Sincroniza el planner (espera buffer vacio)\r\n");
 80023a0:	482f      	ldr	r0, [pc, #188]	@ (8002460 <showHelp+0x11c>)
 80023a2:	f7ff fa99 	bl	80018d8 <sendUSBText>
    sendUSBText("PLANNER_RESET  - Reinicia el planner\r\n");
 80023a6:	482f      	ldr	r0, [pc, #188]	@ (8002464 <showHelp+0x120>)
 80023a8:	f7ff fa96 	bl	80018d8 <sendUSBText>
    
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 80023ac:	482e      	ldr	r0, [pc, #184]	@ (8002468 <showHelp+0x124>)
 80023ae:	f7ff fa93 	bl	80018d8 <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 80023b2:	482e      	ldr	r0, [pc, #184]	@ (800246c <showHelp+0x128>)
 80023b4:	f7ff fa90 	bl	80018d8 <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 80023b8:	482d      	ldr	r0, [pc, #180]	@ (8002470 <showHelp+0x12c>)
 80023ba:	f7ff fa8d 	bl	80018d8 <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 80023be:	482d      	ldr	r0, [pc, #180]	@ (8002474 <showHelp+0x130>)
 80023c0:	f7ff fa8a 	bl	80018d8 <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 80023c4:	482c      	ldr	r0, [pc, #176]	@ (8002478 <showHelp+0x134>)
 80023c6:	f7ff fa87 	bl	80018d8 <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 80023ca:	482c      	ldr	r0, [pc, #176]	@ (800247c <showHelp+0x138>)
 80023cc:	f7ff fa84 	bl	80018d8 <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 80023d0:	482b      	ldr	r0, [pc, #172]	@ (8002480 <showHelp+0x13c>)
 80023d2:	f7ff fa81 	bl	80018d8 <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 80023d6:	482b      	ldr	r0, [pc, #172]	@ (8002484 <showHelp+0x140>)
 80023d8:	f7ff fa7e 	bl	80018d8 <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 80023dc:	482a      	ldr	r0, [pc, #168]	@ (8002488 <showHelp+0x144>)
 80023de:	f7ff fa7b 	bl	80018d8 <sendUSBText>
    sendUSBText("M505           - Mostrar limites de la maquina\r\n");
 80023e2:	482a      	ldr	r0, [pc, #168]	@ (800248c <showHelp+0x148>)
 80023e4:	f7ff fa78 	bl	80018d8 <sendUSBText>
    
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 80023e8:	4829      	ldr	r0, [pc, #164]	@ (8002490 <showHelp+0x14c>)
 80023ea:	f7ff fa75 	bl	80018d8 <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 80023ee:	4829      	ldr	r0, [pc, #164]	@ (8002494 <showHelp+0x150>)
 80023f0:	f7ff fa72 	bl	80018d8 <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 80023f4:	4828      	ldr	r0, [pc, #160]	@ (8002498 <showHelp+0x154>)
 80023f6:	f7ff fa6f 	bl	80018d8 <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 80023fa:	4828      	ldr	r0, [pc, #160]	@ (800249c <showHelp+0x158>)
 80023fc:	f7ff fa6c 	bl	80018d8 <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 8002400:	4827      	ldr	r0, [pc, #156]	@ (80024a0 <showHelp+0x15c>)
 8002402:	f7ff fa69 	bl	80018d8 <sendUSBText>
    sendUSBText("5. FIN\r\n");
 8002406:	4827      	ldr	r0, [pc, #156]	@ (80024a4 <showHelp+0x160>)
 8002408:	f7ff fa66 	bl	80018d8 <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 800240c:	4826      	ldr	r0, [pc, #152]	@ (80024a8 <showHelp+0x164>)
 800240e:	f7ff fa63 	bl	80018d8 <sendUSBText>
    
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 8002412:	4826      	ldr	r0, [pc, #152]	@ (80024ac <showHelp+0x168>)
 8002414:	f7ff fa60 	bl	80018d8 <sendUSBText>
    sendUSBText("ok\r\n");
}
 8002418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("ok\r\n");
 800241c:	4824      	ldr	r0, [pc, #144]	@ (80024b0 <showHelp+0x16c>)
 800241e:	f7ff ba5b 	b.w	80018d8 <sendUSBText>
 8002422:	bf00      	nop
 8002424:	0800b624 	.word	0x0800b624
 8002428:	0800b646 	.word	0x0800b646
 800242c:	0800b660 	.word	0x0800b660
 8002430:	0800b69a 	.word	0x0800b69a
 8002434:	0800b6c4 	.word	0x0800b6c4
 8002438:	0800b6fa 	.word	0x0800b6fa
 800243c:	0800b727 	.word	0x0800b727
 8002440:	0800b752 	.word	0x0800b752
 8002444:	0800b775 	.word	0x0800b775
 8002448:	0800b7a3 	.word	0x0800b7a3
 800244c:	0800b7d7 	.word	0x0800b7d7
 8002450:	0800b805 	.word	0x0800b805
 8002454:	0800b83a 	.word	0x0800b83a
 8002458:	0800b86f 	.word	0x0800b86f
 800245c:	0800b8a0 	.word	0x0800b8a0
 8002460:	0800b8d4 	.word	0x0800b8d4
 8002464:	0800b913 	.word	0x0800b913
 8002468:	0800b93a 	.word	0x0800b93a
 800246c:	0800b957 	.word	0x0800b957
 8002470:	0800b97c 	.word	0x0800b97c
 8002474:	0800b9af 	.word	0x0800b9af
 8002478:	0800b9d7 	.word	0x0800b9d7
 800247c:	0800ba05 	.word	0x0800ba05
 8002480:	0800ba2a 	.word	0x0800ba2a
 8002484:	0800ba52 	.word	0x0800ba52
 8002488:	0800ba7e 	.word	0x0800ba7e
 800248c:	0800baa7 	.word	0x0800baa7
 8002490:	0800bad8 	.word	0x0800bad8
 8002494:	0800baec 	.word	0x0800baec
 8002498:	0800baff 	.word	0x0800baff
 800249c:	0800bb11 	.word	0x0800bb11
 80024a0:	0800bb2a 	.word	0x0800bb2a
 80024a4:	0800bb48 	.word	0x0800bb48
 80024a8:	0800bb51 	.word	0x0800bb51
 80024ac:	0800bb62 	.word	0x0800bb62
 80024b0:	0800af3d 	.word	0x0800af3d

080024b4 <showQueueStatus>:

/**
  * @brief  Muestra el estado de la cola de transmisión USB CDC
  * @retval None
  */
void showQueueStatus(void) {
 80024b4:	b508      	push	{r3, lr}

    sprintf(outputBuffer, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 80024b6:	4923      	ldr	r1, [pc, #140]	@ (8002544 <showQueueStatus+0x90>)
 80024b8:	4823      	ldr	r0, [pc, #140]	@ (8002548 <showQueueStatus+0x94>)
 80024ba:	f005 f8de 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
 80024be:	4822      	ldr	r0, [pc, #136]	@ (8002548 <showQueueStatus+0x94>)
 80024c0:	f7ff fa0a 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024c4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80024c8:	2100      	movs	r1, #0
 80024ca:	481f      	ldr	r0, [pc, #124]	@ (8002548 <showQueueStatus+0x94>)
 80024cc:	f005 f835 	bl	800753a <memset>

    sprintf(outputBuffer, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 80024d0:	f003 ff36 	bl	8006340 <CDC_TxQueue_GetCount>
 80024d4:	230a      	movs	r3, #10
 80024d6:	4602      	mov	r2, r0
 80024d8:	491c      	ldr	r1, [pc, #112]	@ (800254c <showQueueStatus+0x98>)
 80024da:	481b      	ldr	r0, [pc, #108]	@ (8002548 <showQueueStatus+0x94>)
 80024dc:	f004 ffc8 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 80024e0:	4819      	ldr	r0, [pc, #100]	@ (8002548 <showQueueStatus+0x94>)
 80024e2:	f7ff f9f9 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024e6:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80024ea:	2100      	movs	r1, #0
 80024ec:	4816      	ldr	r0, [pc, #88]	@ (8002548 <showQueueStatus+0x94>)
 80024ee:	f005 f824 	bl	800753a <memset>

    sprintf(outputBuffer, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 80024f2:	f003 ff2b 	bl	800634c <CDC_TxQueue_IsFull>
 80024f6:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <showQueueStatus+0x9c>)
 80024f8:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <showQueueStatus+0xa0>)
 80024fa:	4917      	ldr	r1, [pc, #92]	@ (8002558 <showQueueStatus+0xa4>)
 80024fc:	2800      	cmp	r0, #0
 80024fe:	bf18      	it	ne
 8002500:	461a      	movne	r2, r3
 8002502:	4811      	ldr	r0, [pc, #68]	@ (8002548 <showQueueStatus+0x94>)
 8002504:	f004 ffb4 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 8002508:	480f      	ldr	r0, [pc, #60]	@ (8002548 <showQueueStatus+0x94>)
 800250a:	f7ff f9e5 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800250e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002512:	2100      	movs	r1, #0
 8002514:	480c      	ldr	r0, [pc, #48]	@ (8002548 <showQueueStatus+0x94>)
 8002516:	f005 f810 	bl	800753a <memset>

    sprintf(outputBuffer, "Método transmisión: ");
 800251a:	4910      	ldr	r1, [pc, #64]	@ (800255c <showQueueStatus+0xa8>)
 800251c:	480a      	ldr	r0, [pc, #40]	@ (8002548 <showQueueStatus+0x94>)
 800251e:	f005 f8ac 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
 8002522:	4809      	ldr	r0, [pc, #36]	@ (8002548 <showQueueStatus+0x94>)
 8002524:	f7ff f9d8 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002528:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800252c:	2100      	movs	r1, #0
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <showQueueStatus+0x94>)
 8002530:	f005 f803 	bl	800753a <memset>
            break;
        case USB_METHOD_RETRY:
            sendUSBText("REINTENTOS\r\n");
            break;
        case USB_METHOD_QUEUED:
            sendUSBText("COLA\r\n");
 8002534:	480a      	ldr	r0, [pc, #40]	@ (8002560 <showQueueStatus+0xac>)
 8002536:	f7ff f9cf 	bl	80018d8 <sendUSBText>
            break;
    }
    
    sendUSBText("===========================\r\n");
}
 800253a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("===========================\r\n");
 800253e:	4809      	ldr	r0, [pc, #36]	@ (8002564 <showQueueStatus+0xb0>)
 8002540:	f7ff b9ca 	b.w	80018d8 <sendUSBText>
 8002544:	0800bb7e 	.word	0x0800bb7e
 8002548:	2000235c 	.word	0x2000235c
 800254c:	0800bb9e 	.word	0x0800bb9e
 8002550:	0800bb78 	.word	0x0800bb78
 8002554:	0800bb7b 	.word	0x0800bb7b
 8002558:	0800bbb8 	.word	0x0800bbb8
 800255c:	0800bbc9 	.word	0x0800bbc9
 8002560:	0800bbe0 	.word	0x0800bbe0
 8002564:	0800bc92 	.word	0x0800bc92

08002568 <showProgramStatus>:

/**
  * @brief  Muestra el estado del programa en ejecución
  * @retval None
  */
void showProgramStatus(void) {
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sprintf(outputBuffer, "\r\n=== ESTADO PROGRAMA G-CODE ===\r\n");
 800256a:	4945      	ldr	r1, [pc, #276]	@ (8002680 <showProgramStatus+0x118>)
 800256c:	4845      	ldr	r0, [pc, #276]	@ (8002684 <showProgramStatus+0x11c>)
 800256e:	f005 f884 	bl	800767a <strcpy>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 8002572:	4c45      	ldr	r4, [pc, #276]	@ (8002688 <showProgramStatus+0x120>)
    sendUSBText(outputBuffer);
 8002574:	4843      	ldr	r0, [pc, #268]	@ (8002684 <showProgramStatus+0x11c>)
 8002576:	f7ff f9af 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800257a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800257e:	2100      	movs	r1, #0
 8002580:	4840      	ldr	r0, [pc, #256]	@ (8002684 <showProgramStatus+0x11c>)
 8002582:	f004 ffda 	bl	800753a <memset>
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 8002586:	4f41      	ldr	r7, [pc, #260]	@ (800268c <showProgramStatus+0x124>)
 8002588:	7822      	ldrb	r2, [r4, #0]
 800258a:	4d41      	ldr	r5, [pc, #260]	@ (8002690 <showProgramStatus+0x128>)
 800258c:	4941      	ldr	r1, [pc, #260]	@ (8002694 <showProgramStatus+0x12c>)
 800258e:	2a00      	cmp	r2, #0
 8002590:	bf0c      	ite	eq
 8002592:	463a      	moveq	r2, r7
 8002594:	462a      	movne	r2, r5
 8002596:	483b      	ldr	r0, [pc, #236]	@ (8002684 <showProgramStatus+0x11c>)
 8002598:	f004 ff6a 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 800259c:	4e3e      	ldr	r6, [pc, #248]	@ (8002698 <showProgramStatus+0x130>)
    sendUSBText(outputBuffer);
 800259e:	4839      	ldr	r0, [pc, #228]	@ (8002684 <showProgramStatus+0x11c>)
 80025a0:	f7ff f99a 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025a4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80025a8:	2100      	movs	r1, #0
 80025aa:	4836      	ldr	r0, [pc, #216]	@ (8002684 <showProgramStatus+0x11c>)
 80025ac:	f004 ffc5 	bl	800753a <memset>
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 80025b0:	7832      	ldrb	r2, [r6, #0]
 80025b2:	493a      	ldr	r1, [pc, #232]	@ (800269c <showProgramStatus+0x134>)
 80025b4:	2a00      	cmp	r2, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	463a      	moveq	r2, r7
 80025ba:	462a      	movne	r2, r5
 80025bc:	4831      	ldr	r0, [pc, #196]	@ (8002684 <showProgramStatus+0x11c>)
 80025be:	f004 ff57 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 80025c2:	4830      	ldr	r0, [pc, #192]	@ (8002684 <showProgramStatus+0x11c>)
 80025c4:	f7ff f988 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025c8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80025cc:	2100      	movs	r1, #0
 80025ce:	482d      	ldr	r0, [pc, #180]	@ (8002684 <showProgramStatus+0x11c>)
 80025d0:	f004 ffb3 	bl	800753a <memset>
    
    if (isProgramLoaded) {
 80025d4:	7823      	ldrb	r3, [r4, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04c      	beq.n	8002674 <showProgramStatus+0x10c>
        sprintf(outputBuffer, "Total de líneas: %d\r\n", programLineCount);
 80025da:	4c31      	ldr	r4, [pc, #196]	@ (80026a0 <showProgramStatus+0x138>)
 80025dc:	4931      	ldr	r1, [pc, #196]	@ (80026a4 <showProgramStatus+0x13c>)
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	4828      	ldr	r0, [pc, #160]	@ (8002684 <showProgramStatus+0x11c>)
 80025e2:	f004 ff45 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 80025e6:	4d30      	ldr	r5, [pc, #192]	@ (80026a8 <showProgramStatus+0x140>)
        sendUSBText(outputBuffer);
 80025e8:	4826      	ldr	r0, [pc, #152]	@ (8002684 <showProgramStatus+0x11c>)
 80025ea:	f7ff f975 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80025ee:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80025f2:	2100      	movs	r1, #0
 80025f4:	4823      	ldr	r0, [pc, #140]	@ (8002684 <showProgramStatus+0x11c>)
 80025f6:	f004 ffa0 	bl	800753a <memset>
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 80025fa:	682a      	ldr	r2, [r5, #0]
 80025fc:	492b      	ldr	r1, [pc, #172]	@ (80026ac <showProgramStatus+0x144>)
 80025fe:	3201      	adds	r2, #1
 8002600:	4820      	ldr	r0, [pc, #128]	@ (8002684 <showProgramStatus+0x11c>)
 8002602:	f004 ff35 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
 8002606:	481f      	ldr	r0, [pc, #124]	@ (8002684 <showProgramStatus+0x11c>)
 8002608:	f7ff f966 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800260c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8002610:	2100      	movs	r1, #0
 8002612:	481c      	ldr	r0, [pc, #112]	@ (8002684 <showProgramStatus+0x11c>)
 8002614:	f004 ff91 	bl	800753a <memset>
        
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002618:	6823      	ldr	r3, [r4, #0]
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 800261a:	481a      	ldr	r0, [pc, #104]	@ (8002684 <showProgramStatus+0x11c>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 800261c:	2b00      	cmp	r3, #0
 800261e:	bfc5      	ittet	gt
 8002620:	2164      	movgt	r1, #100	@ 0x64
 8002622:	682a      	ldrgt	r2, [r5, #0]
 8002624:	2200      	movle	r2, #0
 8002626:	434a      	mulgt	r2, r1
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002628:	4921      	ldr	r1, [pc, #132]	@ (80026b0 <showProgramStatus+0x148>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 800262a:	bfc8      	it	gt
 800262c:	fb92 f2f3 	sdivgt	r2, r2, r3
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002630:	f004 ff1e 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
 8002634:	4813      	ldr	r0, [pc, #76]	@ (8002684 <showProgramStatus+0x11c>)
 8002636:	f7ff f94f 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800263a:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800263e:	2100      	movs	r1, #0
 8002640:	4810      	ldr	r0, [pc, #64]	@ (8002684 <showProgramStatus+0x11c>)
 8002642:	f004 ff7a 	bl	800753a <memset>
        
        if (isProgramRunning && currentExecutingLine < programLineCount) {
 8002646:	7833      	ldrb	r3, [r6, #0]
 8002648:	b1a3      	cbz	r3, 8002674 <showProgramStatus+0x10c>
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	4293      	cmp	r3, r2
 8002650:	da10      	bge.n	8002674 <showProgramStatus+0x10c>
            sprintf(outputBuffer, "Próxima línea: %s\r\n", gcodeProgram[currentExecutingLine]);
 8002652:	2150      	movs	r1, #80	@ 0x50
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <showProgramStatus+0x14c>)
 8002656:	480b      	ldr	r0, [pc, #44]	@ (8002684 <showProgramStatus+0x11c>)
 8002658:	fb01 2203 	mla	r2, r1, r3, r2
 800265c:	4916      	ldr	r1, [pc, #88]	@ (80026b8 <showProgramStatus+0x150>)
 800265e:	f004 ff07 	bl	8007470 <siprintf>
            sendUSBText(outputBuffer);
 8002662:	4808      	ldr	r0, [pc, #32]	@ (8002684 <showProgramStatus+0x11c>)
 8002664:	f7ff f938 	bl	80018d8 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 8002668:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800266c:	2100      	movs	r1, #0
 800266e:	4805      	ldr	r0, [pc, #20]	@ (8002684 <showProgramStatus+0x11c>)
 8002670:	f004 ff63 	bl	800753a <memset>
        }
    }
    
    sendUSBText("=============================\r\n");
}
 8002674:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendUSBText("=============================\r\n");
 8002678:	4810      	ldr	r0, [pc, #64]	@ (80026bc <showProgramStatus+0x154>)
 800267a:	f7ff b92d 	b.w	80018d8 <sendUSBText>
 800267e:	bf00      	nop
 8002680:	0800bbe7 	.word	0x0800bbe7
 8002684:	2000235c 	.word	0x2000235c
 8002688:	20000399 	.word	0x20000399
 800268c:	0800bb7b 	.word	0x0800bb7b
 8002690:	0800bb78 	.word	0x0800bb78
 8002694:	0800bc0a 	.word	0x0800bc0a
 8002698:	20000398 	.word	0x20000398
 800269c:	0800bc21 	.word	0x0800bc21
 80026a0:	200003a0 	.word	0x200003a0
 80026a4:	0800bc3e 	.word	0x0800bc3e
 80026a8:	2000039c 	.word	0x2000039c
 80026ac:	0800bc55 	.word	0x0800bc55
 80026b0:	0800bc69 	.word	0x0800bc69
 80026b4:	200003a4 	.word	0x200003a4
 80026b8:	0800bc7a 	.word	0x0800bc7a
 80026bc:	0800bc90 	.word	0x0800bc90

080026c0 <processGcode>:
void processGcode(const char* command) {
 80026c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80026c4:	220d      	movs	r2, #13
void processGcode(const char* command) {
 80026c6:	b0a0      	sub	sp, #128	@ 0x80
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80026c8:	498b      	ldr	r1, [pc, #556]	@ (80028f8 <processGcode+0x238>)
void processGcode(const char* command) {
 80026ca:	4604      	mov	r4, r0
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80026cc:	f004 ff3d 	bl	800754a <strncmp>
 80026d0:	b920      	cbnz	r0, 80026dc <processGcode+0x1c>
}
 80026d2:	b020      	add	sp, #128	@ 0x80
 80026d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        startProgramStorage();
 80026d8:	f7ff bc34 	b.w	8001f44 <startProgramStorage>
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 80026dc:	220c      	movs	r2, #12
 80026de:	4620      	mov	r0, r4
 80026e0:	4986      	ldr	r1, [pc, #536]	@ (80028fc <processGcode+0x23c>)
 80026e2:	f004 ff32 	bl	800754a <strncmp>
 80026e6:	b920      	cbnz	r0, 80026f2 <processGcode+0x32>
}
 80026e8:	b020      	add	sp, #128	@ 0x80
 80026ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        stopProgramStorage();
 80026ee:	f7ff bc53 	b.w	8001f98 <stopProgramStorage>
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 80026f2:	220b      	movs	r2, #11
 80026f4:	4620      	mov	r0, r4
 80026f6:	4982      	ldr	r1, [pc, #520]	@ (8002900 <processGcode+0x240>)
 80026f8:	f004 ff27 	bl	800754a <strncmp>
 80026fc:	b920      	cbnz	r0, 8002708 <processGcode+0x48>
}
 80026fe:	b020      	add	sp, #128	@ 0x80
 8002700:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runProgram();
 8002704:	f7ff bd3e 	b.w	8002184 <runProgram>
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 8002708:	220d      	movs	r2, #13
 800270a:	4620      	mov	r0, r4
 800270c:	497d      	ldr	r1, [pc, #500]	@ (8002904 <processGcode+0x244>)
 800270e:	f004 ff1c 	bl	800754a <strncmp>
 8002712:	b920      	cbnz	r0, 800271e <processGcode+0x5e>
}
 8002714:	b020      	add	sp, #128	@ 0x80
 8002716:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        clearProgram();
 800271a:	f7ff bd09 	b.w	8002130 <clearProgram>
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 800271e:	220d      	movs	r2, #13
 8002720:	4620      	mov	r0, r4
 8002722:	4979      	ldr	r1, [pc, #484]	@ (8002908 <processGcode+0x248>)
 8002724:	f004 ff11 	bl	800754a <strncmp>
 8002728:	b920      	cbnz	r0, 8002734 <processGcode+0x74>
}
 800272a:	b020      	add	sp, #128	@ 0x80
 800272c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        pauseProgram();
 8002730:	f7ff bdde 	b.w	80022f0 <pauseProgram>
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 8002734:	220c      	movs	r2, #12
 8002736:	4620      	mov	r0, r4
 8002738:	4974      	ldr	r1, [pc, #464]	@ (800290c <processGcode+0x24c>)
 800273a:	f004 ff06 	bl	800754a <strncmp>
 800273e:	b920      	cbnz	r0, 800274a <processGcode+0x8a>
}
 8002740:	b020      	add	sp, #128	@ 0x80
 8002742:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runNextLine();
 8002746:	f7ff bd5b 	b.w	8002200 <runNextLine>
    else if (strncmp(command, "PROGRAM_STATUS", 14) == 0) {
 800274a:	220e      	movs	r2, #14
 800274c:	4620      	mov	r0, r4
 800274e:	4970      	ldr	r1, [pc, #448]	@ (8002910 <processGcode+0x250>)
 8002750:	f004 fefb 	bl	800754a <strncmp>
 8002754:	b920      	cbnz	r0, 8002760 <processGcode+0xa0>
}
 8002756:	b020      	add	sp, #128	@ 0x80
 8002758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showProgramStatus();
 800275c:	f7ff bf04 	b.w	8002568 <showProgramStatus>
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 8002760:	2204      	movs	r2, #4
 8002762:	4620      	mov	r0, r4
 8002764:	496b      	ldr	r1, [pc, #428]	@ (8002914 <processGcode+0x254>)
 8002766:	f004 fef0 	bl	800754a <strncmp>
 800276a:	b128      	cbz	r0, 8002778 <processGcode+0xb8>
 800276c:	2204      	movs	r2, #4
 800276e:	4620      	mov	r0, r4
 8002770:	4969      	ldr	r1, [pc, #420]	@ (8002918 <processGcode+0x258>)
 8002772:	f004 feea 	bl	800754a <strncmp>
 8002776:	b920      	cbnz	r0, 8002782 <processGcode+0xc2>
}
 8002778:	b020      	add	sp, #128	@ 0x80
 800277a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showHelp();
 800277e:	f7ff bde1 	b.w	8002344 <showHelp>
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 8002782:	220c      	movs	r2, #12
 8002784:	4620      	mov	r0, r4
 8002786:	4965      	ldr	r1, [pc, #404]	@ (800291c <processGcode+0x25c>)
 8002788:	f004 fedf 	bl	800754a <strncmp>
 800278c:	b920      	cbnz	r0, 8002798 <processGcode+0xd8>
}
 800278e:	b020      	add	sp, #128	@ 0x80
 8002790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showQueueStatus();
 8002794:	f7ff be8e 	b.w	80024b4 <showQueueStatus>
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 8002798:	2203      	movs	r2, #3
 800279a:	4620      	mov	r0, r4
 800279c:	4960      	ldr	r1, [pc, #384]	@ (8002920 <processGcode+0x260>)
 800279e:	f004 fed4 	bl	800754a <strncmp>
    if (isStoringProgram) {
 80027a2:	4d60      	ldr	r5, [pc, #384]	@ (8002924 <processGcode+0x264>)
 80027a4:	782e      	ldrb	r6, [r5, #0]
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80027a6:	b130      	cbz	r0, 80027b6 <processGcode+0xf6>
 80027a8:	2203      	movs	r2, #3
 80027aa:	4620      	mov	r0, r4
 80027ac:	495e      	ldr	r1, [pc, #376]	@ (8002928 <processGcode+0x268>)
 80027ae:	f004 fecc 	bl	800754a <strncmp>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d179      	bne.n	80028aa <processGcode+0x1ea>
        if (isStoringProgram) {
 80027b6:	2e00      	cmp	r6, #0
 80027b8:	d196      	bne.n	80026e8 <processGcode+0x28>
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 80027ba:	2263      	movs	r2, #99	@ 0x63
 80027bc:	4621      	mov	r1, r4
 80027be:	a807      	add	r0, sp, #28
 80027c0:	f004 fed5 	bl	800756e <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 80027c4:	2300      	movs	r3, #0
    uint8_t status = gc_execute_line(line_copy);
 80027c6:	a807      	add	r0, sp, #28
    line_copy[sizeof(line_copy) - 1] = '\0';
 80027c8:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    uint8_t status = gc_execute_line(line_copy);
 80027cc:	f7fe ffee 	bl	80017ac <gc_execute_line>
    if (status == STATUS_OK) {
 80027d0:	4605      	mov	r5, r0
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d165      	bne.n	80028a2 <processGcode+0x1e2>
        if (strncmp(command, "M114", 4) == 0) {
 80027d6:	2204      	movs	r2, #4
 80027d8:	4620      	mov	r0, r4
 80027da:	4954      	ldr	r1, [pc, #336]	@ (800292c <processGcode+0x26c>)
 80027dc:	f004 feb5 	bl	800754a <strncmp>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d176      	bne.n	80028d2 <processGcode+0x212>
            float xPos = currentX / (float)STEPS_PER_MM_X;
 80027e4:	4b52      	ldr	r3, [pc, #328]	@ (8002930 <processGcode+0x270>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f7fe fa78 	bl	8000cdc <__aeabi_i2f>
 80027ec:	4951      	ldr	r1, [pc, #324]	@ (8002934 <processGcode+0x274>)
 80027ee:	f7fe fb7d 	bl	8000eec <__aeabi_fdiv>
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 80027f2:	4b51      	ldr	r3, [pc, #324]	@ (8002938 <processGcode+0x278>)
            float xPos = currentX / (float)STEPS_PER_MM_X;
 80027f4:	4606      	mov	r6, r0
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f7fe fa70 	bl	8000cdc <__aeabi_i2f>
 80027fc:	494d      	ldr	r1, [pc, #308]	@ (8002934 <processGcode+0x274>)
 80027fe:	f7fe fb75 	bl	8000eec <__aeabi_fdiv>
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002802:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <processGcode+0x27c>)
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002804:	4680      	mov	r8, r0
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	f7fe fa68 	bl	8000cdc <__aeabi_i2f>
 800280c:	494c      	ldr	r1, [pc, #304]	@ (8002940 <processGcode+0x280>)
 800280e:	f7fe fb6d 	bl	8000eec <__aeabi_fdiv>
 8002812:	4681      	mov	r9, r0
            int x_int = (int)xPos;
 8002814:	4630      	mov	r0, r6
 8002816:	f7fe fc91 	bl	800113c <__aeabi_f2iz>
 800281a:	4604      	mov	r4, r0
            int y_int = (int)yPos;
 800281c:	4640      	mov	r0, r8
 800281e:	f7fe fc8d 	bl	800113c <__aeabi_f2iz>
 8002822:	4607      	mov	r7, r0
            int z_int = (int)zPos;
 8002824:	4648      	mov	r0, r9
 8002826:	f7fe fc89 	bl	800113c <__aeabi_f2iz>
 800282a:	4682      	mov	sl, r0
            int z_dec = (int)((zPos - z_int) * 100);
 800282c:	f7fe fa56 	bl	8000cdc <__aeabi_i2f>
 8002830:	4601      	mov	r1, r0
 8002832:	4648      	mov	r0, r9
 8002834:	f7fe f99c 	bl	8000b70 <__aeabi_fsub>
 8002838:	4942      	ldr	r1, [pc, #264]	@ (8002944 <processGcode+0x284>)
 800283a:	f7fe faa3 	bl	8000d84 <__aeabi_fmul>
 800283e:	f7fe fc7d 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002842:	2800      	cmp	r0, #0
 8002844:	bfb8      	it	lt
 8002846:	4240      	neglt	r0, r0
 8002848:	e9cd a003 	strd	sl, r0, [sp, #12]
            int y_dec = (int)((yPos - y_int) * 100);
 800284c:	4638      	mov	r0, r7
 800284e:	f7fe fa45 	bl	8000cdc <__aeabi_i2f>
 8002852:	4601      	mov	r1, r0
 8002854:	4640      	mov	r0, r8
 8002856:	f7fe f98b 	bl	8000b70 <__aeabi_fsub>
 800285a:	493a      	ldr	r1, [pc, #232]	@ (8002944 <processGcode+0x284>)
 800285c:	f7fe fa92 	bl	8000d84 <__aeabi_fmul>
 8002860:	f7fe fc6c 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002864:	2800      	cmp	r0, #0
 8002866:	bfb8      	it	lt
 8002868:	4240      	neglt	r0, r0
 800286a:	e9cd 7001 	strd	r7, r0, [sp, #4]
            int x_dec = (int)((xPos - x_int) * 100);
 800286e:	4620      	mov	r0, r4
 8002870:	f7fe fa34 	bl	8000cdc <__aeabi_i2f>
 8002874:	4601      	mov	r1, r0
 8002876:	4630      	mov	r0, r6
 8002878:	f7fe f97a 	bl	8000b70 <__aeabi_fsub>
 800287c:	4931      	ldr	r1, [pc, #196]	@ (8002944 <processGcode+0x284>)
 800287e:	f7fe fa81 	bl	8000d84 <__aeabi_fmul>
 8002882:	f7fe fc5b 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002886:	2800      	cmp	r0, #0
 8002888:	bfb8      	it	lt
 800288a:	4240      	neglt	r0, r0
 800288c:	9000      	str	r0, [sp, #0]
 800288e:	4623      	mov	r3, r4
 8002890:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8002894:	4a2c      	ldr	r2, [pc, #176]	@ (8002948 <processGcode+0x288>)
 8002896:	482d      	ldr	r0, [pc, #180]	@ (800294c <processGcode+0x28c>)
 8002898:	f004 fdb4 	bl	8007404 <sniprintf>
            sendUSBText(outputBuffer);
 800289c:	482b      	ldr	r0, [pc, #172]	@ (800294c <processGcode+0x28c>)
 800289e:	f7ff f81b 	bl	80018d8 <sendUSBText>
    report_status_message(status);
 80028a2:	4628      	mov	r0, r5
 80028a4:	f7fe ff96 	bl	80017d4 <report_status_message>
 80028a8:	e010      	b.n	80028cc <processGcode+0x20c>
    if (isStoringProgram) {
 80028aa:	2e00      	cmp	r6, #0
 80028ac:	d085      	beq.n	80027ba <processGcode+0xfa>
        if (addLineToProgram(command)) {
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fba4 	bl	8001ffc <addLineToProgram>
 80028b4:	b128      	cbz	r0, 80028c2 <processGcode+0x202>
            sendUSBText("ok\r\n");
 80028b6:	4826      	ldr	r0, [pc, #152]	@ (8002950 <processGcode+0x290>)
}
 80028b8:	b020      	add	sp, #128	@ 0x80
 80028ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            sendUSBText("ok\r\n");
 80028be:	f7ff b80b 	b.w	80018d8 <sendUSBText>
            isProgramLoaded = false;
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <processGcode+0x294>)
            isStoringProgram = false;
 80028c4:	7028      	strb	r0, [r5, #0]
            isProgramLoaded = false;
 80028c6:	7018      	strb	r0, [r3, #0]
            programLineCount = 0;
 80028c8:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <processGcode+0x298>)
 80028ca:	6018      	str	r0, [r3, #0]
}
 80028cc:	b020      	add	sp, #128	@ 0x80
 80028ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (strncmp(command, "M503", 4) == 0) {
 80028d2:	2204      	movs	r2, #4
 80028d4:	4620      	mov	r0, r4
 80028d6:	4921      	ldr	r1, [pc, #132]	@ (800295c <processGcode+0x29c>)
 80028d8:	f004 fe37 	bl	800754a <strncmp>
 80028dc:	b910      	cbnz	r0, 80028e4 <processGcode+0x224>
            showConfiguration();
 80028de:	f7ff f891 	bl	8001a04 <showConfiguration>
 80028e2:	e7de      	b.n	80028a2 <processGcode+0x1e2>
        } else if (strncmp(command, "M505", 4) == 0) {
 80028e4:	2204      	movs	r2, #4
 80028e6:	4620      	mov	r0, r4
 80028e8:	491d      	ldr	r1, [pc, #116]	@ (8002960 <processGcode+0x2a0>)
 80028ea:	f004 fe2e 	bl	800754a <strncmp>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1d7      	bne.n	80028a2 <processGcode+0x1e2>
            report_machine_limits();
 80028f2:	f7fe fd13 	bl	800131c <report_machine_limits>
 80028f6:	e7d4      	b.n	80028a2 <processGcode+0x1e2>
 80028f8:	0800bcb0 	.word	0x0800bcb0
 80028fc:	0800bcbe 	.word	0x0800bcbe
 8002900:	0800bccb 	.word	0x0800bccb
 8002904:	0800bcd7 	.word	0x0800bcd7
 8002908:	0800bce5 	.word	0x0800bce5
 800290c:	0800bcf3 	.word	0x0800bcf3
 8002910:	0800bd00 	.word	0x0800bd00
 8002914:	0800bd0f 	.word	0x0800bd0f
 8002918:	0800bd14 	.word	0x0800bd14
 800291c:	0800bd19 	.word	0x0800bd19
 8002920:	0800bd26 	.word	0x0800bd26
 8002924:	2000039a 	.word	0x2000039a
 8002928:	0800bd2a 	.word	0x0800bd2a
 800292c:	0800bd2e 	.word	0x0800bd2e
 8002930:	20002358 	.word	0x20002358
 8002934:	429e0000 	.word	0x429e0000
 8002938:	20002354 	.word	0x20002354
 800293c:	20002350 	.word	0x20002350
 8002940:	4575a000 	.word	0x4575a000
 8002944:	42c80000 	.word	0x42c80000
 8002948:	0800bd33 	.word	0x0800bd33
 800294c:	2000235c 	.word	0x2000235c
 8002950:	0800af3d 	.word	0x0800af3d
 8002954:	20000399 	.word	0x20000399
 8002958:	200003a0 	.word	0x200003a0
 800295c:	0800bd53 	.word	0x0800bd53
 8002960:	0800bd58 	.word	0x0800bd58

08002964 <processProgram>:

/**
  * @brief  Procesa la ejecución del programa de manera no bloqueante
  * @retval None
  */
void processProgram(void) {
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	b094      	sub	sp, #80	@ 0x50
    static uint32_t lastProgramTime = 0;
    uint32_t currentTime = HAL_GetTick();
 8002968:	f000 fe2e 	bl	80035c8 <HAL_GetTick>
    
    // Verificar si hay líneas pendientes y si el buffer tiene espacio
    if (currentExecutingLine >= programLineCount) {
 800296c:	4c27      	ldr	r4, [pc, #156]	@ (8002a0c <processProgram+0xa8>)
 800296e:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <processProgram+0xac>)
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	db11      	blt.n	800299c <processProgram+0x38>
        // Programa completado
       
            sprintf(outputBuffer, "Programa completado exitosamente\r\n");
 8002978:	4926      	ldr	r1, [pc, #152]	@ (8002a14 <processProgram+0xb0>)
 800297a:	4827      	ldr	r0, [pc, #156]	@ (8002a18 <processProgram+0xb4>)
 800297c:	f004 fe7d 	bl	800767a <strcpy>
            sendUSBText(outputBuffer);
 8002980:	4825      	ldr	r0, [pc, #148]	@ (8002a18 <processProgram+0xb4>)
 8002982:	f7fe ffa9 	bl	80018d8 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 8002986:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800298a:	2100      	movs	r1, #0
 800298c:	4822      	ldr	r0, [pc, #136]	@ (8002a18 <processProgram+0xb4>)
 800298e:	f004 fdd4 	bl	800753a <memset>
            isProgramRunning = false;
 8002992:	2200      	movs	r2, #0
 8002994:	4b21      	ldr	r3, [pc, #132]	@ (8002a1c <processProgram+0xb8>)
 8002996:	701a      	strb	r2, [r3, #0]
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 8002998:	b014      	add	sp, #80	@ 0x50
 800299a:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 800299c:	2650      	movs	r6, #80	@ 0x50
 800299e:	4d20      	ldr	r5, [pc, #128]	@ (8002a20 <processProgram+0xbc>)
 80029a0:	4920      	ldr	r1, [pc, #128]	@ (8002a24 <processProgram+0xc0>)
 80029a2:	fb06 5302 	mla	r3, r6, r2, r5
 80029a6:	481c      	ldr	r0, [pc, #112]	@ (8002a18 <processProgram+0xb4>)
 80029a8:	3201      	adds	r2, #1
 80029aa:	f004 fd61 	bl	8007470 <siprintf>
    sendUSBText(outputBuffer);
 80029ae:	481a      	ldr	r0, [pc, #104]	@ (8002a18 <processProgram+0xb4>)
 80029b0:	f7fe ff92 	bl	80018d8 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80029b4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80029b8:	2100      	movs	r1, #0
 80029ba:	4817      	ldr	r0, [pc, #92]	@ (8002a18 <processProgram+0xb4>)
 80029bc:	f004 fdbd 	bl	800753a <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	224f      	movs	r2, #79	@ 0x4f
 80029c4:	fb06 5101 	mla	r1, r6, r1, r5
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 80029c8:	2600      	movs	r6, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 80029ca:	4668      	mov	r0, sp
 80029cc:	f004 fdcf 	bl	800756e <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 80029d0:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 80029d2:	f88d 604f 	strb.w	r6, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 80029d6:	f7fe fee9 	bl	80017ac <gc_execute_line>
 80029da:	4605      	mov	r5, r0
    CDC_TxQueue_Process();
 80029dc:	f003 fc78 	bl	80062d0 <CDC_TxQueue_Process>
        currentExecutingLine++;
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	3301      	adds	r3, #1
    if (status == STATUS_OK) {
 80029e4:	b90d      	cbnz	r5, 80029ea <processProgram+0x86>
        currentExecutingLine++;
 80029e6:	6023      	str	r3, [r4, #0]
        lastProgramTime = currentTime;
 80029e8:	e7d6      	b.n	8002998 <processProgram+0x34>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 80029ea:	462a      	mov	r2, r5
 80029ec:	490e      	ldr	r1, [pc, #56]	@ (8002a28 <processProgram+0xc4>)
 80029ee:	480a      	ldr	r0, [pc, #40]	@ (8002a18 <processProgram+0xb4>)
 80029f0:	f004 fd3e 	bl	8007470 <siprintf>
        sendUSBText(outputBuffer);
 80029f4:	4808      	ldr	r0, [pc, #32]	@ (8002a18 <processProgram+0xb4>)
 80029f6:	f7fe ff6f 	bl	80018d8 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80029fa:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80029fe:	4631      	mov	r1, r6
 8002a00:	4805      	ldr	r0, [pc, #20]	@ (8002a18 <processProgram+0xb4>)
 8002a02:	f004 fd9a 	bl	800753a <memset>
        isProgramRunning = false;
 8002a06:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <processProgram+0xb8>)
 8002a08:	701e      	strb	r6, [r3, #0]
 8002a0a:	e7c5      	b.n	8002998 <processProgram+0x34>
 8002a0c:	2000039c 	.word	0x2000039c
 8002a10:	200003a0 	.word	0x200003a0
 8002a14:	0800bd5d 	.word	0x0800bd5d
 8002a18:	2000235c 	.word	0x2000235c
 8002a1c:	20000398 	.word	0x20000398
 8002a20:	200003a4 	.word	0x200003a4
 8002a24:	0800b5d8 	.word	0x0800b5d8
 8002a28:	0800b5f2 	.word	0x0800b5f2

08002a2c <loop>:
    if (isProgramRunning) {
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <loop+0x54>)
void loop(void) {
 8002a2e:	b570      	push	{r4, r5, r6, lr}
    if (isProgramRunning) {
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b10b      	cbz	r3, 8002a38 <loop+0xc>
        processProgram();
 8002a34:	f7ff ff96 	bl	8002964 <processProgram>
    if (usbCommandComplete) {
 8002a38:	4d12      	ldr	r5, [pc, #72]	@ (8002a84 <loop+0x58>)
 8002a3a:	782b      	ldrb	r3, [r5, #0]
 8002a3c:	b173      	cbz	r3, 8002a5c <loop+0x30>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4e11      	ldr	r6, [pc, #68]	@ (8002a88 <loop+0x5c>)
 8002a42:	4912      	ldr	r1, [pc, #72]	@ (8002a8c <loop+0x60>)
 8002a44:	6830      	ldr	r0, [r6, #0]
 8002a46:	4c12      	ldr	r4, [pc, #72]	@ (8002a90 <loop+0x64>)
 8002a48:	4282      	cmp	r2, r0
 8002a4a:	db08      	blt.n	8002a5e <loop+0x32>
        usbBufferIndex = 0;
 8002a4c:	2400      	movs	r4, #0
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002a4e:	2264      	movs	r2, #100	@ 0x64
 8002a50:	4621      	mov	r1, r4
 8002a52:	480e      	ldr	r0, [pc, #56]	@ (8002a8c <loop+0x60>)
        usbBufferIndex = 0;
 8002a54:	6034      	str	r4, [r6, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002a56:	f004 fd70 	bl	800753a <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8002a5a:	702c      	strb	r4, [r5, #0]
}
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8002a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a62:	3b09      	subs	r3, #9
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b17      	cmp	r3, #23
 8002a68:	d805      	bhi.n	8002a76 <loop+0x4a>
 8002a6a:	fa24 f303 	lsr.w	r3, r4, r3
 8002a6e:	07db      	lsls	r3, r3, #31
 8002a70:	d501      	bpl.n	8002a76 <loop+0x4a>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002a72:	3201      	adds	r2, #1
 8002a74:	e7e8      	b.n	8002a48 <loop+0x1c>
            processGcode(usbBuffer);
 8002a76:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <loop+0x60>)
 8002a78:	f7ff fe22 	bl	80026c0 <processGcode>
 8002a7c:	e7e6      	b.n	8002a4c <loop+0x20>
 8002a7e:	bf00      	nop
 8002a80:	20000398 	.word	0x20000398
 8002a84:	200022e4 	.word	0x200022e4
 8002a88:	200022e8 	.word	0x200022e8
 8002a8c:	200022ec 	.word	0x200022ec
 8002a90:	00800013 	.word	0x00800013

08002a94 <HAL_GPIO_EXTI_Callback>:
    //         break;
    //     case GPIO_PIN_14: // Z_MIN_PIN
    //         if (currentZ != 0) endstop_error_handler('Z');
    //         break;
    // }
}
 8002a94:	4770      	bx	lr
	...

08002a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a98:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
    // Detener todos los motores de forma segura
  disableSteppers();
 8002a9c:	f000 f986 	bl	8002dac <disableSteppers>
  
  // Enviar mensaje de error por USB CDC
  CDC_Transmit_Queued((uint8_t*)"ERROR CRITICO DEL SISTEMA\r\n", 27);
 8002aa0:	211b      	movs	r1, #27
 8002aa2:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <Error_Handler+0x30>)
 8002aa4:	f003 fc4a 	bl	800633c <CDC_Transmit_Queued>
  
  // LED de error
  HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4808      	ldr	r0, [pc, #32]	@ (8002acc <Error_Handler+0x34>)
 8002aac:	4611      	mov	r1, r2
 8002aae:	f000 fee1 	bl	8003874 <HAL_GPIO_WritePin>
  while (1)
  {
        // Parpadear LED de error
    HAL_GPIO_TogglePin(GPIOB, LED_ERROR);
 8002ab2:	4c06      	ldr	r4, [pc, #24]	@ (8002acc <Error_Handler+0x34>)
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	f000 fee1 	bl	800387e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8002abc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ac0:	f000 fd88 	bl	80035d4 <HAL_Delay>
  while (1)
 8002ac4:	e7f6      	b.n	8002ab4 <Error_Handler+0x1c>
 8002ac6:	bf00      	nop
 8002ac8:	0800bd80 	.word	0x0800bd80
 8002acc:	40010c00 	.word	0x40010c00

08002ad0 <SystemClock_Config>:
{
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad4:	2214      	movs	r2, #20
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	a80c      	add	r0, sp, #48	@ 0x30
 8002ada:	f004 fd2e 	bl	800753a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ade:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae0:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	eb0d 0002 	add.w	r0, sp, r2
 8002ae8:	f004 fd27 	bl	800753a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aec:	462a      	mov	r2, r5
 8002aee:	2100      	movs	r1, #0
 8002af0:	a801      	add	r0, sp, #4
 8002af2:	f004 fd22 	bl	800753a <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002af6:	2401      	movs	r4, #1
 8002af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002afc:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002afe:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b02:	e9cd 6311 	strd	r6, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b06:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0a:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b0c:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002b0e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b10:	f001 fd6e 	bl	80045f0 <HAL_RCC_OscConfig>
 8002b14:	b108      	cbz	r0, 8002b1a <SystemClock_Config+0x4a>
    Error_Handler();
 8002b16:	f7ff ffbf 	bl	8002a98 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b1a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b1c:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b24:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b26:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	a805      	add	r0, sp, #20
 8002b2e:	f001 ff21 	bl	8004974 <HAL_RCC_ClockConfig>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	d1ef      	bne.n	8002b16 <SystemClock_Config+0x46>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002b36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002b3c:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002b3e:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b40:	f001 ffd4 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d1e6      	bne.n	8002b16 <SystemClock_Config+0x46>
}
 8002b48:	b014      	add	sp, #80	@ 0x50
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}

08002b4c <main>:
{
 8002b4c:	b500      	push	{lr}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8002b50:	f000 fd1c 	bl	800358c <HAL_Init>
  SystemClock_Config();
 8002b54:	f7ff ffbc 	bl	8002ad0 <SystemClock_Config>
    CDC_TxQueue_Init();
 8002b58:	f003 fb7a 	bl	8006250 <CDC_TxQueue_Init>
    setup();
 8002b5c:	f7fe fec6 	bl	80018ec <setup>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);  // Encender
 8002b60:	2201      	movs	r2, #1
 8002b62:	2102      	movs	r1, #2
 8002b64:	483b      	ldr	r0, [pc, #236]	@ (8002c54 <main+0x108>)
 8002b66:	f000 fe85 	bl	8003874 <HAL_GPIO_WritePin>
    CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14); 
 8002b6a:	210e      	movs	r1, #14
 8002b6c:	483a      	ldr	r0, [pc, #232]	@ (8002c58 <main+0x10c>)
 8002b6e:	f003 fbe5 	bl	800633c <CDC_Transmit_Queued>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b72:	2210      	movs	r2, #16
 8002b74:	2100      	movs	r1, #0
 8002b76:	eb0d 0002 	add.w	r0, sp, r2
 8002b7a:	f004 fcde 	bl	800753a <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b7e:	4b37      	ldr	r3, [pc, #220]	@ (8002c5c <main+0x110>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002b80:	f240 31db 	movw	r1, #987	@ 0x3db
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b84:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002b86:	4833      	ldr	r0, [pc, #204]	@ (8002c54 <main+0x108>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b88:	f042 0220 	orr.w	r2, r2, #32
 8002b8c:	619a      	str	r2, [r3, #24]
 8002b8e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b92:	f002 0220 	and.w	r2, r2, #32
 8002b96:	9201      	str	r2, [sp, #4]
 8002b98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	f042 0204 	orr.w	r2, r2, #4
 8002ba2:	619a      	str	r2, [r3, #24]
 8002ba4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	f002 0204 	and.w	r2, r2, #4
 8002bac:	9202      	str	r2, [sp, #8]
 8002bae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	619a      	str	r2, [r3, #24]
 8002bb8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002bba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	9303      	str	r3, [sp, #12]
 8002bc2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002bc4:	f000 fe56 	bl	8003874 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002bce:	4824      	ldr	r0, [pc, #144]	@ (8002c60 <main+0x114>)
 8002bd0:	f000 fe50 	bl	8003874 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	f240 33db 	movw	r3, #987	@ 0x3db
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	481e      	ldr	r0, [pc, #120]	@ (8002c54 <main+0x108>)
 8002bda:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f000 fd6c 	bl	80036c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002be8:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <main+0x118>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	4819      	ldr	r0, [pc, #100]	@ (8002c54 <main+0x108>)
 8002bf0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf8:	f000 fd62 	bl	80036c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002bfc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	4817      	ldr	r0, [pc, #92]	@ (8002c60 <main+0x114>)
 8002c02:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f000 fd58 	bl	80036c0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c10:	4621      	mov	r1, r4
 8002c12:	4622      	mov	r2, r4
 8002c14:	2028      	movs	r0, #40	@ 0x28
 8002c16:	f000 fd01 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c1a:	2028      	movs	r0, #40	@ 0x28
 8002c1c:	f000 fd2e 	bl	800367c <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 9600;
 8002c20:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart2.Instance = USART2;
 8002c24:	4810      	ldr	r0, [pc, #64]	@ (8002c68 <main+0x11c>)
  huart2.Init.BaudRate = 9600;
 8002c26:	4911      	ldr	r1, [pc, #68]	@ (8002c6c <main+0x120>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c28:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8002c2c:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c30:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c32:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c34:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c3a:	f002 f80b 	bl	8004c54 <HAL_UART_Init>
 8002c3e:	b108      	cbz	r0, 8002c44 <main+0xf8>
    Error_Handler();
 8002c40:	f7ff ff2a 	bl	8002a98 <Error_Handler>
  MX_USB_DEVICE_Init();
 8002c44:	f003 fa80 	bl	8006148 <MX_USB_DEVICE_Init>
    CDC_TxQueue_Process();
 8002c48:	f003 fb42 	bl	80062d0 <CDC_TxQueue_Process>
    loop();
 8002c4c:	f7ff feee 	bl	8002a2c <loop>
  while (1)
 8002c50:	e7fa      	b.n	8002c48 <main+0xfc>
 8002c52:	bf00      	nop
 8002c54:	40010c00 	.word	0x40010c00
 8002c58:	0800bd9c 	.word	0x0800bd9c
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	40010800 	.word	0x40010800
 8002c64:	10110000 	.word	0x10110000
 8002c68:	20002714 	.word	0x20002714
 8002c6c:	40004400 	.word	0x40004400

08002c70 <delay_us>:
  * @brief  Función de delay de microsegundos usando DWT
  * @param  us: Cantidad de microsegundos a esperar
  * @retval None
  */
void delay_us(uint32_t us) {
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <delay_us+0x1c>)
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <delay_us+0x20>)
 8002c74:	681b      	ldr	r3, [r3, #0]
    uint32_t start = DWT->CYCCNT;
 8002c76:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <delay_us+0x24>)
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c7c:	4343      	muls	r3, r0
    uint32_t start = DWT->CYCCNT;
 8002c7e:	6848      	ldr	r0, [r1, #4]
    while ((DWT->CYCCNT - start) < cycles);
 8002c80:	684a      	ldr	r2, [r1, #4]
 8002c82:	1a12      	subs	r2, r2, r0
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3fb      	bcc.n	8002c80 <delay_us+0x10>
}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	000f4240 	.word	0x000f4240
 8002c94:	e0001000 	.word	0xe0001000

08002c98 <calculateStepDelay>:
  * @brief  Calcula el delay entre pasos basado en el feed rate
  * @param  feedRate: Velocidad en mm/min
  * @param  distance_mm: Distancia total del movimiento en mm
  * @retval Delay en microsegundos entre pasos
  */
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002c98:	b510      	push	{r4, lr}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002c9a:	2100      	movs	r1, #0
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002c9c:	4604      	mov	r4, r0
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002c9e:	f7fe fa19 	bl	80010d4 <__aeabi_fcmple>
 8002ca2:	b9d8      	cbnz	r0, 8002cdc <calculateStepDelay+0x44>
    
    // Calcular pasos por segundo para el eje dominante
    // feedRate está en mm/min, convertir a mm/s
    float feedRate_mm_per_sec = feedRate / 60.0;
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4912      	ldr	r1, [pc, #72]	@ (8002cf0 <calculateStepDelay+0x58>)
 8002ca8:	f7fe f920 	bl	8000eec <__aeabi_fdiv>
    
    // Usar el eje con mayor resolución (Z) para el cálculo más conservador
    float steps_per_mm = STEPS_PER_MM_Z; // El más alto: 3930 steps/mm
    
    // Calcular pasos por segundo
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002cac:	4911      	ldr	r1, [pc, #68]	@ (8002cf4 <calculateStepDelay+0x5c>)
 8002cae:	f7fe f869 	bl	8000d84 <__aeabi_fmul>
    
    // Calcular delay en microsegundos entre pasos
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 8002cb2:	2100      	movs	r1, #0
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002cb4:	4604      	mov	r4, r0
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 8002cb6:	f7fe fa0d 	bl	80010d4 <__aeabi_fcmple>
 8002cba:	b978      	cbnz	r0, 8002cdc <calculateStepDelay+0x44>
    
    uint32_t delay_us = (uint32_t)(1000000.0 / steps_per_sec);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7fd fbb3 	bl	8000428 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	a108      	add	r1, pc, #32	@ (adr r1, 8002ce8 <calculateStepDelay+0x50>)
 8002cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ccc:	f7fd fd2e 	bl	800072c <__aeabi_ddiv>
 8002cd0:	f7fd feda 	bl	8000a88 <__aeabi_d2uiz>
    
    // Limitar delay mínimo para evitar problemas de timing
    if (delay_us < 200) delay_us = 200; // Mínimo 200us = 5000 pasos/segundo máximo
 8002cd4:	28c8      	cmp	r0, #200	@ 0xc8
 8002cd6:	bf38      	it	cc
 8002cd8:	20c8      	movcc	r0, #200	@ 0xc8
    
    return delay_us;
}
 8002cda:	bd10      	pop	{r4, pc}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002cdc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002ce0:	e7fb      	b.n	8002cda <calculateStepDelay+0x42>
 8002ce2:	bf00      	nop
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	00000000 	.word	0x00000000
 8002cec:	412e8480 	.word	0x412e8480
 8002cf0:	42700000 	.word	0x42700000
 8002cf4:	4575a000 	.word	0x4575a000

08002cf8 <X_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje X
  * @retval None
  */
void X_stepOnce(void) {
 8002cf8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8002cfa:	4c08      	ldr	r4, [pc, #32]	@ (8002d1c <X_stepOnce+0x24>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2140      	movs	r1, #64	@ 0x40
 8002d00:	4620      	mov	r0, r4
 8002d02:	f000 fdb7 	bl	8003874 <HAL_GPIO_WritePin>
    delay_us(2);
 8002d06:	2002      	movs	r0, #2
 8002d08:	f7ff ffb2 	bl	8002c70 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002d0c:	4620      	mov	r0, r4
}
 8002d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2140      	movs	r1, #64	@ 0x40
 8002d16:	f000 bdad 	b.w	8003874 <HAL_GPIO_WritePin>
 8002d1a:	bf00      	nop
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <Y_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Y
  * @retval None
  */
void Y_stepOnce(void) {
 8002d20:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8002d22:	4c09      	ldr	r4, [pc, #36]	@ (8002d48 <Y_stepOnce+0x28>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f000 fda2 	bl	8003874 <HAL_GPIO_WritePin>
    delay_us(2);
 8002d30:	2002      	movs	r0, #2
 8002d32:	f7ff ff9d 	bl	8002c70 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002d36:	4620      	mov	r0, r4
}
 8002d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d42:	f000 bd97 	b.w	8003874 <HAL_GPIO_WritePin>
 8002d46:	bf00      	nop
 8002d48:	40010c00 	.word	0x40010c00

08002d4c <Z_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Z
  * @retval None
  */
void Z_stepOnce(void) {
 8002d4c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8002d4e:	4c09      	ldr	r4, [pc, #36]	@ (8002d74 <Z_stepOnce+0x28>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 fd8c 	bl	8003874 <HAL_GPIO_WritePin>
    delay_us(2);
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7ff ff87 	bl	8002c70 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8002d62:	4620      	mov	r0, r4
}
 8002d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d6e:	f000 bd81 	b.w	8003874 <HAL_GPIO_WritePin>
 8002d72:	bf00      	nop
 8002d74:	40010800 	.word	0x40010800

08002d78 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 8002d78:	b510      	push	{r4, lr}
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 8002d7a:	4c0a      	ldr	r4, [pc, #40]	@ (8002da4 <enableSteppers+0x2c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d84:	f000 fd76 	bl	8003874 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 8002d88:	4620      	mov	r0, r4
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2110      	movs	r1, #16
 8002d8e:	f000 fd71 	bl	8003874 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
}
 8002d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <enableSteppers+0x30>)
 8002d9e:	f000 bd69 	b.w	8003874 <HAL_GPIO_WritePin>
 8002da2:	bf00      	nop
 8002da4:	40010c00 	.word	0x40010c00
 8002da8:	40010800 	.word	0x40010800

08002dac <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 8002dac:	b510      	push	{r4, lr}
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 8002dae:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd8 <disableSteppers+0x2c>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	4620      	mov	r0, r4
 8002db4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002db8:	f000 fd5c 	bl	8003874 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	f000 fd57 	bl	8003874 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
}
 8002dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <disableSteppers+0x30>)
 8002dd2:	f000 bd4f 	b.w	8003874 <HAL_GPIO_WritePin>
 8002dd6:	bf00      	nop
 8002dd8:	40010c00 	.word	0x40010c00
 8002ddc:	40010800 	.word	0x40010800

08002de0 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b087      	sub	sp, #28
 8002de6:	469b      	mov	fp, r3
 8002de8:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8002dec:	460d      	mov	r5, r1
 8002dee:	9305      	str	r3, [sp, #20]
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <moveAxesWithFeedRate+0x250>)
 8002df2:	4601      	mov	r1, r0
 8002df4:	681b      	ldr	r3, [r3, #0]
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 8002df6:	4606      	mov	r6, r0
 8002df8:	4614      	mov	r4, r2
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	f7fe f988 	bl	8001110 <__aeabi_fcmpun>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f040 8105 	bne.w	8003010 <moveAxesWithFeedRate+0x230>
 8002e06:	498b      	ldr	r1, [pc, #556]	@ (8003034 <moveAxesWithFeedRate+0x254>)
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7fd ffbb 	bl	8000d84 <__aeabi_fmul>
 8002e0e:	f7fe f995 	bl	800113c <__aeabi_f2iz>
 8002e12:	9000      	str	r0, [sp, #0]
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8002e14:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <moveAxesWithFeedRate+0x258>)
 8002e16:	4629      	mov	r1, r5
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	9303      	str	r3, [sp, #12]
 8002e1e:	f7fe f977 	bl	8001110 <__aeabi_fcmpun>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f040 80f7 	bne.w	8003016 <moveAxesWithFeedRate+0x236>
 8002e28:	4982      	ldr	r1, [pc, #520]	@ (8003034 <moveAxesWithFeedRate+0x254>)
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f7fd ffaa 	bl	8000d84 <__aeabi_fmul>
 8002e30:	f7fe f984 	bl	800113c <__aeabi_f2iz>
 8002e34:	9001      	str	r0, [sp, #4]
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 8002e36:	4b81      	ldr	r3, [pc, #516]	@ (800303c <moveAxesWithFeedRate+0x25c>)
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f8d3 9000 	ldr.w	r9, [r3]
 8002e40:	f7fe f966 	bl	8001110 <__aeabi_fcmpun>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	f040 80e9 	bne.w	800301c <moveAxesWithFeedRate+0x23c>
 8002e4a:	497d      	ldr	r1, [pc, #500]	@ (8003040 <moveAxesWithFeedRate+0x260>)
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7fd ff99 	bl	8000d84 <__aeabi_fmul>
 8002e52:	f7fe f973 	bl	800113c <__aeabi_f2iz>
 8002e56:	9002      	str	r0, [sp, #8]
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 8002e58:	9b00      	ldr	r3, [sp, #0]
 8002e5a:	9a04      	ldr	r2, [sp, #16]
    int32_t deltaY = targetY - currentY;
    int32_t deltaZ = targetZ - currentZ;
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002e5c:	4631      	mov	r1, r6
    int32_t deltaX = targetX - currentX;
 8002e5e:	1a9f      	subs	r7, r3, r2
    int32_t deltaY = targetY - currentY;
 8002e60:	9b01      	ldr	r3, [sp, #4]
 8002e62:	9a03      	ldr	r2, [sp, #12]
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002e64:	4630      	mov	r0, r6
    int32_t deltaY = targetY - currentY;
 8002e66:	eba3 0802 	sub.w	r8, r3, r2
    int32_t deltaZ = targetZ - currentZ;
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	eba3 0a09 	sub.w	sl, r3, r9
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8002e70:	f7fe f94e 	bl	8001110 <__aeabi_fcmpun>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	f040 80d4 	bne.w	8003022 <moveAxesWithFeedRate+0x242>
 8002e7a:	9804      	ldr	r0, [sp, #16]
 8002e7c:	f7fd ff2e 	bl	8000cdc <__aeabi_i2f>
 8002e80:	496c      	ldr	r1, [pc, #432]	@ (8003034 <moveAxesWithFeedRate+0x254>)
 8002e82:	f7fe f833 	bl	8000eec <__aeabi_fdiv>
 8002e86:	4601      	mov	r1, r0
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f7fd fe71 	bl	8000b70 <__aeabi_fsub>
 8002e8e:	4606      	mov	r6, r0
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8002e90:	4629      	mov	r1, r5
 8002e92:	4628      	mov	r0, r5
 8002e94:	f7fe f93c 	bl	8001110 <__aeabi_fcmpun>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	f040 80c4 	bne.w	8003026 <moveAxesWithFeedRate+0x246>
 8002e9e:	9803      	ldr	r0, [sp, #12]
 8002ea0:	f7fd ff1c 	bl	8000cdc <__aeabi_i2f>
 8002ea4:	4963      	ldr	r1, [pc, #396]	@ (8003034 <moveAxesWithFeedRate+0x254>)
 8002ea6:	f7fe f821 	bl	8000eec <__aeabi_fdiv>
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4628      	mov	r0, r5
 8002eae:	f7fd fe5f 	bl	8000b70 <__aeabi_fsub>
 8002eb2:	4605      	mov	r5, r0
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7fe f92a 	bl	8001110 <__aeabi_fcmpun>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	f040 80b4 	bne.w	800302a <moveAxesWithFeedRate+0x24a>
 8002ec2:	4648      	mov	r0, r9
 8002ec4:	f7fd ff0a 	bl	8000cdc <__aeabi_i2f>
 8002ec8:	495d      	ldr	r1, [pc, #372]	@ (8003040 <moveAxesWithFeedRate+0x260>)
 8002eca:	f7fe f80f 	bl	8000eec <__aeabi_fdiv>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fd fe4d 	bl	8000b70 <__aeabi_fsub>
 8002ed6:	4681      	mov	r9, r0
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7fd ff52 	bl	8000d84 <__aeabi_fmul>
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7fd ff4d 	bl	8000d84 <__aeabi_fmul>
 8002eea:	4601      	mov	r1, r0
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7fd fe41 	bl	8000b74 <__addsf3>
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	4648      	mov	r0, r9
 8002ef8:	f7fd ff44 	bl	8000d84 <__aeabi_fmul>
 8002efc:	4601      	mov	r1, r0
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fd fe38 	bl	8000b74 <__addsf3>
 8002f04:	f7fd fa90 	bl	8000428 <__aeabi_f2d>
 8002f08:	f006 fbb0 	bl	800966c <sqrt>
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002f0c:	9b05      	ldr	r3, [sp, #20]
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002f0e:	4604      	mov	r4, r0
 8002f10:	460d      	mov	r5, r1
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002f12:	b113      	cbz	r3, 8002f1a <moveAxesWithFeedRate+0x13a>
 8002f14:	4b4b      	ldr	r3, [pc, #300]	@ (8003044 <moveAxesWithFeedRate+0x264>)
 8002f16:	f8d3 b000 	ldr.w	fp, [r3]
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003048 <moveAxesWithFeedRate+0x268>)
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	681e      	ldr	r6, [r3, #0]
 8002f20:	4630      	mov	r0, r6
 8002f22:	f7fe f8cd 	bl	80010c0 <__aeabi_fcmplt>
 8002f26:	b900      	cbnz	r0, 8002f2a <moveAxesWithFeedRate+0x14a>
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 8002f28:	465e      	mov	r6, fp
    bool dirX = (deltaX >= 0);
    bool dirY = (deltaY >= 0);
    bool dirZ = (deltaZ >= 0);
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002f2a:	b12f      	cbz	r7, 8002f38 <moveAxesWithFeedRate+0x158>
 8002f2c:	43fa      	mvns	r2, r7
 8002f2e:	2180      	movs	r1, #128	@ 0x80
 8002f30:	4846      	ldr	r0, [pc, #280]	@ (800304c <moveAxesWithFeedRate+0x26c>)
 8002f32:	0fd2      	lsrs	r2, r2, #31
 8002f34:	f000 fc9e 	bl	8003874 <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002f38:	f1b8 0f00 	cmp.w	r8, #0
 8002f3c:	d006      	beq.n	8002f4c <moveAxesWithFeedRate+0x16c>
 8002f3e:	ea6f 0208 	mvn.w	r2, r8
 8002f42:	2108      	movs	r1, #8
 8002f44:	4841      	ldr	r0, [pc, #260]	@ (800304c <moveAxesWithFeedRate+0x26c>)
 8002f46:	0fd2      	lsrs	r2, r2, #31
 8002f48:	f000 fc94 	bl	8003874 <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002f4c:	f1ba 0f00 	cmp.w	sl, #0
 8002f50:	d006      	beq.n	8002f60 <moveAxesWithFeedRate+0x180>
 8002f52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f56:	483e      	ldr	r0, [pc, #248]	@ (8003050 <moveAxesWithFeedRate+0x270>)
 8002f58:	ea4f 72da 	mov.w	r2, sl, lsr #31
 8002f5c:	f000 fc8a 	bl	8003874 <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = (deltaX < 0) ? -deltaX : deltaX;
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	bfb8      	it	lt
 8002f64:	427f      	neglt	r7, r7
    deltaY = (deltaY < 0) ? -deltaY : deltaY;
 8002f66:	f1b8 0f00 	cmp.w	r8, #0
 8002f6a:	bfb8      	it	lt
 8002f6c:	f1c8 0800 	rsblt	r8, r8, #0
    // sendUSBText(outputBuffer);
    // memset(outputBuffer, 0, OUTPUT_BUFFER_SIZE);
    
    // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
    if (deltaY > maxSteps) maxSteps = deltaY;
 8002f70:	4547      	cmp	r7, r8
 8002f72:	463b      	mov	r3, r7
 8002f74:	bfb8      	it	lt
 8002f76:	4643      	movlt	r3, r8
    deltaZ = (deltaZ < 0) ? -deltaZ : deltaZ;
 8002f78:	ea8a 79ea 	eor.w	r9, sl, sl, asr #31
 8002f7c:	eba9 79ea 	sub.w	r9, r9, sl, asr #31
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 8002f80:	454b      	cmp	r3, r9
 8002f82:	bfb8      	it	lt
 8002f84:	464b      	movlt	r3, r9
 8002f86:	469a      	mov	sl, r3
    
    if (maxSteps == 0) return; // No hay movimiento
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03e      	beq.n	800300a <moveAxesWithFeedRate+0x22a>
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7fd fd9a 	bl	8000ac8 <__aeabi_d2f>
 8002f94:	4601      	mov	r1, r0
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002f96:	4630      	mov	r0, r6
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 8002f98:	ea4f 0b6a 	mov.w	fp, sl, asr #1
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002f9c:	f7ff fe7c 	bl	8002c98 <calculateStepDelay>
    int32_t errorY = maxSteps / 2;
    int32_t errorZ = maxSteps / 2;
 8002fa0:	465d      	mov	r5, fp
    int32_t errorY = maxSteps / 2;
 8002fa2:	465c      	mov	r4, fp
    
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 8002fa4:	2600      	movs	r6, #0
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8002fa6:	9004      	str	r0, [sp, #16]
        bool stepX = false, stepY = false, stepZ = false;
        
        // Algoritmo de Bresenham para X
        errorX += deltaX;
 8002fa8:	44bb      	add	fp, r7
        if (errorX >= maxSteps) {
 8002faa:	45da      	cmp	sl, fp
            errorX -= maxSteps;
            stepX = true;
        }
        
        // Algoritmo de Bresenham para Y
        errorY += deltaY;
 8002fac:	4444      	add	r4, r8
            errorY -= maxSteps;
            stepY = true;
        }
        
        // Algoritmo de Bresenham para Z
        errorZ += deltaZ;
 8002fae:	444d      	add	r5, r9
            stepX = true;
 8002fb0:	bfd6      	itet	le
 8002fb2:	2001      	movle	r0, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002fb4:	2000      	movgt	r0, #0
            errorX -= maxSteps;
 8002fb6:	ebab 0b0a 	suble.w	fp, fp, sl
        if (errorY >= maxSteps) {
 8002fba:	45a2      	cmp	sl, r4
            stepY = true;
 8002fbc:	bfd6      	itet	le
 8002fbe:	2101      	movle	r1, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002fc0:	2100      	movgt	r1, #0
            errorY -= maxSteps;
 8002fc2:	eba4 040a 	suble.w	r4, r4, sl
        if (errorZ >= maxSteps) {
 8002fc6:	45aa      	cmp	sl, r5
            errorZ -= maxSteps;
            stepZ = true;
 8002fc8:	bfd6      	itet	le
 8002fca:	2301      	movle	r3, #1
        bool stepX = false, stepY = false, stepZ = false;
 8002fcc:	2300      	movgt	r3, #0
            errorZ -= maxSteps;
 8002fce:	eba5 050a 	suble.w	r5, r5, sl
        bool stepX = false, stepY = false, stepZ = false;
 8002fd2:	9303      	str	r3, [sp, #12]
        }
        
        // Ejecutar pasos simultáneamente
        if (stepX) X_stepOnce();
 8002fd4:	b118      	cbz	r0, 8002fde <moveAxesWithFeedRate+0x1fe>
 8002fd6:	9105      	str	r1, [sp, #20]
 8002fd8:	f7ff fe8e 	bl	8002cf8 <X_stepOnce>
 8002fdc:	9905      	ldr	r1, [sp, #20]
        if (stepY) Y_stepOnce();
 8002fde:	b109      	cbz	r1, 8002fe4 <moveAxesWithFeedRate+0x204>
 8002fe0:	f7ff fe9e 	bl	8002d20 <Y_stepOnce>
        if (stepZ) Z_stepOnce();
 8002fe4:	9b03      	ldr	r3, [sp, #12]
 8002fe6:	b10b      	cbz	r3, 8002fec <moveAxesWithFeedRate+0x20c>
 8002fe8:	f7ff feb0 	bl	8002d4c <Z_stepOnce>
        
        // Delay controlado por feed rate
        delay_us(step_delay);
 8002fec:	9804      	ldr	r0, [sp, #16]
    for (int32_t step = 0; step < maxSteps; step++) {
 8002fee:	3601      	adds	r6, #1
        delay_us(step_delay);
 8002ff0:	f7ff fe3e 	bl	8002c70 <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 8002ff4:	45b2      	cmp	sl, r6
 8002ff6:	d1d7      	bne.n	8002fa8 <moveAxesWithFeedRate+0x1c8>
    }
    
    
    // Actualizar posiciones actuales
    currentX = targetX;
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <moveAxesWithFeedRate+0x250>)
 8002ffa:	9a00      	ldr	r2, [sp, #0]
 8002ffc:	601a      	str	r2, [r3, #0]
    currentY = targetY;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <moveAxesWithFeedRate+0x258>)
 8003000:	9a01      	ldr	r2, [sp, #4]
 8003002:	601a      	str	r2, [r3, #0]
    currentZ = targetZ;
 8003004:	4b0d      	ldr	r3, [pc, #52]	@ (800303c <moveAxesWithFeedRate+0x25c>)
 8003006:	9a02      	ldr	r2, [sp, #8]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	b007      	add	sp, #28
 800300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	e6fe      	b.n	8002e14 <moveAxesWithFeedRate+0x34>
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	e70c      	b.n	8002e36 <moveAxesWithFeedRate+0x56>
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 800301c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003020:	e71a      	b.n	8002e58 <moveAxesWithFeedRate+0x78>
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003022:	2600      	movs	r6, #0
 8003024:	e734      	b.n	8002e90 <moveAxesWithFeedRate+0xb0>
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8003026:	2500      	movs	r5, #0
 8003028:	e744      	b.n	8002eb4 <moveAxesWithFeedRate+0xd4>
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 800302a:	f04f 0900 	mov.w	r9, #0
 800302e:	e753      	b.n	8002ed8 <moveAxesWithFeedRate+0xf8>
 8003030:	20002358 	.word	0x20002358
 8003034:	429e0000 	.word	0x429e0000
 8003038:	20002354 	.word	0x20002354
 800303c:	20002350 	.word	0x20002350
 8003040:	4575a000 	.word	0x4575a000
 8003044:	20000004 	.word	0x20000004
 8003048:	20000000 	.word	0x20000000
 800304c:	40010c00 	.word	0x40010c00
 8003050:	40010800 	.word	0x40010800
 8003054:	00000000 	.word	0x00000000

08003058 <arc_move_r>:
  * @param  x_end, y_end: Coordenadas finales del arco en mm
  * @param  r: Radio del arco en mm
  * @param  clockwise: Dirección del arco (1 = horario, 0 = antihorario)
  * @retval None
  */
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 8003058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305c:	b08b      	sub	sp, #44	@ 0x2c
 800305e:	9308      	str	r3, [sp, #32]
    float x0 = currentX;
 8003060:	4bb3      	ldr	r3, [pc, #716]	@ (8003330 <arc_move_r+0x2d8>)
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 8003062:	4680      	mov	r8, r0
    float x0 = currentX;
 8003064:	6818      	ldr	r0, [r3, #0]
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 8003066:	4616      	mov	r6, r2
 8003068:	460f      	mov	r7, r1
    float x0 = currentX;
 800306a:	f7fd fe37 	bl	8000cdc <__aeabi_i2f>
    float y0 = currentY;
 800306e:	4bb1      	ldr	r3, [pc, #708]	@ (8003334 <arc_move_r+0x2dc>)
    float x0 = currentX;
 8003070:	4605      	mov	r5, r0
    float y0 = currentY;
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f7fd fe32 	bl	8000cdc <__aeabi_i2f>
    float x1 = x_end * STEPS_PER_MM_X;
 8003078:	49af      	ldr	r1, [pc, #700]	@ (8003338 <arc_move_r+0x2e0>)
    float y0 = currentY;
 800307a:	4604      	mov	r4, r0
    float x1 = x_end * STEPS_PER_MM_X;
 800307c:	4640      	mov	r0, r8
 800307e:	f7fd fe81 	bl	8000d84 <__aeabi_fmul>
    float y1 = y_end * STEPS_PER_MM_Y;
 8003082:	49ad      	ldr	r1, [pc, #692]	@ (8003338 <arc_move_r+0x2e0>)
    float x1 = x_end * STEPS_PER_MM_X;
 8003084:	9004      	str	r0, [sp, #16]
    float y1 = y_end * STEPS_PER_MM_Y;
 8003086:	4638      	mov	r0, r7
 8003088:	f7fd fe7c 	bl	8000d84 <__aeabi_fmul>
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 800308c:	49aa      	ldr	r1, [pc, #680]	@ (8003338 <arc_move_r+0x2e0>)
    float y1 = y_end * STEPS_PER_MM_Y;
 800308e:	9006      	str	r0, [sp, #24]
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8003090:	4630      	mov	r0, r6
 8003092:	f7fd fe77 	bl	8000d84 <__aeabi_fmul>

    float dx = x1 - x0;
 8003096:	4629      	mov	r1, r5
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 8003098:	9003      	str	r0, [sp, #12]
    float dx = x1 - x0;
 800309a:	9804      	ldr	r0, [sp, #16]
 800309c:	f7fd fd68 	bl	8000b70 <__aeabi_fsub>
    float dy = y1 - y0;
 80030a0:	4621      	mov	r1, r4
    float dx = x1 - x0;
 80030a2:	4606      	mov	r6, r0
    float dy = y1 - y0;
 80030a4:	9806      	ldr	r0, [sp, #24]
 80030a6:	f7fd fd63 	bl	8000b70 <__aeabi_fsub>
    float d = sqrt(dx * dx + dy * dy);
 80030aa:	4631      	mov	r1, r6
    float dy = y1 - y0;
 80030ac:	4683      	mov	fp, r0
    float d = sqrt(dx * dx + dy * dy);
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7fd fe68 	bl	8000d84 <__aeabi_fmul>
 80030b4:	4659      	mov	r1, fp
 80030b6:	4607      	mov	r7, r0
 80030b8:	4658      	mov	r0, fp
 80030ba:	f7fd fe63 	bl	8000d84 <__aeabi_fmul>
 80030be:	4601      	mov	r1, r0
 80030c0:	4638      	mov	r0, r7
 80030c2:	f7fd fd57 	bl	8000b74 <__addsf3>
 80030c6:	f7fd f9af 	bl	8000428 <__aeabi_f2d>
 80030ca:	f006 facf 	bl	800966c <sqrt>
 80030ce:	f7fd fcfb 	bl	8000ac8 <__aeabi_d2f>
 80030d2:	4607      	mov	r7, r0

    if (d > 2 * fabs(r)) {
 80030d4:	f7fd f9a8 	bl	8000428 <__aeabi_f2d>
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	4680      	mov	r8, r0
 80030dc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80030e0:	4689      	mov	r9, r1
 80030e2:	f7fd f9a1 	bl	8000428 <__aeabi_f2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	f7fd f83f 	bl	800016c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4640      	mov	r0, r8
 80030f4:	4649      	mov	r1, r9
 80030f6:	f7fd fc7f 	bl	80009f8 <__aeabi_dcmpgt>
 80030fa:	b128      	cbz	r0, 8003108 <arc_move_r+0xb0>
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 80030fc:	488f      	ldr	r0, [pc, #572]	@ (800333c <arc_move_r+0x2e4>)
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
        float x = cx + r * cos(angle);
        float y = cy + r * sin(angle);
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
    }
}
 80030fe:	b00b      	add	sp, #44	@ 0x2c
 8003100:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 8003104:	f7fe bbe8 	b.w	80018d8 <sendUSBText>
    float mx = (x0 + x1) / 2;
 8003108:	9904      	ldr	r1, [sp, #16]
 800310a:	4628      	mov	r0, r5
 800310c:	f7fd fd32 	bl	8000b74 <__addsf3>
 8003110:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003114:	f7fd fe36 	bl	8000d84 <__aeabi_fmul>
    float my = (y0 + y1) / 2;
 8003118:	9906      	ldr	r1, [sp, #24]
    float mx = (x0 + x1) / 2;
 800311a:	4681      	mov	r9, r0
    float my = (y0 + y1) / 2;
 800311c:	4620      	mov	r0, r4
 800311e:	f7fd fd29 	bl	8000b74 <__addsf3>
 8003122:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003126:	f7fd fe2d 	bl	8000d84 <__aeabi_fmul>
    float h = sqrt(r * r - (d / 2) * (d / 2));
 800312a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
    float my = (y0 + y1) / 2;
 800312e:	4680      	mov	r8, r0
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8003130:	4638      	mov	r0, r7
 8003132:	f7fd fe27 	bl	8000d84 <__aeabi_fmul>
 8003136:	9903      	ldr	r1, [sp, #12]
 8003138:	9009      	str	r0, [sp, #36]	@ 0x24
 800313a:	4608      	mov	r0, r1
 800313c:	f7fd fe22 	bl	8000d84 <__aeabi_fmul>
 8003140:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003142:	4682      	mov	sl, r0
 8003144:	4608      	mov	r0, r1
 8003146:	f7fd fe1d 	bl	8000d84 <__aeabi_fmul>
 800314a:	4601      	mov	r1, r0
 800314c:	4650      	mov	r0, sl
 800314e:	f7fd fd0f 	bl	8000b70 <__aeabi_fsub>
 8003152:	f7fd f969 	bl	8000428 <__aeabi_f2d>
 8003156:	f006 fa89 	bl	800966c <sqrt>
 800315a:	f7fd fcb5 	bl	8000ac8 <__aeabi_d2f>
    float nx = -dy / d;
 800315e:	4639      	mov	r1, r7
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8003160:	4682      	mov	sl, r0
    float nx = -dy / d;
 8003162:	f10b 4000 	add.w	r0, fp, #2147483648	@ 0x80000000
 8003166:	f7fd fec1 	bl	8000eec <__aeabi_fdiv>
    float ny = dx / d;
 800316a:	4639      	mov	r1, r7
    float nx = -dy / d;
 800316c:	4683      	mov	fp, r0
    float ny = dx / d;
 800316e:	4630      	mov	r0, r6
 8003170:	f7fd febc 	bl	8000eec <__aeabi_fdiv>
    if (clockwise) {
 8003174:	9b08      	ldr	r3, [sp, #32]
    float ny = dx / d;
 8003176:	4606      	mov	r6, r0
        cx = mx - nx * h;
 8003178:	4659      	mov	r1, fp
 800317a:	4650      	mov	r0, sl
    if (clockwise) {
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b6 	beq.w	80032ee <arc_move_r+0x296>
        cx = mx - nx * h;
 8003182:	f7fd fdff 	bl	8000d84 <__aeabi_fmul>
 8003186:	4601      	mov	r1, r0
 8003188:	4648      	mov	r0, r9
 800318a:	f7fd fcf1 	bl	8000b70 <__aeabi_fsub>
        cy = my - ny * h;
 800318e:	4631      	mov	r1, r6
        cx = mx - nx * h;
 8003190:	4681      	mov	r9, r0
        cy = my - ny * h;
 8003192:	4650      	mov	r0, sl
 8003194:	f7fd fdf6 	bl	8000d84 <__aeabi_fmul>
 8003198:	4601      	mov	r1, r0
 800319a:	4640      	mov	r0, r8
 800319c:	f7fd fce8 	bl	8000b70 <__aeabi_fsub>
        cy = my + ny * h;
 80031a0:	4680      	mov	r8, r0
    float start_angle = atan2(y0 - cy, x0 - cx);
 80031a2:	4649      	mov	r1, r9
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7fd fce3 	bl	8000b70 <__aeabi_fsub>
 80031aa:	f7fd f93d 	bl	8000428 <__aeabi_f2d>
 80031ae:	4606      	mov	r6, r0
 80031b0:	460f      	mov	r7, r1
 80031b2:	4620      	mov	r0, r4
 80031b4:	4641      	mov	r1, r8
 80031b6:	f7fd fcdb 	bl	8000b70 <__aeabi_fsub>
 80031ba:	f7fd f935 	bl	8000428 <__aeabi_f2d>
 80031be:	4632      	mov	r2, r6
 80031c0:	463b      	mov	r3, r7
 80031c2:	f006 fa51 	bl	8009668 <atan2>
 80031c6:	f7fd fc7f 	bl	8000ac8 <__aeabi_d2f>
    float end_angle = atan2(y1 - cy, x1 - cx);
 80031ca:	4649      	mov	r1, r9
    float start_angle = atan2(y0 - cy, x0 - cx);
 80031cc:	4683      	mov	fp, r0
    float end_angle = atan2(y1 - cy, x1 - cx);
 80031ce:	9804      	ldr	r0, [sp, #16]
 80031d0:	f7fd fcce 	bl	8000b70 <__aeabi_fsub>
 80031d4:	f7fd f928 	bl	8000428 <__aeabi_f2d>
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	9806      	ldr	r0, [sp, #24]
 80031de:	4641      	mov	r1, r8
 80031e0:	f7fd fcc6 	bl	8000b70 <__aeabi_fsub>
 80031e4:	f7fd f920 	bl	8000428 <__aeabi_f2d>
 80031e8:	4622      	mov	r2, r4
 80031ea:	462b      	mov	r3, r5
 80031ec:	f006 fa3c 	bl	8009668 <atan2>
 80031f0:	f7fd fc6a 	bl	8000ac8 <__aeabi_d2f>
    float total_angle = end_angle - start_angle;
 80031f4:	4659      	mov	r1, fp
 80031f6:	f7fd fcbb 	bl	8000b70 <__aeabi_fsub>
    if (clockwise && total_angle > 0) {
 80031fa:	9b08      	ldr	r3, [sp, #32]
    float total_angle = end_angle - start_angle;
 80031fc:	4604      	mov	r4, r0
    if (clockwise && total_angle > 0) {
 80031fe:	2100      	movs	r1, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8082 	beq.w	800330a <arc_move_r+0x2b2>
 8003206:	f7fd ff79 	bl	80010fc <__aeabi_fcmpgt>
 800320a:	b150      	cbz	r0, 8003222 <arc_move_r+0x1ca>
        total_angle -= 2 * PI;
 800320c:	4620      	mov	r0, r4
 800320e:	f7fd f90b 	bl	8000428 <__aeabi_f2d>
 8003212:	a345      	add	r3, pc, #276	@ (adr r3, 8003328 <arc_move_r+0x2d0>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fc ffa6 	bl	8000168 <__aeabi_dsub>
        total_angle += 2 * PI;
 800321c:	f7fd fc54 	bl	8000ac8 <__aeabi_d2f>
 8003220:	4604      	mov	r4, r0
    for (int i = 1; i <= SEGMENTS; i++) {
 8003222:	2501      	movs	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003224:	f8df a110 	ldr.w	sl, [pc, #272]	@ 8003338 <arc_move_r+0x2e0>
        float x = cx + r * cos(angle);
 8003228:	9803      	ldr	r0, [sp, #12]
 800322a:	f7fd f8fd 	bl	8000428 <__aeabi_f2d>
 800322e:	e9cd 0104 	strd	r0, r1, [sp, #16]
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
 8003232:	4628      	mov	r0, r5
 8003234:	f7fd fd52 	bl	8000cdc <__aeabi_i2f>
 8003238:	4941      	ldr	r1, [pc, #260]	@ (8003340 <arc_move_r+0x2e8>)
 800323a:	f7fd fe57 	bl	8000eec <__aeabi_fdiv>
 800323e:	4621      	mov	r1, r4
 8003240:	f7fd fda0 	bl	8000d84 <__aeabi_fmul>
 8003244:	4659      	mov	r1, fp
 8003246:	f7fd fc95 	bl	8000b74 <__addsf3>
        float x = cx + r * cos(angle);
 800324a:	f7fd f8ed 	bl	8000428 <__aeabi_f2d>
 800324e:	4606      	mov	r6, r0
 8003250:	460f      	mov	r7, r1
 8003252:	f006 fa2f 	bl	80096b4 <cos>
 8003256:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float y = cy + r * sin(angle);
 800325a:	4630      	mov	r0, r6
 800325c:	4639      	mov	r1, r7
 800325e:	f006 fa6f 	bl	8009740 <sin>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <arc_move_r+0x2ec>)
        float y = cy + r * sin(angle);
 8003264:	4606      	mov	r6, r0
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f640 735a 	movw	r3, #3930	@ 0xf5a
 800326c:	fb90 f0f3 	sdiv	r0, r0, r3
        float y = cy + r * sin(angle);
 8003270:	460f      	mov	r7, r1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003272:	f7fd fd33 	bl	8000cdc <__aeabi_i2f>
        float y = cy + r * sin(angle);
 8003276:	4632      	mov	r2, r6
 8003278:	463b      	mov	r3, r7
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800327a:	9008      	str	r0, [sp, #32]
        float y = cy + r * sin(angle);
 800327c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003280:	f7fd f92a 	bl	80004d8 <__aeabi_dmul>
 8003284:	4606      	mov	r6, r0
 8003286:	4640      	mov	r0, r8
 8003288:	460f      	mov	r7, r1
 800328a:	f7fd f8cd 	bl	8000428 <__aeabi_f2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4630      	mov	r0, r6
 8003294:	4639      	mov	r1, r7
 8003296:	f7fc ff69 	bl	800016c <__adddf3>
 800329a:	f7fd fc15 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800329e:	4651      	mov	r1, sl
 80032a0:	f7fd fe24 	bl	8000eec <__aeabi_fdiv>
        float x = cx + r * cos(angle);
 80032a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80032a8:	9009      	str	r0, [sp, #36]	@ 0x24
        float x = cx + r * cos(angle);
 80032aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032ae:	f7fd f913 	bl	80004d8 <__aeabi_dmul>
 80032b2:	4606      	mov	r6, r0
 80032b4:	4648      	mov	r0, r9
 80032b6:	460f      	mov	r7, r1
 80032b8:	f7fd f8b6 	bl	8000428 <__aeabi_f2d>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4630      	mov	r0, r6
 80032c2:	4639      	mov	r1, r7
 80032c4:	f7fc ff52 	bl	800016c <__adddf3>
 80032c8:	f7fd fbfe 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80032cc:	4651      	mov	r1, sl
 80032ce:	f7fd fe0d 	bl	8000eec <__aeabi_fdiv>
 80032d2:	2301      	movs	r3, #1
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <arc_move_r+0x2f0>)
 80032d8:	9a08      	ldr	r2, [sp, #32]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
    for (int i = 1; i <= SEGMENTS; i++) {
 80032de:	3501      	adds	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80032e0:	f7ff fd7e 	bl	8002de0 <moveAxesWithFeedRate>
    for (int i = 1; i <= SEGMENTS; i++) {
 80032e4:	2d33      	cmp	r5, #51	@ 0x33
 80032e6:	d19f      	bne.n	8003228 <arc_move_r+0x1d0>
}
 80032e8:	b00b      	add	sp, #44	@ 0x2c
 80032ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cx = mx + nx * h;
 80032ee:	f7fd fd49 	bl	8000d84 <__aeabi_fmul>
 80032f2:	4649      	mov	r1, r9
 80032f4:	f7fd fc3e 	bl	8000b74 <__addsf3>
        cy = my + ny * h;
 80032f8:	4631      	mov	r1, r6
        cx = mx + nx * h;
 80032fa:	4681      	mov	r9, r0
        cy = my + ny * h;
 80032fc:	4650      	mov	r0, sl
 80032fe:	f7fd fd41 	bl	8000d84 <__aeabi_fmul>
 8003302:	4641      	mov	r1, r8
 8003304:	f7fd fc36 	bl	8000b74 <__addsf3>
 8003308:	e74a      	b.n	80031a0 <arc_move_r+0x148>
    } else if (!clockwise && total_angle < 0) {
 800330a:	f7fd fed9 	bl	80010c0 <__aeabi_fcmplt>
 800330e:	2800      	cmp	r0, #0
 8003310:	d087      	beq.n	8003222 <arc_move_r+0x1ca>
        total_angle += 2 * PI;
 8003312:	4620      	mov	r0, r4
 8003314:	f7fd f888 	bl	8000428 <__aeabi_f2d>
 8003318:	a303      	add	r3, pc, #12	@ (adr r3, 8003328 <arc_move_r+0x2d0>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fc ff25 	bl	800016c <__adddf3>
 8003322:	e77b      	b.n	800321c <arc_move_r+0x1c4>
 8003324:	f3af 8000 	nop.w
 8003328:	54442d18 	.word	0x54442d18
 800332c:	401921fb 	.word	0x401921fb
 8003330:	20002358 	.word	0x20002358
 8003334:	20002354 	.word	0x20002354
 8003338:	429e0000 	.word	0x429e0000
 800333c:	0800bdab 	.word	0x0800bdab
 8003340:	42480000 	.word	0x42480000
 8003344:	20002350 	.word	0x20002350
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <HAL_MspInit+0x3c>)
{
 800334e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	619a      	str	r2, [r3, #24]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	f002 0201 	and.w	r2, r2, #1
 800335e:	9200      	str	r2, [sp, #0]
 8003360:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003368:	61da      	str	r2, [r3, #28]
 800336a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800336c:	4a07      	ldr	r2, [pc, #28]	@ (800338c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003376:	6853      	ldr	r3, [r2, #4]
 8003378:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800337c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003382:	b002      	add	sp, #8
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000

08003390 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003390:	b510      	push	{r4, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	2210      	movs	r2, #16
 8003398:	2100      	movs	r1, #0
 800339a:	a802      	add	r0, sp, #8
 800339c:	f004 f8cd 	bl	800753a <memset>
  if(huart->Instance==USART2)
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <HAL_UART_MspInit+0x6c>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d126      	bne.n	80033f6 <HAL_UART_MspInit+0x66>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033a8:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80033ac:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	4814      	ldr	r0, [pc, #80]	@ (8003400 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80033b4:	61da      	str	r2, [r3, #28]
 80033b6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ba:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80033be:	9200      	str	r2, [sp, #0]
 80033c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	f042 0204 	orr.w	r2, r2, #4
 80033c8:	619a      	str	r2, [r3, #24]
 80033ca:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033cc:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f000 f96e 	bl	80036c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033e4:	2108      	movs	r1, #8
 80033e6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e8:	4805      	ldr	r0, [pc, #20]	@ (8003400 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ea:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f000 f965 	bl	80036c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80033f6:	b006      	add	sp, #24
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	40004400 	.word	0x40004400
 8003400:	40010800 	.word	0x40010800

08003404 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003404:	e7fe      	b.n	8003404 <NMI_Handler>

08003406 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003406:	e7fe      	b.n	8003406 <HardFault_Handler>

08003408 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <MemManage_Handler>

0800340a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <BusFault_Handler>

0800340c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800340c:	e7fe      	b.n	800340c <UsageFault_Handler>

0800340e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340e:	4770      	bx	lr

08003410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003410:	4770      	bx	lr

08003412 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003412:	4770      	bx	lr

08003414 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003414:	f000 b8cc 	b.w	80035b0 <HAL_IncTick>

08003418 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003418:	4801      	ldr	r0, [pc, #4]	@ (8003420 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800341a:	f000 bad5 	b.w	80039c8 <HAL_PCD_IRQHandler>
 800341e:	bf00      	nop
 8003420:	200045c8 	.word	0x200045c8

08003424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003426:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800342a:	f000 fa31 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800342e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003432:	f000 fa2d 	bl	8003890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800343a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800343e:	f000 ba27 	b.w	8003890 <HAL_GPIO_EXTI_IRQHandler>

08003442 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003442:	2001      	movs	r0, #1
 8003444:	4770      	bx	lr

08003446 <_kill>:

int _kill(int pid, int sig)
{
 8003446:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003448:	f004 f8ea 	bl	8007620 <__errno>
 800344c:	2316      	movs	r3, #22
 800344e:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003450:	f04f 30ff 	mov.w	r0, #4294967295
 8003454:	bd08      	pop	{r3, pc}

08003456 <_exit>:

void _exit (int status)
{
 8003456:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003458:	f004 f8e2 	bl	8007620 <__errno>
 800345c:	2316      	movs	r3, #22
 800345e:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003460:	e7fe      	b.n	8003460 <_exit+0xa>

08003462 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	460d      	mov	r5, r1
 8003466:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003468:	460e      	mov	r6, r1
 800346a:	1b73      	subs	r3, r6, r5
 800346c:	429c      	cmp	r4, r3
 800346e:	dc01      	bgt.n	8003474 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003470:	4620      	mov	r0, r4
 8003472:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003474:	f3af 8000 	nop.w
 8003478:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	e7f5      	b.n	800346a <_read+0x8>

0800347e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	460d      	mov	r5, r1
 8003482:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003484:	460e      	mov	r6, r1
 8003486:	1b73      	subs	r3, r6, r5
 8003488:	429c      	cmp	r4, r3
 800348a:	dc01      	bgt.n	8003490 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003490:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003494:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	e7f5      	b.n	8003486 <_write+0x8>

0800349a <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800349a:	f04f 30ff 	mov.w	r0, #4294967295
 800349e:	4770      	bx	lr

080034a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80034a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80034a4:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80034a6:	604b      	str	r3, [r1, #4]
}
 80034a8:	4770      	bx	lr

080034aa <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80034aa:	2001      	movs	r0, #1
 80034ac:	4770      	bx	lr

080034ae <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80034ae:	2000      	movs	r0, #0
 80034b0:	4770      	bx	lr
	...

080034b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b4:	4a0b      	ldr	r2, [pc, #44]	@ (80034e4 <_sbrk+0x30>)
{
 80034b6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80034b8:	6811      	ldr	r1, [r2, #0]
{
 80034ba:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80034bc:	b909      	cbnz	r1, 80034c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80034be:	490a      	ldr	r1, [pc, #40]	@ (80034e8 <_sbrk+0x34>)
 80034c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c2:	6810      	ldr	r0, [r2, #0]
 80034c4:	4909      	ldr	r1, [pc, #36]	@ (80034ec <_sbrk+0x38>)
 80034c6:	4c0a      	ldr	r4, [pc, #40]	@ (80034f0 <_sbrk+0x3c>)
 80034c8:	4403      	add	r3, r0
 80034ca:	1b09      	subs	r1, r1, r4
 80034cc:	428b      	cmp	r3, r1
 80034ce:	d906      	bls.n	80034de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80034d0:	f004 f8a6 	bl	8007620 <__errno>
 80034d4:	230c      	movs	r3, #12
 80034d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80034dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80034de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80034e0:	e7fc      	b.n	80034dc <_sbrk+0x28>
 80034e2:	bf00      	nop
 80034e4:	2000275c 	.word	0x2000275c
 80034e8:	200049f0 	.word	0x200049f0
 80034ec:	20005000 	.word	0x20005000
 80034f0:	00000400 	.word	0x00000400

080034f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f4:	4770      	bx	lr
	...

080034f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f8:	f7ff fffc 	bl	80034f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034fc:	480b      	ldr	r0, [pc, #44]	@ (800352c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034fe:	490c      	ldr	r1, [pc, #48]	@ (8003530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003500:	4a0c      	ldr	r2, [pc, #48]	@ (8003534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003504:	e002      	b.n	800350c <LoopCopyDataInit>

08003506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350a:	3304      	adds	r3, #4

0800350c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800350c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003510:	d3f9      	bcc.n	8003506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003512:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003514:	4c09      	ldr	r4, [pc, #36]	@ (800353c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003518:	e001      	b.n	800351e <LoopFillZerobss>

0800351a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800351c:	3204      	adds	r2, #4

0800351e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003520:	d3fb      	bcc.n	800351a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003522:	f004 f883 	bl	800762c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003526:	f7ff fb11 	bl	8002b4c <main>
  bx lr
 800352a:	4770      	bx	lr
  ldr r0, =_sdata
 800352c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003530:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003534:	0800c478 	.word	0x0800c478
  ldr r2, =_sbss
 8003538:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800353c:	200049ec 	.word	0x200049ec

08003540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003540:	e7fe      	b.n	8003540 <ADC1_2_IRQHandler>
	...

08003544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003546:	4b0e      	ldr	r3, [pc, #56]	@ (8003580 <HAL_InitTick+0x3c>)
{
 8003548:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003550:	fbb3 f3f2 	udiv	r3, r3, r2
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_InitTick+0x40>)
 8003556:	6810      	ldr	r0, [r2, #0]
 8003558:	fbb0 f0f3 	udiv	r0, r0, r3
 800355c:	f000 f89c 	bl	8003698 <HAL_SYSTICK_Config>
 8003560:	4604      	mov	r4, r0
 8003562:	b958      	cbnz	r0, 800357c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003564:	2d0f      	cmp	r5, #15
 8003566:	d809      	bhi.n	800357c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003568:	4602      	mov	r2, r0
 800356a:	4629      	mov	r1, r5
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f000 f854 	bl	800361c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003574:	4620      	mov	r0, r4
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <HAL_InitTick+0x44>)
 8003578:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800357a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	e7fc      	b.n	800357a <HAL_InitTick+0x36>
 8003580:	20000010 	.word	0x20000010
 8003584:	2000000c 	.word	0x2000000c
 8003588:	20000014 	.word	0x20000014

0800358c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358c:	4a07      	ldr	r2, [pc, #28]	@ (80035ac <HAL_Init+0x20>)
{
 800358e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003590:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003592:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800359a:	f000 f82d 	bl	80035f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800359e:	200f      	movs	r0, #15
 80035a0:	f7ff ffd0 	bl	8003544 <HAL_InitTick>
  HAL_MspInit();
 80035a4:	f7ff fed2 	bl	800334c <HAL_MspInit>
}
 80035a8:	2000      	movs	r0, #0
 80035aa:	bd08      	pop	{r3, pc}
 80035ac:	40022000 	.word	0x40022000

080035b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80035b0:	4a03      	ldr	r2, [pc, #12]	@ (80035c0 <HAL_IncTick+0x10>)
 80035b2:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <HAL_IncTick+0x14>)
 80035b4:	6811      	ldr	r1, [r2, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	440b      	add	r3, r1
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20002760 	.word	0x20002760
 80035c4:	20000010 	.word	0x20000010

080035c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035c8:	4b01      	ldr	r3, [pc, #4]	@ (80035d0 <HAL_GetTick+0x8>)
 80035ca:	6818      	ldr	r0, [r3, #0]
}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20002760 	.word	0x20002760

080035d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff fff6 	bl	80035c8 <HAL_GetTick>
 80035dc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035de:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80035e0:	bf1e      	ittt	ne
 80035e2:	4b04      	ldrne	r3, [pc, #16]	@ (80035f4 <HAL_Delay+0x20>)
 80035e4:	781b      	ldrbne	r3, [r3, #0]
 80035e6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035e8:	f7ff ffee 	bl	80035c8 <HAL_GetTick>
 80035ec:	1b43      	subs	r3, r0, r5
 80035ee:	42a3      	cmp	r3, r4
 80035f0:	d3fa      	bcc.n	80035e8 <HAL_Delay+0x14>
  {
  }
}
 80035f2:	bd38      	pop	{r3, r4, r5, pc}
 80035f4:	20000010 	.word	0x20000010

080035f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f8:	4907      	ldr	r1, [pc, #28]	@ (8003618 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035fa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035fc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003602:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003606:	0412      	lsls	r2, r2, #16
 8003608:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800360a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800360c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003614:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003616:	4770      	bx	lr
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361e:	b530      	push	{r4, r5, lr}
 8003620:	68dc      	ldr	r4, [r3, #12]
 8003622:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003626:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800362c:	2b04      	cmp	r3, #4
 800362e:	bf28      	it	cs
 8003630:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003632:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003638:	bf94      	ite	ls
 800363a:	2400      	movls	r4, #0
 800363c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363e:	fa05 f303 	lsl.w	r3, r5, r3
 8003642:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003646:	40a5      	lsls	r5, r4
 8003648:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800364e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	bfac      	ite	ge
 8003656:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	4a07      	ldrlt	r2, [pc, #28]	@ (8003678 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003660:	b2db      	uxtb	r3, r3
 8003662:	bfab      	itete	ge
 8003664:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003668:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003672:	bd30      	pop	{r4, r5, pc}
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	e000ed14 	.word	0xe000ed14

0800367c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800367c:	2800      	cmp	r0, #0
 800367e:	db07      	blt.n	8003690 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003680:	2301      	movs	r3, #1
 8003682:	0941      	lsrs	r1, r0, #5
 8003684:	4a03      	ldr	r2, [pc, #12]	@ (8003694 <HAL_NVIC_EnableIRQ+0x18>)
 8003686:	f000 001f 	and.w	r0, r0, #31
 800368a:	4083      	lsls	r3, r0
 800368c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003698:	3801      	subs	r0, #1
 800369a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800369e:	d20b      	bcs.n	80036b8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	21f0      	movs	r1, #240	@ 0xf0
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036b8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036c4:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036c6:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 80036ca:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036cc:	f8df c184 	ldr.w	ip, [pc, #388]	@ 8003854 <HAL_GPIO_Init+0x194>
 80036d0:	4b61      	ldr	r3, [pc, #388]	@ (8003858 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036d2:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d6:	680a      	ldr	r2, [r1, #0]
 80036d8:	fa32 f506 	lsrs.w	r5, r2, r6
 80036dc:	d102      	bne.n	80036e4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80036de:	b003      	add	sp, #12
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80036e4:	2501      	movs	r5, #1
 80036e6:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ea:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80036ee:	ea37 0202 	bics.w	r2, r7, r2
 80036f2:	d176      	bne.n	80037e2 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80036f4:	684a      	ldr	r2, [r1, #4]
 80036f6:	2a03      	cmp	r2, #3
 80036f8:	d807      	bhi.n	800370a <HAL_GPIO_Init+0x4a>
 80036fa:	3a01      	subs	r2, #1
 80036fc:	2a02      	cmp	r2, #2
 80036fe:	f200 8083 	bhi.w	8003808 <HAL_GPIO_Init+0x148>
 8003702:	e8df f002 	tbb	[pc, r2]
 8003706:	9691      	.short	0x9691
 8003708:	9c          	.byte	0x9c
 8003709:	00          	.byte	0x00
 800370a:	2a12      	cmp	r2, #18
 800370c:	f000 8094 	beq.w	8003838 <HAL_GPIO_Init+0x178>
 8003710:	d869      	bhi.n	80037e6 <HAL_GPIO_Init+0x126>
 8003712:	2a11      	cmp	r2, #17
 8003714:	f000 808a 	beq.w	800382c <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003718:	2dff      	cmp	r5, #255	@ 0xff
 800371a:	bf94      	ite	ls
 800371c:	4681      	movls	r9, r0
 800371e:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003720:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003724:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003728:	bf88      	it	hi
 800372a:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800372c:	fa0e fa02 	lsl.w	sl, lr, r2
 8003730:	ea27 070a 	bic.w	r7, r7, sl
 8003734:	fa04 f202 	lsl.w	r2, r4, r2
 8003738:	4317      	orrs	r7, r2
 800373a:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800373e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8003742:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8003746:	d04c      	beq.n	80037e2 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003748:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800374c:	f026 0703 	bic.w	r7, r6, #3
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	f8cc 2018 	str.w	r2, [ip, #24]
 8003758:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800375c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003760:	f002 0201 	and.w	r2, r2, #1
 8003764:	9201      	str	r2, [sp, #4]
 8003766:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800376a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800376e:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003770:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003774:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003776:	fa0e fb0a 	lsl.w	fp, lr, sl
 800377a:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800377e:	4a37      	ldr	r2, [pc, #220]	@ (800385c <HAL_GPIO_Init+0x19c>)
 8003780:	4290      	cmp	r0, r2
 8003782:	d060      	beq.n	8003846 <HAL_GPIO_Init+0x186>
 8003784:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003788:	4290      	cmp	r0, r2
 800378a:	d05e      	beq.n	800384a <HAL_GPIO_Init+0x18a>
 800378c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003790:	4290      	cmp	r0, r2
 8003792:	d05c      	beq.n	800384e <HAL_GPIO_Init+0x18e>
 8003794:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003798:	4290      	cmp	r0, r2
 800379a:	bf14      	ite	ne
 800379c:	2204      	movne	r2, #4
 800379e:	2203      	moveq	r2, #3
 80037a0:	fa02 f20a 	lsl.w	r2, r2, sl
 80037a4:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80037a8:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80037aa:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ac:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b0:	bf14      	ite	ne
 80037b2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037b4:	43aa      	biceq	r2, r5
 80037b6:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80037b8:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ba:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80037be:	bf14      	ite	ne
 80037c0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037c2:	43aa      	biceq	r2, r5
 80037c4:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80037c6:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c8:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80037cc:	bf14      	ite	ne
 80037ce:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037d0:	43aa      	biceq	r2, r5
 80037d2:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80037d4:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037d6:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80037da:	bf14      	ite	ne
 80037dc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037de:	43aa      	biceq	r2, r5
 80037e0:	601a      	str	r2, [r3, #0]
	position++;
 80037e2:	3601      	adds	r6, #1
 80037e4:	e777      	b.n	80036d6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80037e6:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8003860 <HAL_GPIO_Init+0x1a0>
 80037ea:	454a      	cmp	r2, r9
 80037ec:	d00c      	beq.n	8003808 <HAL_GPIO_Init+0x148>
 80037ee:	d814      	bhi.n	800381a <HAL_GPIO_Init+0x15a>
 80037f0:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80037f4:	454a      	cmp	r2, r9
 80037f6:	d007      	beq.n	8003808 <HAL_GPIO_Init+0x148>
 80037f8:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 80037fc:	454a      	cmp	r2, r9
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_Init+0x148>
 8003800:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8003804:	454a      	cmp	r2, r9
 8003806:	d187      	bne.n	8003718 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003808:	688a      	ldr	r2, [r1, #8]
 800380a:	b1d2      	cbz	r2, 8003842 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800380c:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800380e:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8003812:	bf0c      	ite	eq
 8003814:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8003816:	6147      	strne	r7, [r0, #20]
 8003818:	e77e      	b.n	8003718 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800381a:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 8003864 <HAL_GPIO_Init+0x1a4>
 800381e:	454a      	cmp	r2, r9
 8003820:	d0f2      	beq.n	8003808 <HAL_GPIO_Init+0x148>
 8003822:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8003826:	e7ed      	b.n	8003804 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003828:	68cc      	ldr	r4, [r1, #12]
          break;
 800382a:	e775      	b.n	8003718 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800382c:	68cc      	ldr	r4, [r1, #12]
 800382e:	3404      	adds	r4, #4
          break;
 8003830:	e772      	b.n	8003718 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003832:	68cc      	ldr	r4, [r1, #12]
 8003834:	3408      	adds	r4, #8
          break;
 8003836:	e76f      	b.n	8003718 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003838:	68cc      	ldr	r4, [r1, #12]
 800383a:	340c      	adds	r4, #12
          break;
 800383c:	e76c      	b.n	8003718 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800383e:	2400      	movs	r4, #0
 8003840:	e76a      	b.n	8003718 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003842:	2404      	movs	r4, #4
 8003844:	e768      	b.n	8003718 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003846:	2200      	movs	r2, #0
 8003848:	e7aa      	b.n	80037a0 <HAL_GPIO_Init+0xe0>
 800384a:	2201      	movs	r2, #1
 800384c:	e7a8      	b.n	80037a0 <HAL_GPIO_Init+0xe0>
 800384e:	2202      	movs	r2, #2
 8003850:	e7a6      	b.n	80037a0 <HAL_GPIO_Init+0xe0>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	40010400 	.word	0x40010400
 800385c:	40010800 	.word	0x40010800
 8003860:	10220000 	.word	0x10220000
 8003864:	10310000 	.word	0x10310000

08003868 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003868:	6883      	ldr	r3, [r0, #8]
 800386a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800386c:	bf14      	ite	ne
 800386e:	2001      	movne	r0, #1
 8003870:	2000      	moveq	r0, #0
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003874:	b10a      	cbz	r2, 800387a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003876:	6101      	str	r1, [r0, #16]
  }
}
 8003878:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800387a:	0409      	lsls	r1, r1, #16
 800387c:	e7fb      	b.n	8003876 <HAL_GPIO_WritePin+0x2>

0800387e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800387e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003880:	ea01 0203 	and.w	r2, r1, r3
 8003884:	ea21 0103 	bic.w	r1, r1, r3
 8003888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800388c:	6101      	str	r1, [r0, #16]
}
 800388e:	4770      	bx	lr

08003890 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003892:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003894:	6951      	ldr	r1, [r2, #20]
 8003896:	4201      	tst	r1, r0
 8003898:	d002      	beq.n	80038a0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800389c:	f7ff f8fa 	bl	8002a94 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a0:	bd08      	pop	{r3, pc}
 80038a2:	bf00      	nop
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038aa:	4604      	mov	r4, r0
 80038ac:	b1e0      	cbz	r0, 80038e8 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ae:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 80038b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80038b6:	b91b      	cbnz	r3, 80038c0 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038b8:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038bc:	f002 fdce 	bl	800645c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80038c6:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038c8:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 80038ca:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 80038cc:	f855 0b04 	ldr.w	r0, [r5], #4
 80038d0:	f001 f9ff 	bl	8004cd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038d4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f001 f9ea 	bl	8004cb2 <USB_CoreInit>
 80038de:	4601      	mov	r1, r0
 80038e0:	b128      	cbz	r0, 80038ee <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e2:	2302      	movs	r3, #2
 80038e4:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80038e8:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 80038ea:	4628      	mov	r0, r5
 80038ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	f001 f9f9 	bl	8004ce6 <USB_SetCurrentMode>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1f4      	bne.n	80038e2 <HAL_PCD_Init+0x3a>
 80038f8:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 80038fa:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fc:	7926      	ldrb	r6, [r4, #4]
 80038fe:	f104 0310 	add.w	r3, r4, #16
 8003902:	b2c1      	uxtb	r1, r0
 8003904:	428e      	cmp	r6, r1
 8003906:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800390a:	d818      	bhi.n	800393e <HAL_PCD_Init+0x96>
 800390c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800390e:	460a      	mov	r2, r1
 8003910:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8003914:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003916:	4286      	cmp	r6, r0
 8003918:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800391c:	d81b      	bhi.n	8003956 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800391e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	f001 f9e1 	bl	8004cea <USB_DevInit>
 8003928:	4605      	mov	r5, r0
 800392a:	2800      	cmp	r0, #0
 800392c:	d1d9      	bne.n	80038e2 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 800392e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003930:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8003932:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8003934:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003938:	f001 fc8c 	bl	8005254 <USB_DevDisconnect>
  return HAL_OK;
 800393c:	e7d5      	b.n	80038ea <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 800393e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8003942:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8003946:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800394a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 800394e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003952:	3001      	adds	r0, #1
 8003954:	e7d5      	b.n	8003902 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003956:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 800395a:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 800395e:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003962:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003966:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396a:	3101      	adds	r1, #1
 800396c:	e7d2      	b.n	8003914 <HAL_PCD_Init+0x6c>

0800396e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800396e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8003970:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8003974:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003976:	2b01      	cmp	r3, #1
 8003978:	d010      	beq.n	800399c <HAL_PCD_Start+0x2e>
 800397a:	2501      	movs	r5, #1
 800397c:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003980:	6800      	ldr	r0, [r0, #0]
 8003982:	f001 f99d 	bl	8004cc0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003986:	4629      	mov	r1, r5
 8003988:	4620      	mov	r0, r4
 800398a:	f002 fe6e 	bl	800666a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800398e:	6820      	ldr	r0, [r4, #0]
 8003990:	f001 fc5e 	bl	8005250 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003994:	2000      	movs	r0, #0
 8003996:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 800399a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800399c:	2002      	movs	r0, #2
 800399e:	e7fc      	b.n	800399a <HAL_PCD_Start+0x2c>

080039a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80039a2:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 80039a6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80039a8:	2a01      	cmp	r2, #1
 80039aa:	d00a      	beq.n	80039c2 <HAL_PCD_SetAddress+0x22>
 80039ac:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80039ae:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 80039b0:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039b4:	6800      	ldr	r0, [r0, #0]
 80039b6:	f001 fc45 	bl	8005244 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80039c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80039c2:	2002      	movs	r0, #2
 80039c4:	e7fc      	b.n	80039c0 <HAL_PCD_SetAddress+0x20>
	...

080039c8 <HAL_PCD_IRQHandler>:
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	4604      	mov	r4, r0
 80039ce:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80039d0:	6800      	ldr	r0, [r0, #0]
 80039d2:	f001 fc41 	bl	8005258 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80039d6:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 80039da:	f000 844f 	beq.w	800427c <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 80039de:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039e0:	4ec6      	ldr	r6, [pc, #792]	@ (8003cfc <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80039e8:	041f      	lsls	r7, r3, #16
 80039ea:	d402      	bmi.n	80039f2 <HAL_PCD_IRQHandler+0x2a>
}
 80039ec:	b005      	add	sp, #20
 80039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80039f2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 80039f6:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 80039fa:	b299      	uxth	r1, r3
    if (epindex == 0U)
 80039fc:	f040 80c0 	bne.w	8003b80 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a00:	f011 0110 	ands.w	r1, r1, #16
 8003a04:	d126      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a06:	8803      	ldrh	r3, [r0, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	4033      	ands	r3, r6
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a10:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a12:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003a16:	7c22      	ldrb	r2, [r4, #16]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a22:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8003a26:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8003a2c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a30:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8003a32:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a34:	f002 fd41 	bl	80064ba <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a38:	7b63      	ldrb	r3, [r4, #13]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0d1      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
 8003a3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a40:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d1cd      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a46:	7b63      	ldrb	r3, [r4, #13]
 8003a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4c:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003a50:	7362      	strb	r2, [r4, #13]
 8003a52:	e7c6      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a54:	8807      	ldrh	r7, [r0, #0]
 8003a56:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a58:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8003a5c:	d021      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003a62:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a70:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a74:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003a78:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a7c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a80:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8003a84:	f001 fe33 	bl	80056ee <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a88:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003a8a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a8c:	8813      	ldrh	r3, [r2, #0]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	051b      	lsls	r3, r3, #20
 8003a94:	0d1b      	lsrs	r3, r3, #20
 8003a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a9a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003a9c:	f002 fcfe 	bl	800649c <HAL_PCD_SetupStageCallback>
 8003aa0:	e79f      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003aa2:	0419      	lsls	r1, r3, #16
 8003aa4:	d59d      	bpl.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003aa6:	8803      	ldrh	r3, [r0, #0]
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aac:	051b      	lsls	r3, r3, #20
 8003aae:	0d1b      	lsrs	r3, r3, #20
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab4:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ab6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003aba:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ac4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ac8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8003acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad0:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ad4:	b18b      	cbz	r3, 8003afa <HAL_PCD_IRQHandler+0x132>
 8003ad6:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8003ada:	b171      	cbz	r1, 8003afa <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003adc:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8003ae0:	f001 fe05 	bl	80056ee <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003ae4:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8003ae8:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003aec:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8003aee:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003af0:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003af2:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003af6:	f002 fcd7 	bl	80064a8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	880a      	ldrh	r2, [r1, #0]
 8003afe:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003b00:	0512      	lsls	r2, r2, #20
 8003b02:	f53f af6e 	bmi.w	80039e2 <HAL_PCD_IRQHandler+0x1a>
 8003b06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003b0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b0e:	f43f af68 	beq.w	80039e2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b12:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8003b16:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	5a83      	ldrh	r3, [r0, r2]
 8003b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b22:	5283      	strh	r3, [r0, r2]
 8003b24:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8003b28:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b2a:	d91d      	bls.n	8003b68 <HAL_PCD_IRQHandler+0x1a0>
 8003b2c:	095f      	lsrs	r7, r3, #5
 8003b2e:	06db      	lsls	r3, r3, #27
 8003b30:	5a83      	ldrh	r3, [r0, r2]
 8003b32:	bf08      	it	eq
 8003b34:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b4a:	880b      	ldrh	r3, [r1, #0]
 8003b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b64:	800b      	strh	r3, [r1, #0]
 8003b66:	e73c      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b68:	b90b      	cbnz	r3, 8003b6e <HAL_PCD_IRQHandler+0x1a6>
 8003b6a:	5a83      	ldrh	r3, [r0, r2]
 8003b6c:	e7e7      	b.n	8003b3e <HAL_PCD_IRQHandler+0x176>
 8003b6e:	085f      	lsrs	r7, r3, #1
 8003b70:	07db      	lsls	r3, r3, #31
 8003b72:	5a83      	ldrh	r3, [r0, r2]
 8003b74:	bf48      	it	mi
 8003b76:	3701      	addmi	r7, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003b7e:	e7e2      	b.n	8003b46 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b80:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b84:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b86:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b8a:	f140 80f6 	bpl.w	8003d7a <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b8e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003b92:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b9a:	051b      	lsls	r3, r3, #20
 8003b9c:	0d1b      	lsrs	r3, r3, #20
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8003ba6:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8003baa:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8003bae:	b9bb      	cbnz	r3, 8003be0 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bb0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003bb4:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3306      	adds	r3, #6
 8003bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bc0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003bc4:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8003bc8:	f1b9 0f00 	cmp.w	r9, #0
 8003bcc:	f000 80ba 	beq.w	8003d44 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bd6:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8003bda:	f001 fd88 	bl	80056ee <USB_ReadPMA>
 8003bde:	e0b1      	b.n	8003d44 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8003be0:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be4:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f040 8089 	bne.w	8003d00 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bee:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8003bf2:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8003bf6:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bfa:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8003bfe:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c02:	44d9      	add	r9, fp
 8003c04:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c08:	d03c      	beq.n	8003c84 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c0a:	f109 0902 	add.w	r9, r9, #2
 8003c0e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8003c12:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8003c16:	4599      	cmp	r9, r3
 8003c18:	d913      	bls.n	8003c42 <HAL_PCD_IRQHandler+0x27a>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003c40:	e005      	b.n	8003c4e <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8003c42:	eba3 0309 	sub.w	r3, r3, r9
 8003c46:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0e8      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c4e:	f1bc 0f00 	cmp.w	ip, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003c6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003c70:	f1b9 0f00 	cmp.w	r9, #0
 8003c74:	d066      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c76:	2128      	movs	r1, #40	@ 0x28
 8003c78:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8003c82:	e7a8      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c84:	f109 0906 	add.w	r9, r9, #6
 8003c88:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8003c8c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8003c90:	4599      	cmp	r9, r3
 8003c92:	d912      	bls.n	8003cba <HAL_PCD_IRQHandler+0x2f2>
 8003c94:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003cb8:	e005      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8003cba:	eba3 0309 	sub.w	r3, r3, r9
 8003cbe:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0e8      	beq.n	8003c98 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003cc6:	f1bc 0f00 	cmp.w	ip, #0
 8003cca:	d10d      	bne.n	8003ce8 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ccc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ce4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8003ce8:	f1b9 0f00 	cmp.w	r9, #0
 8003cec:	d02a      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cee:	2128      	movs	r1, #40	@ 0x28
 8003cf0:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8003cfa:	e76c      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x20e>
 8003cfc:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d18:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d1c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8003d20:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d2a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003d2e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003d30:	d054      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d32:	3202      	adds	r2, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003d3a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	d19b      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8003d44:	fb05 f107 	mul.w	r1, r5, r7
 8003d48:	1863      	adds	r3, r4, r1
 8003d4a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8003d4e:	444a      	add	r2, r9
 8003d50:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8003d54:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8003d58:	444a      	add	r2, r9
 8003d5a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d5e:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8003d62:	b11a      	cbz	r2, 8003d6c <HAL_PCD_IRQHandler+0x3a4>
 8003d64:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003d68:	4599      	cmp	r9, r3
 8003d6a:	d241      	bcs.n	8003df0 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d6c:	fb05 4307 	mla	r3, r5, r7, r4
 8003d70:	4620      	mov	r0, r4
 8003d72:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8003d76:	f002 fb97 	bl	80064a8 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d7a:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d7e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d80:	f43f ae2f 	beq.w	80039e2 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d84:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003d88:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4033      	ands	r3, r6
 8003d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d94:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003d98:	eb04 030c 	add.w	r3, r4, ip
 8003d9c:	7cda      	ldrb	r2, [r3, #19]
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	d156      	bne.n	8003e50 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8003da2:	2100      	movs	r1, #0
 8003da4:	fb07 5205 	mla	r2, r7, r5, r5
 8003da8:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8003daa:	7f1a      	ldrb	r2, [r3, #28]
 8003dac:	b392      	cbz	r2, 8003e14 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dae:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db2:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003db4:	d036      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003db6:	bb12      	cbnz	r2, 8003dfe <HAL_PCD_IRQHandler+0x436>
 8003db8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003dbc:	7c1b      	ldrb	r3, [r3, #16]
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc6:	4410      	add	r0, r2
 8003dc8:	5a1a      	ldrh	r2, [r3, r0]
 8003dca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003dce:	521a      	strh	r2, [r3, r0]
 8003dd0:	5a1a      	ldrh	r2, [r3, r0]
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dd8:	521a      	strh	r2, [r3, r0]
 8003dda:	e01b      	b.n	8003e14 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ddc:	3206      	adds	r2, #6
 8003dde:	4413      	add	r3, r2
 8003de0:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8003de4:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8003de8:	f1b9 0f00 	cmp.w	r9, #0
 8003dec:	d0aa      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x37c>
 8003dee:	e781      	b.n	8003cf4 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8003df0:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	4421      	add	r1, r4
 8003df8:	f001 fa44 	bl	8005284 <USB_EPStartXfer>
 8003dfc:	e7bd      	b.n	8003d7a <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dfe:	2a01      	cmp	r2, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x44c>
 8003e02:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003e06:	7c1b      	ldrb	r3, [r3, #16]
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4410      	add	r0, r2
 8003e12:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e14:	2328      	movs	r3, #40	@ 0x28
 8003e16:	fb03 4307 	mla	r3, r3, r7, r4
 8003e1a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f002 fb4c 	bl	80064ba <HAL_PCD_DataInStageCallback>
 8003e22:	e5de      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e24:	b93a      	cbnz	r2, 8003e36 <HAL_PCD_IRQHandler+0x46e>
 8003e26:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003e2a:	7c1b      	ldrb	r3, [r3, #16]
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003e34:	e7c7      	b.n	8003dc6 <HAL_PCD_IRQHandler+0x3fe>
 8003e36:	2a01      	cmp	r2, #1
 8003e38:	d1ec      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x44c>
 8003e3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003e3e:	7c1b      	ldrb	r3, [r3, #16]
 8003e40:	b292      	uxth	r2, r2
 8003e42:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4410      	add	r0, r2
 8003e4a:	f823 8000 	strh.w	r8, [r3, r0]
 8003e4e:	e7e1      	b.n	8003e14 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e50:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e52:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8003e56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e58:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003e5c:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e60:	d11b      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e62:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8003e66:	b2bf      	uxth	r7, r7
 8003e68:	4457      	add	r7, sl
 8003e6a:	3702      	adds	r7, #2
 8003e6c:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003e70:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003e74:	4297      	cmp	r7, r2
 8003e76:	d302      	bcc.n	8003e7e <HAL_PCD_IRQHandler+0x4b6>
 8003e78:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8003e7c:	e7ce      	b.n	8003e1c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8003e7e:	1bd2      	subs	r2, r2, r7
 8003e80:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8003e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8003e84:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8003e88:	443a      	add	r2, r7
 8003e8a:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8003e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e8e:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8003e90:	443a      	add	r2, r7
 8003e92:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e94:	f001 f9f6 	bl	8005284 <USB_EPStartXfer>
 8003e98:	e5a3      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e9a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e9e:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ea2:	fa1f fc8c 	uxth.w	ip, ip
 8003ea6:	44d4      	add	ip, sl
 8003ea8:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eac:	f000 80f4 	beq.w	8004098 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eb0:	f10c 0c02 	add.w	ip, ip, #2
 8003eb4:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003eb8:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8003ebc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003ec0:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003ec2:	bf2c      	ite	cs
 8003ec4:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8003ec6:	eba2 020c 	subcc.w	r2, r2, ip
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	d15b      	bne.n	8003f88 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ed0:	2328      	movs	r3, #40	@ 0x28
 8003ed2:	fb03 4307 	mla	r3, r3, r7, r4
 8003ed6:	7c5b      	ldrb	r3, [r3, #17]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d141      	bne.n	8003f60 <HAL_PCD_IRQHandler+0x598>
 8003edc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003ee0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	010b      	lsls	r3, r1, #4
 8003ee8:	4494      	add	ip, r2
 8003eea:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003eee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ef2:	f82c 2003 	strh.w	r2, [ip, r3]
 8003ef6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003efa:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003efe:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f02:	b292      	uxth	r2, r2
 8003f04:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f08:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003f0c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003f10:	b292      	uxth	r2, r2
 8003f12:	4410      	add	r0, r2
 8003f14:	5ac2      	ldrh	r2, [r0, r3]
 8003f16:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003f1a:	52c2      	strh	r2, [r0, r3]
 8003f1c:	5ac2      	ldrh	r2, [r0, r3]
 8003f1e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003f22:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f26:	b292      	uxth	r2, r2
 8003f28:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f002 fac5 	bl	80064ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f30:	f1b8 0f00 	cmp.w	r8, #0
 8003f34:	f000 80f4 	beq.w	8004120 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f38:	2328      	movs	r3, #40	@ 0x28
 8003f3a:	fb03 4307 	mla	r3, r3, r7, r4
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	7c19      	ldrb	r1, [r3, #16]
 8003f42:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003f5e:	e0df      	b.n	8004120 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d1e2      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x562>
 8003f64:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8003f68:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003f6c:	fa1f fe8e 	uxth.w	lr, lr
 8003f70:	44f4      	add	ip, lr
 8003f72:	010b      	lsls	r3, r1, #4
 8003f74:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f78:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003f7c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003f80:	fa1f fc8c 	uxth.w	ip, ip
 8003f84:	4460      	add	r0, ip
 8003f86:	e7cf      	b.n	8003f28 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f88:	f1b8 0f00 	cmp.w	r8, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f8e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8003f92:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003f96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f9a:	0412      	lsls	r2, r2, #16
 8003f9c:	0c12      	lsrs	r2, r2, #16
 8003f9e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8003fa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fa6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003faa:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8003fae:	fb08 4807 	mla	r8, r8, r7, r4
 8003fb2:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003fb6:	2a01      	cmp	r2, #1
 8003fb8:	f040 80b2 	bne.w	8004120 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003fbc:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8003fc0:	eb02 0e0c 	add.w	lr, r2, ip
 8003fc4:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fca:	4462      	add	r2, ip
 8003fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fce:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8003fd2:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d335      	bcc.n	8004046 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003fe0:	2328      	movs	r3, #40	@ 0x28
 8003fe2:	fb03 4307 	mla	r3, r3, r7, r4
 8003fe6:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003fea:	b293      	uxth	r3, r2
 8003fec:	f1bc 0f00 	cmp.w	ip, #0
 8003ff0:	d145      	bne.n	800407e <HAL_PCD_IRQHandler+0x6b6>
 8003ff2:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003ff6:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8003ffa:	fa1f f888 	uxth.w	r8, r8
 8003ffe:	44c4      	add	ip, r8
 8004000:	0109      	lsls	r1, r1, #4
 8004002:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004006:	2a3e      	cmp	r2, #62	@ 0x3e
 8004008:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800400c:	f82c 8001 	strh.w	r8, [ip, r1]
 8004010:	d925      	bls.n	800405e <HAL_PCD_IRQHandler+0x696>
 8004012:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004016:	06d2      	lsls	r2, r2, #27
 8004018:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800401c:	bf08      	it	eq
 800401e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8004022:	b292      	uxth	r2, r2
 8004024:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004028:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800402c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004030:	b292      	uxth	r2, r2
 8004032:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004036:	2228      	movs	r2, #40	@ 0x28
 8004038:	fb02 4207 	mla	r2, r2, r7, r4
 800403c:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800403e:	4671      	mov	r1, lr
 8004040:	f001 f910 	bl	8005264 <USB_WritePMA>
 8004044:	e06c      	b.n	8004120 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8004046:	b91b      	cbnz	r3, 8004050 <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8004048:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800404a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800404e:	e7c7      	b.n	8003fe0 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8004050:	2200      	movs	r2, #0
 8004052:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8004056:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 800405a:	461a      	mov	r2, r3
 800405c:	e7c0      	b.n	8003fe0 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800405e:	b912      	cbnz	r2, 8004066 <HAL_PCD_IRQHandler+0x69e>
 8004060:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004064:	e7e0      	b.n	8004028 <HAL_PCD_IRQHandler+0x660>
 8004066:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800406a:	07d2      	lsls	r2, r2, #31
 800406c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004070:	bf48      	it	mi
 8004072:	f108 0801 	addmi.w	r8, r8, #1
 8004076:	b292      	uxth	r2, r2
 8004078:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800407c:	e7d8      	b.n	8004030 <HAL_PCD_IRQHandler+0x668>
 800407e:	f1bc 0f01 	cmp.w	ip, #1
 8004082:	d1d8      	bne.n	8004036 <HAL_PCD_IRQHandler+0x66e>
 8004084:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004088:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800408c:	fa1f fc8c 	uxth.w	ip, ip
 8004090:	4462      	add	r2, ip
 8004092:	0109      	lsls	r1, r1, #4
 8004094:	5253      	strh	r3, [r2, r1]
 8004096:	e7ce      	b.n	8004036 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004098:	f10c 0c06 	add.w	ip, ip, #6
 800409c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80040a0:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 80040a4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80040a8:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 80040aa:	bf8c      	ite	hi
 80040ac:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 80040ae:	eba2 020c 	subls.w	r2, r2, ip
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	d15d      	bne.n	8004174 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040b8:	2328      	movs	r3, #40	@ 0x28
 80040ba:	fb03 4307 	mla	r3, r3, r7, r4
 80040be:	7c5b      	ldrb	r3, [r3, #17]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d143      	bne.n	800414c <HAL_PCD_IRQHandler+0x784>
 80040c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80040c8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80040cc:	b292      	uxth	r2, r2
 80040ce:	010b      	lsls	r3, r1, #4
 80040d0:	4494      	add	ip, r2
 80040d2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80040d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80040da:	f82c 2003 	strh.w	r2, [ip, r3]
 80040de:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80040e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80040e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80040ea:	b292      	uxth	r2, r2
 80040ec:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80040f4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80040f8:	b292      	uxth	r2, r2
 80040fa:	4410      	add	r0, r2
 80040fc:	5ac2      	ldrh	r2, [r0, r3]
 80040fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004102:	52c2      	strh	r2, [r0, r3]
 8004104:	5ac2      	ldrh	r2, [r0, r3]
 8004106:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800410a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800410e:	b292      	uxth	r2, r2
 8004110:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004112:	4620      	mov	r0, r4
 8004114:	f002 f9d1 	bl	80064ba <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004118:	f1b8 0f00 	cmp.w	r8, #0
 800411c:	f43f af0c 	beq.w	8003f38 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004120:	2328      	movs	r3, #40	@ 0x28
 8004122:	fb03 4307 	mla	r3, r3, r7, r4
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	7c19      	ldrb	r1, [r3, #16]
 800412a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800412e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800413e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800414a:	e44a      	b.n	80039e2 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414c:	2b01      	cmp	r3, #1
 800414e:	d1e0      	bne.n	8004112 <HAL_PCD_IRQHandler+0x74a>
 8004150:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004154:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004158:	fa1f fe8e 	uxth.w	lr, lr
 800415c:	44f4      	add	ip, lr
 800415e:	010b      	lsls	r3, r1, #4
 8004160:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004164:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004168:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800416c:	fa1f fc8c 	uxth.w	ip, ip
 8004170:	4460      	add	r0, ip
 8004172:	e7cd      	b.n	8004110 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004174:	f1b8 0f00 	cmp.w	r8, #0
 8004178:	d10d      	bne.n	8004196 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800417a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800417e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004182:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004186:	0412      	lsls	r2, r2, #16
 8004188:	0c12      	lsrs	r2, r2, #16
 800418a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800418e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004192:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004196:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800419a:	fb08 4807 	mla	r8, r8, r7, r4
 800419e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	d1bc      	bne.n	8004120 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80041a6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80041aa:	eb02 0e0c 	add.w	lr, r2, ip
 80041ae:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	4462      	add	r2, ip
 80041b6:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80041b8:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80041bc:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d332      	bcc.n	800422a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041ca:	2328      	movs	r3, #40	@ 0x28
 80041cc:	fb03 4307 	mla	r3, r3, r7, r4
 80041d0:	f893 c011 	ldrb.w	ip, [r3, #17]
 80041d4:	b293      	uxth	r3, r2
 80041d6:	f1bc 0f00 	cmp.w	ip, #0
 80041da:	d142      	bne.n	8004262 <HAL_PCD_IRQHandler+0x89a>
 80041dc:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80041e0:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80041e4:	fa1f f888 	uxth.w	r8, r8
 80041e8:	44c4      	add	ip, r8
 80041ea:	0109      	lsls	r1, r1, #4
 80041ec:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80041f0:	2a3e      	cmp	r2, #62	@ 0x3e
 80041f2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80041f6:	f82c 8001 	strh.w	r8, [ip, r1]
 80041fa:	d922      	bls.n	8004242 <HAL_PCD_IRQHandler+0x87a>
 80041fc:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004200:	06d2      	lsls	r2, r2, #27
 8004202:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004206:	bf08      	it	eq
 8004208:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800420c:	b292      	uxth	r2, r2
 800420e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004212:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004216:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800421a:	b292      	uxth	r2, r2
 800421c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004220:	2228      	movs	r2, #40	@ 0x28
 8004222:	fb02 4207 	mla	r2, r2, r7, r4
 8004226:	8b52      	ldrh	r2, [r2, #26]
 8004228:	e709      	b.n	800403e <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800422a:	b91b      	cbnz	r3, 8004234 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 800422c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800422e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8004232:	e7ca      	b.n	80041ca <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8004234:	2200      	movs	r2, #0
 8004236:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800423a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 800423e:	461a      	mov	r2, r3
 8004240:	e7c3      	b.n	80041ca <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004242:	b912      	cbnz	r2, 800424a <HAL_PCD_IRQHandler+0x882>
 8004244:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004248:	e7e3      	b.n	8004212 <HAL_PCD_IRQHandler+0x84a>
 800424a:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800424e:	07d2      	lsls	r2, r2, #31
 8004250:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004254:	bf48      	it	mi
 8004256:	f108 0801 	addmi.w	r8, r8, #1
 800425a:	b292      	uxth	r2, r2
 800425c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004260:	e7db      	b.n	800421a <HAL_PCD_IRQHandler+0x852>
 8004262:	f1bc 0f01 	cmp.w	ip, #1
 8004266:	d1db      	bne.n	8004220 <HAL_PCD_IRQHandler+0x858>
 8004268:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800426c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8004270:	b292      	uxth	r2, r2
 8004272:	4494      	add	ip, r2
 8004274:	010a      	lsls	r2, r1, #4
 8004276:	f82c 3002 	strh.w	r3, [ip, r2]
 800427a:	e7d1      	b.n	8004220 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800427c:	0546      	lsls	r6, r0, #21
 800427e:	d512      	bpl.n	80042a6 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004280:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004282:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004284:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004288:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004294:	f002 f91d 	bl	80064d2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004298:	4629      	mov	r1, r5
 800429a:	4620      	mov	r0, r4
}
 800429c:	b005      	add	sp, #20
 800429e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042a2:	f7ff bb7d 	b.w	80039a0 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80042a6:	0441      	lsls	r1, r0, #17
 80042a8:	d50a      	bpl.n	80042c0 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80042b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042b4:	041b      	lsls	r3, r3, #16
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80042bc:	f7ff bb96 	b.w	80039ec <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80042c0:	0482      	lsls	r2, r0, #18
 80042c2:	d505      	bpl.n	80042d0 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80042ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ce:	e7f1      	b.n	80042b4 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80042d0:	04c3      	lsls	r3, r0, #19
 80042d2:	d519      	bpl.n	8004308 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80042d4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80042d6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80042d8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80042e8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80042ec:	f023 0308 	bic.w	r3, r3, #8
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80042f8:	f002 f90e 	bl	8006518 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80042fc:	6822      	ldr	r2, [r4, #0]
 80042fe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004306:	e7d5      	b.n	80042b4 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004308:	0507      	lsls	r7, r0, #20
 800430a:	d548      	bpl.n	800439e <HAL_PCD_IRQHandler+0x9d6>
 800430c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	4606      	mov	r6, r0
 8004312:	4619      	mov	r1, r3
 8004314:	461a      	mov	r2, r3
 8004316:	f103 0520 	add.w	r5, r3, #32
 800431a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800431e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004320:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8004324:	d1f9      	bne.n	800431a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004326:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800432a:	b292      	uxth	r2, r2
 800432c:	f042 0201 	orr.w	r2, r2, #1
 8004330:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004334:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	0412      	lsls	r2, r2, #16
 800433e:	0c12      	lsrs	r2, r2, #16
 8004340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004344:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004348:	0556      	lsls	r6, r2, #21
 800434a:	d5fb      	bpl.n	8004344 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800434c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8004350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004354:	0412      	lsls	r2, r2, #16
 8004356:	0c12      	lsrs	r2, r2, #16
 8004358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800435c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004360:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8004364:	428d      	cmp	r5, r1
 8004366:	d1f9      	bne.n	800435c <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004368:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800436c:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800436e:	b292      	uxth	r2, r2
 8004370:	f042 0208 	orr.w	r2, r2, #8
 8004374:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004378:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800437c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004380:	0412      	lsls	r2, r2, #16
 8004382:	0c12      	lsrs	r2, r2, #16
 8004384:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004388:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800438c:	b292      	uxth	r2, r2
 800438e:	f042 0204 	orr.w	r2, r2, #4
 8004392:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004396:	f002 f8af 	bl	80064f8 <HAL_PCD_SuspendCallback>
    return;
 800439a:	f7ff bb27 	b.w	80039ec <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800439e:	0582      	lsls	r2, r0, #22
 80043a0:	d50d      	bpl.n	80043be <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043a2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80043a4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80043a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80043aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80043b6:	f002 f888 	bl	80064ca <HAL_PCD_SOFCallback>
    return;
 80043ba:	f7ff bb17 	b.w	80039ec <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80043be:	05c3      	lsls	r3, r0, #23
 80043c0:	f57f ab14 	bpl.w	80039ec <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80043ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ce:	e771      	b.n	80042b4 <HAL_PCD_IRQHandler+0x8ec>

080043d0 <HAL_PCD_EP_Open>:
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	2428      	movs	r4, #40	@ 0x28
 80043d4:	4605      	mov	r5, r0
 80043d6:	f001 0007 	and.w	r0, r1, #7
 80043da:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80043dc:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	bf14      	ite	ne
 80043e2:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80043ea:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80043ee:	bf15      	itete	ne
 80043f0:	2401      	movne	r4, #1
    ep->is_in = 0U;
 80043f2:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 80043f4:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 80043f6:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	bf14      	ite	ne
 80043fc:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043fe:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8004400:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8004402:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8004404:	bf08      	it	eq
 8004406:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004408:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800440a:	bf08      	it	eq
 800440c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800440e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004410:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8004414:	2b01      	cmp	r3, #1
 8004416:	d009      	beq.n	800442c <HAL_PCD_EP_Open+0x5c>
 8004418:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800441a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800441c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004420:	f000 fc74 	bl	8004d0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004424:	2000      	movs	r0, #0
 8004426:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800442a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800442c:	2002      	movs	r0, #2
 800442e:	e7fc      	b.n	800442a <HAL_PCD_EP_Open+0x5a>

08004430 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004430:	2328      	movs	r3, #40	@ 0x28
 8004432:	f001 0207 	and.w	r2, r1, #7
 8004436:	4353      	muls	r3, r2
 8004438:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004440:	bf18      	it	ne
 8004442:	f103 0110 	addne.w	r1, r3, #16
 8004446:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004448:	bf0b      	itete	eq
 800444a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 800444e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004450:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004452:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004454:	bf0a      	itet	eq
 8004456:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8004458:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800445a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800445e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004460:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8004464:	2b01      	cmp	r3, #1
 8004466:	d009      	beq.n	800447c <HAL_PCD_EP_Close+0x4c>
 8004468:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800446a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800446c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004470:	f000 fdac 	bl	8004fcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004474:	2000      	movs	r0, #0
 8004476:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800447a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800447c:	2002      	movs	r0, #2
 800447e:	e7fc      	b.n	800447a <HAL_PCD_EP_Close+0x4a>

08004480 <HAL_PCD_EP_Receive>:
{
 8004480:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8004482:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8004484:	2600      	movs	r6, #0
 8004486:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800448a:	434c      	muls	r4, r1
 800448c:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800448e:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004492:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004496:	4401      	add	r1, r0
  ep->xfer_len = len;
 8004498:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 800449c:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80044a0:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044a4:	6800      	ldr	r0, [r0, #0]
 80044a6:	f000 feed 	bl	8005284 <USB_EPStartXfer>
}
 80044aa:	4630      	mov	r0, r6
 80044ac:	bd70      	pop	{r4, r5, r6, pc}

080044ae <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044ae:	2328      	movs	r3, #40	@ 0x28
 80044b0:	f001 0107 	and.w	r1, r1, #7
 80044b4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80044b8:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80044bc:	4770      	bx	lr

080044be <HAL_PCD_EP_Transmit>:
{
 80044be:	b570      	push	{r4, r5, r6, lr}
 80044c0:	2528      	movs	r5, #40	@ 0x28
 80044c2:	f001 0107 	and.w	r1, r1, #7
 80044c6:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80044c8:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80044ca:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80044cc:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80044d0:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044d8:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80044da:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80044de:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80044e0:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80044e2:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e4:	6800      	ldr	r0, [r0, #0]
 80044e6:	f000 fecd 	bl	8005284 <USB_EPStartXfer>
}
 80044ea:	4630      	mov	r0, r6
 80044ec:	bd70      	pop	{r4, r5, r6, pc}

080044ee <HAL_PCD_EP_SetStall>:
{
 80044ee:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044f0:	7903      	ldrb	r3, [r0, #4]
 80044f2:	f001 0507 	and.w	r5, r1, #7
 80044f6:	42ab      	cmp	r3, r5
{
 80044f8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044fa:	d32a      	bcc.n	8004552 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80044fc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8004500:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8004504:	d01c      	beq.n	8004540 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8004506:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004508:	436b      	muls	r3, r5
 800450a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800450e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004510:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004512:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8004514:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004516:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004518:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800451a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800451e:	429a      	cmp	r2, r3
 8004520:	d019      	beq.n	8004556 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004522:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004524:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004528:	f000 fe23 	bl	8005172 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800452c:	b925      	cbnz	r5, 8004538 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8004534:	f000 fe94 	bl	8005260 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004538:	2000      	movs	r0, #0
 800453a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800453e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004540:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004542:	434b      	muls	r3, r1
 8004544:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8004548:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800454a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800454c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8004550:	e7e0      	b.n	8004514 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
 8004554:	e7f3      	b.n	800453e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8004556:	2002      	movs	r0, #2
 8004558:	e7f1      	b.n	800453e <HAL_PCD_EP_SetStall+0x50>

0800455a <HAL_PCD_EP_ClrStall>:
{
 800455a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800455c:	7902      	ldrb	r2, [r0, #4]
 800455e:	f001 030f 	and.w	r3, r1, #15
 8004562:	429a      	cmp	r2, r3
{
 8004564:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004566:	d326      	bcc.n	80045b6 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8004568:	2328      	movs	r3, #40	@ 0x28
 800456a:	f001 0207 	and.w	r2, r1, #7
 800456e:	4353      	muls	r3, r2
 8004570:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004574:	bf14      	ite	ne
 8004576:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800457e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8004580:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8004584:	bf15      	itete	ne
 8004586:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8004588:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800458c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800458e:	bf14      	ite	ne
 8004590:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8004592:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8004596:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004598:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800459a:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d00b      	beq.n	80045ba <HAL_PCD_EP_ClrStall+0x60>
 80045a2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80045a6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045aa:	f000 fe02 	bl	80051b2 <USB_EPClearStall>
  return HAL_OK;
 80045ae:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80045b0:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80045b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80045b6:	2001      	movs	r0, #1
 80045b8:	e7fc      	b.n	80045b4 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80045ba:	2002      	movs	r0, #2
 80045bc:	e7fa      	b.n	80045b4 <HAL_PCD_EP_ClrStall+0x5a>

080045be <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045be:	b510      	push	{r4, lr}
 80045c0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045c2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c6:	bf1b      	ittet	ne
 80045c8:	f001 0107 	andne.w	r1, r1, #7
 80045cc:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045d0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80045d6:	bf08      	it	eq
 80045d8:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045dc:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80045de:	b91a      	cbnz	r2, 80045e8 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80045e0:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80045e2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80045e4:	2000      	movs	r0, #0
 80045e6:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80045e8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80045ea:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80045ec:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80045ee:	e7f9      	b.n	80045e4 <HAL_PCDEx_PMAConfig+0x26>

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f4:	4605      	mov	r5, r0
 80045f6:	b338      	cbz	r0, 8004648 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f8:	6803      	ldr	r3, [r0, #0]
 80045fa:	07db      	lsls	r3, r3, #31
 80045fc:	d410      	bmi.n	8004620 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	079f      	lsls	r7, r3, #30
 8004602:	d45e      	bmi.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	0719      	lsls	r1, r3, #28
 8004608:	f100 8095 	bmi.w	8004736 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	075a      	lsls	r2, r3, #29
 8004610:	f100 80c1 	bmi.w	8004796 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004614:	69eb      	ldr	r3, [r5, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 812c 	bne.w	8004874 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800461c:	2000      	movs	r0, #0
 800461e:	e029      	b.n	8004674 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004620:	4c90      	ldr	r4, [pc, #576]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004622:	6863      	ldr	r3, [r4, #4]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b04      	cmp	r3, #4
 800462a:	d007      	beq.n	800463c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800462c:	6863      	ldr	r3, [r4, #4]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b08      	cmp	r3, #8
 8004634:	d10a      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	03de      	lsls	r6, r3, #15
 800463a:	d507      	bpl.n	800464c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	039c      	lsls	r4, r3, #14
 8004640:	d5dd      	bpl.n	80045fe <HAL_RCC_OscConfig+0xe>
 8004642:	686b      	ldr	r3, [r5, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1da      	bne.n	80045fe <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8004648:	2001      	movs	r0, #1
 800464a:	e013      	b.n	8004674 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	686b      	ldr	r3, [r5, #4]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004652:	d112      	bne.n	800467a <HAL_RCC_OscConfig+0x8a>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800465c:	f7fe ffb4 	bl	80035c8 <HAL_GetTick>
 8004660:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	0398      	lsls	r0, r3, #14
 8004666:	d4ca      	bmi.n	80045fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004668:	f7fe ffae 	bl	80035c8 <HAL_GetTick>
 800466c:	1b80      	subs	r0, r0, r6
 800466e:	2864      	cmp	r0, #100	@ 0x64
 8004670:	d9f7      	bls.n	8004662 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004672:	2003      	movs	r0, #3
}
 8004674:	b002      	add	sp, #8
 8004676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467a:	b99b      	cbnz	r3, 80046a4 <HAL_RCC_OscConfig+0xb4>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800468a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800468c:	f7fe ff9c 	bl	80035c8 <HAL_GetTick>
 8004690:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	0399      	lsls	r1, r3, #14
 8004696:	d5b2      	bpl.n	80045fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fe ff96 	bl	80035c8 <HAL_GetTick>
 800469c:	1b80      	subs	r0, r0, r6
 800469e:	2864      	cmp	r0, #100	@ 0x64
 80046a0:	d9f7      	bls.n	8004692 <HAL_RCC_OscConfig+0xa2>
 80046a2:	e7e6      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	d103      	bne.n	80046b4 <HAL_RCC_OscConfig+0xc4>
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	e7cf      	b.n	8004654 <HAL_RCC_OscConfig+0x64>
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c0:	e7cb      	b.n	800465a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4c68      	ldr	r4, [pc, #416]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	f013 0f0c 	tst.w	r3, #12
 80046ca:	d007      	beq.n	80046dc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d110      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	03da      	lsls	r2, r3, #15
 80046da:	d40d      	bmi.n	80046f8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	079b      	lsls	r3, r3, #30
 80046e0:	d502      	bpl.n	80046e8 <HAL_RCC_OscConfig+0xf8>
 80046e2:	692b      	ldr	r3, [r5, #16]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d1af      	bne.n	8004648 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	696a      	ldr	r2, [r5, #20]
 80046ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80046f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	e785      	b.n	8004604 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f8:	692a      	ldr	r2, [r5, #16]
 80046fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <HAL_RCC_OscConfig+0x278>)
 80046fc:	b16a      	cbz	r2, 800471a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004702:	f7fe ff61 	bl	80035c8 <HAL_GetTick>
 8004706:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	079f      	lsls	r7, r3, #30
 800470c:	d4ec      	bmi.n	80046e8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470e:	f7fe ff5b 	bl	80035c8 <HAL_GetTick>
 8004712:	1b80      	subs	r0, r0, r6
 8004714:	2802      	cmp	r0, #2
 8004716:	d9f7      	bls.n	8004708 <HAL_RCC_OscConfig+0x118>
 8004718:	e7ab      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800471a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800471c:	f7fe ff54 	bl	80035c8 <HAL_GetTick>
 8004720:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	0798      	lsls	r0, r3, #30
 8004726:	f57f af6d 	bpl.w	8004604 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472a:	f7fe ff4d 	bl	80035c8 <HAL_GetTick>
 800472e:	1b80      	subs	r0, r0, r6
 8004730:	2802      	cmp	r0, #2
 8004732:	d9f6      	bls.n	8004722 <HAL_RCC_OscConfig+0x132>
 8004734:	e79d      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004736:	69aa      	ldr	r2, [r5, #24]
 8004738:	4e4a      	ldr	r6, [pc, #296]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 800473a:	4b4b      	ldr	r3, [pc, #300]	@ (8004868 <HAL_RCC_OscConfig+0x278>)
 800473c:	b1e2      	cbz	r2, 8004778 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800473e:	2201      	movs	r2, #1
 8004740:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004744:	f7fe ff40 	bl	80035c8 <HAL_GetTick>
 8004748:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800474c:	079b      	lsls	r3, r3, #30
 800474e:	d50d      	bpl.n	800476c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004750:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <HAL_RCC_OscConfig+0x27c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fbb3 f3f2 	udiv	r3, r3, r2
 800475c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800475e:	bf00      	nop
  }
  while (Delay --);
 8004760:	9b01      	ldr	r3, [sp, #4]
 8004762:	1e5a      	subs	r2, r3, #1
 8004764:	9201      	str	r2, [sp, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f9      	bne.n	800475e <HAL_RCC_OscConfig+0x16e>
 800476a:	e74f      	b.n	800460c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476c:	f7fe ff2c 	bl	80035c8 <HAL_GetTick>
 8004770:	1b00      	subs	r0, r0, r4
 8004772:	2802      	cmp	r0, #2
 8004774:	d9e9      	bls.n	800474a <HAL_RCC_OscConfig+0x15a>
 8004776:	e77c      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8004778:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800477c:	f7fe ff24 	bl	80035c8 <HAL_GetTick>
 8004780:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004782:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8004784:	079f      	lsls	r7, r3, #30
 8004786:	f57f af41 	bpl.w	800460c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478a:	f7fe ff1d 	bl	80035c8 <HAL_GetTick>
 800478e:	1b00      	subs	r0, r0, r4
 8004790:	2802      	cmp	r0, #2
 8004792:	d9f6      	bls.n	8004782 <HAL_RCC_OscConfig+0x192>
 8004794:	e76d      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004796:	4c33      	ldr	r4, [pc, #204]	@ (8004864 <HAL_RCC_OscConfig+0x274>)
 8004798:	69e3      	ldr	r3, [r4, #28]
 800479a:	00d8      	lsls	r0, r3, #3
 800479c:	d424      	bmi.n	80047e8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800479e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a0:	69e3      	ldr	r3, [r4, #28]
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	61e3      	str	r3, [r4, #28]
 80047a8:	69e3      	ldr	r3, [r4, #28]
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b2:	4e2f      	ldr	r6, [pc, #188]	@ (8004870 <HAL_RCC_OscConfig+0x280>)
 80047b4:	6833      	ldr	r3, [r6, #0]
 80047b6:	05d9      	lsls	r1, r3, #23
 80047b8:	d518      	bpl.n	80047ec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ba:	68eb      	ldr	r3, [r5, #12]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d126      	bne.n	800480e <HAL_RCC_OscConfig+0x21e>
 80047c0:	6a23      	ldr	r3, [r4, #32]
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80047c8:	f7fe fefe 	bl	80035c8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80047d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	6a23      	ldr	r3, [r4, #32]
 80047d4:	079b      	lsls	r3, r3, #30
 80047d6:	d53f      	bpl.n	8004858 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80047d8:	2f00      	cmp	r7, #0
 80047da:	f43f af1b 	beq.w	8004614 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	69e3      	ldr	r3, [r4, #28]
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	61e3      	str	r3, [r4, #28]
 80047e6:	e715      	b.n	8004614 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80047e8:	2700      	movs	r7, #0
 80047ea:	e7e2      	b.n	80047b2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ec:	6833      	ldr	r3, [r6, #0]
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80047f4:	f7fe fee8 	bl	80035c8 <HAL_GetTick>
 80047f8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	6833      	ldr	r3, [r6, #0]
 80047fc:	05da      	lsls	r2, r3, #23
 80047fe:	d4dc      	bmi.n	80047ba <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004800:	f7fe fee2 	bl	80035c8 <HAL_GetTick>
 8004804:	eba0 0008 	sub.w	r0, r0, r8
 8004808:	2864      	cmp	r0, #100	@ 0x64
 800480a:	d9f6      	bls.n	80047fa <HAL_RCC_OscConfig+0x20a>
 800480c:	e731      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480e:	b9ab      	cbnz	r3, 800483c <HAL_RCC_OscConfig+0x24c>
 8004810:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6223      	str	r3, [r4, #32]
 800481c:	6a23      	ldr	r3, [r4, #32]
 800481e:	f023 0304 	bic.w	r3, r3, #4
 8004822:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004824:	f7fe fed0 	bl	80035c8 <HAL_GetTick>
 8004828:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	6a23      	ldr	r3, [r4, #32]
 800482c:	0798      	lsls	r0, r3, #30
 800482e:	d5d3      	bpl.n	80047d8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f7fe feca 	bl	80035c8 <HAL_GetTick>
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	4540      	cmp	r0, r8
 8004838:	d9f7      	bls.n	800482a <HAL_RCC_OscConfig+0x23a>
 800483a:	e71a      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483c:	2b05      	cmp	r3, #5
 800483e:	6a23      	ldr	r3, [r4, #32]
 8004840:	d103      	bne.n	800484a <HAL_RCC_OscConfig+0x25a>
 8004842:	f043 0304 	orr.w	r3, r3, #4
 8004846:	6223      	str	r3, [r4, #32]
 8004848:	e7ba      	b.n	80047c0 <HAL_RCC_OscConfig+0x1d0>
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	6223      	str	r3, [r4, #32]
 8004850:	6a23      	ldr	r3, [r4, #32]
 8004852:	f023 0304 	bic.w	r3, r3, #4
 8004856:	e7b6      	b.n	80047c6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004858:	f7fe feb6 	bl	80035c8 <HAL_GetTick>
 800485c:	1b80      	subs	r0, r0, r6
 800485e:	4540      	cmp	r0, r8
 8004860:	d9b7      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1e2>
 8004862:	e706      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
 8004864:	40021000 	.word	0x40021000
 8004868:	42420000 	.word	0x42420000
 800486c:	2000000c 	.word	0x2000000c
 8004870:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004874:	4c2a      	ldr	r4, [pc, #168]	@ (8004920 <HAL_RCC_OscConfig+0x330>)
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	f002 020c 	and.w	r2, r2, #12
 800487c:	2a08      	cmp	r2, #8
 800487e:	d03e      	beq.n	80048fe <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	2200      	movs	r2, #0
 8004882:	2b02      	cmp	r3, #2
 8004884:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004888:	d12c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800488a:	f7fe fe9d 	bl	80035c8 <HAL_GetTick>
 800488e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	0199      	lsls	r1, r3, #6
 8004894:	d420      	bmi.n	80048d8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004896:	6a2b      	ldr	r3, [r5, #32]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489e:	6862      	ldr	r2, [r4, #4]
 80048a0:	68a9      	ldr	r1, [r5, #8]
 80048a2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80048a6:	430a      	orrs	r2, r1
 80048a8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048aa:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80048ac:	6862      	ldr	r2, [r4, #4]
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80048b4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80048b6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80048ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_RCC_OscConfig+0x334>)
 80048bc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80048be:	f7fe fe83 	bl	80035c8 <HAL_GetTick>
 80048c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	f53f aea8 	bmi.w	800461c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fe fe7c 	bl	80035c8 <HAL_GetTick>
 80048d0:	1b40      	subs	r0, r0, r5
 80048d2:	2802      	cmp	r0, #2
 80048d4:	d9f6      	bls.n	80048c4 <HAL_RCC_OscConfig+0x2d4>
 80048d6:	e6cc      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fe fe76 	bl	80035c8 <HAL_GetTick>
 80048dc:	1b80      	subs	r0, r0, r6
 80048de:	2802      	cmp	r0, #2
 80048e0:	d9d6      	bls.n	8004890 <HAL_RCC_OscConfig+0x2a0>
 80048e2:	e6c6      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80048e4:	f7fe fe70 	bl	80035c8 <HAL_GetTick>
 80048e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	f57f ae95 	bpl.w	800461c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe fe69 	bl	80035c8 <HAL_GetTick>
 80048f6:	1b40      	subs	r0, r0, r5
 80048f8:	2802      	cmp	r0, #2
 80048fa:	d9f6      	bls.n	80048ea <HAL_RCC_OscConfig+0x2fa>
 80048fc:	e6b9      	b.n	8004672 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f43f aea2 	beq.w	8004648 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004904:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	6a2b      	ldr	r3, [r5, #32]
 8004908:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800490c:	429a      	cmp	r2, r3
 800490e:	f47f ae9b 	bne.w	8004648 <HAL_RCC_OscConfig+0x58>
 8004912:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004914:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004918:	1ac0      	subs	r0, r0, r3
 800491a:	bf18      	it	ne
 800491c:	2001      	movne	r0, #1
 800491e:	e6a9      	b.n	8004674 <HAL_RCC_OscConfig+0x84>
 8004920:	40021000 	.word	0x40021000
 8004924:	42420000 	.word	0x42420000

08004928 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004928:	4a0d      	ldr	r2, [pc, #52]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x38>)
 800492a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800492c:	f003 010c 	and.w	r1, r3, #12
 8004930:	2908      	cmp	r1, #8
 8004932:	d112      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004934:	480b      	ldr	r0, [pc, #44]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004936:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800493a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800493c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800493e:	d509      	bpl.n	8004954 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004940:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004942:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004944:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004948:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800494a:	4a08      	ldr	r2, [pc, #32]	@ (800496c <HAL_RCC_GetSysClockFreq+0x44>)
 800494c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004952:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x48>)
 8004956:	4358      	muls	r0, r3
 8004958:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800495a:	4803      	ldr	r0, [pc, #12]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	0800bfa5 	.word	0x0800bfa5
 8004968:	007a1200 	.word	0x007a1200
 800496c:	0800bfa3 	.word	0x0800bfa3
 8004970:	003d0900 	.word	0x003d0900

08004974 <HAL_RCC_ClockConfig>:
{
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800497a:	4604      	mov	r4, r0
 800497c:	b910      	cbnz	r0, 8004984 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800497e:	2001      	movs	r0, #1
}
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4a44      	ldr	r2, [pc, #272]	@ (8004a98 <HAL_RCC_ClockConfig+0x124>)
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	428b      	cmp	r3, r1
 800498e:	d328      	bcc.n	80049e2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	6821      	ldr	r1, [r4, #0]
 8004992:	078e      	lsls	r6, r1, #30
 8004994:	d430      	bmi.n	80049f8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	07ca      	lsls	r2, r1, #31
 8004998:	d443      	bmi.n	8004a22 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800499a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a98 <HAL_RCC_ClockConfig+0x124>)
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	42ab      	cmp	r3, r5
 80049a4:	d865      	bhi.n	8004a72 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	4d3c      	ldr	r5, [pc, #240]	@ (8004a9c <HAL_RCC_ClockConfig+0x128>)
 80049aa:	f012 0f04 	tst.w	r2, #4
 80049ae:	d16c      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	0713      	lsls	r3, r2, #28
 80049b2:	d506      	bpl.n	80049c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049b4:	686b      	ldr	r3, [r5, #4]
 80049b6:	6922      	ldr	r2, [r4, #16]
 80049b8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80049bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80049c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049c2:	f7ff ffb1 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80049c6:	686b      	ldr	r3, [r5, #4]
 80049c8:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <HAL_RCC_ClockConfig+0x12c>)
 80049ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	40d8      	lsrs	r0, r3
 80049d2:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <HAL_RCC_ClockConfig+0x130>)
 80049d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80049d6:	4b34      	ldr	r3, [pc, #208]	@ (8004aa8 <HAL_RCC_ClockConfig+0x134>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f7fe fdb3 	bl	8003544 <HAL_InitTick>
  return HAL_OK;
 80049de:	2000      	movs	r0, #0
 80049e0:	e7ce      	b.n	8004980 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	428b      	cmp	r3, r1
 80049f4:	d1c3      	bne.n	800497e <HAL_RCC_ClockConfig+0xa>
 80049f6:	e7cb      	b.n	8004990 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <HAL_RCC_ClockConfig+0x128>)
 80049fa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fe:	bf1e      	ittt	ne
 8004a00:	685a      	ldrne	r2, [r3, #4]
 8004a02:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004a06:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a0a:	bf42      	ittt	mi
 8004a0c:	685a      	ldrmi	r2, [r3, #4]
 8004a0e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004a12:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68a0      	ldr	r0, [r4, #8]
 8004a18:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004a1c:	4302      	orrs	r2, r0
 8004a1e:	605a      	str	r2, [r3, #4]
 8004a20:	e7b9      	b.n	8004996 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	6862      	ldr	r2, [r4, #4]
 8004a24:	4e1d      	ldr	r6, [pc, #116]	@ (8004a9c <HAL_RCC_ClockConfig+0x128>)
 8004a26:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a28:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	d11a      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	d0a5      	beq.n	800497e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a32:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a38:	f023 0303 	bic.w	r3, r3, #3
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004a40:	f7fe fdc2 	bl	80035c8 <HAL_GetTick>
 8004a44:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	6873      	ldr	r3, [r6, #4]
 8004a48:	6862      	ldr	r2, [r4, #4]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a52:	d0a2      	beq.n	800499a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fe fdb8 	bl	80035c8 <HAL_GetTick>
 8004a58:	1bc0      	subs	r0, r0, r7
 8004a5a:	4540      	cmp	r0, r8
 8004a5c:	d9f3      	bls.n	8004a46 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004a5e:	2003      	movs	r0, #3
 8004a60:	e78e      	b.n	8004980 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a62:	2a02      	cmp	r2, #2
 8004a64:	d102      	bne.n	8004a6c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004a6a:	e7e1      	b.n	8004a30 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6c:	f013 0f02 	tst.w	r3, #2
 8004a70:	e7de      	b.n	8004a30 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	432b      	orrs	r3, r5
 8004a7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	f47f af7b 	bne.w	800497e <HAL_RCC_ClockConfig+0xa>
 8004a88:	e78d      	b.n	80049a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8a:	686b      	ldr	r3, [r5, #4]
 8004a8c:	68e1      	ldr	r1, [r4, #12]
 8004a8e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a92:	430b      	orrs	r3, r1
 8004a94:	606b      	str	r3, [r5, #4]
 8004a96:	e78b      	b.n	80049b0 <HAL_RCC_ClockConfig+0x3c>
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	0800bf93 	.word	0x0800bf93
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	20000014 	.word	0x20000014

08004aac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004aae:	4a05      	ldr	r2, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	4a03      	ldr	r2, [pc, #12]	@ (8004ac8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004aba:	6810      	ldr	r0, [r2, #0]
}
 8004abc:	40d8      	lsrs	r0, r3
 8004abe:	4770      	bx	lr
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	0800bf8b 	.word	0x0800bf8b
 8004ac8:	2000000c 	.word	0x2000000c

08004acc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004acc:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004ace:	4a05      	ldr	r2, [pc, #20]	@ (8004ae4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	4a03      	ldr	r2, [pc, #12]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ada:	6810      	ldr	r0, [r2, #0]
}
 8004adc:	40d8      	lsrs	r0, r3
 8004ade:	4770      	bx	lr
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	0800bf8b 	.word	0x0800bf8b
 8004ae8:	2000000c 	.word	0x2000000c

08004aec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004aec:	6803      	ldr	r3, [r0, #0]
{
 8004aee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004af2:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004af4:	07d8      	lsls	r0, r3, #31
 8004af6:	d521      	bpl.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af8:	4c36      	ldr	r4, [pc, #216]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004afa:	69e3      	ldr	r3, [r4, #28]
 8004afc:	00d9      	lsls	r1, r3, #3
 8004afe:	d42b      	bmi.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004b00:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	69e3      	ldr	r3, [r4, #28]
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	61e3      	str	r3, [r4, #28]
 8004b0a:	69e3      	ldr	r3, [r4, #28]
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b14:	4f30      	ldr	r7, [pc, #192]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	05da      	lsls	r2, r3, #23
 8004b1a:	d51f      	bpl.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b1e:	686a      	ldr	r2, [r5, #4]
 8004b20:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004b24:	d12e      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b26:	6a23      	ldr	r3, [r4, #32]
 8004b28:	686a      	ldr	r2, [r5, #4]
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b32:	b11e      	cbz	r6, 8004b3c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b34:	69e3      	ldr	r3, [r4, #28]
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b3c:	682a      	ldr	r2, [r5, #0]
 8004b3e:	0791      	lsls	r1, r2, #30
 8004b40:	d506      	bpl.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b42:	4924      	ldr	r1, [pc, #144]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b44:	68a8      	ldr	r0, [r5, #8]
 8004b46:	684b      	ldr	r3, [r1, #4]
 8004b48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004b4c:	4303      	orrs	r3, r0
 8004b4e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b50:	06d3      	lsls	r3, r2, #27
 8004b52:	d436      	bmi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b54:	2000      	movs	r0, #0
 8004b56:	e012      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8004b58:	2600      	movs	r6, #0
 8004b5a:	e7db      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b62:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004b64:	f7fe fd30 	bl	80035c8 <HAL_GetTick>
 8004b68:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	05db      	lsls	r3, r3, #23
 8004b6e:	d4d5      	bmi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fe fd2a 	bl	80035c8 <HAL_GetTick>
 8004b74:	eba0 0008 	sub.w	r0, r0, r8
 8004b78:	2864      	cmp	r0, #100	@ 0x64
 8004b7a:	d9f6      	bls.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8004b7c:	2003      	movs	r0, #3
}
 8004b7e:	b002      	add	sp, #8
 8004b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b84:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d0cc      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b90:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b92:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b96:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b9c:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8004ba2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ba4:	d5bf      	bpl.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8004ba6:	f7fe fd0f 	bl	80035c8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004bae:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb0:	6a23      	ldr	r3, [r4, #32]
 8004bb2:	0798      	lsls	r0, r3, #30
 8004bb4:	d4b7      	bmi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fe fd07 	bl	80035c8 <HAL_GetTick>
 8004bba:	1bc0      	subs	r0, r0, r7
 8004bbc:	4540      	cmp	r0, r8
 8004bbe:	d9f7      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8004bc0:	e7dc      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc2:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004bc4:	68e9      	ldr	r1, [r5, #12]
 8004bc6:	6853      	ldr	r3, [r2, #4]
 8004bc8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e7c0      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	42420000 	.word	0x42420000

08004be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be4:	6803      	ldr	r3, [r0, #0]
 8004be6:	68c1      	ldr	r1, [r0, #12]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf2:	6882      	ldr	r2, [r0, #8]
 8004bf4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004bf6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf8:	4302      	orrs	r2, r0
 8004bfa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004bfc:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8004c00:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c04:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004c06:	430a      	orrs	r2, r1
 8004c08:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	69a1      	ldr	r1, [r4, #24]
 8004c0e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004c12:	430a      	orrs	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <UART_SetConfig+0x70>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d115      	bne.n	8004c48 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7ff ff56 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c20:	2319      	movs	r3, #25
 8004c22:	4343      	muls	r3, r0
 8004c24:	6862      	ldr	r2, [r4, #4]
 8004c26:	6820      	ldr	r0, [r4, #0]
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2e:	2264      	movs	r2, #100	@ 0x64
 8004c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c34:	fb02 3311 	mls	r3, r2, r1, r3
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	3332      	adds	r3, #50	@ 0x32
 8004c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c40:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004c44:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c46:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7ff ff30 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 8004c4c:	e7e8      	b.n	8004c20 <UART_SetConfig+0x40>
 8004c4e:	bf00      	nop
 8004c50:	40013800 	.word	0x40013800

08004c54 <HAL_UART_Init>:
{
 8004c54:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004c56:	4604      	mov	r4, r0
 8004c58:	b348      	cbz	r0, 8004cae <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004c5e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c62:	b91b      	cbnz	r3, 8004c6c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004c64:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004c68:	f7fe fb92 	bl	8003390 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004c6e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004c74:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004c76:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c7c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004c7e:	f7ff ffaf 	bl	8004be0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c94:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c9c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004c9e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004caa:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004cac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004cae:	2001      	movs	r0, #1
 8004cb0:	e7fc      	b.n	8004cac <HAL_UART_Init+0x58>

08004cb2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	a804      	add	r0, sp, #16
 8004cb6:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004cba:	2000      	movs	r0, #0
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr

08004cc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004cc0:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cc2:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8004cd0:	4770      	bx	lr

08004cd2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cd2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8004cd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cda:	045b      	lsls	r3, r3, #17
 8004cdc:	0c5b      	lsrs	r3, r3, #17
 8004cde:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	4770      	bx	lr

08004ce6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	4770      	bx	lr

08004cea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cec:	4604      	mov	r4, r0
 8004cee:	a804      	add	r0, sp, #16
 8004cf0:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cf4:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8004cfc:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d00:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d04:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd10      	pop	{r4, pc}

08004d0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d0e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004d10:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d12:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8004d16:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d18:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8004d1c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8004d20:	0424      	lsls	r4, r4, #16
 8004d22:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8004d24:	2d03      	cmp	r5, #3
 8004d26:	d803      	bhi.n	8004d30 <USB_ActivateEndpoint+0x24>
 8004d28:	e8df f005 	tbb	[pc, r5]
 8004d2c:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004d30:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d32:	f248 0680 	movw	r6, #32896	@ 0x8080
 8004d36:	4334      	orrs	r4, r6
 8004d38:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d3c:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004d40:	4f9f      	ldr	r7, [pc, #636]	@ (8004fc0 <USB_ActivateEndpoint+0x2b4>)
 8004d42:	b2a4      	uxth	r4, r4
 8004d44:	403c      	ands	r4, r7
 8004d46:	4314      	orrs	r4, r2
 8004d48:	4334      	orrs	r4, r6
 8004d4a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004d4e:	7b0c      	ldrb	r4, [r1, #12]
 8004d50:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	f040 808d 	bne.w	8004e74 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d5a:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004d5c:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d5e:	0864      	lsrs	r4, r4, #1
 8004d60:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8004d62:	b37e      	cbz	r6, 8004dc4 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d64:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004d68:	b289      	uxth	r1, r1
 8004d6a:	4461      	add	r1, ip
 8004d6c:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d70:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d74:	0649      	lsls	r1, r1, #25
 8004d76:	d509      	bpl.n	8004d8c <USB_ActivateEndpoint+0x80>
 8004d78:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d7c:	b289      	uxth	r1, r1
 8004d7e:	4039      	ands	r1, r7
 8004d80:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004d84:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004d88:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d8c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d90:	4c8c      	ldr	r4, [pc, #560]	@ (8004fc4 <USB_ActivateEndpoint+0x2b8>)
 8004d92:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004d94:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d96:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004d9a:	d001      	beq.n	8004da0 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d9c:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004da0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004da4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004da8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004dac:	e04c      	b.n	8004e48 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8004dae:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8004db0:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8004db4:	e7bd      	b.n	8004d32 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004db6:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e7b9      	b.n	8004d32 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004dbe:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8004dc2:	e7fa      	b.n	8004dba <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dc4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dc8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dca:	b2ad      	uxth	r5, r5
 8004dcc:	4465      	add	r5, ip
 8004dce:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004dd2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004dd6:	293e      	cmp	r1, #62	@ 0x3e
 8004dd8:	b2a4      	uxth	r4, r4
 8004dda:	4464      	add	r4, ip
 8004ddc:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8004de0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004de4:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8004de8:	d92f      	bls.n	8004e4a <USB_ActivateEndpoint+0x13e>
 8004dea:	094d      	lsrs	r5, r1, #5
 8004dec:	06ce      	lsls	r6, r1, #27
 8004dee:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004df2:	bf08      	it	eq
 8004df4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004df8:	b289      	uxth	r1, r1
 8004dfa:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004dfe:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004e02:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004e06:	b289      	uxth	r1, r1
 8004e08:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e0c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e10:	044f      	lsls	r7, r1, #17
 8004e12:	d50d      	bpl.n	8004e30 <USB_ActivateEndpoint+0x124>
 8004e14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e18:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004e1c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004e20:	0409      	lsls	r1, r1, #16
 8004e22:	0c09      	lsrs	r1, r1, #16
 8004e24:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004e28:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004e2c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004e30:	4c65      	ldr	r4, [pc, #404]	@ (8004fc8 <USB_ActivateEndpoint+0x2bc>)
 8004e32:	b9c2      	cbnz	r2, 8004e66 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e34:	881a      	ldrh	r2, [r3, #0]
 8004e36:	b292      	uxth	r2, r2
 8004e38:	4022      	ands	r2, r4
 8004e3a:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e46:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e4a:	b911      	cbnz	r1, 8004e52 <USB_ActivateEndpoint+0x146>
 8004e4c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004e50:	e7d5      	b.n	8004dfe <USB_ActivateEndpoint+0xf2>
 8004e52:	084d      	lsrs	r5, r1, #1
 8004e54:	07c9      	lsls	r1, r1, #31
 8004e56:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004e5a:	bf48      	it	mi
 8004e5c:	3501      	addmi	r5, #1
 8004e5e:	b289      	uxth	r1, r1
 8004e60:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004e64:	e7cf      	b.n	8004e06 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e66:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e6a:	b289      	uxth	r1, r1
 8004e6c:	4021      	ands	r1, r4
 8004e6e:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8004e72:	e795      	b.n	8004da0 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8004e74:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e76:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8004e7a:	d15b      	bne.n	8004f34 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e7c:	b2a4      	uxth	r4, r4
 8004e7e:	403c      	ands	r4, r7
 8004e80:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8004e84:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8004e88:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e8c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004e90:	890e      	ldrh	r6, [r1, #8]
 8004e92:	b2a4      	uxth	r4, r4
 8004e94:	0876      	lsrs	r6, r6, #1
 8004e96:	4464      	add	r4, ip
 8004e98:	0076      	lsls	r6, r6, #1
 8004e9a:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8004e9e:	894e      	ldrh	r6, [r1, #10]
 8004ea0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004ea4:	0876      	lsrs	r6, r6, #1
 8004ea6:	b2a4      	uxth	r4, r4
 8004ea8:	4464      	add	r4, ip
 8004eaa:	0076      	lsls	r6, r6, #1
 8004eac:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8004eb0:	7849      	ldrb	r1, [r1, #1]
 8004eb2:	2900      	cmp	r1, #0
 8004eb4:	d148      	bne.n	8004f48 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004eba:	044e      	lsls	r6, r1, #17
 8004ebc:	d50d      	bpl.n	8004eda <USB_ActivateEndpoint+0x1ce>
 8004ebe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ec2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004ec6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004eca:	0409      	lsls	r1, r1, #16
 8004ecc:	0c09      	lsrs	r1, r1, #16
 8004ece:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004ed2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004ed6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eda:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ede:	064d      	lsls	r5, r1, #25
 8004ee0:	d50d      	bpl.n	8004efe <USB_ActivateEndpoint+0x1f2>
 8004ee2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004ee6:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004eea:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004eee:	0409      	lsls	r1, r1, #16
 8004ef0:	0c09      	lsrs	r1, r1, #16
 8004ef2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004ef6:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004efa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004efe:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004f02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f06:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004f0a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004f0e:	0409      	lsls	r1, r1, #16
 8004f10:	0c09      	lsrs	r1, r1, #16
 8004f12:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8004f16:	4321      	orrs	r1, r4
 8004f18:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f1c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f20:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004f24:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004f28:	0409      	lsls	r1, r1, #16
 8004f2a:	0c09      	lsrs	r1, r1, #16
 8004f2c:	430c      	orrs	r4, r1
 8004f2e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8004f32:	e789      	b.n	8004e48 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004f34:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8004f38:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8004f3c:	0424      	lsls	r4, r4, #16
 8004f3e:	0c24      	lsrs	r4, r4, #16
 8004f40:	4326      	orrs	r6, r4
 8004f42:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8004f46:	e7a1      	b.n	8004e8c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f48:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f4c:	044c      	lsls	r4, r1, #17
 8004f4e:	d50d      	bpl.n	8004f6c <USB_ActivateEndpoint+0x260>
 8004f50:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f54:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004f58:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004f5c:	0409      	lsls	r1, r1, #16
 8004f5e:	0c09      	lsrs	r1, r1, #16
 8004f60:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004f64:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004f68:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f70:	0649      	lsls	r1, r1, #25
 8004f72:	d50d      	bpl.n	8004f90 <USB_ActivateEndpoint+0x284>
 8004f74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f78:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004f7c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004f80:	0409      	lsls	r1, r1, #16
 8004f82:	0c09      	lsrs	r1, r1, #16
 8004f84:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004f88:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004f8c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f90:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004f94:	4c0b      	ldr	r4, [pc, #44]	@ (8004fc4 <USB_ActivateEndpoint+0x2b8>)
 8004f96:	b289      	uxth	r1, r1
 8004f98:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004f9a:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f9c:	bf18      	it	ne
 8004f9e:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fa2:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004fa6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004faa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fae:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004fb2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004fb6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004fba:	0409      	lsls	r1, r1, #16
 8004fbc:	0c09      	lsrs	r1, r1, #16
 8004fbe:	e6ef      	b.n	8004da0 <USB_ActivateEndpoint+0x94>
 8004fc0:	ffff8f8f 	.word	0xffff8f8f
 8004fc4:	ffff8fbf 	.word	0xffff8fbf
 8004fc8:	ffffbf8f 	.word	0xffffbf8f

08004fcc <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004fcc:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fce:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004fd0:	7b09      	ldrb	r1, [r1, #12]
 8004fd2:	bbd9      	cbnz	r1, 800504c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004fd4:	b30a      	cbz	r2, 800501a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fd6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fda:	0651      	lsls	r1, r2, #25
 8004fdc:	d50d      	bpl.n	8004ffa <USB_DeactivateEndpoint+0x2e>
 8004fde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fe2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004fe6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004fea:	0412      	lsls	r2, r2, #16
 8004fec:	0c12      	lsrs	r2, r2, #16
 8004fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ff2:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004ff6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ffa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ffe:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005006:	0412      	lsls	r2, r2, #16
 8005008:	0c12      	lsrs	r2, r2, #16
 800500a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800500e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005012:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005016:	2000      	movs	r0, #0
 8005018:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800501a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800501e:	0452      	lsls	r2, r2, #17
 8005020:	d50d      	bpl.n	800503e <USB_DeactivateEndpoint+0x72>
 8005022:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005026:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800502a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800502e:	0412      	lsls	r2, r2, #16
 8005030:	0c12      	lsrs	r2, r2, #16
 8005032:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005036:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800503a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800503e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005042:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005046:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800504a:	e7dc      	b.n	8005006 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800504c:	2a00      	cmp	r2, #0
 800504e:	d14a      	bne.n	80050e6 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005050:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005054:	0451      	lsls	r1, r2, #17
 8005056:	d50d      	bpl.n	8005074 <USB_DeactivateEndpoint+0xa8>
 8005058:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800505c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005060:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005064:	0412      	lsls	r2, r2, #16
 8005066:	0c12      	lsrs	r2, r2, #16
 8005068:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800506c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005070:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005074:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005078:	0652      	lsls	r2, r2, #25
 800507a:	d50d      	bpl.n	8005098 <USB_DeactivateEndpoint+0xcc>
 800507c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005080:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005084:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005088:	0412      	lsls	r2, r2, #16
 800508a:	0c12      	lsrs	r2, r2, #16
 800508c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005090:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005094:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005098:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800509c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050a0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80050a4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80050a8:	0412      	lsls	r2, r2, #16
 80050aa:	0c12      	lsrs	r2, r2, #16
 80050ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050b0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80050b4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80050c4:	0412      	lsls	r2, r2, #16
 80050c6:	0c12      	lsrs	r2, r2, #16
 80050c8:	430a      	orrs	r2, r1
 80050ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050d2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80050d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050da:	0412      	lsls	r2, r2, #16
 80050dc:	0c12      	lsrs	r2, r2, #16
 80050de:	4311      	orrs	r1, r2
 80050e0:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80050e4:	e797      	b.n	8005016 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050ea:	0451      	lsls	r1, r2, #17
 80050ec:	d50d      	bpl.n	800510a <USB_DeactivateEndpoint+0x13e>
 80050ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80050f2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80050f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80050fa:	0412      	lsls	r2, r2, #16
 80050fc:	0c12      	lsrs	r2, r2, #16
 80050fe:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005102:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005106:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800510e:	0652      	lsls	r2, r2, #25
 8005110:	d50d      	bpl.n	800512e <USB_DeactivateEndpoint+0x162>
 8005112:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005116:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800511a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800511e:	0412      	lsls	r2, r2, #16
 8005120:	0c12      	lsrs	r2, r2, #16
 8005122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005126:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800512a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512e:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005132:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005136:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800513a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800513e:	0412      	lsls	r2, r2, #16
 8005140:	0c12      	lsrs	r2, r2, #16
 8005142:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005146:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800514a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800514e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005152:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	0412      	lsls	r2, r2, #16
 800515c:	0c12      	lsrs	r2, r2, #16
 800515e:	430a      	orrs	r2, r1
 8005160:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005164:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800516c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005170:	e7b3      	b.n	80050da <USB_DeactivateEndpoint+0x10e>

08005172 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005172:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005174:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005176:	b18b      	cbz	r3, 800519c <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005178:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800517c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	041b      	lsls	r3, r3, #16
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800518c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005194:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005198:	2000      	movs	r0, #0
 800519a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800519c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051b0:	e7ec      	b.n	800518c <USB_EPSetStall+0x1a>

080051b2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80051b2:	7b0b      	ldrb	r3, [r1, #12]
 80051b4:	bb3b      	cbnz	r3, 8005206 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80051b6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80051ba:	b333      	cbz	r3, 800520a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051c0:	065b      	lsls	r3, r3, #25
 80051c2:	d50d      	bpl.n	80051e0 <USB_EPClearStall+0x2e>
 80051c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80051e0:	78cb      	ldrb	r3, [r1, #3]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d00f      	beq.n	8005206 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005202:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005206:	2000      	movs	r0, #0
 8005208:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800520a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800520e:	045b      	lsls	r3, r3, #17
 8005210:	d50d      	bpl.n	800522e <USB_EPClearStall+0x7c>
 8005212:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800522e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005232:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005242:	e7da      	b.n	80051fa <USB_EPClearStall+0x48>

08005244 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005244:	b911      	cbnz	r1, 800524c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800524c:	2000      	movs	r0, #0
 800524e:	4770      	bx	lr

08005250 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005250:	2000      	movs	r0, #0
 8005252:	4770      	bx	lr

08005254 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005254:	2000      	movs	r0, #0
 8005256:	4770      	bx	lr

08005258 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005258:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 800525c:	b280      	uxth	r0, r0
 800525e:	4770      	bx	lr

08005260 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005260:	2000      	movs	r0, #0
 8005262:	4770      	bx	lr

08005264 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005264:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005268:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800526a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8005274:	4283      	cmp	r3, r0
 8005276:	d100      	bne.n	800527a <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005278:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800527a:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800527e:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005282:	e7f7      	b.n	8005274 <USB_WritePMA+0x10>

08005284 <USB_EPStartXfer>:
{
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8005288:	784b      	ldrb	r3, [r1, #1]
{
 800528a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800528c:	2b01      	cmp	r3, #1
{
 800528e:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8005290:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8005292:	f040 8118 	bne.w	80054c6 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8005296:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800529a:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800529c:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 800529e:	454f      	cmp	r7, r9
 80052a0:	bf28      	it	cs
 80052a2:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80052a4:	bb0a      	cbnz	r2, 80052ea <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052a6:	b2bf      	uxth	r7, r7
 80052a8:	88ea      	ldrh	r2, [r5, #6]
 80052aa:	463b      	mov	r3, r7
 80052ac:	f7ff ffda 	bl	8005264 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052b0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80052b4:	7829      	ldrb	r1, [r5, #0]
 80052b6:	b280      	uxth	r0, r0
 80052b8:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80052bc:	0109      	lsls	r1, r1, #4
 80052be:	4402      	add	r2, r0
 80052c0:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052c2:	782a      	ldrb	r2, [r5, #0]
 80052c4:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 80052d8:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80052da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052e2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80052e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 80052ea:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052ec:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 80052f0:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 80052f2:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f4:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80052f8:	f040 80d0 	bne.w	800549c <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 80052fc:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052fe:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8005302:	f080 80b4 	bcs.w	800546e <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005306:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800530a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800530e:	0412      	lsls	r2, r2, #16
 8005310:	0c12      	lsrs	r2, r2, #16
 8005312:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8005316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800531a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800531e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005322:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8005326:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005328:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800532c:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800532e:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005332:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005334:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005338:	d04e      	beq.n	80053d8 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533a:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800533e:	4472      	add	r2, lr
 8005340:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005344:	896a      	ldrh	r2, [r5, #10]
 8005346:	f7ff ff8d 	bl	8005264 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800534a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800534c:	bf36      	itet	cc
 800534e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005350:	2300      	movcs	r3, #0
 8005352:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005354:	786a      	ldrb	r2, [r5, #1]
 8005356:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8005358:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800535c:	b2b3      	uxth	r3, r6
 800535e:	bb7a      	cbnz	r2, 80053c0 <USB_EPStartXfer+0x13c>
 8005360:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005364:	7828      	ldrb	r0, [r5, #0]
 8005366:	b292      	uxth	r2, r2
 8005368:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 800536c:	0100      	lsls	r0, r0, #4
 800536e:	4411      	add	r1, r2
 8005370:	5a42      	ldrh	r2, [r0, r1]
 8005372:	2e3e      	cmp	r6, #62	@ 0x3e
 8005374:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005378:	5242      	strh	r2, [r0, r1]
 800537a:	d914      	bls.n	80053a6 <USB_EPStartXfer+0x122>
 800537c:	5a42      	ldrh	r2, [r0, r1]
 800537e:	0977      	lsrs	r7, r6, #5
 8005380:	06f6      	lsls	r6, r6, #27
 8005382:	bf08      	it	eq
 8005384:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005388:	b292      	uxth	r2, r2
 800538a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800538e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005392:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005396:	b292      	uxth	r2, r2
 8005398:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800539a:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800539c:	4651      	mov	r1, sl
 800539e:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a0:	f7ff ff60 	bl	8005264 <USB_WritePMA>
 80053a4:	e78d      	b.n	80052c2 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053a6:	b90e      	cbnz	r6, 80053ac <USB_EPStartXfer+0x128>
 80053a8:	5a42      	ldrh	r2, [r0, r1]
 80053aa:	e7f0      	b.n	800538e <USB_EPStartXfer+0x10a>
 80053ac:	07f2      	lsls	r2, r6, #31
 80053ae:	5a42      	ldrh	r2, [r0, r1]
 80053b0:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80053b4:	bf48      	it	mi
 80053b6:	3701      	addmi	r7, #1
 80053b8:	b292      	uxth	r2, r2
 80053ba:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80053be:	e7ea      	b.n	8005396 <USB_EPStartXfer+0x112>
 80053c0:	2a01      	cmp	r2, #1
 80053c2:	d1ea      	bne.n	800539a <USB_EPStartXfer+0x116>
 80053c4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80053c8:	7829      	ldrb	r1, [r5, #0]
 80053ca:	b280      	uxth	r0, r0
 80053cc:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80053d0:	0109      	lsls	r1, r1, #4
 80053d2:	4402      	add	r2, r0
 80053d4:	528b      	strh	r3, [r1, r2]
 80053d6:	e7e0      	b.n	800539a <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053d8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80053dc:	4472      	add	r2, lr
 80053de:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053e2:	892a      	ldrh	r2, [r5, #8]
 80053e4:	f7ff ff3e 	bl	8005264 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80053e8:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80053ea:	bf36      	itet	cc
 80053ec:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80053ee:	4643      	movcs	r3, r8
 80053f0:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053f2:	786a      	ldrb	r2, [r5, #1]
 80053f4:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80053f6:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053fa:	b2b3      	uxth	r3, r6
 80053fc:	bb5a      	cbnz	r2, 8005456 <USB_EPStartXfer+0x1d2>
 80053fe:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8005402:	7828      	ldrb	r0, [r5, #0]
 8005404:	b292      	uxth	r2, r2
 8005406:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800540a:	0100      	lsls	r0, r0, #4
 800540c:	4411      	add	r1, r2
 800540e:	5a42      	ldrh	r2, [r0, r1]
 8005410:	2e3e      	cmp	r6, #62	@ 0x3e
 8005412:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005416:	5242      	strh	r2, [r0, r1]
 8005418:	d910      	bls.n	800543c <USB_EPStartXfer+0x1b8>
 800541a:	5a42      	ldrh	r2, [r0, r1]
 800541c:	0977      	lsrs	r7, r6, #5
 800541e:	06f6      	lsls	r6, r6, #27
 8005420:	bf08      	it	eq
 8005422:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005426:	b292      	uxth	r2, r2
 8005428:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800542c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005430:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005434:	b292      	uxth	r2, r2
 8005436:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005438:	896a      	ldrh	r2, [r5, #10]
 800543a:	e7af      	b.n	800539c <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800543c:	b90e      	cbnz	r6, 8005442 <USB_EPStartXfer+0x1be>
 800543e:	5a42      	ldrh	r2, [r0, r1]
 8005440:	e7f4      	b.n	800542c <USB_EPStartXfer+0x1a8>
 8005442:	07f2      	lsls	r2, r6, #31
 8005444:	5a42      	ldrh	r2, [r0, r1]
 8005446:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800544a:	bf48      	it	mi
 800544c:	3701      	addmi	r7, #1
 800544e:	b292      	uxth	r2, r2
 8005450:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005454:	e7ee      	b.n	8005434 <USB_EPStartXfer+0x1b0>
 8005456:	2a01      	cmp	r2, #1
 8005458:	d1ee      	bne.n	8005438 <USB_EPStartXfer+0x1b4>
 800545a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800545e:	7829      	ldrb	r1, [r5, #0]
 8005460:	b280      	uxth	r0, r0
 8005462:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8005466:	0109      	lsls	r1, r1, #4
 8005468:	4402      	add	r2, r0
 800546a:	528b      	strh	r3, [r1, r2]
 800546c:	e7e4      	b.n	8005438 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800546e:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8005472:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005476:	0412      	lsls	r2, r2, #16
 8005478:	0c12      	lsrs	r2, r2, #16
 800547a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800547e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005482:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005486:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800548a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800548e:	b29b      	uxth	r3, r3
 8005490:	441a      	add	r2, r3
 8005492:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005494:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005498:	892a      	ldrh	r2, [r5, #8]
 800549a:	e781      	b.n	80053a0 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 800549c:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800549e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80054a2:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054a4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054a8:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054aa:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054ac:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054ae:	d506      	bpl.n	80054be <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054b0:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80054b4:	4432      	add	r2, r6
 80054b6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ba:	896a      	ldrh	r2, [r5, #10]
 80054bc:	e770      	b.n	80053a0 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054be:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80054c2:	4432      	add	r2, r6
 80054c4:	e7e6      	b.n	8005494 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	d13b      	bne.n	8005542 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80054ca:	698b      	ldr	r3, [r1, #24]
 80054cc:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054ce:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 80054d2:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80054d4:	bf84      	itt	hi
 80054d6:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 80054d8:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054da:	7829      	ldrb	r1, [r5, #0]
 80054dc:	61aa      	str	r2, [r5, #24]
 80054de:	b280      	uxth	r0, r0
 80054e0:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80054e4:	0109      	lsls	r1, r1, #4
 80054e6:	4402      	add	r2, r0
 80054e8:	5a88      	ldrh	r0, [r1, r2]
 80054ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80054ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80054f0:	5288      	strh	r0, [r1, r2]
 80054f2:	d91a      	bls.n	800552a <USB_EPStartXfer+0x2a6>
 80054f4:	0958      	lsrs	r0, r3, #5
 80054f6:	06de      	lsls	r6, r3, #27
 80054f8:	5a8b      	ldrh	r3, [r1, r2]
 80054fa:	bf08      	it	eq
 80054fc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8005500:	b29b      	uxth	r3, r3
 8005502:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800550e:	b29b      	uxth	r3, r3
 8005510:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005512:	782a      	ldrb	r2, [r5, #0]
 8005514:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8005518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800551c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	0c1b      	lsrs	r3, r3, #16
 8005524:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005528:	e6d6      	b.n	80052d8 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800552a:	b90b      	cbnz	r3, 8005530 <USB_EPStartXfer+0x2ac>
 800552c:	5a8b      	ldrh	r3, [r1, r2]
 800552e:	e7ea      	b.n	8005506 <USB_EPStartXfer+0x282>
 8005530:	0858      	lsrs	r0, r3, #1
 8005532:	07db      	lsls	r3, r3, #31
 8005534:	5a8b      	ldrh	r3, [r1, r2]
 8005536:	bf48      	it	mi
 8005538:	3001      	addmi	r0, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005540:	e7e5      	b.n	800550e <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8005542:	78ca      	ldrb	r2, [r1, #3]
 8005544:	2a02      	cmp	r2, #2
 8005546:	d170      	bne.n	800562a <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005548:	2b00      	cmp	r3, #0
 800554a:	d138      	bne.n	80055be <USB_EPStartXfer+0x33a>
 800554c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005550:	780b      	ldrb	r3, [r1, #0]
 8005552:	b292      	uxth	r2, r2
 8005554:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4410      	add	r0, r2
 800555c:	5ac2      	ldrh	r2, [r0, r3]
 800555e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005562:	52c2      	strh	r2, [r0, r3]
 8005564:	690a      	ldr	r2, [r1, #16]
 8005566:	2a3e      	cmp	r2, #62	@ 0x3e
 8005568:	d946      	bls.n	80055f8 <USB_EPStartXfer+0x374>
 800556a:	5ac1      	ldrh	r1, [r0, r3]
 800556c:	0956      	lsrs	r6, r2, #5
 800556e:	06d7      	lsls	r7, r2, #27
 8005570:	bf08      	it	eq
 8005572:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005576:	b289      	uxth	r1, r1
 8005578:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800557c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005580:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005584:	b289      	uxth	r1, r1
 8005586:	52c1      	strh	r1, [r0, r3]
 8005588:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800558c:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8005590:	b280      	uxth	r0, r0
 8005592:	4401      	add	r1, r0
 8005594:	5ac8      	ldrh	r0, [r1, r3]
 8005596:	2a3e      	cmp	r2, #62	@ 0x3e
 8005598:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800559c:	52c8      	strh	r0, [r1, r3]
 800559e:	d938      	bls.n	8005612 <USB_EPStartXfer+0x38e>
 80055a0:	0950      	lsrs	r0, r2, #5
 80055a2:	06d7      	lsls	r7, r2, #27
 80055a4:	5aca      	ldrh	r2, [r1, r3]
 80055a6:	bf08      	it	eq
 80055a8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80055ac:	b292      	uxth	r2, r2
 80055ae:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80055b2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80055b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80055ba:	b292      	uxth	r2, r2
 80055bc:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80055be:	69eb      	ldr	r3, [r5, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0a6      	beq.n	8005512 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055c4:	f244 0340 	movw	r3, #16448	@ 0x4040
 80055c8:	782a      	ldrb	r2, [r5, #0]
 80055ca:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80055ce:	ea03 0001 	and.w	r0, r3, r1
 80055d2:	438b      	bics	r3, r1
 80055d4:	d001      	beq.n	80055da <USB_EPStartXfer+0x356>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d19b      	bne.n	8005512 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80055da:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055f2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80055f6:	e78c      	b.n	8005512 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055f8:	b90a      	cbnz	r2, 80055fe <USB_EPStartXfer+0x37a>
 80055fa:	5ac1      	ldrh	r1, [r0, r3]
 80055fc:	e7be      	b.n	800557c <USB_EPStartXfer+0x2f8>
 80055fe:	07d1      	lsls	r1, r2, #31
 8005600:	5ac1      	ldrh	r1, [r0, r3]
 8005602:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8005606:	bf48      	it	mi
 8005608:	3601      	addmi	r6, #1
 800560a:	b289      	uxth	r1, r1
 800560c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005610:	e7b8      	b.n	8005584 <USB_EPStartXfer+0x300>
 8005612:	b90a      	cbnz	r2, 8005618 <USB_EPStartXfer+0x394>
 8005614:	5aca      	ldrh	r2, [r1, r3]
 8005616:	e7cc      	b.n	80055b2 <USB_EPStartXfer+0x32e>
 8005618:	0850      	lsrs	r0, r2, #1
 800561a:	07d6      	lsls	r6, r2, #31
 800561c:	5aca      	ldrh	r2, [r1, r3]
 800561e:	bf48      	it	mi
 8005620:	3001      	addmi	r0, #1
 8005622:	b292      	uxth	r2, r2
 8005624:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8005628:	e7c7      	b.n	80055ba <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800562a:	2a01      	cmp	r2, #1
 800562c:	d15d      	bne.n	80056ea <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800562e:	698a      	ldr	r2, [r1, #24]
 8005630:	6909      	ldr	r1, [r1, #16]
 8005632:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8005634:	bf94      	ite	ls
 8005636:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8005638:	1a50      	subhi	r0, r2, r1
 800563a:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 800563c:	bf88      	it	hi
 800563e:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005640:	2b00      	cmp	r3, #0
 8005642:	f47f af66 	bne.w	8005512 <USB_EPStartXfer+0x28e>
 8005646:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800564a:	782b      	ldrb	r3, [r5, #0]
 800564c:	b289      	uxth	r1, r1
 800564e:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	4408      	add	r0, r1
 8005656:	5ac1      	ldrh	r1, [r0, r3]
 8005658:	2a3e      	cmp	r2, #62	@ 0x3e
 800565a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800565e:	52c1      	strh	r1, [r0, r3]
 8005660:	d92b      	bls.n	80056ba <USB_EPStartXfer+0x436>
 8005662:	06d1      	lsls	r1, r2, #27
 8005664:	5ac1      	ldrh	r1, [r0, r3]
 8005666:	ea4f 1652 	mov.w	r6, r2, lsr #5
 800566a:	bf08      	it	eq
 800566c:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005670:	b289      	uxth	r1, r1
 8005672:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8005676:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800567a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800567e:	b289      	uxth	r1, r1
 8005680:	52c1      	strh	r1, [r0, r3]
 8005682:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8005686:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800568a:	b280      	uxth	r0, r0
 800568c:	4401      	add	r1, r0
 800568e:	5ac8      	ldrh	r0, [r1, r3]
 8005690:	2a3e      	cmp	r2, #62	@ 0x3e
 8005692:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005696:	52c8      	strh	r0, [r1, r3]
 8005698:	d91b      	bls.n	80056d2 <USB_EPStartXfer+0x44e>
 800569a:	0950      	lsrs	r0, r2, #5
 800569c:	06d6      	lsls	r6, r2, #27
 800569e:	5aca      	ldrh	r2, [r1, r3]
 80056a0:	bf08      	it	eq
 80056a2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80056a6:	b292      	uxth	r2, r2
 80056a8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80056ac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80056b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80056b4:	b292      	uxth	r2, r2
 80056b6:	52ca      	strh	r2, [r1, r3]
 80056b8:	e72b      	b.n	8005512 <USB_EPStartXfer+0x28e>
 80056ba:	b90a      	cbnz	r2, 80056c0 <USB_EPStartXfer+0x43c>
 80056bc:	5ac1      	ldrh	r1, [r0, r3]
 80056be:	e7da      	b.n	8005676 <USB_EPStartXfer+0x3f2>
 80056c0:	5ac1      	ldrh	r1, [r0, r3]
 80056c2:	0856      	lsrs	r6, r2, #1
 80056c4:	07d7      	lsls	r7, r2, #31
 80056c6:	bf48      	it	mi
 80056c8:	3601      	addmi	r6, #1
 80056ca:	b289      	uxth	r1, r1
 80056cc:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80056d0:	e7d5      	b.n	800567e <USB_EPStartXfer+0x3fa>
 80056d2:	b90a      	cbnz	r2, 80056d8 <USB_EPStartXfer+0x454>
 80056d4:	5aca      	ldrh	r2, [r1, r3]
 80056d6:	e7e9      	b.n	80056ac <USB_EPStartXfer+0x428>
 80056d8:	0850      	lsrs	r0, r2, #1
 80056da:	07d2      	lsls	r2, r2, #31
 80056dc:	5aca      	ldrh	r2, [r1, r3]
 80056de:	bf48      	it	mi
 80056e0:	3001      	addmi	r0, #1
 80056e2:	b292      	uxth	r2, r2
 80056e4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80056e8:	e7e4      	b.n	80056b4 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 80056ea:	2001      	movs	r0, #1
 80056ec:	e5fb      	b.n	80052e6 <USB_EPStartXfer+0x62>

080056ee <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056ee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 80056f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056f4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056f8:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 80056fa:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056fc:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 80056fe:	462e      	mov	r6, r5
 8005700:	3402      	adds	r4, #2
 8005702:	b936      	cbnz	r6, 8005712 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005704:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8005706:	bf44      	itt	mi
 8005708:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800570c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8005710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005712:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8005716:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8005718:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800571a:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800571e:	0a12      	lsrs	r2, r2, #8
 8005720:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8005724:	e7ec      	b.n	8005700 <USB_ReadPMA+0x12>

08005726 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005726:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800572a:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800572c:	b16b      	cbz	r3, 800574a <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800572e:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005732:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8005736:	28ff      	cmp	r0, #255	@ 0xff
 8005738:	d007      	beq.n	800574a <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4621      	mov	r1, r4
 800573e:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8005742:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005744:	23ff      	movs	r3, #255	@ 0xff
 8005746:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800574a:	2000      	movs	r0, #0
 800574c:	bd10      	pop	{r4, pc}
	...

08005750 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005750:	2343      	movs	r3, #67	@ 0x43
 8005752:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005754:	4800      	ldr	r0, [pc, #0]	@ (8005758 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005756:	4770      	bx	lr
 8005758:	2000005c 	.word	0x2000005c

0800575c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800575c:	2343      	movs	r3, #67	@ 0x43
 800575e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005760:	4800      	ldr	r0, [pc, #0]	@ (8005764 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005762:	4770      	bx	lr
 8005764:	200000a0 	.word	0x200000a0

08005768 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005768:	2343      	movs	r3, #67	@ 0x43
 800576a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800576c:	4800      	ldr	r0, [pc, #0]	@ (8005770 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800576e:	4770      	bx	lr
 8005770:	20000018 	.word	0x20000018

08005774 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005774:	230a      	movs	r3, #10
 8005776:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005778:	4800      	ldr	r0, [pc, #0]	@ (800577c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800577a:	4770      	bx	lr
 800577c:	2000011c 	.word	0x2000011c

08005780 <USBD_CDC_DataOut>:
{
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005784:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005788:	f000 ff66 	bl	8006658 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800578c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005790:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8005794:	b14b      	cbz	r3, 80057aa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005796:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800579a:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80057a4:	4798      	blx	r3
    return USBD_OK;
 80057a6:	2000      	movs	r0, #0
}
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80057aa:	2002      	movs	r0, #2
 80057ac:	e7fc      	b.n	80057a8 <USBD_CDC_DataOut+0x28>

080057ae <USBD_CDC_DataIn>:
{
 80057ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057b0:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80057b4:	b1ce      	cbz	r6, 80057ea <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057b6:	2214      	movs	r2, #20
 80057b8:	fb02 0201 	mla	r2, r2, r1, r0
 80057bc:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057be:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057c2:	b173      	cbz	r3, 80057e2 <USBD_CDC_DataIn+0x34>
 80057c4:	2728      	movs	r7, #40	@ 0x28
 80057c6:	fb07 5401 	mla	r4, r7, r1, r5
 80057ca:	6a24      	ldr	r4, [r4, #32]
 80057cc:	fbb3 f5f4 	udiv	r5, r3, r4
 80057d0:	fb04 3315 	mls	r3, r4, r5, r3
 80057d4:	b92b      	cbnz	r3, 80057e2 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80057d6:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 ff2b 	bl	8006634 <USBD_LL_Transmit>
    return USBD_OK;
 80057de:	2000      	movs	r0, #0
}
 80057e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 80057e8:	e7f9      	b.n	80057de <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 80057ea:	2002      	movs	r0, #2
 80057ec:	e7f8      	b.n	80057e0 <USBD_CDC_DataIn+0x32>

080057ee <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 80057ee:	2300      	movs	r3, #0
{
 80057f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f2:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 80057f4:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 80057f8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057fc:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005804:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005808:	d022      	beq.n	8005850 <USBD_CDC_Setup+0x62>
 800580a:	2b20      	cmp	r3, #32
 800580c:	d13a      	bne.n	8005884 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800580e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005810:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8005812:	b1ba      	cbz	r2, 8005844 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8005814:	0639      	lsls	r1, r7, #24
 8005816:	d50b      	bpl.n	8005830 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005818:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 800581c:	4618      	mov	r0, r3
 800581e:	688f      	ldr	r7, [r1, #8]
 8005820:	4631      	mov	r1, r6
 8005822:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005824:	4631      	mov	r1, r6
 8005826:	4620      	mov	r0, r4
 8005828:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800582a:	f000 fc4d 	bl	80060c8 <USBD_CtlSendData>
 800582e:	e006      	b.n	800583e <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005830:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8005832:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005836:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800583a:	f000 fc5a 	bl	80060f2 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800583e:	2000      	movs	r0, #0
}
 8005840:	b003      	add	sp, #12
 8005842:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005844:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8005848:	6884      	ldr	r4, [r0, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	47a0      	blx	r4
 800584e:	e7f6      	b.n	800583e <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8005850:	784b      	ldrb	r3, [r1, #1]
 8005852:	2b0a      	cmp	r3, #10
 8005854:	d00a      	beq.n	800586c <USBD_CDC_Setup+0x7e>
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d010      	beq.n	800587c <USBD_CDC_Setup+0x8e>
 800585a:	b99b      	cbnz	r3, 8005884 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005860:	2b03      	cmp	r3, #3
 8005862:	d10f      	bne.n	8005884 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005864:	2202      	movs	r2, #2
 8005866:	f10d 0106 	add.w	r1, sp, #6
 800586a:	e7de      	b.n	800582a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005870:	2b03      	cmp	r3, #3
 8005872:	d107      	bne.n	8005884 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005874:	2201      	movs	r2, #1
 8005876:	f10d 0105 	add.w	r1, sp, #5
 800587a:	e7d6      	b.n	800582a <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800587c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005880:	2b03      	cmp	r3, #3
 8005882:	d0dc      	beq.n	800583e <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	f000 fbf7 	bl	800607a <USBD_CtlError>
            ret = USBD_FAIL;
 800588c:	2002      	movs	r0, #2
 800588e:	e7d7      	b.n	8005840 <USBD_CDC_Setup+0x52>

08005890 <USBD_CDC_DeInit>:
{
 8005890:	b538      	push	{r3, r4, r5, lr}
 8005892:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005894:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005896:	2181      	movs	r1, #129	@ 0x81
 8005898:	f000 fe97 	bl	80065ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800589c:	2101      	movs	r1, #1
 800589e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80058a0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80058a2:	f000 fe92 	bl	80065ca <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058a6:	2182      	movs	r1, #130	@ 0x82
 80058a8:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80058aa:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80058ae:	f000 fe8c 	bl	80065ca <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80058b2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80058b6:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80058b8:	b14b      	cbz	r3, 80058ce <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80058ba:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80058c2:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 80058c6:	f000 fecf 	bl	8006668 <USBD_static_free>
    pdev->pClassData = NULL;
 80058ca:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 80058ce:	2000      	movs	r0, #0
 80058d0:	bd38      	pop	{r3, r4, r5, pc}

080058d2 <USBD_CDC_Init>:
{
 80058d2:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d4:	7c03      	ldrb	r3, [r0, #16]
{
 80058d6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d8:	bba3      	cbnz	r3, 8005944 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058de:	2181      	movs	r1, #129	@ 0x81
 80058e0:	2202      	movs	r2, #2
 80058e2:	f000 fe66 	bl	80065b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058e6:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058ec:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058ee:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058f0:	2202      	movs	r2, #2
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fe5d 	bl	80065b2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058f8:	2308      	movs	r3, #8
 80058fa:	2203      	movs	r2, #3
 80058fc:	2182      	movs	r1, #130	@ 0x82
 80058fe:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005900:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005904:	f000 fe55 	bl	80065b2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005908:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800590c:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800590e:	f000 fea7 	bl	8006660 <USBD_static_malloc>
 8005912:	4606      	mov	r6, r0
 8005914:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8005918:	b1f8      	cbz	r0, 800595a <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800591a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8005928:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800592c:	7c23      	ldrb	r3, [r4, #16]
 800592e:	b993      	cbnz	r3, 8005956 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005930:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005934:	4629      	mov	r1, r5
 8005936:	4620      	mov	r0, r4
 8005938:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 800593c:	f000 fe83 	bl	8006646 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005940:	2000      	movs	r0, #0
}
 8005942:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005944:	2340      	movs	r3, #64	@ 0x40
 8005946:	2181      	movs	r1, #129	@ 0x81
 8005948:	2202      	movs	r2, #2
 800594a:	f000 fe32 	bl	80065b2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800594e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005950:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005952:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005954:	e7cb      	b.n	80058ee <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005956:	2340      	movs	r3, #64	@ 0x40
 8005958:	e7ec      	b.n	8005934 <USBD_CDC_Init+0x62>
    ret = 1U;
 800595a:	4628      	mov	r0, r5
 800595c:	e7f1      	b.n	8005942 <USBD_CDC_Init+0x70>

0800595e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800595e:	b119      	cbz	r1, 8005968 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005960:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8005964:	2000      	movs	r0, #0
 8005966:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005968:	2002      	movs	r0, #2
  }

  return ret;
}
 800596a:	4770      	bx	lr

0800596c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800596c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005970:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005972:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005976:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 800597a:	4770      	bx	lr

0800597c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800597c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8005980:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005982:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8005986:	4770      	bx	lr

08005988 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005988:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800598c:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800598e:	b182      	cbz	r2, 80059b2 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8005990:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 8005994:	2301      	movs	r3, #1
 8005996:	b974      	cbnz	r4, 80059b6 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005998:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800599c:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80059a0:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80059a2:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80059a4:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	f000 fe43 	bl	8006634 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80059ae:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80059b0:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80059b2:	2002      	movs	r0, #2
 80059b4:	e7fc      	b.n	80059b0 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80059b6:	4618      	mov	r0, r3
 80059b8:	e7fa      	b.n	80059b0 <USBD_CDC_TransmitPacket+0x28>

080059ba <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059ba:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80059be:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80059c0:	b162      	cbz	r2, 80059dc <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c2:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059c4:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059c8:	b933      	cbnz	r3, 80059d8 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80059ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059ce:	2101      	movs	r1, #1
 80059d0:	f000 fe39 	bl	8006646 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80059d4:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80059d6:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80059d8:	2340      	movs	r3, #64	@ 0x40
 80059da:	e7f8      	b.n	80059ce <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 80059dc:	2002      	movs	r0, #2
 80059de:	e7fa      	b.n	80059d6 <USBD_CDC_ReceivePacket+0x1c>

080059e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059e0:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059e2:	b180      	cbz	r0, 8005a06 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059e8:	b113      	cbz	r3, 80059f0 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059f0:	b109      	cbz	r1, 80059f6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80059f2:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059f6:	2301      	movs	r3, #1
  pdev->id = id;
 80059f8:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059fa:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80059fe:	f000 fd8f 	bl	8006520 <USBD_LL_Init>

  return USBD_OK;
 8005a02:	2000      	movs	r0, #0
}
 8005a04:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005a06:	2002      	movs	r0, #2
 8005a08:	e7fc      	b.n	8005a04 <USBD_Init+0x24>

08005a0a <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005a0a:	b119      	cbz	r1, 8005a14 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a0c:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8005a10:	2000      	movs	r0, #0
 8005a12:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a14:	2002      	movs	r0, #2
  }

  return status;
}
 8005a16:	4770      	bx	lr

08005a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a18:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a1a:	f000 fdc1 	bl	80065a0 <USBD_LL_Start>

  return USBD_OK;
}
 8005a1e:	2000      	movs	r0, #0
 8005a20:	bd08      	pop	{r3, pc}

08005a22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a22:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005a24:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a28:	b133      	cbz	r3, 8005a38 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4798      	blx	r3
 8005a2e:	3800      	subs	r0, #0
 8005a30:	bf18      	it	ne
 8005a32:	2001      	movne	r0, #1
 8005a34:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005a36:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a38:	2002      	movs	r0, #2
 8005a3a:	e7fc      	b.n	8005a36 <USBD_SetClassConfig+0x14>

08005a3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a3c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a3e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4798      	blx	r3

  return USBD_OK;
}
 8005a46:	2000      	movs	r0, #0
 8005a48:	bd08      	pop	{r3, pc}

08005a4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a4a:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a4c:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8005a50:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 fb06 	bl	8006064 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a58:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005a5a:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8005a5e:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8005a62:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8005a66:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005a6a:	f001 031f 	and.w	r3, r1, #31
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d008      	beq.n	8005a84 <USBD_LL_SetupStage+0x3a>
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d00b      	beq.n	8005a8e <USBD_LL_SetupStage+0x44>
 8005a76:	b97b      	cbnz	r3, 8005a98 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a78:	4629      	mov	r1, r5
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 f8fa 	bl	8005c74 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005a80:	2000      	movs	r0, #0
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005a84:	4629      	mov	r1, r5
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fa3c 	bl	8005f04 <USBD_StdItfReq>
      break;
 8005a8c:	e7f8      	b.n	8005a80 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 fa5b 	bl	8005f4c <USBD_StdEPReq>
      break;
 8005a96:	e7f3      	b.n	8005a80 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005a9e:	f000 fd9d 	bl	80065dc <USBD_LL_StallEP>
      break;
 8005aa2:	e7ed      	b.n	8005a80 <USBD_LL_SetupStage+0x36>

08005aa4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005aa4:	b570      	push	{r4, r5, r6, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005aaa:	bb39      	cbnz	r1, 8005afc <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005aac:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005ab0:	2a03      	cmp	r2, #3
 8005ab2:	d11c      	bne.n	8005aee <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ab4:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8005ab8:	4295      	cmp	r5, r2
 8005aba:	d90b      	bls.n	8005ad4 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8005abc:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005abe:	42aa      	cmp	r2, r5
 8005ac0:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8005ac2:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005ac6:	bf8c      	ite	hi
 8005ac8:	b2aa      	uxthhi	r2, r5
 8005aca:	b292      	uxthls	r2, r2
 8005acc:	f000 fb1e 	bl	800610c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005ad0:	2000      	movs	r0, #0
}
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ad4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	b123      	cbz	r3, 8005ae6 <USBD_LL_DataOutStage+0x42>
 8005adc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005ae0:	2a03      	cmp	r2, #3
 8005ae2:	d100      	bne.n	8005ae6 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8005ae4:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fb18 	bl	800611c <USBD_CtlSendStatus>
 8005aec:	e7f0      	b.n	8005ad0 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005aee:	2a05      	cmp	r2, #5
 8005af0:	d1ee      	bne.n	8005ad0 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005af2:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005af6:	f000 fd71 	bl	80065dc <USBD_LL_StallEP>
 8005afa:	e7e9      	b.n	8005ad0 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005afc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	b12b      	cbz	r3, 8005b10 <USBD_LL_DataOutStage+0x6c>
 8005b04:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005b08:	2a03      	cmp	r2, #3
 8005b0a:	d101      	bne.n	8005b10 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8005b0c:	4798      	blx	r3
 8005b0e:	e7df      	b.n	8005ad0 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8005b10:	2002      	movs	r0, #2
 8005b12:	e7de      	b.n	8005ad2 <USBD_LL_DataOutStage+0x2e>

08005b14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	4604      	mov	r4, r0
 8005b18:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d149      	bne.n	8005bb4 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b20:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005b24:	2a02      	cmp	r2, #2
 8005b26:	d13a      	bne.n	8005b9e <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b28:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8005b2c:	42b5      	cmp	r5, r6
 8005b2e:	d911      	bls.n	8005b54 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8005b30:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b32:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8005b34:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b36:	b2aa      	uxth	r2, r5
 8005b38:	f000 fad3 	bl	80060e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b3c:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4619      	mov	r1, r3
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fd7f 	bl	8006646 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b48:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d02d      	beq.n	8005bac <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005b50:	2000      	movs	r0, #0
}
 8005b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b54:	69c3      	ldr	r3, [r0, #28]
 8005b56:	fbb3 f5f6 	udiv	r5, r3, r6
 8005b5a:	fb06 3515 	mls	r5, r6, r5, r3
 8005b5e:	b965      	cbnz	r5, 8005b7a <USBD_LL_DataInStage+0x66>
 8005b60:	429e      	cmp	r6, r3
 8005b62:	d80a      	bhi.n	8005b7a <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8005b64:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d206      	bcs.n	8005b7a <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b6c:	462a      	mov	r2, r5
 8005b6e:	f000 fab8 	bl	80060e2 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b72:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8005b74:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b78:	e7e1      	b.n	8005b3e <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b7a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	b12b      	cbz	r3, 8005b8e <USBD_LL_DataInStage+0x7a>
 8005b82:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8005b86:	2a03      	cmp	r2, #3
 8005b88:	d101      	bne.n	8005b8e <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005b8e:	2180      	movs	r1, #128	@ 0x80
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fd23 	bl	80065dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 facb 	bl	8006132 <USBD_CtlReceiveStatus>
 8005b9c:	e7d4      	b.n	8005b48 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b9e:	f032 0304 	bics.w	r3, r2, #4
 8005ba2:	d1d1      	bne.n	8005b48 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005ba4:	2180      	movs	r1, #128	@ 0x80
 8005ba6:	f000 fd19 	bl	80065dc <USBD_LL_StallEP>
 8005baa:	e7cd      	b.n	8005b48 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8005bb2:	e7cd      	b.n	8005b50 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005bb4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	b12b      	cbz	r3, 8005bc8 <USBD_LL_DataInStage+0xb4>
 8005bbc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005bc0:	2a03      	cmp	r2, #3
 8005bc2:	d101      	bne.n	8005bc8 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8005bc4:	4798      	blx	r3
 8005bc6:	e7c3      	b.n	8005b50 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8005bc8:	2002      	movs	r0, #2
 8005bca:	e7c2      	b.n	8005b52 <USBD_LL_DataInStage+0x3e>

08005bcc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bcc:	2200      	movs	r2, #0
{
 8005bce:	b570      	push	{r4, r5, r6, lr}
 8005bd0:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bd2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bd4:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	2340      	movs	r3, #64	@ 0x40
 8005bda:	f000 fcea 	bl	80065b2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bde:	4633      	mov	r3, r6
 8005be0:	2180      	movs	r1, #128	@ 0x80
 8005be2:	2200      	movs	r2, #0
 8005be4:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005be6:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bea:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bee:	f000 fce0 	bl	80065b2 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bf2:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005bf4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bf8:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bfa:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfc:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c00:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005c04:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c06:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8005c0a:	b123      	cbz	r3, 8005c16 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c0c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005c10:	4620      	mov	r0, r4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005c16:	2000      	movs	r0, #0
 8005c18:	bd70      	pop	{r4, r5, r6, pc}

08005c1a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005c1a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	4770      	bx	lr

08005c20 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005c20:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c24:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005c2e:	2000      	movs	r0, #0
 8005c30:	4770      	bx	lr

08005c32 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c32:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c36:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c38:	bf04      	itt	eq
 8005c3a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005c3e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8005c42:	2000      	movs	r0, #0
 8005c44:	4770      	bx	lr

08005c46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c46:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c48:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005c4c:	2a03      	cmp	r2, #3
 8005c4e:	d104      	bne.n	8005c5a <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8005c50:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	b103      	cbz	r3, 8005c5a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005c58:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	bd08      	pop	{r3, pc}

08005c5e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005c62:	2180      	movs	r1, #128	@ 0x80
 8005c64:	f000 fcba 	bl	80065dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c68:	4620      	mov	r0, r4
}
 8005c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f000 bcb4 	b.w	80065dc <USBD_LL_StallEP>

08005c74 <USBD_StdDevReq>:
{
 8005c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c76:	780b      	ldrb	r3, [r1, #0]
 8005c78:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c7e:	2b20      	cmp	r3, #32
{
 8005c80:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c82:	d006      	beq.n	8005c92 <USBD_StdDevReq+0x1e>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d004      	beq.n	8005c92 <USBD_StdDevReq+0x1e>
 8005c88:	b163      	cbz	r3, 8005ca4 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7ff ffe7 	bl	8005c5e <USBD_CtlError.constprop.0>
        break;
 8005c90:	e005      	b.n	8005c9e <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8005c92:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005c96:	4629      	mov	r1, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	4798      	blx	r3
}
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	b003      	add	sp, #12
 8005ca2:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8005ca4:	784b      	ldrb	r3, [r1, #1]
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d8ef      	bhi.n	8005c8a <USBD_StdDevReq+0x16>
 8005caa:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <USBD_StdDevReq+0x3c>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005eb3 	.word	0x08005eb3
 8005cb4:	08005ee9 	.word	0x08005ee9
 8005cb8:	08005c8b 	.word	0x08005c8b
 8005cbc:	08005edb 	.word	0x08005edb
 8005cc0:	08005c8b 	.word	0x08005c8b
 8005cc4:	08005dd9 	.word	0x08005dd9
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005c8b 	.word	0x08005c8b
 8005cd0:	08005e83 	.word	0x08005e83
 8005cd4:	08005e1b 	.word	0x08005e1b
  uint16_t len = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005cde:	884b      	ldrh	r3, [r1, #2]
 8005ce0:	0a1a      	lsrs	r2, r3, #8
 8005ce2:	3a01      	subs	r2, #1
 8005ce4:	2a06      	cmp	r2, #6
 8005ce6:	d8d0      	bhi.n	8005c8a <USBD_StdDevReq+0x16>
 8005ce8:	a101      	add	r1, pc, #4	@ (adr r1, 8005cf0 <USBD_StdDevReq+0x7c>)
 8005cea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d0d 	.word	0x08005d0d
 8005cf4:	08005d31 	.word	0x08005d31
 8005cf8:	08005d4b 	.word	0x08005d4b
 8005cfc:	08005c8b 	.word	0x08005c8b
 8005d00:	08005c8b 	.word	0x08005c8b
 8005d04:	08005d8f 	.word	0x08005d8f
 8005d08:	08005da5 	.word	0x08005da5
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d0c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d10:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d12:	7c20      	ldrb	r0, [r4, #16]
 8005d14:	f10d 0106 	add.w	r1, sp, #6
 8005d18:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005d1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005d1e:	88eb      	ldrh	r3, [r5, #6]
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d054      	beq.n	8005dce <USBD_StdDevReq+0x15a>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d149      	bne.n	8005dbc <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f9f7 	bl	800611c <USBD_CtlSendStatus>
 8005d2e:	e7b6      	b.n	8005c9e <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d30:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005d32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d36:	b932      	cbnz	r2, 8005d46 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d3a:	f10d 0006 	add.w	r0, sp, #6
 8005d3e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d40:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d42:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d44:	e7e9      	b.n	8005d1a <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	e7f7      	b.n	8005d3a <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b05      	cmp	r3, #5
 8005d4e:	d89c      	bhi.n	8005c8a <USBD_StdDevReq+0x16>
 8005d50:	e8df f003 	tbb	[pc, r3]
 8005d54:	110d0903 	.word	0x110d0903
 8005d58:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d5a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d5e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1d6      	bne.n	8005d12 <USBD_StdDevReq+0x9e>
 8005d64:	e791      	b.n	8005c8a <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d66:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	e7f8      	b.n	8005d60 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d6e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	e7f4      	b.n	8005d60 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d76:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	e7f0      	b.n	8005d60 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d7e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	e7ec      	b.n	8005d60 <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	e7e8      	b.n	8005d60 <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	7c03      	ldrb	r3, [r0, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f47f af7a 	bne.w	8005c8a <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d96:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005d9a:	f10d 0006 	add.w	r0, sp, #6
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da0:	4798      	blx	r3
  if (err != 0U)
 8005da2:	e7ba      	b.n	8005d1a <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005da4:	7c03      	ldrb	r3, [r0, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f47f af6f 	bne.w	8005c8a <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005db0:	f10d 0006 	add.w	r0, sp, #6
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005db8:	2307      	movs	r3, #7
 8005dba:	e7c2      	b.n	8005d42 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	bf28      	it	cs
 8005dc0:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005dc6:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005dca:	f000 f97d 	bl	80060c8 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005dce:	88eb      	ldrh	r3, [r5, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af64 	bne.w	8005c9e <USBD_StdDevReq+0x2a>
 8005dd6:	e7a7      	b.n	8005d28 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dd8:	888b      	ldrh	r3, [r1, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f47f af55 	bne.w	8005c8a <USBD_StdDevReq+0x16>
 8005de0:	88cb      	ldrh	r3, [r1, #6]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f47f af51 	bne.w	8005c8a <USBD_StdDevReq+0x16>
 8005de8:	884d      	ldrh	r5, [r1, #2]
 8005dea:	2d7f      	cmp	r5, #127	@ 0x7f
 8005dec:	f63f af4d 	bhi.w	8005c8a <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	f43f af48 	beq.w	8005c8a <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dfa:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dfc:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8005dfe:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e02:	f000 fc0e 	bl	8006622 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f988 	bl	800611c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005e0c:	b11d      	cbz	r5, 8005e16 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e0e:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e10:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005e14:	e743      	b.n	8005c9e <USBD_StdDevReq+0x2a>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e7fa      	b.n	8005e10 <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8005e1a:	7889      	ldrb	r1, [r1, #2]
 8005e1c:	4d38      	ldr	r5, [pc, #224]	@ (8005f00 <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e1e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005e20:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e22:	f63f af32 	bhi.w	8005c8a <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8005e26:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d008      	beq.n	8005e40 <USBD_StdDevReq+0x1cc>
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d015      	beq.n	8005e5e <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8005e32:	f7ff ff14 	bl	8005c5e <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e36:	4620      	mov	r0, r4
 8005e38:	7829      	ldrb	r1, [r5, #0]
 8005e3a:	f7ff fdff 	bl	8005a3c <USBD_ClrClassConfig>
        break;
 8005e3e:	e72e      	b.n	8005c9e <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8005e40:	2900      	cmp	r1, #0
 8005e42:	f43f af71 	beq.w	8005d28 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8005e46:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e48:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005e4a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e4c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff fde6 	bl	8005a22 <USBD_SetClassConfig>
 8005e56:	2802      	cmp	r0, #2
 8005e58:	f47f af66 	bne.w	8005d28 <USBD_StdDevReq+0xb4>
 8005e5c:	e715      	b.n	8005c8a <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8005e5e:	b931      	cbnz	r1, 8005e6e <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e60:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005e62:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e64:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005e68:	f7ff fde8 	bl	8005a3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005e6c:	e75c      	b.n	8005d28 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8005e6e:	6841      	ldr	r1, [r0, #4]
 8005e70:	2901      	cmp	r1, #1
 8005e72:	f43f af59 	beq.w	8005d28 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e76:	b2c9      	uxtb	r1, r1
 8005e78:	f7ff fde0 	bl	8005a3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e7c:	7829      	ldrb	r1, [r5, #0]
 8005e7e:	6061      	str	r1, [r4, #4]
 8005e80:	e7e6      	b.n	8005e50 <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8005e82:	88ca      	ldrh	r2, [r1, #6]
 8005e84:	2a01      	cmp	r2, #1
 8005e86:	f47f af00 	bne.w	8005c8a <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8005e8a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d80a      	bhi.n	8005ea8 <USBD_StdDevReq+0x234>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f43f aef9 	beq.w	8005c8a <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8005e98:	4601      	mov	r1, r0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f911 	bl	80060c8 <USBD_CtlSendData>
      break;
 8005ea6:	e6fa      	b.n	8005c9e <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	f47f aeee 	bne.w	8005c8a <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eae:	1d01      	adds	r1, r0, #4
 8005eb0:	e7f6      	b.n	8005ea0 <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8005eb2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	f63f aee6 	bhi.w	8005c8a <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8005ebe:	88ca      	ldrh	r2, [r1, #6]
 8005ec0:	2a02      	cmp	r2, #2
 8005ec2:	f47f aee2 	bne.w	8005c8a <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8005ec6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005eca:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2303      	movne	r3, #3
 8005ed4:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005ed8:	e7e2      	b.n	8005ea0 <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eda:	884b      	ldrh	r3, [r1, #2]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	f47f aede 	bne.w	8005c9e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8005ee2:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8005ee6:	e71f      	b.n	8005d28 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8005ee8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005eec:	3b01      	subs	r3, #1
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f63f aecb 	bhi.w	8005c8a <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ef4:	884b      	ldrh	r3, [r1, #2]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f47f aed1 	bne.w	8005c9e <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e7f0      	b.n	8005ee2 <USBD_StdDevReq+0x26e>
 8005f00:	20002764 	.word	0x20002764

08005f04 <USBD_StdItfReq>:
{
 8005f04:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f06:	780b      	ldrb	r3, [r1, #0]
{
 8005f08:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f0a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005f0e:	065b      	lsls	r3, r3, #25
{
 8005f10:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f12:	d501      	bpl.n	8005f18 <USBD_StdItfReq+0x14>
 8005f14:	2a40      	cmp	r2, #64	@ 0x40
 8005f16:	d115      	bne.n	8005f44 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005f18:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d810      	bhi.n	8005f44 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f22:	792b      	ldrb	r3, [r5, #4]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d80d      	bhi.n	8005f44 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f28:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4620      	mov	r0, r4
 8005f32:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f34:	88eb      	ldrh	r3, [r5, #6]
 8005f36:	b91b      	cbnz	r3, 8005f40 <USBD_StdItfReq+0x3c>
 8005f38:	b910      	cbnz	r0, 8005f40 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f8ee 	bl	800611c <USBD_CtlSendStatus>
}
 8005f40:	2000      	movs	r0, #0
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff fe8a 	bl	8005c5e <USBD_CtlError.constprop.0>
          break;
 8005f4a:	e7f9      	b.n	8005f40 <USBD_StdItfReq+0x3c>

08005f4c <USBD_StdEPReq>:
{
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	780a      	ldrb	r2, [r1, #0]
 8005f50:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005f52:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f56:	2a20      	cmp	r2, #32
{
 8005f58:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8005f5a:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f5c:	d006      	beq.n	8005f6c <USBD_StdEPReq+0x20>
 8005f5e:	2a40      	cmp	r2, #64	@ 0x40
 8005f60:	d004      	beq.n	8005f6c <USBD_StdEPReq+0x20>
 8005f62:	b15a      	cbz	r2, 8005f7c <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fe7a 	bl	8005c5e <USBD_CtlError.constprop.0>
              break;
 8005f6a:	e005      	b.n	8005f78 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8005f6c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8005f70:	4619      	mov	r1, r3
 8005f72:	4620      	mov	r0, r4
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	4790      	blx	r2
}
 8005f78:	2000      	movs	r0, #0
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005f7c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005f7e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8005f80:	2a01      	cmp	r2, #1
 8005f82:	d035      	beq.n	8005ff0 <USBD_StdEPReq+0xa4>
 8005f84:	2a03      	cmp	r2, #3
 8005f86:	d021      	beq.n	8005fcc <USBD_StdEPReq+0x80>
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	d1eb      	bne.n	8005f64 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8005f8c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d044      	beq.n	800601e <USBD_StdEPReq+0xd2>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d1e5      	bne.n	8005f64 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8005f98:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f9a:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005f9e:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fa2:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8005fa6:	d04b      	beq.n	8006040 <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0da      	beq.n	8005f64 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fae:	2514      	movs	r5, #20
 8005fb0:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8005fb4:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fb8:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fba:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fbc:	d04b      	beq.n	8006056 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fb1e 	bl	8006600 <USBD_LL_IsStallEP>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d04b      	beq.n	8006060 <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e045      	b.n	8006058 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8005fcc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005fd0:	2a02      	cmp	r2, #2
 8005fd2:	d01b      	beq.n	800600c <USBD_StdEPReq+0xc0>
 8005fd4:	2a03      	cmp	r2, #3
 8005fd6:	d1c5      	bne.n	8005f64 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fd8:	885a      	ldrh	r2, [r3, #2]
 8005fda:	b92a      	cbnz	r2, 8005fe8 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8005fdc:	064a      	lsls	r2, r1, #25
 8005fde:	d003      	beq.n	8005fe8 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fe0:	88db      	ldrh	r3, [r3, #6]
 8005fe2:	b90b      	cbnz	r3, 8005fe8 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005fe4:	f000 fafa 	bl	80065dc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f897 	bl	800611c <USBD_CtlSendStatus>
              break;
 8005fee:	e7c3      	b.n	8005f78 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8005ff0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005ff4:	2a02      	cmp	r2, #2
 8005ff6:	d009      	beq.n	800600c <USBD_StdEPReq+0xc0>
 8005ff8:	2a03      	cmp	r2, #3
 8005ffa:	d1b3      	bne.n	8005f64 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ffc:	885b      	ldrh	r3, [r3, #2]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ba      	bne.n	8005f78 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006002:	064d      	lsls	r5, r1, #25
 8006004:	d0f0      	beq.n	8005fe8 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006006:	f000 faf2 	bl	80065ee <USBD_LL_ClearStallEP>
 800600a:	e7ed      	b.n	8005fe8 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800600c:	064b      	lsls	r3, r1, #25
 800600e:	d0a9      	beq.n	8005f64 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8006010:	f000 fae4 	bl	80065dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006014:	2180      	movs	r1, #128	@ 0x80
 8006016:	4620      	mov	r0, r4
 8006018:	f000 fae0 	bl	80065dc <USBD_LL_StallEP>
 800601c:	e7ac      	b.n	8005f78 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800601e:	064a      	lsls	r2, r1, #25
 8006020:	d1a0      	bne.n	8005f64 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006022:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8006024:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006028:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800602c:	bf4c      	ite	mi
 800602e:	f100 0114 	addmi.w	r1, r0, #20
 8006032:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8006036:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f845 	bl	80060c8 <USBD_CtlSendData>
              break;
 800603e:	e79b      	b.n	8005f78 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006040:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006044:	2b00      	cmp	r3, #0
 8006046:	d08d      	beq.n	8005f64 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006048:	2514      	movs	r5, #20
 800604a:	fb05 0501 	mla	r5, r5, r1, r0
 800604e:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006052:	2900      	cmp	r1, #0
 8006054:	d1b3      	bne.n	8005fbe <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8006056:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8006058:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800605a:	2202      	movs	r2, #2
 800605c:	4629      	mov	r1, r5
 800605e:	e7eb      	b.n	8006038 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8006060:	6028      	str	r0, [r5, #0]
 8006062:	e7fa      	b.n	800605a <USBD_StdEPReq+0x10e>

08006064 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006064:	780b      	ldrb	r3, [r1, #0]
 8006066:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006068:	784b      	ldrb	r3, [r1, #1]
 800606a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800606c:	884b      	ldrh	r3, [r1, #2]
 800606e:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006070:	888b      	ldrh	r3, [r1, #4]
 8006072:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006074:	88cb      	ldrh	r3, [r1, #6]
 8006076:	80c3      	strh	r3, [r0, #6]
}
 8006078:	4770      	bx	lr

0800607a <USBD_CtlError>:
{
 800607a:	b510      	push	{r4, lr}
 800607c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800607e:	2180      	movs	r1, #128	@ 0x80
 8006080:	f000 faac 	bl	80065dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006084:	4620      	mov	r0, r4
}
 8006086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800608a:	2100      	movs	r1, #0
 800608c:	f000 baa6 	b.w	80065dc <USBD_LL_StallEP>

08006090 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006090:	b570      	push	{r4, r5, r6, lr}
 8006092:	460d      	mov	r5, r1
 8006094:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006096:	4604      	mov	r4, r0
 8006098:	b170      	cbz	r0, 80060b8 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800609a:	f7fa f859 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800609e:	b2c3      	uxtb	r3, r0
 80060a0:	3301      	adds	r3, #1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80060a6:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060a8:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 80060aa:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80060ac:	706b      	strb	r3, [r5, #1]
 80060ae:	2302      	movs	r3, #2
 80060b0:	3c01      	subs	r4, #1
    while (*desc != '\0')
 80060b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80060b6:	b901      	cbnz	r1, 80060ba <USBD_GetString+0x2a>
}
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	54e9      	strb	r1, [r5, r3]
 80060be:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80060c0:	3302      	adds	r3, #2
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	54a8      	strb	r0, [r5, r2]
 80060c6:	e7f4      	b.n	80060b2 <USBD_GetString+0x22>

080060c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060c8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060ca:	2202      	movs	r2, #2
{
 80060cc:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80060ce:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060d2:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060d6:	460a      	mov	r2, r1
 80060d8:	2100      	movs	r1, #0
 80060da:	f000 faab 	bl	8006634 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060de:	2000      	movs	r0, #0
 80060e0:	bd10      	pop	{r4, pc}

080060e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80060e2:	b508      	push	{r3, lr}
 80060e4:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060e6:	460a      	mov	r2, r1
 80060e8:	2100      	movs	r1, #0
 80060ea:	f000 faa3 	bl	8006634 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	bd08      	pop	{r3, pc}

080060f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80060f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060f4:	2203      	movs	r2, #3
{
 80060f6:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80060f8:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060fc:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006100:	460a      	mov	r2, r1
 8006102:	2100      	movs	r1, #0
 8006104:	f000 fa9f 	bl	8006646 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006108:	2000      	movs	r0, #0
 800610a:	bd10      	pop	{r4, pc}

0800610c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800610c:	b508      	push	{r3, lr}
 800610e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006110:	460a      	mov	r2, r1
 8006112:	2100      	movs	r1, #0
 8006114:	f000 fa97 	bl	8006646 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006118:	2000      	movs	r0, #0
 800611a:	bd08      	pop	{r3, pc}

0800611c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800611c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800611e:	2304      	movs	r3, #4
 8006120:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006124:	2300      	movs	r3, #0
 8006126:	461a      	mov	r2, r3
 8006128:	4619      	mov	r1, r3
 800612a:	f000 fa83 	bl	8006634 <USBD_LL_Transmit>

  return USBD_OK;
}
 800612e:	2000      	movs	r0, #0
 8006130:	bd08      	pop	{r3, pc}

08006132 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006132:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006134:	2305      	movs	r3, #5
 8006136:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800613a:	2300      	movs	r3, #0
 800613c:	461a      	mov	r2, r3
 800613e:	4619      	mov	r1, r3
 8006140:	f000 fa81 	bl	8006646 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006144:	2000      	movs	r0, #0
 8006146:	bd08      	pop	{r3, pc}

08006148 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800614a:	2200      	movs	r2, #0
 800614c:	490e      	ldr	r1, [pc, #56]	@ (8006188 <MX_USB_DEVICE_Init+0x40>)
 800614e:	480f      	ldr	r0, [pc, #60]	@ (800618c <MX_USB_DEVICE_Init+0x44>)
 8006150:	f7ff fc46 	bl	80059e0 <USBD_Init>
 8006154:	b108      	cbz	r0, 800615a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006156:	f7fc fc9f 	bl	8002a98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800615a:	490d      	ldr	r1, [pc, #52]	@ (8006190 <MX_USB_DEVICE_Init+0x48>)
 800615c:	480b      	ldr	r0, [pc, #44]	@ (800618c <MX_USB_DEVICE_Init+0x44>)
 800615e:	f7ff fc54 	bl	8005a0a <USBD_RegisterClass>
 8006162:	b108      	cbz	r0, 8006168 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006164:	f7fc fc98 	bl	8002a98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006168:	490a      	ldr	r1, [pc, #40]	@ (8006194 <MX_USB_DEVICE_Init+0x4c>)
 800616a:	4808      	ldr	r0, [pc, #32]	@ (800618c <MX_USB_DEVICE_Init+0x44>)
 800616c:	f7ff fbf7 	bl	800595e <USBD_CDC_RegisterInterface>
 8006170:	b108      	cbz	r0, 8006176 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006172:	f7fc fc91 	bl	8002a98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006176:	4805      	ldr	r0, [pc, #20]	@ (800618c <MX_USB_DEVICE_Init+0x44>)
 8006178:	f7ff fc4e 	bl	8005a18 <USBD_Start>
 800617c:	b118      	cbz	r0, 8006186 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800617e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006182:	f7fc bc89 	b.w	8002a98 <Error_Handler>
}
 8006186:	bd08      	pop	{r3, pc}
 8006188:	2000016c 	.word	0x2000016c
 800618c:	20002768 	.word	0x20002768
 8006190:	200000e4 	.word	0x200000e4
 8006194:	20000128 	.word	0x20000128

08006198 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006198:	2000      	movs	r0, #0
 800619a:	4770      	bx	lr

0800619c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800619c:	2000      	movs	r0, #0
 800619e:	4770      	bx	lr

080061a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 80061a2:	2300      	movs	r3, #0
      usbCommandComplete = true;         // Marcar comando completo
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80061a4:	4d11      	ldr	r5, [pc, #68]	@ (80061ec <CDC_Receive_FS+0x4c>)
      usbBuffer[usbBufferIndex++] = receivedChar;
 80061a6:	4e12      	ldr	r6, [pc, #72]	@ (80061f0 <CDC_Receive_FS+0x50>)
  for (uint32_t i = 0; i < *Len; i++) {
 80061a8:	680a      	ldr	r2, [r1, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d90a      	bls.n	80061c4 <CDC_Receive_FS+0x24>
    char receivedChar = Buf[i];
 80061ae:	5cc4      	ldrb	r4, [r0, r3]
    if (receivedChar == '\n') {
 80061b0:	2c0a      	cmp	r4, #10
 80061b2:	d110      	bne.n	80061d6 <CDC_Receive_FS+0x36>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 80061b4:	2100      	movs	r1, #0
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <CDC_Receive_FS+0x4c>)
 80061b8:	4a0d      	ldr	r2, [pc, #52]	@ (80061f0 <CDC_Receive_FS+0x50>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 80061be:	2201      	movs	r2, #1
 80061c0:	4b0c      	ldr	r3, [pc, #48]	@ (80061f4 <CDC_Receive_FS+0x54>)
 80061c2:	701a      	strb	r2, [r3, #0]
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80061c4:	4601      	mov	r1, r0
 80061c6:	480c      	ldr	r0, [pc, #48]	@ (80061f8 <CDC_Receive_FS+0x58>)
 80061c8:	f7ff fbd8 	bl	800597c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80061cc:	480a      	ldr	r0, [pc, #40]	@ (80061f8 <CDC_Receive_FS+0x58>)
 80061ce:	f7ff fbf4 	bl	80059ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80061d2:	2000      	movs	r0, #0
 80061d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80061d6:	2c0d      	cmp	r4, #13
 80061d8:	d005      	beq.n	80061e6 <CDC_Receive_FS+0x46>
 80061da:	682a      	ldr	r2, [r5, #0]
 80061dc:	2a62      	cmp	r2, #98	@ 0x62
      usbBuffer[usbBufferIndex++] = receivedChar;
 80061de:	bf9e      	ittt	ls
 80061e0:	1c57      	addls	r7, r2, #1
 80061e2:	602f      	strls	r7, [r5, #0]
 80061e4:	54b4      	strbls	r4, [r6, r2]
  for (uint32_t i = 0; i < *Len; i++) {
 80061e6:	3301      	adds	r3, #1
 80061e8:	e7de      	b.n	80061a8 <CDC_Receive_FS+0x8>
 80061ea:	bf00      	nop
 80061ec:	200022e8 	.word	0x200022e8
 80061f0:	200022ec 	.word	0x200022ec
 80061f4:	200022e4 	.word	0x200022e4
 80061f8:	20002768 	.word	0x20002768

080061fc <CDC_Init_FS>:
{
 80061fc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80061fe:	4c06      	ldr	r4, [pc, #24]	@ (8006218 <CDC_Init_FS+0x1c>)
 8006200:	2200      	movs	r2, #0
 8006202:	4620      	mov	r0, r4
 8006204:	4905      	ldr	r1, [pc, #20]	@ (800621c <CDC_Init_FS+0x20>)
 8006206:	f7ff fbb1 	bl	800596c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800620a:	4620      	mov	r0, r4
 800620c:	4904      	ldr	r1, [pc, #16]	@ (8006220 <CDC_Init_FS+0x24>)
 800620e:	f7ff fbb5 	bl	800597c <USBD_CDC_SetRxBuffer>
}
 8006212:	2000      	movs	r0, #0
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop
 8006218:	20002768 	.word	0x20002768
 800621c:	200039a8 	.word	0x200039a8
 8006220:	20003da8 	.word	0x20003da8

08006224 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006224:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006226:	4c09      	ldr	r4, [pc, #36]	@ (800624c <CDC_Transmit_FS+0x28>)
{
 8006228:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800622a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 800622e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006232:	b943      	cbnz	r3, 8006246 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006234:	4601      	mov	r1, r0
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fb98 	bl	800596c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800623c:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 800623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006242:	f7ff bba1 	b.w	8005988 <USBD_CDC_TransmitPacket>
}
 8006246:	2001      	movs	r0, #1
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop
 800624c:	20002768 	.word	0x20002768

08006250 <CDC_TxQueue_Init>:
/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
    txQueue.head = 0;
 8006250:	2200      	movs	r2, #0
    txQueue.tail = 0;
    txQueue.count = 0;
 8006252:	211e      	movs	r1, #30
    txQueue.head = 0;
 8006254:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <CDC_TxQueue_Init+0x20>)
 8006256:	f8a3 2f78 	strh.w	r2, [r3, #3960]	@ 0xf78
    txQueue.count = 0;
 800625a:	f8a3 2f7a 	strh.w	r2, [r3, #3962]	@ 0xf7a
    txQueue.transmitting = false;
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 800625e:	3901      	subs	r1, #1
        txQueue.messages[i].used = false;
 8006260:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
        txQueue.messages[i].length = 0;
 8006264:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8006268:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 800626c:	d1f7      	bne.n	800625e <CDC_TxQueue_Init+0xe>
    }
}
 800626e:	4770      	bx	lr
 8006270:	20002a2c 	.word	0x20002a2c

08006274 <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 8006274:	b538      	push	{r3, r4, r5, lr}
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8006276:	4c15      	ldr	r4, [pc, #84]	@ (80062cc <CDC_TxQueue_Add+0x58>)
{
 8006278:	460d      	mov	r5, r1
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 800627a:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 800627e:	2b1d      	cmp	r3, #29
 8006280:	d821      	bhi.n	80062c6 <CDC_TxQueue_Add+0x52>
 8006282:	2980      	cmp	r1, #128	@ 0x80
 8006284:	d81f      	bhi.n	80062c6 <CDC_TxQueue_Add+0x52>
        return false;
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
    memcpy(msg->data, data, length);
 8006286:	2284      	movs	r2, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 8006288:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
    memcpy(msg->data, data, length);
 800628c:	fb02 4303 	mla	r3, r2, r3, r4
 8006290:	460a      	mov	r2, r1
 8006292:	4601      	mov	r1, r0
 8006294:	4618      	mov	r0, r3
 8006296:	f001 f9f8 	bl	800768a <memcpy>
 800629a:	4603      	mov	r3, r0
    msg->length = length;
 800629c:	f8a0 5080 	strh.w	r5, [r0, #128]	@ 0x80
    msg->used = true;
 80062a0:	2001      	movs	r0, #1
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 80062a2:	221e      	movs	r2, #30
    msg->used = true;
 80062a4:	f883 0082 	strb.w	r0, [r3, #130]	@ 0x82
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 80062a8:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
 80062ac:	4403      	add	r3, r0
 80062ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b2:	fb02 3311 	mls	r3, r2, r1, r3
 80062b6:	f884 3f78 	strb.w	r3, [r4, #3960]	@ 0xf78
    txQueue.count++;
 80062ba:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 80062be:	4403      	add	r3, r0
 80062c0:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
    
    return true;
}
 80062c4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80062c6:	2000      	movs	r0, #0
 80062c8:	e7fc      	b.n	80062c4 <CDC_TxQueue_Add+0x50>
 80062ca:	bf00      	nop
 80062cc:	20002a2c 	.word	0x20002a2c

080062d0 <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 80062d0:	b538      	push	{r3, r4, r5, lr}
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 80062d2:	4c19      	ldr	r4, [pc, #100]	@ (8006338 <CDC_TxQueue_Process+0x68>)
 80062d4:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 80062d8:	b36b      	cbz	r3, 8006336 <CDC_TxQueue_Process+0x66>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 80062da:	f894 3f7b 	ldrb.w	r3, [r4, #3963]	@ 0xf7b
 80062de:	b143      	cbz	r3, 80062f2 <CDC_TxQueue_Process+0x22>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 80062e0:	2100      	movs	r1, #0
 80062e2:	4608      	mov	r0, r1
 80062e4:	f7ff ff9e 	bl	8006224 <CDC_Transmit_FS>
        if (result != USBD_BUSY) {
 80062e8:	2801      	cmp	r0, #1
 80062ea:	d024      	beq.n	8006336 <CDC_TxQueue_Process+0x66>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 80062ec:	2300      	movs	r3, #0
 80062ee:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
    if (msg->used) {
 80062f2:	2384      	movs	r3, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 80062f4:	f894 5f79 	ldrb.w	r5, [r4, #3961]	@ 0xf79
    if (msg->used) {
 80062f8:	fb03 4505 	mla	r5, r3, r5, r4
 80062fc:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8006300:	b1cb      	cbz	r3, 8006336 <CDC_TxQueue_Process+0x66>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 8006302:	4628      	mov	r0, r5
 8006304:	f8b5 1080 	ldrh.w	r1, [r5, #128]	@ 0x80
 8006308:	f7ff ff8c 	bl	8006224 <CDC_Transmit_FS>
        
        if (result == USBD_OK) {
 800630c:	b998      	cbnz	r0, 8006336 <CDC_TxQueue_Process+0x66>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800630e:	2301      	movs	r3, #1
            msg->used = false;
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8006310:	221e      	movs	r2, #30
            txQueue.transmitting = true;  // Marcar como transmitiendo
 8006312:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8006316:	f894 3f79 	ldrb.w	r3, [r4, #3961]	@ 0xf79
            msg->used = false;
 800631a:	f885 0082 	strb.w	r0, [r5, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800631e:	3301      	adds	r3, #1
 8006320:	fbb3 f1f2 	udiv	r1, r3, r2
 8006324:	fb02 3311 	mls	r3, r2, r1, r3
 8006328:	f884 3f79 	strb.w	r3, [r4, #3961]	@ 0xf79
            txQueue.count--;
 800632c:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8006330:	3b01      	subs	r3, #1
 8006332:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	20002a2c 	.word	0x20002a2c

0800633c <CDC_Transmit_Queued>:
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
    return CDC_TxQueue_Add(data, length);
 800633c:	f7ff bf9a 	b.w	8006274 <CDC_TxQueue_Add>

08006340 <CDC_TxQueue_GetCount>:
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
    return txQueue.count;
}
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <CDC_TxQueue_GetCount+0x8>)
 8006342:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
 8006346:	4770      	bx	lr
 8006348:	20002a2c 	.word	0x20002a2c

0800634c <CDC_TxQueue_IsFull>:
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
    return (txQueue.count >= TX_QUEUE_SIZE);
 800634c:	4b03      	ldr	r3, [pc, #12]	@ (800635c <CDC_TxQueue_IsFull+0x10>)
 800634e:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
}
 8006352:	281d      	cmp	r0, #29
 8006354:	bf94      	ite	ls
 8006356:	2000      	movls	r0, #0
 8006358:	2001      	movhi	r0, #1
 800635a:	4770      	bx	lr
 800635c:	20002a2c 	.word	0x20002a2c

08006360 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006360:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006362:	4801      	ldr	r0, [pc, #4]	@ (8006368 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006364:	800b      	strh	r3, [r1, #0]
}
 8006366:	4770      	bx	lr
 8006368:	20000158 	.word	0x20000158

0800636c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800636c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800636e:	4801      	ldr	r0, [pc, #4]	@ (8006374 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006370:	800b      	strh	r3, [r1, #0]
}
 8006372:	4770      	bx	lr
 8006374:	20000154 	.word	0x20000154

08006378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006378:	2300      	movs	r3, #0
 800637a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800637c:	461e      	mov	r6, r3
 800637e:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006380:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8006382:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006386:	bf34      	ite	cc
 8006388:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800638a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800638c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006390:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8006394:	3301      	adds	r3, #1
 8006396:	b2dc      	uxtb	r4, r3
 8006398:	42a2      	cmp	r2, r4
    value = value << 4;
 800639a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800639e:	d8ef      	bhi.n	8006380 <IntToUnicode+0x8>
  }
}
 80063a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080063a4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80063a4:	231a      	movs	r3, #26
{
 80063a6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80063a8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80063aa:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <USBD_FS_SerialStrDescriptor+0x30>)
 80063ac:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 80063b0:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 80063b4:	1880      	adds	r0, r0, r2
 80063b6:	d00a      	beq.n	80063ce <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063b8:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063bc:	4906      	ldr	r1, [pc, #24]	@ (80063d8 <USBD_FS_SerialStrDescriptor+0x34>)
 80063be:	2208      	movs	r2, #8
 80063c0:	f7ff ffda 	bl	8006378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063c4:	2204      	movs	r2, #4
 80063c6:	4620      	mov	r0, r4
 80063c8:	3110      	adds	r1, #16
 80063ca:	f7ff ffd5 	bl	8006378 <IntToUnicode>
}
 80063ce:	4803      	ldr	r0, [pc, #12]	@ (80063dc <USBD_FS_SerialStrDescriptor+0x38>)
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	1ffff000 	.word	0x1ffff000
 80063d8:	2000013a 	.word	0x2000013a
 80063dc:	20000138 	.word	0x20000138

080063e0 <USBD_FS_ManufacturerStrDescriptor>:
{
 80063e0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063e2:	4c04      	ldr	r4, [pc, #16]	@ (80063f4 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80063e4:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063e6:	4804      	ldr	r0, [pc, #16]	@ (80063f8 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80063e8:	4621      	mov	r1, r4
 80063ea:	f7ff fe51 	bl	8006090 <USBD_GetString>
}
 80063ee:	4620      	mov	r0, r4
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	bf00      	nop
 80063f4:	200041a8 	.word	0x200041a8
 80063f8:	0800bde3 	.word	0x0800bde3

080063fc <USBD_FS_ProductStrDescriptor>:
{
 80063fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063fe:	4c04      	ldr	r4, [pc, #16]	@ (8006410 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006400:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006402:	4804      	ldr	r0, [pc, #16]	@ (8006414 <USBD_FS_ProductStrDescriptor+0x18>)
 8006404:	4621      	mov	r1, r4
 8006406:	f7ff fe43 	bl	8006090 <USBD_GetString>
}
 800640a:	4620      	mov	r0, r4
 800640c:	bd10      	pop	{r4, pc}
 800640e:	bf00      	nop
 8006410:	200041a8 	.word	0x200041a8
 8006414:	0800bdf6 	.word	0x0800bdf6

08006418 <USBD_FS_ConfigStrDescriptor>:
{
 8006418:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800641a:	4c04      	ldr	r4, [pc, #16]	@ (800642c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800641c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800641e:	4804      	ldr	r0, [pc, #16]	@ (8006430 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006420:	4621      	mov	r1, r4
 8006422:	f7ff fe35 	bl	8006090 <USBD_GetString>
}
 8006426:	4620      	mov	r0, r4
 8006428:	bd10      	pop	{r4, pc}
 800642a:	bf00      	nop
 800642c:	200041a8 	.word	0x200041a8
 8006430:	0800be0c 	.word	0x0800be0c

08006434 <USBD_FS_InterfaceStrDescriptor>:
{
 8006434:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006436:	4c04      	ldr	r4, [pc, #16]	@ (8006448 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006438:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800643a:	4804      	ldr	r0, [pc, #16]	@ (800644c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800643c:	4621      	mov	r1, r4
 800643e:	f7ff fe27 	bl	8006090 <USBD_GetString>
}
 8006442:	4620      	mov	r0, r4
 8006444:	bd10      	pop	{r4, pc}
 8006446:	bf00      	nop
 8006448:	200041a8 	.word	0x200041a8
 800644c:	0800be17 	.word	0x0800be17

08006450 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006450:	b118      	cbz	r0, 800645a <USBD_Get_USB_Status+0xa>
 8006452:	2802      	cmp	r0, #2
 8006454:	bf0c      	ite	eq
 8006456:	2001      	moveq	r0, #1
 8006458:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800645a:	4770      	bx	lr

0800645c <HAL_PCD_MspInit>:
{
 800645c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800645e:	4b0e      	ldr	r3, [pc, #56]	@ (8006498 <HAL_PCD_MspInit+0x3c>)
 8006460:	6802      	ldr	r2, [r0, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d115      	bne.n	8006492 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8006466:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800646a:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800646c:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800646e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006472:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006474:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006476:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006478:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800647a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800647e:	9301      	str	r3, [sp, #4]
 8006480:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006482:	f7fd f8cb 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006486:	2014      	movs	r0, #20
}
 8006488:	b003      	add	sp, #12
 800648a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800648e:	f7fd b8f5 	b.w	800367c <HAL_NVIC_EnableIRQ>
}
 8006492:	b003      	add	sp, #12
 8006494:	f85d fb04 	ldr.w	pc, [sp], #4
 8006498:	40005c00 	.word	0x40005c00

0800649c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800649c:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80064a0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80064a4:	f7ff bad1 	b.w	8005a4a <USBD_LL_SetupStage>

080064a8 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064a8:	2328      	movs	r3, #40	@ 0x28
 80064aa:	fb03 0301 	mla	r3, r3, r1, r0
 80064ae:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80064b2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80064b6:	f7ff baf5 	b.w	8005aa4 <USBD_LL_DataOutStage>

080064ba <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064ba:	2328      	movs	r3, #40	@ 0x28
 80064bc:	fb03 0301 	mla	r3, r3, r1, r0
 80064c0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80064c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c6:	f7ff bb25 	b.w	8005b14 <USBD_LL_DataInStage>

080064ca <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064ca:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80064ce:	f7ff bbba 	b.w	8005c46 <USBD_LL_SOF>

080064d2 <HAL_PCD_ResetCallback>:
{
 80064d2:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064d4:	7983      	ldrb	r3, [r0, #6]
{
 80064d6:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d001      	beq.n	80064e0 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80064dc:	f7fc fadc 	bl	8002a98 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064e0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 80064e4:	2101      	movs	r1, #1
 80064e6:	f7ff fb98 	bl	8005c1a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064ea:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 80064ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064f2:	f7ff bb6b 	b.w	8005bcc <USBD_LL_Reset>
	...

080064f8 <HAL_PCD_SuspendCallback>:
{
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064fc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006500:	f7ff fb8e 	bl	8005c20 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006504:	7aa3      	ldrb	r3, [r4, #10]
 8006506:	b123      	cbz	r3, 8006512 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006508:	4a02      	ldr	r2, [pc, #8]	@ (8006514 <HAL_PCD_SuspendCallback+0x1c>)
 800650a:	6913      	ldr	r3, [r2, #16]
 800650c:	f043 0306 	orr.w	r3, r3, #6
 8006510:	6113      	str	r3, [r2, #16]
}
 8006512:	bd10      	pop	{r4, pc}
 8006514:	e000ed00 	.word	0xe000ed00

08006518 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006518:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800651c:	f7ff bb89 	b.w	8005c32 <USBD_LL_Resume>

08006520 <USBD_LL_Init>:
{
 8006520:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8006522:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <USBD_LL_Init+0x78>)
{
 8006524:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006526:	481d      	ldr	r0, [pc, #116]	@ (800659c <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8006528:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800652a:	2308      	movs	r3, #8
 800652c:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800652e:	2302      	movs	r3, #2
 8006530:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006532:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8006534:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006538:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800653c:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800653e:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006540:	f7fd f9b2 	bl	80038a8 <HAL_PCD_Init>
 8006544:	b108      	cbz	r0, 800654a <USBD_LL_Init+0x2a>
    Error_Handler( );
 8006546:	f7fc faa7 	bl	8002a98 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800654a:	2200      	movs	r2, #0
 800654c:	2318      	movs	r3, #24
 800654e:	4611      	mov	r1, r2
 8006550:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006554:	f7fe f833 	bl	80045be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006558:	2358      	movs	r3, #88	@ 0x58
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	@ 0x80
 800655e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006562:	f7fe f82c 	bl	80045be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006566:	23c0      	movs	r3, #192	@ 0xc0
 8006568:	2200      	movs	r2, #0
 800656a:	2181      	movs	r1, #129	@ 0x81
 800656c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006570:	f7fe f825 	bl	80045be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006574:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006578:	2200      	movs	r2, #0
 800657a:	2101      	movs	r1, #1
 800657c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006580:	f7fe f81d 	bl	80045be <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006588:	2200      	movs	r2, #0
 800658a:	2182      	movs	r1, #130	@ 0x82
 800658c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006590:	f7fe f815 	bl	80045be <HAL_PCDEx_PMAConfig>
}
 8006594:	2000      	movs	r0, #0
 8006596:	bd10      	pop	{r4, pc}
 8006598:	40005c00 	.word	0x40005c00
 800659c:	200045c8 	.word	0x200045c8

080065a0 <USBD_LL_Start>:
{
 80065a0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80065a2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065a6:	f7fd f9e2 	bl	800396e <HAL_PCD_Start>
}
 80065aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ae:	f7ff bf4f 	b.w	8006450 <USBD_Get_USB_Status>

080065b2 <USBD_LL_OpenEP>:
{
 80065b2:	b510      	push	{r4, lr}
 80065b4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 80065ba:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065bc:	4623      	mov	r3, r4
 80065be:	f7fd ff07 	bl	80043d0 <HAL_PCD_EP_Open>
}
 80065c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c6:	f7ff bf43 	b.w	8006450 <USBD_Get_USB_Status>

080065ca <USBD_LL_CloseEP>:
{
 80065ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065cc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065d0:	f7fd ff2e 	bl	8004430 <HAL_PCD_EP_Close>
}
 80065d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d8:	f7ff bf3a 	b.w	8006450 <USBD_Get_USB_Status>

080065dc <USBD_LL_StallEP>:
{
 80065dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065e2:	f7fd ff84 	bl	80044ee <HAL_PCD_EP_SetStall>
}
 80065e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ea:	f7ff bf31 	b.w	8006450 <USBD_Get_USB_Status>

080065ee <USBD_LL_ClearStallEP>:
{
 80065ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80065f4:	f7fd ffb1 	bl	800455a <HAL_PCD_EP_ClrStall>
}
 80065f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065fc:	f7ff bf28 	b.w	8006450 <USBD_Get_USB_Status>

08006600 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006600:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8006602:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006606:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800660a:	bf1b      	ittet	ne
 800660c:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8006610:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006614:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006618:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800661a:	bf08      	it	eq
 800661c:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8006620:	4770      	bx	lr

08006622 <USBD_LL_SetUSBAddress>:
{
 8006622:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006624:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006628:	f7fd f9ba 	bl	80039a0 <HAL_PCD_SetAddress>
}
 800662c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006630:	f7ff bf0e 	b.w	8006450 <USBD_Get_USB_Status>

08006634 <USBD_LL_Transmit>:
{
 8006634:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006636:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800663a:	f7fd ff40 	bl	80044be <HAL_PCD_EP_Transmit>
}
 800663e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006642:	f7ff bf05 	b.w	8006450 <USBD_Get_USB_Status>

08006646 <USBD_LL_PrepareReceive>:
{
 8006646:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006648:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800664c:	f7fd ff18 	bl	8004480 <HAL_PCD_EP_Receive>
}
 8006650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006654:	f7ff befc 	b.w	8006450 <USBD_Get_USB_Status>

08006658 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006658:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800665c:	f7fd bf27 	b.w	80044ae <HAL_PCD_EP_GetRxCount>

08006660 <USBD_static_malloc>:
}
 8006660:	4800      	ldr	r0, [pc, #0]	@ (8006664 <USBD_static_malloc+0x4>)
 8006662:	4770      	bx	lr
 8006664:	200043a8 	.word	0x200043a8

08006668 <USBD_static_free>:
}
 8006668:	4770      	bx	lr

0800666a <HAL_PCDEx_SetConnectionState>:
}
 800666a:	4770      	bx	lr

0800666c <atof>:
 800666c:	2100      	movs	r1, #0
 800666e:	f000 bdfb 	b.w	8007268 <strtod>

08006672 <sulp>:
 8006672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	460f      	mov	r7, r1
 8006678:	4690      	mov	r8, r2
 800667a:	f001 ffc9 	bl	8008610 <__ulp>
 800667e:	4604      	mov	r4, r0
 8006680:	460d      	mov	r5, r1
 8006682:	f1b8 0f00 	cmp.w	r8, #0
 8006686:	d011      	beq.n	80066ac <sulp+0x3a>
 8006688:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800668c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006690:	2b00      	cmp	r3, #0
 8006692:	dd0b      	ble.n	80066ac <sulp+0x3a>
 8006694:	2400      	movs	r4, #0
 8006696:	051b      	lsls	r3, r3, #20
 8006698:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800669c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066a0:	4622      	mov	r2, r4
 80066a2:	462b      	mov	r3, r5
 80066a4:	f7f9 ff18 	bl	80004d8 <__aeabi_dmul>
 80066a8:	4604      	mov	r4, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <_strtod_l>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	b09f      	sub	sp, #124	@ 0x7c
 80066be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066c0:	2200      	movs	r2, #0
 80066c2:	460c      	mov	r4, r1
 80066c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80066c6:	f04f 0a00 	mov.w	sl, #0
 80066ca:	f04f 0b00 	mov.w	fp, #0
 80066ce:	460a      	mov	r2, r1
 80066d0:	9005      	str	r0, [sp, #20]
 80066d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80066d4:	7811      	ldrb	r1, [r2, #0]
 80066d6:	292b      	cmp	r1, #43	@ 0x2b
 80066d8:	d048      	beq.n	800676c <_strtod_l+0xb4>
 80066da:	d836      	bhi.n	800674a <_strtod_l+0x92>
 80066dc:	290d      	cmp	r1, #13
 80066de:	d830      	bhi.n	8006742 <_strtod_l+0x8a>
 80066e0:	2908      	cmp	r1, #8
 80066e2:	d830      	bhi.n	8006746 <_strtod_l+0x8e>
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d039      	beq.n	800675c <_strtod_l+0xa4>
 80066e8:	2200      	movs	r2, #0
 80066ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80066ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066ee:	782a      	ldrb	r2, [r5, #0]
 80066f0:	2a30      	cmp	r2, #48	@ 0x30
 80066f2:	f040 80b0 	bne.w	8006856 <_strtod_l+0x19e>
 80066f6:	786a      	ldrb	r2, [r5, #1]
 80066f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066fc:	2a58      	cmp	r2, #88	@ 0x58
 80066fe:	d16c      	bne.n	80067da <_strtod_l+0x122>
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006704:	4a8f      	ldr	r2, [pc, #572]	@ (8006944 <_strtod_l+0x28c>)
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	ab1a      	add	r3, sp, #104	@ 0x68
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	9805      	ldr	r0, [sp, #20]
 800670e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006710:	a919      	add	r1, sp, #100	@ 0x64
 8006712:	f001 f87f 	bl	8007814 <__gethex>
 8006716:	f010 060f 	ands.w	r6, r0, #15
 800671a:	4604      	mov	r4, r0
 800671c:	d005      	beq.n	800672a <_strtod_l+0x72>
 800671e:	2e06      	cmp	r6, #6
 8006720:	d126      	bne.n	8006770 <_strtod_l+0xb8>
 8006722:	2300      	movs	r3, #0
 8006724:	3501      	adds	r5, #1
 8006726:	9519      	str	r5, [sp, #100]	@ 0x64
 8006728:	930e      	str	r3, [sp, #56]	@ 0x38
 800672a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 8582 	bne.w	8007236 <_strtod_l+0xb7e>
 8006732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006734:	b1bb      	cbz	r3, 8006766 <_strtod_l+0xae>
 8006736:	4650      	mov	r0, sl
 8006738:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800673c:	b01f      	add	sp, #124	@ 0x7c
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	2920      	cmp	r1, #32
 8006744:	d1d0      	bne.n	80066e8 <_strtod_l+0x30>
 8006746:	3201      	adds	r2, #1
 8006748:	e7c3      	b.n	80066d2 <_strtod_l+0x1a>
 800674a:	292d      	cmp	r1, #45	@ 0x2d
 800674c:	d1cc      	bne.n	80066e8 <_strtod_l+0x30>
 800674e:	2101      	movs	r1, #1
 8006750:	910e      	str	r1, [sp, #56]	@ 0x38
 8006752:	1c51      	adds	r1, r2, #1
 8006754:	9119      	str	r1, [sp, #100]	@ 0x64
 8006756:	7852      	ldrb	r2, [r2, #1]
 8006758:	2a00      	cmp	r2, #0
 800675a:	d1c7      	bne.n	80066ec <_strtod_l+0x34>
 800675c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800675e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 8566 	bne.w	8007232 <_strtod_l+0xb7a>
 8006766:	4650      	mov	r0, sl
 8006768:	4659      	mov	r1, fp
 800676a:	e7e7      	b.n	800673c <_strtod_l+0x84>
 800676c:	2100      	movs	r1, #0
 800676e:	e7ef      	b.n	8006750 <_strtod_l+0x98>
 8006770:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006772:	b13a      	cbz	r2, 8006784 <_strtod_l+0xcc>
 8006774:	2135      	movs	r1, #53	@ 0x35
 8006776:	a81c      	add	r0, sp, #112	@ 0x70
 8006778:	f002 f83a 	bl	80087f0 <__copybits>
 800677c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800677e:	9805      	ldr	r0, [sp, #20]
 8006780:	f001 fc1a 	bl	8007fb8 <_Bfree>
 8006784:	3e01      	subs	r6, #1
 8006786:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006788:	2e04      	cmp	r6, #4
 800678a:	d806      	bhi.n	800679a <_strtod_l+0xe2>
 800678c:	e8df f006 	tbb	[pc, r6]
 8006790:	201d0314 	.word	0x201d0314
 8006794:	14          	.byte	0x14
 8006795:	00          	.byte	0x00
 8006796:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800679a:	05e1      	lsls	r1, r4, #23
 800679c:	bf48      	it	mi
 800679e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067a6:	0d1b      	lsrs	r3, r3, #20
 80067a8:	051b      	lsls	r3, r3, #20
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1bd      	bne.n	800672a <_strtod_l+0x72>
 80067ae:	f000 ff37 	bl	8007620 <__errno>
 80067b2:	2322      	movs	r3, #34	@ 0x22
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	e7b8      	b.n	800672a <_strtod_l+0x72>
 80067b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067c8:	e7e7      	b.n	800679a <_strtod_l+0xe2>
 80067ca:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006948 <_strtod_l+0x290>
 80067ce:	e7e4      	b.n	800679a <_strtod_l+0xe2>
 80067d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80067d4:	f04f 3aff 	mov.w	sl, #4294967295
 80067d8:	e7df      	b.n	800679a <_strtod_l+0xe2>
 80067da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	9219      	str	r2, [sp, #100]	@ 0x64
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b30      	cmp	r3, #48	@ 0x30
 80067e4:	d0f9      	beq.n	80067da <_strtod_l+0x122>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d09f      	beq.n	800672a <_strtod_l+0x72>
 80067ea:	2301      	movs	r3, #1
 80067ec:	2700      	movs	r7, #0
 80067ee:	220a      	movs	r2, #10
 80067f0:	46b9      	mov	r9, r7
 80067f2:	9308      	str	r3, [sp, #32]
 80067f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067f6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80067f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80067fa:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067fc:	7805      	ldrb	r5, [r0, #0]
 80067fe:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006802:	b2d9      	uxtb	r1, r3
 8006804:	2909      	cmp	r1, #9
 8006806:	d928      	bls.n	800685a <_strtod_l+0x1a2>
 8006808:	2201      	movs	r2, #1
 800680a:	4950      	ldr	r1, [pc, #320]	@ (800694c <_strtod_l+0x294>)
 800680c:	f000 fe9d 	bl	800754a <strncmp>
 8006810:	2800      	cmp	r0, #0
 8006812:	d032      	beq.n	800687a <_strtod_l+0x1c2>
 8006814:	2000      	movs	r0, #0
 8006816:	462a      	mov	r2, r5
 8006818:	4603      	mov	r3, r0
 800681a:	464d      	mov	r5, r9
 800681c:	900a      	str	r0, [sp, #40]	@ 0x28
 800681e:	2a65      	cmp	r2, #101	@ 0x65
 8006820:	d001      	beq.n	8006826 <_strtod_l+0x16e>
 8006822:	2a45      	cmp	r2, #69	@ 0x45
 8006824:	d114      	bne.n	8006850 <_strtod_l+0x198>
 8006826:	b91d      	cbnz	r5, 8006830 <_strtod_l+0x178>
 8006828:	9a08      	ldr	r2, [sp, #32]
 800682a:	4302      	orrs	r2, r0
 800682c:	d096      	beq.n	800675c <_strtod_l+0xa4>
 800682e:	2500      	movs	r5, #0
 8006830:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006832:	1c62      	adds	r2, r4, #1
 8006834:	9219      	str	r2, [sp, #100]	@ 0x64
 8006836:	7862      	ldrb	r2, [r4, #1]
 8006838:	2a2b      	cmp	r2, #43	@ 0x2b
 800683a:	d07a      	beq.n	8006932 <_strtod_l+0x27a>
 800683c:	2a2d      	cmp	r2, #45	@ 0x2d
 800683e:	d07e      	beq.n	800693e <_strtod_l+0x286>
 8006840:	f04f 0c00 	mov.w	ip, #0
 8006844:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006848:	2909      	cmp	r1, #9
 800684a:	f240 8085 	bls.w	8006958 <_strtod_l+0x2a0>
 800684e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006850:	f04f 0800 	mov.w	r8, #0
 8006854:	e0a5      	b.n	80069a2 <_strtod_l+0x2ea>
 8006856:	2300      	movs	r3, #0
 8006858:	e7c8      	b.n	80067ec <_strtod_l+0x134>
 800685a:	f1b9 0f08 	cmp.w	r9, #8
 800685e:	bfd8      	it	le
 8006860:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006862:	f100 0001 	add.w	r0, r0, #1
 8006866:	bfd6      	itet	le
 8006868:	fb02 3301 	mlale	r3, r2, r1, r3
 800686c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006870:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006872:	f109 0901 	add.w	r9, r9, #1
 8006876:	9019      	str	r0, [sp, #100]	@ 0x64
 8006878:	e7bf      	b.n	80067fa <_strtod_l+0x142>
 800687a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006880:	785a      	ldrb	r2, [r3, #1]
 8006882:	f1b9 0f00 	cmp.w	r9, #0
 8006886:	d03b      	beq.n	8006900 <_strtod_l+0x248>
 8006888:	464d      	mov	r5, r9
 800688a:	900a      	str	r0, [sp, #40]	@ 0x28
 800688c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006890:	2b09      	cmp	r3, #9
 8006892:	d912      	bls.n	80068ba <_strtod_l+0x202>
 8006894:	2301      	movs	r3, #1
 8006896:	e7c2      	b.n	800681e <_strtod_l+0x166>
 8006898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800689a:	3001      	adds	r0, #1
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	9219      	str	r2, [sp, #100]	@ 0x64
 80068a0:	785a      	ldrb	r2, [r3, #1]
 80068a2:	2a30      	cmp	r2, #48	@ 0x30
 80068a4:	d0f8      	beq.n	8006898 <_strtod_l+0x1e0>
 80068a6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	f200 84c8 	bhi.w	8007240 <_strtod_l+0xb88>
 80068b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80068b2:	2000      	movs	r0, #0
 80068b4:	4605      	mov	r5, r0
 80068b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80068ba:	3a30      	subs	r2, #48	@ 0x30
 80068bc:	f100 0301 	add.w	r3, r0, #1
 80068c0:	d018      	beq.n	80068f4 <_strtod_l+0x23c>
 80068c2:	462e      	mov	r6, r5
 80068c4:	f04f 0e0a 	mov.w	lr, #10
 80068c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068ca:	4419      	add	r1, r3
 80068cc:	910a      	str	r1, [sp, #40]	@ 0x28
 80068ce:	1c71      	adds	r1, r6, #1
 80068d0:	eba1 0c05 	sub.w	ip, r1, r5
 80068d4:	4563      	cmp	r3, ip
 80068d6:	dc15      	bgt.n	8006904 <_strtod_l+0x24c>
 80068d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80068dc:	182b      	adds	r3, r5, r0
 80068de:	2b08      	cmp	r3, #8
 80068e0:	f105 0501 	add.w	r5, r5, #1
 80068e4:	4405      	add	r5, r0
 80068e6:	dc1a      	bgt.n	800691e <_strtod_l+0x266>
 80068e8:	230a      	movs	r3, #10
 80068ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ec:	fb03 2301 	mla	r3, r3, r1, r2
 80068f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f2:	2300      	movs	r3, #0
 80068f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068f6:	4618      	mov	r0, r3
 80068f8:	1c51      	adds	r1, r2, #1
 80068fa:	9119      	str	r1, [sp, #100]	@ 0x64
 80068fc:	7852      	ldrb	r2, [r2, #1]
 80068fe:	e7c5      	b.n	800688c <_strtod_l+0x1d4>
 8006900:	4648      	mov	r0, r9
 8006902:	e7ce      	b.n	80068a2 <_strtod_l+0x1ea>
 8006904:	2e08      	cmp	r6, #8
 8006906:	dc05      	bgt.n	8006914 <_strtod_l+0x25c>
 8006908:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800690a:	fb0e f606 	mul.w	r6, lr, r6
 800690e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006910:	460e      	mov	r6, r1
 8006912:	e7dc      	b.n	80068ce <_strtod_l+0x216>
 8006914:	2910      	cmp	r1, #16
 8006916:	bfd8      	it	le
 8006918:	fb0e f707 	mulle.w	r7, lr, r7
 800691c:	e7f8      	b.n	8006910 <_strtod_l+0x258>
 800691e:	2b0f      	cmp	r3, #15
 8006920:	bfdc      	itt	le
 8006922:	230a      	movle	r3, #10
 8006924:	fb03 2707 	mlale	r7, r3, r7, r2
 8006928:	e7e3      	b.n	80068f2 <_strtod_l+0x23a>
 800692a:	2300      	movs	r3, #0
 800692c:	930a      	str	r3, [sp, #40]	@ 0x28
 800692e:	2301      	movs	r3, #1
 8006930:	e77a      	b.n	8006828 <_strtod_l+0x170>
 8006932:	f04f 0c00 	mov.w	ip, #0
 8006936:	1ca2      	adds	r2, r4, #2
 8006938:	9219      	str	r2, [sp, #100]	@ 0x64
 800693a:	78a2      	ldrb	r2, [r4, #2]
 800693c:	e782      	b.n	8006844 <_strtod_l+0x18c>
 800693e:	f04f 0c01 	mov.w	ip, #1
 8006942:	e7f8      	b.n	8006936 <_strtod_l+0x27e>
 8006944:	0800bfcc 	.word	0x0800bfcc
 8006948:	7ff00000 	.word	0x7ff00000
 800694c:	0800be25 	.word	0x0800be25
 8006950:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006952:	1c51      	adds	r1, r2, #1
 8006954:	9119      	str	r1, [sp, #100]	@ 0x64
 8006956:	7852      	ldrb	r2, [r2, #1]
 8006958:	2a30      	cmp	r2, #48	@ 0x30
 800695a:	d0f9      	beq.n	8006950 <_strtod_l+0x298>
 800695c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006960:	2908      	cmp	r1, #8
 8006962:	f63f af75 	bhi.w	8006850 <_strtod_l+0x198>
 8006966:	f04f 080a 	mov.w	r8, #10
 800696a:	3a30      	subs	r2, #48	@ 0x30
 800696c:	9209      	str	r2, [sp, #36]	@ 0x24
 800696e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006970:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006974:	1c56      	adds	r6, r2, #1
 8006976:	9619      	str	r6, [sp, #100]	@ 0x64
 8006978:	7852      	ldrb	r2, [r2, #1]
 800697a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800697e:	f1be 0f09 	cmp.w	lr, #9
 8006982:	d939      	bls.n	80069f8 <_strtod_l+0x340>
 8006984:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006986:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800698a:	1a76      	subs	r6, r6, r1
 800698c:	2e08      	cmp	r6, #8
 800698e:	dc03      	bgt.n	8006998 <_strtod_l+0x2e0>
 8006990:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006992:	4588      	cmp	r8, r1
 8006994:	bfa8      	it	ge
 8006996:	4688      	movge	r8, r1
 8006998:	f1bc 0f00 	cmp.w	ip, #0
 800699c:	d001      	beq.n	80069a2 <_strtod_l+0x2ea>
 800699e:	f1c8 0800 	rsb	r8, r8, #0
 80069a2:	2d00      	cmp	r5, #0
 80069a4:	d14e      	bne.n	8006a44 <_strtod_l+0x38c>
 80069a6:	9908      	ldr	r1, [sp, #32]
 80069a8:	4308      	orrs	r0, r1
 80069aa:	f47f aebe 	bne.w	800672a <_strtod_l+0x72>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f aed4 	bne.w	800675c <_strtod_l+0xa4>
 80069b4:	2a69      	cmp	r2, #105	@ 0x69
 80069b6:	d028      	beq.n	8006a0a <_strtod_l+0x352>
 80069b8:	dc25      	bgt.n	8006a06 <_strtod_l+0x34e>
 80069ba:	2a49      	cmp	r2, #73	@ 0x49
 80069bc:	d025      	beq.n	8006a0a <_strtod_l+0x352>
 80069be:	2a4e      	cmp	r2, #78	@ 0x4e
 80069c0:	f47f aecc 	bne.w	800675c <_strtod_l+0xa4>
 80069c4:	4999      	ldr	r1, [pc, #612]	@ (8006c2c <_strtod_l+0x574>)
 80069c6:	a819      	add	r0, sp, #100	@ 0x64
 80069c8:	f001 f946 	bl	8007c58 <__match>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f43f aec5 	beq.w	800675c <_strtod_l+0xa4>
 80069d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b28      	cmp	r3, #40	@ 0x28
 80069d8:	d12e      	bne.n	8006a38 <_strtod_l+0x380>
 80069da:	4995      	ldr	r1, [pc, #596]	@ (8006c30 <_strtod_l+0x578>)
 80069dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80069de:	a819      	add	r0, sp, #100	@ 0x64
 80069e0:	f001 f94e 	bl	8007c80 <__hexnan>
 80069e4:	2805      	cmp	r0, #5
 80069e6:	d127      	bne.n	8006a38 <_strtod_l+0x380>
 80069e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069f6:	e698      	b.n	800672a <_strtod_l+0x72>
 80069f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069fa:	fb08 2101 	mla	r1, r8, r1, r2
 80069fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a04:	e7b5      	b.n	8006972 <_strtod_l+0x2ba>
 8006a06:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a08:	e7da      	b.n	80069c0 <_strtod_l+0x308>
 8006a0a:	498a      	ldr	r1, [pc, #552]	@ (8006c34 <_strtod_l+0x57c>)
 8006a0c:	a819      	add	r0, sp, #100	@ 0x64
 8006a0e:	f001 f923 	bl	8007c58 <__match>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f43f aea2 	beq.w	800675c <_strtod_l+0xa4>
 8006a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a1a:	4987      	ldr	r1, [pc, #540]	@ (8006c38 <_strtod_l+0x580>)
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	a819      	add	r0, sp, #100	@ 0x64
 8006a20:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a22:	f001 f919 	bl	8007c58 <__match>
 8006a26:	b910      	cbnz	r0, 8006a2e <_strtod_l+0x376>
 8006a28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006c3c <_strtod_l+0x584>
 8006a36:	e678      	b.n	800672a <_strtod_l+0x72>
 8006a38:	4881      	ldr	r0, [pc, #516]	@ (8006c40 <_strtod_l+0x588>)
 8006a3a:	f000 fe35 	bl	80076a8 <nan>
 8006a3e:	4682      	mov	sl, r0
 8006a40:	468b      	mov	fp, r1
 8006a42:	e672      	b.n	800672a <_strtod_l+0x72>
 8006a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a46:	f1b9 0f00 	cmp.w	r9, #0
 8006a4a:	bf08      	it	eq
 8006a4c:	46a9      	moveq	r9, r5
 8006a4e:	eba8 0303 	sub.w	r3, r8, r3
 8006a52:	2d10      	cmp	r5, #16
 8006a54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a56:	462c      	mov	r4, r5
 8006a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5a:	bfa8      	it	ge
 8006a5c:	2410      	movge	r4, #16
 8006a5e:	f7f9 fcc1 	bl	80003e4 <__aeabi_ui2d>
 8006a62:	2d09      	cmp	r5, #9
 8006a64:	4682      	mov	sl, r0
 8006a66:	468b      	mov	fp, r1
 8006a68:	dc11      	bgt.n	8006a8e <_strtod_l+0x3d6>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f43f ae5c 	beq.w	800672a <_strtod_l+0x72>
 8006a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a74:	dd76      	ble.n	8006b64 <_strtod_l+0x4ac>
 8006a76:	2b16      	cmp	r3, #22
 8006a78:	dc5d      	bgt.n	8006b36 <_strtod_l+0x47e>
 8006a7a:	4972      	ldr	r1, [pc, #456]	@ (8006c44 <_strtod_l+0x58c>)
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a82:	465b      	mov	r3, fp
 8006a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	e7d7      	b.n	8006a3e <_strtod_l+0x386>
 8006a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006c44 <_strtod_l+0x58c>)
 8006a90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	f7f9 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4650      	mov	r0, sl
 8006aac:	4659      	mov	r1, fp
 8006aae:	f7f9 fb5d 	bl	800016c <__adddf3>
 8006ab2:	2d0f      	cmp	r5, #15
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	468b      	mov	fp, r1
 8006ab8:	ddd7      	ble.n	8006a6a <_strtod_l+0x3b2>
 8006aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abc:	1b2c      	subs	r4, r5, r4
 8006abe:	441c      	add	r4, r3
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	f340 8093 	ble.w	8006bec <_strtod_l+0x534>
 8006ac6:	f014 030f 	ands.w	r3, r4, #15
 8006aca:	d00a      	beq.n	8006ae2 <_strtod_l+0x42a>
 8006acc:	495d      	ldr	r1, [pc, #372]	@ (8006c44 <_strtod_l+0x58c>)
 8006ace:	4652      	mov	r2, sl
 8006ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad8:	465b      	mov	r3, fp
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	4682      	mov	sl, r0
 8006ae0:	468b      	mov	fp, r1
 8006ae2:	f034 040f 	bics.w	r4, r4, #15
 8006ae6:	d073      	beq.n	8006bd0 <_strtod_l+0x518>
 8006ae8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006aec:	dd49      	ble.n	8006b82 <_strtod_l+0x4ca>
 8006aee:	2400      	movs	r4, #0
 8006af0:	46a0      	mov	r8, r4
 8006af2:	46a1      	mov	r9, r4
 8006af4:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006af6:	2322      	movs	r3, #34	@ 0x22
 8006af8:	f04f 0a00 	mov.w	sl, #0
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006c3c <_strtod_l+0x584>
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f43f ae0f 	beq.w	800672a <_strtod_l+0x72>
 8006b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b0e:	9805      	ldr	r0, [sp, #20]
 8006b10:	f001 fa52 	bl	8007fb8 <_Bfree>
 8006b14:	4649      	mov	r1, r9
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	f001 fa4e 	bl	8007fb8 <_Bfree>
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	9805      	ldr	r0, [sp, #20]
 8006b20:	f001 fa4a 	bl	8007fb8 <_Bfree>
 8006b24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b26:	9805      	ldr	r0, [sp, #20]
 8006b28:	f001 fa46 	bl	8007fb8 <_Bfree>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	9805      	ldr	r0, [sp, #20]
 8006b30:	f001 fa42 	bl	8007fb8 <_Bfree>
 8006b34:	e5f9      	b.n	800672a <_strtod_l+0x72>
 8006b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	dbbc      	blt.n	8006aba <_strtod_l+0x402>
 8006b40:	4c40      	ldr	r4, [pc, #256]	@ (8006c44 <_strtod_l+0x58c>)
 8006b42:	f1c5 050f 	rsb	r5, r5, #15
 8006b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b50:	465b      	mov	r3, fp
 8006b52:	f7f9 fcc1 	bl	80004d8 <__aeabi_dmul>
 8006b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b58:	1b5d      	subs	r5, r3, r5
 8006b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b62:	e791      	b.n	8006a88 <_strtod_l+0x3d0>
 8006b64:	3316      	adds	r3, #22
 8006b66:	dba8      	blt.n	8006aba <_strtod_l+0x402>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	eba3 0808 	sub.w	r8, r3, r8
 8006b70:	4b34      	ldr	r3, [pc, #208]	@ (8006c44 <_strtod_l+0x58c>)
 8006b72:	4659      	mov	r1, fp
 8006b74:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b78:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b7c:	f7f9 fdd6 	bl	800072c <__aeabi_ddiv>
 8006b80:	e75d      	b.n	8006a3e <_strtod_l+0x386>
 8006b82:	2300      	movs	r3, #0
 8006b84:	4650      	mov	r0, sl
 8006b86:	4659      	mov	r1, fp
 8006b88:	461e      	mov	r6, r3
 8006b8a:	4f2f      	ldr	r7, [pc, #188]	@ (8006c48 <_strtod_l+0x590>)
 8006b8c:	1124      	asrs	r4, r4, #4
 8006b8e:	2c01      	cmp	r4, #1
 8006b90:	dc21      	bgt.n	8006bd6 <_strtod_l+0x51e>
 8006b92:	b10b      	cbz	r3, 8006b98 <_strtod_l+0x4e0>
 8006b94:	4682      	mov	sl, r0
 8006b96:	468b      	mov	fp, r1
 8006b98:	492b      	ldr	r1, [pc, #172]	@ (8006c48 <_strtod_l+0x590>)
 8006b9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006ba2:	4652      	mov	r2, sl
 8006ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba8:	465b      	mov	r3, fp
 8006baa:	f7f9 fc95 	bl	80004d8 <__aeabi_dmul>
 8006bae:	4b23      	ldr	r3, [pc, #140]	@ (8006c3c <_strtod_l+0x584>)
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	4925      	ldr	r1, [pc, #148]	@ (8006c4c <_strtod_l+0x594>)
 8006bb6:	4682      	mov	sl, r0
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	d898      	bhi.n	8006aee <_strtod_l+0x436>
 8006bbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf86      	itte	hi
 8006bc4:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bc8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006c50 <_strtod_l+0x598>
 8006bcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9308      	str	r3, [sp, #32]
 8006bd4:	e076      	b.n	8006cc4 <_strtod_l+0x60c>
 8006bd6:	07e2      	lsls	r2, r4, #31
 8006bd8:	d504      	bpl.n	8006be4 <_strtod_l+0x52c>
 8006bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bde:	f7f9 fc7b 	bl	80004d8 <__aeabi_dmul>
 8006be2:	2301      	movs	r3, #1
 8006be4:	3601      	adds	r6, #1
 8006be6:	1064      	asrs	r4, r4, #1
 8006be8:	3708      	adds	r7, #8
 8006bea:	e7d0      	b.n	8006b8e <_strtod_l+0x4d6>
 8006bec:	d0f0      	beq.n	8006bd0 <_strtod_l+0x518>
 8006bee:	4264      	negs	r4, r4
 8006bf0:	f014 020f 	ands.w	r2, r4, #15
 8006bf4:	d00a      	beq.n	8006c0c <_strtod_l+0x554>
 8006bf6:	4b13      	ldr	r3, [pc, #76]	@ (8006c44 <_strtod_l+0x58c>)
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bfe:	4659      	mov	r1, fp
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fd92 	bl	800072c <__aeabi_ddiv>
 8006c08:	4682      	mov	sl, r0
 8006c0a:	468b      	mov	fp, r1
 8006c0c:	1124      	asrs	r4, r4, #4
 8006c0e:	d0df      	beq.n	8006bd0 <_strtod_l+0x518>
 8006c10:	2c1f      	cmp	r4, #31
 8006c12:	dd1f      	ble.n	8006c54 <_strtod_l+0x59c>
 8006c14:	2400      	movs	r4, #0
 8006c16:	46a0      	mov	r8, r4
 8006c18:	46a1      	mov	r9, r4
 8006c1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c1c:	2322      	movs	r3, #34	@ 0x22
 8006c1e:	9a05      	ldr	r2, [sp, #20]
 8006c20:	f04f 0a00 	mov.w	sl, #0
 8006c24:	f04f 0b00 	mov.w	fp, #0
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	e76b      	b.n	8006b04 <_strtod_l+0x44c>
 8006c2c:	0800be30 	.word	0x0800be30
 8006c30:	0800bfb8 	.word	0x0800bfb8
 8006c34:	0800be27 	.word	0x0800be27
 8006c38:	0800be2a 	.word	0x0800be2a
 8006c3c:	7ff00000 	.word	0x7ff00000
 8006c40:	0800bc79 	.word	0x0800bc79
 8006c44:	0800c040 	.word	0x0800c040
 8006c48:	0800c018 	.word	0x0800c018
 8006c4c:	7ca00000 	.word	0x7ca00000
 8006c50:	7fefffff 	.word	0x7fefffff
 8006c54:	f014 0310 	ands.w	r3, r4, #16
 8006c58:	bf18      	it	ne
 8006c5a:	236a      	movne	r3, #106	@ 0x6a
 8006c5c:	4650      	mov	r0, sl
 8006c5e:	9308      	str	r3, [sp, #32]
 8006c60:	4659      	mov	r1, fp
 8006c62:	2300      	movs	r3, #0
 8006c64:	4e77      	ldr	r6, [pc, #476]	@ (8006e44 <_strtod_l+0x78c>)
 8006c66:	07e7      	lsls	r7, r4, #31
 8006c68:	d504      	bpl.n	8006c74 <_strtod_l+0x5bc>
 8006c6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	2301      	movs	r3, #1
 8006c74:	1064      	asrs	r4, r4, #1
 8006c76:	f106 0608 	add.w	r6, r6, #8
 8006c7a:	d1f4      	bne.n	8006c66 <_strtod_l+0x5ae>
 8006c7c:	b10b      	cbz	r3, 8006c82 <_strtod_l+0x5ca>
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	b1b3      	cbz	r3, 8006cb4 <_strtod_l+0x5fc>
 8006c86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	4659      	mov	r1, fp
 8006c92:	dd0f      	ble.n	8006cb4 <_strtod_l+0x5fc>
 8006c94:	2b1f      	cmp	r3, #31
 8006c96:	dd58      	ble.n	8006d4a <_strtod_l+0x692>
 8006c98:	2b34      	cmp	r3, #52	@ 0x34
 8006c9a:	bfd8      	it	le
 8006c9c:	f04f 33ff 	movle.w	r3, #4294967295
 8006ca0:	f04f 0a00 	mov.w	sl, #0
 8006ca4:	bfcf      	iteee	gt
 8006ca6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006caa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cae:	4093      	lslle	r3, r2
 8006cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1a7      	bne.n	8006c14 <_strtod_l+0x55c>
 8006cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc6:	464a      	mov	r2, r9
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ccc:	462b      	mov	r3, r5
 8006cce:	9805      	ldr	r0, [sp, #20]
 8006cd0:	f001 f9da 	bl	8008088 <__s2b>
 8006cd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af09 	beq.w	8006aee <_strtod_l+0x436>
 8006cdc:	2400      	movs	r4, #0
 8006cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	eba3 0308 	sub.w	r3, r3, r8
 8006ce8:	bfa8      	it	ge
 8006cea:	2300      	movge	r3, #0
 8006cec:	46a0      	mov	r8, r4
 8006cee:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cf0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cf4:	9316      	str	r3, [sp, #88]	@ 0x58
 8006cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cf8:	9805      	ldr	r0, [sp, #20]
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	f001 f91c 	bl	8007f38 <_Balloc>
 8006d00:	4681      	mov	r9, r0
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f43f aef7 	beq.w	8006af6 <_strtod_l+0x43e>
 8006d08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d0a:	300c      	adds	r0, #12
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	f103 010c 	add.w	r1, r3, #12
 8006d12:	3202      	adds	r2, #2
 8006d14:	0092      	lsls	r2, r2, #2
 8006d16:	f000 fcb8 	bl	800768a <memcpy>
 8006d1a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4652      	mov	r2, sl
 8006d24:	465b      	mov	r3, fp
 8006d26:	9805      	ldr	r0, [sp, #20]
 8006d28:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d2c:	f001 fcd8 	bl	80086e0 <__d2b>
 8006d30:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d32:	2800      	cmp	r0, #0
 8006d34:	f43f aedf 	beq.w	8006af6 <_strtod_l+0x43e>
 8006d38:	2101      	movs	r1, #1
 8006d3a:	9805      	ldr	r0, [sp, #20]
 8006d3c:	f001 fa3a 	bl	80081b4 <__i2b>
 8006d40:	4680      	mov	r8, r0
 8006d42:	b948      	cbnz	r0, 8006d58 <_strtod_l+0x6a0>
 8006d44:	f04f 0800 	mov.w	r8, #0
 8006d48:	e6d5      	b.n	8006af6 <_strtod_l+0x43e>
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	ea03 0a0a 	and.w	sl, r3, sl
 8006d56:	e7ad      	b.n	8006cb4 <_strtod_l+0x5fc>
 8006d58:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d5c:	2d00      	cmp	r5, #0
 8006d5e:	bfab      	itete	ge
 8006d60:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d62:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d64:	18ef      	addge	r7, r5, r3
 8006d66:	1b5e      	sublt	r6, r3, r5
 8006d68:	9b08      	ldr	r3, [sp, #32]
 8006d6a:	bfa8      	it	ge
 8006d6c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d6e:	eba5 0503 	sub.w	r5, r5, r3
 8006d72:	4415      	add	r5, r2
 8006d74:	4b34      	ldr	r3, [pc, #208]	@ (8006e48 <_strtod_l+0x790>)
 8006d76:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d7a:	bfb8      	it	lt
 8006d7c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d7e:	429d      	cmp	r5, r3
 8006d80:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d84:	da50      	bge.n	8006e28 <_strtod_l+0x770>
 8006d86:	1b5b      	subs	r3, r3, r5
 8006d88:	2b1f      	cmp	r3, #31
 8006d8a:	f04f 0101 	mov.w	r1, #1
 8006d8e:	eba2 0203 	sub.w	r2, r2, r3
 8006d92:	dc3d      	bgt.n	8006e10 <_strtod_l+0x758>
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d9e:	18bd      	adds	r5, r7, r2
 8006da0:	9b08      	ldr	r3, [sp, #32]
 8006da2:	42af      	cmp	r7, r5
 8006da4:	4416      	add	r6, r2
 8006da6:	441e      	add	r6, r3
 8006da8:	463b      	mov	r3, r7
 8006daa:	bfa8      	it	ge
 8006dac:	462b      	movge	r3, r5
 8006dae:	42b3      	cmp	r3, r6
 8006db0:	bfa8      	it	ge
 8006db2:	4633      	movge	r3, r6
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfc2      	ittt	gt
 8006db8:	1aed      	subgt	r5, r5, r3
 8006dba:	1af6      	subgt	r6, r6, r3
 8006dbc:	1aff      	subgt	r7, r7, r3
 8006dbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dd16      	ble.n	8006df2 <_strtod_l+0x73a>
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	9805      	ldr	r0, [sp, #20]
 8006dca:	f001 faab 	bl	8008324 <__pow5mult>
 8006dce:	4680      	mov	r8, r0
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d0b7      	beq.n	8006d44 <_strtod_l+0x68c>
 8006dd4:	4601      	mov	r1, r0
 8006dd6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dd8:	9805      	ldr	r0, [sp, #20]
 8006dda:	f001 fa01 	bl	80081e0 <__multiply>
 8006dde:	900a      	str	r0, [sp, #40]	@ 0x28
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f43f ae88 	beq.w	8006af6 <_strtod_l+0x43e>
 8006de6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006de8:	9805      	ldr	r0, [sp, #20]
 8006dea:	f001 f8e5 	bl	8007fb8 <_Bfree>
 8006dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df2:	2d00      	cmp	r5, #0
 8006df4:	dc1d      	bgt.n	8006e32 <_strtod_l+0x77a>
 8006df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dd27      	ble.n	8006e4c <_strtod_l+0x794>
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e00:	9805      	ldr	r0, [sp, #20]
 8006e02:	f001 fa8f 	bl	8008324 <__pow5mult>
 8006e06:	4681      	mov	r9, r0
 8006e08:	bb00      	cbnz	r0, 8006e4c <_strtod_l+0x794>
 8006e0a:	f04f 0900 	mov.w	r9, #0
 8006e0e:	e672      	b.n	8006af6 <_strtod_l+0x43e>
 8006e10:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e14:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e18:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e1c:	35e2      	adds	r5, #226	@ 0xe2
 8006e1e:	fa01 f305 	lsl.w	r3, r1, r5
 8006e22:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e24:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e26:	e7ba      	b.n	8006d9e <_strtod_l+0x6e6>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e30:	e7b5      	b.n	8006d9e <_strtod_l+0x6e6>
 8006e32:	462a      	mov	r2, r5
 8006e34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e36:	9805      	ldr	r0, [sp, #20]
 8006e38:	f001 face 	bl	80083d8 <__lshift>
 8006e3c:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d1d9      	bne.n	8006df6 <_strtod_l+0x73e>
 8006e42:	e658      	b.n	8006af6 <_strtod_l+0x43e>
 8006e44:	0800bfe0 	.word	0x0800bfe0
 8006e48:	fffffc02 	.word	0xfffffc02
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	dd07      	ble.n	8006e60 <_strtod_l+0x7a8>
 8006e50:	4649      	mov	r1, r9
 8006e52:	4632      	mov	r2, r6
 8006e54:	9805      	ldr	r0, [sp, #20]
 8006e56:	f001 fabf 	bl	80083d8 <__lshift>
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0d4      	beq.n	8006e0a <_strtod_l+0x752>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	dd08      	ble.n	8006e76 <_strtod_l+0x7be>
 8006e64:	4641      	mov	r1, r8
 8006e66:	463a      	mov	r2, r7
 8006e68:	9805      	ldr	r0, [sp, #20]
 8006e6a:	f001 fab5 	bl	80083d8 <__lshift>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	2800      	cmp	r0, #0
 8006e72:	f43f ae40 	beq.w	8006af6 <_strtod_l+0x43e>
 8006e76:	464a      	mov	r2, r9
 8006e78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e7a:	9805      	ldr	r0, [sp, #20]
 8006e7c:	f001 fb34 	bl	80084e8 <__mdiff>
 8006e80:	4604      	mov	r4, r0
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f43f ae37 	beq.w	8006af6 <_strtod_l+0x43e>
 8006e88:	68c3      	ldr	r3, [r0, #12]
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60c3      	str	r3, [r0, #12]
 8006e92:	f001 fb0d 	bl	80084b0 <__mcmp>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	da3d      	bge.n	8006f16 <_strtod_l+0x85e>
 8006e9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e9c:	ea53 030a 	orrs.w	r3, r3, sl
 8006ea0:	d163      	bne.n	8006f6a <_strtod_l+0x8b2>
 8006ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d15f      	bne.n	8006f6a <_strtod_l+0x8b2>
 8006eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eae:	0d1b      	lsrs	r3, r3, #20
 8006eb0:	051b      	lsls	r3, r3, #20
 8006eb2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eb6:	d958      	bls.n	8006f6a <_strtod_l+0x8b2>
 8006eb8:	6963      	ldr	r3, [r4, #20]
 8006eba:	b913      	cbnz	r3, 8006ec2 <_strtod_l+0x80a>
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	dd53      	ble.n	8006f6a <_strtod_l+0x8b2>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	9805      	ldr	r0, [sp, #20]
 8006ec8:	f001 fa86 	bl	80083d8 <__lshift>
 8006ecc:	4641      	mov	r1, r8
 8006ece:	4604      	mov	r4, r0
 8006ed0:	f001 faee 	bl	80084b0 <__mcmp>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	dd48      	ble.n	8006f6a <_strtod_l+0x8b2>
 8006ed8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006edc:	9a08      	ldr	r2, [sp, #32]
 8006ede:	0d1b      	lsrs	r3, r3, #20
 8006ee0:	051b      	lsls	r3, r3, #20
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	d062      	beq.n	8006fac <_strtod_l+0x8f4>
 8006ee6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eea:	d85f      	bhi.n	8006fac <_strtod_l+0x8f4>
 8006eec:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ef0:	f67f ae94 	bls.w	8006c1c <_strtod_l+0x564>
 8006ef4:	4650      	mov	r0, sl
 8006ef6:	4659      	mov	r1, fp
 8006ef8:	4ba3      	ldr	r3, [pc, #652]	@ (8007188 <_strtod_l+0xad0>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7f9 faec 	bl	80004d8 <__aeabi_dmul>
 8006f00:	4ba2      	ldr	r3, [pc, #648]	@ (800718c <_strtod_l+0xad4>)
 8006f02:	4682      	mov	sl, r0
 8006f04:	400b      	ands	r3, r1
 8006f06:	468b      	mov	fp, r1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f47f adff 	bne.w	8006b0c <_strtod_l+0x454>
 8006f0e:	2322      	movs	r3, #34	@ 0x22
 8006f10:	9a05      	ldr	r2, [sp, #20]
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e5fa      	b.n	8006b0c <_strtod_l+0x454>
 8006f16:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006f1a:	d165      	bne.n	8006fe8 <_strtod_l+0x930>
 8006f1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f22:	b35a      	cbz	r2, 8006f7c <_strtod_l+0x8c4>
 8006f24:	4a9a      	ldr	r2, [pc, #616]	@ (8007190 <_strtod_l+0xad8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d12b      	bne.n	8006f82 <_strtod_l+0x8ca>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	b303      	cbz	r3, 8006f72 <_strtod_l+0x8ba>
 8006f30:	465a      	mov	r2, fp
 8006f32:	4b96      	ldr	r3, [pc, #600]	@ (800718c <_strtod_l+0xad4>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	d81b      	bhi.n	8006f78 <_strtod_l+0x8c0>
 8006f40:	0d1b      	lsrs	r3, r3, #20
 8006f42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	d119      	bne.n	8006f82 <_strtod_l+0x8ca>
 8006f4e:	4b91      	ldr	r3, [pc, #580]	@ (8007194 <_strtod_l+0xadc>)
 8006f50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d102      	bne.n	8006f5c <_strtod_l+0x8a4>
 8006f56:	3101      	adds	r1, #1
 8006f58:	f43f adcd 	beq.w	8006af6 <_strtod_l+0x43e>
 8006f5c:	f04f 0a00 	mov.w	sl, #0
 8006f60:	4b8a      	ldr	r3, [pc, #552]	@ (800718c <_strtod_l+0xad4>)
 8006f62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f64:	401a      	ands	r2, r3
 8006f66:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f6a:	9b08      	ldr	r3, [sp, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1c1      	bne.n	8006ef4 <_strtod_l+0x83c>
 8006f70:	e5cc      	b.n	8006b0c <_strtod_l+0x454>
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	e7e8      	b.n	8006f4a <_strtod_l+0x892>
 8006f78:	4613      	mov	r3, r2
 8006f7a:	e7e6      	b.n	8006f4a <_strtod_l+0x892>
 8006f7c:	ea53 030a 	orrs.w	r3, r3, sl
 8006f80:	d0aa      	beq.n	8006ed8 <_strtod_l+0x820>
 8006f82:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f84:	b1db      	cbz	r3, 8006fbe <_strtod_l+0x906>
 8006f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f88:	4213      	tst	r3, r2
 8006f8a:	d0ee      	beq.n	8006f6a <_strtod_l+0x8b2>
 8006f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f8e:	4650      	mov	r0, sl
 8006f90:	4659      	mov	r1, fp
 8006f92:	9a08      	ldr	r2, [sp, #32]
 8006f94:	b1bb      	cbz	r3, 8006fc6 <_strtod_l+0x90e>
 8006f96:	f7ff fb6c 	bl	8006672 <sulp>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fa2:	f7f9 f8e3 	bl	800016c <__adddf3>
 8006fa6:	4682      	mov	sl, r0
 8006fa8:	468b      	mov	fp, r1
 8006faa:	e7de      	b.n	8006f6a <_strtod_l+0x8b2>
 8006fac:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fb0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fb4:	f04f 3aff 	mov.w	sl, #4294967295
 8006fb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006fbc:	e7d5      	b.n	8006f6a <_strtod_l+0x8b2>
 8006fbe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fc0:	ea13 0f0a 	tst.w	r3, sl
 8006fc4:	e7e1      	b.n	8006f8a <_strtod_l+0x8d2>
 8006fc6:	f7ff fb54 	bl	8006672 <sulp>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd2:	f7f9 f8c9 	bl	8000168 <__aeabi_dsub>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4682      	mov	sl, r0
 8006fdc:	468b      	mov	fp, r1
 8006fde:	f7f9 fce3 	bl	80009a8 <__aeabi_dcmpeq>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0c1      	beq.n	8006f6a <_strtod_l+0x8b2>
 8006fe6:	e619      	b.n	8006c1c <_strtod_l+0x564>
 8006fe8:	4641      	mov	r1, r8
 8006fea:	4620      	mov	r0, r4
 8006fec:	f001 fbd0 	bl	8008790 <__ratio>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	f7f9 fce9 	bl	80009d0 <__aeabi_dcmple>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d06d      	beq.n	80070de <_strtod_l+0xa26>
 8007002:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d178      	bne.n	80070fa <_strtod_l+0xa42>
 8007008:	f1ba 0f00 	cmp.w	sl, #0
 800700c:	d156      	bne.n	80070bc <_strtod_l+0xa04>
 800700e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007014:	2b00      	cmp	r3, #0
 8007016:	d158      	bne.n	80070ca <_strtod_l+0xa12>
 8007018:	2200      	movs	r2, #0
 800701a:	4630      	mov	r0, r6
 800701c:	4639      	mov	r1, r7
 800701e:	4b5e      	ldr	r3, [pc, #376]	@ (8007198 <_strtod_l+0xae0>)
 8007020:	f7f9 fccc 	bl	80009bc <__aeabi_dcmplt>
 8007024:	2800      	cmp	r0, #0
 8007026:	d157      	bne.n	80070d8 <_strtod_l+0xa20>
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	2200      	movs	r2, #0
 800702e:	4b5b      	ldr	r3, [pc, #364]	@ (800719c <_strtod_l+0xae4>)
 8007030:	f7f9 fa52 	bl	80004d8 <__aeabi_dmul>
 8007034:	4606      	mov	r6, r0
 8007036:	460f      	mov	r7, r1
 8007038:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800703c:	9606      	str	r6, [sp, #24]
 800703e:	9307      	str	r3, [sp, #28]
 8007040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007044:	4d51      	ldr	r5, [pc, #324]	@ (800718c <_strtod_l+0xad4>)
 8007046:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800704a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800704c:	401d      	ands	r5, r3
 800704e:	4b54      	ldr	r3, [pc, #336]	@ (80071a0 <_strtod_l+0xae8>)
 8007050:	429d      	cmp	r5, r3
 8007052:	f040 80ab 	bne.w	80071ac <_strtod_l+0xaf4>
 8007056:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007058:	4650      	mov	r0, sl
 800705a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800705e:	4659      	mov	r1, fp
 8007060:	f001 fad6 	bl	8008610 <__ulp>
 8007064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007068:	f7f9 fa36 	bl	80004d8 <__aeabi_dmul>
 800706c:	4652      	mov	r2, sl
 800706e:	465b      	mov	r3, fp
 8007070:	f7f9 f87c 	bl	800016c <__adddf3>
 8007074:	460b      	mov	r3, r1
 8007076:	4945      	ldr	r1, [pc, #276]	@ (800718c <_strtod_l+0xad4>)
 8007078:	4a4a      	ldr	r2, [pc, #296]	@ (80071a4 <_strtod_l+0xaec>)
 800707a:	4019      	ands	r1, r3
 800707c:	4291      	cmp	r1, r2
 800707e:	4682      	mov	sl, r0
 8007080:	d942      	bls.n	8007108 <_strtod_l+0xa50>
 8007082:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007084:	4b43      	ldr	r3, [pc, #268]	@ (8007194 <_strtod_l+0xadc>)
 8007086:	429a      	cmp	r2, r3
 8007088:	d103      	bne.n	8007092 <_strtod_l+0x9da>
 800708a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800708c:	3301      	adds	r3, #1
 800708e:	f43f ad32 	beq.w	8006af6 <_strtod_l+0x43e>
 8007092:	f04f 3aff 	mov.w	sl, #4294967295
 8007096:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007194 <_strtod_l+0xadc>
 800709a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800709c:	9805      	ldr	r0, [sp, #20]
 800709e:	f000 ff8b 	bl	8007fb8 <_Bfree>
 80070a2:	4649      	mov	r1, r9
 80070a4:	9805      	ldr	r0, [sp, #20]
 80070a6:	f000 ff87 	bl	8007fb8 <_Bfree>
 80070aa:	4641      	mov	r1, r8
 80070ac:	9805      	ldr	r0, [sp, #20]
 80070ae:	f000 ff83 	bl	8007fb8 <_Bfree>
 80070b2:	4621      	mov	r1, r4
 80070b4:	9805      	ldr	r0, [sp, #20]
 80070b6:	f000 ff7f 	bl	8007fb8 <_Bfree>
 80070ba:	e61c      	b.n	8006cf6 <_strtod_l+0x63e>
 80070bc:	f1ba 0f01 	cmp.w	sl, #1
 80070c0:	d103      	bne.n	80070ca <_strtod_l+0xa12>
 80070c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f43f ada9 	beq.w	8006c1c <_strtod_l+0x564>
 80070ca:	2200      	movs	r2, #0
 80070cc:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <_strtod_l+0xaf0>)
 80070ce:	2600      	movs	r6, #0
 80070d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070d4:	4f30      	ldr	r7, [pc, #192]	@ (8007198 <_strtod_l+0xae0>)
 80070d6:	e7b3      	b.n	8007040 <_strtod_l+0x988>
 80070d8:	2600      	movs	r6, #0
 80070da:	4f30      	ldr	r7, [pc, #192]	@ (800719c <_strtod_l+0xae4>)
 80070dc:	e7ac      	b.n	8007038 <_strtod_l+0x980>
 80070de:	4630      	mov	r0, r6
 80070e0:	4639      	mov	r1, r7
 80070e2:	4b2e      	ldr	r3, [pc, #184]	@ (800719c <_strtod_l+0xae4>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	f7f9 f9f7 	bl	80004d8 <__aeabi_dmul>
 80070ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0a1      	beq.n	8007038 <_strtod_l+0x980>
 80070f4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070f8:	e7a2      	b.n	8007040 <_strtod_l+0x988>
 80070fa:	2200      	movs	r2, #0
 80070fc:	4b26      	ldr	r3, [pc, #152]	@ (8007198 <_strtod_l+0xae0>)
 80070fe:	4616      	mov	r6, r2
 8007100:	461f      	mov	r7, r3
 8007102:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007106:	e79b      	b.n	8007040 <_strtod_l+0x988>
 8007108:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1c1      	bne.n	800709a <_strtod_l+0x9e2>
 8007116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800711a:	0d1b      	lsrs	r3, r3, #20
 800711c:	051b      	lsls	r3, r3, #20
 800711e:	429d      	cmp	r5, r3
 8007120:	d1bb      	bne.n	800709a <_strtod_l+0x9e2>
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7fa f84f 	bl	80011c8 <__aeabi_d2lz>
 800712a:	f7f9 f9a7 	bl	800047c <__aeabi_l2d>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 f817 	bl	8000168 <__aeabi_dsub>
 800713a:	460b      	mov	r3, r1
 800713c:	4602      	mov	r2, r0
 800713e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007142:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007148:	ea46 060a 	orr.w	r6, r6, sl
 800714c:	431e      	orrs	r6, r3
 800714e:	d06a      	beq.n	8007226 <_strtod_l+0xb6e>
 8007150:	a309      	add	r3, pc, #36	@ (adr r3, 8007178 <_strtod_l+0xac0>)
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f7f9 fc31 	bl	80009bc <__aeabi_dcmplt>
 800715a:	2800      	cmp	r0, #0
 800715c:	f47f acd6 	bne.w	8006b0c <_strtod_l+0x454>
 8007160:	a307      	add	r3, pc, #28	@ (adr r3, 8007180 <_strtod_l+0xac8>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800716a:	f7f9 fc45 	bl	80009f8 <__aeabi_dcmpgt>
 800716e:	2800      	cmp	r0, #0
 8007170:	d093      	beq.n	800709a <_strtod_l+0x9e2>
 8007172:	e4cb      	b.n	8006b0c <_strtod_l+0x454>
 8007174:	f3af 8000 	nop.w
 8007178:	94a03595 	.word	0x94a03595
 800717c:	3fdfffff 	.word	0x3fdfffff
 8007180:	35afe535 	.word	0x35afe535
 8007184:	3fe00000 	.word	0x3fe00000
 8007188:	39500000 	.word	0x39500000
 800718c:	7ff00000 	.word	0x7ff00000
 8007190:	000fffff 	.word	0x000fffff
 8007194:	7fefffff 	.word	0x7fefffff
 8007198:	3ff00000 	.word	0x3ff00000
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	7fe00000 	.word	0x7fe00000
 80071a4:	7c9fffff 	.word	0x7c9fffff
 80071a8:	bff00000 	.word	0xbff00000
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	b323      	cbz	r3, 80071fa <_strtod_l+0xb42>
 80071b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071b4:	d821      	bhi.n	80071fa <_strtod_l+0xb42>
 80071b6:	a328      	add	r3, pc, #160	@ (adr r3, 8007258 <_strtod_l+0xba0>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fc06 	bl	80009d0 <__aeabi_dcmple>
 80071c4:	b1a0      	cbz	r0, 80071f0 <_strtod_l+0xb38>
 80071c6:	4639      	mov	r1, r7
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7f9 fc5d 	bl	8000a88 <__aeabi_d2uiz>
 80071ce:	2801      	cmp	r0, #1
 80071d0:	bf38      	it	cc
 80071d2:	2001      	movcc	r0, #1
 80071d4:	f7f9 f906 	bl	80003e4 <__aeabi_ui2d>
 80071d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	b9fb      	cbnz	r3, 8007220 <_strtod_l+0xb68>
 80071e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80071e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80071e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071f6:	1b5b      	subs	r3, r3, r5
 80071f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007202:	f001 fa05 	bl	8008610 <__ulp>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4650      	mov	r0, sl
 800720c:	4659      	mov	r1, fp
 800720e:	f7f9 f963 	bl	80004d8 <__aeabi_dmul>
 8007212:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007216:	f7f8 ffa9 	bl	800016c <__adddf3>
 800721a:	4682      	mov	sl, r0
 800721c:	468b      	mov	fp, r1
 800721e:	e775      	b.n	800710c <_strtod_l+0xa54>
 8007220:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007224:	e7e0      	b.n	80071e8 <_strtod_l+0xb30>
 8007226:	a30e      	add	r3, pc, #56	@ (adr r3, 8007260 <_strtod_l+0xba8>)
 8007228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722c:	f7f9 fbc6 	bl	80009bc <__aeabi_dcmplt>
 8007230:	e79d      	b.n	800716e <_strtod_l+0xab6>
 8007232:	2300      	movs	r3, #0
 8007234:	930e      	str	r3, [sp, #56]	@ 0x38
 8007236:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007238:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	f7ff ba79 	b.w	8006732 <_strtod_l+0x7a>
 8007240:	2a65      	cmp	r2, #101	@ 0x65
 8007242:	f43f ab72 	beq.w	800692a <_strtod_l+0x272>
 8007246:	2a45      	cmp	r2, #69	@ 0x45
 8007248:	f43f ab6f 	beq.w	800692a <_strtod_l+0x272>
 800724c:	2301      	movs	r3, #1
 800724e:	f7ff bbaa 	b.w	80069a6 <_strtod_l+0x2ee>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	ffc00000 	.word	0xffc00000
 800725c:	41dfffff 	.word	0x41dfffff
 8007260:	94a03595 	.word	0x94a03595
 8007264:	3fcfffff 	.word	0x3fcfffff

08007268 <strtod>:
 8007268:	460a      	mov	r2, r1
 800726a:	4601      	mov	r1, r0
 800726c:	4802      	ldr	r0, [pc, #8]	@ (8007278 <strtod+0x10>)
 800726e:	4b03      	ldr	r3, [pc, #12]	@ (800727c <strtod+0x14>)
 8007270:	6800      	ldr	r0, [r0, #0]
 8007272:	f7ff ba21 	b.w	80066b8 <_strtod_l>
 8007276:	bf00      	nop
 8007278:	20000300 	.word	0x20000300
 800727c:	20000194 	.word	0x20000194

08007280 <std>:
 8007280:	2300      	movs	r3, #0
 8007282:	b510      	push	{r4, lr}
 8007284:	4604      	mov	r4, r0
 8007286:	e9c0 3300 	strd	r3, r3, [r0]
 800728a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800728e:	6083      	str	r3, [r0, #8]
 8007290:	8181      	strh	r1, [r0, #12]
 8007292:	6643      	str	r3, [r0, #100]	@ 0x64
 8007294:	81c2      	strh	r2, [r0, #14]
 8007296:	6183      	str	r3, [r0, #24]
 8007298:	4619      	mov	r1, r3
 800729a:	2208      	movs	r2, #8
 800729c:	305c      	adds	r0, #92	@ 0x5c
 800729e:	f000 f94c 	bl	800753a <memset>
 80072a2:	4b0d      	ldr	r3, [pc, #52]	@ (80072d8 <std+0x58>)
 80072a4:	6224      	str	r4, [r4, #32]
 80072a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80072a8:	4b0c      	ldr	r3, [pc, #48]	@ (80072dc <std+0x5c>)
 80072aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072ac:	4b0c      	ldr	r3, [pc, #48]	@ (80072e0 <std+0x60>)
 80072ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072b0:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <std+0x64>)
 80072b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80072b4:	4b0c      	ldr	r3, [pc, #48]	@ (80072e8 <std+0x68>)
 80072b6:	429c      	cmp	r4, r3
 80072b8:	d006      	beq.n	80072c8 <std+0x48>
 80072ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072be:	4294      	cmp	r4, r2
 80072c0:	d002      	beq.n	80072c8 <std+0x48>
 80072c2:	33d0      	adds	r3, #208	@ 0xd0
 80072c4:	429c      	cmp	r4, r3
 80072c6:	d105      	bne.n	80072d4 <std+0x54>
 80072c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	f000 b9d0 	b.w	8007674 <__retarget_lock_init_recursive>
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	bf00      	nop
 80072d8:	080074b5 	.word	0x080074b5
 80072dc:	080074d7 	.word	0x080074d7
 80072e0:	0800750f 	.word	0x0800750f
 80072e4:	08007533 	.word	0x08007533
 80072e8:	200048a0 	.word	0x200048a0

080072ec <stdio_exit_handler>:
 80072ec:	4a02      	ldr	r2, [pc, #8]	@ (80072f8 <stdio_exit_handler+0xc>)
 80072ee:	4903      	ldr	r1, [pc, #12]	@ (80072fc <stdio_exit_handler+0x10>)
 80072f0:	4803      	ldr	r0, [pc, #12]	@ (8007300 <stdio_exit_handler+0x14>)
 80072f2:	f000 b869 	b.w	80073c8 <_fwalk_sglue>
 80072f6:	bf00      	nop
 80072f8:	20000188 	.word	0x20000188
 80072fc:	08008f61 	.word	0x08008f61
 8007300:	20000304 	.word	0x20000304

08007304 <cleanup_stdio>:
 8007304:	6841      	ldr	r1, [r0, #4]
 8007306:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <cleanup_stdio+0x34>)
 8007308:	b510      	push	{r4, lr}
 800730a:	4299      	cmp	r1, r3
 800730c:	4604      	mov	r4, r0
 800730e:	d001      	beq.n	8007314 <cleanup_stdio+0x10>
 8007310:	f001 fe26 	bl	8008f60 <_fflush_r>
 8007314:	68a1      	ldr	r1, [r4, #8]
 8007316:	4b09      	ldr	r3, [pc, #36]	@ (800733c <cleanup_stdio+0x38>)
 8007318:	4299      	cmp	r1, r3
 800731a:	d002      	beq.n	8007322 <cleanup_stdio+0x1e>
 800731c:	4620      	mov	r0, r4
 800731e:	f001 fe1f 	bl	8008f60 <_fflush_r>
 8007322:	68e1      	ldr	r1, [r4, #12]
 8007324:	4b06      	ldr	r3, [pc, #24]	@ (8007340 <cleanup_stdio+0x3c>)
 8007326:	4299      	cmp	r1, r3
 8007328:	d004      	beq.n	8007334 <cleanup_stdio+0x30>
 800732a:	4620      	mov	r0, r4
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007330:	f001 be16 	b.w	8008f60 <_fflush_r>
 8007334:	bd10      	pop	{r4, pc}
 8007336:	bf00      	nop
 8007338:	200048a0 	.word	0x200048a0
 800733c:	20004908 	.word	0x20004908
 8007340:	20004970 	.word	0x20004970

08007344 <global_stdio_init.part.0>:
 8007344:	b510      	push	{r4, lr}
 8007346:	4b0b      	ldr	r3, [pc, #44]	@ (8007374 <global_stdio_init.part.0+0x30>)
 8007348:	4c0b      	ldr	r4, [pc, #44]	@ (8007378 <global_stdio_init.part.0+0x34>)
 800734a:	4a0c      	ldr	r2, [pc, #48]	@ (800737c <global_stdio_init.part.0+0x38>)
 800734c:	4620      	mov	r0, r4
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	2104      	movs	r1, #4
 8007352:	2200      	movs	r2, #0
 8007354:	f7ff ff94 	bl	8007280 <std>
 8007358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800735c:	2201      	movs	r2, #1
 800735e:	2109      	movs	r1, #9
 8007360:	f7ff ff8e 	bl	8007280 <std>
 8007364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007368:	2202      	movs	r2, #2
 800736a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736e:	2112      	movs	r1, #18
 8007370:	f7ff bf86 	b.w	8007280 <std>
 8007374:	200049d8 	.word	0x200049d8
 8007378:	200048a0 	.word	0x200048a0
 800737c:	080072ed 	.word	0x080072ed

08007380 <__sfp_lock_acquire>:
 8007380:	4801      	ldr	r0, [pc, #4]	@ (8007388 <__sfp_lock_acquire+0x8>)
 8007382:	f000 b978 	b.w	8007676 <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	200049e1 	.word	0x200049e1

0800738c <__sfp_lock_release>:
 800738c:	4801      	ldr	r0, [pc, #4]	@ (8007394 <__sfp_lock_release+0x8>)
 800738e:	f000 b973 	b.w	8007678 <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	200049e1 	.word	0x200049e1

08007398 <__sinit>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	f7ff fff0 	bl	8007380 <__sfp_lock_acquire>
 80073a0:	6a23      	ldr	r3, [r4, #32]
 80073a2:	b11b      	cbz	r3, 80073ac <__sinit+0x14>
 80073a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a8:	f7ff bff0 	b.w	800738c <__sfp_lock_release>
 80073ac:	4b04      	ldr	r3, [pc, #16]	@ (80073c0 <__sinit+0x28>)
 80073ae:	6223      	str	r3, [r4, #32]
 80073b0:	4b04      	ldr	r3, [pc, #16]	@ (80073c4 <__sinit+0x2c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f5      	bne.n	80073a4 <__sinit+0xc>
 80073b8:	f7ff ffc4 	bl	8007344 <global_stdio_init.part.0>
 80073bc:	e7f2      	b.n	80073a4 <__sinit+0xc>
 80073be:	bf00      	nop
 80073c0:	08007305 	.word	0x08007305
 80073c4:	200049d8 	.word	0x200049d8

080073c8 <_fwalk_sglue>:
 80073c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073cc:	4607      	mov	r7, r0
 80073ce:	4688      	mov	r8, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	2600      	movs	r6, #0
 80073d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073d8:	f1b9 0901 	subs.w	r9, r9, #1
 80073dc:	d505      	bpl.n	80073ea <_fwalk_sglue+0x22>
 80073de:	6824      	ldr	r4, [r4, #0]
 80073e0:	2c00      	cmp	r4, #0
 80073e2:	d1f7      	bne.n	80073d4 <_fwalk_sglue+0xc>
 80073e4:	4630      	mov	r0, r6
 80073e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d907      	bls.n	8007400 <_fwalk_sglue+0x38>
 80073f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073f4:	3301      	adds	r3, #1
 80073f6:	d003      	beq.n	8007400 <_fwalk_sglue+0x38>
 80073f8:	4629      	mov	r1, r5
 80073fa:	4638      	mov	r0, r7
 80073fc:	47c0      	blx	r8
 80073fe:	4306      	orrs	r6, r0
 8007400:	3568      	adds	r5, #104	@ 0x68
 8007402:	e7e9      	b.n	80073d8 <_fwalk_sglue+0x10>

08007404 <sniprintf>:
 8007404:	b40c      	push	{r2, r3}
 8007406:	b530      	push	{r4, r5, lr}
 8007408:	4b18      	ldr	r3, [pc, #96]	@ (800746c <sniprintf+0x68>)
 800740a:	1e0c      	subs	r4, r1, #0
 800740c:	681d      	ldr	r5, [r3, #0]
 800740e:	b09d      	sub	sp, #116	@ 0x74
 8007410:	da08      	bge.n	8007424 <sniprintf+0x20>
 8007412:	238b      	movs	r3, #139	@ 0x8b
 8007414:	f04f 30ff 	mov.w	r0, #4294967295
 8007418:	602b      	str	r3, [r5, #0]
 800741a:	b01d      	add	sp, #116	@ 0x74
 800741c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007420:	b002      	add	sp, #8
 8007422:	4770      	bx	lr
 8007424:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007428:	f8ad 3014 	strh.w	r3, [sp, #20]
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007432:	bf0c      	ite	eq
 8007434:	4623      	moveq	r3, r4
 8007436:	f104 33ff 	addne.w	r3, r4, #4294967295
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	9307      	str	r3, [sp, #28]
 800743e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007442:	9002      	str	r0, [sp, #8]
 8007444:	9006      	str	r0, [sp, #24]
 8007446:	f8ad 3016 	strh.w	r3, [sp, #22]
 800744a:	4628      	mov	r0, r5
 800744c:	ab21      	add	r3, sp, #132	@ 0x84
 800744e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007450:	a902      	add	r1, sp, #8
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	f001 fa78 	bl	8008948 <_svfiprintf_r>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	bfbc      	itt	lt
 800745c:	238b      	movlt	r3, #139	@ 0x8b
 800745e:	602b      	strlt	r3, [r5, #0]
 8007460:	2c00      	cmp	r4, #0
 8007462:	d0da      	beq.n	800741a <sniprintf+0x16>
 8007464:	2200      	movs	r2, #0
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	e7d6      	b.n	800741a <sniprintf+0x16>
 800746c:	20000300 	.word	0x20000300

08007470 <siprintf>:
 8007470:	b40e      	push	{r1, r2, r3}
 8007472:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007476:	b510      	push	{r4, lr}
 8007478:	2400      	movs	r4, #0
 800747a:	b09d      	sub	sp, #116	@ 0x74
 800747c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800747e:	9002      	str	r0, [sp, #8]
 8007480:	9006      	str	r0, [sp, #24]
 8007482:	9107      	str	r1, [sp, #28]
 8007484:	9104      	str	r1, [sp, #16]
 8007486:	4809      	ldr	r0, [pc, #36]	@ (80074ac <siprintf+0x3c>)
 8007488:	4909      	ldr	r1, [pc, #36]	@ (80074b0 <siprintf+0x40>)
 800748a:	f853 2b04 	ldr.w	r2, [r3], #4
 800748e:	9105      	str	r1, [sp, #20]
 8007490:	6800      	ldr	r0, [r0, #0]
 8007492:	a902      	add	r1, sp, #8
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007498:	f001 fa56 	bl	8008948 <_svfiprintf_r>
 800749c:	9b02      	ldr	r3, [sp, #8]
 800749e:	701c      	strb	r4, [r3, #0]
 80074a0:	b01d      	add	sp, #116	@ 0x74
 80074a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a6:	b003      	add	sp, #12
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000300 	.word	0x20000300
 80074b0:	ffff0208 	.word	0xffff0208

080074b4 <__sread>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074bc:	f000 f88c 	bl	80075d8 <_read_r>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	bfab      	itete	ge
 80074c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074c6:	89a3      	ldrhlt	r3, [r4, #12]
 80074c8:	181b      	addge	r3, r3, r0
 80074ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074ce:	bfac      	ite	ge
 80074d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074d2:	81a3      	strhlt	r3, [r4, #12]
 80074d4:	bd10      	pop	{r4, pc}

080074d6 <__swrite>:
 80074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074da:	461f      	mov	r7, r3
 80074dc:	898b      	ldrh	r3, [r1, #12]
 80074de:	4605      	mov	r5, r0
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	460c      	mov	r4, r1
 80074e4:	4616      	mov	r6, r2
 80074e6:	d505      	bpl.n	80074f4 <__swrite+0x1e>
 80074e8:	2302      	movs	r3, #2
 80074ea:	2200      	movs	r2, #0
 80074ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f0:	f000 f860 	bl	80075b4 <_lseek_r>
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	4632      	mov	r2, r6
 80074f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	4628      	mov	r0, r5
 8007500:	463b      	mov	r3, r7
 8007502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	f000 b877 	b.w	80075fc <_write_r>

0800750e <__sseek>:
 800750e:	b510      	push	{r4, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007516:	f000 f84d 	bl	80075b4 <_lseek_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	bf15      	itete	ne
 8007520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800752a:	81a3      	strheq	r3, [r4, #12]
 800752c:	bf18      	it	ne
 800752e:	81a3      	strhne	r3, [r4, #12]
 8007530:	bd10      	pop	{r4, pc}

08007532 <__sclose>:
 8007532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007536:	f000 b82d 	b.w	8007594 <_close_r>

0800753a <memset>:
 800753a:	4603      	mov	r3, r0
 800753c:	4402      	add	r2, r0
 800753e:	4293      	cmp	r3, r2
 8007540:	d100      	bne.n	8007544 <memset+0xa>
 8007542:	4770      	bx	lr
 8007544:	f803 1b01 	strb.w	r1, [r3], #1
 8007548:	e7f9      	b.n	800753e <memset+0x4>

0800754a <strncmp>:
 800754a:	b510      	push	{r4, lr}
 800754c:	b16a      	cbz	r2, 800756a <strncmp+0x20>
 800754e:	3901      	subs	r1, #1
 8007550:	1884      	adds	r4, r0, r2
 8007552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007556:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800755a:	429a      	cmp	r2, r3
 800755c:	d103      	bne.n	8007566 <strncmp+0x1c>
 800755e:	42a0      	cmp	r0, r4
 8007560:	d001      	beq.n	8007566 <strncmp+0x1c>
 8007562:	2a00      	cmp	r2, #0
 8007564:	d1f5      	bne.n	8007552 <strncmp+0x8>
 8007566:	1ad0      	subs	r0, r2, r3
 8007568:	bd10      	pop	{r4, pc}
 800756a:	4610      	mov	r0, r2
 800756c:	e7fc      	b.n	8007568 <strncmp+0x1e>

0800756e <strncpy>:
 800756e:	4603      	mov	r3, r0
 8007570:	b510      	push	{r4, lr}
 8007572:	3901      	subs	r1, #1
 8007574:	b132      	cbz	r2, 8007584 <strncpy+0x16>
 8007576:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800757a:	3a01      	subs	r2, #1
 800757c:	f803 4b01 	strb.w	r4, [r3], #1
 8007580:	2c00      	cmp	r4, #0
 8007582:	d1f7      	bne.n	8007574 <strncpy+0x6>
 8007584:	2100      	movs	r1, #0
 8007586:	441a      	add	r2, r3
 8007588:	4293      	cmp	r3, r2
 800758a:	d100      	bne.n	800758e <strncpy+0x20>
 800758c:	bd10      	pop	{r4, pc}
 800758e:	f803 1b01 	strb.w	r1, [r3], #1
 8007592:	e7f9      	b.n	8007588 <strncpy+0x1a>

08007594 <_close_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	2300      	movs	r3, #0
 8007598:	4d05      	ldr	r5, [pc, #20]	@ (80075b0 <_close_r+0x1c>)
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7fb ff7b 	bl	800349a <_close>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_close_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_close_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200049dc 	.word	0x200049dc

080075b4 <_lseek_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	4611      	mov	r1, r2
 80075bc:	2200      	movs	r2, #0
 80075be:	4d05      	ldr	r5, [pc, #20]	@ (80075d4 <_lseek_r+0x20>)
 80075c0:	602a      	str	r2, [r5, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f7fb ff73 	bl	80034ae <_lseek>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	d102      	bne.n	80075d2 <_lseek_r+0x1e>
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	b103      	cbz	r3, 80075d2 <_lseek_r+0x1e>
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	200049dc 	.word	0x200049dc

080075d8 <_read_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	2200      	movs	r2, #0
 80075e2:	4d05      	ldr	r5, [pc, #20]	@ (80075f8 <_read_r+0x20>)
 80075e4:	602a      	str	r2, [r5, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f7fb ff3b 	bl	8003462 <_read>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_read_r+0x1e>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_read_r+0x1e>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	200049dc 	.word	0x200049dc

080075fc <_write_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	2200      	movs	r2, #0
 8007606:	4d05      	ldr	r5, [pc, #20]	@ (800761c <_write_r+0x20>)
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7fb ff37 	bl	800347e <_write>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_write_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_write_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	200049dc 	.word	0x200049dc

08007620 <__errno>:
 8007620:	4b01      	ldr	r3, [pc, #4]	@ (8007628 <__errno+0x8>)
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20000300 	.word	0x20000300

0800762c <__libc_init_array>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	2600      	movs	r6, #0
 8007630:	4d0c      	ldr	r5, [pc, #48]	@ (8007664 <__libc_init_array+0x38>)
 8007632:	4c0d      	ldr	r4, [pc, #52]	@ (8007668 <__libc_init_array+0x3c>)
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	42a6      	cmp	r6, r4
 800763a:	d109      	bne.n	8007650 <__libc_init_array+0x24>
 800763c:	f003 fba0 	bl	800ad80 <_init>
 8007640:	2600      	movs	r6, #0
 8007642:	4d0a      	ldr	r5, [pc, #40]	@ (800766c <__libc_init_array+0x40>)
 8007644:	4c0a      	ldr	r4, [pc, #40]	@ (8007670 <__libc_init_array+0x44>)
 8007646:	1b64      	subs	r4, r4, r5
 8007648:	10a4      	asrs	r4, r4, #2
 800764a:	42a6      	cmp	r6, r4
 800764c:	d105      	bne.n	800765a <__libc_init_array+0x2e>
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	f855 3b04 	ldr.w	r3, [r5], #4
 8007654:	4798      	blx	r3
 8007656:	3601      	adds	r6, #1
 8007658:	e7ee      	b.n	8007638 <__libc_init_array+0xc>
 800765a:	f855 3b04 	ldr.w	r3, [r5], #4
 800765e:	4798      	blx	r3
 8007660:	3601      	adds	r6, #1
 8007662:	e7f2      	b.n	800764a <__libc_init_array+0x1e>
 8007664:	0800c470 	.word	0x0800c470
 8007668:	0800c470 	.word	0x0800c470
 800766c:	0800c470 	.word	0x0800c470
 8007670:	0800c474 	.word	0x0800c474

08007674 <__retarget_lock_init_recursive>:
 8007674:	4770      	bx	lr

08007676 <__retarget_lock_acquire_recursive>:
 8007676:	4770      	bx	lr

08007678 <__retarget_lock_release_recursive>:
 8007678:	4770      	bx	lr

0800767a <strcpy>:
 800767a:	4603      	mov	r3, r0
 800767c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007680:	f803 2b01 	strb.w	r2, [r3], #1
 8007684:	2a00      	cmp	r2, #0
 8007686:	d1f9      	bne.n	800767c <strcpy+0x2>
 8007688:	4770      	bx	lr

0800768a <memcpy>:
 800768a:	440a      	add	r2, r1
 800768c:	4291      	cmp	r1, r2
 800768e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007692:	d100      	bne.n	8007696 <memcpy+0xc>
 8007694:	4770      	bx	lr
 8007696:	b510      	push	{r4, lr}
 8007698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769c:	4291      	cmp	r1, r2
 800769e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a2:	d1f9      	bne.n	8007698 <memcpy+0xe>
 80076a4:	bd10      	pop	{r4, pc}
	...

080076a8 <nan>:
 80076a8:	2000      	movs	r0, #0
 80076aa:	4901      	ldr	r1, [pc, #4]	@ (80076b0 <nan+0x8>)
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	7ff80000 	.word	0x7ff80000

080076b4 <_free_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4605      	mov	r5, r0
 80076b8:	2900      	cmp	r1, #0
 80076ba:	d040      	beq.n	800773e <_free_r+0x8a>
 80076bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c0:	1f0c      	subs	r4, r1, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bfb8      	it	lt
 80076c6:	18e4      	addlt	r4, r4, r3
 80076c8:	f000 fc2a 	bl	8007f20 <__malloc_lock>
 80076cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007740 <_free_r+0x8c>)
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	b933      	cbnz	r3, 80076e0 <_free_r+0x2c>
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	6014      	str	r4, [r2, #0]
 80076d6:	4628      	mov	r0, r5
 80076d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076dc:	f000 bc26 	b.w	8007f2c <__malloc_unlock>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d908      	bls.n	80076f6 <_free_r+0x42>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	1821      	adds	r1, r4, r0
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf01      	itttt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	1809      	addeq	r1, r1, r0
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	e7ed      	b.n	80076d2 <_free_r+0x1e>
 80076f6:	461a      	mov	r2, r3
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	b10b      	cbz	r3, 8007700 <_free_r+0x4c>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d9fa      	bls.n	80076f6 <_free_r+0x42>
 8007700:	6811      	ldr	r1, [r2, #0]
 8007702:	1850      	adds	r0, r2, r1
 8007704:	42a0      	cmp	r0, r4
 8007706:	d10b      	bne.n	8007720 <_free_r+0x6c>
 8007708:	6820      	ldr	r0, [r4, #0]
 800770a:	4401      	add	r1, r0
 800770c:	1850      	adds	r0, r2, r1
 800770e:	4283      	cmp	r3, r0
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	d1e0      	bne.n	80076d6 <_free_r+0x22>
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4408      	add	r0, r1
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	6053      	str	r3, [r2, #4]
 800771e:	e7da      	b.n	80076d6 <_free_r+0x22>
 8007720:	d902      	bls.n	8007728 <_free_r+0x74>
 8007722:	230c      	movs	r3, #12
 8007724:	602b      	str	r3, [r5, #0]
 8007726:	e7d6      	b.n	80076d6 <_free_r+0x22>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	1821      	adds	r1, r4, r0
 800772c:	428b      	cmp	r3, r1
 800772e:	bf01      	itttt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	1809      	addeq	r1, r1, r0
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	6063      	str	r3, [r4, #4]
 800773a:	6054      	str	r4, [r2, #4]
 800773c:	e7cb      	b.n	80076d6 <_free_r+0x22>
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	200049e8 	.word	0x200049e8

08007744 <rshift>:
 8007744:	6903      	ldr	r3, [r0, #16]
 8007746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800774a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800774e:	f100 0414 	add.w	r4, r0, #20
 8007752:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007756:	dd46      	ble.n	80077e6 <rshift+0xa2>
 8007758:	f011 011f 	ands.w	r1, r1, #31
 800775c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007760:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007764:	d10c      	bne.n	8007780 <rshift+0x3c>
 8007766:	4629      	mov	r1, r5
 8007768:	f100 0710 	add.w	r7, r0, #16
 800776c:	42b1      	cmp	r1, r6
 800776e:	d335      	bcc.n	80077dc <rshift+0x98>
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	1eea      	subs	r2, r5, #3
 8007776:	4296      	cmp	r6, r2
 8007778:	bf38      	it	cc
 800777a:	2300      	movcc	r3, #0
 800777c:	4423      	add	r3, r4
 800777e:	e015      	b.n	80077ac <rshift+0x68>
 8007780:	46a1      	mov	r9, r4
 8007782:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007786:	f1c1 0820 	rsb	r8, r1, #32
 800778a:	40cf      	lsrs	r7, r1
 800778c:	f105 0e04 	add.w	lr, r5, #4
 8007790:	4576      	cmp	r6, lr
 8007792:	46f4      	mov	ip, lr
 8007794:	d816      	bhi.n	80077c4 <rshift+0x80>
 8007796:	1a9a      	subs	r2, r3, r2
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	3a04      	subs	r2, #4
 800779c:	3501      	adds	r5, #1
 800779e:	42ae      	cmp	r6, r5
 80077a0:	bf38      	it	cc
 80077a2:	2200      	movcc	r2, #0
 80077a4:	18a3      	adds	r3, r4, r2
 80077a6:	50a7      	str	r7, [r4, r2]
 80077a8:	b107      	cbz	r7, 80077ac <rshift+0x68>
 80077aa:	3304      	adds	r3, #4
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	eba3 0204 	sub.w	r2, r3, r4
 80077b2:	bf08      	it	eq
 80077b4:	2300      	moveq	r3, #0
 80077b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077ba:	6102      	str	r2, [r0, #16]
 80077bc:	bf08      	it	eq
 80077be:	6143      	streq	r3, [r0, #20]
 80077c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077c4:	f8dc c000 	ldr.w	ip, [ip]
 80077c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80077cc:	ea4c 0707 	orr.w	r7, ip, r7
 80077d0:	f849 7b04 	str.w	r7, [r9], #4
 80077d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077d8:	40cf      	lsrs	r7, r1
 80077da:	e7d9      	b.n	8007790 <rshift+0x4c>
 80077dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80077e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80077e4:	e7c2      	b.n	800776c <rshift+0x28>
 80077e6:	4623      	mov	r3, r4
 80077e8:	e7e0      	b.n	80077ac <rshift+0x68>

080077ea <__hexdig_fun>:
 80077ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80077ee:	2b09      	cmp	r3, #9
 80077f0:	d802      	bhi.n	80077f8 <__hexdig_fun+0xe>
 80077f2:	3820      	subs	r0, #32
 80077f4:	b2c0      	uxtb	r0, r0
 80077f6:	4770      	bx	lr
 80077f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	d801      	bhi.n	8007804 <__hexdig_fun+0x1a>
 8007800:	3847      	subs	r0, #71	@ 0x47
 8007802:	e7f7      	b.n	80077f4 <__hexdig_fun+0xa>
 8007804:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007808:	2b05      	cmp	r3, #5
 800780a:	d801      	bhi.n	8007810 <__hexdig_fun+0x26>
 800780c:	3827      	subs	r0, #39	@ 0x27
 800780e:	e7f1      	b.n	80077f4 <__hexdig_fun+0xa>
 8007810:	2000      	movs	r0, #0
 8007812:	4770      	bx	lr

08007814 <__gethex>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	468a      	mov	sl, r1
 800781a:	4690      	mov	r8, r2
 800781c:	b085      	sub	sp, #20
 800781e:	9302      	str	r3, [sp, #8]
 8007820:	680b      	ldr	r3, [r1, #0]
 8007822:	9001      	str	r0, [sp, #4]
 8007824:	1c9c      	adds	r4, r3, #2
 8007826:	46a1      	mov	r9, r4
 8007828:	f814 0b01 	ldrb.w	r0, [r4], #1
 800782c:	2830      	cmp	r0, #48	@ 0x30
 800782e:	d0fa      	beq.n	8007826 <__gethex+0x12>
 8007830:	eba9 0303 	sub.w	r3, r9, r3
 8007834:	f1a3 0b02 	sub.w	fp, r3, #2
 8007838:	f7ff ffd7 	bl	80077ea <__hexdig_fun>
 800783c:	4605      	mov	r5, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d168      	bne.n	8007914 <__gethex+0x100>
 8007842:	2201      	movs	r2, #1
 8007844:	4648      	mov	r0, r9
 8007846:	499f      	ldr	r1, [pc, #636]	@ (8007ac4 <__gethex+0x2b0>)
 8007848:	f7ff fe7f 	bl	800754a <strncmp>
 800784c:	4607      	mov	r7, r0
 800784e:	2800      	cmp	r0, #0
 8007850:	d167      	bne.n	8007922 <__gethex+0x10e>
 8007852:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007856:	4626      	mov	r6, r4
 8007858:	f7ff ffc7 	bl	80077ea <__hexdig_fun>
 800785c:	2800      	cmp	r0, #0
 800785e:	d062      	beq.n	8007926 <__gethex+0x112>
 8007860:	4623      	mov	r3, r4
 8007862:	7818      	ldrb	r0, [r3, #0]
 8007864:	4699      	mov	r9, r3
 8007866:	2830      	cmp	r0, #48	@ 0x30
 8007868:	f103 0301 	add.w	r3, r3, #1
 800786c:	d0f9      	beq.n	8007862 <__gethex+0x4e>
 800786e:	f7ff ffbc 	bl	80077ea <__hexdig_fun>
 8007872:	fab0 f580 	clz	r5, r0
 8007876:	f04f 0b01 	mov.w	fp, #1
 800787a:	096d      	lsrs	r5, r5, #5
 800787c:	464a      	mov	r2, r9
 800787e:	4616      	mov	r6, r2
 8007880:	7830      	ldrb	r0, [r6, #0]
 8007882:	3201      	adds	r2, #1
 8007884:	f7ff ffb1 	bl	80077ea <__hexdig_fun>
 8007888:	2800      	cmp	r0, #0
 800788a:	d1f8      	bne.n	800787e <__gethex+0x6a>
 800788c:	2201      	movs	r2, #1
 800788e:	4630      	mov	r0, r6
 8007890:	498c      	ldr	r1, [pc, #560]	@ (8007ac4 <__gethex+0x2b0>)
 8007892:	f7ff fe5a 	bl	800754a <strncmp>
 8007896:	2800      	cmp	r0, #0
 8007898:	d13f      	bne.n	800791a <__gethex+0x106>
 800789a:	b944      	cbnz	r4, 80078ae <__gethex+0x9a>
 800789c:	1c74      	adds	r4, r6, #1
 800789e:	4622      	mov	r2, r4
 80078a0:	4616      	mov	r6, r2
 80078a2:	7830      	ldrb	r0, [r6, #0]
 80078a4:	3201      	adds	r2, #1
 80078a6:	f7ff ffa0 	bl	80077ea <__hexdig_fun>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d1f8      	bne.n	80078a0 <__gethex+0x8c>
 80078ae:	1ba4      	subs	r4, r4, r6
 80078b0:	00a7      	lsls	r7, r4, #2
 80078b2:	7833      	ldrb	r3, [r6, #0]
 80078b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80078b8:	2b50      	cmp	r3, #80	@ 0x50
 80078ba:	d13e      	bne.n	800793a <__gethex+0x126>
 80078bc:	7873      	ldrb	r3, [r6, #1]
 80078be:	2b2b      	cmp	r3, #43	@ 0x2b
 80078c0:	d033      	beq.n	800792a <__gethex+0x116>
 80078c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80078c4:	d034      	beq.n	8007930 <__gethex+0x11c>
 80078c6:	2400      	movs	r4, #0
 80078c8:	1c71      	adds	r1, r6, #1
 80078ca:	7808      	ldrb	r0, [r1, #0]
 80078cc:	f7ff ff8d 	bl	80077ea <__hexdig_fun>
 80078d0:	1e43      	subs	r3, r0, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b18      	cmp	r3, #24
 80078d6:	d830      	bhi.n	800793a <__gethex+0x126>
 80078d8:	f1a0 0210 	sub.w	r2, r0, #16
 80078dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078e0:	f7ff ff83 	bl	80077ea <__hexdig_fun>
 80078e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80078e8:	fa5f fc8c 	uxtb.w	ip, ip
 80078ec:	f1bc 0f18 	cmp.w	ip, #24
 80078f0:	f04f 030a 	mov.w	r3, #10
 80078f4:	d91e      	bls.n	8007934 <__gethex+0x120>
 80078f6:	b104      	cbz	r4, 80078fa <__gethex+0xe6>
 80078f8:	4252      	negs	r2, r2
 80078fa:	4417      	add	r7, r2
 80078fc:	f8ca 1000 	str.w	r1, [sl]
 8007900:	b1ed      	cbz	r5, 800793e <__gethex+0x12a>
 8007902:	f1bb 0f00 	cmp.w	fp, #0
 8007906:	bf0c      	ite	eq
 8007908:	2506      	moveq	r5, #6
 800790a:	2500      	movne	r5, #0
 800790c:	4628      	mov	r0, r5
 800790e:	b005      	add	sp, #20
 8007910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007914:	2500      	movs	r5, #0
 8007916:	462c      	mov	r4, r5
 8007918:	e7b0      	b.n	800787c <__gethex+0x68>
 800791a:	2c00      	cmp	r4, #0
 800791c:	d1c7      	bne.n	80078ae <__gethex+0x9a>
 800791e:	4627      	mov	r7, r4
 8007920:	e7c7      	b.n	80078b2 <__gethex+0x9e>
 8007922:	464e      	mov	r6, r9
 8007924:	462f      	mov	r7, r5
 8007926:	2501      	movs	r5, #1
 8007928:	e7c3      	b.n	80078b2 <__gethex+0x9e>
 800792a:	2400      	movs	r4, #0
 800792c:	1cb1      	adds	r1, r6, #2
 800792e:	e7cc      	b.n	80078ca <__gethex+0xb6>
 8007930:	2401      	movs	r4, #1
 8007932:	e7fb      	b.n	800792c <__gethex+0x118>
 8007934:	fb03 0002 	mla	r0, r3, r2, r0
 8007938:	e7ce      	b.n	80078d8 <__gethex+0xc4>
 800793a:	4631      	mov	r1, r6
 800793c:	e7de      	b.n	80078fc <__gethex+0xe8>
 800793e:	4629      	mov	r1, r5
 8007940:	eba6 0309 	sub.w	r3, r6, r9
 8007944:	3b01      	subs	r3, #1
 8007946:	2b07      	cmp	r3, #7
 8007948:	dc0a      	bgt.n	8007960 <__gethex+0x14c>
 800794a:	9801      	ldr	r0, [sp, #4]
 800794c:	f000 faf4 	bl	8007f38 <_Balloc>
 8007950:	4604      	mov	r4, r0
 8007952:	b940      	cbnz	r0, 8007966 <__gethex+0x152>
 8007954:	4602      	mov	r2, r0
 8007956:	21e4      	movs	r1, #228	@ 0xe4
 8007958:	4b5b      	ldr	r3, [pc, #364]	@ (8007ac8 <__gethex+0x2b4>)
 800795a:	485c      	ldr	r0, [pc, #368]	@ (8007acc <__gethex+0x2b8>)
 800795c:	f001 fb60 	bl	8009020 <__assert_func>
 8007960:	3101      	adds	r1, #1
 8007962:	105b      	asrs	r3, r3, #1
 8007964:	e7ef      	b.n	8007946 <__gethex+0x132>
 8007966:	2300      	movs	r3, #0
 8007968:	f100 0a14 	add.w	sl, r0, #20
 800796c:	4655      	mov	r5, sl
 800796e:	469b      	mov	fp, r3
 8007970:	45b1      	cmp	r9, r6
 8007972:	d337      	bcc.n	80079e4 <__gethex+0x1d0>
 8007974:	f845 bb04 	str.w	fp, [r5], #4
 8007978:	eba5 050a 	sub.w	r5, r5, sl
 800797c:	10ad      	asrs	r5, r5, #2
 800797e:	6125      	str	r5, [r4, #16]
 8007980:	4658      	mov	r0, fp
 8007982:	f000 fbcb 	bl	800811c <__hi0bits>
 8007986:	016d      	lsls	r5, r5, #5
 8007988:	f8d8 6000 	ldr.w	r6, [r8]
 800798c:	1a2d      	subs	r5, r5, r0
 800798e:	42b5      	cmp	r5, r6
 8007990:	dd54      	ble.n	8007a3c <__gethex+0x228>
 8007992:	1bad      	subs	r5, r5, r6
 8007994:	4629      	mov	r1, r5
 8007996:	4620      	mov	r0, r4
 8007998:	f000 ff4d 	bl	8008836 <__any_on>
 800799c:	4681      	mov	r9, r0
 800799e:	b178      	cbz	r0, 80079c0 <__gethex+0x1ac>
 80079a0:	f04f 0901 	mov.w	r9, #1
 80079a4:	1e6b      	subs	r3, r5, #1
 80079a6:	1159      	asrs	r1, r3, #5
 80079a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80079ac:	f003 021f 	and.w	r2, r3, #31
 80079b0:	fa09 f202 	lsl.w	r2, r9, r2
 80079b4:	420a      	tst	r2, r1
 80079b6:	d003      	beq.n	80079c0 <__gethex+0x1ac>
 80079b8:	454b      	cmp	r3, r9
 80079ba:	dc36      	bgt.n	8007a2a <__gethex+0x216>
 80079bc:	f04f 0902 	mov.w	r9, #2
 80079c0:	4629      	mov	r1, r5
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff febe 	bl	8007744 <rshift>
 80079c8:	442f      	add	r7, r5
 80079ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ce:	42bb      	cmp	r3, r7
 80079d0:	da42      	bge.n	8007a58 <__gethex+0x244>
 80079d2:	4621      	mov	r1, r4
 80079d4:	9801      	ldr	r0, [sp, #4]
 80079d6:	f000 faef 	bl	8007fb8 <_Bfree>
 80079da:	2300      	movs	r3, #0
 80079dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079de:	25a3      	movs	r5, #163	@ 0xa3
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	e793      	b.n	800790c <__gethex+0xf8>
 80079e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80079e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80079ea:	d012      	beq.n	8007a12 <__gethex+0x1fe>
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d104      	bne.n	80079fa <__gethex+0x1e6>
 80079f0:	f845 bb04 	str.w	fp, [r5], #4
 80079f4:	f04f 0b00 	mov.w	fp, #0
 80079f8:	465b      	mov	r3, fp
 80079fa:	7830      	ldrb	r0, [r6, #0]
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	f7ff fef4 	bl	80077ea <__hexdig_fun>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	f000 000f 	and.w	r0, r0, #15
 8007a08:	4098      	lsls	r0, r3
 8007a0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007a0e:	3304      	adds	r3, #4
 8007a10:	e7ae      	b.n	8007970 <__gethex+0x15c>
 8007a12:	45b1      	cmp	r9, r6
 8007a14:	d8ea      	bhi.n	80079ec <__gethex+0x1d8>
 8007a16:	2201      	movs	r2, #1
 8007a18:	4630      	mov	r0, r6
 8007a1a:	492a      	ldr	r1, [pc, #168]	@ (8007ac4 <__gethex+0x2b0>)
 8007a1c:	9303      	str	r3, [sp, #12]
 8007a1e:	f7ff fd94 	bl	800754a <strncmp>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d1e1      	bne.n	80079ec <__gethex+0x1d8>
 8007a28:	e7a2      	b.n	8007970 <__gethex+0x15c>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	1ea9      	subs	r1, r5, #2
 8007a2e:	f000 ff02 	bl	8008836 <__any_on>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d0c2      	beq.n	80079bc <__gethex+0x1a8>
 8007a36:	f04f 0903 	mov.w	r9, #3
 8007a3a:	e7c1      	b.n	80079c0 <__gethex+0x1ac>
 8007a3c:	da09      	bge.n	8007a52 <__gethex+0x23e>
 8007a3e:	1b75      	subs	r5, r6, r5
 8007a40:	4621      	mov	r1, r4
 8007a42:	462a      	mov	r2, r5
 8007a44:	9801      	ldr	r0, [sp, #4]
 8007a46:	f000 fcc7 	bl	80083d8 <__lshift>
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	1b7f      	subs	r7, r7, r5
 8007a4e:	f100 0a14 	add.w	sl, r0, #20
 8007a52:	f04f 0900 	mov.w	r9, #0
 8007a56:	e7b8      	b.n	80079ca <__gethex+0x1b6>
 8007a58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a5c:	42bd      	cmp	r5, r7
 8007a5e:	dd6f      	ble.n	8007b40 <__gethex+0x32c>
 8007a60:	1bed      	subs	r5, r5, r7
 8007a62:	42ae      	cmp	r6, r5
 8007a64:	dc34      	bgt.n	8007ad0 <__gethex+0x2bc>
 8007a66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d022      	beq.n	8007ab4 <__gethex+0x2a0>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d024      	beq.n	8007abc <__gethex+0x2a8>
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d115      	bne.n	8007aa2 <__gethex+0x28e>
 8007a76:	42ae      	cmp	r6, r5
 8007a78:	d113      	bne.n	8007aa2 <__gethex+0x28e>
 8007a7a:	2e01      	cmp	r6, #1
 8007a7c:	d10b      	bne.n	8007a96 <__gethex+0x282>
 8007a7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a82:	9a02      	ldr	r2, [sp, #8]
 8007a84:	2562      	movs	r5, #98	@ 0x62
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	f8ca 3000 	str.w	r3, [sl]
 8007a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a92:	601c      	str	r4, [r3, #0]
 8007a94:	e73a      	b.n	800790c <__gethex+0xf8>
 8007a96:	4620      	mov	r0, r4
 8007a98:	1e71      	subs	r1, r6, #1
 8007a9a:	f000 fecc 	bl	8008836 <__any_on>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d1ed      	bne.n	8007a7e <__gethex+0x26a>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	9801      	ldr	r0, [sp, #4]
 8007aa6:	f000 fa87 	bl	8007fb8 <_Bfree>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aae:	2550      	movs	r5, #80	@ 0x50
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e72b      	b.n	800790c <__gethex+0xf8>
 8007ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f3      	bne.n	8007aa2 <__gethex+0x28e>
 8007aba:	e7e0      	b.n	8007a7e <__gethex+0x26a>
 8007abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1dd      	bne.n	8007a7e <__gethex+0x26a>
 8007ac2:	e7ee      	b.n	8007aa2 <__gethex+0x28e>
 8007ac4:	0800be25 	.word	0x0800be25
 8007ac8:	0800be3b 	.word	0x0800be3b
 8007acc:	0800be4c 	.word	0x0800be4c
 8007ad0:	1e6f      	subs	r7, r5, #1
 8007ad2:	f1b9 0f00 	cmp.w	r9, #0
 8007ad6:	d130      	bne.n	8007b3a <__gethex+0x326>
 8007ad8:	b127      	cbz	r7, 8007ae4 <__gethex+0x2d0>
 8007ada:	4639      	mov	r1, r7
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 feaa 	bl	8008836 <__any_on>
 8007ae2:	4681      	mov	r9, r0
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	1b76      	subs	r6, r6, r5
 8007aea:	2502      	movs	r5, #2
 8007aec:	117a      	asrs	r2, r7, #5
 8007aee:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007af2:	f007 071f 	and.w	r7, r7, #31
 8007af6:	40bb      	lsls	r3, r7
 8007af8:	4213      	tst	r3, r2
 8007afa:	4620      	mov	r0, r4
 8007afc:	bf18      	it	ne
 8007afe:	f049 0902 	orrne.w	r9, r9, #2
 8007b02:	f7ff fe1f 	bl	8007744 <rshift>
 8007b06:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007b0a:	f1b9 0f00 	cmp.w	r9, #0
 8007b0e:	d047      	beq.n	8007ba0 <__gethex+0x38c>
 8007b10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d015      	beq.n	8007b44 <__gethex+0x330>
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d017      	beq.n	8007b4c <__gethex+0x338>
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d109      	bne.n	8007b34 <__gethex+0x320>
 8007b20:	f019 0f02 	tst.w	r9, #2
 8007b24:	d006      	beq.n	8007b34 <__gethex+0x320>
 8007b26:	f8da 3000 	ldr.w	r3, [sl]
 8007b2a:	ea49 0903 	orr.w	r9, r9, r3
 8007b2e:	f019 0f01 	tst.w	r9, #1
 8007b32:	d10e      	bne.n	8007b52 <__gethex+0x33e>
 8007b34:	f045 0510 	orr.w	r5, r5, #16
 8007b38:	e032      	b.n	8007ba0 <__gethex+0x38c>
 8007b3a:	f04f 0901 	mov.w	r9, #1
 8007b3e:	e7d1      	b.n	8007ae4 <__gethex+0x2d0>
 8007b40:	2501      	movs	r5, #1
 8007b42:	e7e2      	b.n	8007b0a <__gethex+0x2f6>
 8007b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b46:	f1c3 0301 	rsb	r3, r3, #1
 8007b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f0      	beq.n	8007b34 <__gethex+0x320>
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b5a:	f104 0314 	add.w	r3, r4, #20
 8007b5e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b62:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b70:	d01b      	beq.n	8007baa <__gethex+0x396>
 8007b72:	3201      	adds	r2, #1
 8007b74:	6002      	str	r2, [r0, #0]
 8007b76:	2d02      	cmp	r5, #2
 8007b78:	f104 0314 	add.w	r3, r4, #20
 8007b7c:	d13c      	bne.n	8007bf8 <__gethex+0x3e4>
 8007b7e:	f8d8 2000 	ldr.w	r2, [r8]
 8007b82:	3a01      	subs	r2, #1
 8007b84:	42b2      	cmp	r2, r6
 8007b86:	d109      	bne.n	8007b9c <__gethex+0x388>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	1171      	asrs	r1, r6, #5
 8007b8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b90:	f006 061f 	and.w	r6, r6, #31
 8007b94:	fa02 f606 	lsl.w	r6, r2, r6
 8007b98:	421e      	tst	r6, r3
 8007b9a:	d13a      	bne.n	8007c12 <__gethex+0x3fe>
 8007b9c:	f045 0520 	orr.w	r5, r5, #32
 8007ba0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba2:	601c      	str	r4, [r3, #0]
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	601f      	str	r7, [r3, #0]
 8007ba8:	e6b0      	b.n	800790c <__gethex+0xf8>
 8007baa:	4299      	cmp	r1, r3
 8007bac:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bb0:	d8d9      	bhi.n	8007b66 <__gethex+0x352>
 8007bb2:	68a3      	ldr	r3, [r4, #8]
 8007bb4:	459b      	cmp	fp, r3
 8007bb6:	db17      	blt.n	8007be8 <__gethex+0x3d4>
 8007bb8:	6861      	ldr	r1, [r4, #4]
 8007bba:	9801      	ldr	r0, [sp, #4]
 8007bbc:	3101      	adds	r1, #1
 8007bbe:	f000 f9bb 	bl	8007f38 <_Balloc>
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	b918      	cbnz	r0, 8007bce <__gethex+0x3ba>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	2184      	movs	r1, #132	@ 0x84
 8007bca:	4b19      	ldr	r3, [pc, #100]	@ (8007c30 <__gethex+0x41c>)
 8007bcc:	e6c5      	b.n	800795a <__gethex+0x146>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	f104 010c 	add.w	r1, r4, #12
 8007bd4:	3202      	adds	r2, #2
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f7ff fd56 	bl	800768a <memcpy>
 8007bde:	4621      	mov	r1, r4
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	f000 f9e9 	bl	8007fb8 <_Bfree>
 8007be6:	464c      	mov	r4, r9
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6122      	str	r2, [r4, #16]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bf4:	615a      	str	r2, [r3, #20]
 8007bf6:	e7be      	b.n	8007b76 <__gethex+0x362>
 8007bf8:	6922      	ldr	r2, [r4, #16]
 8007bfa:	455a      	cmp	r2, fp
 8007bfc:	dd0b      	ble.n	8007c16 <__gethex+0x402>
 8007bfe:	2101      	movs	r1, #1
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7ff fd9f 	bl	8007744 <rshift>
 8007c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c0a:	3701      	adds	r7, #1
 8007c0c:	42bb      	cmp	r3, r7
 8007c0e:	f6ff aee0 	blt.w	80079d2 <__gethex+0x1be>
 8007c12:	2501      	movs	r5, #1
 8007c14:	e7c2      	b.n	8007b9c <__gethex+0x388>
 8007c16:	f016 061f 	ands.w	r6, r6, #31
 8007c1a:	d0fa      	beq.n	8007c12 <__gethex+0x3fe>
 8007c1c:	4453      	add	r3, sl
 8007c1e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c22:	f000 fa7b 	bl	800811c <__hi0bits>
 8007c26:	f1c6 0620 	rsb	r6, r6, #32
 8007c2a:	42b0      	cmp	r0, r6
 8007c2c:	dbe7      	blt.n	8007bfe <__gethex+0x3ea>
 8007c2e:	e7f0      	b.n	8007c12 <__gethex+0x3fe>
 8007c30:	0800be3b 	.word	0x0800be3b

08007c34 <L_shift>:
 8007c34:	f1c2 0208 	rsb	r2, r2, #8
 8007c38:	0092      	lsls	r2, r2, #2
 8007c3a:	b570      	push	{r4, r5, r6, lr}
 8007c3c:	f1c2 0620 	rsb	r6, r2, #32
 8007c40:	6843      	ldr	r3, [r0, #4]
 8007c42:	6804      	ldr	r4, [r0, #0]
 8007c44:	fa03 f506 	lsl.w	r5, r3, r6
 8007c48:	432c      	orrs	r4, r5
 8007c4a:	40d3      	lsrs	r3, r2
 8007c4c:	6004      	str	r4, [r0, #0]
 8007c4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c52:	4288      	cmp	r0, r1
 8007c54:	d3f4      	bcc.n	8007c40 <L_shift+0xc>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}

08007c58 <__match>:
 8007c58:	b530      	push	{r4, r5, lr}
 8007c5a:	6803      	ldr	r3, [r0, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c62:	b914      	cbnz	r4, 8007c6a <__match+0x12>
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	2001      	movs	r0, #1
 8007c68:	bd30      	pop	{r4, r5, pc}
 8007c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c72:	2d19      	cmp	r5, #25
 8007c74:	bf98      	it	ls
 8007c76:	3220      	addls	r2, #32
 8007c78:	42a2      	cmp	r2, r4
 8007c7a:	d0f0      	beq.n	8007c5e <__match+0x6>
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7f3      	b.n	8007c68 <__match+0x10>

08007c80 <__hexnan>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	2500      	movs	r5, #0
 8007c86:	680b      	ldr	r3, [r1, #0]
 8007c88:	4682      	mov	sl, r0
 8007c8a:	115e      	asrs	r6, r3, #5
 8007c8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c90:	f013 031f 	ands.w	r3, r3, #31
 8007c94:	bf18      	it	ne
 8007c96:	3604      	addne	r6, #4
 8007c98:	1f37      	subs	r7, r6, #4
 8007c9a:	4690      	mov	r8, r2
 8007c9c:	46b9      	mov	r9, r7
 8007c9e:	463c      	mov	r4, r7
 8007ca0:	46ab      	mov	fp, r5
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	6801      	ldr	r1, [r0, #0]
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cac:	9502      	str	r5, [sp, #8]
 8007cae:	784a      	ldrb	r2, [r1, #1]
 8007cb0:	1c4b      	adds	r3, r1, #1
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	b342      	cbz	r2, 8007d08 <__hexnan+0x88>
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	9105      	str	r1, [sp, #20]
 8007cba:	9204      	str	r2, [sp, #16]
 8007cbc:	f7ff fd95 	bl	80077ea <__hexdig_fun>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d151      	bne.n	8007d68 <__hexnan+0xe8>
 8007cc4:	9a04      	ldr	r2, [sp, #16]
 8007cc6:	9905      	ldr	r1, [sp, #20]
 8007cc8:	2a20      	cmp	r2, #32
 8007cca:	d818      	bhi.n	8007cfe <__hexnan+0x7e>
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	459b      	cmp	fp, r3
 8007cd0:	dd13      	ble.n	8007cfa <__hexnan+0x7a>
 8007cd2:	454c      	cmp	r4, r9
 8007cd4:	d206      	bcs.n	8007ce4 <__hexnan+0x64>
 8007cd6:	2d07      	cmp	r5, #7
 8007cd8:	dc04      	bgt.n	8007ce4 <__hexnan+0x64>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff ffa8 	bl	8007c34 <L_shift>
 8007ce4:	4544      	cmp	r4, r8
 8007ce6:	d952      	bls.n	8007d8e <__hexnan+0x10e>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f1a4 0904 	sub.w	r9, r4, #4
 8007cee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cf2:	461d      	mov	r5, r3
 8007cf4:	464c      	mov	r4, r9
 8007cf6:	f8cd b008 	str.w	fp, [sp, #8]
 8007cfa:	9903      	ldr	r1, [sp, #12]
 8007cfc:	e7d7      	b.n	8007cae <__hexnan+0x2e>
 8007cfe:	2a29      	cmp	r2, #41	@ 0x29
 8007d00:	d157      	bne.n	8007db2 <__hexnan+0x132>
 8007d02:	3102      	adds	r1, #2
 8007d04:	f8ca 1000 	str.w	r1, [sl]
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	d051      	beq.n	8007db2 <__hexnan+0x132>
 8007d0e:	454c      	cmp	r4, r9
 8007d10:	d206      	bcs.n	8007d20 <__hexnan+0xa0>
 8007d12:	2d07      	cmp	r5, #7
 8007d14:	dc04      	bgt.n	8007d20 <__hexnan+0xa0>
 8007d16:	462a      	mov	r2, r5
 8007d18:	4649      	mov	r1, r9
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f7ff ff8a 	bl	8007c34 <L_shift>
 8007d20:	4544      	cmp	r4, r8
 8007d22:	d936      	bls.n	8007d92 <__hexnan+0x112>
 8007d24:	4623      	mov	r3, r4
 8007d26:	f1a8 0204 	sub.w	r2, r8, #4
 8007d2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d2e:	429f      	cmp	r7, r3
 8007d30:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d34:	d2f9      	bcs.n	8007d2a <__hexnan+0xaa>
 8007d36:	1b3b      	subs	r3, r7, r4
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	3401      	adds	r4, #1
 8007d40:	3e03      	subs	r6, #3
 8007d42:	42b4      	cmp	r4, r6
 8007d44:	bf88      	it	hi
 8007d46:	2304      	movhi	r3, #4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4443      	add	r3, r8
 8007d4c:	f843 2b04 	str.w	r2, [r3], #4
 8007d50:	429f      	cmp	r7, r3
 8007d52:	d2fb      	bcs.n	8007d4c <__hexnan+0xcc>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	b91b      	cbnz	r3, 8007d60 <__hexnan+0xe0>
 8007d58:	4547      	cmp	r7, r8
 8007d5a:	d128      	bne.n	8007dae <__hexnan+0x12e>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	2005      	movs	r0, #5
 8007d62:	b007      	add	sp, #28
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	3501      	adds	r5, #1
 8007d6a:	2d08      	cmp	r5, #8
 8007d6c:	f10b 0b01 	add.w	fp, fp, #1
 8007d70:	dd06      	ble.n	8007d80 <__hexnan+0x100>
 8007d72:	4544      	cmp	r4, r8
 8007d74:	d9c1      	bls.n	8007cfa <__hexnan+0x7a>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2501      	movs	r5, #1
 8007d7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d7e:	3c04      	subs	r4, #4
 8007d80:	6822      	ldr	r2, [r4, #0]
 8007d82:	f000 000f 	and.w	r0, r0, #15
 8007d86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d8a:	6020      	str	r0, [r4, #0]
 8007d8c:	e7b5      	b.n	8007cfa <__hexnan+0x7a>
 8007d8e:	2508      	movs	r5, #8
 8007d90:	e7b3      	b.n	8007cfa <__hexnan+0x7a>
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0dd      	beq.n	8007d54 <__hexnan+0xd4>
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9c:	f1c3 0320 	rsb	r3, r3, #32
 8007da0:	40da      	lsrs	r2, r3
 8007da2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007da6:	4013      	ands	r3, r2
 8007da8:	f846 3c04 	str.w	r3, [r6, #-4]
 8007dac:	e7d2      	b.n	8007d54 <__hexnan+0xd4>
 8007dae:	3f04      	subs	r7, #4
 8007db0:	e7d0      	b.n	8007d54 <__hexnan+0xd4>
 8007db2:	2004      	movs	r0, #4
 8007db4:	e7d5      	b.n	8007d62 <__hexnan+0xe2>
	...

08007db8 <sbrk_aligned>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4e0f      	ldr	r6, [pc, #60]	@ (8007df8 <sbrk_aligned+0x40>)
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6831      	ldr	r1, [r6, #0]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	b911      	cbnz	r1, 8007dca <sbrk_aligned+0x12>
 8007dc4:	f001 f90e 	bl	8008fe4 <_sbrk_r>
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f001 f909 	bl	8008fe4 <_sbrk_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d103      	bne.n	8007dde <sbrk_aligned+0x26>
 8007dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dda:	4620      	mov	r0, r4
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	1cc4      	adds	r4, r0, #3
 8007de0:	f024 0403 	bic.w	r4, r4, #3
 8007de4:	42a0      	cmp	r0, r4
 8007de6:	d0f8      	beq.n	8007dda <sbrk_aligned+0x22>
 8007de8:	1a21      	subs	r1, r4, r0
 8007dea:	4628      	mov	r0, r5
 8007dec:	f001 f8fa 	bl	8008fe4 <_sbrk_r>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d1f2      	bne.n	8007dda <sbrk_aligned+0x22>
 8007df4:	e7ef      	b.n	8007dd6 <sbrk_aligned+0x1e>
 8007df6:	bf00      	nop
 8007df8:	200049e4 	.word	0x200049e4

08007dfc <_malloc_r>:
 8007dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e00:	1ccd      	adds	r5, r1, #3
 8007e02:	f025 0503 	bic.w	r5, r5, #3
 8007e06:	3508      	adds	r5, #8
 8007e08:	2d0c      	cmp	r5, #12
 8007e0a:	bf38      	it	cc
 8007e0c:	250c      	movcc	r5, #12
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	4606      	mov	r6, r0
 8007e12:	db01      	blt.n	8007e18 <_malloc_r+0x1c>
 8007e14:	42a9      	cmp	r1, r5
 8007e16:	d904      	bls.n	8007e22 <_malloc_r+0x26>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef8 <_malloc_r+0xfc>
 8007e26:	f000 f87b 	bl	8007f20 <__malloc_lock>
 8007e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2e:	461c      	mov	r4, r3
 8007e30:	bb44      	cbnz	r4, 8007e84 <_malloc_r+0x88>
 8007e32:	4629      	mov	r1, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff ffbf 	bl	8007db8 <sbrk_aligned>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	d158      	bne.n	8007ef2 <_malloc_r+0xf6>
 8007e40:	f8d8 4000 	ldr.w	r4, [r8]
 8007e44:	4627      	mov	r7, r4
 8007e46:	2f00      	cmp	r7, #0
 8007e48:	d143      	bne.n	8007ed2 <_malloc_r+0xd6>
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	d04b      	beq.n	8007ee6 <_malloc_r+0xea>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	4639      	mov	r1, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	eb04 0903 	add.w	r9, r4, r3
 8007e58:	f001 f8c4 	bl	8008fe4 <_sbrk_r>
 8007e5c:	4581      	cmp	r9, r0
 8007e5e:	d142      	bne.n	8007ee6 <_malloc_r+0xea>
 8007e60:	6821      	ldr	r1, [r4, #0]
 8007e62:	4630      	mov	r0, r6
 8007e64:	1a6d      	subs	r5, r5, r1
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7ff ffa6 	bl	8007db8 <sbrk_aligned>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d03a      	beq.n	8007ee6 <_malloc_r+0xea>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	442b      	add	r3, r5
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	bb62      	cbnz	r2, 8007ed8 <_malloc_r+0xdc>
 8007e7e:	f8c8 7000 	str.w	r7, [r8]
 8007e82:	e00f      	b.n	8007ea4 <_malloc_r+0xa8>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	1b52      	subs	r2, r2, r5
 8007e88:	d420      	bmi.n	8007ecc <_malloc_r+0xd0>
 8007e8a:	2a0b      	cmp	r2, #11
 8007e8c:	d917      	bls.n	8007ebe <_malloc_r+0xc2>
 8007e8e:	1961      	adds	r1, r4, r5
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	6025      	str	r5, [r4, #0]
 8007e94:	bf18      	it	ne
 8007e96:	6059      	strne	r1, [r3, #4]
 8007e98:	6863      	ldr	r3, [r4, #4]
 8007e9a:	bf08      	it	eq
 8007e9c:	f8c8 1000 	streq.w	r1, [r8]
 8007ea0:	5162      	str	r2, [r4, r5]
 8007ea2:	604b      	str	r3, [r1, #4]
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f841 	bl	8007f2c <__malloc_unlock>
 8007eaa:	f104 000b 	add.w	r0, r4, #11
 8007eae:	1d23      	adds	r3, r4, #4
 8007eb0:	f020 0007 	bic.w	r0, r0, #7
 8007eb4:	1ac2      	subs	r2, r0, r3
 8007eb6:	bf1c      	itt	ne
 8007eb8:	1a1b      	subne	r3, r3, r0
 8007eba:	50a3      	strne	r3, [r4, r2]
 8007ebc:	e7af      	b.n	8007e1e <_malloc_r+0x22>
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	bf0c      	ite	eq
 8007ec4:	f8c8 2000 	streq.w	r2, [r8]
 8007ec8:	605a      	strne	r2, [r3, #4]
 8007eca:	e7eb      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ecc:	4623      	mov	r3, r4
 8007ece:	6864      	ldr	r4, [r4, #4]
 8007ed0:	e7ae      	b.n	8007e30 <_malloc_r+0x34>
 8007ed2:	463c      	mov	r4, r7
 8007ed4:	687f      	ldr	r7, [r7, #4]
 8007ed6:	e7b6      	b.n	8007e46 <_malloc_r+0x4a>
 8007ed8:	461a      	mov	r2, r3
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d1fb      	bne.n	8007ed8 <_malloc_r+0xdc>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6053      	str	r3, [r2, #4]
 8007ee4:	e7de      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	4630      	mov	r0, r6
 8007eea:	6033      	str	r3, [r6, #0]
 8007eec:	f000 f81e 	bl	8007f2c <__malloc_unlock>
 8007ef0:	e794      	b.n	8007e1c <_malloc_r+0x20>
 8007ef2:	6005      	str	r5, [r0, #0]
 8007ef4:	e7d6      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ef6:	bf00      	nop
 8007ef8:	200049e8 	.word	0x200049e8

08007efc <__ascii_mbtowc>:
 8007efc:	b082      	sub	sp, #8
 8007efe:	b901      	cbnz	r1, 8007f02 <__ascii_mbtowc+0x6>
 8007f00:	a901      	add	r1, sp, #4
 8007f02:	b142      	cbz	r2, 8007f16 <__ascii_mbtowc+0x1a>
 8007f04:	b14b      	cbz	r3, 8007f1a <__ascii_mbtowc+0x1e>
 8007f06:	7813      	ldrb	r3, [r2, #0]
 8007f08:	600b      	str	r3, [r1, #0]
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	1e10      	subs	r0, r2, #0
 8007f0e:	bf18      	it	ne
 8007f10:	2001      	movne	r0, #1
 8007f12:	b002      	add	sp, #8
 8007f14:	4770      	bx	lr
 8007f16:	4610      	mov	r0, r2
 8007f18:	e7fb      	b.n	8007f12 <__ascii_mbtowc+0x16>
 8007f1a:	f06f 0001 	mvn.w	r0, #1
 8007f1e:	e7f8      	b.n	8007f12 <__ascii_mbtowc+0x16>

08007f20 <__malloc_lock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	@ (8007f28 <__malloc_lock+0x8>)
 8007f22:	f7ff bba8 	b.w	8007676 <__retarget_lock_acquire_recursive>
 8007f26:	bf00      	nop
 8007f28:	200049e0 	.word	0x200049e0

08007f2c <__malloc_unlock>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	@ (8007f34 <__malloc_unlock+0x8>)
 8007f2e:	f7ff bba3 	b.w	8007678 <__retarget_lock_release_recursive>
 8007f32:	bf00      	nop
 8007f34:	200049e0 	.word	0x200049e0

08007f38 <_Balloc>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	69c6      	ldr	r6, [r0, #28]
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	460d      	mov	r5, r1
 8007f40:	b976      	cbnz	r6, 8007f60 <_Balloc+0x28>
 8007f42:	2010      	movs	r0, #16
 8007f44:	f001 f89e 	bl	8009084 <malloc>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	61e0      	str	r0, [r4, #28]
 8007f4c:	b920      	cbnz	r0, 8007f58 <_Balloc+0x20>
 8007f4e:	216b      	movs	r1, #107	@ 0x6b
 8007f50:	4b17      	ldr	r3, [pc, #92]	@ (8007fb0 <_Balloc+0x78>)
 8007f52:	4818      	ldr	r0, [pc, #96]	@ (8007fb4 <_Balloc+0x7c>)
 8007f54:	f001 f864 	bl	8009020 <__assert_func>
 8007f58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f5c:	6006      	str	r6, [r0, #0]
 8007f5e:	60c6      	str	r6, [r0, #12]
 8007f60:	69e6      	ldr	r6, [r4, #28]
 8007f62:	68f3      	ldr	r3, [r6, #12]
 8007f64:	b183      	cbz	r3, 8007f88 <_Balloc+0x50>
 8007f66:	69e3      	ldr	r3, [r4, #28]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f6e:	b9b8      	cbnz	r0, 8007fa0 <_Balloc+0x68>
 8007f70:	2101      	movs	r1, #1
 8007f72:	fa01 f605 	lsl.w	r6, r1, r5
 8007f76:	1d72      	adds	r2, r6, #5
 8007f78:	4620      	mov	r0, r4
 8007f7a:	0092      	lsls	r2, r2, #2
 8007f7c:	f001 f86e 	bl	800905c <_calloc_r>
 8007f80:	b160      	cbz	r0, 8007f9c <_Balloc+0x64>
 8007f82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f86:	e00e      	b.n	8007fa6 <_Balloc+0x6e>
 8007f88:	2221      	movs	r2, #33	@ 0x21
 8007f8a:	2104      	movs	r1, #4
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f001 f865 	bl	800905c <_calloc_r>
 8007f92:	69e3      	ldr	r3, [r4, #28]
 8007f94:	60f0      	str	r0, [r6, #12]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <_Balloc+0x2e>
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	6802      	ldr	r2, [r0, #0]
 8007fa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fac:	e7f7      	b.n	8007f9e <_Balloc+0x66>
 8007fae:	bf00      	nop
 8007fb0:	0800beac 	.word	0x0800beac
 8007fb4:	0800bec3 	.word	0x0800bec3

08007fb8 <_Bfree>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	69c6      	ldr	r6, [r0, #28]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	b976      	cbnz	r6, 8007fe0 <_Bfree+0x28>
 8007fc2:	2010      	movs	r0, #16
 8007fc4:	f001 f85e 	bl	8009084 <malloc>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	61e8      	str	r0, [r5, #28]
 8007fcc:	b920      	cbnz	r0, 8007fd8 <_Bfree+0x20>
 8007fce:	218f      	movs	r1, #143	@ 0x8f
 8007fd0:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <_Bfree+0x3c>)
 8007fd2:	4809      	ldr	r0, [pc, #36]	@ (8007ff8 <_Bfree+0x40>)
 8007fd4:	f001 f824 	bl	8009020 <__assert_func>
 8007fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fdc:	6006      	str	r6, [r0, #0]
 8007fde:	60c6      	str	r6, [r0, #12]
 8007fe0:	b13c      	cbz	r4, 8007ff2 <_Bfree+0x3a>
 8007fe2:	69eb      	ldr	r3, [r5, #28]
 8007fe4:	6862      	ldr	r2, [r4, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fec:	6021      	str	r1, [r4, #0]
 8007fee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	0800beac 	.word	0x0800beac
 8007ff8:	0800bec3 	.word	0x0800bec3

08007ffc <__multadd>:
 8007ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008000:	4607      	mov	r7, r0
 8008002:	460c      	mov	r4, r1
 8008004:	461e      	mov	r6, r3
 8008006:	2000      	movs	r0, #0
 8008008:	690d      	ldr	r5, [r1, #16]
 800800a:	f101 0c14 	add.w	ip, r1, #20
 800800e:	f8dc 3000 	ldr.w	r3, [ip]
 8008012:	3001      	adds	r0, #1
 8008014:	b299      	uxth	r1, r3
 8008016:	fb02 6101 	mla	r1, r2, r1, r6
 800801a:	0c1e      	lsrs	r6, r3, #16
 800801c:	0c0b      	lsrs	r3, r1, #16
 800801e:	fb02 3306 	mla	r3, r2, r6, r3
 8008022:	b289      	uxth	r1, r1
 8008024:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008028:	4285      	cmp	r5, r0
 800802a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800802e:	f84c 1b04 	str.w	r1, [ip], #4
 8008032:	dcec      	bgt.n	800800e <__multadd+0x12>
 8008034:	b30e      	cbz	r6, 800807a <__multadd+0x7e>
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	42ab      	cmp	r3, r5
 800803a:	dc19      	bgt.n	8008070 <__multadd+0x74>
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	4638      	mov	r0, r7
 8008040:	3101      	adds	r1, #1
 8008042:	f7ff ff79 	bl	8007f38 <_Balloc>
 8008046:	4680      	mov	r8, r0
 8008048:	b928      	cbnz	r0, 8008056 <__multadd+0x5a>
 800804a:	4602      	mov	r2, r0
 800804c:	21ba      	movs	r1, #186	@ 0xba
 800804e:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <__multadd+0x84>)
 8008050:	480c      	ldr	r0, [pc, #48]	@ (8008084 <__multadd+0x88>)
 8008052:	f000 ffe5 	bl	8009020 <__assert_func>
 8008056:	6922      	ldr	r2, [r4, #16]
 8008058:	f104 010c 	add.w	r1, r4, #12
 800805c:	3202      	adds	r2, #2
 800805e:	0092      	lsls	r2, r2, #2
 8008060:	300c      	adds	r0, #12
 8008062:	f7ff fb12 	bl	800768a <memcpy>
 8008066:	4621      	mov	r1, r4
 8008068:	4638      	mov	r0, r7
 800806a:	f7ff ffa5 	bl	8007fb8 <_Bfree>
 800806e:	4644      	mov	r4, r8
 8008070:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008074:	3501      	adds	r5, #1
 8008076:	615e      	str	r6, [r3, #20]
 8008078:	6125      	str	r5, [r4, #16]
 800807a:	4620      	mov	r0, r4
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008080:	0800be3b 	.word	0x0800be3b
 8008084:	0800bec3 	.word	0x0800bec3

08008088 <__s2b>:
 8008088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800808c:	4615      	mov	r5, r2
 800808e:	2209      	movs	r2, #9
 8008090:	461f      	mov	r7, r3
 8008092:	3308      	adds	r3, #8
 8008094:	460c      	mov	r4, r1
 8008096:	fb93 f3f2 	sdiv	r3, r3, r2
 800809a:	4606      	mov	r6, r0
 800809c:	2201      	movs	r2, #1
 800809e:	2100      	movs	r1, #0
 80080a0:	429a      	cmp	r2, r3
 80080a2:	db09      	blt.n	80080b8 <__s2b+0x30>
 80080a4:	4630      	mov	r0, r6
 80080a6:	f7ff ff47 	bl	8007f38 <_Balloc>
 80080aa:	b940      	cbnz	r0, 80080be <__s2b+0x36>
 80080ac:	4602      	mov	r2, r0
 80080ae:	21d3      	movs	r1, #211	@ 0xd3
 80080b0:	4b18      	ldr	r3, [pc, #96]	@ (8008114 <__s2b+0x8c>)
 80080b2:	4819      	ldr	r0, [pc, #100]	@ (8008118 <__s2b+0x90>)
 80080b4:	f000 ffb4 	bl	8009020 <__assert_func>
 80080b8:	0052      	lsls	r2, r2, #1
 80080ba:	3101      	adds	r1, #1
 80080bc:	e7f0      	b.n	80080a0 <__s2b+0x18>
 80080be:	9b08      	ldr	r3, [sp, #32]
 80080c0:	2d09      	cmp	r5, #9
 80080c2:	6143      	str	r3, [r0, #20]
 80080c4:	f04f 0301 	mov.w	r3, #1
 80080c8:	6103      	str	r3, [r0, #16]
 80080ca:	dd16      	ble.n	80080fa <__s2b+0x72>
 80080cc:	f104 0909 	add.w	r9, r4, #9
 80080d0:	46c8      	mov	r8, r9
 80080d2:	442c      	add	r4, r5
 80080d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080d8:	4601      	mov	r1, r0
 80080da:	220a      	movs	r2, #10
 80080dc:	4630      	mov	r0, r6
 80080de:	3b30      	subs	r3, #48	@ 0x30
 80080e0:	f7ff ff8c 	bl	8007ffc <__multadd>
 80080e4:	45a0      	cmp	r8, r4
 80080e6:	d1f5      	bne.n	80080d4 <__s2b+0x4c>
 80080e8:	f1a5 0408 	sub.w	r4, r5, #8
 80080ec:	444c      	add	r4, r9
 80080ee:	1b2d      	subs	r5, r5, r4
 80080f0:	1963      	adds	r3, r4, r5
 80080f2:	42bb      	cmp	r3, r7
 80080f4:	db04      	blt.n	8008100 <__s2b+0x78>
 80080f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fa:	2509      	movs	r5, #9
 80080fc:	340a      	adds	r4, #10
 80080fe:	e7f6      	b.n	80080ee <__s2b+0x66>
 8008100:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008104:	4601      	mov	r1, r0
 8008106:	220a      	movs	r2, #10
 8008108:	4630      	mov	r0, r6
 800810a:	3b30      	subs	r3, #48	@ 0x30
 800810c:	f7ff ff76 	bl	8007ffc <__multadd>
 8008110:	e7ee      	b.n	80080f0 <__s2b+0x68>
 8008112:	bf00      	nop
 8008114:	0800be3b 	.word	0x0800be3b
 8008118:	0800bec3 	.word	0x0800bec3

0800811c <__hi0bits>:
 800811c:	4603      	mov	r3, r0
 800811e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008122:	bf3a      	itte	cc
 8008124:	0403      	lslcc	r3, r0, #16
 8008126:	2010      	movcc	r0, #16
 8008128:	2000      	movcs	r0, #0
 800812a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800812e:	bf3c      	itt	cc
 8008130:	021b      	lslcc	r3, r3, #8
 8008132:	3008      	addcc	r0, #8
 8008134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008138:	bf3c      	itt	cc
 800813a:	011b      	lslcc	r3, r3, #4
 800813c:	3004      	addcc	r0, #4
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	bf3c      	itt	cc
 8008144:	009b      	lslcc	r3, r3, #2
 8008146:	3002      	addcc	r0, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	db05      	blt.n	8008158 <__hi0bits+0x3c>
 800814c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008150:	f100 0001 	add.w	r0, r0, #1
 8008154:	bf08      	it	eq
 8008156:	2020      	moveq	r0, #32
 8008158:	4770      	bx	lr

0800815a <__lo0bits>:
 800815a:	6803      	ldr	r3, [r0, #0]
 800815c:	4602      	mov	r2, r0
 800815e:	f013 0007 	ands.w	r0, r3, #7
 8008162:	d00b      	beq.n	800817c <__lo0bits+0x22>
 8008164:	07d9      	lsls	r1, r3, #31
 8008166:	d421      	bmi.n	80081ac <__lo0bits+0x52>
 8008168:	0798      	lsls	r0, r3, #30
 800816a:	bf49      	itett	mi
 800816c:	085b      	lsrmi	r3, r3, #1
 800816e:	089b      	lsrpl	r3, r3, #2
 8008170:	2001      	movmi	r0, #1
 8008172:	6013      	strmi	r3, [r2, #0]
 8008174:	bf5c      	itt	pl
 8008176:	2002      	movpl	r0, #2
 8008178:	6013      	strpl	r3, [r2, #0]
 800817a:	4770      	bx	lr
 800817c:	b299      	uxth	r1, r3
 800817e:	b909      	cbnz	r1, 8008184 <__lo0bits+0x2a>
 8008180:	2010      	movs	r0, #16
 8008182:	0c1b      	lsrs	r3, r3, #16
 8008184:	b2d9      	uxtb	r1, r3
 8008186:	b909      	cbnz	r1, 800818c <__lo0bits+0x32>
 8008188:	3008      	adds	r0, #8
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	0719      	lsls	r1, r3, #28
 800818e:	bf04      	itt	eq
 8008190:	091b      	lsreq	r3, r3, #4
 8008192:	3004      	addeq	r0, #4
 8008194:	0799      	lsls	r1, r3, #30
 8008196:	bf04      	itt	eq
 8008198:	089b      	lsreq	r3, r3, #2
 800819a:	3002      	addeq	r0, #2
 800819c:	07d9      	lsls	r1, r3, #31
 800819e:	d403      	bmi.n	80081a8 <__lo0bits+0x4e>
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	f100 0001 	add.w	r0, r0, #1
 80081a6:	d003      	beq.n	80081b0 <__lo0bits+0x56>
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4770      	bx	lr
 80081ac:	2000      	movs	r0, #0
 80081ae:	4770      	bx	lr
 80081b0:	2020      	movs	r0, #32
 80081b2:	4770      	bx	lr

080081b4 <__i2b>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	460c      	mov	r4, r1
 80081b8:	2101      	movs	r1, #1
 80081ba:	f7ff febd 	bl	8007f38 <_Balloc>
 80081be:	4602      	mov	r2, r0
 80081c0:	b928      	cbnz	r0, 80081ce <__i2b+0x1a>
 80081c2:	f240 1145 	movw	r1, #325	@ 0x145
 80081c6:	4b04      	ldr	r3, [pc, #16]	@ (80081d8 <__i2b+0x24>)
 80081c8:	4804      	ldr	r0, [pc, #16]	@ (80081dc <__i2b+0x28>)
 80081ca:	f000 ff29 	bl	8009020 <__assert_func>
 80081ce:	2301      	movs	r3, #1
 80081d0:	6144      	str	r4, [r0, #20]
 80081d2:	6103      	str	r3, [r0, #16]
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	bf00      	nop
 80081d8:	0800be3b 	.word	0x0800be3b
 80081dc:	0800bec3 	.word	0x0800bec3

080081e0 <__multiply>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4617      	mov	r7, r2
 80081e6:	690a      	ldr	r2, [r1, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4689      	mov	r9, r1
 80081ec:	429a      	cmp	r2, r3
 80081ee:	bfa2      	ittt	ge
 80081f0:	463b      	movge	r3, r7
 80081f2:	460f      	movge	r7, r1
 80081f4:	4699      	movge	r9, r3
 80081f6:	693d      	ldr	r5, [r7, #16]
 80081f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	eb05 060a 	add.w	r6, r5, sl
 8008204:	42b3      	cmp	r3, r6
 8008206:	b085      	sub	sp, #20
 8008208:	bfb8      	it	lt
 800820a:	3101      	addlt	r1, #1
 800820c:	f7ff fe94 	bl	8007f38 <_Balloc>
 8008210:	b930      	cbnz	r0, 8008220 <__multiply+0x40>
 8008212:	4602      	mov	r2, r0
 8008214:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008218:	4b40      	ldr	r3, [pc, #256]	@ (800831c <__multiply+0x13c>)
 800821a:	4841      	ldr	r0, [pc, #260]	@ (8008320 <__multiply+0x140>)
 800821c:	f000 ff00 	bl	8009020 <__assert_func>
 8008220:	f100 0414 	add.w	r4, r0, #20
 8008224:	4623      	mov	r3, r4
 8008226:	2200      	movs	r2, #0
 8008228:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800822c:	4573      	cmp	r3, lr
 800822e:	d320      	bcc.n	8008272 <__multiply+0x92>
 8008230:	f107 0814 	add.w	r8, r7, #20
 8008234:	f109 0114 	add.w	r1, r9, #20
 8008238:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800823c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008240:	9302      	str	r3, [sp, #8]
 8008242:	1beb      	subs	r3, r5, r7
 8008244:	3b15      	subs	r3, #21
 8008246:	f023 0303 	bic.w	r3, r3, #3
 800824a:	3304      	adds	r3, #4
 800824c:	3715      	adds	r7, #21
 800824e:	42bd      	cmp	r5, r7
 8008250:	bf38      	it	cc
 8008252:	2304      	movcc	r3, #4
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	9b02      	ldr	r3, [sp, #8]
 8008258:	9103      	str	r1, [sp, #12]
 800825a:	428b      	cmp	r3, r1
 800825c:	d80c      	bhi.n	8008278 <__multiply+0x98>
 800825e:	2e00      	cmp	r6, #0
 8008260:	dd03      	ble.n	800826a <__multiply+0x8a>
 8008262:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008266:	2b00      	cmp	r3, #0
 8008268:	d055      	beq.n	8008316 <__multiply+0x136>
 800826a:	6106      	str	r6, [r0, #16]
 800826c:	b005      	add	sp, #20
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	f843 2b04 	str.w	r2, [r3], #4
 8008276:	e7d9      	b.n	800822c <__multiply+0x4c>
 8008278:	f8b1 a000 	ldrh.w	sl, [r1]
 800827c:	f1ba 0f00 	cmp.w	sl, #0
 8008280:	d01f      	beq.n	80082c2 <__multiply+0xe2>
 8008282:	46c4      	mov	ip, r8
 8008284:	46a1      	mov	r9, r4
 8008286:	2700      	movs	r7, #0
 8008288:	f85c 2b04 	ldr.w	r2, [ip], #4
 800828c:	f8d9 3000 	ldr.w	r3, [r9]
 8008290:	fa1f fb82 	uxth.w	fp, r2
 8008294:	b29b      	uxth	r3, r3
 8008296:	fb0a 330b 	mla	r3, sl, fp, r3
 800829a:	443b      	add	r3, r7
 800829c:	f8d9 7000 	ldr.w	r7, [r9]
 80082a0:	0c12      	lsrs	r2, r2, #16
 80082a2:	0c3f      	lsrs	r7, r7, #16
 80082a4:	fb0a 7202 	mla	r2, sl, r2, r7
 80082a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b2:	4565      	cmp	r5, ip
 80082b4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082b8:	f849 3b04 	str.w	r3, [r9], #4
 80082bc:	d8e4      	bhi.n	8008288 <__multiply+0xa8>
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	50e7      	str	r7, [r4, r3]
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	3104      	adds	r1, #4
 80082c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082ca:	f1b9 0f00 	cmp.w	r9, #0
 80082ce:	d020      	beq.n	8008312 <__multiply+0x132>
 80082d0:	4647      	mov	r7, r8
 80082d2:	46a4      	mov	ip, r4
 80082d4:	f04f 0a00 	mov.w	sl, #0
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	f8b7 b000 	ldrh.w	fp, [r7]
 80082de:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	fb09 220b 	mla	r2, r9, fp, r2
 80082e8:	4452      	add	r2, sl
 80082ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ee:	f84c 3b04 	str.w	r3, [ip], #4
 80082f2:	f857 3b04 	ldr.w	r3, [r7], #4
 80082f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082fa:	f8bc 3000 	ldrh.w	r3, [ip]
 80082fe:	42bd      	cmp	r5, r7
 8008300:	fb09 330a 	mla	r3, r9, sl, r3
 8008304:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800830c:	d8e5      	bhi.n	80082da <__multiply+0xfa>
 800830e:	9a01      	ldr	r2, [sp, #4]
 8008310:	50a3      	str	r3, [r4, r2]
 8008312:	3404      	adds	r4, #4
 8008314:	e79f      	b.n	8008256 <__multiply+0x76>
 8008316:	3e01      	subs	r6, #1
 8008318:	e7a1      	b.n	800825e <__multiply+0x7e>
 800831a:	bf00      	nop
 800831c:	0800be3b 	.word	0x0800be3b
 8008320:	0800bec3 	.word	0x0800bec3

08008324 <__pow5mult>:
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008328:	4615      	mov	r5, r2
 800832a:	f012 0203 	ands.w	r2, r2, #3
 800832e:	4607      	mov	r7, r0
 8008330:	460e      	mov	r6, r1
 8008332:	d007      	beq.n	8008344 <__pow5mult+0x20>
 8008334:	4c25      	ldr	r4, [pc, #148]	@ (80083cc <__pow5mult+0xa8>)
 8008336:	3a01      	subs	r2, #1
 8008338:	2300      	movs	r3, #0
 800833a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800833e:	f7ff fe5d 	bl	8007ffc <__multadd>
 8008342:	4606      	mov	r6, r0
 8008344:	10ad      	asrs	r5, r5, #2
 8008346:	d03d      	beq.n	80083c4 <__pow5mult+0xa0>
 8008348:	69fc      	ldr	r4, [r7, #28]
 800834a:	b97c      	cbnz	r4, 800836c <__pow5mult+0x48>
 800834c:	2010      	movs	r0, #16
 800834e:	f000 fe99 	bl	8009084 <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	61f8      	str	r0, [r7, #28]
 8008356:	b928      	cbnz	r0, 8008364 <__pow5mult+0x40>
 8008358:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800835c:	4b1c      	ldr	r3, [pc, #112]	@ (80083d0 <__pow5mult+0xac>)
 800835e:	481d      	ldr	r0, [pc, #116]	@ (80083d4 <__pow5mult+0xb0>)
 8008360:	f000 fe5e 	bl	8009020 <__assert_func>
 8008364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008368:	6004      	str	r4, [r0, #0]
 800836a:	60c4      	str	r4, [r0, #12]
 800836c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008374:	b94c      	cbnz	r4, 800838a <__pow5mult+0x66>
 8008376:	f240 2171 	movw	r1, #625	@ 0x271
 800837a:	4638      	mov	r0, r7
 800837c:	f7ff ff1a 	bl	80081b4 <__i2b>
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	f8c8 0008 	str.w	r0, [r8, #8]
 8008388:	6003      	str	r3, [r0, #0]
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	07eb      	lsls	r3, r5, #31
 8008390:	d50a      	bpl.n	80083a8 <__pow5mult+0x84>
 8008392:	4631      	mov	r1, r6
 8008394:	4622      	mov	r2, r4
 8008396:	4638      	mov	r0, r7
 8008398:	f7ff ff22 	bl	80081e0 <__multiply>
 800839c:	4680      	mov	r8, r0
 800839e:	4631      	mov	r1, r6
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff fe09 	bl	8007fb8 <_Bfree>
 80083a6:	4646      	mov	r6, r8
 80083a8:	106d      	asrs	r5, r5, #1
 80083aa:	d00b      	beq.n	80083c4 <__pow5mult+0xa0>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	b938      	cbnz	r0, 80083c0 <__pow5mult+0x9c>
 80083b0:	4622      	mov	r2, r4
 80083b2:	4621      	mov	r1, r4
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff ff13 	bl	80081e0 <__multiply>
 80083ba:	6020      	str	r0, [r4, #0]
 80083bc:	f8c0 9000 	str.w	r9, [r0]
 80083c0:	4604      	mov	r4, r0
 80083c2:	e7e4      	b.n	800838e <__pow5mult+0x6a>
 80083c4:	4630      	mov	r0, r6
 80083c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ca:	bf00      	nop
 80083cc:	0800c008 	.word	0x0800c008
 80083d0:	0800beac 	.word	0x0800beac
 80083d4:	0800bec3 	.word	0x0800bec3

080083d8 <__lshift>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	4607      	mov	r7, r0
 80083e0:	4691      	mov	r9, r2
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	6849      	ldr	r1, [r1, #4]
 80083e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083f0:	f108 0601 	add.w	r6, r8, #1
 80083f4:	42b3      	cmp	r3, r6
 80083f6:	db0b      	blt.n	8008410 <__lshift+0x38>
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff fd9d 	bl	8007f38 <_Balloc>
 80083fe:	4605      	mov	r5, r0
 8008400:	b948      	cbnz	r0, 8008416 <__lshift+0x3e>
 8008402:	4602      	mov	r2, r0
 8008404:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008408:	4b27      	ldr	r3, [pc, #156]	@ (80084a8 <__lshift+0xd0>)
 800840a:	4828      	ldr	r0, [pc, #160]	@ (80084ac <__lshift+0xd4>)
 800840c:	f000 fe08 	bl	8009020 <__assert_func>
 8008410:	3101      	adds	r1, #1
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	e7ee      	b.n	80083f4 <__lshift+0x1c>
 8008416:	2300      	movs	r3, #0
 8008418:	f100 0114 	add.w	r1, r0, #20
 800841c:	f100 0210 	add.w	r2, r0, #16
 8008420:	4618      	mov	r0, r3
 8008422:	4553      	cmp	r3, sl
 8008424:	db33      	blt.n	800848e <__lshift+0xb6>
 8008426:	6920      	ldr	r0, [r4, #16]
 8008428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800842c:	f104 0314 	add.w	r3, r4, #20
 8008430:	f019 091f 	ands.w	r9, r9, #31
 8008434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008438:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800843c:	d02b      	beq.n	8008496 <__lshift+0xbe>
 800843e:	468a      	mov	sl, r1
 8008440:	2200      	movs	r2, #0
 8008442:	f1c9 0e20 	rsb	lr, r9, #32
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	fa00 f009 	lsl.w	r0, r0, r9
 800844c:	4310      	orrs	r0, r2
 800844e:	f84a 0b04 	str.w	r0, [sl], #4
 8008452:	f853 2b04 	ldr.w	r2, [r3], #4
 8008456:	459c      	cmp	ip, r3
 8008458:	fa22 f20e 	lsr.w	r2, r2, lr
 800845c:	d8f3      	bhi.n	8008446 <__lshift+0x6e>
 800845e:	ebac 0304 	sub.w	r3, ip, r4
 8008462:	3b15      	subs	r3, #21
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3304      	adds	r3, #4
 800846a:	f104 0015 	add.w	r0, r4, #21
 800846e:	4560      	cmp	r0, ip
 8008470:	bf88      	it	hi
 8008472:	2304      	movhi	r3, #4
 8008474:	50ca      	str	r2, [r1, r3]
 8008476:	b10a      	cbz	r2, 800847c <__lshift+0xa4>
 8008478:	f108 0602 	add.w	r6, r8, #2
 800847c:	3e01      	subs	r6, #1
 800847e:	4638      	mov	r0, r7
 8008480:	4621      	mov	r1, r4
 8008482:	612e      	str	r6, [r5, #16]
 8008484:	f7ff fd98 	bl	8007fb8 <_Bfree>
 8008488:	4628      	mov	r0, r5
 800848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008492:	3301      	adds	r3, #1
 8008494:	e7c5      	b.n	8008422 <__lshift+0x4a>
 8008496:	3904      	subs	r1, #4
 8008498:	f853 2b04 	ldr.w	r2, [r3], #4
 800849c:	459c      	cmp	ip, r3
 800849e:	f841 2f04 	str.w	r2, [r1, #4]!
 80084a2:	d8f9      	bhi.n	8008498 <__lshift+0xc0>
 80084a4:	e7ea      	b.n	800847c <__lshift+0xa4>
 80084a6:	bf00      	nop
 80084a8:	0800be3b 	.word	0x0800be3b
 80084ac:	0800bec3 	.word	0x0800bec3

080084b0 <__mcmp>:
 80084b0:	4603      	mov	r3, r0
 80084b2:	690a      	ldr	r2, [r1, #16]
 80084b4:	6900      	ldr	r0, [r0, #16]
 80084b6:	b530      	push	{r4, r5, lr}
 80084b8:	1a80      	subs	r0, r0, r2
 80084ba:	d10e      	bne.n	80084da <__mcmp+0x2a>
 80084bc:	3314      	adds	r3, #20
 80084be:	3114      	adds	r1, #20
 80084c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084d0:	4295      	cmp	r5, r2
 80084d2:	d003      	beq.n	80084dc <__mcmp+0x2c>
 80084d4:	d205      	bcs.n	80084e2 <__mcmp+0x32>
 80084d6:	f04f 30ff 	mov.w	r0, #4294967295
 80084da:	bd30      	pop	{r4, r5, pc}
 80084dc:	42a3      	cmp	r3, r4
 80084de:	d3f3      	bcc.n	80084c8 <__mcmp+0x18>
 80084e0:	e7fb      	b.n	80084da <__mcmp+0x2a>
 80084e2:	2001      	movs	r0, #1
 80084e4:	e7f9      	b.n	80084da <__mcmp+0x2a>
	...

080084e8 <__mdiff>:
 80084e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	4689      	mov	r9, r1
 80084ee:	4606      	mov	r6, r0
 80084f0:	4611      	mov	r1, r2
 80084f2:	4648      	mov	r0, r9
 80084f4:	4614      	mov	r4, r2
 80084f6:	f7ff ffdb 	bl	80084b0 <__mcmp>
 80084fa:	1e05      	subs	r5, r0, #0
 80084fc:	d112      	bne.n	8008524 <__mdiff+0x3c>
 80084fe:	4629      	mov	r1, r5
 8008500:	4630      	mov	r0, r6
 8008502:	f7ff fd19 	bl	8007f38 <_Balloc>
 8008506:	4602      	mov	r2, r0
 8008508:	b928      	cbnz	r0, 8008516 <__mdiff+0x2e>
 800850a:	f240 2137 	movw	r1, #567	@ 0x237
 800850e:	4b3e      	ldr	r3, [pc, #248]	@ (8008608 <__mdiff+0x120>)
 8008510:	483e      	ldr	r0, [pc, #248]	@ (800860c <__mdiff+0x124>)
 8008512:	f000 fd85 	bl	8009020 <__assert_func>
 8008516:	2301      	movs	r3, #1
 8008518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800851c:	4610      	mov	r0, r2
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	bfbc      	itt	lt
 8008526:	464b      	movlt	r3, r9
 8008528:	46a1      	movlt	r9, r4
 800852a:	4630      	mov	r0, r6
 800852c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008530:	bfba      	itte	lt
 8008532:	461c      	movlt	r4, r3
 8008534:	2501      	movlt	r5, #1
 8008536:	2500      	movge	r5, #0
 8008538:	f7ff fcfe 	bl	8007f38 <_Balloc>
 800853c:	4602      	mov	r2, r0
 800853e:	b918      	cbnz	r0, 8008548 <__mdiff+0x60>
 8008540:	f240 2145 	movw	r1, #581	@ 0x245
 8008544:	4b30      	ldr	r3, [pc, #192]	@ (8008608 <__mdiff+0x120>)
 8008546:	e7e3      	b.n	8008510 <__mdiff+0x28>
 8008548:	f100 0b14 	add.w	fp, r0, #20
 800854c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008550:	f109 0310 	add.w	r3, r9, #16
 8008554:	60c5      	str	r5, [r0, #12]
 8008556:	f04f 0c00 	mov.w	ip, #0
 800855a:	f109 0514 	add.w	r5, r9, #20
 800855e:	46d9      	mov	r9, fp
 8008560:	6926      	ldr	r6, [r4, #16]
 8008562:	f104 0e14 	add.w	lr, r4, #20
 8008566:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800856a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008576:	f853 af04 	ldr.w	sl, [r3, #4]!
 800857a:	b281      	uxth	r1, r0
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	fa1f f38a 	uxth.w	r3, sl
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	0c00      	lsrs	r0, r0, #16
 8008586:	4463      	add	r3, ip
 8008588:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800858c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008596:	4576      	cmp	r6, lr
 8008598:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800859c:	f849 3b04 	str.w	r3, [r9], #4
 80085a0:	d8e6      	bhi.n	8008570 <__mdiff+0x88>
 80085a2:	1b33      	subs	r3, r6, r4
 80085a4:	3b15      	subs	r3, #21
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	3415      	adds	r4, #21
 80085ac:	3304      	adds	r3, #4
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	bf38      	it	cc
 80085b2:	2304      	movcc	r3, #4
 80085b4:	441d      	add	r5, r3
 80085b6:	445b      	add	r3, fp
 80085b8:	461e      	mov	r6, r3
 80085ba:	462c      	mov	r4, r5
 80085bc:	4544      	cmp	r4, r8
 80085be:	d30e      	bcc.n	80085de <__mdiff+0xf6>
 80085c0:	f108 0103 	add.w	r1, r8, #3
 80085c4:	1b49      	subs	r1, r1, r5
 80085c6:	f021 0103 	bic.w	r1, r1, #3
 80085ca:	3d03      	subs	r5, #3
 80085cc:	45a8      	cmp	r8, r5
 80085ce:	bf38      	it	cc
 80085d0:	2100      	movcc	r1, #0
 80085d2:	440b      	add	r3, r1
 80085d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d8:	b199      	cbz	r1, 8008602 <__mdiff+0x11a>
 80085da:	6117      	str	r7, [r2, #16]
 80085dc:	e79e      	b.n	800851c <__mdiff+0x34>
 80085de:	46e6      	mov	lr, ip
 80085e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80085e4:	fa1f fc81 	uxth.w	ip, r1
 80085e8:	44f4      	add	ip, lr
 80085ea:	0c08      	lsrs	r0, r1, #16
 80085ec:	4471      	add	r1, lr
 80085ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085f2:	b289      	uxth	r1, r1
 80085f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085fc:	f846 1b04 	str.w	r1, [r6], #4
 8008600:	e7dc      	b.n	80085bc <__mdiff+0xd4>
 8008602:	3f01      	subs	r7, #1
 8008604:	e7e6      	b.n	80085d4 <__mdiff+0xec>
 8008606:	bf00      	nop
 8008608:	0800be3b 	.word	0x0800be3b
 800860c:	0800bec3 	.word	0x0800bec3

08008610 <__ulp>:
 8008610:	4b0e      	ldr	r3, [pc, #56]	@ (800864c <__ulp+0x3c>)
 8008612:	400b      	ands	r3, r1
 8008614:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008618:	2b00      	cmp	r3, #0
 800861a:	dc08      	bgt.n	800862e <__ulp+0x1e>
 800861c:	425b      	negs	r3, r3
 800861e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008622:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008626:	da04      	bge.n	8008632 <__ulp+0x22>
 8008628:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800862c:	4113      	asrs	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	e008      	b.n	8008644 <__ulp+0x34>
 8008632:	f1a2 0314 	sub.w	r3, r2, #20
 8008636:	2b1e      	cmp	r3, #30
 8008638:	bfd6      	itet	le
 800863a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800863e:	2201      	movgt	r2, #1
 8008640:	40da      	lsrle	r2, r3
 8008642:	2300      	movs	r3, #0
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	7ff00000 	.word	0x7ff00000

08008650 <__b2d>:
 8008650:	6902      	ldr	r2, [r0, #16]
 8008652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008654:	f100 0614 	add.w	r6, r0, #20
 8008658:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800865c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008660:	4f1e      	ldr	r7, [pc, #120]	@ (80086dc <__b2d+0x8c>)
 8008662:	4620      	mov	r0, r4
 8008664:	f7ff fd5a 	bl	800811c <__hi0bits>
 8008668:	4603      	mov	r3, r0
 800866a:	f1c0 0020 	rsb	r0, r0, #32
 800866e:	2b0a      	cmp	r3, #10
 8008670:	f1a2 0504 	sub.w	r5, r2, #4
 8008674:	6008      	str	r0, [r1, #0]
 8008676:	dc12      	bgt.n	800869e <__b2d+0x4e>
 8008678:	42ae      	cmp	r6, r5
 800867a:	bf2c      	ite	cs
 800867c:	2200      	movcs	r2, #0
 800867e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008682:	f1c3 0c0b 	rsb	ip, r3, #11
 8008686:	3315      	adds	r3, #21
 8008688:	fa24 fe0c 	lsr.w	lr, r4, ip
 800868c:	fa04 f303 	lsl.w	r3, r4, r3
 8008690:	fa22 f20c 	lsr.w	r2, r2, ip
 8008694:	ea4e 0107 	orr.w	r1, lr, r7
 8008698:	431a      	orrs	r2, r3
 800869a:	4610      	mov	r0, r2
 800869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869e:	42ae      	cmp	r6, r5
 80086a0:	bf36      	itet	cc
 80086a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80086a6:	2200      	movcs	r2, #0
 80086a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80086ac:	3b0b      	subs	r3, #11
 80086ae:	d012      	beq.n	80086d6 <__b2d+0x86>
 80086b0:	f1c3 0720 	rsb	r7, r3, #32
 80086b4:	fa22 f107 	lsr.w	r1, r2, r7
 80086b8:	409c      	lsls	r4, r3
 80086ba:	430c      	orrs	r4, r1
 80086bc:	42b5      	cmp	r5, r6
 80086be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80086c2:	bf94      	ite	ls
 80086c4:	2400      	movls	r4, #0
 80086c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80086ca:	409a      	lsls	r2, r3
 80086cc:	40fc      	lsrs	r4, r7
 80086ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80086d2:	4322      	orrs	r2, r4
 80086d4:	e7e1      	b.n	800869a <__b2d+0x4a>
 80086d6:	ea44 0107 	orr.w	r1, r4, r7
 80086da:	e7de      	b.n	800869a <__b2d+0x4a>
 80086dc:	3ff00000 	.word	0x3ff00000

080086e0 <__d2b>:
 80086e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80086e4:	2101      	movs	r1, #1
 80086e6:	4690      	mov	r8, r2
 80086e8:	4699      	mov	r9, r3
 80086ea:	9e08      	ldr	r6, [sp, #32]
 80086ec:	f7ff fc24 	bl	8007f38 <_Balloc>
 80086f0:	4604      	mov	r4, r0
 80086f2:	b930      	cbnz	r0, 8008702 <__d2b+0x22>
 80086f4:	4602      	mov	r2, r0
 80086f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80086fa:	4b23      	ldr	r3, [pc, #140]	@ (8008788 <__d2b+0xa8>)
 80086fc:	4823      	ldr	r0, [pc, #140]	@ (800878c <__d2b+0xac>)
 80086fe:	f000 fc8f 	bl	8009020 <__assert_func>
 8008702:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008706:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800870a:	b10d      	cbz	r5, 8008710 <__d2b+0x30>
 800870c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f1b8 0300 	subs.w	r3, r8, #0
 8008716:	d024      	beq.n	8008762 <__d2b+0x82>
 8008718:	4668      	mov	r0, sp
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	f7ff fd1d 	bl	800815a <__lo0bits>
 8008720:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008724:	b1d8      	cbz	r0, 800875e <__d2b+0x7e>
 8008726:	f1c0 0320 	rsb	r3, r0, #32
 800872a:	fa02 f303 	lsl.w	r3, r2, r3
 800872e:	430b      	orrs	r3, r1
 8008730:	40c2      	lsrs	r2, r0
 8008732:	6163      	str	r3, [r4, #20]
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	9b01      	ldr	r3, [sp, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	bf0c      	ite	eq
 800873c:	2201      	moveq	r2, #1
 800873e:	2202      	movne	r2, #2
 8008740:	61a3      	str	r3, [r4, #24]
 8008742:	6122      	str	r2, [r4, #16]
 8008744:	b1ad      	cbz	r5, 8008772 <__d2b+0x92>
 8008746:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800874a:	4405      	add	r5, r0
 800874c:	6035      	str	r5, [r6, #0]
 800874e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008754:	6018      	str	r0, [r3, #0]
 8008756:	4620      	mov	r0, r4
 8008758:	b002      	add	sp, #8
 800875a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800875e:	6161      	str	r1, [r4, #20]
 8008760:	e7e9      	b.n	8008736 <__d2b+0x56>
 8008762:	a801      	add	r0, sp, #4
 8008764:	f7ff fcf9 	bl	800815a <__lo0bits>
 8008768:	9b01      	ldr	r3, [sp, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	6163      	str	r3, [r4, #20]
 800876e:	3020      	adds	r0, #32
 8008770:	e7e7      	b.n	8008742 <__d2b+0x62>
 8008772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800877a:	6030      	str	r0, [r6, #0]
 800877c:	6918      	ldr	r0, [r3, #16]
 800877e:	f7ff fccd 	bl	800811c <__hi0bits>
 8008782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008786:	e7e4      	b.n	8008752 <__d2b+0x72>
 8008788:	0800be3b 	.word	0x0800be3b
 800878c:	0800bec3 	.word	0x0800bec3

08008790 <__ratio>:
 8008790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008794:	b085      	sub	sp, #20
 8008796:	e9cd 1000 	strd	r1, r0, [sp]
 800879a:	a902      	add	r1, sp, #8
 800879c:	f7ff ff58 	bl	8008650 <__b2d>
 80087a0:	468b      	mov	fp, r1
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	9800      	ldr	r0, [sp, #0]
 80087a8:	a903      	add	r1, sp, #12
 80087aa:	f7ff ff51 	bl	8008650 <__b2d>
 80087ae:	460d      	mov	r5, r1
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	4689      	mov	r9, r1
 80087b4:	6919      	ldr	r1, [r3, #16]
 80087b6:	9b00      	ldr	r3, [sp, #0]
 80087b8:	4604      	mov	r4, r0
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	4630      	mov	r0, r6
 80087be:	1ac9      	subs	r1, r1, r3
 80087c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfcd      	iteet	gt
 80087ce:	463a      	movgt	r2, r7
 80087d0:	462a      	movle	r2, r5
 80087d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80087da:	bfd8      	it	le
 80087dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087e0:	464b      	mov	r3, r9
 80087e2:	4622      	mov	r2, r4
 80087e4:	4659      	mov	r1, fp
 80087e6:	f7f7 ffa1 	bl	800072c <__aeabi_ddiv>
 80087ea:	b005      	add	sp, #20
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087f0 <__copybits>:
 80087f0:	3901      	subs	r1, #1
 80087f2:	b570      	push	{r4, r5, r6, lr}
 80087f4:	1149      	asrs	r1, r1, #5
 80087f6:	6914      	ldr	r4, [r2, #16]
 80087f8:	3101      	adds	r1, #1
 80087fa:	f102 0314 	add.w	r3, r2, #20
 80087fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008806:	1f05      	subs	r5, r0, #4
 8008808:	42a3      	cmp	r3, r4
 800880a:	d30c      	bcc.n	8008826 <__copybits+0x36>
 800880c:	1aa3      	subs	r3, r4, r2
 800880e:	3b11      	subs	r3, #17
 8008810:	f023 0303 	bic.w	r3, r3, #3
 8008814:	3211      	adds	r2, #17
 8008816:	42a2      	cmp	r2, r4
 8008818:	bf88      	it	hi
 800881a:	2300      	movhi	r3, #0
 800881c:	4418      	add	r0, r3
 800881e:	2300      	movs	r3, #0
 8008820:	4288      	cmp	r0, r1
 8008822:	d305      	bcc.n	8008830 <__copybits+0x40>
 8008824:	bd70      	pop	{r4, r5, r6, pc}
 8008826:	f853 6b04 	ldr.w	r6, [r3], #4
 800882a:	f845 6f04 	str.w	r6, [r5, #4]!
 800882e:	e7eb      	b.n	8008808 <__copybits+0x18>
 8008830:	f840 3b04 	str.w	r3, [r0], #4
 8008834:	e7f4      	b.n	8008820 <__copybits+0x30>

08008836 <__any_on>:
 8008836:	f100 0214 	add.w	r2, r0, #20
 800883a:	6900      	ldr	r0, [r0, #16]
 800883c:	114b      	asrs	r3, r1, #5
 800883e:	4298      	cmp	r0, r3
 8008840:	b510      	push	{r4, lr}
 8008842:	db11      	blt.n	8008868 <__any_on+0x32>
 8008844:	dd0a      	ble.n	800885c <__any_on+0x26>
 8008846:	f011 011f 	ands.w	r1, r1, #31
 800884a:	d007      	beq.n	800885c <__any_on+0x26>
 800884c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008850:	fa24 f001 	lsr.w	r0, r4, r1
 8008854:	fa00 f101 	lsl.w	r1, r0, r1
 8008858:	428c      	cmp	r4, r1
 800885a:	d10b      	bne.n	8008874 <__any_on+0x3e>
 800885c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008860:	4293      	cmp	r3, r2
 8008862:	d803      	bhi.n	800886c <__any_on+0x36>
 8008864:	2000      	movs	r0, #0
 8008866:	bd10      	pop	{r4, pc}
 8008868:	4603      	mov	r3, r0
 800886a:	e7f7      	b.n	800885c <__any_on+0x26>
 800886c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008870:	2900      	cmp	r1, #0
 8008872:	d0f5      	beq.n	8008860 <__any_on+0x2a>
 8008874:	2001      	movs	r0, #1
 8008876:	e7f6      	b.n	8008866 <__any_on+0x30>

08008878 <__ascii_wctomb>:
 8008878:	4603      	mov	r3, r0
 800887a:	4608      	mov	r0, r1
 800887c:	b141      	cbz	r1, 8008890 <__ascii_wctomb+0x18>
 800887e:	2aff      	cmp	r2, #255	@ 0xff
 8008880:	d904      	bls.n	800888c <__ascii_wctomb+0x14>
 8008882:	228a      	movs	r2, #138	@ 0x8a
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	4770      	bx	lr
 800888c:	2001      	movs	r0, #1
 800888e:	700a      	strb	r2, [r1, #0]
 8008890:	4770      	bx	lr

08008892 <__ssputs_r>:
 8008892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008896:	461f      	mov	r7, r3
 8008898:	688e      	ldr	r6, [r1, #8]
 800889a:	4682      	mov	sl, r0
 800889c:	42be      	cmp	r6, r7
 800889e:	460c      	mov	r4, r1
 80088a0:	4690      	mov	r8, r2
 80088a2:	680b      	ldr	r3, [r1, #0]
 80088a4:	d82d      	bhi.n	8008902 <__ssputs_r+0x70>
 80088a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088ae:	d026      	beq.n	80088fe <__ssputs_r+0x6c>
 80088b0:	6965      	ldr	r5, [r4, #20]
 80088b2:	6909      	ldr	r1, [r1, #16]
 80088b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088b8:	eba3 0901 	sub.w	r9, r3, r1
 80088bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c0:	1c7b      	adds	r3, r7, #1
 80088c2:	444b      	add	r3, r9
 80088c4:	106d      	asrs	r5, r5, #1
 80088c6:	429d      	cmp	r5, r3
 80088c8:	bf38      	it	cc
 80088ca:	461d      	movcc	r5, r3
 80088cc:	0553      	lsls	r3, r2, #21
 80088ce:	d527      	bpl.n	8008920 <__ssputs_r+0x8e>
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7ff fa93 	bl	8007dfc <_malloc_r>
 80088d6:	4606      	mov	r6, r0
 80088d8:	b360      	cbz	r0, 8008934 <__ssputs_r+0xa2>
 80088da:	464a      	mov	r2, r9
 80088dc:	6921      	ldr	r1, [r4, #16]
 80088de:	f7fe fed4 	bl	800768a <memcpy>
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	6126      	str	r6, [r4, #16]
 80088f0:	444e      	add	r6, r9
 80088f2:	6026      	str	r6, [r4, #0]
 80088f4:	463e      	mov	r6, r7
 80088f6:	6165      	str	r5, [r4, #20]
 80088f8:	eba5 0509 	sub.w	r5, r5, r9
 80088fc:	60a5      	str	r5, [r4, #8]
 80088fe:	42be      	cmp	r6, r7
 8008900:	d900      	bls.n	8008904 <__ssputs_r+0x72>
 8008902:	463e      	mov	r6, r7
 8008904:	4632      	mov	r2, r6
 8008906:	4641      	mov	r1, r8
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	f000 fb51 	bl	8008fb0 <memmove>
 800890e:	2000      	movs	r0, #0
 8008910:	68a3      	ldr	r3, [r4, #8]
 8008912:	1b9b      	subs	r3, r3, r6
 8008914:	60a3      	str	r3, [r4, #8]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	4433      	add	r3, r6
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008920:	462a      	mov	r2, r5
 8008922:	f000 fbb7 	bl	8009094 <_realloc_r>
 8008926:	4606      	mov	r6, r0
 8008928:	2800      	cmp	r0, #0
 800892a:	d1e0      	bne.n	80088ee <__ssputs_r+0x5c>
 800892c:	4650      	mov	r0, sl
 800892e:	6921      	ldr	r1, [r4, #16]
 8008930:	f7fe fec0 	bl	80076b4 <_free_r>
 8008934:	230c      	movs	r3, #12
 8008936:	f8ca 3000 	str.w	r3, [sl]
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	e7e9      	b.n	800891c <__ssputs_r+0x8a>

08008948 <_svfiprintf_r>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	4698      	mov	r8, r3
 800894e:	898b      	ldrh	r3, [r1, #12]
 8008950:	4607      	mov	r7, r0
 8008952:	061b      	lsls	r3, r3, #24
 8008954:	460d      	mov	r5, r1
 8008956:	4614      	mov	r4, r2
 8008958:	b09d      	sub	sp, #116	@ 0x74
 800895a:	d510      	bpl.n	800897e <_svfiprintf_r+0x36>
 800895c:	690b      	ldr	r3, [r1, #16]
 800895e:	b973      	cbnz	r3, 800897e <_svfiprintf_r+0x36>
 8008960:	2140      	movs	r1, #64	@ 0x40
 8008962:	f7ff fa4b 	bl	8007dfc <_malloc_r>
 8008966:	6028      	str	r0, [r5, #0]
 8008968:	6128      	str	r0, [r5, #16]
 800896a:	b930      	cbnz	r0, 800897a <_svfiprintf_r+0x32>
 800896c:	230c      	movs	r3, #12
 800896e:	603b      	str	r3, [r7, #0]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	b01d      	add	sp, #116	@ 0x74
 8008976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897a:	2340      	movs	r3, #64	@ 0x40
 800897c:	616b      	str	r3, [r5, #20]
 800897e:	2300      	movs	r3, #0
 8008980:	9309      	str	r3, [sp, #36]	@ 0x24
 8008982:	2320      	movs	r3, #32
 8008984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008988:	2330      	movs	r3, #48	@ 0x30
 800898a:	f04f 0901 	mov.w	r9, #1
 800898e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008992:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008b2c <_svfiprintf_r+0x1e4>
 8008996:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800899a:	4623      	mov	r3, r4
 800899c:	469a      	mov	sl, r3
 800899e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a2:	b10a      	cbz	r2, 80089a8 <_svfiprintf_r+0x60>
 80089a4:	2a25      	cmp	r2, #37	@ 0x25
 80089a6:	d1f9      	bne.n	800899c <_svfiprintf_r+0x54>
 80089a8:	ebba 0b04 	subs.w	fp, sl, r4
 80089ac:	d00b      	beq.n	80089c6 <_svfiprintf_r+0x7e>
 80089ae:	465b      	mov	r3, fp
 80089b0:	4622      	mov	r2, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ff6c 	bl	8008892 <__ssputs_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	f000 80a7 	beq.w	8008b0e <_svfiprintf_r+0x1c6>
 80089c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c2:	445a      	add	r2, fp
 80089c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80089c6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 809f 	beq.w	8008b0e <_svfiprintf_r+0x1c6>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295
 80089d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089da:	f10a 0a01 	add.w	sl, sl, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80089e8:	4654      	mov	r4, sl
 80089ea:	2205      	movs	r2, #5
 80089ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f0:	484e      	ldr	r0, [pc, #312]	@ (8008b2c <_svfiprintf_r+0x1e4>)
 80089f2:	f000 fb07 	bl	8009004 <memchr>
 80089f6:	9a04      	ldr	r2, [sp, #16]
 80089f8:	b9d8      	cbnz	r0, 8008a32 <_svfiprintf_r+0xea>
 80089fa:	06d0      	lsls	r0, r2, #27
 80089fc:	bf44      	itt	mi
 80089fe:	2320      	movmi	r3, #32
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a04:	0711      	lsls	r1, r2, #28
 8008a06:	bf44      	itt	mi
 8008a08:	232b      	movmi	r3, #43	@ 0x2b
 8008a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a14:	d015      	beq.n	8008a42 <_svfiprintf_r+0xfa>
 8008a16:	4654      	mov	r4, sl
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	9a07      	ldr	r2, [sp, #28]
 8008a20:	4621      	mov	r1, r4
 8008a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a26:	3b30      	subs	r3, #48	@ 0x30
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d94b      	bls.n	8008ac4 <_svfiprintf_r+0x17c>
 8008a2c:	b1b0      	cbz	r0, 8008a5c <_svfiprintf_r+0x114>
 8008a2e:	9207      	str	r2, [sp, #28]
 8008a30:	e014      	b.n	8008a5c <_svfiprintf_r+0x114>
 8008a32:	eba0 0308 	sub.w	r3, r0, r8
 8008a36:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	e7d2      	b.n	80089e8 <_svfiprintf_r+0xa0>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	1d19      	adds	r1, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	425b      	neglt	r3, r3
 8008a50:	f042 0202 	orrlt.w	r2, r2, #2
 8008a54:	9307      	strge	r3, [sp, #28]
 8008a56:	9307      	strlt	r3, [sp, #28]
 8008a58:	bfb8      	it	lt
 8008a5a:	9204      	strlt	r2, [sp, #16]
 8008a5c:	7823      	ldrb	r3, [r4, #0]
 8008a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a60:	d10a      	bne.n	8008a78 <_svfiprintf_r+0x130>
 8008a62:	7863      	ldrb	r3, [r4, #1]
 8008a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a66:	d132      	bne.n	8008ace <_svfiprintf_r+0x186>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	3402      	adds	r4, #2
 8008a6c:	1d1a      	adds	r2, r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	9203      	str	r2, [sp, #12]
 8008a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a76:	9305      	str	r3, [sp, #20]
 8008a78:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008b30 <_svfiprintf_r+0x1e8>
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	4650      	mov	r0, sl
 8008a80:	7821      	ldrb	r1, [r4, #0]
 8008a82:	f000 fabf 	bl	8009004 <memchr>
 8008a86:	b138      	cbz	r0, 8008a98 <_svfiprintf_r+0x150>
 8008a88:	2240      	movs	r2, #64	@ 0x40
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	eba0 000a 	sub.w	r0, r0, sl
 8008a90:	4082      	lsls	r2, r0
 8008a92:	4313      	orrs	r3, r2
 8008a94:	3401      	adds	r4, #1
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9c:	2206      	movs	r2, #6
 8008a9e:	4825      	ldr	r0, [pc, #148]	@ (8008b34 <_svfiprintf_r+0x1ec>)
 8008aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aa4:	f000 faae 	bl	8009004 <memchr>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d036      	beq.n	8008b1a <_svfiprintf_r+0x1d2>
 8008aac:	4b22      	ldr	r3, [pc, #136]	@ (8008b38 <_svfiprintf_r+0x1f0>)
 8008aae:	bb1b      	cbnz	r3, 8008af8 <_svfiprintf_r+0x1b0>
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	3307      	adds	r3, #7
 8008ab4:	f023 0307 	bic.w	r3, r3, #7
 8008ab8:	3308      	adds	r3, #8
 8008aba:	9303      	str	r3, [sp, #12]
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	4433      	add	r3, r6
 8008ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac2:	e76a      	b.n	800899a <_svfiprintf_r+0x52>
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008acc:	e7a8      	b.n	8008a20 <_svfiprintf_r+0xd8>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f04f 0c0a 	mov.w	ip, #10
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	9305      	str	r3, [sp, #20]
 8008ada:	4620      	mov	r0, r4
 8008adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae0:	3a30      	subs	r2, #48	@ 0x30
 8008ae2:	2a09      	cmp	r2, #9
 8008ae4:	d903      	bls.n	8008aee <_svfiprintf_r+0x1a6>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0c6      	beq.n	8008a78 <_svfiprintf_r+0x130>
 8008aea:	9105      	str	r1, [sp, #20]
 8008aec:	e7c4      	b.n	8008a78 <_svfiprintf_r+0x130>
 8008aee:	4604      	mov	r4, r0
 8008af0:	2301      	movs	r3, #1
 8008af2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af6:	e7f0      	b.n	8008ada <_svfiprintf_r+0x192>
 8008af8:	ab03      	add	r3, sp, #12
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	462a      	mov	r2, r5
 8008afe:	4638      	mov	r0, r7
 8008b00:	4b0e      	ldr	r3, [pc, #56]	@ (8008b3c <_svfiprintf_r+0x1f4>)
 8008b02:	a904      	add	r1, sp, #16
 8008b04:	f3af 8000 	nop.w
 8008b08:	1c42      	adds	r2, r0, #1
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	d1d6      	bne.n	8008abc <_svfiprintf_r+0x174>
 8008b0e:	89ab      	ldrh	r3, [r5, #12]
 8008b10:	065b      	lsls	r3, r3, #25
 8008b12:	f53f af2d 	bmi.w	8008970 <_svfiprintf_r+0x28>
 8008b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b18:	e72c      	b.n	8008974 <_svfiprintf_r+0x2c>
 8008b1a:	ab03      	add	r3, sp, #12
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	462a      	mov	r2, r5
 8008b20:	4638      	mov	r0, r7
 8008b22:	4b06      	ldr	r3, [pc, #24]	@ (8008b3c <_svfiprintf_r+0x1f4>)
 8008b24:	a904      	add	r1, sp, #16
 8008b26:	f000 f87d 	bl	8008c24 <_printf_i>
 8008b2a:	e7ed      	b.n	8008b08 <_svfiprintf_r+0x1c0>
 8008b2c:	0800bf1c 	.word	0x0800bf1c
 8008b30:	0800bf22 	.word	0x0800bf22
 8008b34:	0800bf26 	.word	0x0800bf26
 8008b38:	00000000 	.word	0x00000000
 8008b3c:	08008893 	.word	0x08008893

08008b40 <_printf_common>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	4616      	mov	r6, r2
 8008b46:	4698      	mov	r8, r3
 8008b48:	688a      	ldr	r2, [r1, #8]
 8008b4a:	690b      	ldr	r3, [r1, #16]
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	bfb8      	it	lt
 8008b52:	4613      	movlt	r3, r2
 8008b54:	6033      	str	r3, [r6, #0]
 8008b56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b60:	b10a      	cbz	r2, 8008b66 <_printf_common+0x26>
 8008b62:	3301      	adds	r3, #1
 8008b64:	6033      	str	r3, [r6, #0]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	0699      	lsls	r1, r3, #26
 8008b6a:	bf42      	ittt	mi
 8008b6c:	6833      	ldrmi	r3, [r6, #0]
 8008b6e:	3302      	addmi	r3, #2
 8008b70:	6033      	strmi	r3, [r6, #0]
 8008b72:	6825      	ldr	r5, [r4, #0]
 8008b74:	f015 0506 	ands.w	r5, r5, #6
 8008b78:	d106      	bne.n	8008b88 <_printf_common+0x48>
 8008b7a:	f104 0a19 	add.w	sl, r4, #25
 8008b7e:	68e3      	ldr	r3, [r4, #12]
 8008b80:	6832      	ldr	r2, [r6, #0]
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	42ab      	cmp	r3, r5
 8008b86:	dc2b      	bgt.n	8008be0 <_printf_common+0xa0>
 8008b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b8c:	6822      	ldr	r2, [r4, #0]
 8008b8e:	3b00      	subs	r3, #0
 8008b90:	bf18      	it	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	0692      	lsls	r2, r2, #26
 8008b96:	d430      	bmi.n	8008bfa <_printf_common+0xba>
 8008b98:	4641      	mov	r1, r8
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ba0:	47c8      	blx	r9
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d023      	beq.n	8008bee <_printf_common+0xae>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	6922      	ldr	r2, [r4, #16]
 8008baa:	f003 0306 	and.w	r3, r3, #6
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	bf14      	ite	ne
 8008bb2:	2500      	movne	r5, #0
 8008bb4:	6833      	ldreq	r3, [r6, #0]
 8008bb6:	f04f 0600 	mov.w	r6, #0
 8008bba:	bf08      	it	eq
 8008bbc:	68e5      	ldreq	r5, [r4, #12]
 8008bbe:	f104 041a 	add.w	r4, r4, #26
 8008bc2:	bf08      	it	eq
 8008bc4:	1aed      	subeq	r5, r5, r3
 8008bc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008bca:	bf08      	it	eq
 8008bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	bfc4      	itt	gt
 8008bd4:	1a9b      	subgt	r3, r3, r2
 8008bd6:	18ed      	addgt	r5, r5, r3
 8008bd8:	42b5      	cmp	r5, r6
 8008bda:	d11a      	bne.n	8008c12 <_printf_common+0xd2>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e008      	b.n	8008bf2 <_printf_common+0xb2>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4652      	mov	r2, sl
 8008be4:	4641      	mov	r1, r8
 8008be6:	4638      	mov	r0, r7
 8008be8:	47c8      	blx	r9
 8008bea:	3001      	adds	r0, #1
 8008bec:	d103      	bne.n	8008bf6 <_printf_common+0xb6>
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	e7c1      	b.n	8008b7e <_printf_common+0x3e>
 8008bfa:	2030      	movs	r0, #48	@ 0x30
 8008bfc:	18e1      	adds	r1, r4, r3
 8008bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c08:	4422      	add	r2, r4
 8008c0a:	3302      	adds	r3, #2
 8008c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c10:	e7c2      	b.n	8008b98 <_printf_common+0x58>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4622      	mov	r2, r4
 8008c16:	4641      	mov	r1, r8
 8008c18:	4638      	mov	r0, r7
 8008c1a:	47c8      	blx	r9
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d0e6      	beq.n	8008bee <_printf_common+0xae>
 8008c20:	3601      	adds	r6, #1
 8008c22:	e7d9      	b.n	8008bd8 <_printf_common+0x98>

08008c24 <_printf_i>:
 8008c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	7e0f      	ldrb	r7, [r1, #24]
 8008c2a:	4691      	mov	r9, r2
 8008c2c:	2f78      	cmp	r7, #120	@ 0x78
 8008c2e:	4680      	mov	r8, r0
 8008c30:	460c      	mov	r4, r1
 8008c32:	469a      	mov	sl, r3
 8008c34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c3a:	d807      	bhi.n	8008c4c <_printf_i+0x28>
 8008c3c:	2f62      	cmp	r7, #98	@ 0x62
 8008c3e:	d80a      	bhi.n	8008c56 <_printf_i+0x32>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	f000 80d1 	beq.w	8008de8 <_printf_i+0x1c4>
 8008c46:	2f58      	cmp	r7, #88	@ 0x58
 8008c48:	f000 80b8 	beq.w	8008dbc <_printf_i+0x198>
 8008c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c54:	e03a      	b.n	8008ccc <_printf_i+0xa8>
 8008c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c5a:	2b15      	cmp	r3, #21
 8008c5c:	d8f6      	bhi.n	8008c4c <_printf_i+0x28>
 8008c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c64 <_printf_i+0x40>)
 8008c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c64:	08008cbd 	.word	0x08008cbd
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008c4d 	.word	0x08008c4d
 8008c70:	08008c4d 	.word	0x08008c4d
 8008c74:	08008c4d 	.word	0x08008c4d
 8008c78:	08008c4d 	.word	0x08008c4d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c4d 	.word	0x08008c4d
 8008c84:	08008c4d 	.word	0x08008c4d
 8008c88:	08008c4d 	.word	0x08008c4d
 8008c8c:	08008c4d 	.word	0x08008c4d
 8008c90:	08008dcf 	.word	0x08008dcf
 8008c94:	08008cfb 	.word	0x08008cfb
 8008c98:	08008d89 	.word	0x08008d89
 8008c9c:	08008c4d 	.word	0x08008c4d
 8008ca0:	08008c4d 	.word	0x08008c4d
 8008ca4:	08008df1 	.word	0x08008df1
 8008ca8:	08008c4d 	.word	0x08008c4d
 8008cac:	08008cfb 	.word	0x08008cfb
 8008cb0:	08008c4d 	.word	0x08008c4d
 8008cb4:	08008c4d 	.word	0x08008c4d
 8008cb8:	08008d91 	.word	0x08008d91
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6032      	str	r2, [r6, #0]
 8008cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e09c      	b.n	8008e0a <_printf_i+0x1e6>
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6031      	str	r1, [r6, #0]
 8008cd8:	0606      	lsls	r6, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xbc>
 8008cdc:	681d      	ldr	r5, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <_printf_i+0xc4>
 8008ce0:	0645      	lsls	r5, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xb8>
 8008ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	da03      	bge.n	8008cf4 <_printf_i+0xd0>
 8008cec:	232d      	movs	r3, #45	@ 0x2d
 8008cee:	426d      	negs	r5, r5
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cf4:	230a      	movs	r3, #10
 8008cf6:	4858      	ldr	r0, [pc, #352]	@ (8008e58 <_printf_i+0x234>)
 8008cf8:	e011      	b.n	8008d1e <_printf_i+0xfa>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	0608      	lsls	r0, r1, #24
 8008d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d04:	d402      	bmi.n	8008d0c <_printf_i+0xe8>
 8008d06:	0649      	lsls	r1, r1, #25
 8008d08:	bf48      	it	mi
 8008d0a:	b2ad      	uxthmi	r5, r5
 8008d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	bf14      	ite	ne
 8008d12:	230a      	movne	r3, #10
 8008d14:	2308      	moveq	r3, #8
 8008d16:	4850      	ldr	r0, [pc, #320]	@ (8008e58 <_printf_i+0x234>)
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d1e:	6866      	ldr	r6, [r4, #4]
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	60a6      	str	r6, [r4, #8]
 8008d24:	db05      	blt.n	8008d32 <_printf_i+0x10e>
 8008d26:	6821      	ldr	r1, [r4, #0]
 8008d28:	432e      	orrs	r6, r5
 8008d2a:	f021 0104 	bic.w	r1, r1, #4
 8008d2e:	6021      	str	r1, [r4, #0]
 8008d30:	d04b      	beq.n	8008dca <_printf_i+0x1a6>
 8008d32:	4616      	mov	r6, r2
 8008d34:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d38:	fb03 5711 	mls	r7, r3, r1, r5
 8008d3c:	5dc7      	ldrb	r7, [r0, r7]
 8008d3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d42:	462f      	mov	r7, r5
 8008d44:	42bb      	cmp	r3, r7
 8008d46:	460d      	mov	r5, r1
 8008d48:	d9f4      	bls.n	8008d34 <_printf_i+0x110>
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d10b      	bne.n	8008d66 <_printf_i+0x142>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	07df      	lsls	r7, r3, #31
 8008d52:	d508      	bpl.n	8008d66 <_printf_i+0x142>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	6861      	ldr	r1, [r4, #4]
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	bfde      	ittt	le
 8008d5c:	2330      	movle	r3, #48	@ 0x30
 8008d5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d66:	1b92      	subs	r2, r2, r6
 8008d68:	6122      	str	r2, [r4, #16]
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f8cd a000 	str.w	sl, [sp]
 8008d74:	aa03      	add	r2, sp, #12
 8008d76:	f7ff fee3 	bl	8008b40 <_printf_common>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d14a      	bne.n	8008e14 <_printf_i+0x1f0>
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	b004      	add	sp, #16
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	f043 0320 	orr.w	r3, r3, #32
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	2778      	movs	r7, #120	@ 0x78
 8008d92:	4832      	ldr	r0, [pc, #200]	@ (8008e5c <_printf_i+0x238>)
 8008d94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	6831      	ldr	r1, [r6, #0]
 8008d9c:	061f      	lsls	r7, r3, #24
 8008d9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008da2:	d402      	bmi.n	8008daa <_printf_i+0x186>
 8008da4:	065f      	lsls	r7, r3, #25
 8008da6:	bf48      	it	mi
 8008da8:	b2ad      	uxthmi	r5, r5
 8008daa:	6031      	str	r1, [r6, #0]
 8008dac:	07d9      	lsls	r1, r3, #31
 8008dae:	bf44      	itt	mi
 8008db0:	f043 0320 	orrmi.w	r3, r3, #32
 8008db4:	6023      	strmi	r3, [r4, #0]
 8008db6:	b11d      	cbz	r5, 8008dc0 <_printf_i+0x19c>
 8008db8:	2310      	movs	r3, #16
 8008dba:	e7ad      	b.n	8008d18 <_printf_i+0xf4>
 8008dbc:	4826      	ldr	r0, [pc, #152]	@ (8008e58 <_printf_i+0x234>)
 8008dbe:	e7e9      	b.n	8008d94 <_printf_i+0x170>
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	f023 0320 	bic.w	r3, r3, #32
 8008dc6:	6023      	str	r3, [r4, #0]
 8008dc8:	e7f6      	b.n	8008db8 <_printf_i+0x194>
 8008dca:	4616      	mov	r6, r2
 8008dcc:	e7bd      	b.n	8008d4a <_printf_i+0x126>
 8008dce:	6833      	ldr	r3, [r6, #0]
 8008dd0:	6825      	ldr	r5, [r4, #0]
 8008dd2:	1d18      	adds	r0, r3, #4
 8008dd4:	6961      	ldr	r1, [r4, #20]
 8008dd6:	6030      	str	r0, [r6, #0]
 8008dd8:	062e      	lsls	r6, r5, #24
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	d501      	bpl.n	8008de2 <_printf_i+0x1be>
 8008dde:	6019      	str	r1, [r3, #0]
 8008de0:	e002      	b.n	8008de8 <_printf_i+0x1c4>
 8008de2:	0668      	lsls	r0, r5, #25
 8008de4:	d5fb      	bpl.n	8008dde <_printf_i+0x1ba>
 8008de6:	8019      	strh	r1, [r3, #0]
 8008de8:	2300      	movs	r3, #0
 8008dea:	4616      	mov	r6, r2
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	e7bc      	b.n	8008d6a <_printf_i+0x146>
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	2100      	movs	r1, #0
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	6032      	str	r2, [r6, #0]
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	6862      	ldr	r2, [r4, #4]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 f901 	bl	8009004 <memchr>
 8008e02:	b108      	cbz	r0, 8008e08 <_printf_i+0x1e4>
 8008e04:	1b80      	subs	r0, r0, r6
 8008e06:	6060      	str	r0, [r4, #4]
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e12:	e7aa      	b.n	8008d6a <_printf_i+0x146>
 8008e14:	4632      	mov	r2, r6
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	47d0      	blx	sl
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d0ad      	beq.n	8008d7e <_printf_i+0x15a>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	079b      	lsls	r3, r3, #30
 8008e26:	d413      	bmi.n	8008e50 <_printf_i+0x22c>
 8008e28:	68e0      	ldr	r0, [r4, #12]
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	4298      	cmp	r0, r3
 8008e2e:	bfb8      	it	lt
 8008e30:	4618      	movlt	r0, r3
 8008e32:	e7a6      	b.n	8008d82 <_printf_i+0x15e>
 8008e34:	2301      	movs	r3, #1
 8008e36:	4632      	mov	r2, r6
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	47d0      	blx	sl
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d09d      	beq.n	8008d7e <_printf_i+0x15a>
 8008e42:	3501      	adds	r5, #1
 8008e44:	68e3      	ldr	r3, [r4, #12]
 8008e46:	9903      	ldr	r1, [sp, #12]
 8008e48:	1a5b      	subs	r3, r3, r1
 8008e4a:	42ab      	cmp	r3, r5
 8008e4c:	dcf2      	bgt.n	8008e34 <_printf_i+0x210>
 8008e4e:	e7eb      	b.n	8008e28 <_printf_i+0x204>
 8008e50:	2500      	movs	r5, #0
 8008e52:	f104 0619 	add.w	r6, r4, #25
 8008e56:	e7f5      	b.n	8008e44 <_printf_i+0x220>
 8008e58:	0800bf2d 	.word	0x0800bf2d
 8008e5c:	0800bf3e 	.word	0x0800bf3e

08008e60 <__sflush_r>:
 8008e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	0716      	lsls	r6, r2, #28
 8008e68:	4605      	mov	r5, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	d454      	bmi.n	8008f18 <__sflush_r+0xb8>
 8008e6e:	684b      	ldr	r3, [r1, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc02      	bgt.n	8008e7a <__sflush_r+0x1a>
 8008e74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	dd48      	ble.n	8008f0c <__sflush_r+0xac>
 8008e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e7c:	2e00      	cmp	r6, #0
 8008e7e:	d045      	beq.n	8008f0c <__sflush_r+0xac>
 8008e80:	2300      	movs	r3, #0
 8008e82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e86:	682f      	ldr	r7, [r5, #0]
 8008e88:	6a21      	ldr	r1, [r4, #32]
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	d030      	beq.n	8008ef0 <__sflush_r+0x90>
 8008e8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	0759      	lsls	r1, r3, #29
 8008e94:	d505      	bpl.n	8008ea2 <__sflush_r+0x42>
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	1ad2      	subs	r2, r2, r3
 8008e9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e9c:	b10b      	cbz	r3, 8008ea2 <__sflush_r+0x42>
 8008e9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008ea0:	1ad2      	subs	r2, r2, r3
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea8:	6a21      	ldr	r1, [r4, #32]
 8008eaa:	47b0      	blx	r6
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	d106      	bne.n	8008ec0 <__sflush_r+0x60>
 8008eb2:	6829      	ldr	r1, [r5, #0]
 8008eb4:	291d      	cmp	r1, #29
 8008eb6:	d82b      	bhi.n	8008f10 <__sflush_r+0xb0>
 8008eb8:	4a28      	ldr	r2, [pc, #160]	@ (8008f5c <__sflush_r+0xfc>)
 8008eba:	40ca      	lsrs	r2, r1
 8008ebc:	07d6      	lsls	r6, r2, #31
 8008ebe:	d527      	bpl.n	8008f10 <__sflush_r+0xb0>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	6062      	str	r2, [r4, #4]
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	04d9      	lsls	r1, r3, #19
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	d504      	bpl.n	8008ed6 <__sflush_r+0x76>
 8008ecc:	1c42      	adds	r2, r0, #1
 8008ece:	d101      	bne.n	8008ed4 <__sflush_r+0x74>
 8008ed0:	682b      	ldr	r3, [r5, #0]
 8008ed2:	b903      	cbnz	r3, 8008ed6 <__sflush_r+0x76>
 8008ed4:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ed6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ed8:	602f      	str	r7, [r5, #0]
 8008eda:	b1b9      	cbz	r1, 8008f0c <__sflush_r+0xac>
 8008edc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__sflush_r+0x8a>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7fe fbe5 	bl	80076b4 <_free_r>
 8008eea:	2300      	movs	r3, #0
 8008eec:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eee:	e00d      	b.n	8008f0c <__sflush_r+0xac>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b0      	blx	r6
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	1c50      	adds	r0, r2, #1
 8008efa:	d1c9      	bne.n	8008e90 <__sflush_r+0x30>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0c6      	beq.n	8008e90 <__sflush_r+0x30>
 8008f02:	2b1d      	cmp	r3, #29
 8008f04:	d001      	beq.n	8008f0a <__sflush_r+0xaa>
 8008f06:	2b16      	cmp	r3, #22
 8008f08:	d11d      	bne.n	8008f46 <__sflush_r+0xe6>
 8008f0a:	602f      	str	r7, [r5, #0]
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e021      	b.n	8008f54 <__sflush_r+0xf4>
 8008f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	e01a      	b.n	8008f4e <__sflush_r+0xee>
 8008f18:	690f      	ldr	r7, [r1, #16]
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	d0f6      	beq.n	8008f0c <__sflush_r+0xac>
 8008f1e:	0793      	lsls	r3, r2, #30
 8008f20:	bf18      	it	ne
 8008f22:	2300      	movne	r3, #0
 8008f24:	680e      	ldr	r6, [r1, #0]
 8008f26:	bf08      	it	eq
 8008f28:	694b      	ldreq	r3, [r1, #20]
 8008f2a:	1bf6      	subs	r6, r6, r7
 8008f2c:	600f      	str	r7, [r1, #0]
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	ddeb      	ble.n	8008f0c <__sflush_r+0xac>
 8008f34:	4633      	mov	r3, r6
 8008f36:	463a      	mov	r2, r7
 8008f38:	4628      	mov	r0, r5
 8008f3a:	6a21      	ldr	r1, [r4, #32]
 8008f3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008f40:	47e0      	blx	ip
 8008f42:	2800      	cmp	r0, #0
 8008f44:	dc07      	bgt.n	8008f56 <__sflush_r+0xf6>
 8008f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f56:	4407      	add	r7, r0
 8008f58:	1a36      	subs	r6, r6, r0
 8008f5a:	e7e9      	b.n	8008f30 <__sflush_r+0xd0>
 8008f5c:	20400001 	.word	0x20400001

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6a03      	ldr	r3, [r0, #32]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f7fe fa0f 	bl	8007398 <__sinit>
 8008f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f3      	beq.n	8008f6a <_fflush_r+0xa>
 8008f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f84:	07d0      	lsls	r0, r2, #31
 8008f86:	d404      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f88:	0599      	lsls	r1, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_fflush_r+0x32>
 8008f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8e:	f7fe fb72 	bl	8007676 <__retarget_lock_acquire_recursive>
 8008f92:	4628      	mov	r0, r5
 8008f94:	4621      	mov	r1, r4
 8008f96:	f7ff ff63 	bl	8008e60 <__sflush_r>
 8008f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	07da      	lsls	r2, r3, #31
 8008fa0:	d4e4      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa2:	89a3      	ldrh	r3, [r4, #12]
 8008fa4:	059b      	lsls	r3, r3, #22
 8008fa6:	d4e1      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008faa:	f7fe fb65 	bl	8007678 <__retarget_lock_release_recursive>
 8008fae:	e7dd      	b.n	8008f6c <_fflush_r+0xc>

08008fb0 <memmove>:
 8008fb0:	4288      	cmp	r0, r1
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	eb01 0402 	add.w	r4, r1, r2
 8008fb8:	d902      	bls.n	8008fc0 <memmove+0x10>
 8008fba:	4284      	cmp	r4, r0
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	d807      	bhi.n	8008fd0 <memmove+0x20>
 8008fc0:	1e43      	subs	r3, r0, #1
 8008fc2:	42a1      	cmp	r1, r4
 8008fc4:	d008      	beq.n	8008fd8 <memmove+0x28>
 8008fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fce:	e7f8      	b.n	8008fc2 <memmove+0x12>
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	4402      	add	r2, r0
 8008fd4:	428a      	cmp	r2, r1
 8008fd6:	d100      	bne.n	8008fda <memmove+0x2a>
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fe2:	e7f7      	b.n	8008fd4 <memmove+0x24>

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4d05      	ldr	r5, [pc, #20]	@ (8009000 <_sbrk_r+0x1c>)
 8008fea:	4604      	mov	r4, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	602b      	str	r3, [r5, #0]
 8008ff0:	f7fa fa60 	bl	80034b4 <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	200049dc 	.word	0x200049dc

08009004 <memchr>:
 8009004:	4603      	mov	r3, r0
 8009006:	b510      	push	{r4, lr}
 8009008:	b2c9      	uxtb	r1, r1
 800900a:	4402      	add	r2, r0
 800900c:	4293      	cmp	r3, r2
 800900e:	4618      	mov	r0, r3
 8009010:	d101      	bne.n	8009016 <memchr+0x12>
 8009012:	2000      	movs	r0, #0
 8009014:	e003      	b.n	800901e <memchr+0x1a>
 8009016:	7804      	ldrb	r4, [r0, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	428c      	cmp	r4, r1
 800901c:	d1f6      	bne.n	800900c <memchr+0x8>
 800901e:	bd10      	pop	{r4, pc}

08009020 <__assert_func>:
 8009020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009022:	4614      	mov	r4, r2
 8009024:	461a      	mov	r2, r3
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <__assert_func+0x2c>)
 8009028:	4605      	mov	r5, r0
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68d8      	ldr	r0, [r3, #12]
 800902e:	b14c      	cbz	r4, 8009044 <__assert_func+0x24>
 8009030:	4b07      	ldr	r3, [pc, #28]	@ (8009050 <__assert_func+0x30>)
 8009032:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009036:	9100      	str	r1, [sp, #0]
 8009038:	462b      	mov	r3, r5
 800903a:	4906      	ldr	r1, [pc, #24]	@ (8009054 <__assert_func+0x34>)
 800903c:	f000 f858 	bl	80090f0 <fiprintf>
 8009040:	f000 f868 	bl	8009114 <abort>
 8009044:	4b04      	ldr	r3, [pc, #16]	@ (8009058 <__assert_func+0x38>)
 8009046:	461c      	mov	r4, r3
 8009048:	e7f3      	b.n	8009032 <__assert_func+0x12>
 800904a:	bf00      	nop
 800904c:	20000300 	.word	0x20000300
 8009050:	0800bf4f 	.word	0x0800bf4f
 8009054:	0800bf5c 	.word	0x0800bf5c
 8009058:	0800bc79 	.word	0x0800bc79

0800905c <_calloc_r>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	fba1 5402 	umull	r5, r4, r1, r2
 8009062:	b934      	cbnz	r4, 8009072 <_calloc_r+0x16>
 8009064:	4629      	mov	r1, r5
 8009066:	f7fe fec9 	bl	8007dfc <_malloc_r>
 800906a:	4606      	mov	r6, r0
 800906c:	b928      	cbnz	r0, 800907a <_calloc_r+0x1e>
 800906e:	4630      	mov	r0, r6
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	220c      	movs	r2, #12
 8009074:	2600      	movs	r6, #0
 8009076:	6002      	str	r2, [r0, #0]
 8009078:	e7f9      	b.n	800906e <_calloc_r+0x12>
 800907a:	462a      	mov	r2, r5
 800907c:	4621      	mov	r1, r4
 800907e:	f7fe fa5c 	bl	800753a <memset>
 8009082:	e7f4      	b.n	800906e <_calloc_r+0x12>

08009084 <malloc>:
 8009084:	4b02      	ldr	r3, [pc, #8]	@ (8009090 <malloc+0xc>)
 8009086:	4601      	mov	r1, r0
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	f7fe beb7 	b.w	8007dfc <_malloc_r>
 800908e:	bf00      	nop
 8009090:	20000300 	.word	0x20000300

08009094 <_realloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	4607      	mov	r7, r0
 800909a:	4614      	mov	r4, r2
 800909c:	460d      	mov	r5, r1
 800909e:	b921      	cbnz	r1, 80090aa <_realloc_r+0x16>
 80090a0:	4611      	mov	r1, r2
 80090a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a6:	f7fe bea9 	b.w	8007dfc <_malloc_r>
 80090aa:	b92a      	cbnz	r2, 80090b8 <_realloc_r+0x24>
 80090ac:	f7fe fb02 	bl	80076b4 <_free_r>
 80090b0:	4625      	mov	r5, r4
 80090b2:	4628      	mov	r0, r5
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	f000 f833 	bl	8009122 <_malloc_usable_size_r>
 80090bc:	4284      	cmp	r4, r0
 80090be:	4606      	mov	r6, r0
 80090c0:	d802      	bhi.n	80090c8 <_realloc_r+0x34>
 80090c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090c6:	d8f4      	bhi.n	80090b2 <_realloc_r+0x1e>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7fe fe96 	bl	8007dfc <_malloc_r>
 80090d0:	4680      	mov	r8, r0
 80090d2:	b908      	cbnz	r0, 80090d8 <_realloc_r+0x44>
 80090d4:	4645      	mov	r5, r8
 80090d6:	e7ec      	b.n	80090b2 <_realloc_r+0x1e>
 80090d8:	42b4      	cmp	r4, r6
 80090da:	4622      	mov	r2, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	bf28      	it	cs
 80090e0:	4632      	movcs	r2, r6
 80090e2:	f7fe fad2 	bl	800768a <memcpy>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7fe fae3 	bl	80076b4 <_free_r>
 80090ee:	e7f1      	b.n	80090d4 <_realloc_r+0x40>

080090f0 <fiprintf>:
 80090f0:	b40e      	push	{r1, r2, r3}
 80090f2:	b503      	push	{r0, r1, lr}
 80090f4:	4601      	mov	r1, r0
 80090f6:	ab03      	add	r3, sp, #12
 80090f8:	4805      	ldr	r0, [pc, #20]	@ (8009110 <fiprintf+0x20>)
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	6800      	ldr	r0, [r0, #0]
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	f000 f83d 	bl	8009180 <_vfiprintf_r>
 8009106:	b002      	add	sp, #8
 8009108:	f85d eb04 	ldr.w	lr, [sp], #4
 800910c:	b003      	add	sp, #12
 800910e:	4770      	bx	lr
 8009110:	20000300 	.word	0x20000300

08009114 <abort>:
 8009114:	2006      	movs	r0, #6
 8009116:	b508      	push	{r3, lr}
 8009118:	f000 fa06 	bl	8009528 <raise>
 800911c:	2001      	movs	r0, #1
 800911e:	f7fa f99a 	bl	8003456 <_exit>

08009122 <_malloc_usable_size_r>:
 8009122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009126:	1f18      	subs	r0, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfbc      	itt	lt
 800912c:	580b      	ldrlt	r3, [r1, r0]
 800912e:	18c0      	addlt	r0, r0, r3
 8009130:	4770      	bx	lr

08009132 <__sfputc_r>:
 8009132:	6893      	ldr	r3, [r2, #8]
 8009134:	b410      	push	{r4}
 8009136:	3b01      	subs	r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	6093      	str	r3, [r2, #8]
 800913c:	da07      	bge.n	800914e <__sfputc_r+0x1c>
 800913e:	6994      	ldr	r4, [r2, #24]
 8009140:	42a3      	cmp	r3, r4
 8009142:	db01      	blt.n	8009148 <__sfputc_r+0x16>
 8009144:	290a      	cmp	r1, #10
 8009146:	d102      	bne.n	800914e <__sfputc_r+0x1c>
 8009148:	bc10      	pop	{r4}
 800914a:	f000 b931 	b.w	80093b0 <__swbuf_r>
 800914e:	6813      	ldr	r3, [r2, #0]
 8009150:	1c58      	adds	r0, r3, #1
 8009152:	6010      	str	r0, [r2, #0]
 8009154:	7019      	strb	r1, [r3, #0]
 8009156:	4608      	mov	r0, r1
 8009158:	bc10      	pop	{r4}
 800915a:	4770      	bx	lr

0800915c <__sfputs_r>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	4606      	mov	r6, r0
 8009160:	460f      	mov	r7, r1
 8009162:	4614      	mov	r4, r2
 8009164:	18d5      	adds	r5, r2, r3
 8009166:	42ac      	cmp	r4, r5
 8009168:	d101      	bne.n	800916e <__sfputs_r+0x12>
 800916a:	2000      	movs	r0, #0
 800916c:	e007      	b.n	800917e <__sfputs_r+0x22>
 800916e:	463a      	mov	r2, r7
 8009170:	4630      	mov	r0, r6
 8009172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009176:	f7ff ffdc 	bl	8009132 <__sfputc_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d1f3      	bne.n	8009166 <__sfputs_r+0xa>
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009180 <_vfiprintf_r>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	460d      	mov	r5, r1
 8009186:	4614      	mov	r4, r2
 8009188:	4698      	mov	r8, r3
 800918a:	4606      	mov	r6, r0
 800918c:	b09d      	sub	sp, #116	@ 0x74
 800918e:	b118      	cbz	r0, 8009198 <_vfiprintf_r+0x18>
 8009190:	6a03      	ldr	r3, [r0, #32]
 8009192:	b90b      	cbnz	r3, 8009198 <_vfiprintf_r+0x18>
 8009194:	f7fe f900 	bl	8007398 <__sinit>
 8009198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	d405      	bmi.n	80091aa <_vfiprintf_r+0x2a>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	059a      	lsls	r2, r3, #22
 80091a2:	d402      	bmi.n	80091aa <_vfiprintf_r+0x2a>
 80091a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091a6:	f7fe fa66 	bl	8007676 <__retarget_lock_acquire_recursive>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	071b      	lsls	r3, r3, #28
 80091ae:	d501      	bpl.n	80091b4 <_vfiprintf_r+0x34>
 80091b0:	692b      	ldr	r3, [r5, #16]
 80091b2:	b99b      	cbnz	r3, 80091dc <_vfiprintf_r+0x5c>
 80091b4:	4629      	mov	r1, r5
 80091b6:	4630      	mov	r0, r6
 80091b8:	f000 f938 	bl	800942c <__swsetup_r>
 80091bc:	b170      	cbz	r0, 80091dc <_vfiprintf_r+0x5c>
 80091be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091c0:	07dc      	lsls	r4, r3, #31
 80091c2:	d504      	bpl.n	80091ce <_vfiprintf_r+0x4e>
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	b01d      	add	sp, #116	@ 0x74
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	89ab      	ldrh	r3, [r5, #12]
 80091d0:	0598      	lsls	r0, r3, #22
 80091d2:	d4f7      	bmi.n	80091c4 <_vfiprintf_r+0x44>
 80091d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091d6:	f7fe fa4f 	bl	8007678 <__retarget_lock_release_recursive>
 80091da:	e7f3      	b.n	80091c4 <_vfiprintf_r+0x44>
 80091dc:	2300      	movs	r3, #0
 80091de:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e0:	2320      	movs	r3, #32
 80091e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091e6:	2330      	movs	r3, #48	@ 0x30
 80091e8:	f04f 0901 	mov.w	r9, #1
 80091ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800939c <_vfiprintf_r+0x21c>
 80091f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091f8:	4623      	mov	r3, r4
 80091fa:	469a      	mov	sl, r3
 80091fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009200:	b10a      	cbz	r2, 8009206 <_vfiprintf_r+0x86>
 8009202:	2a25      	cmp	r2, #37	@ 0x25
 8009204:	d1f9      	bne.n	80091fa <_vfiprintf_r+0x7a>
 8009206:	ebba 0b04 	subs.w	fp, sl, r4
 800920a:	d00b      	beq.n	8009224 <_vfiprintf_r+0xa4>
 800920c:	465b      	mov	r3, fp
 800920e:	4622      	mov	r2, r4
 8009210:	4629      	mov	r1, r5
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff ffa2 	bl	800915c <__sfputs_r>
 8009218:	3001      	adds	r0, #1
 800921a:	f000 80a7 	beq.w	800936c <_vfiprintf_r+0x1ec>
 800921e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009220:	445a      	add	r2, fp
 8009222:	9209      	str	r2, [sp, #36]	@ 0x24
 8009224:	f89a 3000 	ldrb.w	r3, [sl]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 809f 	beq.w	800936c <_vfiprintf_r+0x1ec>
 800922e:	2300      	movs	r3, #0
 8009230:	f04f 32ff 	mov.w	r2, #4294967295
 8009234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009238:	f10a 0a01 	add.w	sl, sl, #1
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	9307      	str	r3, [sp, #28]
 8009240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009244:	931a      	str	r3, [sp, #104]	@ 0x68
 8009246:	4654      	mov	r4, sl
 8009248:	2205      	movs	r2, #5
 800924a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924e:	4853      	ldr	r0, [pc, #332]	@ (800939c <_vfiprintf_r+0x21c>)
 8009250:	f7ff fed8 	bl	8009004 <memchr>
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	b9d8      	cbnz	r0, 8009290 <_vfiprintf_r+0x110>
 8009258:	06d1      	lsls	r1, r2, #27
 800925a:	bf44      	itt	mi
 800925c:	2320      	movmi	r3, #32
 800925e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009262:	0713      	lsls	r3, r2, #28
 8009264:	bf44      	itt	mi
 8009266:	232b      	movmi	r3, #43	@ 0x2b
 8009268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800926c:	f89a 3000 	ldrb.w	r3, [sl]
 8009270:	2b2a      	cmp	r3, #42	@ 0x2a
 8009272:	d015      	beq.n	80092a0 <_vfiprintf_r+0x120>
 8009274:	4654      	mov	r4, sl
 8009276:	2000      	movs	r0, #0
 8009278:	f04f 0c0a 	mov.w	ip, #10
 800927c:	9a07      	ldr	r2, [sp, #28]
 800927e:	4621      	mov	r1, r4
 8009280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009284:	3b30      	subs	r3, #48	@ 0x30
 8009286:	2b09      	cmp	r3, #9
 8009288:	d94b      	bls.n	8009322 <_vfiprintf_r+0x1a2>
 800928a:	b1b0      	cbz	r0, 80092ba <_vfiprintf_r+0x13a>
 800928c:	9207      	str	r2, [sp, #28]
 800928e:	e014      	b.n	80092ba <_vfiprintf_r+0x13a>
 8009290:	eba0 0308 	sub.w	r3, r0, r8
 8009294:	fa09 f303 	lsl.w	r3, r9, r3
 8009298:	4313      	orrs	r3, r2
 800929a:	46a2      	mov	sl, r4
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	e7d2      	b.n	8009246 <_vfiprintf_r+0xc6>
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	1d19      	adds	r1, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	9103      	str	r1, [sp, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bfbb      	ittet	lt
 80092ac:	425b      	neglt	r3, r3
 80092ae:	f042 0202 	orrlt.w	r2, r2, #2
 80092b2:	9307      	strge	r3, [sp, #28]
 80092b4:	9307      	strlt	r3, [sp, #28]
 80092b6:	bfb8      	it	lt
 80092b8:	9204      	strlt	r2, [sp, #16]
 80092ba:	7823      	ldrb	r3, [r4, #0]
 80092bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80092be:	d10a      	bne.n	80092d6 <_vfiprintf_r+0x156>
 80092c0:	7863      	ldrb	r3, [r4, #1]
 80092c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c4:	d132      	bne.n	800932c <_vfiprintf_r+0x1ac>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	3402      	adds	r4, #2
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	9203      	str	r2, [sp, #12]
 80092d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80093a0 <_vfiprintf_r+0x220>
 80092da:	2203      	movs	r2, #3
 80092dc:	4650      	mov	r0, sl
 80092de:	7821      	ldrb	r1, [r4, #0]
 80092e0:	f7ff fe90 	bl	8009004 <memchr>
 80092e4:	b138      	cbz	r0, 80092f6 <_vfiprintf_r+0x176>
 80092e6:	2240      	movs	r2, #64	@ 0x40
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	eba0 000a 	sub.w	r0, r0, sl
 80092ee:	4082      	lsls	r2, r0
 80092f0:	4313      	orrs	r3, r2
 80092f2:	3401      	adds	r4, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fa:	2206      	movs	r2, #6
 80092fc:	4829      	ldr	r0, [pc, #164]	@ (80093a4 <_vfiprintf_r+0x224>)
 80092fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009302:	f7ff fe7f 	bl	8009004 <memchr>
 8009306:	2800      	cmp	r0, #0
 8009308:	d03f      	beq.n	800938a <_vfiprintf_r+0x20a>
 800930a:	4b27      	ldr	r3, [pc, #156]	@ (80093a8 <_vfiprintf_r+0x228>)
 800930c:	bb1b      	cbnz	r3, 8009356 <_vfiprintf_r+0x1d6>
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	3307      	adds	r3, #7
 8009312:	f023 0307 	bic.w	r3, r3, #7
 8009316:	3308      	adds	r3, #8
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	443b      	add	r3, r7
 800931e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009320:	e76a      	b.n	80091f8 <_vfiprintf_r+0x78>
 8009322:	460c      	mov	r4, r1
 8009324:	2001      	movs	r0, #1
 8009326:	fb0c 3202 	mla	r2, ip, r2, r3
 800932a:	e7a8      	b.n	800927e <_vfiprintf_r+0xfe>
 800932c:	2300      	movs	r3, #0
 800932e:	f04f 0c0a 	mov.w	ip, #10
 8009332:	4619      	mov	r1, r3
 8009334:	3401      	adds	r4, #1
 8009336:	9305      	str	r3, [sp, #20]
 8009338:	4620      	mov	r0, r4
 800933a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800933e:	3a30      	subs	r2, #48	@ 0x30
 8009340:	2a09      	cmp	r2, #9
 8009342:	d903      	bls.n	800934c <_vfiprintf_r+0x1cc>
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0c6      	beq.n	80092d6 <_vfiprintf_r+0x156>
 8009348:	9105      	str	r1, [sp, #20]
 800934a:	e7c4      	b.n	80092d6 <_vfiprintf_r+0x156>
 800934c:	4604      	mov	r4, r0
 800934e:	2301      	movs	r3, #1
 8009350:	fb0c 2101 	mla	r1, ip, r1, r2
 8009354:	e7f0      	b.n	8009338 <_vfiprintf_r+0x1b8>
 8009356:	ab03      	add	r3, sp, #12
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	462a      	mov	r2, r5
 800935c:	4630      	mov	r0, r6
 800935e:	4b13      	ldr	r3, [pc, #76]	@ (80093ac <_vfiprintf_r+0x22c>)
 8009360:	a904      	add	r1, sp, #16
 8009362:	f3af 8000 	nop.w
 8009366:	4607      	mov	r7, r0
 8009368:	1c78      	adds	r0, r7, #1
 800936a:	d1d6      	bne.n	800931a <_vfiprintf_r+0x19a>
 800936c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800936e:	07d9      	lsls	r1, r3, #31
 8009370:	d405      	bmi.n	800937e <_vfiprintf_r+0x1fe>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d402      	bmi.n	800937e <_vfiprintf_r+0x1fe>
 8009378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800937a:	f7fe f97d 	bl	8007678 <__retarget_lock_release_recursive>
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	065b      	lsls	r3, r3, #25
 8009382:	f53f af1f 	bmi.w	80091c4 <_vfiprintf_r+0x44>
 8009386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009388:	e71e      	b.n	80091c8 <_vfiprintf_r+0x48>
 800938a:	ab03      	add	r3, sp, #12
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	462a      	mov	r2, r5
 8009390:	4630      	mov	r0, r6
 8009392:	4b06      	ldr	r3, [pc, #24]	@ (80093ac <_vfiprintf_r+0x22c>)
 8009394:	a904      	add	r1, sp, #16
 8009396:	f7ff fc45 	bl	8008c24 <_printf_i>
 800939a:	e7e4      	b.n	8009366 <_vfiprintf_r+0x1e6>
 800939c:	0800bf1c 	.word	0x0800bf1c
 80093a0:	0800bf22 	.word	0x0800bf22
 80093a4:	0800bf26 	.word	0x0800bf26
 80093a8:	00000000 	.word	0x00000000
 80093ac:	0800915d 	.word	0x0800915d

080093b0 <__swbuf_r>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	460e      	mov	r6, r1
 80093b4:	4614      	mov	r4, r2
 80093b6:	4605      	mov	r5, r0
 80093b8:	b118      	cbz	r0, 80093c2 <__swbuf_r+0x12>
 80093ba:	6a03      	ldr	r3, [r0, #32]
 80093bc:	b90b      	cbnz	r3, 80093c2 <__swbuf_r+0x12>
 80093be:	f7fd ffeb 	bl	8007398 <__sinit>
 80093c2:	69a3      	ldr	r3, [r4, #24]
 80093c4:	60a3      	str	r3, [r4, #8]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	071a      	lsls	r2, r3, #28
 80093ca:	d501      	bpl.n	80093d0 <__swbuf_r+0x20>
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	b943      	cbnz	r3, 80093e2 <__swbuf_r+0x32>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f82a 	bl	800942c <__swsetup_r>
 80093d8:	b118      	cbz	r0, 80093e2 <__swbuf_r+0x32>
 80093da:	f04f 37ff 	mov.w	r7, #4294967295
 80093de:	4638      	mov	r0, r7
 80093e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	b2f6      	uxtb	r6, r6
 80093e8:	1a98      	subs	r0, r3, r2
 80093ea:	6963      	ldr	r3, [r4, #20]
 80093ec:	4637      	mov	r7, r6
 80093ee:	4283      	cmp	r3, r0
 80093f0:	dc05      	bgt.n	80093fe <__swbuf_r+0x4e>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff fdb3 	bl	8008f60 <_fflush_r>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d1ed      	bne.n	80093da <__swbuf_r+0x2a>
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	3b01      	subs	r3, #1
 8009402:	60a3      	str	r3, [r4, #8]
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	701e      	strb	r6, [r3, #0]
 800940c:	6962      	ldr	r2, [r4, #20]
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	429a      	cmp	r2, r3
 8009412:	d004      	beq.n	800941e <__swbuf_r+0x6e>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	07db      	lsls	r3, r3, #31
 8009418:	d5e1      	bpl.n	80093de <__swbuf_r+0x2e>
 800941a:	2e0a      	cmp	r6, #10
 800941c:	d1df      	bne.n	80093de <__swbuf_r+0x2e>
 800941e:	4621      	mov	r1, r4
 8009420:	4628      	mov	r0, r5
 8009422:	f7ff fd9d 	bl	8008f60 <_fflush_r>
 8009426:	2800      	cmp	r0, #0
 8009428:	d0d9      	beq.n	80093de <__swbuf_r+0x2e>
 800942a:	e7d6      	b.n	80093da <__swbuf_r+0x2a>

0800942c <__swsetup_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4b29      	ldr	r3, [pc, #164]	@ (80094d4 <__swsetup_r+0xa8>)
 8009430:	4605      	mov	r5, r0
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	460c      	mov	r4, r1
 8009436:	b118      	cbz	r0, 8009440 <__swsetup_r+0x14>
 8009438:	6a03      	ldr	r3, [r0, #32]
 800943a:	b90b      	cbnz	r3, 8009440 <__swsetup_r+0x14>
 800943c:	f7fd ffac 	bl	8007398 <__sinit>
 8009440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009444:	0719      	lsls	r1, r3, #28
 8009446:	d422      	bmi.n	800948e <__swsetup_r+0x62>
 8009448:	06da      	lsls	r2, r3, #27
 800944a:	d407      	bmi.n	800945c <__swsetup_r+0x30>
 800944c:	2209      	movs	r2, #9
 800944e:	602a      	str	r2, [r5, #0]
 8009450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	e033      	b.n	80094c4 <__swsetup_r+0x98>
 800945c:	0758      	lsls	r0, r3, #29
 800945e:	d512      	bpl.n	8009486 <__swsetup_r+0x5a>
 8009460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009462:	b141      	cbz	r1, 8009476 <__swsetup_r+0x4a>
 8009464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009468:	4299      	cmp	r1, r3
 800946a:	d002      	beq.n	8009472 <__swsetup_r+0x46>
 800946c:	4628      	mov	r0, r5
 800946e:	f7fe f921 	bl	80076b4 <_free_r>
 8009472:	2300      	movs	r3, #0
 8009474:	6363      	str	r3, [r4, #52]	@ 0x34
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	2300      	movs	r3, #0
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f043 0308 	orr.w	r3, r3, #8
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	b94b      	cbnz	r3, 80094a6 <__swsetup_r+0x7a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949c:	d003      	beq.n	80094a6 <__swsetup_r+0x7a>
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f000 f882 	bl	80095aa <__smakebuf_r>
 80094a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094aa:	f013 0201 	ands.w	r2, r3, #1
 80094ae:	d00a      	beq.n	80094c6 <__swsetup_r+0x9a>
 80094b0:	2200      	movs	r2, #0
 80094b2:	60a2      	str	r2, [r4, #8]
 80094b4:	6962      	ldr	r2, [r4, #20]
 80094b6:	4252      	negs	r2, r2
 80094b8:	61a2      	str	r2, [r4, #24]
 80094ba:	6922      	ldr	r2, [r4, #16]
 80094bc:	b942      	cbnz	r2, 80094d0 <__swsetup_r+0xa4>
 80094be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094c2:	d1c5      	bne.n	8009450 <__swsetup_r+0x24>
 80094c4:	bd38      	pop	{r3, r4, r5, pc}
 80094c6:	0799      	lsls	r1, r3, #30
 80094c8:	bf58      	it	pl
 80094ca:	6962      	ldrpl	r2, [r4, #20]
 80094cc:	60a2      	str	r2, [r4, #8]
 80094ce:	e7f4      	b.n	80094ba <__swsetup_r+0x8e>
 80094d0:	2000      	movs	r0, #0
 80094d2:	e7f7      	b.n	80094c4 <__swsetup_r+0x98>
 80094d4:	20000300 	.word	0x20000300

080094d8 <_raise_r>:
 80094d8:	291f      	cmp	r1, #31
 80094da:	b538      	push	{r3, r4, r5, lr}
 80094dc:	4605      	mov	r5, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	d904      	bls.n	80094ec <_raise_r+0x14>
 80094e2:	2316      	movs	r3, #22
 80094e4:	6003      	str	r3, [r0, #0]
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094ee:	b112      	cbz	r2, 80094f6 <_raise_r+0x1e>
 80094f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094f4:	b94b      	cbnz	r3, 800950a <_raise_r+0x32>
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f830 	bl	800955c <_getpid_r>
 80094fc:	4622      	mov	r2, r4
 80094fe:	4601      	mov	r1, r0
 8009500:	4628      	mov	r0, r5
 8009502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009506:	f000 b817 	b.w	8009538 <_kill_r>
 800950a:	2b01      	cmp	r3, #1
 800950c:	d00a      	beq.n	8009524 <_raise_r+0x4c>
 800950e:	1c59      	adds	r1, r3, #1
 8009510:	d103      	bne.n	800951a <_raise_r+0x42>
 8009512:	2316      	movs	r3, #22
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	2001      	movs	r0, #1
 8009518:	e7e7      	b.n	80094ea <_raise_r+0x12>
 800951a:	2100      	movs	r1, #0
 800951c:	4620      	mov	r0, r4
 800951e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009522:	4798      	blx	r3
 8009524:	2000      	movs	r0, #0
 8009526:	e7e0      	b.n	80094ea <_raise_r+0x12>

08009528 <raise>:
 8009528:	4b02      	ldr	r3, [pc, #8]	@ (8009534 <raise+0xc>)
 800952a:	4601      	mov	r1, r0
 800952c:	6818      	ldr	r0, [r3, #0]
 800952e:	f7ff bfd3 	b.w	80094d8 <_raise_r>
 8009532:	bf00      	nop
 8009534:	20000300 	.word	0x20000300

08009538 <_kill_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	2300      	movs	r3, #0
 800953c:	4d06      	ldr	r5, [pc, #24]	@ (8009558 <_kill_r+0x20>)
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	4611      	mov	r1, r2
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	f7f9 ff7e 	bl	8003446 <_kill>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d102      	bne.n	8009554 <_kill_r+0x1c>
 800954e:	682b      	ldr	r3, [r5, #0]
 8009550:	b103      	cbz	r3, 8009554 <_kill_r+0x1c>
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	bd38      	pop	{r3, r4, r5, pc}
 8009556:	bf00      	nop
 8009558:	200049dc 	.word	0x200049dc

0800955c <_getpid_r>:
 800955c:	f7f9 bf71 	b.w	8003442 <_getpid>

08009560 <__swhatbuf_r>:
 8009560:	b570      	push	{r4, r5, r6, lr}
 8009562:	460c      	mov	r4, r1
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	4615      	mov	r5, r2
 800956a:	2900      	cmp	r1, #0
 800956c:	461e      	mov	r6, r3
 800956e:	b096      	sub	sp, #88	@ 0x58
 8009570:	da0c      	bge.n	800958c <__swhatbuf_r+0x2c>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	2100      	movs	r1, #0
 8009576:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800957a:	bf14      	ite	ne
 800957c:	2340      	movne	r3, #64	@ 0x40
 800957e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009582:	2000      	movs	r0, #0
 8009584:	6031      	str	r1, [r6, #0]
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	b016      	add	sp, #88	@ 0x58
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	466a      	mov	r2, sp
 800958e:	f000 f849 	bl	8009624 <_fstat_r>
 8009592:	2800      	cmp	r0, #0
 8009594:	dbed      	blt.n	8009572 <__swhatbuf_r+0x12>
 8009596:	9901      	ldr	r1, [sp, #4]
 8009598:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800959c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095a0:	4259      	negs	r1, r3
 80095a2:	4159      	adcs	r1, r3
 80095a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095a8:	e7eb      	b.n	8009582 <__swhatbuf_r+0x22>

080095aa <__smakebuf_r>:
 80095aa:	898b      	ldrh	r3, [r1, #12]
 80095ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ae:	079d      	lsls	r5, r3, #30
 80095b0:	4606      	mov	r6, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	d507      	bpl.n	80095c6 <__smakebuf_r+0x1c>
 80095b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	6123      	str	r3, [r4, #16]
 80095be:	2301      	movs	r3, #1
 80095c0:	6163      	str	r3, [r4, #20]
 80095c2:	b003      	add	sp, #12
 80095c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c6:	466a      	mov	r2, sp
 80095c8:	ab01      	add	r3, sp, #4
 80095ca:	f7ff ffc9 	bl	8009560 <__swhatbuf_r>
 80095ce:	9f00      	ldr	r7, [sp, #0]
 80095d0:	4605      	mov	r5, r0
 80095d2:	4639      	mov	r1, r7
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7fe fc11 	bl	8007dfc <_malloc_r>
 80095da:	b948      	cbnz	r0, 80095f0 <__smakebuf_r+0x46>
 80095dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e0:	059a      	lsls	r2, r3, #22
 80095e2:	d4ee      	bmi.n	80095c2 <__smakebuf_r+0x18>
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	f043 0302 	orr.w	r3, r3, #2
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	e7e2      	b.n	80095b6 <__smakebuf_r+0xc>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	9b01      	ldr	r3, [sp, #4]
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	b15b      	cbz	r3, 800961a <__smakebuf_r+0x70>
 8009602:	4630      	mov	r0, r6
 8009604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009608:	f000 f81e 	bl	8009648 <_isatty_r>
 800960c:	b128      	cbz	r0, 800961a <__smakebuf_r+0x70>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	f043 0301 	orr.w	r3, r3, #1
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	431d      	orrs	r5, r3
 800961e:	81a5      	strh	r5, [r4, #12]
 8009620:	e7cf      	b.n	80095c2 <__smakebuf_r+0x18>
	...

08009624 <_fstat_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	2300      	movs	r3, #0
 8009628:	4d06      	ldr	r5, [pc, #24]	@ (8009644 <_fstat_r+0x20>)
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	4611      	mov	r1, r2
 8009630:	602b      	str	r3, [r5, #0]
 8009632:	f7f9 ff35 	bl	80034a0 <_fstat>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	d102      	bne.n	8009640 <_fstat_r+0x1c>
 800963a:	682b      	ldr	r3, [r5, #0]
 800963c:	b103      	cbz	r3, 8009640 <_fstat_r+0x1c>
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	bd38      	pop	{r3, r4, r5, pc}
 8009642:	bf00      	nop
 8009644:	200049dc 	.word	0x200049dc

08009648 <_isatty_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	2300      	movs	r3, #0
 800964c:	4d05      	ldr	r5, [pc, #20]	@ (8009664 <_isatty_r+0x1c>)
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f9 ff29 	bl	80034aa <_isatty>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_isatty_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_isatty_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	200049dc 	.word	0x200049dc

08009668 <atan2>:
 8009668:	f000 bb16 	b.w	8009c98 <__ieee754_atan2>

0800966c <sqrt>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	4606      	mov	r6, r0
 8009670:	460f      	mov	r7, r1
 8009672:	f000 f8ab 	bl	80097cc <__ieee754_sqrt>
 8009676:	4632      	mov	r2, r6
 8009678:	4604      	mov	r4, r0
 800967a:	460d      	mov	r5, r1
 800967c:	463b      	mov	r3, r7
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 f9c3 	bl	8000a0c <__aeabi_dcmpun>
 8009686:	b990      	cbnz	r0, 80096ae <sqrt+0x42>
 8009688:	2200      	movs	r2, #0
 800968a:	2300      	movs	r3, #0
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f7 f994 	bl	80009bc <__aeabi_dcmplt>
 8009694:	b158      	cbz	r0, 80096ae <sqrt+0x42>
 8009696:	f7fd ffc3 	bl	8007620 <__errno>
 800969a:	2321      	movs	r3, #33	@ 0x21
 800969c:	2200      	movs	r2, #0
 800969e:	6003      	str	r3, [r0, #0]
 80096a0:	2300      	movs	r3, #0
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7f7 f841 	bl	800072c <__aeabi_ddiv>
 80096aa:	4604      	mov	r4, r0
 80096ac:	460d      	mov	r5, r1
 80096ae:	4620      	mov	r0, r4
 80096b0:	4629      	mov	r1, r5
 80096b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096b4 <cos>:
 80096b4:	b530      	push	{r4, r5, lr}
 80096b6:	4d20      	ldr	r5, [pc, #128]	@ (8009738 <cos+0x84>)
 80096b8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80096bc:	42ac      	cmp	r4, r5
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	b087      	sub	sp, #28
 80096c4:	d806      	bhi.n	80096d4 <cos+0x20>
 80096c6:	2200      	movs	r2, #0
 80096c8:	2300      	movs	r3, #0
 80096ca:	b007      	add	sp, #28
 80096cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d0:	f000 b96a 	b.w	80099a8 <__kernel_cos>
 80096d4:	4d19      	ldr	r5, [pc, #100]	@ (800973c <cos+0x88>)
 80096d6:	42ac      	cmp	r4, r5
 80096d8:	d903      	bls.n	80096e2 <cos+0x2e>
 80096da:	f7f6 fd45 	bl	8000168 <__aeabi_dsub>
 80096de:	b007      	add	sp, #28
 80096e0:	bd30      	pop	{r4, r5, pc}
 80096e2:	aa02      	add	r2, sp, #8
 80096e4:	f000 fbac 	bl	8009e40 <__ieee754_rem_pio2>
 80096e8:	f000 0003 	and.w	r0, r0, #3
 80096ec:	2801      	cmp	r0, #1
 80096ee:	d009      	beq.n	8009704 <cos+0x50>
 80096f0:	2802      	cmp	r0, #2
 80096f2:	d011      	beq.n	8009718 <cos+0x64>
 80096f4:	b9b8      	cbnz	r0, 8009726 <cos+0x72>
 80096f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fe:	f000 f953 	bl	80099a8 <__kernel_cos>
 8009702:	e7ec      	b.n	80096de <cos+0x2a>
 8009704:	9000      	str	r0, [sp, #0]
 8009706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800970a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970e:	f000 fa0b 	bl	8009b28 <__kernel_sin>
 8009712:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8009716:	e7e2      	b.n	80096de <cos+0x2a>
 8009718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800971c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009720:	f000 f942 	bl	80099a8 <__kernel_cos>
 8009724:	e7f5      	b.n	8009712 <cos+0x5e>
 8009726:	2301      	movs	r3, #1
 8009728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009732:	f000 f9f9 	bl	8009b28 <__kernel_sin>
 8009736:	e7d2      	b.n	80096de <cos+0x2a>
 8009738:	3fe921fb 	.word	0x3fe921fb
 800973c:	7fefffff 	.word	0x7fefffff

08009740 <sin>:
 8009740:	b530      	push	{r4, r5, lr}
 8009742:	4d20      	ldr	r5, [pc, #128]	@ (80097c4 <sin+0x84>)
 8009744:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009748:	42ac      	cmp	r4, r5
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	b087      	sub	sp, #28
 8009750:	d806      	bhi.n	8009760 <sin+0x20>
 8009752:	2300      	movs	r3, #0
 8009754:	2200      	movs	r2, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	f000 f9e5 	bl	8009b28 <__kernel_sin>
 800975e:	e004      	b.n	800976a <sin+0x2a>
 8009760:	4d19      	ldr	r5, [pc, #100]	@ (80097c8 <sin+0x88>)
 8009762:	42ac      	cmp	r4, r5
 8009764:	d903      	bls.n	800976e <sin+0x2e>
 8009766:	f7f6 fcff 	bl	8000168 <__aeabi_dsub>
 800976a:	b007      	add	sp, #28
 800976c:	bd30      	pop	{r4, r5, pc}
 800976e:	aa02      	add	r2, sp, #8
 8009770:	f000 fb66 	bl	8009e40 <__ieee754_rem_pio2>
 8009774:	f000 0003 	and.w	r0, r0, #3
 8009778:	2801      	cmp	r0, #1
 800977a:	d009      	beq.n	8009790 <sin+0x50>
 800977c:	2802      	cmp	r0, #2
 800977e:	d00e      	beq.n	800979e <sin+0x5e>
 8009780:	b9c0      	cbnz	r0, 80097b4 <sin+0x74>
 8009782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009786:	2301      	movs	r3, #1
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978e:	e7e4      	b.n	800975a <sin+0x1a>
 8009790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009798:	f000 f906 	bl	80099a8 <__kernel_cos>
 800979c:	e7e5      	b.n	800976a <sin+0x2a>
 800979e:	2301      	movs	r3, #1
 80097a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097aa:	f000 f9bd 	bl	8009b28 <__kernel_sin>
 80097ae:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80097b2:	e7da      	b.n	800976a <sin+0x2a>
 80097b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097bc:	f000 f8f4 	bl	80099a8 <__kernel_cos>
 80097c0:	e7f5      	b.n	80097ae <sin+0x6e>
 80097c2:	bf00      	nop
 80097c4:	3fe921fb 	.word	0x3fe921fb
 80097c8:	7fefffff 	.word	0x7fefffff

080097cc <__ieee754_sqrt>:
 80097cc:	4a65      	ldr	r2, [pc, #404]	@ (8009964 <__ieee754_sqrt+0x198>)
 80097ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d2:	438a      	bics	r2, r1
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	460b      	mov	r3, r1
 80097da:	4604      	mov	r4, r0
 80097dc:	d10e      	bne.n	80097fc <__ieee754_sqrt+0x30>
 80097de:	4602      	mov	r2, r0
 80097e0:	f7f6 fe7a 	bl	80004d8 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f6 fcbe 	bl	800016c <__adddf3>
 80097f0:	4606      	mov	r6, r0
 80097f2:	460f      	mov	r7, r1
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	2900      	cmp	r1, #0
 80097fe:	dc0c      	bgt.n	800981a <__ieee754_sqrt+0x4e>
 8009800:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009804:	4302      	orrs	r2, r0
 8009806:	d0f5      	beq.n	80097f4 <__ieee754_sqrt+0x28>
 8009808:	b189      	cbz	r1, 800982e <__ieee754_sqrt+0x62>
 800980a:	4602      	mov	r2, r0
 800980c:	f7f6 fcac 	bl	8000168 <__aeabi_dsub>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	f7f6 ff8a 	bl	800072c <__aeabi_ddiv>
 8009818:	e7ea      	b.n	80097f0 <__ieee754_sqrt+0x24>
 800981a:	150a      	asrs	r2, r1, #20
 800981c:	d115      	bne.n	800984a <__ieee754_sqrt+0x7e>
 800981e:	2100      	movs	r1, #0
 8009820:	e009      	b.n	8009836 <__ieee754_sqrt+0x6a>
 8009822:	0ae3      	lsrs	r3, r4, #11
 8009824:	3a15      	subs	r2, #21
 8009826:	0564      	lsls	r4, r4, #21
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0fa      	beq.n	8009822 <__ieee754_sqrt+0x56>
 800982c:	e7f7      	b.n	800981e <__ieee754_sqrt+0x52>
 800982e:	460a      	mov	r2, r1
 8009830:	e7fa      	b.n	8009828 <__ieee754_sqrt+0x5c>
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	3101      	adds	r1, #1
 8009836:	02d8      	lsls	r0, r3, #11
 8009838:	d5fb      	bpl.n	8009832 <__ieee754_sqrt+0x66>
 800983a:	1e48      	subs	r0, r1, #1
 800983c:	1a12      	subs	r2, r2, r0
 800983e:	f1c1 0020 	rsb	r0, r1, #32
 8009842:	fa24 f000 	lsr.w	r0, r4, r0
 8009846:	4303      	orrs	r3, r0
 8009848:	408c      	lsls	r4, r1
 800984a:	2700      	movs	r7, #0
 800984c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8009850:	2116      	movs	r1, #22
 8009852:	07d2      	lsls	r2, r2, #31
 8009854:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009858:	463a      	mov	r2, r7
 800985a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800985e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009862:	bf5c      	itt	pl
 8009864:	005b      	lslpl	r3, r3, #1
 8009866:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800986a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800986e:	bf58      	it	pl
 8009870:	0064      	lslpl	r4, r4, #1
 8009872:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009876:	ea4f 0868 	mov.w	r8, r8, asr #1
 800987a:	0064      	lsls	r4, r4, #1
 800987c:	1815      	adds	r5, r2, r0
 800987e:	429d      	cmp	r5, r3
 8009880:	bfde      	ittt	le
 8009882:	182a      	addle	r2, r5, r0
 8009884:	1b5b      	suble	r3, r3, r5
 8009886:	183f      	addle	r7, r7, r0
 8009888:	0fe5      	lsrs	r5, r4, #31
 800988a:	3901      	subs	r1, #1
 800988c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009890:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009894:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009898:	d1f0      	bne.n	800987c <__ieee754_sqrt+0xb0>
 800989a:	460d      	mov	r5, r1
 800989c:	2620      	movs	r6, #32
 800989e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80098a2:	4293      	cmp	r3, r2
 80098a4:	eb00 0c01 	add.w	ip, r0, r1
 80098a8:	dc02      	bgt.n	80098b0 <__ieee754_sqrt+0xe4>
 80098aa:	d113      	bne.n	80098d4 <__ieee754_sqrt+0x108>
 80098ac:	45a4      	cmp	ip, r4
 80098ae:	d811      	bhi.n	80098d4 <__ieee754_sqrt+0x108>
 80098b0:	f1bc 0f00 	cmp.w	ip, #0
 80098b4:	eb0c 0100 	add.w	r1, ip, r0
 80098b8:	da3e      	bge.n	8009938 <__ieee754_sqrt+0x16c>
 80098ba:	2900      	cmp	r1, #0
 80098bc:	db3c      	blt.n	8009938 <__ieee754_sqrt+0x16c>
 80098be:	f102 0e01 	add.w	lr, r2, #1
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	4672      	mov	r2, lr
 80098c6:	45a4      	cmp	ip, r4
 80098c8:	bf88      	it	hi
 80098ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80098ce:	eba4 040c 	sub.w	r4, r4, ip
 80098d2:	4405      	add	r5, r0
 80098d4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80098d8:	3e01      	subs	r6, #1
 80098da:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80098de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80098e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80098e6:	d1dc      	bne.n	80098a2 <__ieee754_sqrt+0xd6>
 80098e8:	431c      	orrs	r4, r3
 80098ea:	d01a      	beq.n	8009922 <__ieee754_sqrt+0x156>
 80098ec:	4c1e      	ldr	r4, [pc, #120]	@ (8009968 <__ieee754_sqrt+0x19c>)
 80098ee:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800996c <__ieee754_sqrt+0x1a0>
 80098f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80098f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80098fa:	f7f6 fc35 	bl	8000168 <__aeabi_dsub>
 80098fe:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4650      	mov	r0, sl
 8009908:	4659      	mov	r1, fp
 800990a:	f7f7 f861 	bl	80009d0 <__aeabi_dcmple>
 800990e:	b140      	cbz	r0, 8009922 <__ieee754_sqrt+0x156>
 8009910:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009914:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009918:	f1b5 3fff 	cmp.w	r5, #4294967295
 800991c:	d10e      	bne.n	800993c <__ieee754_sqrt+0x170>
 800991e:	4635      	mov	r5, r6
 8009920:	3701      	adds	r7, #1
 8009922:	107b      	asrs	r3, r7, #1
 8009924:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009928:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800992c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8009930:	086b      	lsrs	r3, r5, #1
 8009932:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8009936:	e75b      	b.n	80097f0 <__ieee754_sqrt+0x24>
 8009938:	4696      	mov	lr, r2
 800993a:	e7c2      	b.n	80098c2 <__ieee754_sqrt+0xf6>
 800993c:	f7f6 fc16 	bl	800016c <__adddf3>
 8009940:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4650      	mov	r0, sl
 800994a:	4659      	mov	r1, fp
 800994c:	f7f7 f836 	bl	80009bc <__aeabi_dcmplt>
 8009950:	b120      	cbz	r0, 800995c <__ieee754_sqrt+0x190>
 8009952:	1cab      	adds	r3, r5, #2
 8009954:	bf08      	it	eq
 8009956:	3701      	addeq	r7, #1
 8009958:	3502      	adds	r5, #2
 800995a:	e7e2      	b.n	8009922 <__ieee754_sqrt+0x156>
 800995c:	1c6b      	adds	r3, r5, #1
 800995e:	f023 0501 	bic.w	r5, r3, #1
 8009962:	e7de      	b.n	8009922 <__ieee754_sqrt+0x156>
 8009964:	7ff00000 	.word	0x7ff00000
 8009968:	0800c218 	.word	0x0800c218
 800996c:	0800c210 	.word	0x0800c210

08009970 <truncf>:
 8009970:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009974:	3b7f      	subs	r3, #127	@ 0x7f
 8009976:	2b16      	cmp	r3, #22
 8009978:	4601      	mov	r1, r0
 800997a:	b510      	push	{r4, lr}
 800997c:	dc0a      	bgt.n	8009994 <truncf+0x24>
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 8009984:	db04      	blt.n	8009990 <truncf+0x20>
 8009986:	4a06      	ldr	r2, [pc, #24]	@ (80099a0 <truncf+0x30>)
 8009988:	fa42 f303 	asr.w	r3, r2, r3
 800998c:	4003      	ands	r3, r0
 800998e:	4319      	orrs	r1, r3
 8009990:	4608      	mov	r0, r1
 8009992:	bd10      	pop	{r4, pc}
 8009994:	2b80      	cmp	r3, #128	@ 0x80
 8009996:	d1fb      	bne.n	8009990 <truncf+0x20>
 8009998:	f7f7 f8ec 	bl	8000b74 <__addsf3>
 800999c:	4601      	mov	r1, r0
 800999e:	e7f7      	b.n	8009990 <truncf+0x20>
 80099a0:	ff800000 	.word	0xff800000
 80099a4:	00000000 	.word	0x00000000

080099a8 <__kernel_cos>:
 80099a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80099b0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80099b4:	4680      	mov	r8, r0
 80099b6:	4689      	mov	r9, r1
 80099b8:	e9cd 2300 	strd	r2, r3, [sp]
 80099bc:	d204      	bcs.n	80099c8 <__kernel_cos+0x20>
 80099be:	f7f7 f83b 	bl	8000a38 <__aeabi_d2iz>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f000 8086 	beq.w	8009ad4 <__kernel_cos+0x12c>
 80099c8:	4642      	mov	r2, r8
 80099ca:	464b      	mov	r3, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	4649      	mov	r1, r9
 80099d0:	f7f6 fd82 	bl	80004d8 <__aeabi_dmul>
 80099d4:	2200      	movs	r2, #0
 80099d6:	4b4e      	ldr	r3, [pc, #312]	@ (8009b10 <__kernel_cos+0x168>)
 80099d8:	4604      	mov	r4, r0
 80099da:	460d      	mov	r5, r1
 80099dc:	f7f6 fd7c 	bl	80004d8 <__aeabi_dmul>
 80099e0:	a33f      	add	r3, pc, #252	@ (adr r3, 8009ae0 <__kernel_cos+0x138>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	4682      	mov	sl, r0
 80099e8:	468b      	mov	fp, r1
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f6 fd73 	bl	80004d8 <__aeabi_dmul>
 80099f2:	a33d      	add	r3, pc, #244	@ (adr r3, 8009ae8 <__kernel_cos+0x140>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f7f6 fbb8 	bl	800016c <__adddf3>
 80099fc:	4622      	mov	r2, r4
 80099fe:	462b      	mov	r3, r5
 8009a00:	f7f6 fd6a 	bl	80004d8 <__aeabi_dmul>
 8009a04:	a33a      	add	r3, pc, #232	@ (adr r3, 8009af0 <__kernel_cos+0x148>)
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	f7f6 fbad 	bl	8000168 <__aeabi_dsub>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	f7f6 fd61 	bl	80004d8 <__aeabi_dmul>
 8009a16:	a338      	add	r3, pc, #224	@ (adr r3, 8009af8 <__kernel_cos+0x150>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fba6 	bl	800016c <__adddf3>
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	f7f6 fd58 	bl	80004d8 <__aeabi_dmul>
 8009a28:	a335      	add	r3, pc, #212	@ (adr r3, 8009b00 <__kernel_cos+0x158>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fb9b 	bl	8000168 <__aeabi_dsub>
 8009a32:	4622      	mov	r2, r4
 8009a34:	462b      	mov	r3, r5
 8009a36:	f7f6 fd4f 	bl	80004d8 <__aeabi_dmul>
 8009a3a:	a333      	add	r3, pc, #204	@ (adr r3, 8009b08 <__kernel_cos+0x160>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fb94 	bl	800016c <__adddf3>
 8009a44:	4622      	mov	r2, r4
 8009a46:	462b      	mov	r3, r5
 8009a48:	f7f6 fd46 	bl	80004d8 <__aeabi_dmul>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	462b      	mov	r3, r5
 8009a50:	f7f6 fd42 	bl	80004d8 <__aeabi_dmul>
 8009a54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a58:	4604      	mov	r4, r0
 8009a5a:	460d      	mov	r5, r1
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fd3a 	bl	80004d8 <__aeabi_dmul>
 8009a64:	460b      	mov	r3, r1
 8009a66:	4602      	mov	r2, r0
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7f6 fb7c 	bl	8000168 <__aeabi_dsub>
 8009a70:	4b28      	ldr	r3, [pc, #160]	@ (8009b14 <__kernel_cos+0x16c>)
 8009a72:	4680      	mov	r8, r0
 8009a74:	429e      	cmp	r6, r3
 8009a76:	4689      	mov	r9, r1
 8009a78:	d80e      	bhi.n	8009a98 <__kernel_cos+0xf0>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4659      	mov	r1, fp
 8009a82:	f7f6 fb71 	bl	8000168 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	2000      	movs	r0, #0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4922      	ldr	r1, [pc, #136]	@ (8009b18 <__kernel_cos+0x170>)
 8009a8e:	f7f6 fb6b 	bl	8000168 <__aeabi_dsub>
 8009a92:	b003      	add	sp, #12
 8009a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a98:	2400      	movs	r4, #0
 8009a9a:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <__kernel_cos+0x174>)
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	429e      	cmp	r6, r3
 8009aa0:	bf8c      	ite	hi
 8009aa2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009b20 <__kernel_cos+0x178>)
 8009aa4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	2000      	movs	r0, #0
 8009aac:	491a      	ldr	r1, [pc, #104]	@ (8009b18 <__kernel_cos+0x170>)
 8009aae:	f7f6 fb5b 	bl	8000168 <__aeabi_dsub>
 8009ab2:	4622      	mov	r2, r4
 8009ab4:	4606      	mov	r6, r0
 8009ab6:	460f      	mov	r7, r1
 8009ab8:	462b      	mov	r3, r5
 8009aba:	4650      	mov	r0, sl
 8009abc:	4659      	mov	r1, fp
 8009abe:	f7f6 fb53 	bl	8000168 <__aeabi_dsub>
 8009ac2:	4642      	mov	r2, r8
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	f7f6 fb4f 	bl	8000168 <__aeabi_dsub>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	e7dc      	b.n	8009a8e <__kernel_cos+0xe6>
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	4910      	ldr	r1, [pc, #64]	@ (8009b18 <__kernel_cos+0x170>)
 8009ad8:	e7db      	b.n	8009a92 <__kernel_cos+0xea>
 8009ada:	bf00      	nop
 8009adc:	f3af 8000 	nop.w
 8009ae0:	be8838d4 	.word	0xbe8838d4
 8009ae4:	bda8fae9 	.word	0xbda8fae9
 8009ae8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009aec:	3e21ee9e 	.word	0x3e21ee9e
 8009af0:	809c52ad 	.word	0x809c52ad
 8009af4:	3e927e4f 	.word	0x3e927e4f
 8009af8:	19cb1590 	.word	0x19cb1590
 8009afc:	3efa01a0 	.word	0x3efa01a0
 8009b00:	16c15177 	.word	0x16c15177
 8009b04:	3f56c16c 	.word	0x3f56c16c
 8009b08:	5555554c 	.word	0x5555554c
 8009b0c:	3fa55555 	.word	0x3fa55555
 8009b10:	3fe00000 	.word	0x3fe00000
 8009b14:	3fd33332 	.word	0x3fd33332
 8009b18:	3ff00000 	.word	0x3ff00000
 8009b1c:	3fe90000 	.word	0x3fe90000
 8009b20:	3fd20000 	.word	0x3fd20000
 8009b24:	00000000 	.word	0x00000000

08009b28 <__kernel_sin>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	461f      	mov	r7, r3
 8009b2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b32:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	4616      	mov	r6, r2
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	d203      	bcs.n	8009b48 <__kernel_sin+0x20>
 8009b40:	f7f6 ff7a 	bl	8000a38 <__aeabi_d2iz>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d051      	beq.n	8009bec <__kernel_sin+0xc4>
 8009b48:	4622      	mov	r2, r4
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fcc2 	bl	80004d8 <__aeabi_dmul>
 8009b54:	4682      	mov	sl, r0
 8009b56:	468b      	mov	fp, r1
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 fcba 	bl	80004d8 <__aeabi_dmul>
 8009b64:	a33e      	add	r3, pc, #248	@ (adr r3, 8009c60 <__kernel_sin+0x138>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	4689      	mov	r9, r1
 8009b6e:	4650      	mov	r0, sl
 8009b70:	4659      	mov	r1, fp
 8009b72:	f7f6 fcb1 	bl	80004d8 <__aeabi_dmul>
 8009b76:	a33c      	add	r3, pc, #240	@ (adr r3, 8009c68 <__kernel_sin+0x140>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f7f6 faf4 	bl	8000168 <__aeabi_dsub>
 8009b80:	4652      	mov	r2, sl
 8009b82:	465b      	mov	r3, fp
 8009b84:	f7f6 fca8 	bl	80004d8 <__aeabi_dmul>
 8009b88:	a339      	add	r3, pc, #228	@ (adr r3, 8009c70 <__kernel_sin+0x148>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 faed 	bl	800016c <__adddf3>
 8009b92:	4652      	mov	r2, sl
 8009b94:	465b      	mov	r3, fp
 8009b96:	f7f6 fc9f 	bl	80004d8 <__aeabi_dmul>
 8009b9a:	a337      	add	r3, pc, #220	@ (adr r3, 8009c78 <__kernel_sin+0x150>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fae2 	bl	8000168 <__aeabi_dsub>
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	465b      	mov	r3, fp
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	a334      	add	r3, pc, #208	@ (adr r3, 8009c80 <__kernel_sin+0x158>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f7f6 fadb 	bl	800016c <__adddf3>
 8009bb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bbc:	b9db      	cbnz	r3, 8009bf6 <__kernel_sin+0xce>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4650      	mov	r0, sl
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	f7f6 fc87 	bl	80004d8 <__aeabi_dmul>
 8009bca:	a32f      	add	r3, pc, #188	@ (adr r3, 8009c88 <__kernel_sin+0x160>)
 8009bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd0:	f7f6 faca 	bl	8000168 <__aeabi_dsub>
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	f7f6 fc7e 	bl	80004d8 <__aeabi_dmul>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4620      	mov	r0, r4
 8009be2:	4629      	mov	r1, r5
 8009be4:	f7f6 fac2 	bl	800016c <__adddf3>
 8009be8:	4604      	mov	r4, r0
 8009bea:	460d      	mov	r5, r1
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	b005      	add	sp, #20
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	4b24      	ldr	r3, [pc, #144]	@ (8009c90 <__kernel_sin+0x168>)
 8009bfe:	f7f6 fc6b 	bl	80004d8 <__aeabi_dmul>
 8009c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	f7f6 fc63 	bl	80004d8 <__aeabi_dmul>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c1a:	f7f6 faa5 	bl	8000168 <__aeabi_dsub>
 8009c1e:	4652      	mov	r2, sl
 8009c20:	465b      	mov	r3, fp
 8009c22:	f7f6 fc59 	bl	80004d8 <__aeabi_dmul>
 8009c26:	4632      	mov	r2, r6
 8009c28:	463b      	mov	r3, r7
 8009c2a:	f7f6 fa9d 	bl	8000168 <__aeabi_dsub>
 8009c2e:	a316      	add	r3, pc, #88	@ (adr r3, 8009c88 <__kernel_sin+0x160>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	f7f6 fc4c 	bl	80004d8 <__aeabi_dmul>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 fa90 	bl	800016c <__adddf3>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4620      	mov	r0, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	f7f6 fa88 	bl	8000168 <__aeabi_dsub>
 8009c58:	e7c6      	b.n	8009be8 <__kernel_sin+0xc0>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	5acfd57c 	.word	0x5acfd57c
 8009c64:	3de5d93a 	.word	0x3de5d93a
 8009c68:	8a2b9ceb 	.word	0x8a2b9ceb
 8009c6c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009c70:	57b1fe7d 	.word	0x57b1fe7d
 8009c74:	3ec71de3 	.word	0x3ec71de3
 8009c78:	19c161d5 	.word	0x19c161d5
 8009c7c:	3f2a01a0 	.word	0x3f2a01a0
 8009c80:	1110f8a6 	.word	0x1110f8a6
 8009c84:	3f811111 	.word	0x3f811111
 8009c88:	55555549 	.word	0x55555549
 8009c8c:	3fc55555 	.word	0x3fc55555
 8009c90:	3fe00000 	.word	0x3fe00000
 8009c94:	00000000 	.word	0x00000000

08009c98 <__ieee754_atan2>:
 8009c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	4617      	mov	r7, r2
 8009c9e:	4690      	mov	r8, r2
 8009ca0:	4699      	mov	r9, r3
 8009ca2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009ca6:	427b      	negs	r3, r7
 8009ca8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009e30 <__ieee754_atan2+0x198>
 8009cac:	433b      	orrs	r3, r7
 8009cae:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009cb2:	4553      	cmp	r3, sl
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	d809      	bhi.n	8009cce <__ieee754_atan2+0x36>
 8009cba:	4246      	negs	r6, r0
 8009cbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009cc0:	4306      	orrs	r6, r0
 8009cc2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009cc6:	4556      	cmp	r6, sl
 8009cc8:	468e      	mov	lr, r1
 8009cca:	4683      	mov	fp, r0
 8009ccc:	d908      	bls.n	8009ce0 <__ieee754_atan2+0x48>
 8009cce:	4642      	mov	r2, r8
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fa49 	bl	800016c <__adddf3>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	460d      	mov	r5, r1
 8009cde:	e016      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009ce0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009ce4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ce8:	433e      	orrs	r6, r7
 8009cea:	d103      	bne.n	8009cf4 <__ieee754_atan2+0x5c>
 8009cec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	f000 ba9e 	b.w	800a230 <atan>
 8009cf4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009cf8:	f006 0602 	and.w	r6, r6, #2
 8009cfc:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009d00:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009d04:	d107      	bne.n	8009d16 <__ieee754_atan2+0x7e>
 8009d06:	2e02      	cmp	r6, #2
 8009d08:	d064      	beq.n	8009dd4 <__ieee754_atan2+0x13c>
 8009d0a:	2e03      	cmp	r6, #3
 8009d0c:	d066      	beq.n	8009ddc <__ieee754_atan2+0x144>
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d16:	4317      	orrs	r7, r2
 8009d18:	d106      	bne.n	8009d28 <__ieee754_atan2+0x90>
 8009d1a:	f1be 0f00 	cmp.w	lr, #0
 8009d1e:	db68      	blt.n	8009df2 <__ieee754_atan2+0x15a>
 8009d20:	a537      	add	r5, pc, #220	@ (adr r5, 8009e00 <__ieee754_atan2+0x168>)
 8009d22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d26:	e7f2      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009d28:	4552      	cmp	r2, sl
 8009d2a:	d10f      	bne.n	8009d4c <__ieee754_atan2+0xb4>
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	f106 36ff 	add.w	r6, r6, #4294967295
 8009d32:	d107      	bne.n	8009d44 <__ieee754_atan2+0xac>
 8009d34:	2e02      	cmp	r6, #2
 8009d36:	d855      	bhi.n	8009de4 <__ieee754_atan2+0x14c>
 8009d38:	4b3e      	ldr	r3, [pc, #248]	@ (8009e34 <__ieee754_atan2+0x19c>)
 8009d3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d42:	e7e4      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009d44:	2e02      	cmp	r6, #2
 8009d46:	d851      	bhi.n	8009dec <__ieee754_atan2+0x154>
 8009d48:	4b3b      	ldr	r3, [pc, #236]	@ (8009e38 <__ieee754_atan2+0x1a0>)
 8009d4a:	e7f6      	b.n	8009d3a <__ieee754_atan2+0xa2>
 8009d4c:	4553      	cmp	r3, sl
 8009d4e:	d0e4      	beq.n	8009d1a <__ieee754_atan2+0x82>
 8009d50:	1a9b      	subs	r3, r3, r2
 8009d52:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009d56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d5a:	da21      	bge.n	8009da0 <__ieee754_atan2+0x108>
 8009d5c:	f1b9 0f00 	cmp.w	r9, #0
 8009d60:	da01      	bge.n	8009d66 <__ieee754_atan2+0xce>
 8009d62:	323c      	adds	r2, #60	@ 0x3c
 8009d64:	db20      	blt.n	8009da8 <__ieee754_atan2+0x110>
 8009d66:	4642      	mov	r2, r8
 8009d68:	464b      	mov	r3, r9
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	f7f6 fcdd 	bl	800072c <__aeabi_ddiv>
 8009d72:	f000 fbed 	bl	800a550 <fabs>
 8009d76:	f000 fa5b 	bl	800a230 <atan>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	2e01      	cmp	r6, #1
 8009d80:	d015      	beq.n	8009dae <__ieee754_atan2+0x116>
 8009d82:	2e02      	cmp	r6, #2
 8009d84:	d017      	beq.n	8009db6 <__ieee754_atan2+0x11e>
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	d0c1      	beq.n	8009d0e <__ieee754_atan2+0x76>
 8009d8a:	a31f      	add	r3, pc, #124	@ (adr r3, 8009e08 <__ieee754_atan2+0x170>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7f6 f9e8 	bl	8000168 <__aeabi_dsub>
 8009d98:	a31d      	add	r3, pc, #116	@ (adr r3, 8009e10 <__ieee754_atan2+0x178>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	e016      	b.n	8009dce <__ieee754_atan2+0x136>
 8009da0:	a517      	add	r5, pc, #92	@ (adr r5, 8009e00 <__ieee754_atan2+0x168>)
 8009da2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009da6:	e7ea      	b.n	8009d7e <__ieee754_atan2+0xe6>
 8009da8:	2400      	movs	r4, #0
 8009daa:	2500      	movs	r5, #0
 8009dac:	e7e7      	b.n	8009d7e <__ieee754_atan2+0xe6>
 8009dae:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009db2:	461d      	mov	r5, r3
 8009db4:	e7ab      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009db6:	a314      	add	r3, pc, #80	@ (adr r3, 8009e08 <__ieee754_atan2+0x170>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 f9d2 	bl	8000168 <__aeabi_dsub>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	a111      	add	r1, pc, #68	@ (adr r1, 8009e10 <__ieee754_atan2+0x178>)
 8009dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dce:	f7f6 f9cb 	bl	8000168 <__aeabi_dsub>
 8009dd2:	e782      	b.n	8009cda <__ieee754_atan2+0x42>
 8009dd4:	a50e      	add	r5, pc, #56	@ (adr r5, 8009e10 <__ieee754_atan2+0x178>)
 8009dd6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009dda:	e798      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009ddc:	a50e      	add	r5, pc, #56	@ (adr r5, 8009e18 <__ieee754_atan2+0x180>)
 8009dde:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009de2:	e794      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009de4:	a50e      	add	r5, pc, #56	@ (adr r5, 8009e20 <__ieee754_atan2+0x188>)
 8009de6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009dea:	e790      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009dec:	2400      	movs	r4, #0
 8009dee:	2500      	movs	r5, #0
 8009df0:	e78d      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009df2:	a50d      	add	r5, pc, #52	@ (adr r5, 8009e28 <__ieee754_atan2+0x190>)
 8009df4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009df8:	e789      	b.n	8009d0e <__ieee754_atan2+0x76>
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w
 8009e00:	54442d18 	.word	0x54442d18
 8009e04:	3ff921fb 	.word	0x3ff921fb
 8009e08:	33145c07 	.word	0x33145c07
 8009e0c:	3ca1a626 	.word	0x3ca1a626
 8009e10:	54442d18 	.word	0x54442d18
 8009e14:	400921fb 	.word	0x400921fb
 8009e18:	54442d18 	.word	0x54442d18
 8009e1c:	c00921fb 	.word	0xc00921fb
 8009e20:	54442d18 	.word	0x54442d18
 8009e24:	3fe921fb 	.word	0x3fe921fb
 8009e28:	54442d18 	.word	0x54442d18
 8009e2c:	bff921fb 	.word	0xbff921fb
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	0800c238 	.word	0x0800c238
 8009e38:	0800c220 	.word	0x0800c220
 8009e3c:	00000000 	.word	0x00000000

08009e40 <__ieee754_rem_pio2>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	4bc4      	ldr	r3, [pc, #784]	@ (800a158 <__ieee754_rem_pio2+0x318>)
 8009e46:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009e4a:	b08d      	sub	sp, #52	@ 0x34
 8009e4c:	4598      	cmp	r8, r3
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	4614      	mov	r4, r2
 8009e54:	9104      	str	r1, [sp, #16]
 8009e56:	d807      	bhi.n	8009e68 <__ieee754_rem_pio2+0x28>
 8009e58:	e9c2 6700 	strd	r6, r7, [r2]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	2200      	movs	r2, #0
 8009e60:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009e64:	2500      	movs	r5, #0
 8009e66:	e026      	b.n	8009eb6 <__ieee754_rem_pio2+0x76>
 8009e68:	4bbc      	ldr	r3, [pc, #752]	@ (800a15c <__ieee754_rem_pio2+0x31c>)
 8009e6a:	4598      	cmp	r8, r3
 8009e6c:	d876      	bhi.n	8009f5c <__ieee754_rem_pio2+0x11c>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	4dbb      	ldr	r5, [pc, #748]	@ (800a160 <__ieee754_rem_pio2+0x320>)
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2e0>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	dd38      	ble.n	8009eee <__ieee754_rem_pio2+0xae>
 8009e7c:	f7f6 f974 	bl	8000168 <__aeabi_dsub>
 8009e80:	45a8      	cmp	r8, r5
 8009e82:	4606      	mov	r6, r0
 8009e84:	460f      	mov	r7, r1
 8009e86:	d01a      	beq.n	8009ebe <__ieee754_rem_pio2+0x7e>
 8009e88:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2e8>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 f96b 	bl	8000168 <__aeabi_dsub>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	4680      	mov	r8, r0
 8009e98:	4689      	mov	r9, r1
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	f7f6 f963 	bl	8000168 <__aeabi_dsub>
 8009ea2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2e8>)
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	f7f6 f95e 	bl	8000168 <__aeabi_dsub>
 8009eac:	2501      	movs	r5, #1
 8009eae:	e9c4 8900 	strd	r8, r9, [r4]
 8009eb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	b00d      	add	sp, #52	@ 0x34
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	a39c      	add	r3, pc, #624	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x2f0>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 f950 	bl	8000168 <__aeabi_dsub>
 8009ec8:	a39b      	add	r3, pc, #620	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x2f8>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	f7f6 f949 	bl	8000168 <__aeabi_dsub>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4680      	mov	r8, r0
 8009edc:	4689      	mov	r9, r1
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 f941 	bl	8000168 <__aeabi_dsub>
 8009ee6:	a394      	add	r3, pc, #592	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x2f8>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	e7dc      	b.n	8009ea8 <__ieee754_rem_pio2+0x68>
 8009eee:	f7f6 f93d 	bl	800016c <__adddf3>
 8009ef2:	45a8      	cmp	r8, r5
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	d018      	beq.n	8009f2c <__ieee754_rem_pio2+0xec>
 8009efa:	a38b      	add	r3, pc, #556	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2e8>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 f934 	bl	800016c <__adddf3>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4680      	mov	r8, r0
 8009f0a:	4689      	mov	r9, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7f6 f92a 	bl	8000168 <__aeabi_dsub>
 8009f14:	a384      	add	r3, pc, #528	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2e8>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 f927 	bl	800016c <__adddf3>
 8009f1e:	f04f 35ff 	mov.w	r5, #4294967295
 8009f22:	e9c4 8900 	strd	r8, r9, [r4]
 8009f26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f2a:	e7c4      	b.n	8009eb6 <__ieee754_rem_pio2+0x76>
 8009f2c:	a380      	add	r3, pc, #512	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x2f0>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f7f6 f91b 	bl	800016c <__adddf3>
 8009f36:	a380      	add	r3, pc, #512	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x2f8>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	f7f6 f914 	bl	800016c <__adddf3>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4689      	mov	r9, r1
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	4639      	mov	r1, r7
 8009f50:	f7f6 f90a 	bl	8000168 <__aeabi_dsub>
 8009f54:	a378      	add	r3, pc, #480	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x2f8>)
 8009f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5a:	e7de      	b.n	8009f1a <__ieee754_rem_pio2+0xda>
 8009f5c:	4b81      	ldr	r3, [pc, #516]	@ (800a164 <__ieee754_rem_pio2+0x324>)
 8009f5e:	4598      	cmp	r8, r3
 8009f60:	f200 80cf 	bhi.w	800a102 <__ieee754_rem_pio2+0x2c2>
 8009f64:	f000 faf4 	bl	800a550 <fabs>
 8009f68:	a375      	add	r3, pc, #468	@ (adr r3, 800a140 <__ieee754_rem_pio2+0x300>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	f7f6 fab1 	bl	80004d8 <__aeabi_dmul>
 8009f76:	2200      	movs	r2, #0
 8009f78:	4b7b      	ldr	r3, [pc, #492]	@ (800a168 <__ieee754_rem_pio2+0x328>)
 8009f7a:	f7f6 f8f7 	bl	800016c <__adddf3>
 8009f7e:	f7f6 fd5b 	bl	8000a38 <__aeabi_d2iz>
 8009f82:	4605      	mov	r5, r0
 8009f84:	f7f6 fa3e 	bl	8000404 <__aeabi_i2d>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f90:	a363      	add	r3, pc, #396	@ (adr r3, 800a120 <__ieee754_rem_pio2+0x2e0>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	f7f6 fa9f 	bl	80004d8 <__aeabi_dmul>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	f7f6 f8e1 	bl	8000168 <__aeabi_dsub>
 8009fa6:	a360      	add	r3, pc, #384	@ (adr r3, 800a128 <__ieee754_rem_pio2+0x2e8>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	4682      	mov	sl, r0
 8009fae:	468b      	mov	fp, r1
 8009fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fb4:	f7f6 fa90 	bl	80004d8 <__aeabi_dmul>
 8009fb8:	2d1f      	cmp	r5, #31
 8009fba:	4606      	mov	r6, r0
 8009fbc:	460f      	mov	r7, r1
 8009fbe:	dc0c      	bgt.n	8009fda <__ieee754_rem_pio2+0x19a>
 8009fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800a16c <__ieee754_rem_pio2+0x32c>)
 8009fc2:	1e6a      	subs	r2, r5, #1
 8009fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc8:	4543      	cmp	r3, r8
 8009fca:	d006      	beq.n	8009fda <__ieee754_rem_pio2+0x19a>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	4650      	mov	r0, sl
 8009fd2:	4659      	mov	r1, fp
 8009fd4:	f7f6 f8c8 	bl	8000168 <__aeabi_dsub>
 8009fd8:	e00e      	b.n	8009ff8 <__ieee754_rem_pio2+0x1b8>
 8009fda:	463b      	mov	r3, r7
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4650      	mov	r0, sl
 8009fe0:	4659      	mov	r1, fp
 8009fe2:	f7f6 f8c1 	bl	8000168 <__aeabi_dsub>
 8009fe6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fea:	9305      	str	r3, [sp, #20]
 8009fec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ff0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009ff4:	2b10      	cmp	r3, #16
 8009ff6:	dc02      	bgt.n	8009ffe <__ieee754_rem_pio2+0x1be>
 8009ff8:	e9c4 0100 	strd	r0, r1, [r4]
 8009ffc:	e039      	b.n	800a072 <__ieee754_rem_pio2+0x232>
 8009ffe:	a34c      	add	r3, pc, #304	@ (adr r3, 800a130 <__ieee754_rem_pio2+0x2f0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a008:	f7f6 fa66 	bl	80004d8 <__aeabi_dmul>
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4650      	mov	r0, sl
 800a016:	4659      	mov	r1, fp
 800a018:	f7f6 f8a6 	bl	8000168 <__aeabi_dsub>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4680      	mov	r8, r0
 800a022:	4689      	mov	r9, r1
 800a024:	4650      	mov	r0, sl
 800a026:	4659      	mov	r1, fp
 800a028:	f7f6 f89e 	bl	8000168 <__aeabi_dsub>
 800a02c:	4632      	mov	r2, r6
 800a02e:	463b      	mov	r3, r7
 800a030:	f7f6 f89a 	bl	8000168 <__aeabi_dsub>
 800a034:	a340      	add	r3, pc, #256	@ (adr r3, 800a138 <__ieee754_rem_pio2+0x2f8>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a042:	f7f6 fa49 	bl	80004d8 <__aeabi_dmul>
 800a046:	4632      	mov	r2, r6
 800a048:	463b      	mov	r3, r7
 800a04a:	f7f6 f88d 	bl	8000168 <__aeabi_dsub>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	4640      	mov	r0, r8
 800a058:	4649      	mov	r1, r9
 800a05a:	f7f6 f885 	bl	8000168 <__aeabi_dsub>
 800a05e:	9a05      	ldr	r2, [sp, #20]
 800a060:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b31      	cmp	r3, #49	@ 0x31
 800a068:	dc20      	bgt.n	800a0ac <__ieee754_rem_pio2+0x26c>
 800a06a:	46c2      	mov	sl, r8
 800a06c:	46cb      	mov	fp, r9
 800a06e:	e9c4 0100 	strd	r0, r1, [r4]
 800a072:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a076:	4650      	mov	r0, sl
 800a078:	4642      	mov	r2, r8
 800a07a:	464b      	mov	r3, r9
 800a07c:	4659      	mov	r1, fp
 800a07e:	f7f6 f873 	bl	8000168 <__aeabi_dsub>
 800a082:	463b      	mov	r3, r7
 800a084:	4632      	mov	r2, r6
 800a086:	f7f6 f86f 	bl	8000168 <__aeabi_dsub>
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f6bf af10 	bge.w	8009eb6 <__ieee754_rem_pio2+0x76>
 800a096:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a09a:	6063      	str	r3, [r4, #4]
 800a09c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0a0:	f8c4 8000 	str.w	r8, [r4]
 800a0a4:	60a0      	str	r0, [r4, #8]
 800a0a6:	60e3      	str	r3, [r4, #12]
 800a0a8:	426d      	negs	r5, r5
 800a0aa:	e704      	b.n	8009eb6 <__ieee754_rem_pio2+0x76>
 800a0ac:	a326      	add	r3, pc, #152	@ (adr r3, 800a148 <__ieee754_rem_pio2+0x308>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b6:	f7f6 fa0f 	bl	80004d8 <__aeabi_dmul>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	460f      	mov	r7, r1
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	f7f6 f84f 	bl	8000168 <__aeabi_dsub>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4682      	mov	sl, r0
 800a0d0:	468b      	mov	fp, r1
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 f847 	bl	8000168 <__aeabi_dsub>
 800a0da:	4632      	mov	r2, r6
 800a0dc:	463b      	mov	r3, r7
 800a0de:	f7f6 f843 	bl	8000168 <__aeabi_dsub>
 800a0e2:	a31b      	add	r3, pc, #108	@ (adr r3, 800a150 <__ieee754_rem_pio2+0x310>)
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	460f      	mov	r7, r1
 800a0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f0:	f7f6 f9f2 	bl	80004d8 <__aeabi_dmul>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	f7f6 f836 	bl	8000168 <__aeabi_dsub>
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	e764      	b.n	8009fcc <__ieee754_rem_pio2+0x18c>
 800a102:	4b1b      	ldr	r3, [pc, #108]	@ (800a170 <__ieee754_rem_pio2+0x330>)
 800a104:	4598      	cmp	r8, r3
 800a106:	d935      	bls.n	800a174 <__ieee754_rem_pio2+0x334>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	f7f6 f82c 	bl	8000168 <__aeabi_dsub>
 800a110:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a114:	e9c4 0100 	strd	r0, r1, [r4]
 800a118:	e6a4      	b.n	8009e64 <__ieee754_rem_pio2+0x24>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	54400000 	.word	0x54400000
 800a124:	3ff921fb 	.word	0x3ff921fb
 800a128:	1a626331 	.word	0x1a626331
 800a12c:	3dd0b461 	.word	0x3dd0b461
 800a130:	1a600000 	.word	0x1a600000
 800a134:	3dd0b461 	.word	0x3dd0b461
 800a138:	2e037073 	.word	0x2e037073
 800a13c:	3ba3198a 	.word	0x3ba3198a
 800a140:	6dc9c883 	.word	0x6dc9c883
 800a144:	3fe45f30 	.word	0x3fe45f30
 800a148:	2e000000 	.word	0x2e000000
 800a14c:	3ba3198a 	.word	0x3ba3198a
 800a150:	252049c1 	.word	0x252049c1
 800a154:	397b839a 	.word	0x397b839a
 800a158:	3fe921fb 	.word	0x3fe921fb
 800a15c:	4002d97b 	.word	0x4002d97b
 800a160:	3ff921fb 	.word	0x3ff921fb
 800a164:	413921fb 	.word	0x413921fb
 800a168:	3fe00000 	.word	0x3fe00000
 800a16c:	0800c250 	.word	0x0800c250
 800a170:	7fefffff 	.word	0x7fefffff
 800a174:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a178:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a17c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a180:	460f      	mov	r7, r1
 800a182:	f7f6 fc59 	bl	8000a38 <__aeabi_d2iz>
 800a186:	f7f6 f93d 	bl	8000404 <__aeabi_i2d>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a196:	f7f5 ffe7 	bl	8000168 <__aeabi_dsub>
 800a19a:	2200      	movs	r2, #0
 800a19c:	4b21      	ldr	r3, [pc, #132]	@ (800a224 <__ieee754_rem_pio2+0x3e4>)
 800a19e:	f7f6 f99b 	bl	80004d8 <__aeabi_dmul>
 800a1a2:	460f      	mov	r7, r1
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	f7f6 fc47 	bl	8000a38 <__aeabi_d2iz>
 800a1aa:	f7f6 f92b 	bl	8000404 <__aeabi_i2d>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1ba:	f7f5 ffd5 	bl	8000168 <__aeabi_dsub>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4b18      	ldr	r3, [pc, #96]	@ (800a224 <__ieee754_rem_pio2+0x3e4>)
 800a1c2:	f7f6 f989 	bl	80004d8 <__aeabi_dmul>
 800a1c6:	f04f 0803 	mov.w	r8, #3
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	2700      	movs	r7, #0
 800a1ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a1d2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a1dc:	463b      	mov	r3, r7
 800a1de:	46c2      	mov	sl, r8
 800a1e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1e4:	f7f6 fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d1f4      	bne.n	800a1d6 <__ieee754_rem_pio2+0x396>
 800a1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a228 <__ieee754_rem_pio2+0x3e8>)
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	a806      	add	r0, sp, #24
 800a1fa:	4653      	mov	r3, sl
 800a1fc:	f000 f9ac 	bl	800a558 <__kernel_rem_pio2>
 800a200:	9b04      	ldr	r3, [sp, #16]
 800a202:	4605      	mov	r5, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	f6bf ae56 	bge.w	8009eb6 <__ieee754_rem_pio2+0x76>
 800a20a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a20e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a212:	e9c4 2300 	strd	r2, r3, [r4]
 800a216:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a21a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a21e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a222:	e741      	b.n	800a0a8 <__ieee754_rem_pio2+0x268>
 800a224:	41700000 	.word	0x41700000
 800a228:	0800c2d0 	.word	0x0800c2d0
 800a22c:	00000000 	.word	0x00000000

0800a230 <atan>:
 800a230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	4bbc      	ldr	r3, [pc, #752]	@ (800a528 <atan+0x2f8>)
 800a236:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a23a:	429e      	cmp	r6, r3
 800a23c:	4604      	mov	r4, r0
 800a23e:	460d      	mov	r5, r1
 800a240:	468b      	mov	fp, r1
 800a242:	d918      	bls.n	800a276 <atan+0x46>
 800a244:	4bb9      	ldr	r3, [pc, #740]	@ (800a52c <atan+0x2fc>)
 800a246:	429e      	cmp	r6, r3
 800a248:	d801      	bhi.n	800a24e <atan+0x1e>
 800a24a:	d109      	bne.n	800a260 <atan+0x30>
 800a24c:	b140      	cbz	r0, 800a260 <atan+0x30>
 800a24e:	4622      	mov	r2, r4
 800a250:	462b      	mov	r3, r5
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f5 ff89 	bl	800016c <__adddf3>
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	e006      	b.n	800a26e <atan+0x3e>
 800a260:	f1bb 0f00 	cmp.w	fp, #0
 800a264:	f340 8123 	ble.w	800a4ae <atan+0x27e>
 800a268:	a593      	add	r5, pc, #588	@ (adr r5, 800a4b8 <atan+0x288>)
 800a26a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	4bae      	ldr	r3, [pc, #696]	@ (800a530 <atan+0x300>)
 800a278:	429e      	cmp	r6, r3
 800a27a:	d811      	bhi.n	800a2a0 <atan+0x70>
 800a27c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a280:	429e      	cmp	r6, r3
 800a282:	d80a      	bhi.n	800a29a <atan+0x6a>
 800a284:	a38e      	add	r3, pc, #568	@ (adr r3, 800a4c0 <atan+0x290>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f5 ff6f 	bl	800016c <__adddf3>
 800a28e:	2200      	movs	r2, #0
 800a290:	4ba8      	ldr	r3, [pc, #672]	@ (800a534 <atan+0x304>)
 800a292:	f7f6 fbb1 	bl	80009f8 <__aeabi_dcmpgt>
 800a296:	2800      	cmp	r0, #0
 800a298:	d1e9      	bne.n	800a26e <atan+0x3e>
 800a29a:	f04f 3aff 	mov.w	sl, #4294967295
 800a29e:	e027      	b.n	800a2f0 <atan+0xc0>
 800a2a0:	f000 f956 	bl	800a550 <fabs>
 800a2a4:	4ba4      	ldr	r3, [pc, #656]	@ (800a538 <atan+0x308>)
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	429e      	cmp	r6, r3
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	f200 80b8 	bhi.w	800a420 <atan+0x1f0>
 800a2b0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a2b4:	429e      	cmp	r6, r3
 800a2b6:	f200 809c 	bhi.w	800a3f2 <atan+0x1c2>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	f7f5 ff55 	bl	800016c <__adddf3>
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b9b      	ldr	r3, [pc, #620]	@ (800a534 <atan+0x304>)
 800a2c6:	f7f5 ff4f 	bl	8000168 <__aeabi_dsub>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	460f      	mov	r7, r1
 800a2d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f5 ff48 	bl	800016c <__adddf3>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fa22 	bl	800072c <__aeabi_ddiv>
 800a2e8:	f04f 0a00 	mov.w	sl, #0
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	4680      	mov	r8, r0
 800a302:	4689      	mov	r9, r1
 800a304:	f7f6 f8e8 	bl	80004d8 <__aeabi_dmul>
 800a308:	a36f      	add	r3, pc, #444	@ (adr r3, 800a4c8 <atan+0x298>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	4606      	mov	r6, r0
 800a310:	460f      	mov	r7, r1
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	a36e      	add	r3, pc, #440	@ (adr r3, 800a4d0 <atan+0x2a0>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ff26 	bl	800016c <__adddf3>
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	f7f6 f8d8 	bl	80004d8 <__aeabi_dmul>
 800a328:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4d8 <atan+0x2a8>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ff1d 	bl	800016c <__adddf3>
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	f7f6 f8cf 	bl	80004d8 <__aeabi_dmul>
 800a33a:	a369      	add	r3, pc, #420	@ (adr r3, 800a4e0 <atan+0x2b0>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ff14 	bl	800016c <__adddf3>
 800a344:	4632      	mov	r2, r6
 800a346:	463b      	mov	r3, r7
 800a348:	f7f6 f8c6 	bl	80004d8 <__aeabi_dmul>
 800a34c:	a366      	add	r3, pc, #408	@ (adr r3, 800a4e8 <atan+0x2b8>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff0b 	bl	800016c <__adddf3>
 800a356:	4632      	mov	r2, r6
 800a358:	463b      	mov	r3, r7
 800a35a:	f7f6 f8bd 	bl	80004d8 <__aeabi_dmul>
 800a35e:	a364      	add	r3, pc, #400	@ (adr r3, 800a4f0 <atan+0x2c0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f5 ff02 	bl	800016c <__adddf3>
 800a368:	4642      	mov	r2, r8
 800a36a:	464b      	mov	r3, r9
 800a36c:	f7f6 f8b4 	bl	80004d8 <__aeabi_dmul>
 800a370:	a361      	add	r3, pc, #388	@ (adr r3, 800a4f8 <atan+0x2c8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	4680      	mov	r8, r0
 800a378:	4689      	mov	r9, r1
 800a37a:	4630      	mov	r0, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	f7f6 f8ab 	bl	80004d8 <__aeabi_dmul>
 800a382:	a35f      	add	r3, pc, #380	@ (adr r3, 800a500 <atan+0x2d0>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f5 feee 	bl	8000168 <__aeabi_dsub>
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	f7f6 f8a2 	bl	80004d8 <__aeabi_dmul>
 800a394:	a35c      	add	r3, pc, #368	@ (adr r3, 800a508 <atan+0x2d8>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f5 fee5 	bl	8000168 <__aeabi_dsub>
 800a39e:	4632      	mov	r2, r6
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	f7f6 f899 	bl	80004d8 <__aeabi_dmul>
 800a3a6:	a35a      	add	r3, pc, #360	@ (adr r3, 800a510 <atan+0x2e0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f5 fedc 	bl	8000168 <__aeabi_dsub>
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f6 f890 	bl	80004d8 <__aeabi_dmul>
 800a3b8:	a357      	add	r3, pc, #348	@ (adr r3, 800a518 <atan+0x2e8>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f5 fed3 	bl	8000168 <__aeabi_dsub>
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	f7f6 f887 	bl	80004d8 <__aeabi_dmul>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f5 fecb 	bl	800016c <__adddf3>
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	462b      	mov	r3, r5
 800a3da:	f7f6 f87d 	bl	80004d8 <__aeabi_dmul>
 800a3de:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	d144      	bne.n	800a472 <atan+0x242>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	e733      	b.n	800a25a <atan+0x2a>
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	4b4f      	ldr	r3, [pc, #316]	@ (800a534 <atan+0x304>)
 800a3f6:	f7f5 feb7 	bl	8000168 <__aeabi_dsub>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	460f      	mov	r7, r1
 800a400:	4620      	mov	r0, r4
 800a402:	4629      	mov	r1, r5
 800a404:	4b4b      	ldr	r3, [pc, #300]	@ (800a534 <atan+0x304>)
 800a406:	f7f5 feb1 	bl	800016c <__adddf3>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4630      	mov	r0, r6
 800a410:	4639      	mov	r1, r7
 800a412:	f7f6 f98b 	bl	800072c <__aeabi_ddiv>
 800a416:	f04f 0a01 	mov.w	sl, #1
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	e767      	b.n	800a2f0 <atan+0xc0>
 800a420:	4b46      	ldr	r3, [pc, #280]	@ (800a53c <atan+0x30c>)
 800a422:	429e      	cmp	r6, r3
 800a424:	d21a      	bcs.n	800a45c <atan+0x22c>
 800a426:	2200      	movs	r2, #0
 800a428:	4b45      	ldr	r3, [pc, #276]	@ (800a540 <atan+0x310>)
 800a42a:	f7f5 fe9d 	bl	8000168 <__aeabi_dsub>
 800a42e:	2200      	movs	r2, #0
 800a430:	4606      	mov	r6, r0
 800a432:	460f      	mov	r7, r1
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	4b41      	ldr	r3, [pc, #260]	@ (800a540 <atan+0x310>)
 800a43a:	f7f6 f84d 	bl	80004d8 <__aeabi_dmul>
 800a43e:	2200      	movs	r2, #0
 800a440:	4b3c      	ldr	r3, [pc, #240]	@ (800a534 <atan+0x304>)
 800a442:	f7f5 fe93 	bl	800016c <__adddf3>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f6 f96d 	bl	800072c <__aeabi_ddiv>
 800a452:	f04f 0a02 	mov.w	sl, #2
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	e749      	b.n	800a2f0 <atan+0xc0>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	2000      	movs	r0, #0
 800a462:	4938      	ldr	r1, [pc, #224]	@ (800a544 <atan+0x314>)
 800a464:	f7f6 f962 	bl	800072c <__aeabi_ddiv>
 800a468:	f04f 0a03 	mov.w	sl, #3
 800a46c:	4604      	mov	r4, r0
 800a46e:	460d      	mov	r5, r1
 800a470:	e73e      	b.n	800a2f0 <atan+0xc0>
 800a472:	4b35      	ldr	r3, [pc, #212]	@ (800a548 <atan+0x318>)
 800a474:	4e35      	ldr	r6, [pc, #212]	@ (800a54c <atan+0x31c>)
 800a476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f5 fe73 	bl	8000168 <__aeabi_dsub>
 800a482:	4622      	mov	r2, r4
 800a484:	462b      	mov	r3, r5
 800a486:	f7f5 fe6f 	bl	8000168 <__aeabi_dsub>
 800a48a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a496:	f7f5 fe67 	bl	8000168 <__aeabi_dsub>
 800a49a:	f1bb 0f00 	cmp.w	fp, #0
 800a49e:	4604      	mov	r4, r0
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	f6bf aee4 	bge.w	800a26e <atan+0x3e>
 800a4a6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4aa:	461d      	mov	r5, r3
 800a4ac:	e6df      	b.n	800a26e <atan+0x3e>
 800a4ae:	a51c      	add	r5, pc, #112	@ (adr r5, 800a520 <atan+0x2f0>)
 800a4b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4b4:	e6db      	b.n	800a26e <atan+0x3e>
 800a4b6:	bf00      	nop
 800a4b8:	54442d18 	.word	0x54442d18
 800a4bc:	3ff921fb 	.word	0x3ff921fb
 800a4c0:	8800759c 	.word	0x8800759c
 800a4c4:	7e37e43c 	.word	0x7e37e43c
 800a4c8:	e322da11 	.word	0xe322da11
 800a4cc:	3f90ad3a 	.word	0x3f90ad3a
 800a4d0:	24760deb 	.word	0x24760deb
 800a4d4:	3fa97b4b 	.word	0x3fa97b4b
 800a4d8:	a0d03d51 	.word	0xa0d03d51
 800a4dc:	3fb10d66 	.word	0x3fb10d66
 800a4e0:	c54c206e 	.word	0xc54c206e
 800a4e4:	3fb745cd 	.word	0x3fb745cd
 800a4e8:	920083ff 	.word	0x920083ff
 800a4ec:	3fc24924 	.word	0x3fc24924
 800a4f0:	5555550d 	.word	0x5555550d
 800a4f4:	3fd55555 	.word	0x3fd55555
 800a4f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a4fc:	bfa2b444 	.word	0xbfa2b444
 800a500:	52defd9a 	.word	0x52defd9a
 800a504:	3fadde2d 	.word	0x3fadde2d
 800a508:	af749a6d 	.word	0xaf749a6d
 800a50c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a510:	fe231671 	.word	0xfe231671
 800a514:	3fbc71c6 	.word	0x3fbc71c6
 800a518:	9998ebc4 	.word	0x9998ebc4
 800a51c:	3fc99999 	.word	0x3fc99999
 800a520:	54442d18 	.word	0x54442d18
 800a524:	bff921fb 	.word	0xbff921fb
 800a528:	440fffff 	.word	0x440fffff
 800a52c:	7ff00000 	.word	0x7ff00000
 800a530:	3fdbffff 	.word	0x3fdbffff
 800a534:	3ff00000 	.word	0x3ff00000
 800a538:	3ff2ffff 	.word	0x3ff2ffff
 800a53c:	40038000 	.word	0x40038000
 800a540:	3ff80000 	.word	0x3ff80000
 800a544:	bff00000 	.word	0xbff00000
 800a548:	0800c3d8 	.word	0x0800c3d8
 800a54c:	0800c3f8 	.word	0x0800c3f8

0800a550 <fabs>:
 800a550:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a554:	4619      	mov	r1, r3
 800a556:	4770      	bx	lr

0800a558 <__kernel_rem_pio2>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a560:	9308      	str	r3, [sp, #32]
 800a562:	9104      	str	r1, [sp, #16]
 800a564:	4bba      	ldr	r3, [pc, #744]	@ (800a850 <__kernel_rem_pio2+0x2f8>)
 800a566:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a568:	f112 0f14 	cmn.w	r2, #20
 800a56c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a570:	bfa8      	it	ge
 800a572:	1ed4      	subge	r4, r2, #3
 800a574:	9302      	str	r3, [sp, #8]
 800a576:	9b08      	ldr	r3, [sp, #32]
 800a578:	bfb8      	it	lt
 800a57a:	2400      	movlt	r4, #0
 800a57c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a580:	9306      	str	r3, [sp, #24]
 800a582:	bfa4      	itt	ge
 800a584:	2318      	movge	r3, #24
 800a586:	fb94 f4f3 	sdivge	r4, r4, r3
 800a58a:	f06f 0317 	mvn.w	r3, #23
 800a58e:	fb04 3303 	mla	r3, r4, r3, r3
 800a592:	eb03 0a02 	add.w	sl, r3, r2
 800a596:	9a06      	ldr	r2, [sp, #24]
 800a598:	9b02      	ldr	r3, [sp, #8]
 800a59a:	1aa7      	subs	r7, r4, r2
 800a59c:	eb03 0802 	add.w	r8, r3, r2
 800a5a0:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5ae:	ae20      	add	r6, sp, #128	@ 0x80
 800a5b0:	4545      	cmp	r5, r8
 800a5b2:	dd13      	ble.n	800a5dc <__kernel_rem_pio2+0x84>
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	9a08      	ldr	r2, [sp, #32]
 800a5b8:	ab20      	add	r3, sp, #128	@ 0x80
 800a5ba:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a5be:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	429f      	cmp	r7, r3
 800a5c6:	dc33      	bgt.n	800a630 <__kernel_rem_pio2+0xd8>
 800a5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f1a3 0908 	sub.w	r9, r3, #8
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	46a8      	mov	r8, r5
 800a5d4:	2600      	movs	r6, #0
 800a5d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a5da:	e01f      	b.n	800a61c <__kernel_rem_pio2+0xc4>
 800a5dc:	42ef      	cmn	r7, r5
 800a5de:	d40b      	bmi.n	800a5f8 <__kernel_rem_pio2+0xa0>
 800a5e0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5e4:	e9cd 2300 	strd	r2, r3, [sp]
 800a5e8:	f7f5 ff0c 	bl	8000404 <__aeabi_i2d>
 800a5ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	e7db      	b.n	800a5b0 <__kernel_rem_pio2+0x58>
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	e7f8      	b.n	800a5f0 <__kernel_rem_pio2+0x98>
 800a5fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800a602:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a606:	f7f5 ff67 	bl	80004d8 <__aeabi_dmul>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a612:	f7f5 fdab 	bl	800016c <__adddf3>
 800a616:	e9cd 0100 	strd	r0, r1, [sp]
 800a61a:	3601      	adds	r6, #1
 800a61c:	9b06      	ldr	r3, [sp, #24]
 800a61e:	429e      	cmp	r6, r3
 800a620:	dded      	ble.n	800a5fe <__kernel_rem_pio2+0xa6>
 800a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a626:	3701      	adds	r7, #1
 800a628:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a62c:	3508      	adds	r5, #8
 800a62e:	e7c8      	b.n	800a5c2 <__kernel_rem_pio2+0x6a>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	aa0c      	add	r2, sp, #48	@ 0x30
 800a634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a63a:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a63c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a644:	930a      	str	r3, [sp, #40]	@ 0x28
 800a646:	ab98      	add	r3, sp, #608	@ 0x260
 800a648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a64c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a650:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a652:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a656:	ae0c      	add	r6, sp, #48	@ 0x30
 800a658:	4699      	mov	r9, r3
 800a65a:	46b0      	mov	r8, r6
 800a65c:	465f      	mov	r7, fp
 800a65e:	9307      	str	r3, [sp, #28]
 800a660:	2f00      	cmp	r7, #0
 800a662:	dc71      	bgt.n	800a748 <__kernel_rem_pio2+0x1f0>
 800a664:	4652      	mov	r2, sl
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f000 fa95 	bl	800ab98 <scalbn>
 800a66e:	2200      	movs	r2, #0
 800a670:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	f7f5 ff2e 	bl	80004d8 <__aeabi_dmul>
 800a67c:	f000 fb00 	bl	800ac80 <floor>
 800a680:	2200      	movs	r2, #0
 800a682:	4b74      	ldr	r3, [pc, #464]	@ (800a854 <__kernel_rem_pio2+0x2fc>)
 800a684:	f7f5 ff28 	bl	80004d8 <__aeabi_dmul>
 800a688:	4602      	mov	r2, r0
 800a68a:	460b      	mov	r3, r1
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f7f5 fd6a 	bl	8000168 <__aeabi_dsub>
 800a694:	460d      	mov	r5, r1
 800a696:	4604      	mov	r4, r0
 800a698:	f7f6 f9ce 	bl	8000a38 <__aeabi_d2iz>
 800a69c:	9005      	str	r0, [sp, #20]
 800a69e:	f7f5 feb1 	bl	8000404 <__aeabi_i2d>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7f5 fd5d 	bl	8000168 <__aeabi_dsub>
 800a6ae:	f1ba 0f00 	cmp.w	sl, #0
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4689      	mov	r9, r1
 800a6b6:	dd6d      	ble.n	800a794 <__kernel_rem_pio2+0x23c>
 800a6b8:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a6bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800a6be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6c2:	9c05      	ldr	r4, [sp, #20]
 800a6c4:	f1ca 0018 	rsb	r0, sl, #24
 800a6c8:	fa43 f200 	asr.w	r2, r3, r0
 800a6cc:	4414      	add	r4, r2
 800a6ce:	4082      	lsls	r2, r0
 800a6d0:	1a9b      	subs	r3, r3, r2
 800a6d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800a6d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6d8:	f1ca 0217 	rsb	r2, sl, #23
 800a6dc:	9405      	str	r4, [sp, #20]
 800a6de:	4113      	asrs	r3, r2
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	9b00      	ldr	r3, [sp, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dd64      	ble.n	800a7b2 <__kernel_rem_pio2+0x25a>
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	9b05      	ldr	r3, [sp, #20]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	4593      	cmp	fp, r2
 800a6f8:	f300 809d 	bgt.w	800a836 <__kernel_rem_pio2+0x2de>
 800a6fc:	f1ba 0f00 	cmp.w	sl, #0
 800a700:	dd07      	ble.n	800a712 <__kernel_rem_pio2+0x1ba>
 800a702:	f1ba 0f01 	cmp.w	sl, #1
 800a706:	f000 80b3 	beq.w	800a870 <__kernel_rem_pio2+0x318>
 800a70a:	f1ba 0f02 	cmp.w	sl, #2
 800a70e:	f000 80ba 	beq.w	800a886 <__kernel_rem_pio2+0x32e>
 800a712:	9b00      	ldr	r3, [sp, #0]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d14c      	bne.n	800a7b2 <__kernel_rem_pio2+0x25a>
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	2000      	movs	r0, #0
 800a71e:	494e      	ldr	r1, [pc, #312]	@ (800a858 <__kernel_rem_pio2+0x300>)
 800a720:	f7f5 fd22 	bl	8000168 <__aeabi_dsub>
 800a724:	4680      	mov	r8, r0
 800a726:	4689      	mov	r9, r1
 800a728:	2c00      	cmp	r4, #0
 800a72a:	d042      	beq.n	800a7b2 <__kernel_rem_pio2+0x25a>
 800a72c:	4652      	mov	r2, sl
 800a72e:	2000      	movs	r0, #0
 800a730:	4949      	ldr	r1, [pc, #292]	@ (800a858 <__kernel_rem_pio2+0x300>)
 800a732:	f000 fa31 	bl	800ab98 <scalbn>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fd13 	bl	8000168 <__aeabi_dsub>
 800a742:	4680      	mov	r8, r0
 800a744:	4689      	mov	r9, r1
 800a746:	e034      	b.n	800a7b2 <__kernel_rem_pio2+0x25a>
 800a748:	2200      	movs	r2, #0
 800a74a:	4b44      	ldr	r3, [pc, #272]	@ (800a85c <__kernel_rem_pio2+0x304>)
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 fec2 	bl	80004d8 <__aeabi_dmul>
 800a754:	f7f6 f970 	bl	8000a38 <__aeabi_d2iz>
 800a758:	f7f5 fe54 	bl	8000404 <__aeabi_i2d>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9cd 2300 	strd	r2, r3, [sp]
 800a764:	2200      	movs	r2, #0
 800a766:	4b3e      	ldr	r3, [pc, #248]	@ (800a860 <__kernel_rem_pio2+0x308>)
 800a768:	f7f5 feb6 	bl	80004d8 <__aeabi_dmul>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4620      	mov	r0, r4
 800a772:	4629      	mov	r1, r5
 800a774:	f7f5 fcf8 	bl	8000168 <__aeabi_dsub>
 800a778:	f7f6 f95e 	bl	8000a38 <__aeabi_d2iz>
 800a77c:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800a780:	f848 0b04 	str.w	r0, [r8], #4
 800a784:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a788:	f7f5 fcf0 	bl	800016c <__adddf3>
 800a78c:	3f01      	subs	r7, #1
 800a78e:	4604      	mov	r4, r0
 800a790:	460d      	mov	r5, r1
 800a792:	e765      	b.n	800a660 <__kernel_rem_pio2+0x108>
 800a794:	d106      	bne.n	800a7a4 <__kernel_rem_pio2+0x24c>
 800a796:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a79a:	aa0c      	add	r2, sp, #48	@ 0x30
 800a79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a0:	15db      	asrs	r3, r3, #23
 800a7a2:	e79d      	b.n	800a6e0 <__kernel_rem_pio2+0x188>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800a864 <__kernel_rem_pio2+0x30c>)
 800a7a8:	f7f6 f91c 	bl	80009e4 <__aeabi_dcmpge>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d13f      	bne.n	800a830 <__kernel_rem_pio2+0x2d8>
 800a7b0:	9000      	str	r0, [sp, #0]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f6 f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f000 80b0 	beq.w	800a924 <__kernel_rem_pio2+0x3cc>
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a7ca:	9902      	ldr	r1, [sp, #8]
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	da62      	bge.n	800a896 <__kernel_rem_pio2+0x33e>
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d077      	beq.n	800a8c4 <__kernel_rem_pio2+0x36c>
 800a7d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a7da:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a7de:	f1aa 0a18 	sub.w	sl, sl, #24
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0f6      	beq.n	800a7d4 <__kernel_rem_pio2+0x27c>
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	491b      	ldr	r1, [pc, #108]	@ (800a858 <__kernel_rem_pio2+0x300>)
 800a7ec:	f000 f9d4 	bl	800ab98 <scalbn>
 800a7f0:	465d      	mov	r5, fp
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	f04f 0900 	mov.w	r9, #0
 800a7fa:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a7fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a85c <__kernel_rem_pio2+0x304>
 800a800:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a804:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a808:	2d00      	cmp	r5, #0
 800a80a:	f280 80c1 	bge.w	800a990 <__kernel_rem_pio2+0x438>
 800a80e:	465d      	mov	r5, fp
 800a810:	2d00      	cmp	r5, #0
 800a812:	f2c0 80f1 	blt.w	800a9f8 <__kernel_rem_pio2+0x4a0>
 800a816:	4b14      	ldr	r3, [pc, #80]	@ (800a868 <__kernel_rem_pio2+0x310>)
 800a818:	f04f 0900 	mov.w	r9, #0
 800a81c:	9306      	str	r3, [sp, #24]
 800a81e:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a820:	f04f 0a00 	mov.w	sl, #0
 800a824:	2700      	movs	r7, #0
 800a826:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a82a:	ebab 0605 	sub.w	r6, fp, r5
 800a82e:	e0d7      	b.n	800a9e0 <__kernel_rem_pio2+0x488>
 800a830:	2302      	movs	r3, #2
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	e758      	b.n	800a6e8 <__kernel_rem_pio2+0x190>
 800a836:	f856 3b04 	ldr.w	r3, [r6], #4
 800a83a:	b9bc      	cbnz	r4, 800a86c <__kernel_rem_pio2+0x314>
 800a83c:	b123      	cbz	r3, 800a848 <__kernel_rem_pio2+0x2f0>
 800a83e:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a842:	f846 3c04 	str.w	r3, [r6, #-4]
 800a846:	2301      	movs	r3, #1
 800a848:	461c      	mov	r4, r3
 800a84a:	3201      	adds	r2, #1
 800a84c:	e753      	b.n	800a6f6 <__kernel_rem_pio2+0x19e>
 800a84e:	bf00      	nop
 800a850:	0800c458 	.word	0x0800c458
 800a854:	40200000 	.word	0x40200000
 800a858:	3ff00000 	.word	0x3ff00000
 800a85c:	3e700000 	.word	0x3e700000
 800a860:	41700000 	.word	0x41700000
 800a864:	3fe00000 	.word	0x3fe00000
 800a868:	0800c418 	.word	0x0800c418
 800a86c:	1acb      	subs	r3, r1, r3
 800a86e:	e7e8      	b.n	800a842 <__kernel_rem_pio2+0x2ea>
 800a870:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a874:	ab0c      	add	r3, sp, #48	@ 0x30
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a87e:	a90c      	add	r1, sp, #48	@ 0x30
 800a880:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a884:	e745      	b.n	800a712 <__kernel_rem_pio2+0x1ba>
 800a886:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a88a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a894:	e7f3      	b.n	800a87e <__kernel_rem_pio2+0x326>
 800a896:	a90c      	add	r1, sp, #48	@ 0x30
 800a898:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	e793      	b.n	800a7ca <__kernel_rem_pio2+0x272>
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	d0fa      	beq.n	800a8a2 <__kernel_rem_pio2+0x34a>
 800a8ac:	9b08      	ldr	r3, [sp, #32]
 800a8ae:	aa20      	add	r2, sp, #128	@ 0x80
 800a8b0:	445b      	add	r3, fp
 800a8b2:	f10b 0801 	add.w	r8, fp, #1
 800a8b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a8ba:	445c      	add	r4, fp
 800a8bc:	4544      	cmp	r4, r8
 800a8be:	da04      	bge.n	800a8ca <__kernel_rem_pio2+0x372>
 800a8c0:	46a3      	mov	fp, r4
 800a8c2:	e6c0      	b.n	800a646 <__kernel_rem_pio2+0xee>
 800a8c4:	2401      	movs	r4, #1
 800a8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8c8:	e7ec      	b.n	800a8a4 <__kernel_rem_pio2+0x34c>
 800a8ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8cc:	46ab      	mov	fp, r5
 800a8ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a8d2:	f7f5 fd97 	bl	8000404 <__aeabi_i2d>
 800a8d6:	f04f 0900 	mov.w	r9, #0
 800a8da:	2600      	movs	r6, #0
 800a8dc:	2700      	movs	r7, #0
 800a8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e0:	e9c5 0100 	strd	r0, r1, [r5]
 800a8e4:	3b08      	subs	r3, #8
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	9b06      	ldr	r3, [sp, #24]
 800a8ea:	4599      	cmp	r9, r3
 800a8ec:	dd07      	ble.n	800a8fe <__kernel_rem_pio2+0x3a6>
 800a8ee:	9b07      	ldr	r3, [sp, #28]
 800a8f0:	f108 0801 	add.w	r8, r8, #1
 800a8f4:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a8f8:	3508      	adds	r5, #8
 800a8fa:	9307      	str	r3, [sp, #28]
 800a8fc:	e7de      	b.n	800a8bc <__kernel_rem_pio2+0x364>
 800a8fe:	9900      	ldr	r1, [sp, #0]
 800a900:	f109 0901 	add.w	r9, r9, #1
 800a904:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a908:	9100      	str	r1, [sp, #0]
 800a90a:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a90e:	f7f5 fde3 	bl	80004d8 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4630      	mov	r0, r6
 800a918:	4639      	mov	r1, r7
 800a91a:	f7f5 fc27 	bl	800016c <__adddf3>
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	e7e1      	b.n	800a8e8 <__kernel_rem_pio2+0x390>
 800a924:	f1ca 0200 	rsb	r2, sl, #0
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f000 f934 	bl	800ab98 <scalbn>
 800a930:	2200      	movs	r2, #0
 800a932:	4b97      	ldr	r3, [pc, #604]	@ (800ab90 <__kernel_rem_pio2+0x638>)
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	f7f6 f854 	bl	80009e4 <__aeabi_dcmpge>
 800a93c:	b300      	cbz	r0, 800a980 <__kernel_rem_pio2+0x428>
 800a93e:	2200      	movs	r2, #0
 800a940:	4b94      	ldr	r3, [pc, #592]	@ (800ab94 <__kernel_rem_pio2+0x63c>)
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fdc7 	bl	80004d8 <__aeabi_dmul>
 800a94a:	f7f6 f875 	bl	8000a38 <__aeabi_d2iz>
 800a94e:	4606      	mov	r6, r0
 800a950:	f7f5 fd58 	bl	8000404 <__aeabi_i2d>
 800a954:	2200      	movs	r2, #0
 800a956:	4b8e      	ldr	r3, [pc, #568]	@ (800ab90 <__kernel_rem_pio2+0x638>)
 800a958:	f7f5 fdbe 	bl	80004d8 <__aeabi_dmul>
 800a95c:	460b      	mov	r3, r1
 800a95e:	4602      	mov	r2, r0
 800a960:	4629      	mov	r1, r5
 800a962:	4620      	mov	r0, r4
 800a964:	f7f5 fc00 	bl	8000168 <__aeabi_dsub>
 800a968:	f7f6 f866 	bl	8000a38 <__aeabi_d2iz>
 800a96c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a96e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a972:	f10b 0b01 	add.w	fp, fp, #1
 800a976:	f10a 0a18 	add.w	sl, sl, #24
 800a97a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a97e:	e732      	b.n	800a7e6 <__kernel_rem_pio2+0x28e>
 800a980:	4620      	mov	r0, r4
 800a982:	4629      	mov	r1, r5
 800a984:	f7f6 f858 	bl	8000a38 <__aeabi_d2iz>
 800a988:	ab0c      	add	r3, sp, #48	@ 0x30
 800a98a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a98e:	e72a      	b.n	800a7e6 <__kernel_rem_pio2+0x28e>
 800a990:	ab0c      	add	r3, sp, #48	@ 0x30
 800a992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a996:	f7f5 fd35 	bl	8000404 <__aeabi_i2d>
 800a99a:	4632      	mov	r2, r6
 800a99c:	463b      	mov	r3, r7
 800a99e:	f7f5 fd9b 	bl	80004d8 <__aeabi_dmul>
 800a9a2:	464a      	mov	r2, r9
 800a9a4:	e868 0102 	strd	r0, r1, [r8], #-8
 800a9a8:	4653      	mov	r3, sl
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f5 fd93 	bl	80004d8 <__aeabi_dmul>
 800a9b2:	3d01      	subs	r5, #1
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	e726      	b.n	800a808 <__kernel_rem_pio2+0x2b0>
 800a9ba:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a9be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a9c2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a9c6:	f8cd c018 	str.w	ip, [sp, #24]
 800a9ca:	f7f5 fd85 	bl	80004d8 <__aeabi_dmul>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4648      	mov	r0, r9
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	f7f5 fbc9 	bl	800016c <__adddf3>
 800a9da:	4681      	mov	r9, r0
 800a9dc:	468a      	mov	sl, r1
 800a9de:	3701      	adds	r7, #1
 800a9e0:	9b02      	ldr	r3, [sp, #8]
 800a9e2:	429f      	cmp	r7, r3
 800a9e4:	dc01      	bgt.n	800a9ea <__kernel_rem_pio2+0x492>
 800a9e6:	42b7      	cmp	r7, r6
 800a9e8:	dde7      	ble.n	800a9ba <__kernel_rem_pio2+0x462>
 800a9ea:	ab48      	add	r3, sp, #288	@ 0x120
 800a9ec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a9f0:	e9c6 9a00 	strd	r9, sl, [r6]
 800a9f4:	3d01      	subs	r5, #1
 800a9f6:	e70b      	b.n	800a810 <__kernel_rem_pio2+0x2b8>
 800a9f8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	dc09      	bgt.n	800aa12 <__kernel_rem_pio2+0x4ba>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dc2c      	bgt.n	800aa5c <__kernel_rem_pio2+0x504>
 800aa02:	d04e      	beq.n	800aaa2 <__kernel_rem_pio2+0x54a>
 800aa04:	9b05      	ldr	r3, [sp, #20]
 800aa06:	f003 0007 	and.w	r0, r3, #7
 800aa0a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa12:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d1f5      	bne.n	800aa04 <__kernel_rem_pio2+0x4ac>
 800aa18:	ab48      	add	r3, sp, #288	@ 0x120
 800aa1a:	441c      	add	r4, r3
 800aa1c:	4625      	mov	r5, r4
 800aa1e:	46da      	mov	sl, fp
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	dc63      	bgt.n	800aaee <__kernel_rem_pio2+0x596>
 800aa26:	4625      	mov	r5, r4
 800aa28:	46da      	mov	sl, fp
 800aa2a:	f1ba 0f01 	cmp.w	sl, #1
 800aa2e:	dc7b      	bgt.n	800ab28 <__kernel_rem_pio2+0x5d0>
 800aa30:	2000      	movs	r0, #0
 800aa32:	2100      	movs	r1, #0
 800aa34:	f1bb 0f01 	cmp.w	fp, #1
 800aa38:	f300 8093 	bgt.w	800ab62 <__kernel_rem_pio2+0x60a>
 800aa3c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800aa40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f040 8092 	bne.w	800ab70 <__kernel_rem_pio2+0x618>
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	e9c3 5600 	strd	r5, r6, [r3]
 800aa52:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aa56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aa5a:	e7d3      	b.n	800aa04 <__kernel_rem_pio2+0x4ac>
 800aa5c:	465d      	mov	r5, fp
 800aa5e:	2000      	movs	r0, #0
 800aa60:	2100      	movs	r1, #0
 800aa62:	ab48      	add	r3, sp, #288	@ 0x120
 800aa64:	441c      	add	r4, r3
 800aa66:	2d00      	cmp	r5, #0
 800aa68:	da32      	bge.n	800aad0 <__kernel_rem_pio2+0x578>
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d035      	beq.n	800aadc <__kernel_rem_pio2+0x584>
 800aa70:	4602      	mov	r2, r0
 800aa72:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa76:	9c04      	ldr	r4, [sp, #16]
 800aa78:	2501      	movs	r5, #1
 800aa7a:	e9c4 2300 	strd	r2, r3, [r4]
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800aa86:	f7f5 fb6f 	bl	8000168 <__aeabi_dsub>
 800aa8a:	ac48      	add	r4, sp, #288	@ 0x120
 800aa8c:	45ab      	cmp	fp, r5
 800aa8e:	da28      	bge.n	800aae2 <__kernel_rem_pio2+0x58a>
 800aa90:	9b00      	ldr	r3, [sp, #0]
 800aa92:	b113      	cbz	r3, 800aa9a <__kernel_rem_pio2+0x542>
 800aa94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa98:	4619      	mov	r1, r3
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aaa0:	e7b0      	b.n	800aa04 <__kernel_rem_pio2+0x4ac>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	ab48      	add	r3, sp, #288	@ 0x120
 800aaa8:	441c      	add	r4, r3
 800aaaa:	f1bb 0f00 	cmp.w	fp, #0
 800aaae:	da08      	bge.n	800aac2 <__kernel_rem_pio2+0x56a>
 800aab0:	9b00      	ldr	r3, [sp, #0]
 800aab2:	b113      	cbz	r3, 800aaba <__kernel_rem_pio2+0x562>
 800aab4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aab8:	4619      	mov	r1, r3
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	e9c3 0100 	strd	r0, r1, [r3]
 800aac0:	e7a0      	b.n	800aa04 <__kernel_rem_pio2+0x4ac>
 800aac2:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800aac6:	f7f5 fb51 	bl	800016c <__adddf3>
 800aaca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aace:	e7ec      	b.n	800aaaa <__kernel_rem_pio2+0x552>
 800aad0:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800aad4:	f7f5 fb4a 	bl	800016c <__adddf3>
 800aad8:	3d01      	subs	r5, #1
 800aada:	e7c4      	b.n	800aa66 <__kernel_rem_pio2+0x50e>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	e7c9      	b.n	800aa76 <__kernel_rem_pio2+0x51e>
 800aae2:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800aae6:	f7f5 fb41 	bl	800016c <__adddf3>
 800aaea:	3501      	adds	r5, #1
 800aaec:	e7ce      	b.n	800aa8c <__kernel_rem_pio2+0x534>
 800aaee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aaf2:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4649      	mov	r1, r9
 800aafa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aafe:	f7f5 fb35 	bl	800016c <__adddf3>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fb2b 	bl	8000168 <__aeabi_dsub>
 800ab12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab16:	f7f5 fb29 	bl	800016c <__adddf3>
 800ab1a:	e865 0102 	strd	r0, r1, [r5], #-8
 800ab1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab22:	e9c5 6700 	strd	r6, r7, [r5]
 800ab26:	e77b      	b.n	800aa20 <__kernel_rem_pio2+0x4c8>
 800ab28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab2c:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab38:	f7f5 fb18 	bl	800016c <__adddf3>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	460b      	mov	r3, r1
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	4640      	mov	r0, r8
 800ab46:	4649      	mov	r1, r9
 800ab48:	f7f5 fb0e 	bl	8000168 <__aeabi_dsub>
 800ab4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab50:	f7f5 fb0c 	bl	800016c <__adddf3>
 800ab54:	e865 0102 	strd	r0, r1, [r5], #-8
 800ab58:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab5c:	e9c5 6700 	strd	r6, r7, [r5]
 800ab60:	e763      	b.n	800aa2a <__kernel_rem_pio2+0x4d2>
 800ab62:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ab66:	f7f5 fb01 	bl	800016c <__adddf3>
 800ab6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab6e:	e761      	b.n	800aa34 <__kernel_rem_pio2+0x4dc>
 800ab70:	9b04      	ldr	r3, [sp, #16]
 800ab72:	9a04      	ldr	r2, [sp, #16]
 800ab74:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800ab78:	601d      	str	r5, [r3, #0]
 800ab7a:	605c      	str	r4, [r3, #4]
 800ab7c:	609f      	str	r7, [r3, #8]
 800ab7e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800ab82:	60d3      	str	r3, [r2, #12]
 800ab84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab88:	6110      	str	r0, [r2, #16]
 800ab8a:	6153      	str	r3, [r2, #20]
 800ab8c:	e73a      	b.n	800aa04 <__kernel_rem_pio2+0x4ac>
 800ab8e:	bf00      	nop
 800ab90:	41700000 	.word	0x41700000
 800ab94:	3e700000 	.word	0x3e700000

0800ab98 <scalbn>:
 800ab98:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aba2:	4683      	mov	fp, r0
 800aba4:	468c      	mov	ip, r1
 800aba6:	460b      	mov	r3, r1
 800aba8:	b982      	cbnz	r2, 800abcc <scalbn+0x34>
 800abaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abae:	4303      	orrs	r3, r0
 800abb0:	d035      	beq.n	800ac1e <scalbn+0x86>
 800abb2:	4b2d      	ldr	r3, [pc, #180]	@ (800ac68 <scalbn+0xd0>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	f7f5 fc8f 	bl	80004d8 <__aeabi_dmul>
 800abba:	4b2c      	ldr	r3, [pc, #176]	@ (800ac6c <scalbn+0xd4>)
 800abbc:	4683      	mov	fp, r0
 800abbe:	429e      	cmp	r6, r3
 800abc0:	468c      	mov	ip, r1
 800abc2:	da0d      	bge.n	800abe0 <scalbn+0x48>
 800abc4:	a324      	add	r3, pc, #144	@ (adr r3, 800ac58 <scalbn+0xc0>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	e019      	b.n	800ac00 <scalbn+0x68>
 800abcc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800abd0:	42ba      	cmp	r2, r7
 800abd2:	d109      	bne.n	800abe8 <scalbn+0x50>
 800abd4:	4602      	mov	r2, r0
 800abd6:	f7f5 fac9 	bl	800016c <__adddf3>
 800abda:	4683      	mov	fp, r0
 800abdc:	468c      	mov	ip, r1
 800abde:	e01e      	b.n	800ac1e <scalbn+0x86>
 800abe0:	460b      	mov	r3, r1
 800abe2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abe6:	3a36      	subs	r2, #54	@ 0x36
 800abe8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800abec:	428e      	cmp	r6, r1
 800abee:	dd0a      	ble.n	800ac06 <scalbn+0x6e>
 800abf0:	a31b      	add	r3, pc, #108	@ (adr r3, 800ac60 <scalbn+0xc8>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	4665      	mov	r5, ip
 800abf8:	f363 051e 	bfi	r5, r3, #0, #31
 800abfc:	4629      	mov	r1, r5
 800abfe:	481c      	ldr	r0, [pc, #112]	@ (800ac70 <scalbn+0xd8>)
 800ac00:	f7f5 fc6a 	bl	80004d8 <__aeabi_dmul>
 800ac04:	e7e9      	b.n	800abda <scalbn+0x42>
 800ac06:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ac0a:	4432      	add	r2, r6
 800ac0c:	428a      	cmp	r2, r1
 800ac0e:	dcef      	bgt.n	800abf0 <scalbn+0x58>
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	dd08      	ble.n	800ac26 <scalbn+0x8e>
 800ac14:	f36f 531e 	bfc	r3, #20, #11
 800ac18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac1c:	46ac      	mov	ip, r5
 800ac1e:	4658      	mov	r0, fp
 800ac20:	4661      	mov	r1, ip
 800ac22:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ac26:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ac2a:	da09      	bge.n	800ac40 <scalbn+0xa8>
 800ac2c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ac30:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ac34:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ac38:	480e      	ldr	r0, [pc, #56]	@ (800ac74 <scalbn+0xdc>)
 800ac3a:	f041 011f 	orr.w	r1, r1, #31
 800ac3e:	e7c1      	b.n	800abc4 <scalbn+0x2c>
 800ac40:	3236      	adds	r2, #54	@ 0x36
 800ac42:	f36f 531e 	bfc	r3, #20, #11
 800ac46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac4a:	4658      	mov	r0, fp
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4b09      	ldr	r3, [pc, #36]	@ (800ac78 <scalbn+0xe0>)
 800ac52:	e7d5      	b.n	800ac00 <scalbn+0x68>
 800ac54:	f3af 8000 	nop.w
 800ac58:	c2f8f359 	.word	0xc2f8f359
 800ac5c:	01a56e1f 	.word	0x01a56e1f
 800ac60:	8800759c 	.word	0x8800759c
 800ac64:	7e37e43c 	.word	0x7e37e43c
 800ac68:	43500000 	.word	0x43500000
 800ac6c:	ffff3cb0 	.word	0xffff3cb0
 800ac70:	8800759c 	.word	0x8800759c
 800ac74:	c2f8f359 	.word	0xc2f8f359
 800ac78:	3c900000 	.word	0x3c900000
 800ac7c:	00000000 	.word	0x00000000

0800ac80 <floor>:
 800ac80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac84:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac88:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800ac8c:	2e13      	cmp	r6, #19
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	460c      	mov	r4, r1
 800ac94:	4605      	mov	r5, r0
 800ac96:	4680      	mov	r8, r0
 800ac98:	dc35      	bgt.n	800ad06 <floor+0x86>
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	da17      	bge.n	800acce <floor+0x4e>
 800ac9e:	a334      	add	r3, pc, #208	@ (adr r3, 800ad70 <floor+0xf0>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	f7f5 fa62 	bl	800016c <__adddf3>
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	f7f5 fea4 	bl	80009f8 <__aeabi_dcmpgt>
 800acb0:	b150      	cbz	r0, 800acc8 <floor+0x48>
 800acb2:	2c00      	cmp	r4, #0
 800acb4:	da57      	bge.n	800ad66 <floor+0xe6>
 800acb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800acba:	432c      	orrs	r4, r5
 800acbc:	2500      	movs	r5, #0
 800acbe:	42ac      	cmp	r4, r5
 800acc0:	4c2d      	ldr	r4, [pc, #180]	@ (800ad78 <floor+0xf8>)
 800acc2:	bf08      	it	eq
 800acc4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800acc8:	4623      	mov	r3, r4
 800acca:	462a      	mov	r2, r5
 800accc:	e024      	b.n	800ad18 <floor+0x98>
 800acce:	4f2b      	ldr	r7, [pc, #172]	@ (800ad7c <floor+0xfc>)
 800acd0:	4137      	asrs	r7, r6
 800acd2:	ea01 0c07 	and.w	ip, r1, r7
 800acd6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800acda:	d01d      	beq.n	800ad18 <floor+0x98>
 800acdc:	a324      	add	r3, pc, #144	@ (adr r3, 800ad70 <floor+0xf0>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	f7f5 fa43 	bl	800016c <__adddf3>
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	f7f5 fe85 	bl	80009f8 <__aeabi_dcmpgt>
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0ea      	beq.n	800acc8 <floor+0x48>
 800acf2:	2c00      	cmp	r4, #0
 800acf4:	bfbe      	ittt	lt
 800acf6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800acfa:	4133      	asrlt	r3, r6
 800acfc:	18e4      	addlt	r4, r4, r3
 800acfe:	2500      	movs	r5, #0
 800ad00:	ea24 0407 	bic.w	r4, r4, r7
 800ad04:	e7e0      	b.n	800acc8 <floor+0x48>
 800ad06:	2e33      	cmp	r6, #51	@ 0x33
 800ad08:	dd0a      	ble.n	800ad20 <floor+0xa0>
 800ad0a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ad0e:	d103      	bne.n	800ad18 <floor+0x98>
 800ad10:	f7f5 fa2c 	bl	800016c <__adddf3>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad20:	f04f 3cff 	mov.w	ip, #4294967295
 800ad24:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800ad28:	fa2c f707 	lsr.w	r7, ip, r7
 800ad2c:	4207      	tst	r7, r0
 800ad2e:	d0f3      	beq.n	800ad18 <floor+0x98>
 800ad30:	a30f      	add	r3, pc, #60	@ (adr r3, 800ad70 <floor+0xf0>)
 800ad32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad36:	f7f5 fa19 	bl	800016c <__adddf3>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f7f5 fe5b 	bl	80009f8 <__aeabi_dcmpgt>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d0c0      	beq.n	800acc8 <floor+0x48>
 800ad46:	2c00      	cmp	r4, #0
 800ad48:	da0a      	bge.n	800ad60 <floor+0xe0>
 800ad4a:	2e14      	cmp	r6, #20
 800ad4c:	d101      	bne.n	800ad52 <floor+0xd2>
 800ad4e:	3401      	adds	r4, #1
 800ad50:	e006      	b.n	800ad60 <floor+0xe0>
 800ad52:	2301      	movs	r3, #1
 800ad54:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ad58:	40b3      	lsls	r3, r6
 800ad5a:	441d      	add	r5, r3
 800ad5c:	4545      	cmp	r5, r8
 800ad5e:	d3f6      	bcc.n	800ad4e <floor+0xce>
 800ad60:	ea25 0507 	bic.w	r5, r5, r7
 800ad64:	e7b0      	b.n	800acc8 <floor+0x48>
 800ad66:	2500      	movs	r5, #0
 800ad68:	462c      	mov	r4, r5
 800ad6a:	e7ad      	b.n	800acc8 <floor+0x48>
 800ad6c:	f3af 8000 	nop.w
 800ad70:	8800759c 	.word	0x8800759c
 800ad74:	7e37e43c 	.word	0x7e37e43c
 800ad78:	bff00000 	.word	0xbff00000
 800ad7c:	000fffff 	.word	0x000fffff

0800ad80 <_init>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr

0800ad8c <_fini>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	bf00      	nop
 800ad90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad92:	bc08      	pop	{r3}
 800ad94:	469e      	mov	lr, r3
 800ad96:	4770      	bx	lr
