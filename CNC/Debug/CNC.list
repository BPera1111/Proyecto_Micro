
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800b9d0  0800b9d0  0000c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf84  0800bf84  0000d348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf84  0800bf84  0000cf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf8c  0800bf8c  0000d348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf8c  0800bf8c  0000cf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf90  0800bf90  0000cf90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800bf94  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000348  0800c2dc  0000d348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016f4  0800c2dc  0000d6f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d869  00000000  00000000  0000d371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc0  00000000  00000000  0001abda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0001d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000088d  00000000  00000000  0001e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a62e  00000000  00000000  0001ede5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f852  00000000  00000000  00039413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089363  00000000  00000000  00048c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1fc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004048  00000000  00000000  000d200c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d6054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9b8 	.word	0x0800b9b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800b9b8 	.word	0x0800b9b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fcmpun>:
 8000b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	d102      	bne.n	8000b50 <__aeabi_fcmpun+0x14>
 8000b4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b4e:	d108      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b54:	d102      	bne.n	8000b5c <__aeabi_fcmpun+0x20>
 8000b56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff59 	bl	8000a5c <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff4a 	bl	8000a5c <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  HAL_Init();
 8000bda:	f000 fe27 	bl	800182c <HAL_Init>
  SystemClock_Config();
 8000bde:	f000 f81d 	bl	8000c1c <SystemClock_Config>
  MX_GPIO_Init();
 8000be2:	f000 f877 	bl	8000cd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 8000be6:	f007 fa5f 	bl	80080a8 <MX_USB_DEVICE_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 8000bea:	f000 fc8f 	bl	800150c <setup>

  // Envío inicial
  uint8_t mensaje[] = "G-code listo\r\n";
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <main+0x44>)
 8000bf0:	463c      	mov	r4, r7
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf6:	8023      	strh	r3, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(mensaje, sizeof(mensaje) - 1);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	210e      	movs	r1, #14
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fb42 	bl	800828c <CDC_Transmit_FS>

  while (1)
  {
    // Equivalente al loop() de Arduino
    loop();
 8000c08:	f000 fb9a 	bl	8001340 <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 8000c0c:	2032      	movs	r0, #50	@ 0x32
 8000c0e:	f000 fe6f 	bl	80018f0 <HAL_Delay>
    loop();
 8000c12:	bf00      	nop
 8000c14:	e7f8      	b.n	8000c08 <main+0x34>
 8000c16:	bf00      	nop
 8000c18:	0800b9d0 	.word	0x0800b9d0

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2228      	movs	r2, #40	@ 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fe3b 	bl	80098a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fe82 	bl	800397c <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c7e:	f000 fc79 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 f8ee 	bl	8003e80 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000caa:	f000 fc63 	bl	8001574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cb6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fa3c 	bl	8004138 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cc6:	f000 fc55 	bl	8001574 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3750      	adds	r7, #80	@ 0x50
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 31d9 	movw	r1, #985	@ 0x3d9
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d38:	f001 f8a7 	bl	8001e8a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000d42:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d44:	f001 f8a1 	bl	8001e8a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d48:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8000d4c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d62:	f000 fef7 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d66:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d7c:	f000 feea 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d80:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d9a:	f000 fedb 	bl	8001b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010800 	.word	0x40010800

08000db4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <delay_us+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <delay_us+0x44>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9a      	lsrs	r2, r3, #18
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <delay_us+0x48>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000dd6:	bf00      	nop
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <delay_us+0x48>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d8f8      	bhi.n	8000dd8 <delay_us+0x24>
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000004 	.word	0x20000004
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	e0001000 	.word	0xe0001000

08000e00 <X_stepOnce>:

void X_stepOnce(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <X_stepOnce+0x24>)
 8000e0a:	f001 f83e 	bl	8001e8a <HAL_GPIO_WritePin>
    delay_us(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ffd0 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <X_stepOnce+0x24>)
 8000e1a:	f001 f836 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <Y_stepOnce>:

void Y_stepOnce(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e34:	f001 f829 	bl	8001e8a <HAL_GPIO_WritePin>
    delay_us(2);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff ffbb 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e46:	f001 f820 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <Z_stepOnce>:

void Z_stepOnce(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e60:	f001 f813 	bl	8001e8a <HAL_GPIO_WritePin>
    delay_us(2);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ffa5 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e72:	f001 f80a 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010800 	.word	0x40010800

08000e80 <X_move>:

void X_move(int32_t steps, bool dir) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <X_move+0x88>)
 8000e94:	f000 fff9 	bl	8001e8a <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00a      	beq.n	8000eb4 <X_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <X_move+0x88>)
 8000ea4:	f000 fff1 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <X_move+0x88>)
 8000eae:	f000 ffec 	bl	8001e8a <HAL_GPIO_WritePin>
 8000eb2:	e009      	b.n	8000ec8 <X_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <X_move+0x88>)
 8000eba:	f000 ffe6 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <X_move+0x88>)
 8000ec4:	f000 ffe1 	bl	8001e8a <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e009      	b.n	8000ee2 <X_move+0x62>
        X_stepOnce();
 8000ece:	f7ff ff97 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8000ed2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff6c 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf1      	blt.n	8000ece <X_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <X_move+0x88>)
 8000ef0:	f000 ffcb 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <X_move+0x88>)
 8000efa:	f000 ffc6 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <Y_move>:

void Y_move(int32_t steps, bool dir) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <Y_move+0x88>)
 8000f20:	f000 ffb3 	bl	8001e8a <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <Y_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <Y_move+0x88>)
 8000f30:	f000 ffab 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <Y_move+0x88>)
 8000f3a:	f000 ffa6 	bl	8001e8a <HAL_GPIO_WritePin>
 8000f3e:	e009      	b.n	8000f54 <Y_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <Y_move+0x88>)
 8000f46:	f000 ffa0 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <Y_move+0x88>)
 8000f50:	f000 ff9b 	bl	8001e8a <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e009      	b.n	8000f6e <Y_move+0x62>
        Y_stepOnce();
 8000f5a:	f7ff ff65 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8000f5e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff26 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf1      	blt.n	8000f5a <Y_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <Y_move+0x88>)
 8000f7c:	f000 ff85 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <Y_move+0x88>)
 8000f86:	f000 ff80 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <Z_move>:

void Z_move(int32_t steps, bool dir) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <Z_move+0x88>)
 8000fae:	f000 ff6c 	bl	8001e8a <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <Z_move+0x36>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4819      	ldr	r0, [pc, #100]	@ (8001024 <Z_move+0x8c>)
 8000fbe:	f000 ff64 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4817      	ldr	r0, [pc, #92]	@ (8001024 <Z_move+0x8c>)
 8000fc8:	f000 ff5f 	bl	8001e8a <HAL_GPIO_WritePin>
 8000fcc:	e009      	b.n	8000fe2 <Z_move+0x4a>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4814      	ldr	r0, [pc, #80]	@ (8001024 <Z_move+0x8c>)
 8000fd4:	f000 ff59 	bl	8001e8a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4811      	ldr	r0, [pc, #68]	@ (8001024 <Z_move+0x8c>)
 8000fde:	f000 ff54 	bl	8001e8a <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e009      	b.n	8000ffc <Z_move+0x64>
        Z_stepOnce();
 8000fe8:	f7ff ff34 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8000fec:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fedf 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf1      	blt.n	8000fe8 <Z_move+0x50>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <Z_move+0x8c>)
 800100a:	f000 ff3e 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2102      	movs	r1, #2
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <Z_move+0x8c>)
 8001014:	f000 ff39 	bl	8001e8a <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00

08001028 <extractParameter>:
void readUSBCommands(void) {
    // Esta función se implementará con callback de USB CDC
    // Por ahora vacía, se procesará en el callback
}

float extractParameter(const char* command, char param) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
    char* ptr = strchr(command, param);
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f008 fc3c 	bl	80098b6 <strchr>
 800103e:	60f8      	str	r0, [r7, #12]
    if (ptr) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <extractParameter+0x38>
        return atof(ptr + 1);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f007 fcfc 	bl	8008a48 <atof>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd20 	bl	8000a9c <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	e000      	b.n	8001062 <extractParameter+0x3a>
    }
    return NAN; // Not a Number
 8001060:	4b02      	ldr	r3, [pc, #8]	@ (800106c <extractParameter+0x44>)
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	7fc00000 	.word	0x7fc00000

08001070 <moveAxes>:

void moveAxes(float x, float y, float z) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b098      	sub	sp, #96	@ 0x60
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    // Convertir a pasos
    int32_t xSteps = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t ySteps = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
    int32_t zSteps = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	657b      	str	r3, [r7, #84]	@ 0x54
    bool xDir = true;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool yDir = true;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    bool zDir = true;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    
    if (!isnan(x)) {
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fd4d 	bl	8000b3c <__aeabi_fcmpun>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d121      	bne.n	80010ec <moveAxes+0x7c>
        // Calcular pasos relativos para el eje X
        int32_t targetX = x * (STEPS_PER_REV / 360.0); // Convertir a pasos
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff f9bd 	bl	8000428 <__aeabi_f2d>
 80010ae:	a370      	add	r3, pc, #448	@ (adr r3, 8001270 <moveAxes+0x200>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fca4 	bl	8000a0c <__aeabi_d2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        xSteps = targetX - currentX;
 80010c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001278 <moveAxes+0x208>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        xDir = (xSteps >= 0);
 80010d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d4:	43db      	mvns	r3, r3
 80010d6:	0fdb      	lsrs	r3, r3, #31
 80010d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        xSteps = abs(xSteps);
 80010dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bfb8      	it	lt
 80010e2:	425b      	neglt	r3, r3
 80010e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        currentX = targetX; // Actualizar posición actual
 80010e6:	4a64      	ldr	r2, [pc, #400]	@ (8001278 <moveAxes+0x208>)
 80010e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ea:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(y)) {
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff fd24 	bl	8000b3c <__aeabi_fcmpun>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d121      	bne.n	800113e <moveAxes+0xce>
        // Calcular pasos relativos para el eje Y
        int32_t targetY = y * (STEPS_PER_REV / 360.0); // Convertir a pasos
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f7ff f994 	bl	8000428 <__aeabi_f2d>
 8001100:	a35b      	add	r3, pc, #364	@ (adr r3, 8001270 <moveAxes+0x200>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff f9e7 	bl	80004d8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fc7b 	bl	8000a0c <__aeabi_d2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
        ySteps = targetY - currentY;
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <moveAxes+0x20c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	65bb      	str	r3, [r7, #88]	@ 0x58
        yDir = (ySteps >= 0);
 8001124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001126:	43db      	mvns	r3, r3
 8001128:	0fdb      	lsrs	r3, r3, #31
 800112a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        ySteps = abs(ySteps);
 800112e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001130:	2b00      	cmp	r3, #0
 8001132:	bfb8      	it	lt
 8001134:	425b      	neglt	r3, r3
 8001136:	65bb      	str	r3, [r7, #88]	@ 0x58
        currentY = targetY; // Actualizar posición actual
 8001138:	4a50      	ldr	r2, [pc, #320]	@ (800127c <moveAxes+0x20c>)
 800113a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800113c:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(z)) {
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fcfb 	bl	8000b3c <__aeabi_fcmpun>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <moveAxes+0x120>
        // Calcular pasos relativos para el eje Z
        int32_t targetZ = z * (STEPS_PER_REV / 360.0); // Convertir a pasos
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f96b 	bl	8000428 <__aeabi_f2d>
 8001152:	a347      	add	r3, pc, #284	@ (adr r3, 8001270 <moveAxes+0x200>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff f9be 	bl	80004d8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc52 	bl	8000a0c <__aeabi_d2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
        zSteps = targetZ - currentZ;
 800116c:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <moveAxes+0x210>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	657b      	str	r3, [r7, #84]	@ 0x54
        zDir = (zSteps >= 0);
 8001176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001178:	43db      	mvns	r3, r3
 800117a:	0fdb      	lsrs	r3, r3, #31
 800117c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        zSteps = abs(zSteps);
 8001180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	657b      	str	r3, [r7, #84]	@ 0x54
        currentZ = targetZ; // Actualizar posición actual
 800118a:	4a3d      	ldr	r2, [pc, #244]	@ (8001280 <moveAxes+0x210>)
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	6013      	str	r3, [r2, #0]
    }
    
    // Mover los motores
    if (xSteps > 0) {
 8001190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd1f      	ble.n	80011d6 <moveAxes+0x166>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo X: %ld pasos, dir: %s\r\n", xSteps, xDir ? "horario" : "antihorario");
 8001196:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <moveAxes+0x132>
 800119e:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <moveAxes+0x214>)
 80011a0:	e000      	b.n	80011a4 <moveAxes+0x134>
 80011a2:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <moveAxes+0x218>)
 80011a4:	f107 0010 	add.w	r0, r7, #16
 80011a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011aa:	4938      	ldr	r1, [pc, #224]	@ (800128c <moveAxes+0x21c>)
 80011ac:	f008 fb16 	bl	80097dc <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7fe ffcb 	bl	8000150 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f007 f861 	bl	800828c <CDC_Transmit_FS>
        X_move(xSteps, xDir);
 80011ca:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80011ce:	4619      	mov	r1, r3
 80011d0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80011d2:	f7ff fe55 	bl	8000e80 <X_move>
    }
    
    if (ySteps > 0) {
 80011d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd1f      	ble.n	800121c <moveAxes+0x1ac>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Y: %ld pasos, dir: %s\r\n", ySteps, yDir ? "horario" : "antihorario");
 80011dc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <moveAxes+0x178>
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <moveAxes+0x214>)
 80011e6:	e000      	b.n	80011ea <moveAxes+0x17a>
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <moveAxes+0x218>)
 80011ea:	f107 0010 	add.w	r0, r7, #16
 80011ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011f0:	4927      	ldr	r1, [pc, #156]	@ (8001290 <moveAxes+0x220>)
 80011f2:	f008 faf3 	bl	80097dc <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7fe ffa8 	bl	8000150 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f007 f83e 	bl	800828c <CDC_Transmit_FS>
        Y_move(ySteps, yDir);
 8001210:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001214:	4619      	mov	r1, r3
 8001216:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001218:	f7ff fe78 	bl	8000f0c <Y_move>
    }
    
    if (zSteps > 0) {
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	2b00      	cmp	r3, #0
 8001220:	dd1f      	ble.n	8001262 <moveAxes+0x1f2>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Z: %ld pasos, dir: %s\r\n", zSteps, zDir ? "horario" : "antihorario");
 8001222:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <moveAxes+0x1be>
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <moveAxes+0x214>)
 800122c:	e000      	b.n	8001230 <moveAxes+0x1c0>
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <moveAxes+0x218>)
 8001230:	f107 0010 	add.w	r0, r7, #16
 8001234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001236:	4917      	ldr	r1, [pc, #92]	@ (8001294 <moveAxes+0x224>)
 8001238:	f008 fad0 	bl	80097dc <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f7fe ff85 	bl	8000150 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f007 f81b 	bl	800828c <CDC_Transmit_FS>
        Z_move(zSteps, zDir);
 8001256:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800125a:	4619      	mov	r1, r3
 800125c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800125e:	f7ff fe9b 	bl	8000f98 <Z_move>
    }
}
 8001262:	bf00      	nop
 8001264:	3760      	adds	r7, #96	@ 0x60
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	8e38e38e 	.word	0x8e38e38e
 8001274:	401638e3 	.word	0x401638e3
 8001278:	20000364 	.word	0x20000364
 800127c:	20000368 	.word	0x20000368
 8001280:	2000036c 	.word	0x2000036c
 8001284:	0800b9e0 	.word	0x0800b9e0
 8001288:	0800b9e8 	.word	0x0800b9e8
 800128c:	0800b9f4 	.word	0x0800b9f4
 8001290:	0800ba18 	.word	0x0800ba18
 8001294:	0800ba3c 	.word	0x0800ba3c

08001298 <processGcode>:

void processGcode(const char* command) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b09e      	sub	sp, #120	@ 0x78
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    // Enviar comando procesado
    char msg[100];
    sprintf(msg, "Procesando: %s\r\n", command);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4921      	ldr	r1, [pc, #132]	@ (800132c <processGcode+0x94>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 fa97 	bl	80097dc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 ffe2 	bl	800828c <CDC_Transmit_FS>
    
    // Procesar comando G0 o G1
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80012c8:	2202      	movs	r2, #2
 80012ca:	4919      	ldr	r1, [pc, #100]	@ (8001330 <processGcode+0x98>)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f008 faff 	bl	80098d0 <strncmp>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <processGcode+0x50>
 80012d8:	2202      	movs	r2, #2
 80012da:	4916      	ldr	r1, [pc, #88]	@ (8001334 <processGcode+0x9c>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f008 faf7 	bl	80098d0 <strncmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <processGcode+0x82>
        // Procesar movimiento
        float xPos = extractParameter(command, 'X');
 80012e8:	2158      	movs	r1, #88	@ 0x58
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe9c 	bl	8001028 <extractParameter>
 80012f0:	6778      	str	r0, [r7, #116]	@ 0x74
        float yPos = extractParameter(command, 'Y');
 80012f2:	2159      	movs	r1, #89	@ 0x59
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe97 	bl	8001028 <extractParameter>
 80012fa:	6738      	str	r0, [r7, #112]	@ 0x70
        float zPos = extractParameter(command, 'Z');
 80012fc:	215a      	movs	r1, #90	@ 0x5a
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fe92 	bl	8001028 <extractParameter>
 8001304:	66f8      	str	r0, [r7, #108]	@ 0x6c
        
        // Mover los ejes
        moveAxes(xPos, yPos, zPos);
 8001306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001308:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800130a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800130c:	f7ff feb0 	bl	8001070 <moveAxes>
        
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 8001310:	2104      	movs	r1, #4
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <processGcode+0xa0>)
 8001314:	f006 ffba 	bl	800828c <CDC_Transmit_FS>
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 8001318:	e004      	b.n	8001324 <processGcode+0x8c>
    } else {
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
 800131a:	2117      	movs	r1, #23
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <processGcode+0xa4>)
 800131e:	f006 ffb5 	bl	800828c <CDC_Transmit_FS>
    }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3778      	adds	r7, #120	@ 0x78
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0800ba60 	.word	0x0800ba60
 8001330:	0800ba74 	.word	0x0800ba74
 8001334:	0800ba78 	.word	0x0800ba78
 8001338:	0800ba7c 	.word	0x0800ba7c
 800133c:	0800ba84 	.word	0x0800ba84

08001340 <loop>:

void loop(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b0a0      	sub	sp, #128	@ 0x80
 8001344:	af00      	add	r7, sp, #0
    static uint32_t lastEndstopCheck = 0;
    static bool endstopXWasPressed = false; 
    static bool endstopYWasPressed = false;
    static bool endstopZWasPressed = false;
    
    uint32_t currentTime = HAL_GetTick();
 8001346:	f000 fac9 	bl	80018dc <HAL_GetTick>
 800134a:	67f8      	str	r0, [r7, #124]	@ 0x7c
    
    // Verificar fines de carrera solo cada 10ms para evitar spam
    if (currentTime - lastEndstopCheck > 10) {
 800134c:	4b60      	ldr	r3, [pc, #384]	@ (80014d0 <loop+0x190>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b0a      	cmp	r3, #10
 8001356:	f240 8096 	bls.w	8001486 <loop+0x146>
        lastEndstopCheck = currentTime;
 800135a:	4a5d      	ldr	r2, [pc, #372]	@ (80014d0 <loop+0x190>)
 800135c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800135e:	6013      	str	r3, [r2, #0]
        
        // Fin de carrera X - solo mensaje cuando cambia de estado
        bool endstopX = (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001360:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001364:	485b      	ldr	r0, [pc, #364]	@ (80014d4 <loop+0x194>)
 8001366:	f000 fd79 	bl	8001e5c <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        if (endstopX && !endstopXWasPressed) {
 8001378:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <loop+0x5e>
 8001380:	4b55      	ldr	r3, [pc, #340]	@ (80014d8 <loop+0x198>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <loop+0x5e>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X activado\r\n", 27);
 800138e:	211b      	movs	r1, #27
 8001390:	4852      	ldr	r0, [pc, #328]	@ (80014dc <loop+0x19c>)
 8001392:	f006 ff7b 	bl	800828c <CDC_Transmit_FS>
            // Opcional: detener motor X o hacer homing
            // X_move(100, false); // Retroceder 100 pasos
            endstopXWasPressed = true;
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <loop+0x198>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e011      	b.n	80013c2 <loop+0x82>
        } else if (!endstopX && endstopXWasPressed) {
 800139e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00a      	beq.n	80013c2 <loop+0x82>
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <loop+0x198>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <loop+0x82>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X desactivado\r\n", 30);
 80013b4:	211e      	movs	r1, #30
 80013b6:	484a      	ldr	r0, [pc, #296]	@ (80014e0 <loop+0x1a0>)
 80013b8:	f006 ff68 	bl	800828c <CDC_Transmit_FS>
            endstopXWasPressed = false;
 80013bc:	4b46      	ldr	r3, [pc, #280]	@ (80014d8 <loop+0x198>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Y
        bool endstopY = (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 80013c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013c6:	4843      	ldr	r0, [pc, #268]	@ (80014d4 <loop+0x194>)
 80013c8:	f000 fd48 	bl	8001e5c <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
        if (endstopY && !endstopYWasPressed) {
 80013da:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00e      	beq.n	8001400 <loop+0xc0>
 80013e2:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <loop+0x1a4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <loop+0xc0>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y activado\r\n", 27);
 80013f0:	211b      	movs	r1, #27
 80013f2:	483d      	ldr	r0, [pc, #244]	@ (80014e8 <loop+0x1a8>)
 80013f4:	f006 ff4a 	bl	800828c <CDC_Transmit_FS>
            endstopYWasPressed = true;
 80013f8:	4b3a      	ldr	r3, [pc, #232]	@ (80014e4 <loop+0x1a4>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	e011      	b.n	8001424 <loop+0xe4>
        } else if (!endstopY && endstopYWasPressed) {
 8001400:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <loop+0xe4>
 800140e:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <loop+0x1a4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <loop+0xe4>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y desactivado\r\n", 30);
 8001416:	211e      	movs	r1, #30
 8001418:	4834      	ldr	r0, [pc, #208]	@ (80014ec <loop+0x1ac>)
 800141a:	f006 ff37 	bl	800828c <CDC_Transmit_FS>
            endstopYWasPressed = false;
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <loop+0x1a4>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Z
        bool endstopZ = (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001428:	482a      	ldr	r0, [pc, #168]	@ (80014d4 <loop+0x194>)
 800142a:	f000 fd17 	bl	8001e5c <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
        if (endstopZ && !endstopZWasPressed) {
 800143c:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00e      	beq.n	8001462 <loop+0x122>
 8001444:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <loop+0x1b0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f083 0301 	eor.w	r3, r3, #1
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <loop+0x122>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z activado\r\n", 27);
 8001452:	211b      	movs	r1, #27
 8001454:	4827      	ldr	r0, [pc, #156]	@ (80014f4 <loop+0x1b4>)
 8001456:	f006 ff19 	bl	800828c <CDC_Transmit_FS>
            endstopZWasPressed = true;
 800145a:	4b25      	ldr	r3, [pc, #148]	@ (80014f0 <loop+0x1b0>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e011      	b.n	8001486 <loop+0x146>
        } else if (!endstopZ && endstopZWasPressed) {
 8001462:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8001466:	f083 0301 	eor.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00a      	beq.n	8001486 <loop+0x146>
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <loop+0x1b0>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <loop+0x146>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z desactivado\r\n", 30);
 8001478:	211e      	movs	r1, #30
 800147a:	481f      	ldr	r0, [pc, #124]	@ (80014f8 <loop+0x1b8>)
 800147c:	f006 ff06 	bl	800828c <CDC_Transmit_FS>
            endstopZWasPressed = false;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <loop+0x1b0>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
        }
    }

    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <loop+0x1bc>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01b      	beq.n	80014c6 <loop+0x186>
        #if DEBUG_MESSAGES
        // Debug: confirmar que llegó el comando (buffer más grande para evitar warning)
        char debugMsg[120];
        sprintf(debugMsg, ">>> [%s]\r\n", usbBuffer);
 800148e:	463b      	mov	r3, r7
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <loop+0x1c0>)
 8001492:	491c      	ldr	r1, [pc, #112]	@ (8001504 <loop+0x1c4>)
 8001494:	4618      	mov	r0, r3
 8001496:	f008 f9a1 	bl	80097dc <siprintf>
        CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
 800149a:	463b      	mov	r3, r7
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fe57 	bl	8000150 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	463b      	mov	r3, r7
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 feee 	bl	800828c <CDC_Transmit_FS>
        #endif
        
        processGcode(usbBuffer);
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <loop+0x1c0>)
 80014b2:	f7ff fef1 	bl	8001298 <processGcode>
        
        // IMPORTANTE: Resetear todo después de procesar
        usbBufferIndex = 0;
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <loop+0x1c8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 80014bc:	2264      	movs	r2, #100	@ 0x64
 80014be:	2100      	movs	r1, #0
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <loop+0x1c0>)
 80014c2:	f008 f9f0 	bl	80098a6 <memset>
    }
}
 80014c6:	bf00      	nop
 80014c8:	3780      	adds	r7, #128	@ 0x80
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200003d8 	.word	0x200003d8
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	200003dc 	.word	0x200003dc
 80014dc:	0800ba9c 	.word	0x0800ba9c
 80014e0:	0800bab8 	.word	0x0800bab8
 80014e4:	200003dd 	.word	0x200003dd
 80014e8:	0800bad8 	.word	0x0800bad8
 80014ec:	0800baf4 	.word	0x0800baf4
 80014f0:	200003de 	.word	0x200003de
 80014f4:	0800bb14 	.word	0x0800bb14
 80014f8:	0800bb30 	.word	0x0800bb30
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000370 	.word	0x20000370
 8001504:	0800bb50 	.word	0x0800bb50
 8001508:	200003d4 	.word	0x200003d4

0800150c <setup>:

void setup(void) {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <setup+0x58>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <setup+0x58>)
 8001516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800151a:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <setup+0x5c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <setup+0x5c>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Habilita driver X
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800152e:	480f      	ldr	r0, [pc, #60]	@ (800156c <setup+0x60>)
 8001530:	f000 fcab 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Y
 8001534:	2200      	movs	r2, #0
 8001536:	2110      	movs	r1, #16
 8001538:	480c      	ldr	r0, [pc, #48]	@ (800156c <setup+0x60>)
 800153a:	f000 fca6 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Z
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001544:	480a      	ldr	r0, [pc, #40]	@ (8001570 <setup+0x64>)
 8001546:	f000 fca0 	bl	8001e8a <HAL_GPIO_WritePin>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2101      	movs	r1, #1
 800154e:	4807      	ldr	r0, [pc, #28]	@ (800156c <setup+0x60>)
 8001550:	f000 fc9b 	bl	8001e8a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <setup+0x60>)
 800155a:	f000 fc96 	bl	8001e8a <HAL_GPIO_WritePin>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000edf0 	.word	0xe000edf0
 8001568:	e0001000 	.word	0xe0001000
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40010800 	.word	0x40010800

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_MspInit+0x5c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <HAL_MspInit+0x5c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <HAL_MspInit+0x5c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <HAL_MspInit+0x5c>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_MspInit+0x60>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_MspInit+0x60>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010000 	.word	0x40010000

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x4>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f940 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001642:	f000 fd56 	bl	80020f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200010b0 	.word	0x200010b0

08001650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <_kill>:

int _kill(int pid, int sig)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001668:	f008 f98a 	bl	8009980 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	2216      	movs	r2, #22
 8001670:	601a      	str	r2, [r3, #0]
  return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_exit>:

void _exit (int status)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001686:	f04f 31ff 	mov.w	r1, #4294967295
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffe7 	bl	800165e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <_exit+0x12>

08001694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00a      	b.n	80016bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a6:	f3af 8000 	nop.w
 80016aa:	4601      	mov	r1, r0
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf0      	blt.n	80016a6 <_read+0x12>
  }

  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e009      	b.n	80016f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf1      	blt.n	80016e0 <_write+0x12>
  }
  return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <_close>:

int _close(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172c:	605a      	str	r2, [r3, #4]
  return 0;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f008 f8f2 	bl	8009980 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20005000 	.word	0x20005000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	200003e0 	.word	0x200003e0
 80017d0:	200016f8 	.word	0x200016f8

080017d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e0:	f7ff fff8 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480b      	ldr	r0, [pc, #44]	@ (8001814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017e6:	490c      	ldr	r1, [pc, #48]	@ (8001818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a09      	ldr	r2, [pc, #36]	@ (8001820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017fc:	4c09      	ldr	r4, [pc, #36]	@ (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180a:	f008 f8bf 	bl	800998c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800180e:	f7ff f9e1 	bl	8000bd4 <main>
  bx lr
 8001812:	4770      	bx	lr
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 800181c:	0800bf94 	.word	0x0800bf94
  ldr r2, =_sbss
 8001820:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001824:	200016f4 	.word	0x200016f4

08001828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC1_2_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x28>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x28>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f947 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fe9a 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40022000 	.word	0x40022000

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f95f 	bl	8001b3a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f927 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000004 	.word	0x20000004
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_IncTick+0x1c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_IncTick+0x20>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a03      	ldr	r2, [pc, #12]	@ (80018d8 <HAL_IncTick+0x20>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	200003e4 	.word	0x200003e4

080018dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b02      	ldr	r3, [pc, #8]	@ (80018ec <HAL_GetTick+0x10>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	200003e4 	.word	0x200003e4

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff fff0 	bl	80018dc <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffe0 	bl	80018dc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000000c 	.word	0x2000000c

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4906      	ldr	r1, [pc, #24]	@ (80019d0 <__NVIC_EnableIRQ+0x34>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff90 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff2d 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff42 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff90 	bl	8001a28 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5f 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff35 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffa2 	bl	8001a8c <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b08b      	sub	sp, #44	@ 0x2c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e169      	b.n	8001e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8158 	bne.w	8001e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a9a      	ldr	r2, [pc, #616]	@ (8001df4 <HAL_GPIO_Init+0x2a0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d05e      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
 8001b90:	4a98      	ldr	r2, [pc, #608]	@ (8001df4 <HAL_GPIO_Init+0x2a0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d875      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001b96:	4a98      	ldr	r2, [pc, #608]	@ (8001df8 <HAL_GPIO_Init+0x2a4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d058      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
 8001b9c:	4a96      	ldr	r2, [pc, #600]	@ (8001df8 <HAL_GPIO_Init+0x2a4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d86f      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001ba2:	4a96      	ldr	r2, [pc, #600]	@ (8001dfc <HAL_GPIO_Init+0x2a8>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d052      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
 8001ba8:	4a94      	ldr	r2, [pc, #592]	@ (8001dfc <HAL_GPIO_Init+0x2a8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d869      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001bae:	4a94      	ldr	r2, [pc, #592]	@ (8001e00 <HAL_GPIO_Init+0x2ac>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d04c      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
 8001bb4:	4a92      	ldr	r2, [pc, #584]	@ (8001e00 <HAL_GPIO_Init+0x2ac>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d863      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001bba:	4a92      	ldr	r2, [pc, #584]	@ (8001e04 <HAL_GPIO_Init+0x2b0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d046      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
 8001bc0:	4a90      	ldr	r2, [pc, #576]	@ (8001e04 <HAL_GPIO_Init+0x2b0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d85d      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d82a      	bhi.n	8001c20 <HAL_GPIO_Init+0xcc>
 8001bca:	2b12      	cmp	r3, #18
 8001bcc:	d859      	bhi.n	8001c82 <HAL_GPIO_Init+0x12e>
 8001bce:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd4 <HAL_GPIO_Init+0x80>)
 8001bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd4:	08001c4f 	.word	0x08001c4f
 8001bd8:	08001c29 	.word	0x08001c29
 8001bdc:	08001c3b 	.word	0x08001c3b
 8001be0:	08001c7d 	.word	0x08001c7d
 8001be4:	08001c83 	.word	0x08001c83
 8001be8:	08001c83 	.word	0x08001c83
 8001bec:	08001c83 	.word	0x08001c83
 8001bf0:	08001c83 	.word	0x08001c83
 8001bf4:	08001c83 	.word	0x08001c83
 8001bf8:	08001c83 	.word	0x08001c83
 8001bfc:	08001c83 	.word	0x08001c83
 8001c00:	08001c83 	.word	0x08001c83
 8001c04:	08001c83 	.word	0x08001c83
 8001c08:	08001c83 	.word	0x08001c83
 8001c0c:	08001c83 	.word	0x08001c83
 8001c10:	08001c83 	.word	0x08001c83
 8001c14:	08001c83 	.word	0x08001c83
 8001c18:	08001c31 	.word	0x08001c31
 8001c1c:	08001c45 	.word	0x08001c45
 8001c20:	4a79      	ldr	r2, [pc, #484]	@ (8001e08 <HAL_GPIO_Init+0x2b4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c26:	e02c      	b.n	8001c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	623b      	str	r3, [r7, #32]
          break;
 8001c2e:	e029      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	3304      	adds	r3, #4
 8001c36:	623b      	str	r3, [r7, #32]
          break;
 8001c38:	e024      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e01f      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e01a      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c56:	2304      	movs	r3, #4
 8001c58:	623b      	str	r3, [r7, #32]
          break;
 8001c5a:	e013      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c64:	2308      	movs	r3, #8
 8001c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	611a      	str	r2, [r3, #16]
          break;
 8001c6e:	e009      	b.n	8001c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	615a      	str	r2, [r3, #20]
          break;
 8001c7a:	e003      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x130>
          break;
 8001c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2bff      	cmp	r3, #255	@ 0xff
 8001c88:	d801      	bhi.n	8001c8e <HAL_GPIO_Init+0x13a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_Init+0x13e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2bff      	cmp	r3, #255	@ 0xff
 8001c98:	d802      	bhi.n	8001ca0 <HAL_GPIO_Init+0x14c>
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x152>
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	3b08      	subs	r3, #8
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	210f      	movs	r1, #15
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	6a39      	ldr	r1, [r7, #32]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80b1 	beq.w	8001e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8001e0c <HAL_GPIO_Init+0x2b8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cec:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <HAL_GPIO_Init+0x2bc>)
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <HAL_GPIO_Init+0x2c0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e18 <HAL_GPIO_Init+0x2c4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00d      	beq.n	8001d3c <HAL_GPIO_Init+0x1e8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a3e      	ldr	r2, [pc, #248]	@ (8001e1c <HAL_GPIO_Init+0x2c8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <HAL_GPIO_Init+0x1e4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e20 <HAL_GPIO_Init+0x2cc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_GPIO_Init+0x1e0>
 8001d30:	2303      	movs	r3, #3
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d34:	2304      	movs	r3, #4
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d40:	2300      	movs	r3, #0
 8001d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d52:	492f      	ldr	r1, [pc, #188]	@ (8001e10 <HAL_GPIO_Init+0x2bc>)
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	492c      	ldr	r1, [pc, #176]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4928      	ldr	r1, [pc, #160]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d94:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4922      	ldr	r1, [pc, #136]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	491e      	ldr	r1, [pc, #120]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4918      	ldr	r1, [pc, #96]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dca:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4914      	ldr	r1, [pc, #80]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d021      	beq.n	8001e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	490e      	ldr	r1, [pc, #56]	@ (8001e24 <HAL_GPIO_Init+0x2d0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e021      	b.n	8001e36 <HAL_GPIO_Init+0x2e2>
 8001df2:	bf00      	nop
 8001df4:	10320000 	.word	0x10320000
 8001df8:	10310000 	.word	0x10310000
 8001dfc:	10220000 	.word	0x10220000
 8001e00:	10210000 	.word	0x10210000
 8001e04:	10120000 	.word	0x10120000
 8001e08:	10110000 	.word	0x10110000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40010800 	.word	0x40010800
 8001e18:	40010c00 	.word	0x40010c00
 8001e1c:	40011000 	.word	0x40011000
 8001e20:	40011400 	.word	0x40011400
 8001e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4909      	ldr	r1, [pc, #36]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	3301      	adds	r3, #1
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f47f ae8e 	bne.w	8001b68 <HAL_GPIO_Init+0x14>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	372c      	adds	r7, #44	@ 0x2c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	807b      	strh	r3, [r7, #2]
 8001e96:	4613      	mov	r3, r2
 8001e98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9a:	787b      	ldrb	r3, [r7, #1]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ea6:	e003      	b.n	8001eb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0e8      	b.n	800209e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f006 fb07 	bl	80084f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f9f6 	bl	80042ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f08:	f002 f9cc 	bl	80042a4 <USB_CoreInit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0bf      	b.n	800209e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f002 f9fa 	bl	800431e <USB_SetCurrentMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b0      	b.n	800209e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e03e      	b.n	8001fc0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	3311      	adds	r3, #17
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3310      	adds	r3, #16
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	3313      	adds	r3, #19
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3324      	adds	r3, #36	@ 0x24
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3bb      	bcc.n	8001f42 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	e044      	b.n	800205a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	3301      	adds	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3b5      	bcc.n	8001fd0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206e:	f002 f962 	bl	8004336 <USB_DevInit>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e00c      	b.n	800209e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fbe1 	bl	800685e <USB_DevDisconnect>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_PCD_Start+0x16>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e016      	b.n	80020ea <HAL_PCD_Start+0x44>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f8f8 	bl	80042be <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020ce:	2101      	movs	r1, #1
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f006 fc82 	bl	80089da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fbb5 	bl	800684a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b088      	sub	sp, #32
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fbb7 	bl	8006872 <USB_ReadInterrupts>
 8002104:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb1a 	bl	800274a <PCD_EP_ISR_Handler>

    return;
 8002116:	e119      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002134:	b292      	uxth	r2, r2
 8002136:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f006 fa55 	bl	80085ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f905 	bl	8002352 <HAL_PCD_SetAddress>

    return;
 8002148:	e100      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002166:	b292      	uxth	r2, r2
 8002168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800216c:	e0ee      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800218a:	b292      	uxth	r2, r2
 800218c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002190:	e0dc      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d027      	beq.n	80021ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	b292      	uxth	r2, r2
 80021b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0208 	bic.w	r2, r2, #8
 80021c6:	b292      	uxth	r2, r2
 80021c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 fa45 	bl	800865c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021e4:	b292      	uxth	r2, r2
 80021e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021ea:	e0af      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8083 	beq.w	80022fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	e010      	b.n	8002220 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	7ffb      	ldrb	r3, [r7, #31]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	7ffb      	ldrb	r3, [r7, #31]
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	b292      	uxth	r2, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	3320      	adds	r3, #32
 8002214:	443b      	add	r3, r7
 8002216:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	3301      	adds	r3, #1
 800221e:	77fb      	strb	r3, [r7, #31]
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9eb      	bls.n	80021fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	b292      	uxth	r2, r2
 800223a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	b292      	uxth	r2, r2
 8002252:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002256:	bf00      	nop
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002260:	b29b      	uxth	r3, r3
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f6      	beq.n	8002258 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e00f      	b.n	80022a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4611      	mov	r1, r2
 8002290:	7ffa      	ldrb	r2, [r7, #31]
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	440a      	add	r2, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3320      	adds	r3, #32
 800229a:	443b      	add	r3, r7
 800229c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80022a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	3301      	adds	r3, #1
 80022a6:	77fb      	strb	r3, [r7, #31]
 80022a8:	7ffb      	ldrb	r3, [r7, #31]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d9ec      	bls.n	8002288 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	b292      	uxth	r2, r2
 80022c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	b292      	uxth	r2, r2
 80022f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f006 f996 	bl	8008628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022fc:	e026      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800231a:	b292      	uxth	r2, r2
 800231c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f006 f954 	bl	80085ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002326:	e011      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002344:	b292      	uxth	r2, r2
 8002346:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800234a:	bf00      	nop
  }
}
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_SetAddress+0x1a>
 8002368:	2302      	movs	r3, #2
 800236a:	e012      	b.n	8002392 <HAL_PCD_SetAddress+0x40>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fa4e 	bl	8006824 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	461a      	mov	r2, r3
 80023a8:	4603      	mov	r3, r0
 80023aa:	70fb      	strb	r3, [r7, #3]
 80023ac:	460b      	mov	r3, r1
 80023ae:	803b      	strh	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da0e      	bge.n	80023de <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	3310      	adds	r3, #16
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	705a      	strb	r2, [r3, #1]
 80023dc:	e00e      	b.n	80023fc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0207 	and.w	r2, r3, #7
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	b2da      	uxtb	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002408:	883a      	ldrh	r2, [r7, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	78ba      	ldrb	r2, [r7, #2]
 8002412:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002414:	78bb      	ldrb	r3, [r7, #2]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d102      	bne.n	8002420 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_PCD_EP_Open+0x94>
 800242a:	2302      	movs	r3, #2
 800242c:	e00e      	b.n	800244c <HAL_PCD_EP_Open+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f001 ff97 	bl	8004370 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800244a:	7afb      	ldrb	r3, [r7, #11]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da0e      	bge.n	8002486 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0207 	and.w	r2, r3, #7
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	3310      	adds	r3, #16
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	705a      	strb	r2, [r3, #1]
 8002484:	e00e      	b.n	80024a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 0207 	and.w	r2, r3, #7
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_PCD_EP_Close+0x6a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e00e      	b.n	80024dc <HAL_PCD_EP_Close+0x88>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fb0f 	bl	8004af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	460b      	mov	r3, r1
 80024f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	f003 0207 	and.w	r2, r3, #7
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	b2da      	uxtb	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fcc6 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0207 	and.w	r2, r3, #7
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002568:	681b      	ldr	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	f003 0207 	and.w	r2, r3, #7
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	3310      	adds	r3, #16
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2201      	movs	r2, #1
 80025be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fc78 	bl	8004ec8 <USB_EPStartXfer>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	7912      	ldrb	r2, [r2, #4]
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e04c      	b.n	800269a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	da0e      	bge.n	8002626 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	3310      	adds	r3, #16
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	705a      	strb	r2, [r3, #1]
 8002624:	e00c      	b.n	8002640 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_PCD_EP_SetStall+0x7e>
 800265c:	2302      	movs	r3, #2
 800265e:	e01c      	b.n	800269a <HAL_PCD_EP_SetStall+0xb8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68f9      	ldr	r1, [r7, #12]
 800266e:	4618      	mov	r0, r3
 8002670:	f003 ffdb 	bl	800662a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f004 f900 	bl	8006890 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	460b      	mov	r3, r1
 80026ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026ae:	78fb      	ldrb	r3, [r7, #3]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	7912      	ldrb	r2, [r2, #4]
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e040      	b.n	8002742 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da0e      	bge.n	80026e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0207 	and.w	r2, r3, #7
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	3310      	adds	r3, #16
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
 80026e4:	e00e      	b.n	8002704 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 0207 	and.w	r2, r3, #7
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_PCD_EP_ClrStall+0x82>
 8002720:	2302      	movs	r3, #2
 8002722:	e00e      	b.n	8002742 <HAL_PCD_EP_ClrStall+0xa0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 ffc9 	bl	80066ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b096      	sub	sp, #88	@ 0x58
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002752:	e3bb      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800276e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 8175 	bne.w	8002a62 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d14e      	bne.n	8002822 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002794:	81fb      	strh	r3, [r7, #14]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3310      	adds	r3, #16
 80027ac:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	3302      	adds	r3, #2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	441a      	add	r2, r3
 80027e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f005 fed5 	bl	800859a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7b5b      	ldrb	r3, [r3, #13]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8368 	beq.w	8002ecc <PCD_EP_ISR_Handler+0x782>
 80027fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f040 8363 	bne.w	8002ecc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7b5b      	ldrb	r3, [r3, #13]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002810:	b2da      	uxtb	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	735a      	strb	r2, [r3, #13]
 8002820:	e354      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002828:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002834:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d034      	beq.n	80028aa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002848:	b29b      	uxth	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	3306      	adds	r3, #6
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002878:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800287a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800287c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800287e:	b29b      	uxth	r3, r3
 8002880:	f004 f857 	bl	8006932 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002890:	4013      	ands	r3, r2
 8002892:	823b      	strh	r3, [r7, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	8a3a      	ldrh	r2, [r7, #16]
 800289a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800289e:	b292      	uxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f005 fe4c 	bl	8008540 <HAL_PCD_SetupStageCallback>
 80028a8:	e310      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f280 830c 	bge.w	8002ecc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80028c0:	4013      	ands	r3, r2
 80028c2:	83fb      	strh	r3, [r7, #30]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	8bfa      	ldrh	r2, [r7, #30]
 80028ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	3306      	adds	r3, #6
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d019      	beq.n	800293a <PCD_EP_ISR_Handler+0x1f0>
 8002906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002914:	6959      	ldr	r1, [r3, #20]
 8002916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002918:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800291a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800291e:	b29b      	uxth	r3, r3
 8002920:	f004 f807 	bl	8006932 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	441a      	add	r2, r3
 800292e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002930:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002932:	2100      	movs	r1, #0
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f005 fe15 	bl	8008564 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002944:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 82bd 	bne.w	8002ecc <PCD_EP_ISR_Handler+0x782>
 8002952:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002956:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800295a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800295e:	f000 82b5 	beq.w	8002ecc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298c:	b29a      	uxth	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b3e      	cmp	r3, #62	@ 0x3e
 8002998:	d91d      	bls.n	80029d6 <PCD_EP_ISR_Handler+0x28c>
 800299a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <PCD_EP_ISR_Handler+0x26a>
 80029ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b0:	3b01      	subs	r3, #1
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029bc:	b29b      	uxth	r3, r3
 80029be:	029b      	lsls	r3, r3, #10
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4313      	orrs	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e026      	b.n	8002a24 <PCD_EP_ISR_Handler+0x2da>
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <PCD_EP_ISR_Handler+0x2aa>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e017      	b.n	8002a24 <PCD_EP_ISR_Handler+0x2da>
 80029f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80029fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <PCD_EP_ISR_Handler+0x2c4>
 8002a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	029b      	lsls	r3, r3, #10
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a34:	827b      	strh	r3, [r7, #18]
 8002a36:	8a7b      	ldrh	r3, [r7, #18]
 8002a38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002a3c:	827b      	strh	r3, [r7, #18]
 8002a3e:	8a7b      	ldrh	r3, [r7, #18]
 8002a40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a44:	827b      	strh	r3, [r7, #18]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	8a7b      	ldrh	r3, [r7, #18]
 8002a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	8013      	strh	r3, [r2, #0]
 8002a60:	e234      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a76:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f280 80fc 	bge.w	8002c78 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a96:	4013      	ands	r3, r2
 8002a98:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002aae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ab6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d125      	bne.n	8002b20 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3306      	adds	r3, #6
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002b00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8092 	beq.w	8002c2e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b10:	6959      	ldr	r1, [r3, #20]
 8002b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b14:	88da      	ldrh	r2, [r3, #6]
 8002b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b1a:	f003 ff0a 	bl	8006932 <USB_ReadPMA>
 8002b1e:	e086      	b.n	8002c2e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d10a      	bne.n	8002b3e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f9d9 	bl	8002ee8 <HAL_PCD_EP_DB_Receive>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002b3c:	e077      	b.n	8002c2e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b58:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	441a      	add	r2, r3
 8002b6a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d024      	beq.n	8002be6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bc4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002bc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d02e      	beq.n	8002c2e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd6:	6959      	ldr	r1, [r3, #20]
 8002bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bda:	891a      	ldrh	r2, [r3, #8]
 8002bdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002be0:	f003 fea7 	bl	8006932 <USB_ReadPMA>
 8002be4:	e023      	b.n	8002c2e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3306      	adds	r3, #6
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	6959      	ldr	r1, [r3, #20]
 8002c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c24:	895a      	ldrh	r2, [r3, #10]
 8002c26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c2a:	f003 fe82 	bl	8006932 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c36:	441a      	add	r2, r3
 8002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c44:	441a      	add	r2, r3
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <PCD_EP_ISR_Handler+0x514>
 8002c52:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d206      	bcs.n	8002c6c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f005 fc7d 	bl	8008564 <HAL_PCD_DataOutStageCallback>
 8002c6a:	e005      	b.n	8002c78 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 f928 	bl	8004ec8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 8123 	beq.w	8002ecc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c86:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	3310      	adds	r3, #16
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	78db      	ldrb	r3, [r3, #3]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	f040 80a2 	bne.w	8002e24 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce8:	7b1b      	ldrb	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8093 	beq.w	8002e16 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cf0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d046      	beq.n	8002d8a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d126      	bne.n	8002d52 <PCD_EP_ISR_Handler+0x608>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	4413      	add	r3, r2
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	011a      	lsls	r2, r3, #4
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	4413      	add	r3, r2
 8002d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d2a:	623b      	str	r3, [r7, #32]
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	801a      	strh	r2, [r3, #0]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	801a      	strh	r2, [r3, #0]
 8002d50:	e061      	b.n	8002e16 <PCD_EP_ISR_Handler+0x6cc>
 8002d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d15d      	bne.n	8002e16 <PCD_EP_ISR_Handler+0x6cc>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6e:	4413      	add	r3, r2
 8002d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	011a      	lsls	r2, r3, #4
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	2200      	movs	r2, #0
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e045      	b.n	8002e16 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d126      	bne.n	8002de6 <PCD_EP_ISR_Handler+0x69c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	4413      	add	r3, r2
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	011a      	lsls	r2, r3, #4
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e017      	b.n	8002e16 <PCD_EP_ISR_Handler+0x6cc>
 8002de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d113      	bne.n	8002e16 <PCD_EP_ISR_Handler+0x6cc>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfc:	4413      	add	r3, r2
 8002dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e08:	4413      	add	r3, r2
 8002e0a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	2200      	movs	r2, #0
 8002e14:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f005 fbbc 	bl	800859a <HAL_PCD_DataInStageCallback>
 8002e22:	e053      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d146      	bne.n	8002ebe <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	3302      	adds	r3, #2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d907      	bls.n	8002e78 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	e002      	b.n	8002e7e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f005 fb84 	bl	800859a <HAL_PCD_DataInStageCallback>
 8002e92:	e01b      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e9c:	441a      	add	r2, r3
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002eaa:	441a      	add	r2, r3
 8002eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f806 	bl	8004ec8 <USB_EPStartXfer>
 8002ebc:	e006      	b.n	8002ecc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ebe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f91b 	bl	8003102 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f6ff ac3b 	blt.w	8002754 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3758      	adds	r7, #88	@ 0x58
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d07e      	beq.n	8002ffe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	3302      	adds	r3, #2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	8b7b      	ldrh	r3, [r7, #26]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d306      	bcc.n	8002f42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	8b7b      	ldrh	r3, [r7, #26]
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	619a      	str	r2, [r3, #24]
 8002f40:	e002      	b.n	8002f48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d123      	bne.n	8002f98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6a:	833b      	strh	r3, [r7, #24]
 8002f6c:	8b3b      	ldrh	r3, [r7, #24]
 8002f6e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f72:	833b      	strh	r3, [r7, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	8b3b      	ldrh	r3, [r7, #24]
 8002f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fbc:	82fb      	strh	r3, [r7, #22]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	441a      	add	r2, r3
 8002fcc:	8afb      	ldrh	r3, [r7, #22]
 8002fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8087 	beq.w	80030f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6959      	ldr	r1, [r3, #20]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	891a      	ldrh	r2, [r3, #8]
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	f003 fc9b 	bl	8006932 <USB_ReadPMA>
 8002ffc:	e07c      	b.n	80030f8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	3306      	adds	r3, #6
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	8b7b      	ldrh	r3, [r7, #26]
 800302e:	429a      	cmp	r2, r3
 8003030:	d306      	bcc.n	8003040 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699a      	ldr	r2, [r3, #24]
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	1ad2      	subs	r2, r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	619a      	str	r2, [r3, #24]
 800303e:	e002      	b.n	8003046 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d123      	bne.n	8003096 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003068:	83fb      	strh	r3, [r7, #30]
 800306a:	8bfb      	ldrh	r3, [r7, #30]
 800306c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003070:	83fb      	strh	r3, [r7, #30]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	8bfb      	ldrh	r3, [r7, #30]
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800308a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800308e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11f      	bne.n	80030e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ba:	83bb      	strh	r3, [r7, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	8bbb      	ldrh	r3, [r7, #28]
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030e0:	8b7b      	ldrh	r3, [r7, #26]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d008      	beq.n	80030f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	6959      	ldr	r1, [r3, #20]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	895a      	ldrh	r2, [r3, #10]
 80030f2:	8b7b      	ldrh	r3, [r7, #26]
 80030f4:	f003 fc1d 	bl	8006932 <USB_ReadPMA>
    }
  }

  return count;
 80030f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b0a4      	sub	sp, #144	@ 0x90
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 81dd 	beq.w	80034d6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	3302      	adds	r3, #2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003144:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003150:	429a      	cmp	r2, r3
 8003152:	d907      	bls.n	8003164 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800315c:	1ad2      	subs	r2, r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	619a      	str	r2, [r3, #24]
 8003162:	e002      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80b9 	bne.w	80032e6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d126      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0xc8>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	4413      	add	r3, r2
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	011a      	lsls	r2, r3, #4
 800319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319c:	4413      	add	r3, r2
 800319e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e01a      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0xfe>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d116      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0xfe>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e6:	4413      	add	r3, r2
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	011a      	lsls	r2, r3, #4
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	785b      	ldrb	r3, [r3, #1]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d126      	bne.n	800325c <HAL_PCD_EP_DB_Transmit+0x15a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	011a      	lsls	r2, r3, #4
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003240:	b29a      	uxth	r2, r3
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003254:	b29a      	uxth	r2, r3
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e017      	b.n	800328c <HAL_PCD_EP_DB_Transmit+0x18a>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d113      	bne.n	800328c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	4413      	add	r3, r2
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	011a      	lsls	r2, r3, #4
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	4413      	add	r3, r2
 8003280:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2200      	movs	r2, #0
 800328a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f005 f981 	bl	800859a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 82fc 	beq.w	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032be:	82fb      	strh	r3, [r7, #22]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	8afb      	ldrh	r3, [r7, #22]
 80032d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	8013      	strh	r3, [r2, #0]
 80032e4:	e2da      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d021      	beq.n	8003334 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	441a      	add	r2, r3
 800331c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003328:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800332c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003330:	b29b      	uxth	r3, r3
 8003332:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 82ae 	bne.w	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003348:	441a      	add	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003356:	441a      	add	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d30b      	bcc.n	8003380 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	621a      	str	r2, [r3, #32]
 800337e:	e017      	b.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003388:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800338c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003398:	e00a      	b.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2200      	movs	r2, #0
 80033ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d165      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x382>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	4413      	add	r3, r2
 80033ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	011a      	lsls	r2, r3, #4
 80033d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d8:	4413      	add	r3, r2
 80033da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f6:	d91d      	bls.n	8003434 <HAL_PCD_EP_DB_Transmit+0x332>
 80033f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x310>
 800340c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800340e:	3b01      	subs	r3, #1
 8003410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29a      	uxth	r2, r3
 8003418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800341a:	b29b      	uxth	r3, r3
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	b29b      	uxth	r3, r3
 8003420:	4313      	orrs	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342c:	b29a      	uxth	r2, r3
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	e044      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_PCD_EP_DB_Transmit+0x350>
 800343c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344a:	b29a      	uxth	r2, r3
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	e035      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003468:	3301      	adds	r3, #1
 800346a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003474:	b29b      	uxth	r3, r3
 8003476:	029b      	lsls	r3, r3, #10
 8003478:	b29b      	uxth	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b29a      	uxth	r2, r3
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e01c      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d118      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x3bc>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a0:	4413      	add	r3, r2
 80034a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	011a      	lsls	r2, r3, #4
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	6959      	ldr	r1, [r3, #20]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	891a      	ldrh	r2, [r3, #8]
 80034ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f003 f9e9 	bl	80068a6 <USB_WritePMA>
 80034d4:	e1e2      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	3306      	adds	r3, #6
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034fe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800350a:	429a      	cmp	r2, r3
 800350c:	d307      	bcc.n	800351e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	619a      	str	r2, [r3, #24]
 800351c:	e002      	b.n	8003524 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f040 80c0 	bne.w	80036ae <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d126      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x482>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800354a:	4413      	add	r3, r2
 800354c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	011a      	lsls	r2, r3, #4
 8003554:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003556:	4413      	add	r3, r2
 8003558:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800355c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800355e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003568:	b29a      	uxth	r2, r3
 800356a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800357c:	b29a      	uxth	r2, r3
 800357e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003580:	801a      	strh	r2, [r3, #0]
 8003582:	e01a      	b.n	80035ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d116      	bne.n	80035ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	667b      	str	r3, [r7, #100]	@ 0x64
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800359a:	b29b      	uxth	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035a0:	4413      	add	r3, r2
 80035a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	011a      	lsls	r2, r3, #4
 80035aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035ac:	4413      	add	r3, r2
 80035ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80035b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b6:	2200      	movs	r2, #0
 80035b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	677b      	str	r3, [r7, #116]	@ 0x74
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	785b      	ldrb	r3, [r3, #1]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d12b      	bne.n	8003620 <HAL_PCD_EP_DB_Transmit+0x51e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035dc:	4413      	add	r3, r2
 80035de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	011a      	lsls	r2, r3, #4
 80035e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e8:	4413      	add	r3, r2
 80035ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fe:	b29a      	uxth	r2, r3
 8003600:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003616:	b29a      	uxth	r2, r3
 8003618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	e017      	b.n	8003650 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d113      	bne.n	8003650 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003630:	b29b      	uxth	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003636:	4413      	add	r3, r2
 8003638:	677b      	str	r3, [r7, #116]	@ 0x74
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	011a      	lsls	r2, r3, #4
 8003640:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003642:	4413      	add	r3, r2
 8003644:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003648:	673b      	str	r3, [r7, #112]	@ 0x70
 800364a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364c:	2200      	movs	r2, #0
 800364e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f004 ff9f 	bl	800859a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 811a 	bne.w	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
 80036ac:	e0f6      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d121      	bne.n	80036fc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	441a      	add	r2, r3
 80036e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003702:	2b01      	cmp	r3, #1
 8003704:	f040 80ca 	bne.w	800389c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003710:	441a      	add	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	69da      	ldr	r2, [r3, #28]
 800371a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800371e:	441a      	add	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d30b      	bcc.n	8003748 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003740:	1ad2      	subs	r2, r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	621a      	str	r2, [r3, #32]
 8003746:	e017      	b.n	8003778 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d108      	bne.n	8003762 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003760:	e00a      	b.n	8003778 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2200      	movs	r2, #0
 800376e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	657b      	str	r3, [r7, #84]	@ 0x54
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d165      	bne.n	8003852 <HAL_PCD_EP_DB_Transmit+0x750>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800379a:	4413      	add	r3, r2
 800379c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	011a      	lsls	r2, r3, #4
 80037a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a6:	4413      	add	r3, r2
 80037a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80037c4:	d91d      	bls.n	8003802 <HAL_PCD_EP_DB_Transmit+0x700>
 80037c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80037da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037dc:	3b01      	subs	r3, #1
 80037de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	e041      	b.n	8003886 <HAL_PCD_EP_DB_Transmit+0x784>
 8003802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_PCD_EP_DB_Transmit+0x71e>
 800380a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003818:	b29a      	uxth	r2, r3
 800381a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	e032      	b.n	8003886 <HAL_PCD_EP_DB_Transmit+0x784>
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003828:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_PCD_EP_DB_Transmit+0x738>
 8003834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003836:	3301      	adds	r3, #1
 8003838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800383a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29a      	uxth	r2, r3
 8003840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003842:	b29b      	uxth	r3, r3
 8003844:	029b      	lsls	r3, r3, #10
 8003846:	b29b      	uxth	r3, r3
 8003848:	4313      	orrs	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e019      	b.n	8003886 <HAL_PCD_EP_DB_Transmit+0x784>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d115      	bne.n	8003886 <HAL_PCD_EP_DB_Transmit+0x784>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	4413      	add	r3, r2
 800386a:	657b      	str	r3, [r7, #84]	@ 0x54
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	011a      	lsls	r2, r3, #4
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	4413      	add	r3, r2
 8003876:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800387a:	653b      	str	r3, [r7, #80]	@ 0x50
 800387c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003880:	b29a      	uxth	r2, r3
 8003882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003884:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6959      	ldr	r1, [r3, #20]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	895a      	ldrh	r2, [r3, #10]
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003896:	b29b      	uxth	r3, r3
 8003898:	f003 f805 	bl	80068a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b6:	82bb      	strh	r3, [r7, #20]
 80038b8:	8abb      	ldrh	r3, [r7, #20]
 80038ba:	f083 0310 	eor.w	r3, r3, #16
 80038be:	82bb      	strh	r3, [r7, #20]
 80038c0:	8abb      	ldrh	r3, [r7, #20]
 80038c2:	f083 0320 	eor.w	r3, r3, #32
 80038c6:	82bb      	strh	r3, [r7, #20]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	8abb      	ldrh	r3, [r7, #20]
 80038d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3790      	adds	r7, #144	@ 0x90
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b087      	sub	sp, #28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	817b      	strh	r3, [r7, #10]
 8003904:	4613      	mov	r3, r2
 8003906:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	f003 0207 	and.w	r2, r3, #7
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	3310      	adds	r3, #16
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e009      	b.n	8003940 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800392c:	897a      	ldrh	r2, [r7, #10]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	b29a      	uxth	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	80da      	strh	r2, [r3, #6]
 8003954:	e00b      	b.n	800396e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2201      	movs	r2, #1
 800395a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	b29a      	uxth	r2, r3
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	b29a      	uxth	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
	...

0800397c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e272      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8087 	beq.w	8003aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800399c:	4b92      	ldr	r3, [pc, #584]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00c      	beq.n	80039c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a8:	4b8f      	ldr	r3, [pc, #572]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d112      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
 80039b4:	4b8c      	ldr	r3, [pc, #560]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d10b      	bne.n	80039da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c2:	4b89      	ldr	r3, [pc, #548]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d06c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d168      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e24c      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x76>
 80039e4:	4b80      	ldr	r3, [pc, #512]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7f      	ldr	r2, [pc, #508]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e02e      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x98>
 80039fa:	4b7b      	ldr	r3, [pc, #492]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a7a      	ldr	r2, [pc, #488]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b78      	ldr	r3, [pc, #480]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a77      	ldr	r2, [pc, #476]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e01d      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RCC_OscConfig+0xbc>
 8003a1e:	4b72      	ldr	r3, [pc, #456]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a71      	ldr	r2, [pc, #452]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e00b      	b.n	8003a50 <HAL_RCC_OscConfig+0xd4>
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6a      	ldr	r2, [pc, #424]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b68      	ldr	r3, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a67      	ldr	r2, [pc, #412]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd ff40 	bl	80018dc <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fd ff3c 	bl	80018dc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e200      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b5d      	ldr	r3, [pc, #372]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe4>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fd ff2c 	bl	80018dc <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fd ff28 	bl	80018dc <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e1ec      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	4b53      	ldr	r3, [pc, #332]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x10c>
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d063      	beq.n	8003b7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ac2:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x18c>
 8003ace:	4b46      	ldr	r3, [pc, #280]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ada:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x176>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e1c0      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b3d      	ldr	r3, [pc, #244]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4939      	ldr	r1, [pc, #228]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	e03a      	b.n	8003b7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b10:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <HAL_RCC_OscConfig+0x270>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b16:	f7fd fee1 	bl	80018dc <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd fedd 	bl	80018dc <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1a1      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	4b2d      	ldr	r3, [pc, #180]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4927      	ldr	r1, [pc, #156]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b52:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_RCC_OscConfig+0x270>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fd fec0 	bl	80018dc <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd febc 	bl	80018dc <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e180      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03a      	beq.n	8003c00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d019      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fea0 	bl	80018dc <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fe9c 	bl	80018dc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e160      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f000 fa9c 	bl	80040fc <RCC_Delay>
 8003bc4:	e01c      	b.n	8003c00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fe86 	bl	80018dc <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd2:	e00f      	b.n	8003bf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd fe82 	bl	80018dc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d908      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e146      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
 8003be6:	bf00      	nop
 8003be8:	40021000 	.word	0x40021000
 8003bec:	42420000 	.word	0x42420000
 8003bf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e9      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a6 	beq.w	8003d5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b8b      	ldr	r3, [pc, #556]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	4b88      	ldr	r3, [pc, #544]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4a87      	ldr	r2, [pc, #540]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	61d3      	str	r3, [r2, #28]
 8003c2a:	4b85      	ldr	r3, [pc, #532]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	4b82      	ldr	r3, [pc, #520]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c52:	f7fd fe43 	bl	80018dc <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5a:	f7fd fe3f 	bl	80018dc <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b64      	cmp	r3, #100	@ 0x64
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e103      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6c:	4b75      	ldr	r3, [pc, #468]	@ (8003e44 <HAL_RCC_OscConfig+0x4c8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x312>
 8003c80:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e02d      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x334>
 8003c96:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a69      	ldr	r2, [pc, #420]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	6213      	str	r3, [r2, #32]
 8003ca2:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a66      	ldr	r2, [pc, #408]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	e01c      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d10c      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x356>
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4a60      	ldr	r2, [pc, #384]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	6213      	str	r3, [r2, #32]
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6213      	str	r3, [r2, #32]
 8003cd0:	e00b      	b.n	8003cea <HAL_RCC_OscConfig+0x36e>
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6213      	str	r3, [r2, #32]
 8003cde:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4a57      	ldr	r2, [pc, #348]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fdf3 	bl	80018dc <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fd fdef 	bl	80018dc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0b1      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b4b      	ldr	r3, [pc, #300]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCC_OscConfig+0x37e>
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1e:	f7fd fddd 	bl	80018dc <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d26:	f7fd fdd9 	bl	80018dc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e09b      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	4b40      	ldr	r3, [pc, #256]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8087 	beq.w	8003e72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d061      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d146      	bne.n	8003e06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b33      	ldr	r3, [pc, #204]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fdad 	bl	80018dc <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fd fda9 	bl	80018dc <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e06d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d98:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dac:	d108      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dae:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4921      	ldr	r1, [pc, #132]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a19      	ldr	r1, [r3, #32]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	491b      	ldr	r1, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd fd7d 	bl	80018dc <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd fd79 	bl	80018dc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03d      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df8:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x46a>
 8003e04:	e035      	b.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCC_OscConfig+0x4cc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fd66 	bl	80018dc <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fd62 	bl	80018dc <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e026      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x498>
 8003e32:	e01e      	b.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e019      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_OscConfig+0x500>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000

08003e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0d0      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b6a      	ldr	r3, [pc, #424]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d910      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b67      	ldr	r3, [pc, #412]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	4965      	ldr	r1, [pc, #404]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b63      	ldr	r3, [pc, #396]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0b8      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d020      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003edc:	4b59      	ldr	r3, [pc, #356]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4a58      	ldr	r2, [pc, #352]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef4:	4b53      	ldr	r3, [pc, #332]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003efe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f00:	4b50      	ldr	r3, [pc, #320]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	494d      	ldr	r1, [pc, #308]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d040      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e07f      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e073      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06b      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4936      	ldr	r1, [pc, #216]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fd fcb4 	bl	80018dc <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd fcb0 	bl	80018dc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e053      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d210      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 0207 	bic.w	r2, r3, #7
 8003fb6:	4922      	ldr	r1, [pc, #136]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e032      	b.n	8004036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fdc:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4916      	ldr	r1, [pc, #88]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ffa:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	490e      	ldr	r1, [pc, #56]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800400e:	f000 f821 	bl	8004054 <HAL_RCC_GetSysClockFreq>
 8004012:	4602      	mov	r2, r0
 8004014:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	490a      	ldr	r1, [pc, #40]	@ (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	5ccb      	ldrb	r3, [r1, r3]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a09      	ldr	r2, [pc, #36]	@ (800404c <HAL_RCC_ClockConfig+0x1cc>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_ClockConfig+0x1d0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fc12 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
 8004048:	0800bba4 	.word	0x0800bba4
 800404c:	20000004 	.word	0x20000004
 8004050:	20000008 	.word	0x20000008

08004054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800406e:	4b1e      	ldr	r3, [pc, #120]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b04      	cmp	r3, #4
 800407c:	d002      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x30>
 800407e:	2b08      	cmp	r3, #8
 8004080:	d003      	beq.n	800408a <HAL_RCC_GetSysClockFreq+0x36>
 8004082:	e027      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	613b      	str	r3, [r7, #16]
      break;
 8004088:	e027      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	0c9b      	lsrs	r3, r3, #18
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	4a17      	ldr	r2, [pc, #92]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d010      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040a2:	4b11      	ldr	r3, [pc, #68]	@ (80040e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	0c5b      	lsrs	r3, r3, #17
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	4a11      	ldr	r2, [pc, #68]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a0d      	ldr	r2, [pc, #52]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 80040b6:	fb03 f202 	mul.w	r2, r3, r2
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e004      	b.n	80040ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0c      	ldr	r2, [pc, #48]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	613b      	str	r3, [r7, #16]
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetSysClockFreq+0x98>)
 80040d6:	613b      	str	r3, [r7, #16]
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	0800bbb4 	.word	0x0800bbb4
 80040f4:	0800bbc4 	.word	0x0800bbc4
 80040f8:	003d0900 	.word	0x003d0900

080040fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <RCC_Delay+0x34>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0a      	ldr	r2, [pc, #40]	@ (8004134 <RCC_Delay+0x38>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0a5b      	lsrs	r3, r3, #9
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004118:	bf00      	nop
  }
  while (Delay --);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e5a      	subs	r2, r3, #1
 800411e:	60fa      	str	r2, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f9      	bne.n	8004118 <RCC_Delay+0x1c>
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	20000004 	.word	0x20000004
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d07d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004154:	2300      	movs	r3, #0
 8004156:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004158:	4b4f      	ldr	r3, [pc, #316]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10d      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004164:	4b4c      	ldr	r3, [pc, #304]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4a4b      	ldr	r2, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416e:	61d3      	str	r3, [r2, #28]
 8004170:	4b49      	ldr	r3, [pc, #292]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	4b46      	ldr	r3, [pc, #280]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d118      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418c:	4b43      	ldr	r3, [pc, #268]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a42      	ldr	r2, [pc, #264]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004198:	f7fd fba0 	bl	80018dc <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	e008      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a0:	f7fd fb9c 	bl	80018dc <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e06d      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	4b3a      	ldr	r3, [pc, #232]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d027      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e6:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ec:	4b2c      	ldr	r3, [pc, #176]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041f2:	4a29      	ldr	r2, [pc, #164]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d014      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fd fb6b 	bl	80018dc <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7fd fb67 	bl	80018dc <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e036      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004220:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ee      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422c:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4917      	ldr	r1, [pc, #92]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	4313      	orrs	r3, r2
 800423c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425c:	4b0e      	ldr	r3, [pc, #56]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	490b      	ldr	r1, [pc, #44]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800427a:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4904      	ldr	r1, [pc, #16]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	40007000 	.word	0x40007000
 80042a0:	42420440 	.word	0x42420440

080042a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	4638      	mov	r0, r7
 80042ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ce:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	b29b      	uxth	r3, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	4013      	ands	r3, r2
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	4638      	mov	r0, r7
 8004340:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004370:	b480      	push	{r7}
 8004372:	b09d      	sub	sp, #116	@ 0x74
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d81f      	bhi.n	80043e2 <USB_ActivateEndpoint+0x72>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <USB_ActivateEndpoint+0x38>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043eb 	.word	0x080043eb
 80043b4:	080043c7 	.word	0x080043c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043c4:	e012      	b.n	80043ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043ca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80043ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043d2:	e00b      	b.n	80043ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043e0:	e004      	b.n	80043ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80043e8:	e000      	b.n	80043ec <USB_ActivateEndpoint+0x7c>
      break;
 80043ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004424:	b29b      	uxth	r3, r3
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	4313      	orrs	r3, r2
 800442c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	7b1b      	ldrb	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 8178 	bne.w	800474c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	785b      	ldrb	r3, [r3, #1]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8084 	beq.w	800456e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4413      	add	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	011a      	lsls	r2, r3, #4
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	88db      	ldrh	r3, [r3, #6]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	827b      	strh	r3, [r7, #18]
 80044a8:	8a7b      	ldrh	r3, [r7, #18]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01b      	beq.n	80044ea <USB_ActivateEndpoint+0x17a>
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c8:	823b      	strh	r3, [r7, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	8a3b      	ldrh	r3, [r7, #16]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	78db      	ldrb	r3, [r3, #3]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d020      	beq.n	8004534 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004508:	81bb      	strh	r3, [r7, #12]
 800450a:	89bb      	ldrh	r3, [r7, #12]
 800450c:	f083 0320 	eor.w	r3, r3, #32
 8004510:	81bb      	strh	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	89bb      	ldrh	r3, [r7, #12]
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e2d5      	b.n	8004ae0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454a:	81fb      	strh	r3, [r7, #14]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800455c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004568:	b29b      	uxth	r3, r3
 800456a:	8013      	strh	r3, [r2, #0]
 800456c:	e2b8      	b.n	8004ae0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004578:	b29b      	uxth	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	4413      	add	r3, r2
 8004580:	633b      	str	r3, [r7, #48]	@ 0x30
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	011a      	lsls	r2, r3, #4
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	4413      	add	r3, r2
 800458c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	88db      	ldrh	r3, [r3, #6]
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	b29b      	uxth	r3, r3
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b2:	4413      	add	r3, r2
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	011a      	lsls	r2, r3, #4
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	4413      	add	r3, r2
 80045c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b3e      	cmp	r3, #62	@ 0x3e
 80045dc:	d91d      	bls.n	800461a <USB_ActivateEndpoint+0x2aa>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <USB_ActivateEndpoint+0x288>
 80045f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045f4:	3b01      	subs	r3, #1
 80045f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004600:	b29b      	uxth	r3, r3
 8004602:	029b      	lsls	r3, r3, #10
 8004604:	b29b      	uxth	r3, r3
 8004606:	4313      	orrs	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004612:	b29a      	uxth	r2, r3
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e026      	b.n	8004668 <USB_ActivateEndpoint+0x2f8>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <USB_ActivateEndpoint+0x2c8>
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004630:	b29a      	uxth	r2, r3
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e017      	b.n	8004668 <USB_ActivateEndpoint+0x2f8>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <USB_ActivateEndpoint+0x2e2>
 800464c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800464e:	3301      	adds	r3, #1
 8004650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29a      	uxth	r2, r3
 8004658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b29b      	uxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004676:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <USB_ActivateEndpoint+0x348>
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	843b      	strh	r3, [r7, #32]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	8c3b      	ldrh	r3, [r7, #32]
 80046a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d124      	bne.n	800470a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d6:	83bb      	strh	r3, [r7, #28]
 80046d8:	8bbb      	ldrh	r3, [r7, #28]
 80046da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046de:	83bb      	strh	r3, [r7, #28]
 80046e0:	8bbb      	ldrh	r3, [r7, #28]
 80046e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046e6:	83bb      	strh	r3, [r7, #28]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	8bbb      	ldrh	r3, [r7, #28]
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
 8004708:	e1ea      	b.n	8004ae0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800471c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004720:	83fb      	strh	r3, [r7, #30]
 8004722:	8bfb      	ldrh	r3, [r7, #30]
 8004724:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004728:	83fb      	strh	r3, [r7, #30]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800473a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004746:	b29b      	uxth	r3, r3
 8004748:	8013      	strh	r3, [r2, #0]
 800474a:	e1c9      	b.n	8004ae0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	78db      	ldrb	r3, [r3, #3]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d11e      	bne.n	8004792 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004784:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
 8004790:	e01d      	b.n	80047ce <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80047a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047de:	4413      	add	r3, r2
 80047e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	011a      	lsls	r2, r3, #4
 80047e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	891b      	ldrh	r3, [r3, #8]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	657b      	str	r3, [r7, #84]	@ 0x54
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800480c:	b29b      	uxth	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004812:	4413      	add	r3, r2
 8004814:	657b      	str	r3, [r7, #84]	@ 0x54
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	011a      	lsls	r2, r3, #4
 800481c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481e:	4413      	add	r3, r2
 8004820:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004824:	653b      	str	r3, [r7, #80]	@ 0x50
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	895b      	ldrh	r3, [r3, #10]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	b29b      	uxth	r3, r3
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 8093 	bne.w	8004966 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01b      	beq.n	8004894 <USB_ActivateEndpoint+0x524>
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004872:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800488c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004890:	b29b      	uxth	r3, r3
 8004892:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80048a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01b      	beq.n	80048e4 <USB_ActivateEndpoint+0x574>
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004902:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004904:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004906:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800490a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004942:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800495c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004960:	b29b      	uxth	r3, r3
 8004962:	8013      	strh	r3, [r2, #0]
 8004964:	e0bc      	b.n	8004ae0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800497a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01d      	beq.n	80049be <USB_ActivateEndpoint+0x64e>
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004998:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80049ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <USB_ActivateEndpoint+0x6a6>
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004a02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	78db      	ldrb	r3, [r3, #3]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d024      	beq.n	8004a68 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a3c:	f083 0320 	eor.w	r3, r3, #32
 8004a40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	441a      	add	r2, r3
 8004a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
 8004a66:	e01d      	b.n	8004aa4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004ae0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3774      	adds	r7, #116	@ 0x74
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop

08004af0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b08d      	sub	sp, #52	@ 0x34
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	7b1b      	ldrb	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 808e 	bne.w	8004c20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d044      	beq.n	8004b96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	81bb      	strh	r3, [r7, #12]
 8004b1a:	89bb      	ldrh	r3, [r7, #12]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <USB_DeactivateEndpoint+0x6c>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	817b      	strh	r3, [r7, #10]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	897b      	ldrh	r3, [r7, #10]
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b72:	813b      	strh	r3, [r7, #8]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	893b      	ldrh	r3, [r7, #8]
 8004b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8013      	strh	r3, [r2, #0]
 8004b94:	e192      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	827b      	strh	r3, [r7, #18]
 8004ba4:	8a7b      	ldrh	r3, [r7, #18]
 8004ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01b      	beq.n	8004be6 <USB_DeactivateEndpoint+0xf6>
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc4:	823b      	strh	r3, [r7, #16]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	441a      	add	r2, r3
 8004bd0:	8a3b      	ldrh	r3, [r7, #16]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	81fb      	strh	r3, [r7, #14]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e14d      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 80a5 	bne.w	8004d74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	843b      	strh	r3, [r7, #32]
 8004c38:	8c3b      	ldrh	r3, [r7, #32]
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01b      	beq.n	8004c7a <USB_DeactivateEndpoint+0x18a>
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c58:	83fb      	strh	r3, [r7, #30]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8bfb      	ldrh	r3, [r7, #30]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	83bb      	strh	r3, [r7, #28]
 8004c88:	8bbb      	ldrh	r3, [r7, #28]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_DeactivateEndpoint+0x1da>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca8:	837b      	strh	r3, [r7, #26]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce0:	833b      	strh	r3, [r7, #24]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8b3b      	ldrh	r3, [r7, #24]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d18:	82fb      	strh	r3, [r7, #22]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d50:	82bb      	strh	r3, [r7, #20]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8abb      	ldrh	r3, [r7, #20]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
 8004d72:	e0a3      	b.n	8004ebc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <USB_DeactivateEndpoint+0x2d4>
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004dd2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_DeactivateEndpoint+0x324>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3734      	adds	r7, #52	@ 0x34
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0c2      	sub	sp, #264	@ 0x108
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed6:	6018      	str	r0, [r3, #0]
 8004ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	f040 86b7 	bne.w	8005c62 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d908      	bls.n	8004f22 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f20:	e007      	b.n	8004f32 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	7b1b      	ldrb	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d13a      	bne.n	8004fb8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6959      	ldr	r1, [r3, #20]
 8004f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	88da      	ldrh	r2, [r3, #6]
 8004f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f68:	6800      	ldr	r0, [r0, #0]
 8004f6a:	f001 fc9c 	bl	80068a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	f000 be1f 	b.w	8005bf6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	f040 8462 	bne.w	800588e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	f240 83df 	bls.w	80057a6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005038:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800503c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005040:	b29b      	uxth	r3, r3
 8005042:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	1ad2      	subs	r2, r2, r3
 8005056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 81c7 	beq.w	8005418 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800508a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
 8005096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d177      	bne.n	8005196 <USB_EPStartXfer+0x2ce>
 80050a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	4413      	add	r3, r2
 80050c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	011a      	lsls	r2, r3, #4
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	4413      	add	r3, r2
 80050dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	801a      	strh	r2, [r3, #0]
 80050f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80050f8:	d921      	bls.n	800513e <USB_EPStartXfer+0x276>
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <USB_EPStartXfer+0x252>
 8005110:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005114:	3b01      	subs	r3, #1
 8005116:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29a      	uxth	r2, r3
 8005120:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005124:	b29b      	uxth	r3, r3
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	b29b      	uxth	r3, r3
 800512a:	4313      	orrs	r3, r2
 800512c:	b29b      	uxth	r3, r3
 800512e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005136:	b29a      	uxth	r2, r3
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e050      	b.n	80051e0 <USB_EPStartXfer+0x318>
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <USB_EPStartXfer+0x294>
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e041      	b.n	80051e0 <USB_EPStartXfer+0x318>
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <USB_EPStartXfer+0x2b4>
 8005172:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005176:	3301      	adds	r3, #1
 8005178:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29b      	uxth	r3, r3
 800518c:	4313      	orrs	r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e024      	b.n	80051e0 <USB_EPStartXfer+0x318>
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d11c      	bne.n	80051e0 <USB_EPStartXfer+0x318>
 80051a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	4413      	add	r3, r2
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	4413      	add	r3, r2
 80051d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	895b      	ldrh	r3, [r3, #10]
 80051ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6959      	ldr	r1, [r3, #20]
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005200:	b29b      	uxth	r3, r3
 8005202:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005206:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800520a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800520e:	6800      	ldr	r0, [r0, #0]
 8005210:	f001 fb49 	bl	80068a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	441a      	add	r2, r3
 8005226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90f      	bls.n	800526e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800524e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	621a      	str	r2, [r3, #32]
 800526c:	e00e      	b.n	800528c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800526e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800528c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d177      	bne.n	800538c <USB_EPStartXfer+0x4c4>
 800529c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	4413      	add	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	011a      	lsls	r2, r3, #4
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ee:	d921      	bls.n	8005334 <USB_EPStartXfer+0x46c>
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <USB_EPStartXfer+0x448>
 8005306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800530a:	3b01      	subs	r3, #1
 800530c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531a:	b29b      	uxth	r3, r3
 800531c:	029b      	lsls	r3, r3, #10
 800531e:	b29b      	uxth	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532c:	b29a      	uxth	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e056      	b.n	80053e2 <USB_EPStartXfer+0x51a>
 8005334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <USB_EPStartXfer+0x48a>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534a:	b29a      	uxth	r2, r3
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	801a      	strh	r2, [r3, #0]
 8005350:	e047      	b.n	80053e2 <USB_EPStartXfer+0x51a>
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800535c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <USB_EPStartXfer+0x4aa>
 8005368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800536c:	3301      	adds	r3, #1
 800536e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537c:	b29b      	uxth	r3, r3
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	b29b      	uxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e02a      	b.n	80053e2 <USB_EPStartXfer+0x51a>
 800538c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d122      	bne.n	80053e2 <USB_EPStartXfer+0x51a>
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	4413      	add	r3, r2
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	011a      	lsls	r2, r3, #4
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	4413      	add	r3, r2
 80053d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	b29a      	uxth	r2, r3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	891b      	ldrh	r3, [r3, #8]
 80053ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6959      	ldr	r1, [r3, #20]
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005402:	b29b      	uxth	r3, r3
 8005404:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005408:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800540c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005410:	6800      	ldr	r0, [r0, #0]
 8005412:	f001 fa48 	bl	80068a6 <USB_WritePMA>
 8005416:	e3ee      	b.n	8005bf6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d177      	bne.n	8005518 <USB_EPStartXfer+0x650>
 8005428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005448:	4413      	add	r3, r2
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	011a      	lsls	r2, r3, #4
 800545a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545c:	4413      	add	r3, r2
 800545e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005462:	647b      	str	r3, [r7, #68]	@ 0x44
 8005464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546e:	b29a      	uxth	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005478:	2b3e      	cmp	r3, #62	@ 0x3e
 800547a:	d921      	bls.n	80054c0 <USB_EPStartXfer+0x5f8>
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <USB_EPStartXfer+0x5d4>
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005496:	3b01      	subs	r3, #1
 8005498:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800549c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	029b      	lsls	r3, r3, #10
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	e056      	b.n	800556e <USB_EPStartXfer+0x6a6>
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <USB_EPStartXfer+0x616>
 80054c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e047      	b.n	800556e <USB_EPStartXfer+0x6a6>
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <USB_EPStartXfer+0x636>
 80054f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054f8:	3301      	adds	r3, #1
 80054fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005508:	b29b      	uxth	r3, r3
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	b29b      	uxth	r3, r3
 800550e:	4313      	orrs	r3, r2
 8005510:	b29a      	uxth	r2, r3
 8005512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e02a      	b.n	800556e <USB_EPStartXfer+0x6a6>
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d122      	bne.n	800556e <USB_EPStartXfer+0x6a6>
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	653b      	str	r3, [r7, #80]	@ 0x50
 8005534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005548:	4413      	add	r3, r2
 800554a:	653b      	str	r3, [r7, #80]	@ 0x50
 800554c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800555c:	4413      	add	r3, r2
 800555e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005568:	b29a      	uxth	r2, r3
 800556a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	891b      	ldrh	r3, [r3, #8]
 800557a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558e:	b29b      	uxth	r3, r3
 8005590:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005594:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005598:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800559c:	6800      	ldr	r0, [r0, #0]
 800559e:	f001 f982 	bl	80068a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b2:	441a      	add	r2, r3
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d90f      	bls.n	80055fc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	1ad2      	subs	r2, r2, r3
 80055ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	621a      	str	r2, [r3, #32]
 80055fa:	e00e      	b.n	800561a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800560c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800561a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	643b      	str	r3, [r7, #64]	@ 0x40
 8005626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d177      	bne.n	8005726 <USB_EPStartXfer+0x85e>
 8005636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	4413      	add	r3, r2
 8005658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800565a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011a      	lsls	r2, r3, #4
 8005668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566a:	4413      	add	r3, r2
 800566c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800567c:	b29a      	uxth	r2, r3
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	2b3e      	cmp	r3, #62	@ 0x3e
 8005688:	d921      	bls.n	80056ce <USB_EPStartXfer+0x806>
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <USB_EPStartXfer+0x7e2>
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	3b01      	subs	r3, #1
 80056a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	029b      	lsls	r3, r3, #10
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b29b      	uxth	r3, r3
 80056be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e050      	b.n	8005770 <USB_EPStartXfer+0x8a8>
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <USB_EPStartXfer+0x824>
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e041      	b.n	8005770 <USB_EPStartXfer+0x8a8>
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <USB_EPStartXfer+0x844>
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005706:	3301      	adds	r3, #1
 8005708:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800570c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29a      	uxth	r2, r3
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	b29b      	uxth	r3, r3
 8005718:	029b      	lsls	r3, r3, #10
 800571a:	b29b      	uxth	r3, r3
 800571c:	4313      	orrs	r3, r2
 800571e:	b29a      	uxth	r2, r3
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	e024      	b.n	8005770 <USB_EPStartXfer+0x8a8>
 8005726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d11c      	bne.n	8005770 <USB_EPStartXfer+0x8a8>
 8005736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	461a      	mov	r2, r3
 8005748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574a:	4413      	add	r3, r2
 800574c:	643b      	str	r3, [r7, #64]	@ 0x40
 800574e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	011a      	lsls	r2, r3, #4
 800575c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575e:	4413      	add	r3, r2
 8005760:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	b29a      	uxth	r2, r3
 800576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	895b      	ldrh	r3, [r3, #10]
 800577c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6959      	ldr	r1, [r3, #20]
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005790:	b29b      	uxth	r3, r3
 8005792:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005796:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800579a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	f001 f881 	bl	80068a6 <USB_WritePMA>
 80057a4:	e227      	b.n	8005bf6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005802:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800580a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580e:	b29b      	uxth	r3, r3
 8005810:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800581e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005832:	4413      	add	r3, r2
 8005834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	011a      	lsls	r2, r3, #4
 8005844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005846:	4413      	add	r3, r2
 8005848:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800584c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005852:	b29a      	uxth	r2, r3
 8005854:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005856:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	891b      	ldrh	r3, [r3, #8]
 8005864:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6959      	ldr	r1, [r3, #20]
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	b29b      	uxth	r3, r3
 800587a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800587e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005882:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005886:	6800      	ldr	r0, [r0, #0]
 8005888:	f001 f80d 	bl	80068a6 <USB_WritePMA>
 800588c:	e1b3      	b.n	8005bf6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80c6 	beq.w	8005a60 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	673b      	str	r3, [r7, #112]	@ 0x70
 80058e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d177      	bne.n	80059e0 <USB_EPStartXfer+0xb18>
 80058f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005910:	4413      	add	r3, r2
 8005912:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011a      	lsls	r2, r3, #4
 8005922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005924:	4413      	add	r3, r2
 8005926:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800592a:	667b      	str	r3, [r7, #100]	@ 0x64
 800592c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005936:	b29a      	uxth	r2, r3
 8005938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005940:	2b3e      	cmp	r3, #62	@ 0x3e
 8005942:	d921      	bls.n	8005988 <USB_EPStartXfer+0xac0>
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_EPStartXfer+0xa9c>
 800595a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800595e:	3b01      	subs	r3, #1
 8005960:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29b      	uxth	r3, r3
 8005974:	4313      	orrs	r3, r2
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005980:	b29a      	uxth	r2, r3
 8005982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e050      	b.n	8005a2a <USB_EPStartXfer+0xb62>
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <USB_EPStartXfer+0xade>
 8005990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	e041      	b.n	8005a2a <USB_EPStartXfer+0xb62>
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d004      	beq.n	80059c6 <USB_EPStartXfer+0xafe>
 80059bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059c0:	3301      	adds	r3, #1
 80059c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e024      	b.n	8005a2a <USB_EPStartXfer+0xb62>
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d11c      	bne.n	8005a2a <USB_EPStartXfer+0xb62>
 80059f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a04:	4413      	add	r3, r2
 8005a06:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	011a      	lsls	r2, r3, #4
 8005a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a18:	4413      	add	r3, r2
 8005a1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	895b      	ldrh	r3, [r3, #10]
 8005a36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6959      	ldr	r1, [r3, #20]
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a58:	6800      	ldr	r0, [r0, #0]
 8005a5a:	f000 ff24 	bl	80068a6 <USB_WritePMA>
 8005a5e:	e0ca      	b.n	8005bf6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	785b      	ldrb	r3, [r3, #1]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d177      	bne.n	8005b60 <USB_EPStartXfer+0xc98>
 8005a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a90:	4413      	add	r3, r2
 8005a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	011a      	lsls	r2, r3, #4
 8005aa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ac2:	d921      	bls.n	8005b08 <USB_EPStartXfer+0xc40>
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <USB_EPStartXfer+0xc1c>
 8005ada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	029b      	lsls	r3, r3, #10
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	e05c      	b.n	8005bc2 <USB_EPStartXfer+0xcfa>
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <USB_EPStartXfer+0xc5e>
 8005b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e04d      	b.n	8005bc2 <USB_EPStartXfer+0xcfa>
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <USB_EPStartXfer+0xc7e>
 8005b3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b40:	3301      	adds	r3, #1
 8005b42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	029b      	lsls	r3, r3, #10
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5c:	801a      	strh	r2, [r3, #0]
 8005b5e:	e030      	b.n	8005bc2 <USB_EPStartXfer+0xcfa>
 8005b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d128      	bne.n	8005bc2 <USB_EPStartXfer+0xcfa>
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b94:	4413      	add	r3, r2
 8005b96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	011a      	lsls	r2, r3, #4
 8005ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	891b      	ldrh	r3, [r3, #8]
 8005bce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6959      	ldr	r1, [r3, #20]
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005be8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bf0:	6800      	ldr	r0, [r0, #0]
 8005bf2:	f000 fe58 	bl	80068a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	817b      	strh	r3, [r7, #10]
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	f083 0310 	eor.w	r3, r3, #16
 8005c24:	817b      	strh	r3, [r7, #10]
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	f083 0320 	eor.w	r3, r3, #32
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	897b      	ldrh	r3, [r7, #10]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
 8005c5e:	f000 bcde 	b.w	800661e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	7b1b      	ldrb	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 80bb 	bne.w	8005dea <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d917      	bls.n	8005cc0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	1ad2      	subs	r2, r2, r3
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	619a      	str	r2, [r3, #24]
 8005cbe:	e00e      	b.n	8005cde <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d02:	4413      	add	r3, r2
 8005d04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	011a      	lsls	r2, r3, #4
 8005d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3e:	d924      	bls.n	8005d8a <USB_EPStartXfer+0xec2>
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d104      	bne.n	8005d60 <USB_EPStartXfer+0xe98>
 8005d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	029b      	lsls	r3, r3, #10
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4313      	orrs	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	f000 bc10 	b.w	80065aa <USB_EPStartXfer+0x16e2>
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10c      	bne.n	8005dac <USB_EPStartXfer+0xee4>
 8005d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e3fe      	b.n	80065aa <USB_EPStartXfer+0x16e2>
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <USB_EPStartXfer+0xf04>
 8005dc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	029b      	lsls	r3, r3, #10
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	4313      	orrs	r3, r2
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	e3df      	b.n	80065aa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	f040 8218 	bne.w	800622c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f040 809d 	bne.w	8005f48 <USB_EPStartXfer+0x1080>
 8005e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e32:	4413      	add	r3, r2
 8005e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	011a      	lsls	r2, r3, #4
 8005e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e76:	d92b      	bls.n	8005ed0 <USB_EPStartXfer+0x1008>
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0xfe0>
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e070      	b.n	8005fb2 <USB_EPStartXfer+0x10ea>
 8005ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10c      	bne.n	8005efa <USB_EPStartXfer+0x1032>
 8005ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e05b      	b.n	8005fb2 <USB_EPStartXfer+0x10ea>
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <USB_EPStartXfer+0x1062>
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f24:	3301      	adds	r3, #1
 8005f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	e034      	b.n	8005fb2 <USB_EPStartXfer+0x10ea>
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d12c      	bne.n	8005fb2 <USB_EPStartXfer+0x10ea>
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f040 809d 	bne.w	800610c <USB_EPStartXfer+0x1244>
 8005fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800600e:	4413      	add	r3, r2
 8006010:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b3e      	cmp	r3, #62	@ 0x3e
 800603a:	d92b      	bls.n	8006094 <USB_EPStartXfer+0x11cc>
 800603c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800604e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <USB_EPStartXfer+0x11a4>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006066:	3b01      	subs	r3, #1
 8006068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006078:	b29b      	uxth	r3, r3
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b29b      	uxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e069      	b.n	8006168 <USB_EPStartXfer+0x12a0>
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10c      	bne.n	80060be <USB_EPStartXfer+0x11f6>
 80060a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	e054      	b.n	8006168 <USB_EPStartXfer+0x12a0>
 80060be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <USB_EPStartXfer+0x1226>
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e8:	3301      	adds	r3, #1
 80060ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e02d      	b.n	8006168 <USB_EPStartXfer+0x12a0>
 800610c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d125      	bne.n	8006168 <USB_EPStartXfer+0x12a0>
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800614a:	4413      	add	r3, r2
 800614c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006150:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006166:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8218 	beq.w	80065aa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800619a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800619e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <USB_EPStartXfer+0x12ea>
 80061a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f040 81f5 	bne.w	80065aa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 81ee 	bne.w	80065aa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	441a      	add	r2, r3
 8006212:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006222:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006226:	b29b      	uxth	r3, r3
 8006228:	8013      	strh	r3, [r2, #0]
 800622a:	e1be      	b.n	80065aa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	78db      	ldrb	r3, [r3, #3]
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 81b4 	bne.w	80065a6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800623e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d917      	bls.n	800628a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800625a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	619a      	str	r2, [r3, #24]
 8006288:	e00e      	b.n	80062a8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800628a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8085 	bne.w	80063c4 <USB_EPStartXfer+0x14fc>
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062de:	4413      	add	r3, r2
 80062e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	011a      	lsls	r2, r3, #4
 80062f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062f6:	4413      	add	r3, r2
 80062f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800630c:	b29a      	uxth	r2, r3
 800630e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	2b3e      	cmp	r3, #62	@ 0x3e
 800631a:	d923      	bls.n	8006364 <USB_EPStartXfer+0x149c>
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <USB_EPStartXfer+0x1474>
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006336:	3b01      	subs	r3, #1
 8006338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800633c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006348:	b29b      	uxth	r3, r3
 800634a:	029b      	lsls	r3, r3, #10
 800634c:	b29b      	uxth	r3, r3
 800634e:	4313      	orrs	r3, r2
 8006350:	b29b      	uxth	r3, r3
 8006352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800635a:	b29a      	uxth	r2, r3
 800635c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e060      	b.n	8006426 <USB_EPStartXfer+0x155e>
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <USB_EPStartXfer+0x14be>
 800636c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e04f      	b.n	8006426 <USB_EPStartXfer+0x155e>
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <USB_EPStartXfer+0x14de>
 800639c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	029b      	lsls	r3, r3, #10
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	4313      	orrs	r3, r2
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e030      	b.n	8006426 <USB_EPStartXfer+0x155e>
 80063c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d128      	bne.n	8006426 <USB_EPStartXfer+0x155e>
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063f8:	4413      	add	r3, r2
 80063fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006410:	4413      	add	r3, r2
 8006412:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006416:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641e:	b29a      	uxth	r2, r3
 8006420:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 8085 	bne.w	8006550 <USB_EPStartXfer+0x1688>
 8006446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800646a:	4413      	add	r3, r2
 800646c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	011a      	lsls	r2, r3, #4
 800647e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006482:	4413      	add	r3, r2
 8006484:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800648c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a6:	d923      	bls.n	80064f0 <USB_EPStartXfer+0x1628>
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USB_EPStartXfer+0x1600>
 80064be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064c2:	3b01      	subs	r3, #1
 80064c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	029b      	lsls	r3, r3, #10
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	b29b      	uxth	r3, r3
 80064de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e05c      	b.n	80065aa <USB_EPStartXfer+0x16e2>
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10c      	bne.n	8006512 <USB_EPStartXfer+0x164a>
 80064f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	e04b      	b.n	80065aa <USB_EPStartXfer+0x16e2>
 8006512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <USB_EPStartXfer+0x166a>
 8006528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800652c:	3301      	adds	r3, #1
 800652e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800653e:	b29b      	uxth	r3, r3
 8006540:	029b      	lsls	r3, r3, #10
 8006542:	b29b      	uxth	r3, r3
 8006544:	4313      	orrs	r3, r2
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e02c      	b.n	80065aa <USB_EPStartXfer+0x16e2>
 8006550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d124      	bne.n	80065aa <USB_EPStartXfer+0x16e2>
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006576:	4413      	add	r3, r2
 8006578:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800658e:	4413      	add	r3, r2
 8006590:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006594:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e001      	b.n	80065aa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e03a      	b.n	8006620 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	441a      	add	r2, r3
 8006606:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800660a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d020      	beq.n	800667e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006652:	81bb      	strh	r3, [r7, #12]
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	f083 0310 	eor.w	r3, r3, #16
 800665a:	81bb      	strh	r3, [r7, #12]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	89bb      	ldrh	r3, [r7, #12]
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
 800667c:	e01f      	b.n	80066be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006694:	81fb      	strh	r3, [r7, #14]
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800669c:	81fb      	strh	r3, [r7, #14]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr

080066ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	7b1b      	ldrb	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f040 809d 	bne.w	8006818 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d04c      	beq.n	8006780 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	823b      	strh	r3, [r7, #16]
 80066f4:	8a3b      	ldrh	r3, [r7, #16]
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01b      	beq.n	8006736 <USB_EPClearStall+0x6c>
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	78db      	ldrb	r3, [r3, #3]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d06c      	beq.n	8006818 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006754:	81bb      	strh	r3, [r7, #12]
 8006756:	89bb      	ldrh	r3, [r7, #12]
 8006758:	f083 0320 	eor.w	r3, r3, #32
 800675c:	81bb      	strh	r3, [r7, #12]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	441a      	add	r2, r3
 8006768:	89bb      	ldrh	r3, [r7, #12]
 800676a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	b29b      	uxth	r3, r3
 800677c:	8013      	strh	r3, [r2, #0]
 800677e:	e04b      	b.n	8006818 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	82fb      	strh	r3, [r7, #22]
 800678e:	8afb      	ldrh	r3, [r7, #22]
 8006790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <USB_EPClearStall+0x106>
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ae:	82bb      	strh	r3, [r7, #20]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	8abb      	ldrh	r3, [r7, #20]
 80067bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e6:	827b      	strh	r3, [r7, #18]
 80067e8:	8a7b      	ldrh	r3, [r7, #18]
 80067ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067ee:	827b      	strh	r3, [r7, #18]
 80067f0:	8a7b      	ldrh	r3, [r7, #18]
 80067f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067f6:	827b      	strh	r3, [r7, #18]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	8a7b      	ldrh	r3, [r7, #18]
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800680c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d103      	bne.n	800683e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2280      	movs	r2, #128	@ 0x80
 800683a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr

0800684a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006880:	b29b      	uxth	r3, r3
 8006882:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006884:	68fb      	ldr	r3, [r7, #12]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b08b      	sub	sp, #44	@ 0x2c
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	4611      	mov	r1, r2
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	80fb      	strh	r3, [r7, #6]
 80068b8:	4613      	mov	r3, r2
 80068ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068bc:	88bb      	ldrh	r3, [r7, #4]
 80068be:	3301      	adds	r3, #1
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	005a      	lsls	r2, r3, #1
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	e01f      	b.n	8006920 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3301      	adds	r3, #1
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	b21a      	sxth	r2, r3
 80068f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	8a7a      	ldrh	r2, [r7, #18]
 8006900:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	3302      	adds	r3, #2
 8006906:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	3302      	adds	r3, #2
 800690c:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3301      	adds	r3, #1
 8006912:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	3301      	adds	r3, #1
 8006918:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	3b01      	subs	r3, #1
 800691e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1dc      	bne.n	80068e0 <USB_WritePMA+0x3a>
  }
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	372c      	adds	r7, #44	@ 0x2c
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006932:	b480      	push	{r7}
 8006934:	b08b      	sub	sp, #44	@ 0x2c
 8006936:	af00      	add	r7, sp, #0
 8006938:	60f8      	str	r0, [r7, #12]
 800693a:	60b9      	str	r1, [r7, #8]
 800693c:	4611      	mov	r1, r2
 800693e:	461a      	mov	r2, r3
 8006940:	460b      	mov	r3, r1
 8006942:	80fb      	strh	r3, [r7, #6]
 8006944:	4613      	mov	r3, r2
 8006946:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006948:	88bb      	ldrh	r3, [r7, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	b29b      	uxth	r3, r3
 800694e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	005a      	lsls	r2, r3, #1
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006964:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	627b      	str	r3, [r7, #36]	@ 0x24
 800696a:	e01b      	b.n	80069a4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3302      	adds	r3, #2
 8006978:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	b2da      	uxtb	r2, r3
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	3302      	adds	r3, #2
 800699c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	3b01      	subs	r3, #1
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e0      	bne.n	800696c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80069aa:	88bb      	ldrh	r3, [r7, #4]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	701a      	strb	r2, [r3, #0]
  }
}
 80069c6:	bf00      	nop
 80069c8:	372c      	adds	r7, #44	@ 0x2c
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7c1b      	ldrb	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d115      	bne.n	8006a14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069ec:	2202      	movs	r2, #2
 80069ee:	2181      	movs	r1, #129	@ 0x81
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 feb6 	bl	8008762 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a00:	2202      	movs	r2, #2
 8006a02:	2101      	movs	r1, #1
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 feac 	bl	8008762 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006a12:	e012      	b.n	8006a3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a14:	2340      	movs	r3, #64	@ 0x40
 8006a16:	2202      	movs	r2, #2
 8006a18:	2181      	movs	r1, #129	@ 0x81
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fea1 	bl	8008762 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a26:	2340      	movs	r3, #64	@ 0x40
 8006a28:	2202      	movs	r2, #2
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 fe98 	bl	8008762 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	2203      	movs	r2, #3
 8006a3e:	2182      	movs	r1, #130	@ 0x82
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fe8e 	bl	8008762 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a50:	f001 ffae 	bl	80089b0 <USBD_static_malloc>
 8006a54:	4602      	mov	r2, r0
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d102      	bne.n	8006a6c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a66:	2301      	movs	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	e026      	b.n	8006aba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a72:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 ff4d 	bl	8008942 <USBD_LL_PrepareReceive>
 8006aa8:	e007      	b.n	8006aba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ab0:	2340      	movs	r3, #64	@ 0x40
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 ff44 	bl	8008942 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ad4:	2181      	movs	r1, #129	@ 0x81
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fe69 	bl	80087ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 fe62 	bl	80087ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006af2:	2182      	movs	r1, #130	@ 0x82
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 fe5a 	bl	80087ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 ff54 	bl	80089c8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b42:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d039      	beq.n	8006bd0 <USBD_CDC_Setup+0x9e>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d17f      	bne.n	8006c60 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	88db      	ldrh	r3, [r3, #6]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d029      	beq.n	8006bbc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da11      	bge.n	8006b96 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	88d2      	ldrh	r2, [r2, #6]
 8006b84:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b86:	6939      	ldr	r1, [r7, #16]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 fa06 	bl	8007fa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b94:	e06b      	b.n	8006c6e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785a      	ldrb	r2, [r3, #1]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	88db      	ldrh	r3, [r3, #6]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bac:	6939      	ldr	r1, [r7, #16]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	88db      	ldrh	r3, [r3, #6]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fa21 	bl	8007ffc <USBD_CtlPrepareRx>
      break;
 8006bba:	e058      	b.n	8006c6e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	7850      	ldrb	r0, [r2, #1]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	4798      	blx	r3
      break;
 8006bce:	e04e      	b.n	8006c6e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	785b      	ldrb	r3, [r3, #1]
 8006bd4:	2b0b      	cmp	r3, #11
 8006bd6:	d02e      	beq.n	8006c36 <USBD_CDC_Setup+0x104>
 8006bd8:	2b0b      	cmp	r3, #11
 8006bda:	dc38      	bgt.n	8006c4e <USBD_CDC_Setup+0x11c>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <USBD_CDC_Setup+0xb4>
 8006be0:	2b0a      	cmp	r3, #10
 8006be2:	d014      	beq.n	8006c0e <USBD_CDC_Setup+0xdc>
 8006be4:	e033      	b.n	8006c4e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d107      	bne.n	8006c00 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bf0:	f107 030c 	add.w	r3, r7, #12
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f9d1 	bl	8007fa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bfe:	e02e      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f962 	bl	8007ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0c:	e027      	b.n	8006c5e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d107      	bne.n	8006c28 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c18:	f107 030f 	add.w	r3, r7, #15
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f9bd 	bl	8007fa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c26:	e01a      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 f94e 	bl	8007ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c30:	2302      	movs	r3, #2
 8006c32:	75fb      	strb	r3, [r7, #23]
          break;
 8006c34:	e013      	b.n	8006c5e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d00d      	beq.n	8006c5c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 f942 	bl	8007ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c4c:	e006      	b.n	8006c5c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f93b 	bl	8007ecc <USBD_CtlError>
          ret = USBD_FAIL;
 8006c56:	2302      	movs	r3, #2
 8006c58:	75fb      	strb	r3, [r7, #23]
          break;
 8006c5a:	e000      	b.n	8006c5e <USBD_CDC_Setup+0x12c>
          break;
 8006c5c:	bf00      	nop
      }
      break;
 8006c5e:	e006      	b.n	8006c6e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f932 	bl	8007ecc <USBD_CtlError>
      ret = USBD_FAIL;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6c:	bf00      	nop
  }

  return ret;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c8a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c92:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03a      	beq.n	8006d14 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	331c      	adds	r3, #28
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d029      	beq.n	8006d08 <USBD_CDC_DataIn+0x90>
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	331c      	adds	r3, #28
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	78f9      	ldrb	r1, [r7, #3]
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4403      	add	r3, r0
 8006cd4:	3320      	adds	r3, #32
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d110      	bne.n	8006d08 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	331c      	adds	r3, #28
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cfa:	78f9      	ldrb	r1, [r7, #3]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fdfb 	bl	80088fc <USBD_LL_Transmit>
 8006d06:	e003      	b.n	8006d10 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	460b      	mov	r3, r1
 8006d28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fe26 	bl	8008988 <USBD_LL_GetRxDataSize>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006d62:	4611      	mov	r1, r2
 8006d64:	4798      	blx	r3

    return USBD_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d82:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d014      	beq.n	8006db8 <USBD_CDC_EP0_RxReady+0x44>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d94:	2bff      	cmp	r3, #255	@ 0xff
 8006d96:	d00f      	beq.n	8006db8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006da6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	22ff      	movs	r2, #255	@ 0xff
 8006db4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2243      	movs	r2, #67	@ 0x43
 8006dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dd2:	4b03      	ldr	r3, [pc, #12]	@ (8006de0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20000098 	.word	0x20000098

08006de4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2243      	movs	r2, #67	@ 0x43
 8006df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006df2:	4b03      	ldr	r3, [pc, #12]	@ (8006e00 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000054 	.word	0x20000054

08006e04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2243      	movs	r2, #67	@ 0x43
 8006e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	@ (8006e20 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	200000dc 	.word	0x200000dc

08006e24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	220a      	movs	r2, #10
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	@ (8006e40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000010 	.word	0x20000010

08006e44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr

08006e70 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e84:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e8e:	88fa      	ldrh	r2, [r7, #6]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr

08006ea2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01c      	beq.n	8006f1c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2181      	movs	r1, #129	@ 0x81
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fcf4 	bl	80088fc <USBD_LL_Transmit>

      return USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e002      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b084      	sub	sp, #16
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d017      	beq.n	8006f70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	7c1b      	ldrb	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f52:	2101      	movs	r1, #1
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fcf4 	bl	8008942 <USBD_LL_PrepareReceive>
 8006f5a:	e007      	b.n	8006f6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f62:	2340      	movs	r3, #64	@ 0x40
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fceb 	bl	8008942 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e01a      	b.n	8006fc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	79fa      	ldrb	r2, [r7, #7]
 8006fbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f001 fb59 	bl	8008678 <USBD_LL_Init>

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d006      	beq.n	8006ff2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e001      	b.n	8006ff6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr

08007002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fb8e 	bl	800872c <USBD_LL_Start>

  return USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr

0800702e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800703a:	2302      	movs	r3, #2
 800703c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fed8 	bl	8007e5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070b8:	461a      	mov	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d016      	beq.n	80070fc <USBD_LL_SetupStage+0x6a>
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d81c      	bhi.n	800710c <USBD_LL_SetupStage+0x7a>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <USBD_LL_SetupStage+0x4a>
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d008      	beq.n	80070ec <USBD_LL_SetupStage+0x5a>
 80070da:	e017      	b.n	800710c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f9cb 	bl	8007480 <USBD_StdDevReq>
      break;
 80070ea:	e01a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa2d 	bl	8007554 <USBD_StdItfReq>
      break;
 80070fa:	e012      	b.n	8007122 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa6d 	bl	80075e4 <USBD_StdEPReq>
      break;
 800710a:	e00a      	b.n	8007122 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007112:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007116:	b2db      	uxtb	r3, r3
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fb66 	bl	80087ec <USBD_LL_StallEP>
      break;
 8007120:	bf00      	nop
  }

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d14b      	bne.n	80071d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007146:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800714e:	2b03      	cmp	r3, #3
 8007150:	d134      	bne.n	80071bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d919      	bls.n	8007192 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007174:	429a      	cmp	r2, r3
 8007176:	d203      	bcs.n	8007180 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800717c:	b29b      	uxth	r3, r3
 800717e:	e002      	b.n	8007186 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007184:	b29b      	uxth	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 ff54 	bl	8008038 <USBD_CtlContinueRx>
 8007190:	e038      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d105      	bne.n	80071b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 ff51 	bl	800805c <USBD_CtlSendStatus>
 80071ba:	e023      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	d11e      	bne.n	8007204 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f001 fb0b 	bl	80087ec <USBD_LL_StallEP>
 80071d6:	e015      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d108      	bne.n	8007200 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	7afa      	ldrb	r2, [r7, #11]
 80071f8:	4611      	mov	r1, r2
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	4798      	blx	r3
 80071fe:	e001      	b.n	8007204 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	e000      	b.n	8007206 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	460b      	mov	r3, r1
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d17f      	bne.n	8007322 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3314      	adds	r3, #20
 8007226:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800722e:	2b02      	cmp	r3, #2
 8007230:	d15c      	bne.n	80072ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d915      	bls.n	800726a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	b29b      	uxth	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 febe 	bl	8007fd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f001 fb6d 	bl	8008942 <USBD_LL_PrepareReceive>
 8007268:	e04e      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	6912      	ldr	r2, [r2, #16]
 8007272:	fbb3 f1f2 	udiv	r1, r3, r2
 8007276:	fb01 f202 	mul.w	r2, r1, r2
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11c      	bne.n	80072ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007288:	429a      	cmp	r2, r3
 800728a:	d316      	bcc.n	80072ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007296:	429a      	cmp	r2, r3
 8007298:	d20f      	bcs.n	80072ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fe9a 	bl	8007fd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ac:	2300      	movs	r3, #0
 80072ae:	2200      	movs	r2, #0
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 fb45 	bl	8008942 <USBD_LL_PrepareReceive>
 80072b8:	e026      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d105      	bne.n	80072dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072dc:	2180      	movs	r1, #128	@ 0x80
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 fa84 	bl	80087ec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fecc 	bl	8008082 <USBD_CtlReceiveStatus>
 80072ea:	e00d      	b.n	8007308 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d004      	beq.n	8007300 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d103      	bne.n	8007308 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	@ 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 fa72 	bl	80087ec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d11d      	bne.n	800734e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f7ff fe81 	bl	800701a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007320:	e015      	b.n	800734e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007334:	2b03      	cmp	r3, #3
 8007336:	d108      	bne.n	800734a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	7afa      	ldrb	r2, [r7, #11]
 8007342:	4611      	mov	r1, r2
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	4798      	blx	r3
 8007348:	e001      	b.n	800734e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800734a:	2302      	movs	r3, #2
 800734c:	e000      	b.n	8007350 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007360:	2340      	movs	r3, #64	@ 0x40
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f9fb 	bl	8008762 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2240      	movs	r2, #64	@ 0x40
 8007378:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800737c:	2340      	movs	r3, #64	@ 0x40
 800737e:	2200      	movs	r2, #0
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f9ed 	bl	8008762 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2240      	movs	r2, #64	@ 0x40
 8007392:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d009      	beq.n	80073d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6852      	ldr	r2, [r2, #4]
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	4611      	mov	r1, r2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
  }

  return USBD_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742e:	2b04      	cmp	r3, #4
 8007430:	d105      	bne.n	800743e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007458:	2b03      	cmp	r3, #3
 800745a:	d10b      	bne.n	8007474 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d005      	beq.n	80074a6 <USBD_StdDevReq+0x26>
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d84f      	bhi.n	800753e <USBD_StdDevReq+0xbe>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d009      	beq.n	80074b6 <USBD_StdDevReq+0x36>
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d14b      	bne.n	800753e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	4798      	blx	r3
      break;
 80074b4:	e048      	b.n	8007548 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d839      	bhi.n	8007532 <USBD_StdDevReq+0xb2>
 80074be:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <USBD_StdDevReq+0x44>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	08007515 	.word	0x08007515
 80074c8:	08007529 	.word	0x08007529
 80074cc:	08007533 	.word	0x08007533
 80074d0:	0800751f 	.word	0x0800751f
 80074d4:	08007533 	.word	0x08007533
 80074d8:	080074f7 	.word	0x080074f7
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	08007533 	.word	0x08007533
 80074e4:	0800750b 	.word	0x0800750b
 80074e8:	08007501 	.word	0x08007501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9dc 	bl	80078ac <USBD_GetDescriptor>
          break;
 80074f4:	e022      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb3f 	bl	8007b7c <USBD_SetAddress>
          break;
 80074fe:	e01d      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fb7e 	bl	8007c04 <USBD_SetConfig>
          break;
 8007508:	e018      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc07 	bl	8007d20 <USBD_GetConfig>
          break;
 8007512:	e013      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc37 	bl	8007d8a <USBD_GetStatus>
          break;
 800751c:	e00e      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fc65 	bl	8007df0 <USBD_SetFeature>
          break;
 8007526:	e009      	b.n	800753c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fc74 	bl	8007e18 <USBD_ClrFeature>
          break;
 8007530:	e004      	b.n	800753c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fcc9 	bl	8007ecc <USBD_CtlError>
          break;
 800753a:	bf00      	nop
      }
      break;
 800753c:	e004      	b.n	8007548 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fcc3 	bl	8007ecc <USBD_CtlError>
      break;
 8007546:	bf00      	nop
  }

  return ret;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop

08007554 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d005      	beq.n	800757a <USBD_StdItfReq+0x26>
 800756e:	2b40      	cmp	r3, #64	@ 0x40
 8007570:	d82e      	bhi.n	80075d0 <USBD_StdItfReq+0x7c>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <USBD_StdItfReq+0x26>
 8007576:	2b20      	cmp	r3, #32
 8007578:	d12a      	bne.n	80075d0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007580:	3b01      	subs	r3, #1
 8007582:	2b02      	cmp	r3, #2
 8007584:	d81d      	bhi.n	80075c2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	889b      	ldrh	r3, [r3, #4]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	d813      	bhi.n	80075b8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d110      	bne.n	80075cc <USBD_StdItfReq+0x78>
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10d      	bne.n	80075cc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fd53 	bl	800805c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075b6:	e009      	b.n	80075cc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc86 	bl	8007ecc <USBD_CtlError>
          break;
 80075c0:	e004      	b.n	80075cc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fc81 	bl	8007ecc <USBD_CtlError>
          break;
 80075ca:	e000      	b.n	80075ce <USBD_StdItfReq+0x7a>
          break;
 80075cc:	bf00      	nop
      }
      break;
 80075ce:	e004      	b.n	80075da <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc7a 	bl	8007ecc <USBD_CtlError>
      break;
 80075d8:	bf00      	nop
  }

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	889b      	ldrh	r3, [r3, #4]
 80075f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007600:	2b40      	cmp	r3, #64	@ 0x40
 8007602:	d007      	beq.n	8007614 <USBD_StdEPReq+0x30>
 8007604:	2b40      	cmp	r3, #64	@ 0x40
 8007606:	f200 8146 	bhi.w	8007896 <USBD_StdEPReq+0x2b2>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <USBD_StdEPReq+0x40>
 800760e:	2b20      	cmp	r3, #32
 8007610:	f040 8141 	bne.w	8007896 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
      break;
 8007622:	e13d      	b.n	80078a0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800762c:	2b20      	cmp	r3, #32
 800762e:	d10a      	bne.n	8007646 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	4798      	blx	r3
 800763e:	4603      	mov	r3, r0
 8007640:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	e12d      	b.n	80078a2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	785b      	ldrb	r3, [r3, #1]
 800764a:	2b03      	cmp	r3, #3
 800764c:	d007      	beq.n	800765e <USBD_StdEPReq+0x7a>
 800764e:	2b03      	cmp	r3, #3
 8007650:	f300 811b 	bgt.w	800788a <USBD_StdEPReq+0x2a6>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d072      	beq.n	800773e <USBD_StdEPReq+0x15a>
 8007658:	2b01      	cmp	r3, #1
 800765a:	d03a      	beq.n	80076d2 <USBD_StdEPReq+0xee>
 800765c:	e115      	b.n	800788a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007664:	2b02      	cmp	r3, #2
 8007666:	d002      	beq.n	800766e <USBD_StdEPReq+0x8a>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d015      	beq.n	8007698 <USBD_StdEPReq+0xb4>
 800766c:	e02b      	b.n	80076c6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00c      	beq.n	800768e <USBD_StdEPReq+0xaa>
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d009      	beq.n	800768e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f8b4 	bl	80087ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007684:	2180      	movs	r1, #128	@ 0x80
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f8b0 	bl	80087ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800768c:	e020      	b.n	80076d0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fc1b 	bl	8007ecc <USBD_CtlError>
              break;
 8007696:	e01b      	b.n	80076d0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10e      	bne.n	80076be <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <USBD_StdEPReq+0xda>
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b80      	cmp	r3, #128	@ 0x80
 80076aa:	d008      	beq.n	80076be <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	88db      	ldrh	r3, [r3, #6]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f001 f897 	bl	80087ec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fccc 	bl	800805c <USBD_CtlSendStatus>

              break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fbff 	bl	8007ecc <USBD_CtlError>
              break;
 80076ce:	bf00      	nop
          }
          break;
 80076d0:	e0e0      	b.n	8007894 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d002      	beq.n	80076e2 <USBD_StdEPReq+0xfe>
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d015      	beq.n	800770c <USBD_StdEPReq+0x128>
 80076e0:	e026      	b.n	8007730 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00c      	beq.n	8007702 <USBD_StdEPReq+0x11e>
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b80      	cmp	r3, #128	@ 0x80
 80076ec:	d009      	beq.n	8007702 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f87a 	bl	80087ec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076f8:	2180      	movs	r1, #128	@ 0x80
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f876 	bl	80087ec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007700:	e01c      	b.n	800773c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fbe1 	bl	8007ecc <USBD_CtlError>
              break;
 800770a:	e017      	b.n	800773c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d112      	bne.n	800773a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771a:	2b00      	cmp	r3, #0
 800771c:	d004      	beq.n	8007728 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 f881 	bl	800882a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fc97 	bl	800805c <USBD_CtlSendStatus>
              }
              break;
 800772e:	e004      	b.n	800773a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fbca 	bl	8007ecc <USBD_CtlError>
              break;
 8007738:	e000      	b.n	800773c <USBD_StdEPReq+0x158>
              break;
 800773a:	bf00      	nop
          }
          break;
 800773c:	e0aa      	b.n	8007894 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007744:	2b02      	cmp	r3, #2
 8007746:	d002      	beq.n	800774e <USBD_StdEPReq+0x16a>
 8007748:	2b03      	cmp	r3, #3
 800774a:	d032      	beq.n	80077b2 <USBD_StdEPReq+0x1ce>
 800774c:	e097      	b.n	800787e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <USBD_StdEPReq+0x180>
 8007754:	7bbb      	ldrb	r3, [r7, #14]
 8007756:	2b80      	cmp	r3, #128	@ 0x80
 8007758:	d004      	beq.n	8007764 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fbb5 	bl	8007ecc <USBD_CtlError>
                break;
 8007762:	e091      	b.n	8007888 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da0b      	bge.n	8007784 <USBD_StdEPReq+0x1a0>
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	3310      	adds	r3, #16
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	e00b      	b.n	800779c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007784:	7bbb      	ldrb	r3, [r7, #14]
 8007786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4413      	add	r3, r2
 800779a:	3304      	adds	r3, #4
 800779c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2202      	movs	r2, #2
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fbf8 	bl	8007fa0 <USBD_CtlSendData>
              break;
 80077b0:	e06a      	b.n	8007888 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da11      	bge.n	80077de <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3318      	adds	r3, #24
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d117      	bne.n	8007804 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fb78 	bl	8007ecc <USBD_CtlError>
                  break;
 80077dc:	e054      	b.n	8007888 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb65 	bl	8007ecc <USBD_CtlError>
                  break;
 8007802:	e041      	b.n	8007888 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	da0b      	bge.n	8007824 <USBD_StdEPReq+0x240>
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	3310      	adds	r3, #16
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	4413      	add	r3, r2
 8007820:	3304      	adds	r3, #4
 8007822:	e00b      	b.n	800783c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	3304      	adds	r3, #4
 800783c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <USBD_StdEPReq+0x266>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d103      	bne.n	8007852 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e00e      	b.n	8007870 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f806 	bl	8008868 <USBD_LL_IsStallEP>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e002      	b.n	8007870 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2202      	movs	r2, #2
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fb92 	bl	8007fa0 <USBD_CtlSendData>
              break;
 800787c:	e004      	b.n	8007888 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb23 	bl	8007ecc <USBD_CtlError>
              break;
 8007886:	bf00      	nop
          }
          break;
 8007888:	e004      	b.n	8007894 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fb1d 	bl	8007ecc <USBD_CtlError>
          break;
 8007892:	bf00      	nop
      }
      break;
 8007894:	e004      	b.n	80078a0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fb17 	bl	8007ecc <USBD_CtlError>
      break;
 800789e:	bf00      	nop
  }

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	0a1b      	lsrs	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b01      	subs	r3, #1
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	f200 8128 	bhi.w	8007b22 <USBD_GetDescriptor+0x276>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <USBD_GetDescriptor+0x2c>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f5 	.word	0x080078f5
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	0800794d 	.word	0x0800794d
 80078e4:	08007b23 	.word	0x08007b23
 80078e8:	08007b23 	.word	0x08007b23
 80078ec:	08007ac3 	.word	0x08007ac3
 80078f0:	08007aef 	.word	0x08007aef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	7c12      	ldrb	r2, [r2, #16]
 8007900:	f107 0108 	add.w	r1, r7, #8
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
 8007908:	60f8      	str	r0, [r7, #12]
      break;
 800790a:	e112      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800791a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791c:	f107 0208 	add.w	r2, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	2202      	movs	r2, #2
 800792c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800792e:	e100      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007938:	f107 0208 	add.w	r2, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	2202      	movs	r2, #2
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e0f2      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b05      	cmp	r3, #5
 8007954:	f200 80ac 	bhi.w	8007ab0 <USBD_GetDescriptor+0x204>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USBD_GetDescriptor+0xb4>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007979 	.word	0x08007979
 8007964:	080079ad 	.word	0x080079ad
 8007968:	080079e1 	.word	0x080079e1
 800796c:	08007a15 	.word	0x08007a15
 8007970:	08007a49 	.word	0x08007a49
 8007974:	08007a7d 	.word	0x08007a7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799a:	e091      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa94 	bl	8007ecc <USBD_CtlError>
            err++;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	3301      	adds	r3, #1
 80079a8:	72fb      	strb	r3, [r7, #11]
          break;
 80079aa:	e089      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 0108 	add.w	r1, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ce:	e077      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa7a 	bl	8007ecc <USBD_CtlError>
            err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
          break;
 80079de:	e06f      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e05d      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa60 	bl	8007ecc <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e055      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e043      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa46 	bl	8007ecc <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e03b      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	7c12      	ldrb	r2, [r2, #16]
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	4610      	mov	r0, r2
 8007a66:	4798      	blx	r3
 8007a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6a:	e029      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa2c 	bl	8007ecc <USBD_CtlError>
            err++;
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	3301      	adds	r3, #1
 8007a78:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7a:	e021      	b.n	8007ac0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9e:	e00f      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa12 	bl	8007ecc <USBD_CtlError>
            err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
          break;
 8007aae:	e007      	b.n	8007ac0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fa0a 	bl	8007ecc <USBD_CtlError>
          err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007abe:	e038      	b.n	8007b32 <USBD_GetDescriptor+0x286>
 8007ac0:	e037      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7c1b      	ldrb	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad2:	f107 0208 	add.w	r2, r7, #8
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4798      	blx	r3
 8007ada:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007adc:	e029      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f9f3 	bl	8007ecc <USBD_CtlError>
        err++;
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	72fb      	strb	r3, [r7, #11]
      break;
 8007aec:	e021      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7c1b      	ldrb	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10d      	bne.n	8007b12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afe:	f107 0208 	add.w	r2, r7, #8
 8007b02:	4610      	mov	r0, r2
 8007b04:	4798      	blx	r3
 8007b06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	2207      	movs	r2, #7
 8007b0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b10:	e00f      	b.n	8007b32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9d9 	bl	8007ecc <USBD_CtlError>
        err++;
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b20:	e007      	b.n	8007b32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f9d1 	bl	8007ecc <USBD_CtlError>
      err++;
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b30:	bf00      	nop
  }

  if (err != 0U)
 8007b32:	7afb      	ldrb	r3, [r7, #11]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11c      	bne.n	8007b72 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d011      	beq.n	8007b62 <USBD_GetDescriptor+0x2b6>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88db      	ldrh	r3, [r3, #6]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00d      	beq.n	8007b62 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88da      	ldrh	r2, [r3, #6]
 8007b4a:	893b      	ldrh	r3, [r7, #8]
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	bf28      	it	cs
 8007b50:	4613      	movcs	r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b56:	893b      	ldrh	r3, [r7, #8]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa1f 	bl	8007fa0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	88db      	ldrh	r3, [r3, #6]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa76 	bl	800805c <USBD_CtlSendStatus>
 8007b70:	e000      	b.n	8007b74 <USBD_GetDescriptor+0x2c8>
    return;
 8007b72:	bf00      	nop
    }
  }
}
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	889b      	ldrh	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d130      	bne.n	8007bf0 <USBD_SetAddress+0x74>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	88db      	ldrh	r3, [r3, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d12c      	bne.n	8007bf0 <USBD_SetAddress+0x74>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b9c:	d828      	bhi.n	8007bf0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	885b      	ldrh	r3, [r3, #2]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d104      	bne.n	8007bbe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f988 	bl	8007ecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbc:	e01d      	b.n	8007bfa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fe77 	bl	80088be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fa43 	bl	800805c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be4:	e009      	b.n	8007bfa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bee:	e004      	b.n	8007bfa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f96a 	bl	8007ecc <USBD_CtlError>
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	885b      	ldrh	r3, [r3, #2]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	4b41      	ldr	r3, [pc, #260]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c18:	4b40      	ldr	r3, [pc, #256]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d904      	bls.n	8007c2a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f952 	bl	8007ecc <USBD_CtlError>
 8007c28:	e075      	b.n	8007d16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d002      	beq.n	8007c3a <USBD_SetConfig+0x36>
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d023      	beq.n	8007c80 <USBD_SetConfig+0x7c>
 8007c38:	e062      	b.n	8007d00 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c3a:	4b38      	ldr	r3, [pc, #224]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01a      	beq.n	8007c78 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c42:	4b36      	ldr	r3, [pc, #216]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2203      	movs	r2, #3
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c54:	4b31      	ldr	r3, [pc, #196]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff f9e7 	bl	800702e <USBD_SetClassConfig>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d104      	bne.n	8007c70 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f92f 	bl	8007ecc <USBD_CtlError>
            return;
 8007c6e:	e052      	b.n	8007d16 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9f3 	bl	800805c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c76:	e04e      	b.n	8007d16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9ef 	bl	800805c <USBD_CtlSendStatus>
        break;
 8007c7e:	e04a      	b.n	8007d16 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c80:	4b26      	ldr	r3, [pc, #152]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d112      	bne.n	8007cae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c90:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c9a:	4b20      	ldr	r3, [pc, #128]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7ff f9e3 	bl	800706c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f9d8 	bl	800805c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cac:	e033      	b.n	8007d16 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cae:	4b1b      	ldr	r3, [pc, #108]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d01d      	beq.n	8007cf8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff f9d1 	bl	800706c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cca:	4b14      	ldr	r3, [pc, #80]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cd4:	4b11      	ldr	r3, [pc, #68]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff f9a7 	bl	800702e <USBD_SetClassConfig>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d104      	bne.n	8007cf0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f8ef 	bl	8007ecc <USBD_CtlError>
            return;
 8007cee:	e012      	b.n	8007d16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f9b3 	bl	800805c <USBD_CtlSendStatus>
        break;
 8007cf6:	e00e      	b.n	8007d16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9af 	bl	800805c <USBD_CtlSendStatus>
        break;
 8007cfe:	e00a      	b.n	8007d16 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8e2 	bl	8007ecc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d08:	4b04      	ldr	r3, [pc, #16]	@ (8007d1c <USBD_SetConfig+0x118>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff f9ac 	bl	800706c <USBD_ClrClassConfig>
        break;
 8007d14:	bf00      	nop
    }
  }
}
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200003e8 	.word	0x200003e8

08007d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d004      	beq.n	8007d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8c9 	bl	8007ecc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d3a:	e022      	b.n	8007d82 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	dc02      	bgt.n	8007d4c <USBD_GetConfig+0x2c>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dc03      	bgt.n	8007d52 <USBD_GetConfig+0x32>
 8007d4a:	e015      	b.n	8007d78 <USBD_GetConfig+0x58>
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d00b      	beq.n	8007d68 <USBD_GetConfig+0x48>
 8007d50:	e012      	b.n	8007d78 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f91d 	bl	8007fa0 <USBD_CtlSendData>
        break;
 8007d66:	e00c      	b.n	8007d82 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f915 	bl	8007fa0 <USBD_CtlSendData>
        break;
 8007d76:	e004      	b.n	8007d82 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f8a6 	bl	8007ecc <USBD_CtlError>
        break;
 8007d80:	bf00      	nop
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d81e      	bhi.n	8007dde <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d004      	beq.n	8007db2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f88e 	bl	8007ecc <USBD_CtlError>
        break;
 8007db0:	e01a      	b.n	8007de8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f043 0202 	orr.w	r2, r3, #2
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8e2 	bl	8007fa0 <USBD_CtlSendData>
      break;
 8007ddc:	e004      	b.n	8007de8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f873 	bl	8007ecc <USBD_CtlError>
      break;
 8007de6:	bf00      	nop
  }
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d106      	bne.n	8007e10 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f926 	bl	800805c <USBD_CtlSendStatus>
  }
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d80b      	bhi.n	8007e46 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d10c      	bne.n	8007e50 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f90c 	bl	800805c <USBD_CtlSendStatus>
      }
      break;
 8007e44:	e004      	b.n	8007e50 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f83f 	bl	8007ecc <USBD_CtlError>
      break;
 8007e4e:	e000      	b.n	8007e52 <USBD_ClrFeature+0x3a>
      break;
 8007e50:	bf00      	nop
  }
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	785a      	ldrb	r2, [r3, #1]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	3302      	adds	r3, #2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	3303      	adds	r3, #3
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4413      	add	r3, r2
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	3304      	adds	r3, #4
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	3305      	adds	r3, #5
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3306      	adds	r3, #6
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	3307      	adds	r3, #7
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	80da      	strh	r2, [r3, #6]

}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr

08007ecc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ed6:	2180      	movs	r1, #128	@ 0x80
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc87 	bl	80087ec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc83 	bl	80087ec <USBD_LL_StallEP>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d032      	beq.n	8007f6a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f834 	bl	8007f72 <USBD_GetLen>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	005b      	lsls	r3, r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	75fa      	strb	r2, [r7, #23]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	4413      	add	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7812      	ldrb	r2, [r2, #0]
 8007f28:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	75fa      	strb	r2, [r7, #23]
 8007f30:	461a      	mov	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	2203      	movs	r2, #3
 8007f38:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f3a:	e012      	b.n	8007f62 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	60fa      	str	r2, [r7, #12]
 8007f42:	7dfa      	ldrb	r2, [r7, #23]
 8007f44:	1c51      	adds	r1, r2, #1
 8007f46:	75f9      	strb	r1, [r7, #23]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	75fa      	strb	r2, [r7, #23]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e8      	bne.n	8007f3c <USBD_GetString+0x4e>
    }
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b085      	sub	sp, #20
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f7e:	e005      	b.n	8007f8c <USBD_GetLen+0x1a>
  {
    len++;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	3301      	adds	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1f5      	bne.n	8007f80 <USBD_GetLen+0xe>
  }

  return len;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fbc:	88fa      	ldrh	r2, [r7, #6]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 fc97 	bl	80088fc <USBD_LL_Transmit>

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fe6:	88fb      	ldrh	r3, [r7, #6]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	2100      	movs	r1, #0
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 fc85 	bl	80088fc <USBD_LL_Transmit>

  return USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2203      	movs	r2, #3
 800800e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	2100      	movs	r1, #0
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fc8a 	bl	8008942 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4613      	mov	r3, r2
 8008044:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008046:	88fb      	ldrh	r3, [r7, #6]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	2100      	movs	r1, #0
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 fc78 	bl	8008942 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2204      	movs	r2, #4
 8008068:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800806c:	2300      	movs	r3, #0
 800806e:	2200      	movs	r2, #0
 8008070:	2100      	movs	r1, #0
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fc42 	bl	80088fc <USBD_LL_Transmit>

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2205      	movs	r2, #5
 800808e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008092:	2300      	movs	r3, #0
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc52 	bl	8008942 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080ac:	2200      	movs	r2, #0
 80080ae:	4912      	ldr	r1, [pc, #72]	@ (80080f8 <MX_USB_DEVICE_Init+0x50>)
 80080b0:	4812      	ldr	r0, [pc, #72]	@ (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080b2:	f7fe ff62 	bl	8006f7a <USBD_Init>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080bc:	f7f9 fa5a 	bl	8001574 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080c0:	490f      	ldr	r1, [pc, #60]	@ (8008100 <MX_USB_DEVICE_Init+0x58>)
 80080c2:	480e      	ldr	r0, [pc, #56]	@ (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080c4:	f7fe ff84 	bl	8006fd0 <USBD_RegisterClass>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080ce:	f7f9 fa51 	bl	8001574 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080d2:	490c      	ldr	r1, [pc, #48]	@ (8008104 <MX_USB_DEVICE_Init+0x5c>)
 80080d4:	4809      	ldr	r0, [pc, #36]	@ (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080d6:	f7fe feb5 	bl	8006e44 <USBD_CDC_RegisterInterface>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080e0:	f7f9 fa48 	bl	8001574 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080e4:	4805      	ldr	r0, [pc, #20]	@ (80080fc <MX_USB_DEVICE_Init+0x54>)
 80080e6:	f7fe ff8c 	bl	8007002 <USBD_Start>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080f0:	f7f9 fa40 	bl	8001574 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080f4:	bf00      	nop
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000130 	.word	0x20000130
 80080fc:	200003ec 	.word	0x200003ec
 8008100:	2000001c 	.word	0x2000001c
 8008104:	20000120 	.word	0x20000120

08008108 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800810c:	2200      	movs	r2, #0
 800810e:	4905      	ldr	r1, [pc, #20]	@ (8008124 <CDC_Init_FS+0x1c>)
 8008110:	4805      	ldr	r0, [pc, #20]	@ (8008128 <CDC_Init_FS+0x20>)
 8008112:	f7fe fead 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008116:	4905      	ldr	r1, [pc, #20]	@ (800812c <CDC_Init_FS+0x24>)
 8008118:	4803      	ldr	r0, [pc, #12]	@ (8008128 <CDC_Init_FS+0x20>)
 800811a:	f7fe fec2 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800811e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000ab0 	.word	0x20000ab0
 8008128:	200003ec 	.word	0x200003ec
 800812c:	200006b0 	.word	0x200006b0

08008130 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008134:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008136:	4618      	mov	r0, r3
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
	...

08008140 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
 800814c:	4613      	mov	r3, r2
 800814e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b23      	cmp	r3, #35	@ 0x23
 8008154:	d84a      	bhi.n	80081ec <CDC_Control_FS+0xac>
 8008156:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <CDC_Control_FS+0x1c>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	080081ed 	.word	0x080081ed
 8008160:	080081ed 	.word	0x080081ed
 8008164:	080081ed 	.word	0x080081ed
 8008168:	080081ed 	.word	0x080081ed
 800816c:	080081ed 	.word	0x080081ed
 8008170:	080081ed 	.word	0x080081ed
 8008174:	080081ed 	.word	0x080081ed
 8008178:	080081ed 	.word	0x080081ed
 800817c:	080081ed 	.word	0x080081ed
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080081ed 	.word	0x080081ed
 8008188:	080081ed 	.word	0x080081ed
 800818c:	080081ed 	.word	0x080081ed
 8008190:	080081ed 	.word	0x080081ed
 8008194:	080081ed 	.word	0x080081ed
 8008198:	080081ed 	.word	0x080081ed
 800819c:	080081ed 	.word	0x080081ed
 80081a0:	080081ed 	.word	0x080081ed
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	080081ed 	.word	0x080081ed
 80081ac:	080081ed 	.word	0x080081ed
 80081b0:	080081ed 	.word	0x080081ed
 80081b4:	080081ed 	.word	0x080081ed
 80081b8:	080081ed 	.word	0x080081ed
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	080081ed 	.word	0x080081ed
 80081d0:	080081ed 	.word	0x080081ed
 80081d4:	080081ed 	.word	0x080081ed
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	080081ed 	.word	0x080081ed
 80081e0:	080081ed 	.word	0x080081ed
 80081e4:	080081ed 	.word	0x080081ed
 80081e8:	080081ed 	.word	0x080081ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081ec:	bf00      	nop
  }

  return (USBD_OK);
 80081ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e025      	b.n	8008258 <CDC_Receive_FS+0x5c>
    char receivedChar = Buf[i];
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	2b0a      	cmp	r3, #10
 800821a:	d10b      	bne.n	8008234 <CDC_Receive_FS+0x38>
      usbBuffer[usbBufferIndex] = '\0';
 800821c:	4b17      	ldr	r3, [pc, #92]	@ (800827c <CDC_Receive_FS+0x80>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <CDC_Receive_FS+0x84>)
 8008222:	2100      	movs	r1, #0
 8008224:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;
 8008226:	4b17      	ldr	r3, [pc, #92]	@ (8008284 <CDC_Receive_FS+0x88>)
 8008228:	2201      	movs	r2, #1
 800822a:	701a      	strb	r2, [r3, #0]
      usbBufferIndex = 0;
 800822c:	4b13      	ldr	r3, [pc, #76]	@ (800827c <CDC_Receive_FS+0x80>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
      break;
 8008232:	e016      	b.n	8008262 <CDC_Receive_FS+0x66>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	2b0d      	cmp	r3, #13
 8008238:	d00b      	beq.n	8008252 <CDC_Receive_FS+0x56>
 800823a:	4b10      	ldr	r3, [pc, #64]	@ (800827c <CDC_Receive_FS+0x80>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b62      	cmp	r3, #98	@ 0x62
 8008240:	d807      	bhi.n	8008252 <CDC_Receive_FS+0x56>
      usbBuffer[usbBufferIndex++] = receivedChar;
 8008242:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <CDC_Receive_FS+0x80>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	490c      	ldr	r1, [pc, #48]	@ (800827c <CDC_Receive_FS+0x80>)
 800824a:	600a      	str	r2, [r1, #0]
 800824c:	490c      	ldr	r1, [pc, #48]	@ (8008280 <CDC_Receive_FS+0x84>)
 800824e:	7afa      	ldrb	r2, [r7, #11]
 8008250:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d3d4      	bcc.n	800820c <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4808      	ldr	r0, [pc, #32]	@ (8008288 <CDC_Receive_FS+0x8c>)
 8008266:	f7fe fe1c 	bl	8006ea2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800826a:	4807      	ldr	r0, [pc, #28]	@ (8008288 <CDC_Receive_FS+0x8c>)
 800826c:	f7fe fe5b 	bl	8006f26 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008270:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200003d4 	.word	0x200003d4
 8008280:	20000370 	.word	0x20000370
 8008284:	20000000 	.word	0x20000000
 8008288:	200003ec 	.word	0x200003ec

0800828c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800829c:	4b0d      	ldr	r3, [pc, #52]	@ (80082d4 <CDC_Transmit_FS+0x48>)
 800829e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e00b      	b.n	80082ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082b2:	887b      	ldrh	r3, [r7, #2]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4806      	ldr	r0, [pc, #24]	@ (80082d4 <CDC_Transmit_FS+0x48>)
 80082ba:	f7fe fdd9 	bl	8006e70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082be:	4805      	ldr	r0, [pc, #20]	@ (80082d4 <CDC_Transmit_FS+0x48>)
 80082c0:	f7fe fe02 	bl	8006ec8 <USBD_CDC_TransmitPacket>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200003ec 	.word	0x200003ec

080082d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2212      	movs	r2, #18
 80082e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082ea:	4b03      	ldr	r3, [pc, #12]	@ (80082f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	2000014c 	.word	0x2000014c

080082fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2204      	movs	r2, #4
 800830c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800830e:	4b03      	ldr	r3, [pc, #12]	@ (800831c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000160 	.word	0x20000160

08008320 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4907      	ldr	r1, [pc, #28]	@ (8008354 <USBD_FS_ProductStrDescriptor+0x34>)
 8008336:	4808      	ldr	r0, [pc, #32]	@ (8008358 <USBD_FS_ProductStrDescriptor+0x38>)
 8008338:	f7ff fdd9 	bl	8007eee <USBD_GetString>
 800833c:	e004      	b.n	8008348 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4904      	ldr	r1, [pc, #16]	@ (8008354 <USBD_FS_ProductStrDescriptor+0x34>)
 8008342:	4805      	ldr	r0, [pc, #20]	@ (8008358 <USBD_FS_ProductStrDescriptor+0x38>)
 8008344:	f7ff fdd3 	bl	8007eee <USBD_GetString>
  }
  return USBD_StrDesc;
 8008348:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000eb0 	.word	0x20000eb0
 8008358:	0800bb5c 	.word	0x0800bb5c

0800835c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	4904      	ldr	r1, [pc, #16]	@ (800837c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800836c:	4804      	ldr	r0, [pc, #16]	@ (8008380 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800836e:	f7ff fdbe 	bl	8007eee <USBD_GetString>
  return USBD_StrDesc;
 8008372:	4b02      	ldr	r3, [pc, #8]	@ (800837c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000eb0 	.word	0x20000eb0
 8008380:	0800bb74 	.word	0x0800bb74

08008384 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	221a      	movs	r2, #26
 8008394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008396:	f000 f843 	bl	8008420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800839a:	4b02      	ldr	r3, [pc, #8]	@ (80083a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000164 	.word	0x20000164

080083a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4907      	ldr	r1, [pc, #28]	@ (80083dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80083be:	4808      	ldr	r0, [pc, #32]	@ (80083e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083c0:	f7ff fd95 	bl	8007eee <USBD_GetString>
 80083c4:	e004      	b.n	80083d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4904      	ldr	r1, [pc, #16]	@ (80083dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80083ca:	4805      	ldr	r0, [pc, #20]	@ (80083e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083cc:	f7ff fd8f 	bl	8007eee <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d0:	4b02      	ldr	r3, [pc, #8]	@ (80083dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000eb0 	.word	0x20000eb0
 80083e0:	0800bb88 	.word	0x0800bb88

080083e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	4907      	ldr	r1, [pc, #28]	@ (8008418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083fa:	4808      	ldr	r0, [pc, #32]	@ (800841c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083fc:	f7ff fd77 	bl	8007eee <USBD_GetString>
 8008400:	e004      	b.n	800840c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4904      	ldr	r1, [pc, #16]	@ (8008418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008406:	4805      	ldr	r0, [pc, #20]	@ (800841c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008408:	f7ff fd71 	bl	8007eee <USBD_GetString>
  }
  return USBD_StrDesc;
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800840e:	4618      	mov	r0, r3
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000eb0 	.word	0x20000eb0
 800841c:	0800bb94 	.word	0x0800bb94

08008420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008426:	4b0f      	ldr	r3, [pc, #60]	@ (8008464 <Get_SerialNum+0x44>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800842c:	4b0e      	ldr	r3, [pc, #56]	@ (8008468 <Get_SerialNum+0x48>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008432:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <Get_SerialNum+0x4c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008446:	2208      	movs	r2, #8
 8008448:	4909      	ldr	r1, [pc, #36]	@ (8008470 <Get_SerialNum+0x50>)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f814 	bl	8008478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008450:	2204      	movs	r2, #4
 8008452:	4908      	ldr	r1, [pc, #32]	@ (8008474 <Get_SerialNum+0x54>)
 8008454:	68b8      	ldr	r0, [r7, #8]
 8008456:	f000 f80f 	bl	8008478 <IntToUnicode>
  }
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	1ffff7e8 	.word	0x1ffff7e8
 8008468:	1ffff7ec 	.word	0x1ffff7ec
 800846c:	1ffff7f0 	.word	0x1ffff7f0
 8008470:	20000166 	.word	0x20000166
 8008474:	20000176 	.word	0x20000176

08008478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
 800848e:	e027      	b.n	80084e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	0f1b      	lsrs	r3, r3, #28
 8008494:	2b09      	cmp	r3, #9
 8008496:	d80b      	bhi.n	80084b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	0f1b      	lsrs	r3, r3, #28
 800849c:	b2da      	uxtb	r2, r3
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4619      	mov	r1, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	440b      	add	r3, r1
 80084a8:	3230      	adds	r2, #48	@ 0x30
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e00a      	b.n	80084c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	0f1b      	lsrs	r3, r3, #28
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	4619      	mov	r1, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	440b      	add	r3, r1
 80084c0:	3237      	adds	r2, #55	@ 0x37
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	3301      	adds	r3, #1
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	4413      	add	r3, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	3301      	adds	r3, #1
 80084de:	75fb      	strb	r3, [r7, #23]
 80084e0:	7dfa      	ldrb	r2, [r7, #23]
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d3d3      	bcc.n	8008490 <IntToUnicode+0x18>
  }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0d      	ldr	r2, [pc, #52]	@ (8008538 <HAL_PCD_MspInit+0x44>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d113      	bne.n	800852e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <HAL_PCD_MspInit+0x48>)
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	4a0c      	ldr	r2, [pc, #48]	@ (800853c <HAL_PCD_MspInit+0x48>)
 800850c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008510:	61d3      	str	r3, [r2, #28]
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <HAL_PCD_MspInit+0x48>)
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	2014      	movs	r0, #20
 8008524:	f7f9 fadf 	bl	8001ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008528:	2014      	movs	r0, #20
 800852a:	f7f9 faf8 	bl	8001b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	40005c00 	.word	0x40005c00
 800853c:	40021000 	.word	0x40021000

08008540 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f7fe fd9b 	bl	8007092 <USBD_LL_SetupStage>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	440b      	add	r3, r1
 8008584:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	78fb      	ldrb	r3, [r7, #3]
 800858c:	4619      	mov	r1, r3
 800858e:	f7fe fdcd 	bl	800712c <USBD_LL_DataOutStage>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	440b      	add	r3, r1
 80085ba:	3324      	adds	r3, #36	@ 0x24
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	4619      	mov	r1, r3
 80085c2:	f7fe fe24 	bl	800720e <USBD_LL_DataInStage>
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fe ff34 	bl	800744a <USBD_LL_SOF>
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085f2:	2301      	movs	r3, #1
 80085f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	799b      	ldrb	r3, [r3, #6]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d001      	beq.n	8008602 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085fe:	f7f8 ffb9 	bl	8001574 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008608:	7bfa      	ldrb	r2, [r7, #15]
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe fee4 	bl	80073da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe9d 	bl	8007358 <USBD_LL_Reset>
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fede 	bl	80073f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7a9b      	ldrb	r3, [r3, #10]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008644:	4b04      	ldr	r3, [pc, #16]	@ (8008658 <HAL_PCD_SuspendCallback+0x30>)
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	4a03      	ldr	r2, [pc, #12]	@ (8008658 <HAL_PCD_SuspendCallback+0x30>)
 800864a:	f043 0306 	orr.w	r3, r3, #6
 800864e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	e000ed00 	.word	0xe000ed00

0800865c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fed8 	bl	8007420 <USBD_LL_Resume>
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008680:	4a28      	ldr	r2, [pc, #160]	@ (8008724 <USBD_LL_Init+0xac>)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a26      	ldr	r2, [pc, #152]	@ (8008724 <USBD_LL_Init+0xac>)
 800868c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008690:	4b24      	ldr	r3, [pc, #144]	@ (8008724 <USBD_LL_Init+0xac>)
 8008692:	4a25      	ldr	r2, [pc, #148]	@ (8008728 <USBD_LL_Init+0xb0>)
 8008694:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008696:	4b23      	ldr	r3, [pc, #140]	@ (8008724 <USBD_LL_Init+0xac>)
 8008698:	2208      	movs	r2, #8
 800869a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800869c:	4b21      	ldr	r3, [pc, #132]	@ (8008724 <USBD_LL_Init+0xac>)
 800869e:	2202      	movs	r2, #2
 80086a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086a2:	4b20      	ldr	r3, [pc, #128]	@ (8008724 <USBD_LL_Init+0xac>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086a8:	4b1e      	ldr	r3, [pc, #120]	@ (8008724 <USBD_LL_Init+0xac>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <USBD_LL_Init+0xac>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80086b4:	481b      	ldr	r0, [pc, #108]	@ (8008724 <USBD_LL_Init+0xac>)
 80086b6:	f7f9 fc00 	bl	8001eba <HAL_PCD_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80086c0:	f7f8 ff58 	bl	8001574 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086ca:	2318      	movs	r3, #24
 80086cc:	2200      	movs	r2, #0
 80086ce:	2100      	movs	r1, #0
 80086d0:	f7fb f911 	bl	80038f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086da:	2358      	movs	r3, #88	@ 0x58
 80086dc:	2200      	movs	r2, #0
 80086de:	2180      	movs	r1, #128	@ 0x80
 80086e0:	f7fb f909 	bl	80038f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086ea:	23c0      	movs	r3, #192	@ 0xc0
 80086ec:	2200      	movs	r2, #0
 80086ee:	2181      	movs	r1, #129	@ 0x81
 80086f0:	f7fb f901 	bl	80038f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80086fe:	2200      	movs	r2, #0
 8008700:	2101      	movs	r1, #1
 8008702:	f7fb f8f8 	bl	80038f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800870c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008710:	2200      	movs	r2, #0
 8008712:	2182      	movs	r1, #130	@ 0x82
 8008714:	f7fb f8ef 	bl	80038f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200010b0 	.word	0x200010b0
 8008728:	40005c00 	.word	0x40005c00

0800872c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008742:	4618      	mov	r0, r3
 8008744:	f7f9 fcaf 	bl	80020a6 <HAL_PCD_Start>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f94e 	bl	80089f0 <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008758:	7bbb      	ldrb	r3, [r7, #14]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	4608      	mov	r0, r1
 800876c:	4611      	mov	r1, r2
 800876e:	461a      	mov	r2, r3
 8008770:	4603      	mov	r3, r0
 8008772:	70fb      	strb	r3, [r7, #3]
 8008774:	460b      	mov	r3, r1
 8008776:	70bb      	strb	r3, [r7, #2]
 8008778:	4613      	mov	r3, r2
 800877a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800878a:	78bb      	ldrb	r3, [r7, #2]
 800878c:	883a      	ldrh	r2, [r7, #0]
 800878e:	78f9      	ldrb	r1, [r7, #3]
 8008790:	f7f9 fe03 	bl	800239a <HAL_PCD_EP_Open>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f928 	bl	80089f0 <USBD_Get_USB_Status>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f9 fe41 	bl	8002454 <HAL_PCD_EP_Close>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 f909 	bl	80089f0 <USBD_Get_USB_Status>
 80087de:	4603      	mov	r3, r0
 80087e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f7f9 fee9 	bl	80025e2 <HAL_PCD_EP_SetStall>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f8ea 	bl	80089f0 <USBD_Get_USB_Status>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008820:	7bbb      	ldrb	r3, [r7, #14]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7f9 ff2a 	bl	80026a2 <HAL_PCD_EP_ClrStall>
 800884e:	4603      	mov	r3, r0
 8008850:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 f8cb 	bl	80089f0 <USBD_Get_USB_Status>
 800885a:	4603      	mov	r3, r0
 800885c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800885e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800887a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800887c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008880:	2b00      	cmp	r3, #0
 8008882:	da0b      	bge.n	800889c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800888a:	68f9      	ldr	r1, [r7, #12]
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	00db      	lsls	r3, r3, #3
 8008894:	440b      	add	r3, r1
 8008896:	3312      	adds	r3, #18
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	e00b      	b.n	80088b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	440b      	add	r3, r1
 80088ae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80088b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr

080088be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088d8:	78fa      	ldrb	r2, [r7, #3]
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7f9 fd38 	bl	8002352 <HAL_PCD_SetAddress>
 80088e2:	4603      	mov	r3, r0
 80088e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 f881 	bl	80089f0 <USBD_Get_USB_Status>
 80088ee:	4603      	mov	r3, r0
 80088f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	607a      	str	r2, [r7, #4]
 8008906:	461a      	mov	r2, r3
 8008908:	460b      	mov	r3, r1
 800890a:	72fb      	strb	r3, [r7, #11]
 800890c:	4613      	mov	r3, r2
 800890e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800891e:	893b      	ldrh	r3, [r7, #8]
 8008920:	7af9      	ldrb	r1, [r7, #11]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	f7f9 fe26 	bl	8002574 <HAL_PCD_EP_Transmit>
 8008928:	4603      	mov	r3, r0
 800892a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f85e 	bl	80089f0 <USBD_Get_USB_Status>
 8008934:	4603      	mov	r3, r0
 8008936:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008938:	7dbb      	ldrb	r3, [r7, #22]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	461a      	mov	r2, r3
 800894e:	460b      	mov	r3, r1
 8008950:	72fb      	strb	r3, [r7, #11]
 8008952:	4613      	mov	r3, r2
 8008954:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008964:	893b      	ldrh	r3, [r7, #8]
 8008966:	7af9      	ldrb	r1, [r7, #11]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	f7f9 fdbb 	bl	80024e4 <HAL_PCD_EP_Receive>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f83b 	bl	80089f0 <USBD_Get_USB_Status>
 800897a:	4603      	mov	r3, r0
 800897c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800897e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f9 fdd1 	bl	8002546 <HAL_PCD_EP_GetRxCount>
 80089a4:	4603      	mov	r3, r0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089b8:	4b02      	ldr	r3, [pc, #8]	@ (80089c4 <USBD_static_malloc+0x14>)
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr
 80089c4:	20001388 	.word	0x20001388

080089c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]

}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bc80      	pop	{r7}
 80089d8:	4770      	bx	lr

080089da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d817      	bhi.n	8008a34 <USBD_Get_USB_Status+0x44>
 8008a04:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <USBD_Get_USB_Status+0x1c>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a23 	.word	0x08008a23
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a2f 	.word	0x08008a2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	e00b      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a22:	2302      	movs	r3, #2
 8008a24:	73fb      	strb	r3, [r7, #15]
    break;
 8008a26:	e008      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e005      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	73fb      	strb	r3, [r7, #15]
    break;
 8008a32:	e002      	b.n	8008a3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a34:	2302      	movs	r3, #2
 8008a36:	73fb      	strb	r3, [r7, #15]
    break;
 8008a38:	bf00      	nop
  }
  return usb_status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop

08008a48 <atof>:
 8008a48:	2100      	movs	r1, #0
 8008a4a:	f000 bdf9 	b.w	8009640 <strtod>

08008a4e <sulp>:
 8008a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	460f      	mov	r7, r1
 8008a54:	4690      	mov	r8, r2
 8008a56:	f001 ff83 	bl	800a960 <__ulp>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d011      	beq.n	8008a88 <sulp+0x3a>
 8008a64:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008a68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd0b      	ble.n	8008a88 <sulp+0x3a>
 8008a70:	2400      	movs	r4, #0
 8008a72:	051b      	lsls	r3, r3, #20
 8008a74:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a78:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f7f7 fd2a 	bl	80004d8 <__aeabi_dmul>
 8008a84:	4604      	mov	r4, r0
 8008a86:	460d      	mov	r5, r1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008a90 <_strtod_l>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	b09f      	sub	sp, #124	@ 0x7c
 8008a96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a98:	2200      	movs	r2, #0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a9e:	f04f 0a00 	mov.w	sl, #0
 8008aa2:	f04f 0b00 	mov.w	fp, #0
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	9005      	str	r0, [sp, #20]
 8008aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aac:	7811      	ldrb	r1, [r2, #0]
 8008aae:	292b      	cmp	r1, #43	@ 0x2b
 8008ab0:	d048      	beq.n	8008b44 <_strtod_l+0xb4>
 8008ab2:	d836      	bhi.n	8008b22 <_strtod_l+0x92>
 8008ab4:	290d      	cmp	r1, #13
 8008ab6:	d830      	bhi.n	8008b1a <_strtod_l+0x8a>
 8008ab8:	2908      	cmp	r1, #8
 8008aba:	d830      	bhi.n	8008b1e <_strtod_l+0x8e>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d039      	beq.n	8008b34 <_strtod_l+0xa4>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ac6:	782a      	ldrb	r2, [r5, #0]
 8008ac8:	2a30      	cmp	r2, #48	@ 0x30
 8008aca:	f040 80b0 	bne.w	8008c2e <_strtod_l+0x19e>
 8008ace:	786a      	ldrb	r2, [r5, #1]
 8008ad0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ad4:	2a58      	cmp	r2, #88	@ 0x58
 8008ad6:	d16c      	bne.n	8008bb2 <_strtod_l+0x122>
 8008ad8:	9302      	str	r3, [sp, #8]
 8008ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008adc:	4a8f      	ldr	r2, [pc, #572]	@ (8008d1c <_strtod_l+0x28c>)
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	9805      	ldr	r0, [sp, #20]
 8008ae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ae8:	a919      	add	r1, sp, #100	@ 0x64
 8008aea:	f001 f83b 	bl	8009b64 <__gethex>
 8008aee:	f010 060f 	ands.w	r6, r0, #15
 8008af2:	4604      	mov	r4, r0
 8008af4:	d005      	beq.n	8008b02 <_strtod_l+0x72>
 8008af6:	2e06      	cmp	r6, #6
 8008af8:	d126      	bne.n	8008b48 <_strtod_l+0xb8>
 8008afa:	2300      	movs	r3, #0
 8008afc:	3501      	adds	r5, #1
 8008afe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b00:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f040 8582 	bne.w	800960e <_strtod_l+0xb7e>
 8008b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b0c:	b1bb      	cbz	r3, 8008b3e <_strtod_l+0xae>
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008b14:	b01f      	add	sp, #124	@ 0x7c
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	2920      	cmp	r1, #32
 8008b1c:	d1d0      	bne.n	8008ac0 <_strtod_l+0x30>
 8008b1e:	3201      	adds	r2, #1
 8008b20:	e7c3      	b.n	8008aaa <_strtod_l+0x1a>
 8008b22:	292d      	cmp	r1, #45	@ 0x2d
 8008b24:	d1cc      	bne.n	8008ac0 <_strtod_l+0x30>
 8008b26:	2101      	movs	r1, #1
 8008b28:	910e      	str	r1, [sp, #56]	@ 0x38
 8008b2a:	1c51      	adds	r1, r2, #1
 8008b2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b2e:	7852      	ldrb	r2, [r2, #1]
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	d1c7      	bne.n	8008ac4 <_strtod_l+0x34>
 8008b34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b36:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8566 	bne.w	800960a <_strtod_l+0xb7a>
 8008b3e:	4650      	mov	r0, sl
 8008b40:	4659      	mov	r1, fp
 8008b42:	e7e7      	b.n	8008b14 <_strtod_l+0x84>
 8008b44:	2100      	movs	r1, #0
 8008b46:	e7ef      	b.n	8008b28 <_strtod_l+0x98>
 8008b48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b4a:	b13a      	cbz	r2, 8008b5c <_strtod_l+0xcc>
 8008b4c:	2135      	movs	r1, #53	@ 0x35
 8008b4e:	a81c      	add	r0, sp, #112	@ 0x70
 8008b50:	f001 fff6 	bl	800ab40 <__copybits>
 8008b54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b56:	9805      	ldr	r0, [sp, #20]
 8008b58:	f001 fbd6 	bl	800a308 <_Bfree>
 8008b5c:	3e01      	subs	r6, #1
 8008b5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b60:	2e04      	cmp	r6, #4
 8008b62:	d806      	bhi.n	8008b72 <_strtod_l+0xe2>
 8008b64:	e8df f006 	tbb	[pc, r6]
 8008b68:	201d0314 	.word	0x201d0314
 8008b6c:	14          	.byte	0x14
 8008b6d:	00          	.byte	0x00
 8008b6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008b72:	05e1      	lsls	r1, r4, #23
 8008b74:	bf48      	it	mi
 8008b76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b7e:	0d1b      	lsrs	r3, r3, #20
 8008b80:	051b      	lsls	r3, r3, #20
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1bd      	bne.n	8008b02 <_strtod_l+0x72>
 8008b86:	f000 fefb 	bl	8009980 <__errno>
 8008b8a:	2322      	movs	r3, #34	@ 0x22
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	e7b8      	b.n	8008b02 <_strtod_l+0x72>
 8008b90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ba0:	e7e7      	b.n	8008b72 <_strtod_l+0xe2>
 8008ba2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008d20 <_strtod_l+0x290>
 8008ba6:	e7e4      	b.n	8008b72 <_strtod_l+0xe2>
 8008ba8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008bac:	f04f 3aff 	mov.w	sl, #4294967295
 8008bb0:	e7df      	b.n	8008b72 <_strtod_l+0xe2>
 8008bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bb8:	785b      	ldrb	r3, [r3, #1]
 8008bba:	2b30      	cmp	r3, #48	@ 0x30
 8008bbc:	d0f9      	beq.n	8008bb2 <_strtod_l+0x122>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d09f      	beq.n	8008b02 <_strtod_l+0x72>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	2700      	movs	r7, #0
 8008bc6:	220a      	movs	r2, #10
 8008bc8:	46b9      	mov	r9, r7
 8008bca:	9308      	str	r3, [sp, #32]
 8008bcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bce:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008bd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bd2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008bd4:	7805      	ldrb	r5, [r0, #0]
 8008bd6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008bda:	b2d9      	uxtb	r1, r3
 8008bdc:	2909      	cmp	r1, #9
 8008bde:	d928      	bls.n	8008c32 <_strtod_l+0x1a2>
 8008be0:	2201      	movs	r2, #1
 8008be2:	4950      	ldr	r1, [pc, #320]	@ (8008d24 <_strtod_l+0x294>)
 8008be4:	f000 fe74 	bl	80098d0 <strncmp>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d032      	beq.n	8008c52 <_strtod_l+0x1c2>
 8008bec:	2000      	movs	r0, #0
 8008bee:	462a      	mov	r2, r5
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	464d      	mov	r5, r9
 8008bf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bf6:	2a65      	cmp	r2, #101	@ 0x65
 8008bf8:	d001      	beq.n	8008bfe <_strtod_l+0x16e>
 8008bfa:	2a45      	cmp	r2, #69	@ 0x45
 8008bfc:	d114      	bne.n	8008c28 <_strtod_l+0x198>
 8008bfe:	b91d      	cbnz	r5, 8008c08 <_strtod_l+0x178>
 8008c00:	9a08      	ldr	r2, [sp, #32]
 8008c02:	4302      	orrs	r2, r0
 8008c04:	d096      	beq.n	8008b34 <_strtod_l+0xa4>
 8008c06:	2500      	movs	r5, #0
 8008c08:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c0a:	1c62      	adds	r2, r4, #1
 8008c0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c0e:	7862      	ldrb	r2, [r4, #1]
 8008c10:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c12:	d07a      	beq.n	8008d0a <_strtod_l+0x27a>
 8008c14:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c16:	d07e      	beq.n	8008d16 <_strtod_l+0x286>
 8008c18:	f04f 0c00 	mov.w	ip, #0
 8008c1c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c20:	2909      	cmp	r1, #9
 8008c22:	f240 8085 	bls.w	8008d30 <_strtod_l+0x2a0>
 8008c26:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c28:	f04f 0800 	mov.w	r8, #0
 8008c2c:	e0a5      	b.n	8008d7a <_strtod_l+0x2ea>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e7c8      	b.n	8008bc4 <_strtod_l+0x134>
 8008c32:	f1b9 0f08 	cmp.w	r9, #8
 8008c36:	bfd8      	it	le
 8008c38:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008c3a:	f100 0001 	add.w	r0, r0, #1
 8008c3e:	bfd6      	itet	le
 8008c40:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c44:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008c48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008c4a:	f109 0901 	add.w	r9, r9, #1
 8008c4e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c50:	e7bf      	b.n	8008bd2 <_strtod_l+0x142>
 8008c52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c58:	785a      	ldrb	r2, [r3, #1]
 8008c5a:	f1b9 0f00 	cmp.w	r9, #0
 8008c5e:	d03b      	beq.n	8008cd8 <_strtod_l+0x248>
 8008c60:	464d      	mov	r5, r9
 8008c62:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c64:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c68:	2b09      	cmp	r3, #9
 8008c6a:	d912      	bls.n	8008c92 <_strtod_l+0x202>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e7c2      	b.n	8008bf6 <_strtod_l+0x166>
 8008c70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c72:	3001      	adds	r0, #1
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c78:	785a      	ldrb	r2, [r3, #1]
 8008c7a:	2a30      	cmp	r2, #48	@ 0x30
 8008c7c:	d0f8      	beq.n	8008c70 <_strtod_l+0x1e0>
 8008c7e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	f200 84c8 	bhi.w	8009618 <_strtod_l+0xb88>
 8008c88:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c90:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c92:	3a30      	subs	r2, #48	@ 0x30
 8008c94:	f100 0301 	add.w	r3, r0, #1
 8008c98:	d018      	beq.n	8008ccc <_strtod_l+0x23c>
 8008c9a:	462e      	mov	r6, r5
 8008c9c:	f04f 0e0a 	mov.w	lr, #10
 8008ca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ca2:	4419      	add	r1, r3
 8008ca4:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ca6:	1c71      	adds	r1, r6, #1
 8008ca8:	eba1 0c05 	sub.w	ip, r1, r5
 8008cac:	4563      	cmp	r3, ip
 8008cae:	dc15      	bgt.n	8008cdc <_strtod_l+0x24c>
 8008cb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008cb4:	182b      	adds	r3, r5, r0
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	f105 0501 	add.w	r5, r5, #1
 8008cbc:	4405      	add	r5, r0
 8008cbe:	dc1a      	bgt.n	8008cf6 <_strtod_l+0x266>
 8008cc0:	230a      	movs	r3, #10
 8008cc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cc4:	fb03 2301 	mla	r3, r3, r1, r2
 8008cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cce:	4618      	mov	r0, r3
 8008cd0:	1c51      	adds	r1, r2, #1
 8008cd2:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cd4:	7852      	ldrb	r2, [r2, #1]
 8008cd6:	e7c5      	b.n	8008c64 <_strtod_l+0x1d4>
 8008cd8:	4648      	mov	r0, r9
 8008cda:	e7ce      	b.n	8008c7a <_strtod_l+0x1ea>
 8008cdc:	2e08      	cmp	r6, #8
 8008cde:	dc05      	bgt.n	8008cec <_strtod_l+0x25c>
 8008ce0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008ce2:	fb0e f606 	mul.w	r6, lr, r6
 8008ce6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008ce8:	460e      	mov	r6, r1
 8008cea:	e7dc      	b.n	8008ca6 <_strtod_l+0x216>
 8008cec:	2910      	cmp	r1, #16
 8008cee:	bfd8      	it	le
 8008cf0:	fb0e f707 	mulle.w	r7, lr, r7
 8008cf4:	e7f8      	b.n	8008ce8 <_strtod_l+0x258>
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	bfdc      	itt	le
 8008cfa:	230a      	movle	r3, #10
 8008cfc:	fb03 2707 	mlale	r7, r3, r7, r2
 8008d00:	e7e3      	b.n	8008cca <_strtod_l+0x23a>
 8008d02:	2300      	movs	r3, #0
 8008d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d06:	2301      	movs	r3, #1
 8008d08:	e77a      	b.n	8008c00 <_strtod_l+0x170>
 8008d0a:	f04f 0c00 	mov.w	ip, #0
 8008d0e:	1ca2      	adds	r2, r4, #2
 8008d10:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d12:	78a2      	ldrb	r2, [r4, #2]
 8008d14:	e782      	b.n	8008c1c <_strtod_l+0x18c>
 8008d16:	f04f 0c01 	mov.w	ip, #1
 8008d1a:	e7f8      	b.n	8008d0e <_strtod_l+0x27e>
 8008d1c:	0800bd40 	.word	0x0800bd40
 8008d20:	7ff00000 	.word	0x7ff00000
 8008d24:	0800bbc6 	.word	0x0800bbc6
 8008d28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d2a:	1c51      	adds	r1, r2, #1
 8008d2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d2e:	7852      	ldrb	r2, [r2, #1]
 8008d30:	2a30      	cmp	r2, #48	@ 0x30
 8008d32:	d0f9      	beq.n	8008d28 <_strtod_l+0x298>
 8008d34:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d38:	2908      	cmp	r1, #8
 8008d3a:	f63f af75 	bhi.w	8008c28 <_strtod_l+0x198>
 8008d3e:	f04f 080a 	mov.w	r8, #10
 8008d42:	3a30      	subs	r2, #48	@ 0x30
 8008d44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d48:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d4c:	1c56      	adds	r6, r2, #1
 8008d4e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d50:	7852      	ldrb	r2, [r2, #1]
 8008d52:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d56:	f1be 0f09 	cmp.w	lr, #9
 8008d5a:	d939      	bls.n	8008dd0 <_strtod_l+0x340>
 8008d5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d5e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d62:	1a76      	subs	r6, r6, r1
 8008d64:	2e08      	cmp	r6, #8
 8008d66:	dc03      	bgt.n	8008d70 <_strtod_l+0x2e0>
 8008d68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d6a:	4588      	cmp	r8, r1
 8008d6c:	bfa8      	it	ge
 8008d6e:	4688      	movge	r8, r1
 8008d70:	f1bc 0f00 	cmp.w	ip, #0
 8008d74:	d001      	beq.n	8008d7a <_strtod_l+0x2ea>
 8008d76:	f1c8 0800 	rsb	r8, r8, #0
 8008d7a:	2d00      	cmp	r5, #0
 8008d7c:	d14e      	bne.n	8008e1c <_strtod_l+0x38c>
 8008d7e:	9908      	ldr	r1, [sp, #32]
 8008d80:	4308      	orrs	r0, r1
 8008d82:	f47f aebe 	bne.w	8008b02 <_strtod_l+0x72>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f47f aed4 	bne.w	8008b34 <_strtod_l+0xa4>
 8008d8c:	2a69      	cmp	r2, #105	@ 0x69
 8008d8e:	d028      	beq.n	8008de2 <_strtod_l+0x352>
 8008d90:	dc25      	bgt.n	8008dde <_strtod_l+0x34e>
 8008d92:	2a49      	cmp	r2, #73	@ 0x49
 8008d94:	d025      	beq.n	8008de2 <_strtod_l+0x352>
 8008d96:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d98:	f47f aecc 	bne.w	8008b34 <_strtod_l+0xa4>
 8008d9c:	4999      	ldr	r1, [pc, #612]	@ (8009004 <_strtod_l+0x574>)
 8008d9e:	a819      	add	r0, sp, #100	@ 0x64
 8008da0:	f001 f902 	bl	8009fa8 <__match>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f43f aec5 	beq.w	8008b34 <_strtod_l+0xa4>
 8008daa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b28      	cmp	r3, #40	@ 0x28
 8008db0:	d12e      	bne.n	8008e10 <_strtod_l+0x380>
 8008db2:	4995      	ldr	r1, [pc, #596]	@ (8009008 <_strtod_l+0x578>)
 8008db4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008db6:	a819      	add	r0, sp, #100	@ 0x64
 8008db8:	f001 f90a 	bl	8009fd0 <__hexnan>
 8008dbc:	2805      	cmp	r0, #5
 8008dbe:	d127      	bne.n	8008e10 <_strtod_l+0x380>
 8008dc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008dc2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008dc6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008dca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008dce:	e698      	b.n	8008b02 <_strtod_l+0x72>
 8008dd0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dd2:	fb08 2101 	mla	r1, r8, r1, r2
 8008dd6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ddc:	e7b5      	b.n	8008d4a <_strtod_l+0x2ba>
 8008dde:	2a6e      	cmp	r2, #110	@ 0x6e
 8008de0:	e7da      	b.n	8008d98 <_strtod_l+0x308>
 8008de2:	498a      	ldr	r1, [pc, #552]	@ (800900c <_strtod_l+0x57c>)
 8008de4:	a819      	add	r0, sp, #100	@ 0x64
 8008de6:	f001 f8df 	bl	8009fa8 <__match>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f43f aea2 	beq.w	8008b34 <_strtod_l+0xa4>
 8008df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df2:	4987      	ldr	r1, [pc, #540]	@ (8009010 <_strtod_l+0x580>)
 8008df4:	3b01      	subs	r3, #1
 8008df6:	a819      	add	r0, sp, #100	@ 0x64
 8008df8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008dfa:	f001 f8d5 	bl	8009fa8 <__match>
 8008dfe:	b910      	cbnz	r0, 8008e06 <_strtod_l+0x376>
 8008e00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e02:	3301      	adds	r3, #1
 8008e04:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e06:	f04f 0a00 	mov.w	sl, #0
 8008e0a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009014 <_strtod_l+0x584>
 8008e0e:	e678      	b.n	8008b02 <_strtod_l+0x72>
 8008e10:	4881      	ldr	r0, [pc, #516]	@ (8009018 <_strtod_l+0x588>)
 8008e12:	f000 fdf1 	bl	80099f8 <nan>
 8008e16:	4682      	mov	sl, r0
 8008e18:	468b      	mov	fp, r1
 8008e1a:	e672      	b.n	8008b02 <_strtod_l+0x72>
 8008e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e1e:	f1b9 0f00 	cmp.w	r9, #0
 8008e22:	bf08      	it	eq
 8008e24:	46a9      	moveq	r9, r5
 8008e26:	eba8 0303 	sub.w	r3, r8, r3
 8008e2a:	2d10      	cmp	r5, #16
 8008e2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008e2e:	462c      	mov	r4, r5
 8008e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e32:	bfa8      	it	ge
 8008e34:	2410      	movge	r4, #16
 8008e36:	f7f7 fad5 	bl	80003e4 <__aeabi_ui2d>
 8008e3a:	2d09      	cmp	r5, #9
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	468b      	mov	fp, r1
 8008e40:	dc11      	bgt.n	8008e66 <_strtod_l+0x3d6>
 8008e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f43f ae5c 	beq.w	8008b02 <_strtod_l+0x72>
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	dd76      	ble.n	8008f3c <_strtod_l+0x4ac>
 8008e4e:	2b16      	cmp	r3, #22
 8008e50:	dc5d      	bgt.n	8008f0e <_strtod_l+0x47e>
 8008e52:	4972      	ldr	r1, [pc, #456]	@ (800901c <_strtod_l+0x58c>)
 8008e54:	4652      	mov	r2, sl
 8008e56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e5a:	465b      	mov	r3, fp
 8008e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	e7d7      	b.n	8008e16 <_strtod_l+0x386>
 8008e66:	4b6d      	ldr	r3, [pc, #436]	@ (800901c <_strtod_l+0x58c>)
 8008e68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008e70:	f7f7 fb32 	bl	80004d8 <__aeabi_dmul>
 8008e74:	4682      	mov	sl, r0
 8008e76:	4638      	mov	r0, r7
 8008e78:	468b      	mov	fp, r1
 8008e7a:	f7f7 fab3 	bl	80003e4 <__aeabi_ui2d>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4650      	mov	r0, sl
 8008e84:	4659      	mov	r1, fp
 8008e86:	f7f7 f971 	bl	800016c <__adddf3>
 8008e8a:	2d0f      	cmp	r5, #15
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	468b      	mov	fp, r1
 8008e90:	ddd7      	ble.n	8008e42 <_strtod_l+0x3b2>
 8008e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e94:	1b2c      	subs	r4, r5, r4
 8008e96:	441c      	add	r4, r3
 8008e98:	2c00      	cmp	r4, #0
 8008e9a:	f340 8093 	ble.w	8008fc4 <_strtod_l+0x534>
 8008e9e:	f014 030f 	ands.w	r3, r4, #15
 8008ea2:	d00a      	beq.n	8008eba <_strtod_l+0x42a>
 8008ea4:	495d      	ldr	r1, [pc, #372]	@ (800901c <_strtod_l+0x58c>)
 8008ea6:	4652      	mov	r2, sl
 8008ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb0:	465b      	mov	r3, fp
 8008eb2:	f7f7 fb11 	bl	80004d8 <__aeabi_dmul>
 8008eb6:	4682      	mov	sl, r0
 8008eb8:	468b      	mov	fp, r1
 8008eba:	f034 040f 	bics.w	r4, r4, #15
 8008ebe:	d073      	beq.n	8008fa8 <_strtod_l+0x518>
 8008ec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008ec4:	dd49      	ble.n	8008f5a <_strtod_l+0x4ca>
 8008ec6:	2400      	movs	r4, #0
 8008ec8:	46a0      	mov	r8, r4
 8008eca:	46a1      	mov	r9, r4
 8008ecc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ece:	2322      	movs	r3, #34	@ 0x22
 8008ed0:	f04f 0a00 	mov.w	sl, #0
 8008ed4:	9a05      	ldr	r2, [sp, #20]
 8008ed6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009014 <_strtod_l+0x584>
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f43f ae0f 	beq.w	8008b02 <_strtod_l+0x72>
 8008ee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ee6:	9805      	ldr	r0, [sp, #20]
 8008ee8:	f001 fa0e 	bl	800a308 <_Bfree>
 8008eec:	4649      	mov	r1, r9
 8008eee:	9805      	ldr	r0, [sp, #20]
 8008ef0:	f001 fa0a 	bl	800a308 <_Bfree>
 8008ef4:	4641      	mov	r1, r8
 8008ef6:	9805      	ldr	r0, [sp, #20]
 8008ef8:	f001 fa06 	bl	800a308 <_Bfree>
 8008efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008efe:	9805      	ldr	r0, [sp, #20]
 8008f00:	f001 fa02 	bl	800a308 <_Bfree>
 8008f04:	4621      	mov	r1, r4
 8008f06:	9805      	ldr	r0, [sp, #20]
 8008f08:	f001 f9fe 	bl	800a308 <_Bfree>
 8008f0c:	e5f9      	b.n	8008b02 <_strtod_l+0x72>
 8008f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f14:	4293      	cmp	r3, r2
 8008f16:	dbbc      	blt.n	8008e92 <_strtod_l+0x402>
 8008f18:	4c40      	ldr	r4, [pc, #256]	@ (800901c <_strtod_l+0x58c>)
 8008f1a:	f1c5 050f 	rsb	r5, r5, #15
 8008f1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f22:	4652      	mov	r2, sl
 8008f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f28:	465b      	mov	r3, fp
 8008f2a:	f7f7 fad5 	bl	80004d8 <__aeabi_dmul>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	1b5d      	subs	r5, r3, r5
 8008f32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f3a:	e791      	b.n	8008e60 <_strtod_l+0x3d0>
 8008f3c:	3316      	adds	r3, #22
 8008f3e:	dba8      	blt.n	8008e92 <_strtod_l+0x402>
 8008f40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f42:	4650      	mov	r0, sl
 8008f44:	eba3 0808 	sub.w	r8, r3, r8
 8008f48:	4b34      	ldr	r3, [pc, #208]	@ (800901c <_strtod_l+0x58c>)
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f50:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f54:	f7f7 fbea 	bl	800072c <__aeabi_ddiv>
 8008f58:	e75d      	b.n	8008e16 <_strtod_l+0x386>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	4659      	mov	r1, fp
 8008f60:	461e      	mov	r6, r3
 8008f62:	4f2f      	ldr	r7, [pc, #188]	@ (8009020 <_strtod_l+0x590>)
 8008f64:	1124      	asrs	r4, r4, #4
 8008f66:	2c01      	cmp	r4, #1
 8008f68:	dc21      	bgt.n	8008fae <_strtod_l+0x51e>
 8008f6a:	b10b      	cbz	r3, 8008f70 <_strtod_l+0x4e0>
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	468b      	mov	fp, r1
 8008f70:	492b      	ldr	r1, [pc, #172]	@ (8009020 <_strtod_l+0x590>)
 8008f72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008f76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f80:	465b      	mov	r3, fp
 8008f82:	f7f7 faa9 	bl	80004d8 <__aeabi_dmul>
 8008f86:	4b23      	ldr	r3, [pc, #140]	@ (8009014 <_strtod_l+0x584>)
 8008f88:	460a      	mov	r2, r1
 8008f8a:	400b      	ands	r3, r1
 8008f8c:	4925      	ldr	r1, [pc, #148]	@ (8009024 <_strtod_l+0x594>)
 8008f8e:	4682      	mov	sl, r0
 8008f90:	428b      	cmp	r3, r1
 8008f92:	d898      	bhi.n	8008ec6 <_strtod_l+0x436>
 8008f94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f98:	428b      	cmp	r3, r1
 8008f9a:	bf86      	itte	hi
 8008f9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8008fa0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009028 <_strtod_l+0x598>
 8008fa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	e076      	b.n	800909c <_strtod_l+0x60c>
 8008fae:	07e2      	lsls	r2, r4, #31
 8008fb0:	d504      	bpl.n	8008fbc <_strtod_l+0x52c>
 8008fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb6:	f7f7 fa8f 	bl	80004d8 <__aeabi_dmul>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	3601      	adds	r6, #1
 8008fbe:	1064      	asrs	r4, r4, #1
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	e7d0      	b.n	8008f66 <_strtod_l+0x4d6>
 8008fc4:	d0f0      	beq.n	8008fa8 <_strtod_l+0x518>
 8008fc6:	4264      	negs	r4, r4
 8008fc8:	f014 020f 	ands.w	r2, r4, #15
 8008fcc:	d00a      	beq.n	8008fe4 <_strtod_l+0x554>
 8008fce:	4b13      	ldr	r3, [pc, #76]	@ (800901c <_strtod_l+0x58c>)
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fba6 	bl	800072c <__aeabi_ddiv>
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	468b      	mov	fp, r1
 8008fe4:	1124      	asrs	r4, r4, #4
 8008fe6:	d0df      	beq.n	8008fa8 <_strtod_l+0x518>
 8008fe8:	2c1f      	cmp	r4, #31
 8008fea:	dd1f      	ble.n	800902c <_strtod_l+0x59c>
 8008fec:	2400      	movs	r4, #0
 8008fee:	46a0      	mov	r8, r4
 8008ff0:	46a1      	mov	r9, r4
 8008ff2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff4:	2322      	movs	r3, #34	@ 0x22
 8008ff6:	9a05      	ldr	r2, [sp, #20]
 8008ff8:	f04f 0a00 	mov.w	sl, #0
 8008ffc:	f04f 0b00 	mov.w	fp, #0
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e76b      	b.n	8008edc <_strtod_l+0x44c>
 8009004:	0800bbd1 	.word	0x0800bbd1
 8009008:	0800bd2c 	.word	0x0800bd2c
 800900c:	0800bbc8 	.word	0x0800bbc8
 8009010:	0800bbcb 	.word	0x0800bbcb
 8009014:	7ff00000 	.word	0x7ff00000
 8009018:	0800bd2b 	.word	0x0800bd2b
 800901c:	0800bdb8 	.word	0x0800bdb8
 8009020:	0800bd90 	.word	0x0800bd90
 8009024:	7ca00000 	.word	0x7ca00000
 8009028:	7fefffff 	.word	0x7fefffff
 800902c:	f014 0310 	ands.w	r3, r4, #16
 8009030:	bf18      	it	ne
 8009032:	236a      	movne	r3, #106	@ 0x6a
 8009034:	4650      	mov	r0, sl
 8009036:	9308      	str	r3, [sp, #32]
 8009038:	4659      	mov	r1, fp
 800903a:	2300      	movs	r3, #0
 800903c:	4e77      	ldr	r6, [pc, #476]	@ (800921c <_strtod_l+0x78c>)
 800903e:	07e7      	lsls	r7, r4, #31
 8009040:	d504      	bpl.n	800904c <_strtod_l+0x5bc>
 8009042:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009046:	f7f7 fa47 	bl	80004d8 <__aeabi_dmul>
 800904a:	2301      	movs	r3, #1
 800904c:	1064      	asrs	r4, r4, #1
 800904e:	f106 0608 	add.w	r6, r6, #8
 8009052:	d1f4      	bne.n	800903e <_strtod_l+0x5ae>
 8009054:	b10b      	cbz	r3, 800905a <_strtod_l+0x5ca>
 8009056:	4682      	mov	sl, r0
 8009058:	468b      	mov	fp, r1
 800905a:	9b08      	ldr	r3, [sp, #32]
 800905c:	b1b3      	cbz	r3, 800908c <_strtod_l+0x5fc>
 800905e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009062:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009066:	2b00      	cmp	r3, #0
 8009068:	4659      	mov	r1, fp
 800906a:	dd0f      	ble.n	800908c <_strtod_l+0x5fc>
 800906c:	2b1f      	cmp	r3, #31
 800906e:	dd58      	ble.n	8009122 <_strtod_l+0x692>
 8009070:	2b34      	cmp	r3, #52	@ 0x34
 8009072:	bfd8      	it	le
 8009074:	f04f 33ff 	movle.w	r3, #4294967295
 8009078:	f04f 0a00 	mov.w	sl, #0
 800907c:	bfcf      	iteee	gt
 800907e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009082:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009086:	4093      	lslle	r3, r2
 8009088:	ea03 0b01 	andle.w	fp, r3, r1
 800908c:	2200      	movs	r2, #0
 800908e:	2300      	movs	r3, #0
 8009090:	4650      	mov	r0, sl
 8009092:	4659      	mov	r1, fp
 8009094:	f7f7 fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8009098:	2800      	cmp	r0, #0
 800909a:	d1a7      	bne.n	8008fec <_strtod_l+0x55c>
 800909c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909e:	464a      	mov	r2, r9
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80090a4:	462b      	mov	r3, r5
 80090a6:	9805      	ldr	r0, [sp, #20]
 80090a8:	f001 f996 	bl	800a3d8 <__s2b>
 80090ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f af09 	beq.w	8008ec6 <_strtod_l+0x436>
 80090b4:	2400      	movs	r4, #0
 80090b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	eba3 0308 	sub.w	r3, r3, r8
 80090c0:	bfa8      	it	ge
 80090c2:	2300      	movge	r3, #0
 80090c4:	46a0      	mov	r8, r4
 80090c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80090c8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80090cc:	9316      	str	r3, [sp, #88]	@ 0x58
 80090ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090d0:	9805      	ldr	r0, [sp, #20]
 80090d2:	6859      	ldr	r1, [r3, #4]
 80090d4:	f001 f8d8 	bl	800a288 <_Balloc>
 80090d8:	4681      	mov	r9, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	f43f aef7 	beq.w	8008ece <_strtod_l+0x43e>
 80090e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090e2:	300c      	adds	r0, #12
 80090e4:	691a      	ldr	r2, [r3, #16]
 80090e6:	f103 010c 	add.w	r1, r3, #12
 80090ea:	3202      	adds	r2, #2
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	f000 fc74 	bl	80099da <memcpy>
 80090f2:	ab1c      	add	r3, sp, #112	@ 0x70
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	4652      	mov	r2, sl
 80090fc:	465b      	mov	r3, fp
 80090fe:	9805      	ldr	r0, [sp, #20]
 8009100:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009104:	f001 fc94 	bl	800aa30 <__d2b>
 8009108:	901a      	str	r0, [sp, #104]	@ 0x68
 800910a:	2800      	cmp	r0, #0
 800910c:	f43f aedf 	beq.w	8008ece <_strtod_l+0x43e>
 8009110:	2101      	movs	r1, #1
 8009112:	9805      	ldr	r0, [sp, #20]
 8009114:	f001 f9f6 	bl	800a504 <__i2b>
 8009118:	4680      	mov	r8, r0
 800911a:	b948      	cbnz	r0, 8009130 <_strtod_l+0x6a0>
 800911c:	f04f 0800 	mov.w	r8, #0
 8009120:	e6d5      	b.n	8008ece <_strtod_l+0x43e>
 8009122:	f04f 32ff 	mov.w	r2, #4294967295
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	ea03 0a0a 	and.w	sl, r3, sl
 800912e:	e7ad      	b.n	800908c <_strtod_l+0x5fc>
 8009130:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009132:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009134:	2d00      	cmp	r5, #0
 8009136:	bfab      	itete	ge
 8009138:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800913a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800913c:	18ef      	addge	r7, r5, r3
 800913e:	1b5e      	sublt	r6, r3, r5
 8009140:	9b08      	ldr	r3, [sp, #32]
 8009142:	bfa8      	it	ge
 8009144:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009146:	eba5 0503 	sub.w	r5, r5, r3
 800914a:	4415      	add	r5, r2
 800914c:	4b34      	ldr	r3, [pc, #208]	@ (8009220 <_strtod_l+0x790>)
 800914e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009152:	bfb8      	it	lt
 8009154:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009156:	429d      	cmp	r5, r3
 8009158:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800915c:	da50      	bge.n	8009200 <_strtod_l+0x770>
 800915e:	1b5b      	subs	r3, r3, r5
 8009160:	2b1f      	cmp	r3, #31
 8009162:	f04f 0101 	mov.w	r1, #1
 8009166:	eba2 0203 	sub.w	r2, r2, r3
 800916a:	dc3d      	bgt.n	80091e8 <_strtod_l+0x758>
 800916c:	fa01 f303 	lsl.w	r3, r1, r3
 8009170:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009172:	2300      	movs	r3, #0
 8009174:	9310      	str	r3, [sp, #64]	@ 0x40
 8009176:	18bd      	adds	r5, r7, r2
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	42af      	cmp	r7, r5
 800917c:	4416      	add	r6, r2
 800917e:	441e      	add	r6, r3
 8009180:	463b      	mov	r3, r7
 8009182:	bfa8      	it	ge
 8009184:	462b      	movge	r3, r5
 8009186:	42b3      	cmp	r3, r6
 8009188:	bfa8      	it	ge
 800918a:	4633      	movge	r3, r6
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfc2      	ittt	gt
 8009190:	1aed      	subgt	r5, r5, r3
 8009192:	1af6      	subgt	r6, r6, r3
 8009194:	1aff      	subgt	r7, r7, r3
 8009196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009198:	2b00      	cmp	r3, #0
 800919a:	dd16      	ble.n	80091ca <_strtod_l+0x73a>
 800919c:	4641      	mov	r1, r8
 800919e:	461a      	mov	r2, r3
 80091a0:	9805      	ldr	r0, [sp, #20]
 80091a2:	f001 fa67 	bl	800a674 <__pow5mult>
 80091a6:	4680      	mov	r8, r0
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0b7      	beq.n	800911c <_strtod_l+0x68c>
 80091ac:	4601      	mov	r1, r0
 80091ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091b0:	9805      	ldr	r0, [sp, #20]
 80091b2:	f001 f9bd 	bl	800a530 <__multiply>
 80091b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80091b8:	2800      	cmp	r0, #0
 80091ba:	f43f ae88 	beq.w	8008ece <_strtod_l+0x43e>
 80091be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091c0:	9805      	ldr	r0, [sp, #20]
 80091c2:	f001 f8a1 	bl	800a308 <_Bfree>
 80091c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	dc1d      	bgt.n	800920a <_strtod_l+0x77a>
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dd27      	ble.n	8009224 <_strtod_l+0x794>
 80091d4:	4649      	mov	r1, r9
 80091d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80091d8:	9805      	ldr	r0, [sp, #20]
 80091da:	f001 fa4b 	bl	800a674 <__pow5mult>
 80091de:	4681      	mov	r9, r0
 80091e0:	bb00      	cbnz	r0, 8009224 <_strtod_l+0x794>
 80091e2:	f04f 0900 	mov.w	r9, #0
 80091e6:	e672      	b.n	8008ece <_strtod_l+0x43e>
 80091e8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80091ec:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80091f0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80091f4:	35e2      	adds	r5, #226	@ 0xe2
 80091f6:	fa01 f305 	lsl.w	r3, r1, r5
 80091fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80091fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80091fe:	e7ba      	b.n	8009176 <_strtod_l+0x6e6>
 8009200:	2300      	movs	r3, #0
 8009202:	9310      	str	r3, [sp, #64]	@ 0x40
 8009204:	2301      	movs	r3, #1
 8009206:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009208:	e7b5      	b.n	8009176 <_strtod_l+0x6e6>
 800920a:	462a      	mov	r2, r5
 800920c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800920e:	9805      	ldr	r0, [sp, #20]
 8009210:	f001 fa8a 	bl	800a728 <__lshift>
 8009214:	901a      	str	r0, [sp, #104]	@ 0x68
 8009216:	2800      	cmp	r0, #0
 8009218:	d1d9      	bne.n	80091ce <_strtod_l+0x73e>
 800921a:	e658      	b.n	8008ece <_strtod_l+0x43e>
 800921c:	0800bd58 	.word	0x0800bd58
 8009220:	fffffc02 	.word	0xfffffc02
 8009224:	2e00      	cmp	r6, #0
 8009226:	dd07      	ble.n	8009238 <_strtod_l+0x7a8>
 8009228:	4649      	mov	r1, r9
 800922a:	4632      	mov	r2, r6
 800922c:	9805      	ldr	r0, [sp, #20]
 800922e:	f001 fa7b 	bl	800a728 <__lshift>
 8009232:	4681      	mov	r9, r0
 8009234:	2800      	cmp	r0, #0
 8009236:	d0d4      	beq.n	80091e2 <_strtod_l+0x752>
 8009238:	2f00      	cmp	r7, #0
 800923a:	dd08      	ble.n	800924e <_strtod_l+0x7be>
 800923c:	4641      	mov	r1, r8
 800923e:	463a      	mov	r2, r7
 8009240:	9805      	ldr	r0, [sp, #20]
 8009242:	f001 fa71 	bl	800a728 <__lshift>
 8009246:	4680      	mov	r8, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	f43f ae40 	beq.w	8008ece <_strtod_l+0x43e>
 800924e:	464a      	mov	r2, r9
 8009250:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009252:	9805      	ldr	r0, [sp, #20]
 8009254:	f001 faf0 	bl	800a838 <__mdiff>
 8009258:	4604      	mov	r4, r0
 800925a:	2800      	cmp	r0, #0
 800925c:	f43f ae37 	beq.w	8008ece <_strtod_l+0x43e>
 8009260:	68c3      	ldr	r3, [r0, #12]
 8009262:	4641      	mov	r1, r8
 8009264:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009266:	2300      	movs	r3, #0
 8009268:	60c3      	str	r3, [r0, #12]
 800926a:	f001 fac9 	bl	800a800 <__mcmp>
 800926e:	2800      	cmp	r0, #0
 8009270:	da3d      	bge.n	80092ee <_strtod_l+0x85e>
 8009272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009274:	ea53 030a 	orrs.w	r3, r3, sl
 8009278:	d163      	bne.n	8009342 <_strtod_l+0x8b2>
 800927a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800927e:	2b00      	cmp	r3, #0
 8009280:	d15f      	bne.n	8009342 <_strtod_l+0x8b2>
 8009282:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009286:	0d1b      	lsrs	r3, r3, #20
 8009288:	051b      	lsls	r3, r3, #20
 800928a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800928e:	d958      	bls.n	8009342 <_strtod_l+0x8b2>
 8009290:	6963      	ldr	r3, [r4, #20]
 8009292:	b913      	cbnz	r3, 800929a <_strtod_l+0x80a>
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	2b01      	cmp	r3, #1
 8009298:	dd53      	ble.n	8009342 <_strtod_l+0x8b2>
 800929a:	4621      	mov	r1, r4
 800929c:	2201      	movs	r2, #1
 800929e:	9805      	ldr	r0, [sp, #20]
 80092a0:	f001 fa42 	bl	800a728 <__lshift>
 80092a4:	4641      	mov	r1, r8
 80092a6:	4604      	mov	r4, r0
 80092a8:	f001 faaa 	bl	800a800 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dd48      	ble.n	8009342 <_strtod_l+0x8b2>
 80092b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092b4:	9a08      	ldr	r2, [sp, #32]
 80092b6:	0d1b      	lsrs	r3, r3, #20
 80092b8:	051b      	lsls	r3, r3, #20
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d062      	beq.n	8009384 <_strtod_l+0x8f4>
 80092be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092c2:	d85f      	bhi.n	8009384 <_strtod_l+0x8f4>
 80092c4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80092c8:	f67f ae94 	bls.w	8008ff4 <_strtod_l+0x564>
 80092cc:	4650      	mov	r0, sl
 80092ce:	4659      	mov	r1, fp
 80092d0:	4ba3      	ldr	r3, [pc, #652]	@ (8009560 <_strtod_l+0xad0>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	f7f7 f900 	bl	80004d8 <__aeabi_dmul>
 80092d8:	4ba2      	ldr	r3, [pc, #648]	@ (8009564 <_strtod_l+0xad4>)
 80092da:	4682      	mov	sl, r0
 80092dc:	400b      	ands	r3, r1
 80092de:	468b      	mov	fp, r1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f47f adff 	bne.w	8008ee4 <_strtod_l+0x454>
 80092e6:	2322      	movs	r3, #34	@ 0x22
 80092e8:	9a05      	ldr	r2, [sp, #20]
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	e5fa      	b.n	8008ee4 <_strtod_l+0x454>
 80092ee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80092f2:	d165      	bne.n	80093c0 <_strtod_l+0x930>
 80092f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80092f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092fa:	b35a      	cbz	r2, 8009354 <_strtod_l+0x8c4>
 80092fc:	4a9a      	ldr	r2, [pc, #616]	@ (8009568 <_strtod_l+0xad8>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d12b      	bne.n	800935a <_strtod_l+0x8ca>
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	4651      	mov	r1, sl
 8009306:	b303      	cbz	r3, 800934a <_strtod_l+0x8ba>
 8009308:	465a      	mov	r2, fp
 800930a:	4b96      	ldr	r3, [pc, #600]	@ (8009564 <_strtod_l+0xad4>)
 800930c:	4013      	ands	r3, r2
 800930e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009312:	f04f 32ff 	mov.w	r2, #4294967295
 8009316:	d81b      	bhi.n	8009350 <_strtod_l+0x8c0>
 8009318:	0d1b      	lsrs	r3, r3, #20
 800931a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	4299      	cmp	r1, r3
 8009324:	d119      	bne.n	800935a <_strtod_l+0x8ca>
 8009326:	4b91      	ldr	r3, [pc, #580]	@ (800956c <_strtod_l+0xadc>)
 8009328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800932a:	429a      	cmp	r2, r3
 800932c:	d102      	bne.n	8009334 <_strtod_l+0x8a4>
 800932e:	3101      	adds	r1, #1
 8009330:	f43f adcd 	beq.w	8008ece <_strtod_l+0x43e>
 8009334:	f04f 0a00 	mov.w	sl, #0
 8009338:	4b8a      	ldr	r3, [pc, #552]	@ (8009564 <_strtod_l+0xad4>)
 800933a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800933c:	401a      	ands	r2, r3
 800933e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009342:	9b08      	ldr	r3, [sp, #32]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1c1      	bne.n	80092cc <_strtod_l+0x83c>
 8009348:	e5cc      	b.n	8008ee4 <_strtod_l+0x454>
 800934a:	f04f 33ff 	mov.w	r3, #4294967295
 800934e:	e7e8      	b.n	8009322 <_strtod_l+0x892>
 8009350:	4613      	mov	r3, r2
 8009352:	e7e6      	b.n	8009322 <_strtod_l+0x892>
 8009354:	ea53 030a 	orrs.w	r3, r3, sl
 8009358:	d0aa      	beq.n	80092b0 <_strtod_l+0x820>
 800935a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800935c:	b1db      	cbz	r3, 8009396 <_strtod_l+0x906>
 800935e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009360:	4213      	tst	r3, r2
 8009362:	d0ee      	beq.n	8009342 <_strtod_l+0x8b2>
 8009364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	9a08      	ldr	r2, [sp, #32]
 800936c:	b1bb      	cbz	r3, 800939e <_strtod_l+0x90e>
 800936e:	f7ff fb6e 	bl	8008a4e <sulp>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800937a:	f7f6 fef7 	bl	800016c <__adddf3>
 800937e:	4682      	mov	sl, r0
 8009380:	468b      	mov	fp, r1
 8009382:	e7de      	b.n	8009342 <_strtod_l+0x8b2>
 8009384:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009388:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800938c:	f04f 3aff 	mov.w	sl, #4294967295
 8009390:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009394:	e7d5      	b.n	8009342 <_strtod_l+0x8b2>
 8009396:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009398:	ea13 0f0a 	tst.w	r3, sl
 800939c:	e7e1      	b.n	8009362 <_strtod_l+0x8d2>
 800939e:	f7ff fb56 	bl	8008a4e <sulp>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093aa:	f7f6 fedd 	bl	8000168 <__aeabi_dsub>
 80093ae:	2200      	movs	r2, #0
 80093b0:	2300      	movs	r3, #0
 80093b2:	4682      	mov	sl, r0
 80093b4:	468b      	mov	fp, r1
 80093b6:	f7f7 faf7 	bl	80009a8 <__aeabi_dcmpeq>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0c1      	beq.n	8009342 <_strtod_l+0x8b2>
 80093be:	e619      	b.n	8008ff4 <_strtod_l+0x564>
 80093c0:	4641      	mov	r1, r8
 80093c2:	4620      	mov	r0, r4
 80093c4:	f001 fb8c 	bl	800aae0 <__ratio>
 80093c8:	2200      	movs	r2, #0
 80093ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80093ce:	4606      	mov	r6, r0
 80093d0:	460f      	mov	r7, r1
 80093d2:	f7f7 fafd 	bl	80009d0 <__aeabi_dcmple>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d06d      	beq.n	80094b6 <_strtod_l+0xa26>
 80093da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d178      	bne.n	80094d2 <_strtod_l+0xa42>
 80093e0:	f1ba 0f00 	cmp.w	sl, #0
 80093e4:	d156      	bne.n	8009494 <_strtod_l+0xa04>
 80093e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d158      	bne.n	80094a2 <_strtod_l+0xa12>
 80093f0:	2200      	movs	r2, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	4639      	mov	r1, r7
 80093f6:	4b5e      	ldr	r3, [pc, #376]	@ (8009570 <_strtod_l+0xae0>)
 80093f8:	f7f7 fae0 	bl	80009bc <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d157      	bne.n	80094b0 <_strtod_l+0xa20>
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	2200      	movs	r2, #0
 8009406:	4b5b      	ldr	r3, [pc, #364]	@ (8009574 <_strtod_l+0xae4>)
 8009408:	f7f7 f866 	bl	80004d8 <__aeabi_dmul>
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009414:	9606      	str	r6, [sp, #24]
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800941c:	4d51      	ldr	r5, [pc, #324]	@ (8009564 <_strtod_l+0xad4>)
 800941e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009424:	401d      	ands	r5, r3
 8009426:	4b54      	ldr	r3, [pc, #336]	@ (8009578 <_strtod_l+0xae8>)
 8009428:	429d      	cmp	r5, r3
 800942a:	f040 80ab 	bne.w	8009584 <_strtod_l+0xaf4>
 800942e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009430:	4650      	mov	r0, sl
 8009432:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009436:	4659      	mov	r1, fp
 8009438:	f001 fa92 	bl	800a960 <__ulp>
 800943c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009440:	f7f7 f84a 	bl	80004d8 <__aeabi_dmul>
 8009444:	4652      	mov	r2, sl
 8009446:	465b      	mov	r3, fp
 8009448:	f7f6 fe90 	bl	800016c <__adddf3>
 800944c:	460b      	mov	r3, r1
 800944e:	4945      	ldr	r1, [pc, #276]	@ (8009564 <_strtod_l+0xad4>)
 8009450:	4a4a      	ldr	r2, [pc, #296]	@ (800957c <_strtod_l+0xaec>)
 8009452:	4019      	ands	r1, r3
 8009454:	4291      	cmp	r1, r2
 8009456:	4682      	mov	sl, r0
 8009458:	d942      	bls.n	80094e0 <_strtod_l+0xa50>
 800945a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800945c:	4b43      	ldr	r3, [pc, #268]	@ (800956c <_strtod_l+0xadc>)
 800945e:	429a      	cmp	r2, r3
 8009460:	d103      	bne.n	800946a <_strtod_l+0x9da>
 8009462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009464:	3301      	adds	r3, #1
 8009466:	f43f ad32 	beq.w	8008ece <_strtod_l+0x43e>
 800946a:	f04f 3aff 	mov.w	sl, #4294967295
 800946e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800956c <_strtod_l+0xadc>
 8009472:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009474:	9805      	ldr	r0, [sp, #20]
 8009476:	f000 ff47 	bl	800a308 <_Bfree>
 800947a:	4649      	mov	r1, r9
 800947c:	9805      	ldr	r0, [sp, #20]
 800947e:	f000 ff43 	bl	800a308 <_Bfree>
 8009482:	4641      	mov	r1, r8
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	f000 ff3f 	bl	800a308 <_Bfree>
 800948a:	4621      	mov	r1, r4
 800948c:	9805      	ldr	r0, [sp, #20]
 800948e:	f000 ff3b 	bl	800a308 <_Bfree>
 8009492:	e61c      	b.n	80090ce <_strtod_l+0x63e>
 8009494:	f1ba 0f01 	cmp.w	sl, #1
 8009498:	d103      	bne.n	80094a2 <_strtod_l+0xa12>
 800949a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949c:	2b00      	cmp	r3, #0
 800949e:	f43f ada9 	beq.w	8008ff4 <_strtod_l+0x564>
 80094a2:	2200      	movs	r2, #0
 80094a4:	4b36      	ldr	r3, [pc, #216]	@ (8009580 <_strtod_l+0xaf0>)
 80094a6:	2600      	movs	r6, #0
 80094a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094ac:	4f30      	ldr	r7, [pc, #192]	@ (8009570 <_strtod_l+0xae0>)
 80094ae:	e7b3      	b.n	8009418 <_strtod_l+0x988>
 80094b0:	2600      	movs	r6, #0
 80094b2:	4f30      	ldr	r7, [pc, #192]	@ (8009574 <_strtod_l+0xae4>)
 80094b4:	e7ac      	b.n	8009410 <_strtod_l+0x980>
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	4b2e      	ldr	r3, [pc, #184]	@ (8009574 <_strtod_l+0xae4>)
 80094bc:	2200      	movs	r2, #0
 80094be:	f7f7 f80b 	bl	80004d8 <__aeabi_dmul>
 80094c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0a1      	beq.n	8009410 <_strtod_l+0x980>
 80094cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80094d0:	e7a2      	b.n	8009418 <_strtod_l+0x988>
 80094d2:	2200      	movs	r2, #0
 80094d4:	4b26      	ldr	r3, [pc, #152]	@ (8009570 <_strtod_l+0xae0>)
 80094d6:	4616      	mov	r6, r2
 80094d8:	461f      	mov	r7, r3
 80094da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094de:	e79b      	b.n	8009418 <_strtod_l+0x988>
 80094e0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80094e4:	9b08      	ldr	r3, [sp, #32]
 80094e6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1c1      	bne.n	8009472 <_strtod_l+0x9e2>
 80094ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094f2:	0d1b      	lsrs	r3, r3, #20
 80094f4:	051b      	lsls	r3, r3, #20
 80094f6:	429d      	cmp	r5, r3
 80094f8:	d1bb      	bne.n	8009472 <_strtod_l+0x9e2>
 80094fa:	4630      	mov	r0, r6
 80094fc:	4639      	mov	r1, r7
 80094fe:	f7f7 fb33 	bl	8000b68 <__aeabi_d2lz>
 8009502:	f7f6 ffbb 	bl	800047c <__aeabi_l2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4630      	mov	r0, r6
 800950c:	4639      	mov	r1, r7
 800950e:	f7f6 fe2b 	bl	8000168 <__aeabi_dsub>
 8009512:	460b      	mov	r3, r1
 8009514:	4602      	mov	r2, r0
 8009516:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800951a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800951e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009520:	ea46 060a 	orr.w	r6, r6, sl
 8009524:	431e      	orrs	r6, r3
 8009526:	d06a      	beq.n	80095fe <_strtod_l+0xb6e>
 8009528:	a309      	add	r3, pc, #36	@ (adr r3, 8009550 <_strtod_l+0xac0>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f7 fa45 	bl	80009bc <__aeabi_dcmplt>
 8009532:	2800      	cmp	r0, #0
 8009534:	f47f acd6 	bne.w	8008ee4 <_strtod_l+0x454>
 8009538:	a307      	add	r3, pc, #28	@ (adr r3, 8009558 <_strtod_l+0xac8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009542:	f7f7 fa59 	bl	80009f8 <__aeabi_dcmpgt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d093      	beq.n	8009472 <_strtod_l+0x9e2>
 800954a:	e4cb      	b.n	8008ee4 <_strtod_l+0x454>
 800954c:	f3af 8000 	nop.w
 8009550:	94a03595 	.word	0x94a03595
 8009554:	3fdfffff 	.word	0x3fdfffff
 8009558:	35afe535 	.word	0x35afe535
 800955c:	3fe00000 	.word	0x3fe00000
 8009560:	39500000 	.word	0x39500000
 8009564:	7ff00000 	.word	0x7ff00000
 8009568:	000fffff 	.word	0x000fffff
 800956c:	7fefffff 	.word	0x7fefffff
 8009570:	3ff00000 	.word	0x3ff00000
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	7fe00000 	.word	0x7fe00000
 800957c:	7c9fffff 	.word	0x7c9fffff
 8009580:	bff00000 	.word	0xbff00000
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	b323      	cbz	r3, 80095d2 <_strtod_l+0xb42>
 8009588:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800958c:	d821      	bhi.n	80095d2 <_strtod_l+0xb42>
 800958e:	a328      	add	r3, pc, #160	@ (adr r3, 8009630 <_strtod_l+0xba0>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	4630      	mov	r0, r6
 8009596:	4639      	mov	r1, r7
 8009598:	f7f7 fa1a 	bl	80009d0 <__aeabi_dcmple>
 800959c:	b1a0      	cbz	r0, 80095c8 <_strtod_l+0xb38>
 800959e:	4639      	mov	r1, r7
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7f7 fa5b 	bl	8000a5c <__aeabi_d2uiz>
 80095a6:	2801      	cmp	r0, #1
 80095a8:	bf38      	it	cc
 80095aa:	2001      	movcc	r0, #1
 80095ac:	f7f6 ff1a 	bl	80003e4 <__aeabi_ui2d>
 80095b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b2:	4606      	mov	r6, r0
 80095b4:	460f      	mov	r7, r1
 80095b6:	b9fb      	cbnz	r3, 80095f8 <_strtod_l+0xb68>
 80095b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80095be:	9315      	str	r3, [sp, #84]	@ 0x54
 80095c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80095c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80095ce:	1b5b      	subs	r3, r3, r5
 80095d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80095da:	f001 f9c1 	bl	800a960 <__ulp>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f7f6 ff77 	bl	80004d8 <__aeabi_dmul>
 80095ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80095ee:	f7f6 fdbd 	bl	800016c <__adddf3>
 80095f2:	4682      	mov	sl, r0
 80095f4:	468b      	mov	fp, r1
 80095f6:	e775      	b.n	80094e4 <_strtod_l+0xa54>
 80095f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80095fc:	e7e0      	b.n	80095c0 <_strtod_l+0xb30>
 80095fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009638 <_strtod_l+0xba8>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f7f7 f9da 	bl	80009bc <__aeabi_dcmplt>
 8009608:	e79d      	b.n	8009546 <_strtod_l+0xab6>
 800960a:	2300      	movs	r3, #0
 800960c:	930e      	str	r3, [sp, #56]	@ 0x38
 800960e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009610:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009612:	6013      	str	r3, [r2, #0]
 8009614:	f7ff ba79 	b.w	8008b0a <_strtod_l+0x7a>
 8009618:	2a65      	cmp	r2, #101	@ 0x65
 800961a:	f43f ab72 	beq.w	8008d02 <_strtod_l+0x272>
 800961e:	2a45      	cmp	r2, #69	@ 0x45
 8009620:	f43f ab6f 	beq.w	8008d02 <_strtod_l+0x272>
 8009624:	2301      	movs	r3, #1
 8009626:	f7ff bbaa 	b.w	8008d7e <_strtod_l+0x2ee>
 800962a:	bf00      	nop
 800962c:	f3af 8000 	nop.w
 8009630:	ffc00000 	.word	0xffc00000
 8009634:	41dfffff 	.word	0x41dfffff
 8009638:	94a03595 	.word	0x94a03595
 800963c:	3fcfffff 	.word	0x3fcfffff

08009640 <strtod>:
 8009640:	460a      	mov	r2, r1
 8009642:	4601      	mov	r1, r0
 8009644:	4802      	ldr	r0, [pc, #8]	@ (8009650 <strtod+0x10>)
 8009646:	4b03      	ldr	r3, [pc, #12]	@ (8009654 <strtod+0x14>)
 8009648:	6800      	ldr	r0, [r0, #0]
 800964a:	f7ff ba21 	b.w	8008a90 <_strtod_l>
 800964e:	bf00      	nop
 8009650:	200002f8 	.word	0x200002f8
 8009654:	2000018c 	.word	0x2000018c

08009658 <std>:
 8009658:	2300      	movs	r3, #0
 800965a:	b510      	push	{r4, lr}
 800965c:	4604      	mov	r4, r0
 800965e:	e9c0 3300 	strd	r3, r3, [r0]
 8009662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009666:	6083      	str	r3, [r0, #8]
 8009668:	8181      	strh	r1, [r0, #12]
 800966a:	6643      	str	r3, [r0, #100]	@ 0x64
 800966c:	81c2      	strh	r2, [r0, #14]
 800966e:	6183      	str	r3, [r0, #24]
 8009670:	4619      	mov	r1, r3
 8009672:	2208      	movs	r2, #8
 8009674:	305c      	adds	r0, #92	@ 0x5c
 8009676:	f000 f916 	bl	80098a6 <memset>
 800967a:	4b0d      	ldr	r3, [pc, #52]	@ (80096b0 <std+0x58>)
 800967c:	6224      	str	r4, [r4, #32]
 800967e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009680:	4b0c      	ldr	r3, [pc, #48]	@ (80096b4 <std+0x5c>)
 8009682:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <std+0x60>)
 8009686:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009688:	4b0c      	ldr	r3, [pc, #48]	@ (80096bc <std+0x64>)
 800968a:	6323      	str	r3, [r4, #48]	@ 0x30
 800968c:	4b0c      	ldr	r3, [pc, #48]	@ (80096c0 <std+0x68>)
 800968e:	429c      	cmp	r4, r3
 8009690:	d006      	beq.n	80096a0 <std+0x48>
 8009692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009696:	4294      	cmp	r4, r2
 8009698:	d002      	beq.n	80096a0 <std+0x48>
 800969a:	33d0      	adds	r3, #208	@ 0xd0
 800969c:	429c      	cmp	r4, r3
 800969e:	d105      	bne.n	80096ac <std+0x54>
 80096a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a8:	f000 b994 	b.w	80099d4 <__retarget_lock_init_recursive>
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	bf00      	nop
 80096b0:	08009821 	.word	0x08009821
 80096b4:	08009843 	.word	0x08009843
 80096b8:	0800987b 	.word	0x0800987b
 80096bc:	0800989f 	.word	0x0800989f
 80096c0:	200015a8 	.word	0x200015a8

080096c4 <stdio_exit_handler>:
 80096c4:	4a02      	ldr	r2, [pc, #8]	@ (80096d0 <stdio_exit_handler+0xc>)
 80096c6:	4903      	ldr	r1, [pc, #12]	@ (80096d4 <stdio_exit_handler+0x10>)
 80096c8:	4803      	ldr	r0, [pc, #12]	@ (80096d8 <stdio_exit_handler+0x14>)
 80096ca:	f000 b869 	b.w	80097a0 <_fwalk_sglue>
 80096ce:	bf00      	nop
 80096d0:	20000180 	.word	0x20000180
 80096d4:	0800b2b1 	.word	0x0800b2b1
 80096d8:	200002fc 	.word	0x200002fc

080096dc <cleanup_stdio>:
 80096dc:	6841      	ldr	r1, [r0, #4]
 80096de:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <cleanup_stdio+0x34>)
 80096e0:	b510      	push	{r4, lr}
 80096e2:	4299      	cmp	r1, r3
 80096e4:	4604      	mov	r4, r0
 80096e6:	d001      	beq.n	80096ec <cleanup_stdio+0x10>
 80096e8:	f001 fde2 	bl	800b2b0 <_fflush_r>
 80096ec:	68a1      	ldr	r1, [r4, #8]
 80096ee:	4b09      	ldr	r3, [pc, #36]	@ (8009714 <cleanup_stdio+0x38>)
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d002      	beq.n	80096fa <cleanup_stdio+0x1e>
 80096f4:	4620      	mov	r0, r4
 80096f6:	f001 fddb 	bl	800b2b0 <_fflush_r>
 80096fa:	68e1      	ldr	r1, [r4, #12]
 80096fc:	4b06      	ldr	r3, [pc, #24]	@ (8009718 <cleanup_stdio+0x3c>)
 80096fe:	4299      	cmp	r1, r3
 8009700:	d004      	beq.n	800970c <cleanup_stdio+0x30>
 8009702:	4620      	mov	r0, r4
 8009704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009708:	f001 bdd2 	b.w	800b2b0 <_fflush_r>
 800970c:	bd10      	pop	{r4, pc}
 800970e:	bf00      	nop
 8009710:	200015a8 	.word	0x200015a8
 8009714:	20001610 	.word	0x20001610
 8009718:	20001678 	.word	0x20001678

0800971c <global_stdio_init.part.0>:
 800971c:	b510      	push	{r4, lr}
 800971e:	4b0b      	ldr	r3, [pc, #44]	@ (800974c <global_stdio_init.part.0+0x30>)
 8009720:	4c0b      	ldr	r4, [pc, #44]	@ (8009750 <global_stdio_init.part.0+0x34>)
 8009722:	4a0c      	ldr	r2, [pc, #48]	@ (8009754 <global_stdio_init.part.0+0x38>)
 8009724:	4620      	mov	r0, r4
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	2104      	movs	r1, #4
 800972a:	2200      	movs	r2, #0
 800972c:	f7ff ff94 	bl	8009658 <std>
 8009730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009734:	2201      	movs	r2, #1
 8009736:	2109      	movs	r1, #9
 8009738:	f7ff ff8e 	bl	8009658 <std>
 800973c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009740:	2202      	movs	r2, #2
 8009742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009746:	2112      	movs	r1, #18
 8009748:	f7ff bf86 	b.w	8009658 <std>
 800974c:	200016e0 	.word	0x200016e0
 8009750:	200015a8 	.word	0x200015a8
 8009754:	080096c5 	.word	0x080096c5

08009758 <__sfp_lock_acquire>:
 8009758:	4801      	ldr	r0, [pc, #4]	@ (8009760 <__sfp_lock_acquire+0x8>)
 800975a:	f000 b93c 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 800975e:	bf00      	nop
 8009760:	200016e9 	.word	0x200016e9

08009764 <__sfp_lock_release>:
 8009764:	4801      	ldr	r0, [pc, #4]	@ (800976c <__sfp_lock_release+0x8>)
 8009766:	f000 b937 	b.w	80099d8 <__retarget_lock_release_recursive>
 800976a:	bf00      	nop
 800976c:	200016e9 	.word	0x200016e9

08009770 <__sinit>:
 8009770:	b510      	push	{r4, lr}
 8009772:	4604      	mov	r4, r0
 8009774:	f7ff fff0 	bl	8009758 <__sfp_lock_acquire>
 8009778:	6a23      	ldr	r3, [r4, #32]
 800977a:	b11b      	cbz	r3, 8009784 <__sinit+0x14>
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	f7ff bff0 	b.w	8009764 <__sfp_lock_release>
 8009784:	4b04      	ldr	r3, [pc, #16]	@ (8009798 <__sinit+0x28>)
 8009786:	6223      	str	r3, [r4, #32]
 8009788:	4b04      	ldr	r3, [pc, #16]	@ (800979c <__sinit+0x2c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1f5      	bne.n	800977c <__sinit+0xc>
 8009790:	f7ff ffc4 	bl	800971c <global_stdio_init.part.0>
 8009794:	e7f2      	b.n	800977c <__sinit+0xc>
 8009796:	bf00      	nop
 8009798:	080096dd 	.word	0x080096dd
 800979c:	200016e0 	.word	0x200016e0

080097a0 <_fwalk_sglue>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4607      	mov	r7, r0
 80097a6:	4688      	mov	r8, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	2600      	movs	r6, #0
 80097ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b0:	f1b9 0901 	subs.w	r9, r9, #1
 80097b4:	d505      	bpl.n	80097c2 <_fwalk_sglue+0x22>
 80097b6:	6824      	ldr	r4, [r4, #0]
 80097b8:	2c00      	cmp	r4, #0
 80097ba:	d1f7      	bne.n	80097ac <_fwalk_sglue+0xc>
 80097bc:	4630      	mov	r0, r6
 80097be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c2:	89ab      	ldrh	r3, [r5, #12]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d907      	bls.n	80097d8 <_fwalk_sglue+0x38>
 80097c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097cc:	3301      	adds	r3, #1
 80097ce:	d003      	beq.n	80097d8 <_fwalk_sglue+0x38>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4638      	mov	r0, r7
 80097d4:	47c0      	blx	r8
 80097d6:	4306      	orrs	r6, r0
 80097d8:	3568      	adds	r5, #104	@ 0x68
 80097da:	e7e9      	b.n	80097b0 <_fwalk_sglue+0x10>

080097dc <siprintf>:
 80097dc:	b40e      	push	{r1, r2, r3}
 80097de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097e2:	b510      	push	{r4, lr}
 80097e4:	2400      	movs	r4, #0
 80097e6:	b09d      	sub	sp, #116	@ 0x74
 80097e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80097ea:	9002      	str	r0, [sp, #8]
 80097ec:	9006      	str	r0, [sp, #24]
 80097ee:	9107      	str	r1, [sp, #28]
 80097f0:	9104      	str	r1, [sp, #16]
 80097f2:	4809      	ldr	r0, [pc, #36]	@ (8009818 <siprintf+0x3c>)
 80097f4:	4909      	ldr	r1, [pc, #36]	@ (800981c <siprintf+0x40>)
 80097f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fa:	9105      	str	r1, [sp, #20]
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	a902      	add	r1, sp, #8
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009804:	f001 fa48 	bl	800ac98 <_svfiprintf_r>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	701c      	strb	r4, [r3, #0]
 800980c:	b01d      	add	sp, #116	@ 0x74
 800980e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009812:	b003      	add	sp, #12
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	200002f8 	.word	0x200002f8
 800981c:	ffff0208 	.word	0xffff0208

08009820 <__sread>:
 8009820:	b510      	push	{r4, lr}
 8009822:	460c      	mov	r4, r1
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	f000 f886 	bl	8009938 <_read_r>
 800982c:	2800      	cmp	r0, #0
 800982e:	bfab      	itete	ge
 8009830:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009832:	89a3      	ldrhlt	r3, [r4, #12]
 8009834:	181b      	addge	r3, r3, r0
 8009836:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800983a:	bfac      	ite	ge
 800983c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800983e:	81a3      	strhlt	r3, [r4, #12]
 8009840:	bd10      	pop	{r4, pc}

08009842 <__swrite>:
 8009842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009846:	461f      	mov	r7, r3
 8009848:	898b      	ldrh	r3, [r1, #12]
 800984a:	4605      	mov	r5, r0
 800984c:	05db      	lsls	r3, r3, #23
 800984e:	460c      	mov	r4, r1
 8009850:	4616      	mov	r6, r2
 8009852:	d505      	bpl.n	8009860 <__swrite+0x1e>
 8009854:	2302      	movs	r3, #2
 8009856:	2200      	movs	r2, #0
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	f000 f85a 	bl	8009914 <_lseek_r>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	4632      	mov	r2, r6
 8009864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	4628      	mov	r0, r5
 800986c:	463b      	mov	r3, r7
 800986e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	f000 b871 	b.w	800995c <_write_r>

0800987a <__sseek>:
 800987a:	b510      	push	{r4, lr}
 800987c:	460c      	mov	r4, r1
 800987e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009882:	f000 f847 	bl	8009914 <_lseek_r>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	bf15      	itete	ne
 800988c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800988e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009896:	81a3      	strheq	r3, [r4, #12]
 8009898:	bf18      	it	ne
 800989a:	81a3      	strhne	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__sclose>:
 800989e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a2:	f000 b827 	b.w	80098f4 <_close_r>

080098a6 <memset>:
 80098a6:	4603      	mov	r3, r0
 80098a8:	4402      	add	r2, r0
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d100      	bne.n	80098b0 <memset+0xa>
 80098ae:	4770      	bx	lr
 80098b0:	f803 1b01 	strb.w	r1, [r3], #1
 80098b4:	e7f9      	b.n	80098aa <memset+0x4>

080098b6 <strchr>:
 80098b6:	4603      	mov	r3, r0
 80098b8:	b2c9      	uxtb	r1, r1
 80098ba:	4618      	mov	r0, r3
 80098bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098c0:	b112      	cbz	r2, 80098c8 <strchr+0x12>
 80098c2:	428a      	cmp	r2, r1
 80098c4:	d1f9      	bne.n	80098ba <strchr+0x4>
 80098c6:	4770      	bx	lr
 80098c8:	2900      	cmp	r1, #0
 80098ca:	bf18      	it	ne
 80098cc:	2000      	movne	r0, #0
 80098ce:	4770      	bx	lr

080098d0 <strncmp>:
 80098d0:	b510      	push	{r4, lr}
 80098d2:	b16a      	cbz	r2, 80098f0 <strncmp+0x20>
 80098d4:	3901      	subs	r1, #1
 80098d6:	1884      	adds	r4, r0, r2
 80098d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d103      	bne.n	80098ec <strncmp+0x1c>
 80098e4:	42a0      	cmp	r0, r4
 80098e6:	d001      	beq.n	80098ec <strncmp+0x1c>
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	d1f5      	bne.n	80098d8 <strncmp+0x8>
 80098ec:	1ad0      	subs	r0, r2, r3
 80098ee:	bd10      	pop	{r4, pc}
 80098f0:	4610      	mov	r0, r2
 80098f2:	e7fc      	b.n	80098ee <strncmp+0x1e>

080098f4 <_close_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	2300      	movs	r3, #0
 80098f8:	4d05      	ldr	r5, [pc, #20]	@ (8009910 <_close_r+0x1c>)
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	602b      	str	r3, [r5, #0]
 8009900:	f7f7 ff01 	bl	8001706 <_close>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_close_r+0x1a>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_close_r+0x1a>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	200016e4 	.word	0x200016e4

08009914 <_lseek_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	2200      	movs	r2, #0
 800991e:	4d05      	ldr	r5, [pc, #20]	@ (8009934 <_lseek_r+0x20>)
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f7f7 ff13 	bl	800174e <_lseek>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_lseek_r+0x1e>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_lseek_r+0x1e>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	200016e4 	.word	0x200016e4

08009938 <_read_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	4611      	mov	r1, r2
 8009940:	2200      	movs	r2, #0
 8009942:	4d05      	ldr	r5, [pc, #20]	@ (8009958 <_read_r+0x20>)
 8009944:	602a      	str	r2, [r5, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	f7f7 fea4 	bl	8001694 <_read>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_read_r+0x1e>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_read_r+0x1e>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	200016e4 	.word	0x200016e4

0800995c <_write_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	4611      	mov	r1, r2
 8009964:	2200      	movs	r2, #0
 8009966:	4d05      	ldr	r5, [pc, #20]	@ (800997c <_write_r+0x20>)
 8009968:	602a      	str	r2, [r5, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	f7f7 feaf 	bl	80016ce <_write>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_write_r+0x1e>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_write_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	200016e4 	.word	0x200016e4

08009980 <__errno>:
 8009980:	4b01      	ldr	r3, [pc, #4]	@ (8009988 <__errno+0x8>)
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	200002f8 	.word	0x200002f8

0800998c <__libc_init_array>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	2600      	movs	r6, #0
 8009990:	4d0c      	ldr	r5, [pc, #48]	@ (80099c4 <__libc_init_array+0x38>)
 8009992:	4c0d      	ldr	r4, [pc, #52]	@ (80099c8 <__libc_init_array+0x3c>)
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	42a6      	cmp	r6, r4
 800999a:	d109      	bne.n	80099b0 <__libc_init_array+0x24>
 800999c:	f002 f80c 	bl	800b9b8 <_init>
 80099a0:	2600      	movs	r6, #0
 80099a2:	4d0a      	ldr	r5, [pc, #40]	@ (80099cc <__libc_init_array+0x40>)
 80099a4:	4c0a      	ldr	r4, [pc, #40]	@ (80099d0 <__libc_init_array+0x44>)
 80099a6:	1b64      	subs	r4, r4, r5
 80099a8:	10a4      	asrs	r4, r4, #2
 80099aa:	42a6      	cmp	r6, r4
 80099ac:	d105      	bne.n	80099ba <__libc_init_array+0x2e>
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b4:	4798      	blx	r3
 80099b6:	3601      	adds	r6, #1
 80099b8:	e7ee      	b.n	8009998 <__libc_init_array+0xc>
 80099ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80099be:	4798      	blx	r3
 80099c0:	3601      	adds	r6, #1
 80099c2:	e7f2      	b.n	80099aa <__libc_init_array+0x1e>
 80099c4:	0800bf8c 	.word	0x0800bf8c
 80099c8:	0800bf8c 	.word	0x0800bf8c
 80099cc:	0800bf8c 	.word	0x0800bf8c
 80099d0:	0800bf90 	.word	0x0800bf90

080099d4 <__retarget_lock_init_recursive>:
 80099d4:	4770      	bx	lr

080099d6 <__retarget_lock_acquire_recursive>:
 80099d6:	4770      	bx	lr

080099d8 <__retarget_lock_release_recursive>:
 80099d8:	4770      	bx	lr

080099da <memcpy>:
 80099da:	440a      	add	r2, r1
 80099dc:	4291      	cmp	r1, r2
 80099de:	f100 33ff 	add.w	r3, r0, #4294967295
 80099e2:	d100      	bne.n	80099e6 <memcpy+0xc>
 80099e4:	4770      	bx	lr
 80099e6:	b510      	push	{r4, lr}
 80099e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ec:	4291      	cmp	r1, r2
 80099ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f2:	d1f9      	bne.n	80099e8 <memcpy+0xe>
 80099f4:	bd10      	pop	{r4, pc}
	...

080099f8 <nan>:
 80099f8:	2000      	movs	r0, #0
 80099fa:	4901      	ldr	r1, [pc, #4]	@ (8009a00 <nan+0x8>)
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	7ff80000 	.word	0x7ff80000

08009a04 <_free_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4605      	mov	r5, r0
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d040      	beq.n	8009a8e <_free_r+0x8a>
 8009a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a10:	1f0c      	subs	r4, r1, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb8      	it	lt
 8009a16:	18e4      	addlt	r4, r4, r3
 8009a18:	f000 fc2a 	bl	800a270 <__malloc_lock>
 8009a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8009a90 <_free_r+0x8c>)
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	b933      	cbnz	r3, 8009a30 <_free_r+0x2c>
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	4628      	mov	r0, r5
 8009a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2c:	f000 bc26 	b.w	800a27c <__malloc_unlock>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d908      	bls.n	8009a46 <_free_r+0x42>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	e7ed      	b.n	8009a22 <_free_r+0x1e>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x4c>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x42>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1850      	adds	r0, r2, r1
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x6c>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	4401      	add	r1, r0
 8009a5c:	1850      	adds	r0, r2, r1
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1e0      	bne.n	8009a26 <_free_r+0x22>
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4408      	add	r0, r1
 8009a6a:	6010      	str	r0, [r2, #0]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	e7da      	b.n	8009a26 <_free_r+0x22>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x74>
 8009a72:	230c      	movs	r3, #12
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	e7d6      	b.n	8009a26 <_free_r+0x22>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	1821      	adds	r1, r4, r0
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6054      	str	r4, [r2, #4]
 8009a8c:	e7cb      	b.n	8009a26 <_free_r+0x22>
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200016f0 	.word	0x200016f0

08009a94 <rshift>:
 8009a94:	6903      	ldr	r3, [r0, #16]
 8009a96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a9e:	f100 0414 	add.w	r4, r0, #20
 8009aa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009aa6:	dd46      	ble.n	8009b36 <rshift+0xa2>
 8009aa8:	f011 011f 	ands.w	r1, r1, #31
 8009aac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ab4:	d10c      	bne.n	8009ad0 <rshift+0x3c>
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f100 0710 	add.w	r7, r0, #16
 8009abc:	42b1      	cmp	r1, r6
 8009abe:	d335      	bcc.n	8009b2c <rshift+0x98>
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	1eea      	subs	r2, r5, #3
 8009ac6:	4296      	cmp	r6, r2
 8009ac8:	bf38      	it	cc
 8009aca:	2300      	movcc	r3, #0
 8009acc:	4423      	add	r3, r4
 8009ace:	e015      	b.n	8009afc <rshift+0x68>
 8009ad0:	46a1      	mov	r9, r4
 8009ad2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009ad6:	f1c1 0820 	rsb	r8, r1, #32
 8009ada:	40cf      	lsrs	r7, r1
 8009adc:	f105 0e04 	add.w	lr, r5, #4
 8009ae0:	4576      	cmp	r6, lr
 8009ae2:	46f4      	mov	ip, lr
 8009ae4:	d816      	bhi.n	8009b14 <rshift+0x80>
 8009ae6:	1a9a      	subs	r2, r3, r2
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	3a04      	subs	r2, #4
 8009aec:	3501      	adds	r5, #1
 8009aee:	42ae      	cmp	r6, r5
 8009af0:	bf38      	it	cc
 8009af2:	2200      	movcc	r2, #0
 8009af4:	18a3      	adds	r3, r4, r2
 8009af6:	50a7      	str	r7, [r4, r2]
 8009af8:	b107      	cbz	r7, 8009afc <rshift+0x68>
 8009afa:	3304      	adds	r3, #4
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	eba3 0204 	sub.w	r2, r3, r4
 8009b02:	bf08      	it	eq
 8009b04:	2300      	moveq	r3, #0
 8009b06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b0a:	6102      	str	r2, [r0, #16]
 8009b0c:	bf08      	it	eq
 8009b0e:	6143      	streq	r3, [r0, #20]
 8009b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b14:	f8dc c000 	ldr.w	ip, [ip]
 8009b18:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b1c:	ea4c 0707 	orr.w	r7, ip, r7
 8009b20:	f849 7b04 	str.w	r7, [r9], #4
 8009b24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b28:	40cf      	lsrs	r7, r1
 8009b2a:	e7d9      	b.n	8009ae0 <rshift+0x4c>
 8009b2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b30:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b34:	e7c2      	b.n	8009abc <rshift+0x28>
 8009b36:	4623      	mov	r3, r4
 8009b38:	e7e0      	b.n	8009afc <rshift+0x68>

08009b3a <__hexdig_fun>:
 8009b3a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b3e:	2b09      	cmp	r3, #9
 8009b40:	d802      	bhi.n	8009b48 <__hexdig_fun+0xe>
 8009b42:	3820      	subs	r0, #32
 8009b44:	b2c0      	uxtb	r0, r0
 8009b46:	4770      	bx	lr
 8009b48:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b4c:	2b05      	cmp	r3, #5
 8009b4e:	d801      	bhi.n	8009b54 <__hexdig_fun+0x1a>
 8009b50:	3847      	subs	r0, #71	@ 0x47
 8009b52:	e7f7      	b.n	8009b44 <__hexdig_fun+0xa>
 8009b54:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d801      	bhi.n	8009b60 <__hexdig_fun+0x26>
 8009b5c:	3827      	subs	r0, #39	@ 0x27
 8009b5e:	e7f1      	b.n	8009b44 <__hexdig_fun+0xa>
 8009b60:	2000      	movs	r0, #0
 8009b62:	4770      	bx	lr

08009b64 <__gethex>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	468a      	mov	sl, r1
 8009b6a:	4690      	mov	r8, r2
 8009b6c:	b085      	sub	sp, #20
 8009b6e:	9302      	str	r3, [sp, #8]
 8009b70:	680b      	ldr	r3, [r1, #0]
 8009b72:	9001      	str	r0, [sp, #4]
 8009b74:	1c9c      	adds	r4, r3, #2
 8009b76:	46a1      	mov	r9, r4
 8009b78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b7c:	2830      	cmp	r0, #48	@ 0x30
 8009b7e:	d0fa      	beq.n	8009b76 <__gethex+0x12>
 8009b80:	eba9 0303 	sub.w	r3, r9, r3
 8009b84:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b88:	f7ff ffd7 	bl	8009b3a <__hexdig_fun>
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d168      	bne.n	8009c64 <__gethex+0x100>
 8009b92:	2201      	movs	r2, #1
 8009b94:	4648      	mov	r0, r9
 8009b96:	499f      	ldr	r1, [pc, #636]	@ (8009e14 <__gethex+0x2b0>)
 8009b98:	f7ff fe9a 	bl	80098d0 <strncmp>
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d167      	bne.n	8009c72 <__gethex+0x10e>
 8009ba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009ba6:	4626      	mov	r6, r4
 8009ba8:	f7ff ffc7 	bl	8009b3a <__hexdig_fun>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d062      	beq.n	8009c76 <__gethex+0x112>
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	7818      	ldrb	r0, [r3, #0]
 8009bb4:	4699      	mov	r9, r3
 8009bb6:	2830      	cmp	r0, #48	@ 0x30
 8009bb8:	f103 0301 	add.w	r3, r3, #1
 8009bbc:	d0f9      	beq.n	8009bb2 <__gethex+0x4e>
 8009bbe:	f7ff ffbc 	bl	8009b3a <__hexdig_fun>
 8009bc2:	fab0 f580 	clz	r5, r0
 8009bc6:	f04f 0b01 	mov.w	fp, #1
 8009bca:	096d      	lsrs	r5, r5, #5
 8009bcc:	464a      	mov	r2, r9
 8009bce:	4616      	mov	r6, r2
 8009bd0:	7830      	ldrb	r0, [r6, #0]
 8009bd2:	3201      	adds	r2, #1
 8009bd4:	f7ff ffb1 	bl	8009b3a <__hexdig_fun>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d1f8      	bne.n	8009bce <__gethex+0x6a>
 8009bdc:	2201      	movs	r2, #1
 8009bde:	4630      	mov	r0, r6
 8009be0:	498c      	ldr	r1, [pc, #560]	@ (8009e14 <__gethex+0x2b0>)
 8009be2:	f7ff fe75 	bl	80098d0 <strncmp>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d13f      	bne.n	8009c6a <__gethex+0x106>
 8009bea:	b944      	cbnz	r4, 8009bfe <__gethex+0x9a>
 8009bec:	1c74      	adds	r4, r6, #1
 8009bee:	4622      	mov	r2, r4
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	7830      	ldrb	r0, [r6, #0]
 8009bf4:	3201      	adds	r2, #1
 8009bf6:	f7ff ffa0 	bl	8009b3a <__hexdig_fun>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d1f8      	bne.n	8009bf0 <__gethex+0x8c>
 8009bfe:	1ba4      	subs	r4, r4, r6
 8009c00:	00a7      	lsls	r7, r4, #2
 8009c02:	7833      	ldrb	r3, [r6, #0]
 8009c04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009c08:	2b50      	cmp	r3, #80	@ 0x50
 8009c0a:	d13e      	bne.n	8009c8a <__gethex+0x126>
 8009c0c:	7873      	ldrb	r3, [r6, #1]
 8009c0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c10:	d033      	beq.n	8009c7a <__gethex+0x116>
 8009c12:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c14:	d034      	beq.n	8009c80 <__gethex+0x11c>
 8009c16:	2400      	movs	r4, #0
 8009c18:	1c71      	adds	r1, r6, #1
 8009c1a:	7808      	ldrb	r0, [r1, #0]
 8009c1c:	f7ff ff8d 	bl	8009b3a <__hexdig_fun>
 8009c20:	1e43      	subs	r3, r0, #1
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b18      	cmp	r3, #24
 8009c26:	d830      	bhi.n	8009c8a <__gethex+0x126>
 8009c28:	f1a0 0210 	sub.w	r2, r0, #16
 8009c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c30:	f7ff ff83 	bl	8009b3a <__hexdig_fun>
 8009c34:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c38:	fa5f fc8c 	uxtb.w	ip, ip
 8009c3c:	f1bc 0f18 	cmp.w	ip, #24
 8009c40:	f04f 030a 	mov.w	r3, #10
 8009c44:	d91e      	bls.n	8009c84 <__gethex+0x120>
 8009c46:	b104      	cbz	r4, 8009c4a <__gethex+0xe6>
 8009c48:	4252      	negs	r2, r2
 8009c4a:	4417      	add	r7, r2
 8009c4c:	f8ca 1000 	str.w	r1, [sl]
 8009c50:	b1ed      	cbz	r5, 8009c8e <__gethex+0x12a>
 8009c52:	f1bb 0f00 	cmp.w	fp, #0
 8009c56:	bf0c      	ite	eq
 8009c58:	2506      	moveq	r5, #6
 8009c5a:	2500      	movne	r5, #0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	b005      	add	sp, #20
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	2500      	movs	r5, #0
 8009c66:	462c      	mov	r4, r5
 8009c68:	e7b0      	b.n	8009bcc <__gethex+0x68>
 8009c6a:	2c00      	cmp	r4, #0
 8009c6c:	d1c7      	bne.n	8009bfe <__gethex+0x9a>
 8009c6e:	4627      	mov	r7, r4
 8009c70:	e7c7      	b.n	8009c02 <__gethex+0x9e>
 8009c72:	464e      	mov	r6, r9
 8009c74:	462f      	mov	r7, r5
 8009c76:	2501      	movs	r5, #1
 8009c78:	e7c3      	b.n	8009c02 <__gethex+0x9e>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	1cb1      	adds	r1, r6, #2
 8009c7e:	e7cc      	b.n	8009c1a <__gethex+0xb6>
 8009c80:	2401      	movs	r4, #1
 8009c82:	e7fb      	b.n	8009c7c <__gethex+0x118>
 8009c84:	fb03 0002 	mla	r0, r3, r2, r0
 8009c88:	e7ce      	b.n	8009c28 <__gethex+0xc4>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	e7de      	b.n	8009c4c <__gethex+0xe8>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	eba6 0309 	sub.w	r3, r6, r9
 8009c94:	3b01      	subs	r3, #1
 8009c96:	2b07      	cmp	r3, #7
 8009c98:	dc0a      	bgt.n	8009cb0 <__gethex+0x14c>
 8009c9a:	9801      	ldr	r0, [sp, #4]
 8009c9c:	f000 faf4 	bl	800a288 <_Balloc>
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	b940      	cbnz	r0, 8009cb6 <__gethex+0x152>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	21e4      	movs	r1, #228	@ 0xe4
 8009ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8009e18 <__gethex+0x2b4>)
 8009caa:	485c      	ldr	r0, [pc, #368]	@ (8009e1c <__gethex+0x2b8>)
 8009cac:	f001 fb60 	bl	800b370 <__assert_func>
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	105b      	asrs	r3, r3, #1
 8009cb4:	e7ef      	b.n	8009c96 <__gethex+0x132>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f100 0a14 	add.w	sl, r0, #20
 8009cbc:	4655      	mov	r5, sl
 8009cbe:	469b      	mov	fp, r3
 8009cc0:	45b1      	cmp	r9, r6
 8009cc2:	d337      	bcc.n	8009d34 <__gethex+0x1d0>
 8009cc4:	f845 bb04 	str.w	fp, [r5], #4
 8009cc8:	eba5 050a 	sub.w	r5, r5, sl
 8009ccc:	10ad      	asrs	r5, r5, #2
 8009cce:	6125      	str	r5, [r4, #16]
 8009cd0:	4658      	mov	r0, fp
 8009cd2:	f000 fbcb 	bl	800a46c <__hi0bits>
 8009cd6:	016d      	lsls	r5, r5, #5
 8009cd8:	f8d8 6000 	ldr.w	r6, [r8]
 8009cdc:	1a2d      	subs	r5, r5, r0
 8009cde:	42b5      	cmp	r5, r6
 8009ce0:	dd54      	ble.n	8009d8c <__gethex+0x228>
 8009ce2:	1bad      	subs	r5, r5, r6
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f000 ff4d 	bl	800ab86 <__any_on>
 8009cec:	4681      	mov	r9, r0
 8009cee:	b178      	cbz	r0, 8009d10 <__gethex+0x1ac>
 8009cf0:	f04f 0901 	mov.w	r9, #1
 8009cf4:	1e6b      	subs	r3, r5, #1
 8009cf6:	1159      	asrs	r1, r3, #5
 8009cf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009cfc:	f003 021f 	and.w	r2, r3, #31
 8009d00:	fa09 f202 	lsl.w	r2, r9, r2
 8009d04:	420a      	tst	r2, r1
 8009d06:	d003      	beq.n	8009d10 <__gethex+0x1ac>
 8009d08:	454b      	cmp	r3, r9
 8009d0a:	dc36      	bgt.n	8009d7a <__gethex+0x216>
 8009d0c:	f04f 0902 	mov.w	r9, #2
 8009d10:	4629      	mov	r1, r5
 8009d12:	4620      	mov	r0, r4
 8009d14:	f7ff febe 	bl	8009a94 <rshift>
 8009d18:	442f      	add	r7, r5
 8009d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	da42      	bge.n	8009da8 <__gethex+0x244>
 8009d22:	4621      	mov	r1, r4
 8009d24:	9801      	ldr	r0, [sp, #4]
 8009d26:	f000 faef 	bl	800a308 <_Bfree>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d2e:	25a3      	movs	r5, #163	@ 0xa3
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e793      	b.n	8009c5c <__gethex+0xf8>
 8009d34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d38:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d3a:	d012      	beq.n	8009d62 <__gethex+0x1fe>
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d104      	bne.n	8009d4a <__gethex+0x1e6>
 8009d40:	f845 bb04 	str.w	fp, [r5], #4
 8009d44:	f04f 0b00 	mov.w	fp, #0
 8009d48:	465b      	mov	r3, fp
 8009d4a:	7830      	ldrb	r0, [r6, #0]
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	f7ff fef4 	bl	8009b3a <__hexdig_fun>
 8009d52:	9b03      	ldr	r3, [sp, #12]
 8009d54:	f000 000f 	and.w	r0, r0, #15
 8009d58:	4098      	lsls	r0, r3
 8009d5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d5e:	3304      	adds	r3, #4
 8009d60:	e7ae      	b.n	8009cc0 <__gethex+0x15c>
 8009d62:	45b1      	cmp	r9, r6
 8009d64:	d8ea      	bhi.n	8009d3c <__gethex+0x1d8>
 8009d66:	2201      	movs	r2, #1
 8009d68:	4630      	mov	r0, r6
 8009d6a:	492a      	ldr	r1, [pc, #168]	@ (8009e14 <__gethex+0x2b0>)
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	f7ff fdaf 	bl	80098d0 <strncmp>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d1e1      	bne.n	8009d3c <__gethex+0x1d8>
 8009d78:	e7a2      	b.n	8009cc0 <__gethex+0x15c>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	1ea9      	subs	r1, r5, #2
 8009d7e:	f000 ff02 	bl	800ab86 <__any_on>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d0c2      	beq.n	8009d0c <__gethex+0x1a8>
 8009d86:	f04f 0903 	mov.w	r9, #3
 8009d8a:	e7c1      	b.n	8009d10 <__gethex+0x1ac>
 8009d8c:	da09      	bge.n	8009da2 <__gethex+0x23e>
 8009d8e:	1b75      	subs	r5, r6, r5
 8009d90:	4621      	mov	r1, r4
 8009d92:	462a      	mov	r2, r5
 8009d94:	9801      	ldr	r0, [sp, #4]
 8009d96:	f000 fcc7 	bl	800a728 <__lshift>
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	1b7f      	subs	r7, r7, r5
 8009d9e:	f100 0a14 	add.w	sl, r0, #20
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	e7b8      	b.n	8009d1a <__gethex+0x1b6>
 8009da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dac:	42bd      	cmp	r5, r7
 8009dae:	dd6f      	ble.n	8009e90 <__gethex+0x32c>
 8009db0:	1bed      	subs	r5, r5, r7
 8009db2:	42ae      	cmp	r6, r5
 8009db4:	dc34      	bgt.n	8009e20 <__gethex+0x2bc>
 8009db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d022      	beq.n	8009e04 <__gethex+0x2a0>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d024      	beq.n	8009e0c <__gethex+0x2a8>
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d115      	bne.n	8009df2 <__gethex+0x28e>
 8009dc6:	42ae      	cmp	r6, r5
 8009dc8:	d113      	bne.n	8009df2 <__gethex+0x28e>
 8009dca:	2e01      	cmp	r6, #1
 8009dcc:	d10b      	bne.n	8009de6 <__gethex+0x282>
 8009dce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dd2:	9a02      	ldr	r2, [sp, #8]
 8009dd4:	2562      	movs	r5, #98	@ 0x62
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	2301      	movs	r3, #1
 8009dda:	6123      	str	r3, [r4, #16]
 8009ddc:	f8ca 3000 	str.w	r3, [sl]
 8009de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de2:	601c      	str	r4, [r3, #0]
 8009de4:	e73a      	b.n	8009c5c <__gethex+0xf8>
 8009de6:	4620      	mov	r0, r4
 8009de8:	1e71      	subs	r1, r6, #1
 8009dea:	f000 fecc 	bl	800ab86 <__any_on>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1ed      	bne.n	8009dce <__gethex+0x26a>
 8009df2:	4621      	mov	r1, r4
 8009df4:	9801      	ldr	r0, [sp, #4]
 8009df6:	f000 fa87 	bl	800a308 <_Bfree>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dfe:	2550      	movs	r5, #80	@ 0x50
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	e72b      	b.n	8009c5c <__gethex+0xf8>
 8009e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f3      	bne.n	8009df2 <__gethex+0x28e>
 8009e0a:	e7e0      	b.n	8009dce <__gethex+0x26a>
 8009e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1dd      	bne.n	8009dce <__gethex+0x26a>
 8009e12:	e7ee      	b.n	8009df2 <__gethex+0x28e>
 8009e14:	0800bbc6 	.word	0x0800bbc6
 8009e18:	0800bbdc 	.word	0x0800bbdc
 8009e1c:	0800bbed 	.word	0x0800bbed
 8009e20:	1e6f      	subs	r7, r5, #1
 8009e22:	f1b9 0f00 	cmp.w	r9, #0
 8009e26:	d130      	bne.n	8009e8a <__gethex+0x326>
 8009e28:	b127      	cbz	r7, 8009e34 <__gethex+0x2d0>
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 feaa 	bl	800ab86 <__any_on>
 8009e32:	4681      	mov	r9, r0
 8009e34:	2301      	movs	r3, #1
 8009e36:	4629      	mov	r1, r5
 8009e38:	1b76      	subs	r6, r6, r5
 8009e3a:	2502      	movs	r5, #2
 8009e3c:	117a      	asrs	r2, r7, #5
 8009e3e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e42:	f007 071f 	and.w	r7, r7, #31
 8009e46:	40bb      	lsls	r3, r7
 8009e48:	4213      	tst	r3, r2
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	bf18      	it	ne
 8009e4e:	f049 0902 	orrne.w	r9, r9, #2
 8009e52:	f7ff fe1f 	bl	8009a94 <rshift>
 8009e56:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e5a:	f1b9 0f00 	cmp.w	r9, #0
 8009e5e:	d047      	beq.n	8009ef0 <__gethex+0x38c>
 8009e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d015      	beq.n	8009e94 <__gethex+0x330>
 8009e68:	2b03      	cmp	r3, #3
 8009e6a:	d017      	beq.n	8009e9c <__gethex+0x338>
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d109      	bne.n	8009e84 <__gethex+0x320>
 8009e70:	f019 0f02 	tst.w	r9, #2
 8009e74:	d006      	beq.n	8009e84 <__gethex+0x320>
 8009e76:	f8da 3000 	ldr.w	r3, [sl]
 8009e7a:	ea49 0903 	orr.w	r9, r9, r3
 8009e7e:	f019 0f01 	tst.w	r9, #1
 8009e82:	d10e      	bne.n	8009ea2 <__gethex+0x33e>
 8009e84:	f045 0510 	orr.w	r5, r5, #16
 8009e88:	e032      	b.n	8009ef0 <__gethex+0x38c>
 8009e8a:	f04f 0901 	mov.w	r9, #1
 8009e8e:	e7d1      	b.n	8009e34 <__gethex+0x2d0>
 8009e90:	2501      	movs	r5, #1
 8009e92:	e7e2      	b.n	8009e5a <__gethex+0x2f6>
 8009e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e96:	f1c3 0301 	rsb	r3, r3, #1
 8009e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0f0      	beq.n	8009e84 <__gethex+0x320>
 8009ea2:	f04f 0c00 	mov.w	ip, #0
 8009ea6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009eaa:	f104 0314 	add.w	r3, r4, #20
 8009eae:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009eb2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ec0:	d01b      	beq.n	8009efa <__gethex+0x396>
 8009ec2:	3201      	adds	r2, #1
 8009ec4:	6002      	str	r2, [r0, #0]
 8009ec6:	2d02      	cmp	r5, #2
 8009ec8:	f104 0314 	add.w	r3, r4, #20
 8009ecc:	d13c      	bne.n	8009f48 <__gethex+0x3e4>
 8009ece:	f8d8 2000 	ldr.w	r2, [r8]
 8009ed2:	3a01      	subs	r2, #1
 8009ed4:	42b2      	cmp	r2, r6
 8009ed6:	d109      	bne.n	8009eec <__gethex+0x388>
 8009ed8:	2201      	movs	r2, #1
 8009eda:	1171      	asrs	r1, r6, #5
 8009edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ee0:	f006 061f 	and.w	r6, r6, #31
 8009ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8009ee8:	421e      	tst	r6, r3
 8009eea:	d13a      	bne.n	8009f62 <__gethex+0x3fe>
 8009eec:	f045 0520 	orr.w	r5, r5, #32
 8009ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef2:	601c      	str	r4, [r3, #0]
 8009ef4:	9b02      	ldr	r3, [sp, #8]
 8009ef6:	601f      	str	r7, [r3, #0]
 8009ef8:	e6b0      	b.n	8009c5c <__gethex+0xf8>
 8009efa:	4299      	cmp	r1, r3
 8009efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f00:	d8d9      	bhi.n	8009eb6 <__gethex+0x352>
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	459b      	cmp	fp, r3
 8009f06:	db17      	blt.n	8009f38 <__gethex+0x3d4>
 8009f08:	6861      	ldr	r1, [r4, #4]
 8009f0a:	9801      	ldr	r0, [sp, #4]
 8009f0c:	3101      	adds	r1, #1
 8009f0e:	f000 f9bb 	bl	800a288 <_Balloc>
 8009f12:	4681      	mov	r9, r0
 8009f14:	b918      	cbnz	r0, 8009f1e <__gethex+0x3ba>
 8009f16:	4602      	mov	r2, r0
 8009f18:	2184      	movs	r1, #132	@ 0x84
 8009f1a:	4b19      	ldr	r3, [pc, #100]	@ (8009f80 <__gethex+0x41c>)
 8009f1c:	e6c5      	b.n	8009caa <__gethex+0x146>
 8009f1e:	6922      	ldr	r2, [r4, #16]
 8009f20:	f104 010c 	add.w	r1, r4, #12
 8009f24:	3202      	adds	r2, #2
 8009f26:	0092      	lsls	r2, r2, #2
 8009f28:	300c      	adds	r0, #12
 8009f2a:	f7ff fd56 	bl	80099da <memcpy>
 8009f2e:	4621      	mov	r1, r4
 8009f30:	9801      	ldr	r0, [sp, #4]
 8009f32:	f000 f9e9 	bl	800a308 <_Bfree>
 8009f36:	464c      	mov	r4, r9
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	6122      	str	r2, [r4, #16]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f44:	615a      	str	r2, [r3, #20]
 8009f46:	e7be      	b.n	8009ec6 <__gethex+0x362>
 8009f48:	6922      	ldr	r2, [r4, #16]
 8009f4a:	455a      	cmp	r2, fp
 8009f4c:	dd0b      	ble.n	8009f66 <__gethex+0x402>
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4620      	mov	r0, r4
 8009f52:	f7ff fd9f 	bl	8009a94 <rshift>
 8009f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f5a:	3701      	adds	r7, #1
 8009f5c:	42bb      	cmp	r3, r7
 8009f5e:	f6ff aee0 	blt.w	8009d22 <__gethex+0x1be>
 8009f62:	2501      	movs	r5, #1
 8009f64:	e7c2      	b.n	8009eec <__gethex+0x388>
 8009f66:	f016 061f 	ands.w	r6, r6, #31
 8009f6a:	d0fa      	beq.n	8009f62 <__gethex+0x3fe>
 8009f6c:	4453      	add	r3, sl
 8009f6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f72:	f000 fa7b 	bl	800a46c <__hi0bits>
 8009f76:	f1c6 0620 	rsb	r6, r6, #32
 8009f7a:	42b0      	cmp	r0, r6
 8009f7c:	dbe7      	blt.n	8009f4e <__gethex+0x3ea>
 8009f7e:	e7f0      	b.n	8009f62 <__gethex+0x3fe>
 8009f80:	0800bbdc 	.word	0x0800bbdc

08009f84 <L_shift>:
 8009f84:	f1c2 0208 	rsb	r2, r2, #8
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	b570      	push	{r4, r5, r6, lr}
 8009f8c:	f1c2 0620 	rsb	r6, r2, #32
 8009f90:	6843      	ldr	r3, [r0, #4]
 8009f92:	6804      	ldr	r4, [r0, #0]
 8009f94:	fa03 f506 	lsl.w	r5, r3, r6
 8009f98:	432c      	orrs	r4, r5
 8009f9a:	40d3      	lsrs	r3, r2
 8009f9c:	6004      	str	r4, [r0, #0]
 8009f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fa2:	4288      	cmp	r0, r1
 8009fa4:	d3f4      	bcc.n	8009f90 <L_shift+0xc>
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}

08009fa8 <__match>:
 8009fa8:	b530      	push	{r4, r5, lr}
 8009faa:	6803      	ldr	r3, [r0, #0]
 8009fac:	3301      	adds	r3, #1
 8009fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb2:	b914      	cbnz	r4, 8009fba <__match+0x12>
 8009fb4:	6003      	str	r3, [r0, #0]
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	bd30      	pop	{r4, r5, pc}
 8009fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009fc2:	2d19      	cmp	r5, #25
 8009fc4:	bf98      	it	ls
 8009fc6:	3220      	addls	r2, #32
 8009fc8:	42a2      	cmp	r2, r4
 8009fca:	d0f0      	beq.n	8009fae <__match+0x6>
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e7f3      	b.n	8009fb8 <__match+0x10>

08009fd0 <__hexnan>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	2500      	movs	r5, #0
 8009fd6:	680b      	ldr	r3, [r1, #0]
 8009fd8:	4682      	mov	sl, r0
 8009fda:	115e      	asrs	r6, r3, #5
 8009fdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fe0:	f013 031f 	ands.w	r3, r3, #31
 8009fe4:	bf18      	it	ne
 8009fe6:	3604      	addne	r6, #4
 8009fe8:	1f37      	subs	r7, r6, #4
 8009fea:	4690      	mov	r8, r2
 8009fec:	46b9      	mov	r9, r7
 8009fee:	463c      	mov	r4, r7
 8009ff0:	46ab      	mov	fp, r5
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	6801      	ldr	r1, [r0, #0]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ffc:	9502      	str	r5, [sp, #8]
 8009ffe:	784a      	ldrb	r2, [r1, #1]
 800a000:	1c4b      	adds	r3, r1, #1
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	b342      	cbz	r2, 800a058 <__hexnan+0x88>
 800a006:	4610      	mov	r0, r2
 800a008:	9105      	str	r1, [sp, #20]
 800a00a:	9204      	str	r2, [sp, #16]
 800a00c:	f7ff fd95 	bl	8009b3a <__hexdig_fun>
 800a010:	2800      	cmp	r0, #0
 800a012:	d151      	bne.n	800a0b8 <__hexnan+0xe8>
 800a014:	9a04      	ldr	r2, [sp, #16]
 800a016:	9905      	ldr	r1, [sp, #20]
 800a018:	2a20      	cmp	r2, #32
 800a01a:	d818      	bhi.n	800a04e <__hexnan+0x7e>
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	459b      	cmp	fp, r3
 800a020:	dd13      	ble.n	800a04a <__hexnan+0x7a>
 800a022:	454c      	cmp	r4, r9
 800a024:	d206      	bcs.n	800a034 <__hexnan+0x64>
 800a026:	2d07      	cmp	r5, #7
 800a028:	dc04      	bgt.n	800a034 <__hexnan+0x64>
 800a02a:	462a      	mov	r2, r5
 800a02c:	4649      	mov	r1, r9
 800a02e:	4620      	mov	r0, r4
 800a030:	f7ff ffa8 	bl	8009f84 <L_shift>
 800a034:	4544      	cmp	r4, r8
 800a036:	d952      	bls.n	800a0de <__hexnan+0x10e>
 800a038:	2300      	movs	r3, #0
 800a03a:	f1a4 0904 	sub.w	r9, r4, #4
 800a03e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a042:	461d      	mov	r5, r3
 800a044:	464c      	mov	r4, r9
 800a046:	f8cd b008 	str.w	fp, [sp, #8]
 800a04a:	9903      	ldr	r1, [sp, #12]
 800a04c:	e7d7      	b.n	8009ffe <__hexnan+0x2e>
 800a04e:	2a29      	cmp	r2, #41	@ 0x29
 800a050:	d157      	bne.n	800a102 <__hexnan+0x132>
 800a052:	3102      	adds	r1, #2
 800a054:	f8ca 1000 	str.w	r1, [sl]
 800a058:	f1bb 0f00 	cmp.w	fp, #0
 800a05c:	d051      	beq.n	800a102 <__hexnan+0x132>
 800a05e:	454c      	cmp	r4, r9
 800a060:	d206      	bcs.n	800a070 <__hexnan+0xa0>
 800a062:	2d07      	cmp	r5, #7
 800a064:	dc04      	bgt.n	800a070 <__hexnan+0xa0>
 800a066:	462a      	mov	r2, r5
 800a068:	4649      	mov	r1, r9
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7ff ff8a 	bl	8009f84 <L_shift>
 800a070:	4544      	cmp	r4, r8
 800a072:	d936      	bls.n	800a0e2 <__hexnan+0x112>
 800a074:	4623      	mov	r3, r4
 800a076:	f1a8 0204 	sub.w	r2, r8, #4
 800a07a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a07e:	429f      	cmp	r7, r3
 800a080:	f842 1f04 	str.w	r1, [r2, #4]!
 800a084:	d2f9      	bcs.n	800a07a <__hexnan+0xaa>
 800a086:	1b3b      	subs	r3, r7, r4
 800a088:	f023 0303 	bic.w	r3, r3, #3
 800a08c:	3304      	adds	r3, #4
 800a08e:	3401      	adds	r4, #1
 800a090:	3e03      	subs	r6, #3
 800a092:	42b4      	cmp	r4, r6
 800a094:	bf88      	it	hi
 800a096:	2304      	movhi	r3, #4
 800a098:	2200      	movs	r2, #0
 800a09a:	4443      	add	r3, r8
 800a09c:	f843 2b04 	str.w	r2, [r3], #4
 800a0a0:	429f      	cmp	r7, r3
 800a0a2:	d2fb      	bcs.n	800a09c <__hexnan+0xcc>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	b91b      	cbnz	r3, 800a0b0 <__hexnan+0xe0>
 800a0a8:	4547      	cmp	r7, r8
 800a0aa:	d128      	bne.n	800a0fe <__hexnan+0x12e>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	2005      	movs	r0, #5
 800a0b2:	b007      	add	sp, #28
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	3501      	adds	r5, #1
 800a0ba:	2d08      	cmp	r5, #8
 800a0bc:	f10b 0b01 	add.w	fp, fp, #1
 800a0c0:	dd06      	ble.n	800a0d0 <__hexnan+0x100>
 800a0c2:	4544      	cmp	r4, r8
 800a0c4:	d9c1      	bls.n	800a04a <__hexnan+0x7a>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2501      	movs	r5, #1
 800a0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ce:	3c04      	subs	r4, #4
 800a0d0:	6822      	ldr	r2, [r4, #0]
 800a0d2:	f000 000f 	and.w	r0, r0, #15
 800a0d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0da:	6020      	str	r0, [r4, #0]
 800a0dc:	e7b5      	b.n	800a04a <__hexnan+0x7a>
 800a0de:	2508      	movs	r5, #8
 800a0e0:	e7b3      	b.n	800a04a <__hexnan+0x7a>
 800a0e2:	9b01      	ldr	r3, [sp, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0dd      	beq.n	800a0a4 <__hexnan+0xd4>
 800a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ec:	f1c3 0320 	rsb	r3, r3, #32
 800a0f0:	40da      	lsrs	r2, r3
 800a0f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0fc:	e7d2      	b.n	800a0a4 <__hexnan+0xd4>
 800a0fe:	3f04      	subs	r7, #4
 800a100:	e7d0      	b.n	800a0a4 <__hexnan+0xd4>
 800a102:	2004      	movs	r0, #4
 800a104:	e7d5      	b.n	800a0b2 <__hexnan+0xe2>
	...

0800a108 <sbrk_aligned>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4e0f      	ldr	r6, [pc, #60]	@ (800a148 <sbrk_aligned+0x40>)
 800a10c:	460c      	mov	r4, r1
 800a10e:	6831      	ldr	r1, [r6, #0]
 800a110:	4605      	mov	r5, r0
 800a112:	b911      	cbnz	r1, 800a11a <sbrk_aligned+0x12>
 800a114:	f001 f90e 	bl	800b334 <_sbrk_r>
 800a118:	6030      	str	r0, [r6, #0]
 800a11a:	4621      	mov	r1, r4
 800a11c:	4628      	mov	r0, r5
 800a11e:	f001 f909 	bl	800b334 <_sbrk_r>
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d103      	bne.n	800a12e <sbrk_aligned+0x26>
 800a126:	f04f 34ff 	mov.w	r4, #4294967295
 800a12a:	4620      	mov	r0, r4
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
 800a12e:	1cc4      	adds	r4, r0, #3
 800a130:	f024 0403 	bic.w	r4, r4, #3
 800a134:	42a0      	cmp	r0, r4
 800a136:	d0f8      	beq.n	800a12a <sbrk_aligned+0x22>
 800a138:	1a21      	subs	r1, r4, r0
 800a13a:	4628      	mov	r0, r5
 800a13c:	f001 f8fa 	bl	800b334 <_sbrk_r>
 800a140:	3001      	adds	r0, #1
 800a142:	d1f2      	bne.n	800a12a <sbrk_aligned+0x22>
 800a144:	e7ef      	b.n	800a126 <sbrk_aligned+0x1e>
 800a146:	bf00      	nop
 800a148:	200016ec 	.word	0x200016ec

0800a14c <_malloc_r>:
 800a14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a150:	1ccd      	adds	r5, r1, #3
 800a152:	f025 0503 	bic.w	r5, r5, #3
 800a156:	3508      	adds	r5, #8
 800a158:	2d0c      	cmp	r5, #12
 800a15a:	bf38      	it	cc
 800a15c:	250c      	movcc	r5, #12
 800a15e:	2d00      	cmp	r5, #0
 800a160:	4606      	mov	r6, r0
 800a162:	db01      	blt.n	800a168 <_malloc_r+0x1c>
 800a164:	42a9      	cmp	r1, r5
 800a166:	d904      	bls.n	800a172 <_malloc_r+0x26>
 800a168:	230c      	movs	r3, #12
 800a16a:	6033      	str	r3, [r6, #0]
 800a16c:	2000      	movs	r0, #0
 800a16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a248 <_malloc_r+0xfc>
 800a176:	f000 f87b 	bl	800a270 <__malloc_lock>
 800a17a:	f8d8 3000 	ldr.w	r3, [r8]
 800a17e:	461c      	mov	r4, r3
 800a180:	bb44      	cbnz	r4, 800a1d4 <_malloc_r+0x88>
 800a182:	4629      	mov	r1, r5
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff ffbf 	bl	800a108 <sbrk_aligned>
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	4604      	mov	r4, r0
 800a18e:	d158      	bne.n	800a242 <_malloc_r+0xf6>
 800a190:	f8d8 4000 	ldr.w	r4, [r8]
 800a194:	4627      	mov	r7, r4
 800a196:	2f00      	cmp	r7, #0
 800a198:	d143      	bne.n	800a222 <_malloc_r+0xd6>
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	d04b      	beq.n	800a236 <_malloc_r+0xea>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	4639      	mov	r1, r7
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	eb04 0903 	add.w	r9, r4, r3
 800a1a8:	f001 f8c4 	bl	800b334 <_sbrk_r>
 800a1ac:	4581      	cmp	r9, r0
 800a1ae:	d142      	bne.n	800a236 <_malloc_r+0xea>
 800a1b0:	6821      	ldr	r1, [r4, #0]
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	1a6d      	subs	r5, r5, r1
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7ff ffa6 	bl	800a108 <sbrk_aligned>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d03a      	beq.n	800a236 <_malloc_r+0xea>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	442b      	add	r3, r5
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	bb62      	cbnz	r2, 800a228 <_malloc_r+0xdc>
 800a1ce:	f8c8 7000 	str.w	r7, [r8]
 800a1d2:	e00f      	b.n	800a1f4 <_malloc_r+0xa8>
 800a1d4:	6822      	ldr	r2, [r4, #0]
 800a1d6:	1b52      	subs	r2, r2, r5
 800a1d8:	d420      	bmi.n	800a21c <_malloc_r+0xd0>
 800a1da:	2a0b      	cmp	r2, #11
 800a1dc:	d917      	bls.n	800a20e <_malloc_r+0xc2>
 800a1de:	1961      	adds	r1, r4, r5
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	6025      	str	r5, [r4, #0]
 800a1e4:	bf18      	it	ne
 800a1e6:	6059      	strne	r1, [r3, #4]
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	bf08      	it	eq
 800a1ec:	f8c8 1000 	streq.w	r1, [r8]
 800a1f0:	5162      	str	r2, [r4, r5]
 800a1f2:	604b      	str	r3, [r1, #4]
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f000 f841 	bl	800a27c <__malloc_unlock>
 800a1fa:	f104 000b 	add.w	r0, r4, #11
 800a1fe:	1d23      	adds	r3, r4, #4
 800a200:	f020 0007 	bic.w	r0, r0, #7
 800a204:	1ac2      	subs	r2, r0, r3
 800a206:	bf1c      	itt	ne
 800a208:	1a1b      	subne	r3, r3, r0
 800a20a:	50a3      	strne	r3, [r4, r2]
 800a20c:	e7af      	b.n	800a16e <_malloc_r+0x22>
 800a20e:	6862      	ldr	r2, [r4, #4]
 800a210:	42a3      	cmp	r3, r4
 800a212:	bf0c      	ite	eq
 800a214:	f8c8 2000 	streq.w	r2, [r8]
 800a218:	605a      	strne	r2, [r3, #4]
 800a21a:	e7eb      	b.n	800a1f4 <_malloc_r+0xa8>
 800a21c:	4623      	mov	r3, r4
 800a21e:	6864      	ldr	r4, [r4, #4]
 800a220:	e7ae      	b.n	800a180 <_malloc_r+0x34>
 800a222:	463c      	mov	r4, r7
 800a224:	687f      	ldr	r7, [r7, #4]
 800a226:	e7b6      	b.n	800a196 <_malloc_r+0x4a>
 800a228:	461a      	mov	r2, r3
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	42a3      	cmp	r3, r4
 800a22e:	d1fb      	bne.n	800a228 <_malloc_r+0xdc>
 800a230:	2300      	movs	r3, #0
 800a232:	6053      	str	r3, [r2, #4]
 800a234:	e7de      	b.n	800a1f4 <_malloc_r+0xa8>
 800a236:	230c      	movs	r3, #12
 800a238:	4630      	mov	r0, r6
 800a23a:	6033      	str	r3, [r6, #0]
 800a23c:	f000 f81e 	bl	800a27c <__malloc_unlock>
 800a240:	e794      	b.n	800a16c <_malloc_r+0x20>
 800a242:	6005      	str	r5, [r0, #0]
 800a244:	e7d6      	b.n	800a1f4 <_malloc_r+0xa8>
 800a246:	bf00      	nop
 800a248:	200016f0 	.word	0x200016f0

0800a24c <__ascii_mbtowc>:
 800a24c:	b082      	sub	sp, #8
 800a24e:	b901      	cbnz	r1, 800a252 <__ascii_mbtowc+0x6>
 800a250:	a901      	add	r1, sp, #4
 800a252:	b142      	cbz	r2, 800a266 <__ascii_mbtowc+0x1a>
 800a254:	b14b      	cbz	r3, 800a26a <__ascii_mbtowc+0x1e>
 800a256:	7813      	ldrb	r3, [r2, #0]
 800a258:	600b      	str	r3, [r1, #0]
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	1e10      	subs	r0, r2, #0
 800a25e:	bf18      	it	ne
 800a260:	2001      	movne	r0, #1
 800a262:	b002      	add	sp, #8
 800a264:	4770      	bx	lr
 800a266:	4610      	mov	r0, r2
 800a268:	e7fb      	b.n	800a262 <__ascii_mbtowc+0x16>
 800a26a:	f06f 0001 	mvn.w	r0, #1
 800a26e:	e7f8      	b.n	800a262 <__ascii_mbtowc+0x16>

0800a270 <__malloc_lock>:
 800a270:	4801      	ldr	r0, [pc, #4]	@ (800a278 <__malloc_lock+0x8>)
 800a272:	f7ff bbb0 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 800a276:	bf00      	nop
 800a278:	200016e8 	.word	0x200016e8

0800a27c <__malloc_unlock>:
 800a27c:	4801      	ldr	r0, [pc, #4]	@ (800a284 <__malloc_unlock+0x8>)
 800a27e:	f7ff bbab 	b.w	80099d8 <__retarget_lock_release_recursive>
 800a282:	bf00      	nop
 800a284:	200016e8 	.word	0x200016e8

0800a288 <_Balloc>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	69c6      	ldr	r6, [r0, #28]
 800a28c:	4604      	mov	r4, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	b976      	cbnz	r6, 800a2b0 <_Balloc+0x28>
 800a292:	2010      	movs	r0, #16
 800a294:	f001 f89e 	bl	800b3d4 <malloc>
 800a298:	4602      	mov	r2, r0
 800a29a:	61e0      	str	r0, [r4, #28]
 800a29c:	b920      	cbnz	r0, 800a2a8 <_Balloc+0x20>
 800a29e:	216b      	movs	r1, #107	@ 0x6b
 800a2a0:	4b17      	ldr	r3, [pc, #92]	@ (800a300 <_Balloc+0x78>)
 800a2a2:	4818      	ldr	r0, [pc, #96]	@ (800a304 <_Balloc+0x7c>)
 800a2a4:	f001 f864 	bl	800b370 <__assert_func>
 800a2a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2ac:	6006      	str	r6, [r0, #0]
 800a2ae:	60c6      	str	r6, [r0, #12]
 800a2b0:	69e6      	ldr	r6, [r4, #28]
 800a2b2:	68f3      	ldr	r3, [r6, #12]
 800a2b4:	b183      	cbz	r3, 800a2d8 <_Balloc+0x50>
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2be:	b9b8      	cbnz	r0, 800a2f0 <_Balloc+0x68>
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a2c6:	1d72      	adds	r2, r6, #5
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	f001 f86e 	bl	800b3ac <_calloc_r>
 800a2d0:	b160      	cbz	r0, 800a2ec <_Balloc+0x64>
 800a2d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2d6:	e00e      	b.n	800a2f6 <_Balloc+0x6e>
 800a2d8:	2221      	movs	r2, #33	@ 0x21
 800a2da:	2104      	movs	r1, #4
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f001 f865 	bl	800b3ac <_calloc_r>
 800a2e2:	69e3      	ldr	r3, [r4, #28]
 800a2e4:	60f0      	str	r0, [r6, #12]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1e4      	bne.n	800a2b6 <_Balloc+0x2e>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	6802      	ldr	r2, [r0, #0]
 800a2f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2fc:	e7f7      	b.n	800a2ee <_Balloc+0x66>
 800a2fe:	bf00      	nop
 800a300:	0800bc4d 	.word	0x0800bc4d
 800a304:	0800bc64 	.word	0x0800bc64

0800a308 <_Bfree>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	69c6      	ldr	r6, [r0, #28]
 800a30c:	4605      	mov	r5, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	b976      	cbnz	r6, 800a330 <_Bfree+0x28>
 800a312:	2010      	movs	r0, #16
 800a314:	f001 f85e 	bl	800b3d4 <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	61e8      	str	r0, [r5, #28]
 800a31c:	b920      	cbnz	r0, 800a328 <_Bfree+0x20>
 800a31e:	218f      	movs	r1, #143	@ 0x8f
 800a320:	4b08      	ldr	r3, [pc, #32]	@ (800a344 <_Bfree+0x3c>)
 800a322:	4809      	ldr	r0, [pc, #36]	@ (800a348 <_Bfree+0x40>)
 800a324:	f001 f824 	bl	800b370 <__assert_func>
 800a328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a32c:	6006      	str	r6, [r0, #0]
 800a32e:	60c6      	str	r6, [r0, #12]
 800a330:	b13c      	cbz	r4, 800a342 <_Bfree+0x3a>
 800a332:	69eb      	ldr	r3, [r5, #28]
 800a334:	6862      	ldr	r2, [r4, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a33c:	6021      	str	r1, [r4, #0]
 800a33e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	0800bc4d 	.word	0x0800bc4d
 800a348:	0800bc64 	.word	0x0800bc64

0800a34c <__multadd>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	4607      	mov	r7, r0
 800a352:	460c      	mov	r4, r1
 800a354:	461e      	mov	r6, r3
 800a356:	2000      	movs	r0, #0
 800a358:	690d      	ldr	r5, [r1, #16]
 800a35a:	f101 0c14 	add.w	ip, r1, #20
 800a35e:	f8dc 3000 	ldr.w	r3, [ip]
 800a362:	3001      	adds	r0, #1
 800a364:	b299      	uxth	r1, r3
 800a366:	fb02 6101 	mla	r1, r2, r1, r6
 800a36a:	0c1e      	lsrs	r6, r3, #16
 800a36c:	0c0b      	lsrs	r3, r1, #16
 800a36e:	fb02 3306 	mla	r3, r2, r6, r3
 800a372:	b289      	uxth	r1, r1
 800a374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a378:	4285      	cmp	r5, r0
 800a37a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a37e:	f84c 1b04 	str.w	r1, [ip], #4
 800a382:	dcec      	bgt.n	800a35e <__multadd+0x12>
 800a384:	b30e      	cbz	r6, 800a3ca <__multadd+0x7e>
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	42ab      	cmp	r3, r5
 800a38a:	dc19      	bgt.n	800a3c0 <__multadd+0x74>
 800a38c:	6861      	ldr	r1, [r4, #4]
 800a38e:	4638      	mov	r0, r7
 800a390:	3101      	adds	r1, #1
 800a392:	f7ff ff79 	bl	800a288 <_Balloc>
 800a396:	4680      	mov	r8, r0
 800a398:	b928      	cbnz	r0, 800a3a6 <__multadd+0x5a>
 800a39a:	4602      	mov	r2, r0
 800a39c:	21ba      	movs	r1, #186	@ 0xba
 800a39e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d0 <__multadd+0x84>)
 800a3a0:	480c      	ldr	r0, [pc, #48]	@ (800a3d4 <__multadd+0x88>)
 800a3a2:	f000 ffe5 	bl	800b370 <__assert_func>
 800a3a6:	6922      	ldr	r2, [r4, #16]
 800a3a8:	f104 010c 	add.w	r1, r4, #12
 800a3ac:	3202      	adds	r2, #2
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	300c      	adds	r0, #12
 800a3b2:	f7ff fb12 	bl	80099da <memcpy>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff ffa5 	bl	800a308 <_Bfree>
 800a3be:	4644      	mov	r4, r8
 800a3c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	615e      	str	r6, [r3, #20]
 800a3c8:	6125      	str	r5, [r4, #16]
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	0800bbdc 	.word	0x0800bbdc
 800a3d4:	0800bc64 	.word	0x0800bc64

0800a3d8 <__s2b>:
 800a3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	4615      	mov	r5, r2
 800a3de:	2209      	movs	r2, #9
 800a3e0:	461f      	mov	r7, r3
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	db09      	blt.n	800a408 <__s2b+0x30>
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ff47 	bl	800a288 <_Balloc>
 800a3fa:	b940      	cbnz	r0, 800a40e <__s2b+0x36>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	21d3      	movs	r1, #211	@ 0xd3
 800a400:	4b18      	ldr	r3, [pc, #96]	@ (800a464 <__s2b+0x8c>)
 800a402:	4819      	ldr	r0, [pc, #100]	@ (800a468 <__s2b+0x90>)
 800a404:	f000 ffb4 	bl	800b370 <__assert_func>
 800a408:	0052      	lsls	r2, r2, #1
 800a40a:	3101      	adds	r1, #1
 800a40c:	e7f0      	b.n	800a3f0 <__s2b+0x18>
 800a40e:	9b08      	ldr	r3, [sp, #32]
 800a410:	2d09      	cmp	r5, #9
 800a412:	6143      	str	r3, [r0, #20]
 800a414:	f04f 0301 	mov.w	r3, #1
 800a418:	6103      	str	r3, [r0, #16]
 800a41a:	dd16      	ble.n	800a44a <__s2b+0x72>
 800a41c:	f104 0909 	add.w	r9, r4, #9
 800a420:	46c8      	mov	r8, r9
 800a422:	442c      	add	r4, r5
 800a424:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a428:	4601      	mov	r1, r0
 800a42a:	220a      	movs	r2, #10
 800a42c:	4630      	mov	r0, r6
 800a42e:	3b30      	subs	r3, #48	@ 0x30
 800a430:	f7ff ff8c 	bl	800a34c <__multadd>
 800a434:	45a0      	cmp	r8, r4
 800a436:	d1f5      	bne.n	800a424 <__s2b+0x4c>
 800a438:	f1a5 0408 	sub.w	r4, r5, #8
 800a43c:	444c      	add	r4, r9
 800a43e:	1b2d      	subs	r5, r5, r4
 800a440:	1963      	adds	r3, r4, r5
 800a442:	42bb      	cmp	r3, r7
 800a444:	db04      	blt.n	800a450 <__s2b+0x78>
 800a446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44a:	2509      	movs	r5, #9
 800a44c:	340a      	adds	r4, #10
 800a44e:	e7f6      	b.n	800a43e <__s2b+0x66>
 800a450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a454:	4601      	mov	r1, r0
 800a456:	220a      	movs	r2, #10
 800a458:	4630      	mov	r0, r6
 800a45a:	3b30      	subs	r3, #48	@ 0x30
 800a45c:	f7ff ff76 	bl	800a34c <__multadd>
 800a460:	e7ee      	b.n	800a440 <__s2b+0x68>
 800a462:	bf00      	nop
 800a464:	0800bbdc 	.word	0x0800bbdc
 800a468:	0800bc64 	.word	0x0800bc64

0800a46c <__hi0bits>:
 800a46c:	4603      	mov	r3, r0
 800a46e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a472:	bf3a      	itte	cc
 800a474:	0403      	lslcc	r3, r0, #16
 800a476:	2010      	movcc	r0, #16
 800a478:	2000      	movcs	r0, #0
 800a47a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a47e:	bf3c      	itt	cc
 800a480:	021b      	lslcc	r3, r3, #8
 800a482:	3008      	addcc	r0, #8
 800a484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a488:	bf3c      	itt	cc
 800a48a:	011b      	lslcc	r3, r3, #4
 800a48c:	3004      	addcc	r0, #4
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a492:	bf3c      	itt	cc
 800a494:	009b      	lslcc	r3, r3, #2
 800a496:	3002      	addcc	r0, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db05      	blt.n	800a4a8 <__hi0bits+0x3c>
 800a49c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4a0:	f100 0001 	add.w	r0, r0, #1
 800a4a4:	bf08      	it	eq
 800a4a6:	2020      	moveq	r0, #32
 800a4a8:	4770      	bx	lr

0800a4aa <__lo0bits>:
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	f013 0007 	ands.w	r0, r3, #7
 800a4b2:	d00b      	beq.n	800a4cc <__lo0bits+0x22>
 800a4b4:	07d9      	lsls	r1, r3, #31
 800a4b6:	d421      	bmi.n	800a4fc <__lo0bits+0x52>
 800a4b8:	0798      	lsls	r0, r3, #30
 800a4ba:	bf49      	itett	mi
 800a4bc:	085b      	lsrmi	r3, r3, #1
 800a4be:	089b      	lsrpl	r3, r3, #2
 800a4c0:	2001      	movmi	r0, #1
 800a4c2:	6013      	strmi	r3, [r2, #0]
 800a4c4:	bf5c      	itt	pl
 800a4c6:	2002      	movpl	r0, #2
 800a4c8:	6013      	strpl	r3, [r2, #0]
 800a4ca:	4770      	bx	lr
 800a4cc:	b299      	uxth	r1, r3
 800a4ce:	b909      	cbnz	r1, 800a4d4 <__lo0bits+0x2a>
 800a4d0:	2010      	movs	r0, #16
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	b2d9      	uxtb	r1, r3
 800a4d6:	b909      	cbnz	r1, 800a4dc <__lo0bits+0x32>
 800a4d8:	3008      	adds	r0, #8
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	0719      	lsls	r1, r3, #28
 800a4de:	bf04      	itt	eq
 800a4e0:	091b      	lsreq	r3, r3, #4
 800a4e2:	3004      	addeq	r0, #4
 800a4e4:	0799      	lsls	r1, r3, #30
 800a4e6:	bf04      	itt	eq
 800a4e8:	089b      	lsreq	r3, r3, #2
 800a4ea:	3002      	addeq	r0, #2
 800a4ec:	07d9      	lsls	r1, r3, #31
 800a4ee:	d403      	bmi.n	800a4f8 <__lo0bits+0x4e>
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	f100 0001 	add.w	r0, r0, #1
 800a4f6:	d003      	beq.n	800a500 <__lo0bits+0x56>
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4770      	bx	lr
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	4770      	bx	lr
 800a500:	2020      	movs	r0, #32
 800a502:	4770      	bx	lr

0800a504 <__i2b>:
 800a504:	b510      	push	{r4, lr}
 800a506:	460c      	mov	r4, r1
 800a508:	2101      	movs	r1, #1
 800a50a:	f7ff febd 	bl	800a288 <_Balloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	b928      	cbnz	r0, 800a51e <__i2b+0x1a>
 800a512:	f240 1145 	movw	r1, #325	@ 0x145
 800a516:	4b04      	ldr	r3, [pc, #16]	@ (800a528 <__i2b+0x24>)
 800a518:	4804      	ldr	r0, [pc, #16]	@ (800a52c <__i2b+0x28>)
 800a51a:	f000 ff29 	bl	800b370 <__assert_func>
 800a51e:	2301      	movs	r3, #1
 800a520:	6144      	str	r4, [r0, #20]
 800a522:	6103      	str	r3, [r0, #16]
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	0800bbdc 	.word	0x0800bbdc
 800a52c:	0800bc64 	.word	0x0800bc64

0800a530 <__multiply>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4617      	mov	r7, r2
 800a536:	690a      	ldr	r2, [r1, #16]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	4689      	mov	r9, r1
 800a53c:	429a      	cmp	r2, r3
 800a53e:	bfa2      	ittt	ge
 800a540:	463b      	movge	r3, r7
 800a542:	460f      	movge	r7, r1
 800a544:	4699      	movge	r9, r3
 800a546:	693d      	ldr	r5, [r7, #16]
 800a548:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	eb05 060a 	add.w	r6, r5, sl
 800a554:	42b3      	cmp	r3, r6
 800a556:	b085      	sub	sp, #20
 800a558:	bfb8      	it	lt
 800a55a:	3101      	addlt	r1, #1
 800a55c:	f7ff fe94 	bl	800a288 <_Balloc>
 800a560:	b930      	cbnz	r0, 800a570 <__multiply+0x40>
 800a562:	4602      	mov	r2, r0
 800a564:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a568:	4b40      	ldr	r3, [pc, #256]	@ (800a66c <__multiply+0x13c>)
 800a56a:	4841      	ldr	r0, [pc, #260]	@ (800a670 <__multiply+0x140>)
 800a56c:	f000 ff00 	bl	800b370 <__assert_func>
 800a570:	f100 0414 	add.w	r4, r0, #20
 800a574:	4623      	mov	r3, r4
 800a576:	2200      	movs	r2, #0
 800a578:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a57c:	4573      	cmp	r3, lr
 800a57e:	d320      	bcc.n	800a5c2 <__multiply+0x92>
 800a580:	f107 0814 	add.w	r8, r7, #20
 800a584:	f109 0114 	add.w	r1, r9, #20
 800a588:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a58c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	1beb      	subs	r3, r5, r7
 800a594:	3b15      	subs	r3, #21
 800a596:	f023 0303 	bic.w	r3, r3, #3
 800a59a:	3304      	adds	r3, #4
 800a59c:	3715      	adds	r7, #21
 800a59e:	42bd      	cmp	r5, r7
 800a5a0:	bf38      	it	cc
 800a5a2:	2304      	movcc	r3, #4
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	9103      	str	r1, [sp, #12]
 800a5aa:	428b      	cmp	r3, r1
 800a5ac:	d80c      	bhi.n	800a5c8 <__multiply+0x98>
 800a5ae:	2e00      	cmp	r6, #0
 800a5b0:	dd03      	ble.n	800a5ba <__multiply+0x8a>
 800a5b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d055      	beq.n	800a666 <__multiply+0x136>
 800a5ba:	6106      	str	r6, [r0, #16]
 800a5bc:	b005      	add	sp, #20
 800a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c2:	f843 2b04 	str.w	r2, [r3], #4
 800a5c6:	e7d9      	b.n	800a57c <__multiply+0x4c>
 800a5c8:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5cc:	f1ba 0f00 	cmp.w	sl, #0
 800a5d0:	d01f      	beq.n	800a612 <__multiply+0xe2>
 800a5d2:	46c4      	mov	ip, r8
 800a5d4:	46a1      	mov	r9, r4
 800a5d6:	2700      	movs	r7, #0
 800a5d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5dc:	f8d9 3000 	ldr.w	r3, [r9]
 800a5e0:	fa1f fb82 	uxth.w	fp, r2
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a5ea:	443b      	add	r3, r7
 800a5ec:	f8d9 7000 	ldr.w	r7, [r9]
 800a5f0:	0c12      	lsrs	r2, r2, #16
 800a5f2:	0c3f      	lsrs	r7, r7, #16
 800a5f4:	fb0a 7202 	mla	r2, sl, r2, r7
 800a5f8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a602:	4565      	cmp	r5, ip
 800a604:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a608:	f849 3b04 	str.w	r3, [r9], #4
 800a60c:	d8e4      	bhi.n	800a5d8 <__multiply+0xa8>
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	50e7      	str	r7, [r4, r3]
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	3104      	adds	r1, #4
 800a616:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a61a:	f1b9 0f00 	cmp.w	r9, #0
 800a61e:	d020      	beq.n	800a662 <__multiply+0x132>
 800a620:	4647      	mov	r7, r8
 800a622:	46a4      	mov	ip, r4
 800a624:	f04f 0a00 	mov.w	sl, #0
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	f8b7 b000 	ldrh.w	fp, [r7]
 800a62e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a632:	b29b      	uxth	r3, r3
 800a634:	fb09 220b 	mla	r2, r9, fp, r2
 800a638:	4452      	add	r2, sl
 800a63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63e:	f84c 3b04 	str.w	r3, [ip], #4
 800a642:	f857 3b04 	ldr.w	r3, [r7], #4
 800a646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a64a:	f8bc 3000 	ldrh.w	r3, [ip]
 800a64e:	42bd      	cmp	r5, r7
 800a650:	fb09 330a 	mla	r3, r9, sl, r3
 800a654:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a65c:	d8e5      	bhi.n	800a62a <__multiply+0xfa>
 800a65e:	9a01      	ldr	r2, [sp, #4]
 800a660:	50a3      	str	r3, [r4, r2]
 800a662:	3404      	adds	r4, #4
 800a664:	e79f      	b.n	800a5a6 <__multiply+0x76>
 800a666:	3e01      	subs	r6, #1
 800a668:	e7a1      	b.n	800a5ae <__multiply+0x7e>
 800a66a:	bf00      	nop
 800a66c:	0800bbdc 	.word	0x0800bbdc
 800a670:	0800bc64 	.word	0x0800bc64

0800a674 <__pow5mult>:
 800a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a678:	4615      	mov	r5, r2
 800a67a:	f012 0203 	ands.w	r2, r2, #3
 800a67e:	4607      	mov	r7, r0
 800a680:	460e      	mov	r6, r1
 800a682:	d007      	beq.n	800a694 <__pow5mult+0x20>
 800a684:	4c25      	ldr	r4, [pc, #148]	@ (800a71c <__pow5mult+0xa8>)
 800a686:	3a01      	subs	r2, #1
 800a688:	2300      	movs	r3, #0
 800a68a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a68e:	f7ff fe5d 	bl	800a34c <__multadd>
 800a692:	4606      	mov	r6, r0
 800a694:	10ad      	asrs	r5, r5, #2
 800a696:	d03d      	beq.n	800a714 <__pow5mult+0xa0>
 800a698:	69fc      	ldr	r4, [r7, #28]
 800a69a:	b97c      	cbnz	r4, 800a6bc <__pow5mult+0x48>
 800a69c:	2010      	movs	r0, #16
 800a69e:	f000 fe99 	bl	800b3d4 <malloc>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	61f8      	str	r0, [r7, #28]
 800a6a6:	b928      	cbnz	r0, 800a6b4 <__pow5mult+0x40>
 800a6a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a720 <__pow5mult+0xac>)
 800a6ae:	481d      	ldr	r0, [pc, #116]	@ (800a724 <__pow5mult+0xb0>)
 800a6b0:	f000 fe5e 	bl	800b370 <__assert_func>
 800a6b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6b8:	6004      	str	r4, [r0, #0]
 800a6ba:	60c4      	str	r4, [r0, #12]
 800a6bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6c4:	b94c      	cbnz	r4, 800a6da <__pow5mult+0x66>
 800a6c6:	f240 2171 	movw	r1, #625	@ 0x271
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f7ff ff1a 	bl	800a504 <__i2b>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	07eb      	lsls	r3, r5, #31
 800a6e0:	d50a      	bpl.n	800a6f8 <__pow5mult+0x84>
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	f7ff ff22 	bl	800a530 <__multiply>
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff fe09 	bl	800a308 <_Bfree>
 800a6f6:	4646      	mov	r6, r8
 800a6f8:	106d      	asrs	r5, r5, #1
 800a6fa:	d00b      	beq.n	800a714 <__pow5mult+0xa0>
 800a6fc:	6820      	ldr	r0, [r4, #0]
 800a6fe:	b938      	cbnz	r0, 800a710 <__pow5mult+0x9c>
 800a700:	4622      	mov	r2, r4
 800a702:	4621      	mov	r1, r4
 800a704:	4638      	mov	r0, r7
 800a706:	f7ff ff13 	bl	800a530 <__multiply>
 800a70a:	6020      	str	r0, [r4, #0]
 800a70c:	f8c0 9000 	str.w	r9, [r0]
 800a710:	4604      	mov	r4, r0
 800a712:	e7e4      	b.n	800a6de <__pow5mult+0x6a>
 800a714:	4630      	mov	r0, r6
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	bf00      	nop
 800a71c:	0800bd80 	.word	0x0800bd80
 800a720:	0800bc4d 	.word	0x0800bc4d
 800a724:	0800bc64 	.word	0x0800bc64

0800a728 <__lshift>:
 800a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	460c      	mov	r4, r1
 800a72e:	4607      	mov	r7, r0
 800a730:	4691      	mov	r9, r2
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	6849      	ldr	r1, [r1, #4]
 800a736:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a740:	f108 0601 	add.w	r6, r8, #1
 800a744:	42b3      	cmp	r3, r6
 800a746:	db0b      	blt.n	800a760 <__lshift+0x38>
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff fd9d 	bl	800a288 <_Balloc>
 800a74e:	4605      	mov	r5, r0
 800a750:	b948      	cbnz	r0, 800a766 <__lshift+0x3e>
 800a752:	4602      	mov	r2, r0
 800a754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a758:	4b27      	ldr	r3, [pc, #156]	@ (800a7f8 <__lshift+0xd0>)
 800a75a:	4828      	ldr	r0, [pc, #160]	@ (800a7fc <__lshift+0xd4>)
 800a75c:	f000 fe08 	bl	800b370 <__assert_func>
 800a760:	3101      	adds	r1, #1
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	e7ee      	b.n	800a744 <__lshift+0x1c>
 800a766:	2300      	movs	r3, #0
 800a768:	f100 0114 	add.w	r1, r0, #20
 800a76c:	f100 0210 	add.w	r2, r0, #16
 800a770:	4618      	mov	r0, r3
 800a772:	4553      	cmp	r3, sl
 800a774:	db33      	blt.n	800a7de <__lshift+0xb6>
 800a776:	6920      	ldr	r0, [r4, #16]
 800a778:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a77c:	f104 0314 	add.w	r3, r4, #20
 800a780:	f019 091f 	ands.w	r9, r9, #31
 800a784:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a788:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a78c:	d02b      	beq.n	800a7e6 <__lshift+0xbe>
 800a78e:	468a      	mov	sl, r1
 800a790:	2200      	movs	r2, #0
 800a792:	f1c9 0e20 	rsb	lr, r9, #32
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	fa00 f009 	lsl.w	r0, r0, r9
 800a79c:	4310      	orrs	r0, r2
 800a79e:	f84a 0b04 	str.w	r0, [sl], #4
 800a7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a6:	459c      	cmp	ip, r3
 800a7a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7ac:	d8f3      	bhi.n	800a796 <__lshift+0x6e>
 800a7ae:	ebac 0304 	sub.w	r3, ip, r4
 800a7b2:	3b15      	subs	r3, #21
 800a7b4:	f023 0303 	bic.w	r3, r3, #3
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	f104 0015 	add.w	r0, r4, #21
 800a7be:	4560      	cmp	r0, ip
 800a7c0:	bf88      	it	hi
 800a7c2:	2304      	movhi	r3, #4
 800a7c4:	50ca      	str	r2, [r1, r3]
 800a7c6:	b10a      	cbz	r2, 800a7cc <__lshift+0xa4>
 800a7c8:	f108 0602 	add.w	r6, r8, #2
 800a7cc:	3e01      	subs	r6, #1
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	612e      	str	r6, [r5, #16]
 800a7d4:	f7ff fd98 	bl	800a308 <_Bfree>
 800a7d8:	4628      	mov	r0, r5
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	e7c5      	b.n	800a772 <__lshift+0x4a>
 800a7e6:	3904      	subs	r1, #4
 800a7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ec:	459c      	cmp	ip, r3
 800a7ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7f2:	d8f9      	bhi.n	800a7e8 <__lshift+0xc0>
 800a7f4:	e7ea      	b.n	800a7cc <__lshift+0xa4>
 800a7f6:	bf00      	nop
 800a7f8:	0800bbdc 	.word	0x0800bbdc
 800a7fc:	0800bc64 	.word	0x0800bc64

0800a800 <__mcmp>:
 800a800:	4603      	mov	r3, r0
 800a802:	690a      	ldr	r2, [r1, #16]
 800a804:	6900      	ldr	r0, [r0, #16]
 800a806:	b530      	push	{r4, r5, lr}
 800a808:	1a80      	subs	r0, r0, r2
 800a80a:	d10e      	bne.n	800a82a <__mcmp+0x2a>
 800a80c:	3314      	adds	r3, #20
 800a80e:	3114      	adds	r1, #20
 800a810:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a814:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a818:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a81c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a820:	4295      	cmp	r5, r2
 800a822:	d003      	beq.n	800a82c <__mcmp+0x2c>
 800a824:	d205      	bcs.n	800a832 <__mcmp+0x32>
 800a826:	f04f 30ff 	mov.w	r0, #4294967295
 800a82a:	bd30      	pop	{r4, r5, pc}
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	d3f3      	bcc.n	800a818 <__mcmp+0x18>
 800a830:	e7fb      	b.n	800a82a <__mcmp+0x2a>
 800a832:	2001      	movs	r0, #1
 800a834:	e7f9      	b.n	800a82a <__mcmp+0x2a>
	...

0800a838 <__mdiff>:
 800a838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	4689      	mov	r9, r1
 800a83e:	4606      	mov	r6, r0
 800a840:	4611      	mov	r1, r2
 800a842:	4648      	mov	r0, r9
 800a844:	4614      	mov	r4, r2
 800a846:	f7ff ffdb 	bl	800a800 <__mcmp>
 800a84a:	1e05      	subs	r5, r0, #0
 800a84c:	d112      	bne.n	800a874 <__mdiff+0x3c>
 800a84e:	4629      	mov	r1, r5
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff fd19 	bl	800a288 <_Balloc>
 800a856:	4602      	mov	r2, r0
 800a858:	b928      	cbnz	r0, 800a866 <__mdiff+0x2e>
 800a85a:	f240 2137 	movw	r1, #567	@ 0x237
 800a85e:	4b3e      	ldr	r3, [pc, #248]	@ (800a958 <__mdiff+0x120>)
 800a860:	483e      	ldr	r0, [pc, #248]	@ (800a95c <__mdiff+0x124>)
 800a862:	f000 fd85 	bl	800b370 <__assert_func>
 800a866:	2301      	movs	r3, #1
 800a868:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a86c:	4610      	mov	r0, r2
 800a86e:	b003      	add	sp, #12
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	bfbc      	itt	lt
 800a876:	464b      	movlt	r3, r9
 800a878:	46a1      	movlt	r9, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a880:	bfba      	itte	lt
 800a882:	461c      	movlt	r4, r3
 800a884:	2501      	movlt	r5, #1
 800a886:	2500      	movge	r5, #0
 800a888:	f7ff fcfe 	bl	800a288 <_Balloc>
 800a88c:	4602      	mov	r2, r0
 800a88e:	b918      	cbnz	r0, 800a898 <__mdiff+0x60>
 800a890:	f240 2145 	movw	r1, #581	@ 0x245
 800a894:	4b30      	ldr	r3, [pc, #192]	@ (800a958 <__mdiff+0x120>)
 800a896:	e7e3      	b.n	800a860 <__mdiff+0x28>
 800a898:	f100 0b14 	add.w	fp, r0, #20
 800a89c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a8a0:	f109 0310 	add.w	r3, r9, #16
 800a8a4:	60c5      	str	r5, [r0, #12]
 800a8a6:	f04f 0c00 	mov.w	ip, #0
 800a8aa:	f109 0514 	add.w	r5, r9, #20
 800a8ae:	46d9      	mov	r9, fp
 800a8b0:	6926      	ldr	r6, [r4, #16]
 800a8b2:	f104 0e14 	add.w	lr, r4, #20
 800a8b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8be:	9301      	str	r3, [sp, #4]
 800a8c0:	9b01      	ldr	r3, [sp, #4]
 800a8c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8ca:	b281      	uxth	r1, r0
 800a8cc:	9301      	str	r3, [sp, #4]
 800a8ce:	fa1f f38a 	uxth.w	r3, sl
 800a8d2:	1a5b      	subs	r3, r3, r1
 800a8d4:	0c00      	lsrs	r0, r0, #16
 800a8d6:	4463      	add	r3, ip
 800a8d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a8dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a8e6:	4576      	cmp	r6, lr
 800a8e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8ec:	f849 3b04 	str.w	r3, [r9], #4
 800a8f0:	d8e6      	bhi.n	800a8c0 <__mdiff+0x88>
 800a8f2:	1b33      	subs	r3, r6, r4
 800a8f4:	3b15      	subs	r3, #21
 800a8f6:	f023 0303 	bic.w	r3, r3, #3
 800a8fa:	3415      	adds	r4, #21
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	42a6      	cmp	r6, r4
 800a900:	bf38      	it	cc
 800a902:	2304      	movcc	r3, #4
 800a904:	441d      	add	r5, r3
 800a906:	445b      	add	r3, fp
 800a908:	461e      	mov	r6, r3
 800a90a:	462c      	mov	r4, r5
 800a90c:	4544      	cmp	r4, r8
 800a90e:	d30e      	bcc.n	800a92e <__mdiff+0xf6>
 800a910:	f108 0103 	add.w	r1, r8, #3
 800a914:	1b49      	subs	r1, r1, r5
 800a916:	f021 0103 	bic.w	r1, r1, #3
 800a91a:	3d03      	subs	r5, #3
 800a91c:	45a8      	cmp	r8, r5
 800a91e:	bf38      	it	cc
 800a920:	2100      	movcc	r1, #0
 800a922:	440b      	add	r3, r1
 800a924:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a928:	b199      	cbz	r1, 800a952 <__mdiff+0x11a>
 800a92a:	6117      	str	r7, [r2, #16]
 800a92c:	e79e      	b.n	800a86c <__mdiff+0x34>
 800a92e:	46e6      	mov	lr, ip
 800a930:	f854 1b04 	ldr.w	r1, [r4], #4
 800a934:	fa1f fc81 	uxth.w	ip, r1
 800a938:	44f4      	add	ip, lr
 800a93a:	0c08      	lsrs	r0, r1, #16
 800a93c:	4471      	add	r1, lr
 800a93e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a942:	b289      	uxth	r1, r1
 800a944:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a94c:	f846 1b04 	str.w	r1, [r6], #4
 800a950:	e7dc      	b.n	800a90c <__mdiff+0xd4>
 800a952:	3f01      	subs	r7, #1
 800a954:	e7e6      	b.n	800a924 <__mdiff+0xec>
 800a956:	bf00      	nop
 800a958:	0800bbdc 	.word	0x0800bbdc
 800a95c:	0800bc64 	.word	0x0800bc64

0800a960 <__ulp>:
 800a960:	4b0e      	ldr	r3, [pc, #56]	@ (800a99c <__ulp+0x3c>)
 800a962:	400b      	ands	r3, r1
 800a964:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc08      	bgt.n	800a97e <__ulp+0x1e>
 800a96c:	425b      	negs	r3, r3
 800a96e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a972:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a976:	da04      	bge.n	800a982 <__ulp+0x22>
 800a978:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a97c:	4113      	asrs	r3, r2
 800a97e:	2200      	movs	r2, #0
 800a980:	e008      	b.n	800a994 <__ulp+0x34>
 800a982:	f1a2 0314 	sub.w	r3, r2, #20
 800a986:	2b1e      	cmp	r3, #30
 800a988:	bfd6      	itet	le
 800a98a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a98e:	2201      	movgt	r2, #1
 800a990:	40da      	lsrle	r2, r3
 800a992:	2300      	movs	r3, #0
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	7ff00000 	.word	0x7ff00000

0800a9a0 <__b2d>:
 800a9a0:	6902      	ldr	r2, [r0, #16]
 800a9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a4:	f100 0614 	add.w	r6, r0, #20
 800a9a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a9ac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a9b0:	4f1e      	ldr	r7, [pc, #120]	@ (800aa2c <__b2d+0x8c>)
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7ff fd5a 	bl	800a46c <__hi0bits>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f1c0 0020 	rsb	r0, r0, #32
 800a9be:	2b0a      	cmp	r3, #10
 800a9c0:	f1a2 0504 	sub.w	r5, r2, #4
 800a9c4:	6008      	str	r0, [r1, #0]
 800a9c6:	dc12      	bgt.n	800a9ee <__b2d+0x4e>
 800a9c8:	42ae      	cmp	r6, r5
 800a9ca:	bf2c      	ite	cs
 800a9cc:	2200      	movcs	r2, #0
 800a9ce:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a9d2:	f1c3 0c0b 	rsb	ip, r3, #11
 800a9d6:	3315      	adds	r3, #21
 800a9d8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a9dc:	fa04 f303 	lsl.w	r3, r4, r3
 800a9e0:	fa22 f20c 	lsr.w	r2, r2, ip
 800a9e4:	ea4e 0107 	orr.w	r1, lr, r7
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ee:	42ae      	cmp	r6, r5
 800a9f0:	bf36      	itet	cc
 800a9f2:	f1a2 0508 	subcc.w	r5, r2, #8
 800a9f6:	2200      	movcs	r2, #0
 800a9f8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a9fc:	3b0b      	subs	r3, #11
 800a9fe:	d012      	beq.n	800aa26 <__b2d+0x86>
 800aa00:	f1c3 0720 	rsb	r7, r3, #32
 800aa04:	fa22 f107 	lsr.w	r1, r2, r7
 800aa08:	409c      	lsls	r4, r3
 800aa0a:	430c      	orrs	r4, r1
 800aa0c:	42b5      	cmp	r5, r6
 800aa0e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800aa12:	bf94      	ite	ls
 800aa14:	2400      	movls	r4, #0
 800aa16:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800aa1a:	409a      	lsls	r2, r3
 800aa1c:	40fc      	lsrs	r4, r7
 800aa1e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800aa22:	4322      	orrs	r2, r4
 800aa24:	e7e1      	b.n	800a9ea <__b2d+0x4a>
 800aa26:	ea44 0107 	orr.w	r1, r4, r7
 800aa2a:	e7de      	b.n	800a9ea <__b2d+0x4a>
 800aa2c:	3ff00000 	.word	0x3ff00000

0800aa30 <__d2b>:
 800aa30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800aa34:	2101      	movs	r1, #1
 800aa36:	4690      	mov	r8, r2
 800aa38:	4699      	mov	r9, r3
 800aa3a:	9e08      	ldr	r6, [sp, #32]
 800aa3c:	f7ff fc24 	bl	800a288 <_Balloc>
 800aa40:	4604      	mov	r4, r0
 800aa42:	b930      	cbnz	r0, 800aa52 <__d2b+0x22>
 800aa44:	4602      	mov	r2, r0
 800aa46:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa4a:	4b23      	ldr	r3, [pc, #140]	@ (800aad8 <__d2b+0xa8>)
 800aa4c:	4823      	ldr	r0, [pc, #140]	@ (800aadc <__d2b+0xac>)
 800aa4e:	f000 fc8f 	bl	800b370 <__assert_func>
 800aa52:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa5a:	b10d      	cbz	r5, 800aa60 <__d2b+0x30>
 800aa5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	f1b8 0300 	subs.w	r3, r8, #0
 800aa66:	d024      	beq.n	800aab2 <__d2b+0x82>
 800aa68:	4668      	mov	r0, sp
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	f7ff fd1d 	bl	800a4aa <__lo0bits>
 800aa70:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa74:	b1d8      	cbz	r0, 800aaae <__d2b+0x7e>
 800aa76:	f1c0 0320 	rsb	r3, r0, #32
 800aa7a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7e:	430b      	orrs	r3, r1
 800aa80:	40c2      	lsrs	r2, r0
 800aa82:	6163      	str	r3, [r4, #20]
 800aa84:	9201      	str	r2, [sp, #4]
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	bf0c      	ite	eq
 800aa8c:	2201      	moveq	r2, #1
 800aa8e:	2202      	movne	r2, #2
 800aa90:	61a3      	str	r3, [r4, #24]
 800aa92:	6122      	str	r2, [r4, #16]
 800aa94:	b1ad      	cbz	r5, 800aac2 <__d2b+0x92>
 800aa96:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa9a:	4405      	add	r5, r0
 800aa9c:	6035      	str	r5, [r6, #0]
 800aa9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa4:	6018      	str	r0, [r3, #0]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	b002      	add	sp, #8
 800aaaa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aaae:	6161      	str	r1, [r4, #20]
 800aab0:	e7e9      	b.n	800aa86 <__d2b+0x56>
 800aab2:	a801      	add	r0, sp, #4
 800aab4:	f7ff fcf9 	bl	800a4aa <__lo0bits>
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	6163      	str	r3, [r4, #20]
 800aabe:	3020      	adds	r0, #32
 800aac0:	e7e7      	b.n	800aa92 <__d2b+0x62>
 800aac2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aac6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaca:	6030      	str	r0, [r6, #0]
 800aacc:	6918      	ldr	r0, [r3, #16]
 800aace:	f7ff fccd 	bl	800a46c <__hi0bits>
 800aad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aad6:	e7e4      	b.n	800aaa2 <__d2b+0x72>
 800aad8:	0800bbdc 	.word	0x0800bbdc
 800aadc:	0800bc64 	.word	0x0800bc64

0800aae0 <__ratio>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	b085      	sub	sp, #20
 800aae6:	e9cd 1000 	strd	r1, r0, [sp]
 800aaea:	a902      	add	r1, sp, #8
 800aaec:	f7ff ff58 	bl	800a9a0 <__b2d>
 800aaf0:	468b      	mov	fp, r1
 800aaf2:	4606      	mov	r6, r0
 800aaf4:	460f      	mov	r7, r1
 800aaf6:	9800      	ldr	r0, [sp, #0]
 800aaf8:	a903      	add	r1, sp, #12
 800aafa:	f7ff ff51 	bl	800a9a0 <__b2d>
 800aafe:	460d      	mov	r5, r1
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	4689      	mov	r9, r1
 800ab04:	6919      	ldr	r1, [r3, #16]
 800ab06:	9b00      	ldr	r3, [sp, #0]
 800ab08:	4604      	mov	r4, r0
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	1ac9      	subs	r1, r1, r3
 800ab10:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	bfcd      	iteet	gt
 800ab1e:	463a      	movgt	r2, r7
 800ab20:	462a      	movle	r2, r5
 800ab22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab26:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ab2a:	bfd8      	it	le
 800ab2c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ab30:	464b      	mov	r3, r9
 800ab32:	4622      	mov	r2, r4
 800ab34:	4659      	mov	r1, fp
 800ab36:	f7f5 fdf9 	bl	800072c <__aeabi_ddiv>
 800ab3a:	b005      	add	sp, #20
 800ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab40 <__copybits>:
 800ab40:	3901      	subs	r1, #1
 800ab42:	b570      	push	{r4, r5, r6, lr}
 800ab44:	1149      	asrs	r1, r1, #5
 800ab46:	6914      	ldr	r4, [r2, #16]
 800ab48:	3101      	adds	r1, #1
 800ab4a:	f102 0314 	add.w	r3, r2, #20
 800ab4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab56:	1f05      	subs	r5, r0, #4
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d30c      	bcc.n	800ab76 <__copybits+0x36>
 800ab5c:	1aa3      	subs	r3, r4, r2
 800ab5e:	3b11      	subs	r3, #17
 800ab60:	f023 0303 	bic.w	r3, r3, #3
 800ab64:	3211      	adds	r2, #17
 800ab66:	42a2      	cmp	r2, r4
 800ab68:	bf88      	it	hi
 800ab6a:	2300      	movhi	r3, #0
 800ab6c:	4418      	add	r0, r3
 800ab6e:	2300      	movs	r3, #0
 800ab70:	4288      	cmp	r0, r1
 800ab72:	d305      	bcc.n	800ab80 <__copybits+0x40>
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab7a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab7e:	e7eb      	b.n	800ab58 <__copybits+0x18>
 800ab80:	f840 3b04 	str.w	r3, [r0], #4
 800ab84:	e7f4      	b.n	800ab70 <__copybits+0x30>

0800ab86 <__any_on>:
 800ab86:	f100 0214 	add.w	r2, r0, #20
 800ab8a:	6900      	ldr	r0, [r0, #16]
 800ab8c:	114b      	asrs	r3, r1, #5
 800ab8e:	4298      	cmp	r0, r3
 800ab90:	b510      	push	{r4, lr}
 800ab92:	db11      	blt.n	800abb8 <__any_on+0x32>
 800ab94:	dd0a      	ble.n	800abac <__any_on+0x26>
 800ab96:	f011 011f 	ands.w	r1, r1, #31
 800ab9a:	d007      	beq.n	800abac <__any_on+0x26>
 800ab9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aba0:	fa24 f001 	lsr.w	r0, r4, r1
 800aba4:	fa00 f101 	lsl.w	r1, r0, r1
 800aba8:	428c      	cmp	r4, r1
 800abaa:	d10b      	bne.n	800abc4 <__any_on+0x3e>
 800abac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d803      	bhi.n	800abbc <__any_on+0x36>
 800abb4:	2000      	movs	r0, #0
 800abb6:	bd10      	pop	{r4, pc}
 800abb8:	4603      	mov	r3, r0
 800abba:	e7f7      	b.n	800abac <__any_on+0x26>
 800abbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d0f5      	beq.n	800abb0 <__any_on+0x2a>
 800abc4:	2001      	movs	r0, #1
 800abc6:	e7f6      	b.n	800abb6 <__any_on+0x30>

0800abc8 <__ascii_wctomb>:
 800abc8:	4603      	mov	r3, r0
 800abca:	4608      	mov	r0, r1
 800abcc:	b141      	cbz	r1, 800abe0 <__ascii_wctomb+0x18>
 800abce:	2aff      	cmp	r2, #255	@ 0xff
 800abd0:	d904      	bls.n	800abdc <__ascii_wctomb+0x14>
 800abd2:	228a      	movs	r2, #138	@ 0x8a
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	4770      	bx	lr
 800abdc:	2001      	movs	r0, #1
 800abde:	700a      	strb	r2, [r1, #0]
 800abe0:	4770      	bx	lr

0800abe2 <__ssputs_r>:
 800abe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe6:	461f      	mov	r7, r3
 800abe8:	688e      	ldr	r6, [r1, #8]
 800abea:	4682      	mov	sl, r0
 800abec:	42be      	cmp	r6, r7
 800abee:	460c      	mov	r4, r1
 800abf0:	4690      	mov	r8, r2
 800abf2:	680b      	ldr	r3, [r1, #0]
 800abf4:	d82d      	bhi.n	800ac52 <__ssputs_r+0x70>
 800abf6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abfa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abfe:	d026      	beq.n	800ac4e <__ssputs_r+0x6c>
 800ac00:	6965      	ldr	r5, [r4, #20]
 800ac02:	6909      	ldr	r1, [r1, #16]
 800ac04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac08:	eba3 0901 	sub.w	r9, r3, r1
 800ac0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac10:	1c7b      	adds	r3, r7, #1
 800ac12:	444b      	add	r3, r9
 800ac14:	106d      	asrs	r5, r5, #1
 800ac16:	429d      	cmp	r5, r3
 800ac18:	bf38      	it	cc
 800ac1a:	461d      	movcc	r5, r3
 800ac1c:	0553      	lsls	r3, r2, #21
 800ac1e:	d527      	bpl.n	800ac70 <__ssputs_r+0x8e>
 800ac20:	4629      	mov	r1, r5
 800ac22:	f7ff fa93 	bl	800a14c <_malloc_r>
 800ac26:	4606      	mov	r6, r0
 800ac28:	b360      	cbz	r0, 800ac84 <__ssputs_r+0xa2>
 800ac2a:	464a      	mov	r2, r9
 800ac2c:	6921      	ldr	r1, [r4, #16]
 800ac2e:	f7fe fed4 	bl	80099da <memcpy>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	6126      	str	r6, [r4, #16]
 800ac40:	444e      	add	r6, r9
 800ac42:	6026      	str	r6, [r4, #0]
 800ac44:	463e      	mov	r6, r7
 800ac46:	6165      	str	r5, [r4, #20]
 800ac48:	eba5 0509 	sub.w	r5, r5, r9
 800ac4c:	60a5      	str	r5, [r4, #8]
 800ac4e:	42be      	cmp	r6, r7
 800ac50:	d900      	bls.n	800ac54 <__ssputs_r+0x72>
 800ac52:	463e      	mov	r6, r7
 800ac54:	4632      	mov	r2, r6
 800ac56:	4641      	mov	r1, r8
 800ac58:	6820      	ldr	r0, [r4, #0]
 800ac5a:	f000 fb51 	bl	800b300 <memmove>
 800ac5e:	2000      	movs	r0, #0
 800ac60:	68a3      	ldr	r3, [r4, #8]
 800ac62:	1b9b      	subs	r3, r3, r6
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	4433      	add	r3, r6
 800ac6a:	6023      	str	r3, [r4, #0]
 800ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac70:	462a      	mov	r2, r5
 800ac72:	f000 fbb7 	bl	800b3e4 <_realloc_r>
 800ac76:	4606      	mov	r6, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d1e0      	bne.n	800ac3e <__ssputs_r+0x5c>
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	6921      	ldr	r1, [r4, #16]
 800ac80:	f7fe fec0 	bl	8009a04 <_free_r>
 800ac84:	230c      	movs	r3, #12
 800ac86:	f8ca 3000 	str.w	r3, [sl]
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	e7e9      	b.n	800ac6c <__ssputs_r+0x8a>

0800ac98 <_svfiprintf_r>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	4698      	mov	r8, r3
 800ac9e:	898b      	ldrh	r3, [r1, #12]
 800aca0:	4607      	mov	r7, r0
 800aca2:	061b      	lsls	r3, r3, #24
 800aca4:	460d      	mov	r5, r1
 800aca6:	4614      	mov	r4, r2
 800aca8:	b09d      	sub	sp, #116	@ 0x74
 800acaa:	d510      	bpl.n	800acce <_svfiprintf_r+0x36>
 800acac:	690b      	ldr	r3, [r1, #16]
 800acae:	b973      	cbnz	r3, 800acce <_svfiprintf_r+0x36>
 800acb0:	2140      	movs	r1, #64	@ 0x40
 800acb2:	f7ff fa4b 	bl	800a14c <_malloc_r>
 800acb6:	6028      	str	r0, [r5, #0]
 800acb8:	6128      	str	r0, [r5, #16]
 800acba:	b930      	cbnz	r0, 800acca <_svfiprintf_r+0x32>
 800acbc:	230c      	movs	r3, #12
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	b01d      	add	sp, #116	@ 0x74
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	2340      	movs	r3, #64	@ 0x40
 800accc:	616b      	str	r3, [r5, #20]
 800acce:	2300      	movs	r3, #0
 800acd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd2:	2320      	movs	r3, #32
 800acd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acd8:	2330      	movs	r3, #48	@ 0x30
 800acda:	f04f 0901 	mov.w	r9, #1
 800acde:	f8cd 800c 	str.w	r8, [sp, #12]
 800ace2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ae7c <_svfiprintf_r+0x1e4>
 800ace6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acea:	4623      	mov	r3, r4
 800acec:	469a      	mov	sl, r3
 800acee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf2:	b10a      	cbz	r2, 800acf8 <_svfiprintf_r+0x60>
 800acf4:	2a25      	cmp	r2, #37	@ 0x25
 800acf6:	d1f9      	bne.n	800acec <_svfiprintf_r+0x54>
 800acf8:	ebba 0b04 	subs.w	fp, sl, r4
 800acfc:	d00b      	beq.n	800ad16 <_svfiprintf_r+0x7e>
 800acfe:	465b      	mov	r3, fp
 800ad00:	4622      	mov	r2, r4
 800ad02:	4629      	mov	r1, r5
 800ad04:	4638      	mov	r0, r7
 800ad06:	f7ff ff6c 	bl	800abe2 <__ssputs_r>
 800ad0a:	3001      	adds	r0, #1
 800ad0c:	f000 80a7 	beq.w	800ae5e <_svfiprintf_r+0x1c6>
 800ad10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad12:	445a      	add	r2, fp
 800ad14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad16:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f000 809f 	beq.w	800ae5e <_svfiprintf_r+0x1c6>
 800ad20:	2300      	movs	r3, #0
 800ad22:	f04f 32ff 	mov.w	r2, #4294967295
 800ad26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad2a:	f10a 0a01 	add.w	sl, sl, #1
 800ad2e:	9304      	str	r3, [sp, #16]
 800ad30:	9307      	str	r3, [sp, #28]
 800ad32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad36:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad38:	4654      	mov	r4, sl
 800ad3a:	2205      	movs	r2, #5
 800ad3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad40:	484e      	ldr	r0, [pc, #312]	@ (800ae7c <_svfiprintf_r+0x1e4>)
 800ad42:	f000 fb07 	bl	800b354 <memchr>
 800ad46:	9a04      	ldr	r2, [sp, #16]
 800ad48:	b9d8      	cbnz	r0, 800ad82 <_svfiprintf_r+0xea>
 800ad4a:	06d0      	lsls	r0, r2, #27
 800ad4c:	bf44      	itt	mi
 800ad4e:	2320      	movmi	r3, #32
 800ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad54:	0711      	lsls	r1, r2, #28
 800ad56:	bf44      	itt	mi
 800ad58:	232b      	movmi	r3, #43	@ 0x2b
 800ad5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad64:	d015      	beq.n	800ad92 <_svfiprintf_r+0xfa>
 800ad66:	4654      	mov	r4, sl
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f04f 0c0a 	mov.w	ip, #10
 800ad6e:	9a07      	ldr	r2, [sp, #28]
 800ad70:	4621      	mov	r1, r4
 800ad72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad76:	3b30      	subs	r3, #48	@ 0x30
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d94b      	bls.n	800ae14 <_svfiprintf_r+0x17c>
 800ad7c:	b1b0      	cbz	r0, 800adac <_svfiprintf_r+0x114>
 800ad7e:	9207      	str	r2, [sp, #28]
 800ad80:	e014      	b.n	800adac <_svfiprintf_r+0x114>
 800ad82:	eba0 0308 	sub.w	r3, r0, r8
 800ad86:	fa09 f303 	lsl.w	r3, r9, r3
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	46a2      	mov	sl, r4
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	e7d2      	b.n	800ad38 <_svfiprintf_r+0xa0>
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	1d19      	adds	r1, r3, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	9103      	str	r1, [sp, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bfbb      	ittet	lt
 800ad9e:	425b      	neglt	r3, r3
 800ada0:	f042 0202 	orrlt.w	r2, r2, #2
 800ada4:	9307      	strge	r3, [sp, #28]
 800ada6:	9307      	strlt	r3, [sp, #28]
 800ada8:	bfb8      	it	lt
 800adaa:	9204      	strlt	r2, [sp, #16]
 800adac:	7823      	ldrb	r3, [r4, #0]
 800adae:	2b2e      	cmp	r3, #46	@ 0x2e
 800adb0:	d10a      	bne.n	800adc8 <_svfiprintf_r+0x130>
 800adb2:	7863      	ldrb	r3, [r4, #1]
 800adb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800adb6:	d132      	bne.n	800ae1e <_svfiprintf_r+0x186>
 800adb8:	9b03      	ldr	r3, [sp, #12]
 800adba:	3402      	adds	r4, #2
 800adbc:	1d1a      	adds	r2, r3, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	9203      	str	r2, [sp, #12]
 800adc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adc6:	9305      	str	r3, [sp, #20]
 800adc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ae80 <_svfiprintf_r+0x1e8>
 800adcc:	2203      	movs	r2, #3
 800adce:	4650      	mov	r0, sl
 800add0:	7821      	ldrb	r1, [r4, #0]
 800add2:	f000 fabf 	bl	800b354 <memchr>
 800add6:	b138      	cbz	r0, 800ade8 <_svfiprintf_r+0x150>
 800add8:	2240      	movs	r2, #64	@ 0x40
 800adda:	9b04      	ldr	r3, [sp, #16]
 800addc:	eba0 000a 	sub.w	r0, r0, sl
 800ade0:	4082      	lsls	r2, r0
 800ade2:	4313      	orrs	r3, r2
 800ade4:	3401      	adds	r4, #1
 800ade6:	9304      	str	r3, [sp, #16]
 800ade8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adec:	2206      	movs	r2, #6
 800adee:	4825      	ldr	r0, [pc, #148]	@ (800ae84 <_svfiprintf_r+0x1ec>)
 800adf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adf4:	f000 faae 	bl	800b354 <memchr>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d036      	beq.n	800ae6a <_svfiprintf_r+0x1d2>
 800adfc:	4b22      	ldr	r3, [pc, #136]	@ (800ae88 <_svfiprintf_r+0x1f0>)
 800adfe:	bb1b      	cbnz	r3, 800ae48 <_svfiprintf_r+0x1b0>
 800ae00:	9b03      	ldr	r3, [sp, #12]
 800ae02:	3307      	adds	r3, #7
 800ae04:	f023 0307 	bic.w	r3, r3, #7
 800ae08:	3308      	adds	r3, #8
 800ae0a:	9303      	str	r3, [sp, #12]
 800ae0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0e:	4433      	add	r3, r6
 800ae10:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae12:	e76a      	b.n	800acea <_svfiprintf_r+0x52>
 800ae14:	460c      	mov	r4, r1
 800ae16:	2001      	movs	r0, #1
 800ae18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae1c:	e7a8      	b.n	800ad70 <_svfiprintf_r+0xd8>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f04f 0c0a 	mov.w	ip, #10
 800ae24:	4619      	mov	r1, r3
 800ae26:	3401      	adds	r4, #1
 800ae28:	9305      	str	r3, [sp, #20]
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae30:	3a30      	subs	r2, #48	@ 0x30
 800ae32:	2a09      	cmp	r2, #9
 800ae34:	d903      	bls.n	800ae3e <_svfiprintf_r+0x1a6>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0c6      	beq.n	800adc8 <_svfiprintf_r+0x130>
 800ae3a:	9105      	str	r1, [sp, #20]
 800ae3c:	e7c4      	b.n	800adc8 <_svfiprintf_r+0x130>
 800ae3e:	4604      	mov	r4, r0
 800ae40:	2301      	movs	r3, #1
 800ae42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae46:	e7f0      	b.n	800ae2a <_svfiprintf_r+0x192>
 800ae48:	ab03      	add	r3, sp, #12
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4638      	mov	r0, r7
 800ae50:	4b0e      	ldr	r3, [pc, #56]	@ (800ae8c <_svfiprintf_r+0x1f4>)
 800ae52:	a904      	add	r1, sp, #16
 800ae54:	f3af 8000 	nop.w
 800ae58:	1c42      	adds	r2, r0, #1
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	d1d6      	bne.n	800ae0c <_svfiprintf_r+0x174>
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	065b      	lsls	r3, r3, #25
 800ae62:	f53f af2d 	bmi.w	800acc0 <_svfiprintf_r+0x28>
 800ae66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae68:	e72c      	b.n	800acc4 <_svfiprintf_r+0x2c>
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	462a      	mov	r2, r5
 800ae70:	4638      	mov	r0, r7
 800ae72:	4b06      	ldr	r3, [pc, #24]	@ (800ae8c <_svfiprintf_r+0x1f4>)
 800ae74:	a904      	add	r1, sp, #16
 800ae76:	f000 f87d 	bl	800af74 <_printf_i>
 800ae7a:	e7ed      	b.n	800ae58 <_svfiprintf_r+0x1c0>
 800ae7c:	0800bcbd 	.word	0x0800bcbd
 800ae80:	0800bcc3 	.word	0x0800bcc3
 800ae84:	0800bcc7 	.word	0x0800bcc7
 800ae88:	00000000 	.word	0x00000000
 800ae8c:	0800abe3 	.word	0x0800abe3

0800ae90 <_printf_common>:
 800ae90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae94:	4616      	mov	r6, r2
 800ae96:	4698      	mov	r8, r3
 800ae98:	688a      	ldr	r2, [r1, #8]
 800ae9a:	690b      	ldr	r3, [r1, #16]
 800ae9c:	4607      	mov	r7, r0
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	bfb8      	it	lt
 800aea2:	4613      	movlt	r3, r2
 800aea4:	6033      	str	r3, [r6, #0]
 800aea6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aeaa:	460c      	mov	r4, r1
 800aeac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aeb0:	b10a      	cbz	r2, 800aeb6 <_printf_common+0x26>
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	6033      	str	r3, [r6, #0]
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	0699      	lsls	r1, r3, #26
 800aeba:	bf42      	ittt	mi
 800aebc:	6833      	ldrmi	r3, [r6, #0]
 800aebe:	3302      	addmi	r3, #2
 800aec0:	6033      	strmi	r3, [r6, #0]
 800aec2:	6825      	ldr	r5, [r4, #0]
 800aec4:	f015 0506 	ands.w	r5, r5, #6
 800aec8:	d106      	bne.n	800aed8 <_printf_common+0x48>
 800aeca:	f104 0a19 	add.w	sl, r4, #25
 800aece:	68e3      	ldr	r3, [r4, #12]
 800aed0:	6832      	ldr	r2, [r6, #0]
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	42ab      	cmp	r3, r5
 800aed6:	dc2b      	bgt.n	800af30 <_printf_common+0xa0>
 800aed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aedc:	6822      	ldr	r2, [r4, #0]
 800aede:	3b00      	subs	r3, #0
 800aee0:	bf18      	it	ne
 800aee2:	2301      	movne	r3, #1
 800aee4:	0692      	lsls	r2, r2, #26
 800aee6:	d430      	bmi.n	800af4a <_printf_common+0xba>
 800aee8:	4641      	mov	r1, r8
 800aeea:	4638      	mov	r0, r7
 800aeec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aef0:	47c8      	blx	r9
 800aef2:	3001      	adds	r0, #1
 800aef4:	d023      	beq.n	800af3e <_printf_common+0xae>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	6922      	ldr	r2, [r4, #16]
 800aefa:	f003 0306 	and.w	r3, r3, #6
 800aefe:	2b04      	cmp	r3, #4
 800af00:	bf14      	ite	ne
 800af02:	2500      	movne	r5, #0
 800af04:	6833      	ldreq	r3, [r6, #0]
 800af06:	f04f 0600 	mov.w	r6, #0
 800af0a:	bf08      	it	eq
 800af0c:	68e5      	ldreq	r5, [r4, #12]
 800af0e:	f104 041a 	add.w	r4, r4, #26
 800af12:	bf08      	it	eq
 800af14:	1aed      	subeq	r5, r5, r3
 800af16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af1a:	bf08      	it	eq
 800af1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af20:	4293      	cmp	r3, r2
 800af22:	bfc4      	itt	gt
 800af24:	1a9b      	subgt	r3, r3, r2
 800af26:	18ed      	addgt	r5, r5, r3
 800af28:	42b5      	cmp	r5, r6
 800af2a:	d11a      	bne.n	800af62 <_printf_common+0xd2>
 800af2c:	2000      	movs	r0, #0
 800af2e:	e008      	b.n	800af42 <_printf_common+0xb2>
 800af30:	2301      	movs	r3, #1
 800af32:	4652      	mov	r2, sl
 800af34:	4641      	mov	r1, r8
 800af36:	4638      	mov	r0, r7
 800af38:	47c8      	blx	r9
 800af3a:	3001      	adds	r0, #1
 800af3c:	d103      	bne.n	800af46 <_printf_common+0xb6>
 800af3e:	f04f 30ff 	mov.w	r0, #4294967295
 800af42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af46:	3501      	adds	r5, #1
 800af48:	e7c1      	b.n	800aece <_printf_common+0x3e>
 800af4a:	2030      	movs	r0, #48	@ 0x30
 800af4c:	18e1      	adds	r1, r4, r3
 800af4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af58:	4422      	add	r2, r4
 800af5a:	3302      	adds	r3, #2
 800af5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af60:	e7c2      	b.n	800aee8 <_printf_common+0x58>
 800af62:	2301      	movs	r3, #1
 800af64:	4622      	mov	r2, r4
 800af66:	4641      	mov	r1, r8
 800af68:	4638      	mov	r0, r7
 800af6a:	47c8      	blx	r9
 800af6c:	3001      	adds	r0, #1
 800af6e:	d0e6      	beq.n	800af3e <_printf_common+0xae>
 800af70:	3601      	adds	r6, #1
 800af72:	e7d9      	b.n	800af28 <_printf_common+0x98>

0800af74 <_printf_i>:
 800af74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af78:	7e0f      	ldrb	r7, [r1, #24]
 800af7a:	4691      	mov	r9, r2
 800af7c:	2f78      	cmp	r7, #120	@ 0x78
 800af7e:	4680      	mov	r8, r0
 800af80:	460c      	mov	r4, r1
 800af82:	469a      	mov	sl, r3
 800af84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af8a:	d807      	bhi.n	800af9c <_printf_i+0x28>
 800af8c:	2f62      	cmp	r7, #98	@ 0x62
 800af8e:	d80a      	bhi.n	800afa6 <_printf_i+0x32>
 800af90:	2f00      	cmp	r7, #0
 800af92:	f000 80d1 	beq.w	800b138 <_printf_i+0x1c4>
 800af96:	2f58      	cmp	r7, #88	@ 0x58
 800af98:	f000 80b8 	beq.w	800b10c <_printf_i+0x198>
 800af9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afa4:	e03a      	b.n	800b01c <_printf_i+0xa8>
 800afa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afaa:	2b15      	cmp	r3, #21
 800afac:	d8f6      	bhi.n	800af9c <_printf_i+0x28>
 800afae:	a101      	add	r1, pc, #4	@ (adr r1, 800afb4 <_printf_i+0x40>)
 800afb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afb4:	0800b00d 	.word	0x0800b00d
 800afb8:	0800b021 	.word	0x0800b021
 800afbc:	0800af9d 	.word	0x0800af9d
 800afc0:	0800af9d 	.word	0x0800af9d
 800afc4:	0800af9d 	.word	0x0800af9d
 800afc8:	0800af9d 	.word	0x0800af9d
 800afcc:	0800b021 	.word	0x0800b021
 800afd0:	0800af9d 	.word	0x0800af9d
 800afd4:	0800af9d 	.word	0x0800af9d
 800afd8:	0800af9d 	.word	0x0800af9d
 800afdc:	0800af9d 	.word	0x0800af9d
 800afe0:	0800b11f 	.word	0x0800b11f
 800afe4:	0800b04b 	.word	0x0800b04b
 800afe8:	0800b0d9 	.word	0x0800b0d9
 800afec:	0800af9d 	.word	0x0800af9d
 800aff0:	0800af9d 	.word	0x0800af9d
 800aff4:	0800b141 	.word	0x0800b141
 800aff8:	0800af9d 	.word	0x0800af9d
 800affc:	0800b04b 	.word	0x0800b04b
 800b000:	0800af9d 	.word	0x0800af9d
 800b004:	0800af9d 	.word	0x0800af9d
 800b008:	0800b0e1 	.word	0x0800b0e1
 800b00c:	6833      	ldr	r3, [r6, #0]
 800b00e:	1d1a      	adds	r2, r3, #4
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6032      	str	r2, [r6, #0]
 800b014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b01c:	2301      	movs	r3, #1
 800b01e:	e09c      	b.n	800b15a <_printf_i+0x1e6>
 800b020:	6833      	ldr	r3, [r6, #0]
 800b022:	6820      	ldr	r0, [r4, #0]
 800b024:	1d19      	adds	r1, r3, #4
 800b026:	6031      	str	r1, [r6, #0]
 800b028:	0606      	lsls	r6, r0, #24
 800b02a:	d501      	bpl.n	800b030 <_printf_i+0xbc>
 800b02c:	681d      	ldr	r5, [r3, #0]
 800b02e:	e003      	b.n	800b038 <_printf_i+0xc4>
 800b030:	0645      	lsls	r5, r0, #25
 800b032:	d5fb      	bpl.n	800b02c <_printf_i+0xb8>
 800b034:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b038:	2d00      	cmp	r5, #0
 800b03a:	da03      	bge.n	800b044 <_printf_i+0xd0>
 800b03c:	232d      	movs	r3, #45	@ 0x2d
 800b03e:	426d      	negs	r5, r5
 800b040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b044:	230a      	movs	r3, #10
 800b046:	4858      	ldr	r0, [pc, #352]	@ (800b1a8 <_printf_i+0x234>)
 800b048:	e011      	b.n	800b06e <_printf_i+0xfa>
 800b04a:	6821      	ldr	r1, [r4, #0]
 800b04c:	6833      	ldr	r3, [r6, #0]
 800b04e:	0608      	lsls	r0, r1, #24
 800b050:	f853 5b04 	ldr.w	r5, [r3], #4
 800b054:	d402      	bmi.n	800b05c <_printf_i+0xe8>
 800b056:	0649      	lsls	r1, r1, #25
 800b058:	bf48      	it	mi
 800b05a:	b2ad      	uxthmi	r5, r5
 800b05c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b05e:	6033      	str	r3, [r6, #0]
 800b060:	bf14      	ite	ne
 800b062:	230a      	movne	r3, #10
 800b064:	2308      	moveq	r3, #8
 800b066:	4850      	ldr	r0, [pc, #320]	@ (800b1a8 <_printf_i+0x234>)
 800b068:	2100      	movs	r1, #0
 800b06a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b06e:	6866      	ldr	r6, [r4, #4]
 800b070:	2e00      	cmp	r6, #0
 800b072:	60a6      	str	r6, [r4, #8]
 800b074:	db05      	blt.n	800b082 <_printf_i+0x10e>
 800b076:	6821      	ldr	r1, [r4, #0]
 800b078:	432e      	orrs	r6, r5
 800b07a:	f021 0104 	bic.w	r1, r1, #4
 800b07e:	6021      	str	r1, [r4, #0]
 800b080:	d04b      	beq.n	800b11a <_printf_i+0x1a6>
 800b082:	4616      	mov	r6, r2
 800b084:	fbb5 f1f3 	udiv	r1, r5, r3
 800b088:	fb03 5711 	mls	r7, r3, r1, r5
 800b08c:	5dc7      	ldrb	r7, [r0, r7]
 800b08e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b092:	462f      	mov	r7, r5
 800b094:	42bb      	cmp	r3, r7
 800b096:	460d      	mov	r5, r1
 800b098:	d9f4      	bls.n	800b084 <_printf_i+0x110>
 800b09a:	2b08      	cmp	r3, #8
 800b09c:	d10b      	bne.n	800b0b6 <_printf_i+0x142>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	07df      	lsls	r7, r3, #31
 800b0a2:	d508      	bpl.n	800b0b6 <_printf_i+0x142>
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	6861      	ldr	r1, [r4, #4]
 800b0a8:	4299      	cmp	r1, r3
 800b0aa:	bfde      	ittt	le
 800b0ac:	2330      	movle	r3, #48	@ 0x30
 800b0ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0b6:	1b92      	subs	r2, r2, r6
 800b0b8:	6122      	str	r2, [r4, #16]
 800b0ba:	464b      	mov	r3, r9
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4640      	mov	r0, r8
 800b0c0:	f8cd a000 	str.w	sl, [sp]
 800b0c4:	aa03      	add	r2, sp, #12
 800b0c6:	f7ff fee3 	bl	800ae90 <_printf_common>
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	d14a      	bne.n	800b164 <_printf_i+0x1f0>
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	b004      	add	sp, #16
 800b0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d8:	6823      	ldr	r3, [r4, #0]
 800b0da:	f043 0320 	orr.w	r3, r3, #32
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	2778      	movs	r7, #120	@ 0x78
 800b0e2:	4832      	ldr	r0, [pc, #200]	@ (800b1ac <_printf_i+0x238>)
 800b0e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	6831      	ldr	r1, [r6, #0]
 800b0ec:	061f      	lsls	r7, r3, #24
 800b0ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0f2:	d402      	bmi.n	800b0fa <_printf_i+0x186>
 800b0f4:	065f      	lsls	r7, r3, #25
 800b0f6:	bf48      	it	mi
 800b0f8:	b2ad      	uxthmi	r5, r5
 800b0fa:	6031      	str	r1, [r6, #0]
 800b0fc:	07d9      	lsls	r1, r3, #31
 800b0fe:	bf44      	itt	mi
 800b100:	f043 0320 	orrmi.w	r3, r3, #32
 800b104:	6023      	strmi	r3, [r4, #0]
 800b106:	b11d      	cbz	r5, 800b110 <_printf_i+0x19c>
 800b108:	2310      	movs	r3, #16
 800b10a:	e7ad      	b.n	800b068 <_printf_i+0xf4>
 800b10c:	4826      	ldr	r0, [pc, #152]	@ (800b1a8 <_printf_i+0x234>)
 800b10e:	e7e9      	b.n	800b0e4 <_printf_i+0x170>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	f023 0320 	bic.w	r3, r3, #32
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	e7f6      	b.n	800b108 <_printf_i+0x194>
 800b11a:	4616      	mov	r6, r2
 800b11c:	e7bd      	b.n	800b09a <_printf_i+0x126>
 800b11e:	6833      	ldr	r3, [r6, #0]
 800b120:	6825      	ldr	r5, [r4, #0]
 800b122:	1d18      	adds	r0, r3, #4
 800b124:	6961      	ldr	r1, [r4, #20]
 800b126:	6030      	str	r0, [r6, #0]
 800b128:	062e      	lsls	r6, r5, #24
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	d501      	bpl.n	800b132 <_printf_i+0x1be>
 800b12e:	6019      	str	r1, [r3, #0]
 800b130:	e002      	b.n	800b138 <_printf_i+0x1c4>
 800b132:	0668      	lsls	r0, r5, #25
 800b134:	d5fb      	bpl.n	800b12e <_printf_i+0x1ba>
 800b136:	8019      	strh	r1, [r3, #0]
 800b138:	2300      	movs	r3, #0
 800b13a:	4616      	mov	r6, r2
 800b13c:	6123      	str	r3, [r4, #16]
 800b13e:	e7bc      	b.n	800b0ba <_printf_i+0x146>
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	2100      	movs	r1, #0
 800b144:	1d1a      	adds	r2, r3, #4
 800b146:	6032      	str	r2, [r6, #0]
 800b148:	681e      	ldr	r6, [r3, #0]
 800b14a:	6862      	ldr	r2, [r4, #4]
 800b14c:	4630      	mov	r0, r6
 800b14e:	f000 f901 	bl	800b354 <memchr>
 800b152:	b108      	cbz	r0, 800b158 <_printf_i+0x1e4>
 800b154:	1b80      	subs	r0, r0, r6
 800b156:	6060      	str	r0, [r4, #4]
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	6123      	str	r3, [r4, #16]
 800b15c:	2300      	movs	r3, #0
 800b15e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b162:	e7aa      	b.n	800b0ba <_printf_i+0x146>
 800b164:	4632      	mov	r2, r6
 800b166:	4649      	mov	r1, r9
 800b168:	4640      	mov	r0, r8
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	47d0      	blx	sl
 800b16e:	3001      	adds	r0, #1
 800b170:	d0ad      	beq.n	800b0ce <_printf_i+0x15a>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	079b      	lsls	r3, r3, #30
 800b176:	d413      	bmi.n	800b1a0 <_printf_i+0x22c>
 800b178:	68e0      	ldr	r0, [r4, #12]
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	4298      	cmp	r0, r3
 800b17e:	bfb8      	it	lt
 800b180:	4618      	movlt	r0, r3
 800b182:	e7a6      	b.n	800b0d2 <_printf_i+0x15e>
 800b184:	2301      	movs	r3, #1
 800b186:	4632      	mov	r2, r6
 800b188:	4649      	mov	r1, r9
 800b18a:	4640      	mov	r0, r8
 800b18c:	47d0      	blx	sl
 800b18e:	3001      	adds	r0, #1
 800b190:	d09d      	beq.n	800b0ce <_printf_i+0x15a>
 800b192:	3501      	adds	r5, #1
 800b194:	68e3      	ldr	r3, [r4, #12]
 800b196:	9903      	ldr	r1, [sp, #12]
 800b198:	1a5b      	subs	r3, r3, r1
 800b19a:	42ab      	cmp	r3, r5
 800b19c:	dcf2      	bgt.n	800b184 <_printf_i+0x210>
 800b19e:	e7eb      	b.n	800b178 <_printf_i+0x204>
 800b1a0:	2500      	movs	r5, #0
 800b1a2:	f104 0619 	add.w	r6, r4, #25
 800b1a6:	e7f5      	b.n	800b194 <_printf_i+0x220>
 800b1a8:	0800bcce 	.word	0x0800bcce
 800b1ac:	0800bcdf 	.word	0x0800bcdf

0800b1b0 <__sflush_r>:
 800b1b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	0716      	lsls	r6, r2, #28
 800b1b8:	4605      	mov	r5, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	d454      	bmi.n	800b268 <__sflush_r+0xb8>
 800b1be:	684b      	ldr	r3, [r1, #4]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc02      	bgt.n	800b1ca <__sflush_r+0x1a>
 800b1c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	dd48      	ble.n	800b25c <__sflush_r+0xac>
 800b1ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	d045      	beq.n	800b25c <__sflush_r+0xac>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1d6:	682f      	ldr	r7, [r5, #0]
 800b1d8:	6a21      	ldr	r1, [r4, #32]
 800b1da:	602b      	str	r3, [r5, #0]
 800b1dc:	d030      	beq.n	800b240 <__sflush_r+0x90>
 800b1de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	0759      	lsls	r1, r3, #29
 800b1e4:	d505      	bpl.n	800b1f2 <__sflush_r+0x42>
 800b1e6:	6863      	ldr	r3, [r4, #4]
 800b1e8:	1ad2      	subs	r2, r2, r3
 800b1ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1ec:	b10b      	cbz	r3, 800b1f2 <__sflush_r+0x42>
 800b1ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1f0:	1ad2      	subs	r2, r2, r3
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1f8:	6a21      	ldr	r1, [r4, #32]
 800b1fa:	47b0      	blx	r6
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	d106      	bne.n	800b210 <__sflush_r+0x60>
 800b202:	6829      	ldr	r1, [r5, #0]
 800b204:	291d      	cmp	r1, #29
 800b206:	d82b      	bhi.n	800b260 <__sflush_r+0xb0>
 800b208:	4a28      	ldr	r2, [pc, #160]	@ (800b2ac <__sflush_r+0xfc>)
 800b20a:	40ca      	lsrs	r2, r1
 800b20c:	07d6      	lsls	r6, r2, #31
 800b20e:	d527      	bpl.n	800b260 <__sflush_r+0xb0>
 800b210:	2200      	movs	r2, #0
 800b212:	6062      	str	r2, [r4, #4]
 800b214:	6922      	ldr	r2, [r4, #16]
 800b216:	04d9      	lsls	r1, r3, #19
 800b218:	6022      	str	r2, [r4, #0]
 800b21a:	d504      	bpl.n	800b226 <__sflush_r+0x76>
 800b21c:	1c42      	adds	r2, r0, #1
 800b21e:	d101      	bne.n	800b224 <__sflush_r+0x74>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b903      	cbnz	r3, 800b226 <__sflush_r+0x76>
 800b224:	6560      	str	r0, [r4, #84]	@ 0x54
 800b226:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b228:	602f      	str	r7, [r5, #0]
 800b22a:	b1b9      	cbz	r1, 800b25c <__sflush_r+0xac>
 800b22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <__sflush_r+0x8a>
 800b234:	4628      	mov	r0, r5
 800b236:	f7fe fbe5 	bl	8009a04 <_free_r>
 800b23a:	2300      	movs	r3, #0
 800b23c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b23e:	e00d      	b.n	800b25c <__sflush_r+0xac>
 800b240:	2301      	movs	r3, #1
 800b242:	4628      	mov	r0, r5
 800b244:	47b0      	blx	r6
 800b246:	4602      	mov	r2, r0
 800b248:	1c50      	adds	r0, r2, #1
 800b24a:	d1c9      	bne.n	800b1e0 <__sflush_r+0x30>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0c6      	beq.n	800b1e0 <__sflush_r+0x30>
 800b252:	2b1d      	cmp	r3, #29
 800b254:	d001      	beq.n	800b25a <__sflush_r+0xaa>
 800b256:	2b16      	cmp	r3, #22
 800b258:	d11d      	bne.n	800b296 <__sflush_r+0xe6>
 800b25a:	602f      	str	r7, [r5, #0]
 800b25c:	2000      	movs	r0, #0
 800b25e:	e021      	b.n	800b2a4 <__sflush_r+0xf4>
 800b260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b264:	b21b      	sxth	r3, r3
 800b266:	e01a      	b.n	800b29e <__sflush_r+0xee>
 800b268:	690f      	ldr	r7, [r1, #16]
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	d0f6      	beq.n	800b25c <__sflush_r+0xac>
 800b26e:	0793      	lsls	r3, r2, #30
 800b270:	bf18      	it	ne
 800b272:	2300      	movne	r3, #0
 800b274:	680e      	ldr	r6, [r1, #0]
 800b276:	bf08      	it	eq
 800b278:	694b      	ldreq	r3, [r1, #20]
 800b27a:	1bf6      	subs	r6, r6, r7
 800b27c:	600f      	str	r7, [r1, #0]
 800b27e:	608b      	str	r3, [r1, #8]
 800b280:	2e00      	cmp	r6, #0
 800b282:	ddeb      	ble.n	800b25c <__sflush_r+0xac>
 800b284:	4633      	mov	r3, r6
 800b286:	463a      	mov	r2, r7
 800b288:	4628      	mov	r0, r5
 800b28a:	6a21      	ldr	r1, [r4, #32]
 800b28c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b290:	47e0      	blx	ip
 800b292:	2800      	cmp	r0, #0
 800b294:	dc07      	bgt.n	800b2a6 <__sflush_r+0xf6>
 800b296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b29e:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2a6:	4407      	add	r7, r0
 800b2a8:	1a36      	subs	r6, r6, r0
 800b2aa:	e7e9      	b.n	800b280 <__sflush_r+0xd0>
 800b2ac:	20400001 	.word	0x20400001

0800b2b0 <_fflush_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	690b      	ldr	r3, [r1, #16]
 800b2b4:	4605      	mov	r5, r0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	b913      	cbnz	r3, 800b2c0 <_fflush_r+0x10>
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	4628      	mov	r0, r5
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	b118      	cbz	r0, 800b2ca <_fflush_r+0x1a>
 800b2c2:	6a03      	ldr	r3, [r0, #32]
 800b2c4:	b90b      	cbnz	r3, 800b2ca <_fflush_r+0x1a>
 800b2c6:	f7fe fa53 	bl	8009770 <__sinit>
 800b2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0f3      	beq.n	800b2ba <_fflush_r+0xa>
 800b2d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2d4:	07d0      	lsls	r0, r2, #31
 800b2d6:	d404      	bmi.n	800b2e2 <_fflush_r+0x32>
 800b2d8:	0599      	lsls	r1, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <_fflush_r+0x32>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2de:	f7fe fb7a 	bl	80099d6 <__retarget_lock_acquire_recursive>
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f7ff ff63 	bl	800b1b0 <__sflush_r>
 800b2ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	07da      	lsls	r2, r3, #31
 800b2f0:	d4e4      	bmi.n	800b2bc <_fflush_r+0xc>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	059b      	lsls	r3, r3, #22
 800b2f6:	d4e1      	bmi.n	800b2bc <_fflush_r+0xc>
 800b2f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2fa:	f7fe fb6d 	bl	80099d8 <__retarget_lock_release_recursive>
 800b2fe:	e7dd      	b.n	800b2bc <_fflush_r+0xc>

0800b300 <memmove>:
 800b300:	4288      	cmp	r0, r1
 800b302:	b510      	push	{r4, lr}
 800b304:	eb01 0402 	add.w	r4, r1, r2
 800b308:	d902      	bls.n	800b310 <memmove+0x10>
 800b30a:	4284      	cmp	r4, r0
 800b30c:	4623      	mov	r3, r4
 800b30e:	d807      	bhi.n	800b320 <memmove+0x20>
 800b310:	1e43      	subs	r3, r0, #1
 800b312:	42a1      	cmp	r1, r4
 800b314:	d008      	beq.n	800b328 <memmove+0x28>
 800b316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b31e:	e7f8      	b.n	800b312 <memmove+0x12>
 800b320:	4601      	mov	r1, r0
 800b322:	4402      	add	r2, r0
 800b324:	428a      	cmp	r2, r1
 800b326:	d100      	bne.n	800b32a <memmove+0x2a>
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b332:	e7f7      	b.n	800b324 <memmove+0x24>

0800b334 <_sbrk_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	2300      	movs	r3, #0
 800b338:	4d05      	ldr	r5, [pc, #20]	@ (800b350 <_sbrk_r+0x1c>)
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	602b      	str	r3, [r5, #0]
 800b340:	f7f6 fa12 	bl	8001768 <_sbrk>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_sbrk_r+0x1a>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_sbrk_r+0x1a>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	200016e4 	.word	0x200016e4

0800b354 <memchr>:
 800b354:	4603      	mov	r3, r0
 800b356:	b510      	push	{r4, lr}
 800b358:	b2c9      	uxtb	r1, r1
 800b35a:	4402      	add	r2, r0
 800b35c:	4293      	cmp	r3, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	d101      	bne.n	800b366 <memchr+0x12>
 800b362:	2000      	movs	r0, #0
 800b364:	e003      	b.n	800b36e <memchr+0x1a>
 800b366:	7804      	ldrb	r4, [r0, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	428c      	cmp	r4, r1
 800b36c:	d1f6      	bne.n	800b35c <memchr+0x8>
 800b36e:	bd10      	pop	{r4, pc}

0800b370 <__assert_func>:
 800b370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b372:	4614      	mov	r4, r2
 800b374:	461a      	mov	r2, r3
 800b376:	4b09      	ldr	r3, [pc, #36]	@ (800b39c <__assert_func+0x2c>)
 800b378:	4605      	mov	r5, r0
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68d8      	ldr	r0, [r3, #12]
 800b37e:	b14c      	cbz	r4, 800b394 <__assert_func+0x24>
 800b380:	4b07      	ldr	r3, [pc, #28]	@ (800b3a0 <__assert_func+0x30>)
 800b382:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b386:	9100      	str	r1, [sp, #0]
 800b388:	462b      	mov	r3, r5
 800b38a:	4906      	ldr	r1, [pc, #24]	@ (800b3a4 <__assert_func+0x34>)
 800b38c:	f000 f858 	bl	800b440 <fiprintf>
 800b390:	f000 f868 	bl	800b464 <abort>
 800b394:	4b04      	ldr	r3, [pc, #16]	@ (800b3a8 <__assert_func+0x38>)
 800b396:	461c      	mov	r4, r3
 800b398:	e7f3      	b.n	800b382 <__assert_func+0x12>
 800b39a:	bf00      	nop
 800b39c:	200002f8 	.word	0x200002f8
 800b3a0:	0800bcf0 	.word	0x0800bcf0
 800b3a4:	0800bcfd 	.word	0x0800bcfd
 800b3a8:	0800bd2b 	.word	0x0800bd2b

0800b3ac <_calloc_r>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	fba1 5402 	umull	r5, r4, r1, r2
 800b3b2:	b934      	cbnz	r4, 800b3c2 <_calloc_r+0x16>
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7fe fec9 	bl	800a14c <_malloc_r>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	b928      	cbnz	r0, 800b3ca <_calloc_r+0x1e>
 800b3be:	4630      	mov	r0, r6
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
 800b3c2:	220c      	movs	r2, #12
 800b3c4:	2600      	movs	r6, #0
 800b3c6:	6002      	str	r2, [r0, #0]
 800b3c8:	e7f9      	b.n	800b3be <_calloc_r+0x12>
 800b3ca:	462a      	mov	r2, r5
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	f7fe fa6a 	bl	80098a6 <memset>
 800b3d2:	e7f4      	b.n	800b3be <_calloc_r+0x12>

0800b3d4 <malloc>:
 800b3d4:	4b02      	ldr	r3, [pc, #8]	@ (800b3e0 <malloc+0xc>)
 800b3d6:	4601      	mov	r1, r0
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	f7fe beb7 	b.w	800a14c <_malloc_r>
 800b3de:	bf00      	nop
 800b3e0:	200002f8 	.word	0x200002f8

0800b3e4 <_realloc_r>:
 800b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	4614      	mov	r4, r2
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	b921      	cbnz	r1, 800b3fa <_realloc_r+0x16>
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f6:	f7fe bea9 	b.w	800a14c <_malloc_r>
 800b3fa:	b92a      	cbnz	r2, 800b408 <_realloc_r+0x24>
 800b3fc:	f7fe fb02 	bl	8009a04 <_free_r>
 800b400:	4625      	mov	r5, r4
 800b402:	4628      	mov	r0, r5
 800b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b408:	f000 f833 	bl	800b472 <_malloc_usable_size_r>
 800b40c:	4284      	cmp	r4, r0
 800b40e:	4606      	mov	r6, r0
 800b410:	d802      	bhi.n	800b418 <_realloc_r+0x34>
 800b412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b416:	d8f4      	bhi.n	800b402 <_realloc_r+0x1e>
 800b418:	4621      	mov	r1, r4
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7fe fe96 	bl	800a14c <_malloc_r>
 800b420:	4680      	mov	r8, r0
 800b422:	b908      	cbnz	r0, 800b428 <_realloc_r+0x44>
 800b424:	4645      	mov	r5, r8
 800b426:	e7ec      	b.n	800b402 <_realloc_r+0x1e>
 800b428:	42b4      	cmp	r4, r6
 800b42a:	4622      	mov	r2, r4
 800b42c:	4629      	mov	r1, r5
 800b42e:	bf28      	it	cs
 800b430:	4632      	movcs	r2, r6
 800b432:	f7fe fad2 	bl	80099da <memcpy>
 800b436:	4629      	mov	r1, r5
 800b438:	4638      	mov	r0, r7
 800b43a:	f7fe fae3 	bl	8009a04 <_free_r>
 800b43e:	e7f1      	b.n	800b424 <_realloc_r+0x40>

0800b440 <fiprintf>:
 800b440:	b40e      	push	{r1, r2, r3}
 800b442:	b503      	push	{r0, r1, lr}
 800b444:	4601      	mov	r1, r0
 800b446:	ab03      	add	r3, sp, #12
 800b448:	4805      	ldr	r0, [pc, #20]	@ (800b460 <fiprintf+0x20>)
 800b44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44e:	6800      	ldr	r0, [r0, #0]
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	f000 f83d 	bl	800b4d0 <_vfiprintf_r>
 800b456:	b002      	add	sp, #8
 800b458:	f85d eb04 	ldr.w	lr, [sp], #4
 800b45c:	b003      	add	sp, #12
 800b45e:	4770      	bx	lr
 800b460:	200002f8 	.word	0x200002f8

0800b464 <abort>:
 800b464:	2006      	movs	r0, #6
 800b466:	b508      	push	{r3, lr}
 800b468:	f000 fa06 	bl	800b878 <raise>
 800b46c:	2001      	movs	r0, #1
 800b46e:	f7f6 f906 	bl	800167e <_exit>

0800b472 <_malloc_usable_size_r>:
 800b472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b476:	1f18      	subs	r0, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bfbc      	itt	lt
 800b47c:	580b      	ldrlt	r3, [r1, r0]
 800b47e:	18c0      	addlt	r0, r0, r3
 800b480:	4770      	bx	lr

0800b482 <__sfputc_r>:
 800b482:	6893      	ldr	r3, [r2, #8]
 800b484:	b410      	push	{r4}
 800b486:	3b01      	subs	r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	6093      	str	r3, [r2, #8]
 800b48c:	da07      	bge.n	800b49e <__sfputc_r+0x1c>
 800b48e:	6994      	ldr	r4, [r2, #24]
 800b490:	42a3      	cmp	r3, r4
 800b492:	db01      	blt.n	800b498 <__sfputc_r+0x16>
 800b494:	290a      	cmp	r1, #10
 800b496:	d102      	bne.n	800b49e <__sfputc_r+0x1c>
 800b498:	bc10      	pop	{r4}
 800b49a:	f000 b931 	b.w	800b700 <__swbuf_r>
 800b49e:	6813      	ldr	r3, [r2, #0]
 800b4a0:	1c58      	adds	r0, r3, #1
 800b4a2:	6010      	str	r0, [r2, #0]
 800b4a4:	7019      	strb	r1, [r3, #0]
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	bc10      	pop	{r4}
 800b4aa:	4770      	bx	lr

0800b4ac <__sfputs_r>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	4614      	mov	r4, r2
 800b4b4:	18d5      	adds	r5, r2, r3
 800b4b6:	42ac      	cmp	r4, r5
 800b4b8:	d101      	bne.n	800b4be <__sfputs_r+0x12>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e007      	b.n	800b4ce <__sfputs_r+0x22>
 800b4be:	463a      	mov	r2, r7
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c6:	f7ff ffdc 	bl	800b482 <__sfputc_r>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	d1f3      	bne.n	800b4b6 <__sfputs_r+0xa>
 800b4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4d0 <_vfiprintf_r>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	4698      	mov	r8, r3
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b09d      	sub	sp, #116	@ 0x74
 800b4de:	b118      	cbz	r0, 800b4e8 <_vfiprintf_r+0x18>
 800b4e0:	6a03      	ldr	r3, [r0, #32]
 800b4e2:	b90b      	cbnz	r3, 800b4e8 <_vfiprintf_r+0x18>
 800b4e4:	f7fe f944 	bl	8009770 <__sinit>
 800b4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ea:	07d9      	lsls	r1, r3, #31
 800b4ec:	d405      	bmi.n	800b4fa <_vfiprintf_r+0x2a>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	059a      	lsls	r2, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <_vfiprintf_r+0x2a>
 800b4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4f6:	f7fe fa6e 	bl	80099d6 <__retarget_lock_acquire_recursive>
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	071b      	lsls	r3, r3, #28
 800b4fe:	d501      	bpl.n	800b504 <_vfiprintf_r+0x34>
 800b500:	692b      	ldr	r3, [r5, #16]
 800b502:	b99b      	cbnz	r3, 800b52c <_vfiprintf_r+0x5c>
 800b504:	4629      	mov	r1, r5
 800b506:	4630      	mov	r0, r6
 800b508:	f000 f938 	bl	800b77c <__swsetup_r>
 800b50c:	b170      	cbz	r0, 800b52c <_vfiprintf_r+0x5c>
 800b50e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b510:	07dc      	lsls	r4, r3, #31
 800b512:	d504      	bpl.n	800b51e <_vfiprintf_r+0x4e>
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	b01d      	add	sp, #116	@ 0x74
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	0598      	lsls	r0, r3, #22
 800b522:	d4f7      	bmi.n	800b514 <_vfiprintf_r+0x44>
 800b524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b526:	f7fe fa57 	bl	80099d8 <__retarget_lock_release_recursive>
 800b52a:	e7f3      	b.n	800b514 <_vfiprintf_r+0x44>
 800b52c:	2300      	movs	r3, #0
 800b52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b530:	2320      	movs	r3, #32
 800b532:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b536:	2330      	movs	r3, #48	@ 0x30
 800b538:	f04f 0901 	mov.w	r9, #1
 800b53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b540:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b6ec <_vfiprintf_r+0x21c>
 800b544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b548:	4623      	mov	r3, r4
 800b54a:	469a      	mov	sl, r3
 800b54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b550:	b10a      	cbz	r2, 800b556 <_vfiprintf_r+0x86>
 800b552:	2a25      	cmp	r2, #37	@ 0x25
 800b554:	d1f9      	bne.n	800b54a <_vfiprintf_r+0x7a>
 800b556:	ebba 0b04 	subs.w	fp, sl, r4
 800b55a:	d00b      	beq.n	800b574 <_vfiprintf_r+0xa4>
 800b55c:	465b      	mov	r3, fp
 800b55e:	4622      	mov	r2, r4
 800b560:	4629      	mov	r1, r5
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ffa2 	bl	800b4ac <__sfputs_r>
 800b568:	3001      	adds	r0, #1
 800b56a:	f000 80a7 	beq.w	800b6bc <_vfiprintf_r+0x1ec>
 800b56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b570:	445a      	add	r2, fp
 800b572:	9209      	str	r2, [sp, #36]	@ 0x24
 800b574:	f89a 3000 	ldrb.w	r3, [sl]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 809f 	beq.w	800b6bc <_vfiprintf_r+0x1ec>
 800b57e:	2300      	movs	r3, #0
 800b580:	f04f 32ff 	mov.w	r2, #4294967295
 800b584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b588:	f10a 0a01 	add.w	sl, sl, #1
 800b58c:	9304      	str	r3, [sp, #16]
 800b58e:	9307      	str	r3, [sp, #28]
 800b590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b594:	931a      	str	r3, [sp, #104]	@ 0x68
 800b596:	4654      	mov	r4, sl
 800b598:	2205      	movs	r2, #5
 800b59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59e:	4853      	ldr	r0, [pc, #332]	@ (800b6ec <_vfiprintf_r+0x21c>)
 800b5a0:	f7ff fed8 	bl	800b354 <memchr>
 800b5a4:	9a04      	ldr	r2, [sp, #16]
 800b5a6:	b9d8      	cbnz	r0, 800b5e0 <_vfiprintf_r+0x110>
 800b5a8:	06d1      	lsls	r1, r2, #27
 800b5aa:	bf44      	itt	mi
 800b5ac:	2320      	movmi	r3, #32
 800b5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b2:	0713      	lsls	r3, r2, #28
 800b5b4:	bf44      	itt	mi
 800b5b6:	232b      	movmi	r3, #43	@ 0x2b
 800b5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5c2:	d015      	beq.n	800b5f0 <_vfiprintf_r+0x120>
 800b5c4:	4654      	mov	r4, sl
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	f04f 0c0a 	mov.w	ip, #10
 800b5cc:	9a07      	ldr	r2, [sp, #28]
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d4:	3b30      	subs	r3, #48	@ 0x30
 800b5d6:	2b09      	cmp	r3, #9
 800b5d8:	d94b      	bls.n	800b672 <_vfiprintf_r+0x1a2>
 800b5da:	b1b0      	cbz	r0, 800b60a <_vfiprintf_r+0x13a>
 800b5dc:	9207      	str	r2, [sp, #28]
 800b5de:	e014      	b.n	800b60a <_vfiprintf_r+0x13a>
 800b5e0:	eba0 0308 	sub.w	r3, r0, r8
 800b5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	46a2      	mov	sl, r4
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	e7d2      	b.n	800b596 <_vfiprintf_r+0xc6>
 800b5f0:	9b03      	ldr	r3, [sp, #12]
 800b5f2:	1d19      	adds	r1, r3, #4
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	9103      	str	r1, [sp, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	bfbb      	ittet	lt
 800b5fc:	425b      	neglt	r3, r3
 800b5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b602:	9307      	strge	r3, [sp, #28]
 800b604:	9307      	strlt	r3, [sp, #28]
 800b606:	bfb8      	it	lt
 800b608:	9204      	strlt	r2, [sp, #16]
 800b60a:	7823      	ldrb	r3, [r4, #0]
 800b60c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b60e:	d10a      	bne.n	800b626 <_vfiprintf_r+0x156>
 800b610:	7863      	ldrb	r3, [r4, #1]
 800b612:	2b2a      	cmp	r3, #42	@ 0x2a
 800b614:	d132      	bne.n	800b67c <_vfiprintf_r+0x1ac>
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	3402      	adds	r4, #2
 800b61a:	1d1a      	adds	r2, r3, #4
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	9203      	str	r2, [sp, #12]
 800b620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b624:	9305      	str	r3, [sp, #20]
 800b626:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b6f0 <_vfiprintf_r+0x220>
 800b62a:	2203      	movs	r2, #3
 800b62c:	4650      	mov	r0, sl
 800b62e:	7821      	ldrb	r1, [r4, #0]
 800b630:	f7ff fe90 	bl	800b354 <memchr>
 800b634:	b138      	cbz	r0, 800b646 <_vfiprintf_r+0x176>
 800b636:	2240      	movs	r2, #64	@ 0x40
 800b638:	9b04      	ldr	r3, [sp, #16]
 800b63a:	eba0 000a 	sub.w	r0, r0, sl
 800b63e:	4082      	lsls	r2, r0
 800b640:	4313      	orrs	r3, r2
 800b642:	3401      	adds	r4, #1
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64a:	2206      	movs	r2, #6
 800b64c:	4829      	ldr	r0, [pc, #164]	@ (800b6f4 <_vfiprintf_r+0x224>)
 800b64e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b652:	f7ff fe7f 	bl	800b354 <memchr>
 800b656:	2800      	cmp	r0, #0
 800b658:	d03f      	beq.n	800b6da <_vfiprintf_r+0x20a>
 800b65a:	4b27      	ldr	r3, [pc, #156]	@ (800b6f8 <_vfiprintf_r+0x228>)
 800b65c:	bb1b      	cbnz	r3, 800b6a6 <_vfiprintf_r+0x1d6>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	f023 0307 	bic.w	r3, r3, #7
 800b666:	3308      	adds	r3, #8
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b66c:	443b      	add	r3, r7
 800b66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b670:	e76a      	b.n	800b548 <_vfiprintf_r+0x78>
 800b672:	460c      	mov	r4, r1
 800b674:	2001      	movs	r0, #1
 800b676:	fb0c 3202 	mla	r2, ip, r2, r3
 800b67a:	e7a8      	b.n	800b5ce <_vfiprintf_r+0xfe>
 800b67c:	2300      	movs	r3, #0
 800b67e:	f04f 0c0a 	mov.w	ip, #10
 800b682:	4619      	mov	r1, r3
 800b684:	3401      	adds	r4, #1
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	4620      	mov	r0, r4
 800b68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b68e:	3a30      	subs	r2, #48	@ 0x30
 800b690:	2a09      	cmp	r2, #9
 800b692:	d903      	bls.n	800b69c <_vfiprintf_r+0x1cc>
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0c6      	beq.n	800b626 <_vfiprintf_r+0x156>
 800b698:	9105      	str	r1, [sp, #20]
 800b69a:	e7c4      	b.n	800b626 <_vfiprintf_r+0x156>
 800b69c:	4604      	mov	r4, r0
 800b69e:	2301      	movs	r3, #1
 800b6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a4:	e7f0      	b.n	800b688 <_vfiprintf_r+0x1b8>
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	462a      	mov	r2, r5
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4b13      	ldr	r3, [pc, #76]	@ (800b6fc <_vfiprintf_r+0x22c>)
 800b6b0:	a904      	add	r1, sp, #16
 800b6b2:	f3af 8000 	nop.w
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	1c78      	adds	r0, r7, #1
 800b6ba:	d1d6      	bne.n	800b66a <_vfiprintf_r+0x19a>
 800b6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6be:	07d9      	lsls	r1, r3, #31
 800b6c0:	d405      	bmi.n	800b6ce <_vfiprintf_r+0x1fe>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	059a      	lsls	r2, r3, #22
 800b6c6:	d402      	bmi.n	800b6ce <_vfiprintf_r+0x1fe>
 800b6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6ca:	f7fe f985 	bl	80099d8 <__retarget_lock_release_recursive>
 800b6ce:	89ab      	ldrh	r3, [r5, #12]
 800b6d0:	065b      	lsls	r3, r3, #25
 800b6d2:	f53f af1f 	bmi.w	800b514 <_vfiprintf_r+0x44>
 800b6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6d8:	e71e      	b.n	800b518 <_vfiprintf_r+0x48>
 800b6da:	ab03      	add	r3, sp, #12
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4b06      	ldr	r3, [pc, #24]	@ (800b6fc <_vfiprintf_r+0x22c>)
 800b6e4:	a904      	add	r1, sp, #16
 800b6e6:	f7ff fc45 	bl	800af74 <_printf_i>
 800b6ea:	e7e4      	b.n	800b6b6 <_vfiprintf_r+0x1e6>
 800b6ec:	0800bcbd 	.word	0x0800bcbd
 800b6f0:	0800bcc3 	.word	0x0800bcc3
 800b6f4:	0800bcc7 	.word	0x0800bcc7
 800b6f8:	00000000 	.word	0x00000000
 800b6fc:	0800b4ad 	.word	0x0800b4ad

0800b700 <__swbuf_r>:
 800b700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b702:	460e      	mov	r6, r1
 800b704:	4614      	mov	r4, r2
 800b706:	4605      	mov	r5, r0
 800b708:	b118      	cbz	r0, 800b712 <__swbuf_r+0x12>
 800b70a:	6a03      	ldr	r3, [r0, #32]
 800b70c:	b90b      	cbnz	r3, 800b712 <__swbuf_r+0x12>
 800b70e:	f7fe f82f 	bl	8009770 <__sinit>
 800b712:	69a3      	ldr	r3, [r4, #24]
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	071a      	lsls	r2, r3, #28
 800b71a:	d501      	bpl.n	800b720 <__swbuf_r+0x20>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	b943      	cbnz	r3, 800b732 <__swbuf_r+0x32>
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f82a 	bl	800b77c <__swsetup_r>
 800b728:	b118      	cbz	r0, 800b732 <__swbuf_r+0x32>
 800b72a:	f04f 37ff 	mov.w	r7, #4294967295
 800b72e:	4638      	mov	r0, r7
 800b730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	6922      	ldr	r2, [r4, #16]
 800b736:	b2f6      	uxtb	r6, r6
 800b738:	1a98      	subs	r0, r3, r2
 800b73a:	6963      	ldr	r3, [r4, #20]
 800b73c:	4637      	mov	r7, r6
 800b73e:	4283      	cmp	r3, r0
 800b740:	dc05      	bgt.n	800b74e <__swbuf_r+0x4e>
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f7ff fdb3 	bl	800b2b0 <_fflush_r>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d1ed      	bne.n	800b72a <__swbuf_r+0x2a>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	3b01      	subs	r3, #1
 800b752:	60a3      	str	r3, [r4, #8]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	6022      	str	r2, [r4, #0]
 800b75a:	701e      	strb	r6, [r3, #0]
 800b75c:	6962      	ldr	r2, [r4, #20]
 800b75e:	1c43      	adds	r3, r0, #1
 800b760:	429a      	cmp	r2, r3
 800b762:	d004      	beq.n	800b76e <__swbuf_r+0x6e>
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	07db      	lsls	r3, r3, #31
 800b768:	d5e1      	bpl.n	800b72e <__swbuf_r+0x2e>
 800b76a:	2e0a      	cmp	r6, #10
 800b76c:	d1df      	bne.n	800b72e <__swbuf_r+0x2e>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff fd9d 	bl	800b2b0 <_fflush_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d0d9      	beq.n	800b72e <__swbuf_r+0x2e>
 800b77a:	e7d6      	b.n	800b72a <__swbuf_r+0x2a>

0800b77c <__swsetup_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4b29      	ldr	r3, [pc, #164]	@ (800b824 <__swsetup_r+0xa8>)
 800b780:	4605      	mov	r5, r0
 800b782:	6818      	ldr	r0, [r3, #0]
 800b784:	460c      	mov	r4, r1
 800b786:	b118      	cbz	r0, 800b790 <__swsetup_r+0x14>
 800b788:	6a03      	ldr	r3, [r0, #32]
 800b78a:	b90b      	cbnz	r3, 800b790 <__swsetup_r+0x14>
 800b78c:	f7fd fff0 	bl	8009770 <__sinit>
 800b790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b794:	0719      	lsls	r1, r3, #28
 800b796:	d422      	bmi.n	800b7de <__swsetup_r+0x62>
 800b798:	06da      	lsls	r2, r3, #27
 800b79a:	d407      	bmi.n	800b7ac <__swsetup_r+0x30>
 800b79c:	2209      	movs	r2, #9
 800b79e:	602a      	str	r2, [r5, #0]
 800b7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	e033      	b.n	800b814 <__swsetup_r+0x98>
 800b7ac:	0758      	lsls	r0, r3, #29
 800b7ae:	d512      	bpl.n	800b7d6 <__swsetup_r+0x5a>
 800b7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7b2:	b141      	cbz	r1, 800b7c6 <__swsetup_r+0x4a>
 800b7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	d002      	beq.n	800b7c2 <__swsetup_r+0x46>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f7fe f921 	bl	8009a04 <_free_r>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6063      	str	r3, [r4, #4]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0308 	orr.w	r3, r3, #8
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	b94b      	cbnz	r3, 800b7f6 <__swsetup_r+0x7a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7ec:	d003      	beq.n	800b7f6 <__swsetup_r+0x7a>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 f882 	bl	800b8fa <__smakebuf_r>
 800b7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fa:	f013 0201 	ands.w	r2, r3, #1
 800b7fe:	d00a      	beq.n	800b816 <__swsetup_r+0x9a>
 800b800:	2200      	movs	r2, #0
 800b802:	60a2      	str	r2, [r4, #8]
 800b804:	6962      	ldr	r2, [r4, #20]
 800b806:	4252      	negs	r2, r2
 800b808:	61a2      	str	r2, [r4, #24]
 800b80a:	6922      	ldr	r2, [r4, #16]
 800b80c:	b942      	cbnz	r2, 800b820 <__swsetup_r+0xa4>
 800b80e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b812:	d1c5      	bne.n	800b7a0 <__swsetup_r+0x24>
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	0799      	lsls	r1, r3, #30
 800b818:	bf58      	it	pl
 800b81a:	6962      	ldrpl	r2, [r4, #20]
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	e7f4      	b.n	800b80a <__swsetup_r+0x8e>
 800b820:	2000      	movs	r0, #0
 800b822:	e7f7      	b.n	800b814 <__swsetup_r+0x98>
 800b824:	200002f8 	.word	0x200002f8

0800b828 <_raise_r>:
 800b828:	291f      	cmp	r1, #31
 800b82a:	b538      	push	{r3, r4, r5, lr}
 800b82c:	4605      	mov	r5, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	d904      	bls.n	800b83c <_raise_r+0x14>
 800b832:	2316      	movs	r3, #22
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	f04f 30ff 	mov.w	r0, #4294967295
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b83e:	b112      	cbz	r2, 800b846 <_raise_r+0x1e>
 800b840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b844:	b94b      	cbnz	r3, 800b85a <_raise_r+0x32>
 800b846:	4628      	mov	r0, r5
 800b848:	f000 f830 	bl	800b8ac <_getpid_r>
 800b84c:	4622      	mov	r2, r4
 800b84e:	4601      	mov	r1, r0
 800b850:	4628      	mov	r0, r5
 800b852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b856:	f000 b817 	b.w	800b888 <_kill_r>
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d00a      	beq.n	800b874 <_raise_r+0x4c>
 800b85e:	1c59      	adds	r1, r3, #1
 800b860:	d103      	bne.n	800b86a <_raise_r+0x42>
 800b862:	2316      	movs	r3, #22
 800b864:	6003      	str	r3, [r0, #0]
 800b866:	2001      	movs	r0, #1
 800b868:	e7e7      	b.n	800b83a <_raise_r+0x12>
 800b86a:	2100      	movs	r1, #0
 800b86c:	4620      	mov	r0, r4
 800b86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b872:	4798      	blx	r3
 800b874:	2000      	movs	r0, #0
 800b876:	e7e0      	b.n	800b83a <_raise_r+0x12>

0800b878 <raise>:
 800b878:	4b02      	ldr	r3, [pc, #8]	@ (800b884 <raise+0xc>)
 800b87a:	4601      	mov	r1, r0
 800b87c:	6818      	ldr	r0, [r3, #0]
 800b87e:	f7ff bfd3 	b.w	800b828 <_raise_r>
 800b882:	bf00      	nop
 800b884:	200002f8 	.word	0x200002f8

0800b888 <_kill_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	2300      	movs	r3, #0
 800b88c:	4d06      	ldr	r5, [pc, #24]	@ (800b8a8 <_kill_r+0x20>)
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f5 fee2 	bl	800165e <_kill>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_kill_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_kill_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200016e4 	.word	0x200016e4

0800b8ac <_getpid_r>:
 800b8ac:	f7f5 bed0 	b.w	8001650 <_getpid>

0800b8b0 <__swhatbuf_r>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	4615      	mov	r5, r2
 800b8ba:	2900      	cmp	r1, #0
 800b8bc:	461e      	mov	r6, r3
 800b8be:	b096      	sub	sp, #88	@ 0x58
 800b8c0:	da0c      	bge.n	800b8dc <__swhatbuf_r+0x2c>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8ca:	bf14      	ite	ne
 800b8cc:	2340      	movne	r3, #64	@ 0x40
 800b8ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	6031      	str	r1, [r6, #0]
 800b8d6:	602b      	str	r3, [r5, #0]
 800b8d8:	b016      	add	sp, #88	@ 0x58
 800b8da:	bd70      	pop	{r4, r5, r6, pc}
 800b8dc:	466a      	mov	r2, sp
 800b8de:	f000 f849 	bl	800b974 <_fstat_r>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	dbed      	blt.n	800b8c2 <__swhatbuf_r+0x12>
 800b8e6:	9901      	ldr	r1, [sp, #4]
 800b8e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8f0:	4259      	negs	r1, r3
 800b8f2:	4159      	adcs	r1, r3
 800b8f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8f8:	e7eb      	b.n	800b8d2 <__swhatbuf_r+0x22>

0800b8fa <__smakebuf_r>:
 800b8fa:	898b      	ldrh	r3, [r1, #12]
 800b8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8fe:	079d      	lsls	r5, r3, #30
 800b900:	4606      	mov	r6, r0
 800b902:	460c      	mov	r4, r1
 800b904:	d507      	bpl.n	800b916 <__smakebuf_r+0x1c>
 800b906:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	2301      	movs	r3, #1
 800b910:	6163      	str	r3, [r4, #20]
 800b912:	b003      	add	sp, #12
 800b914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b916:	466a      	mov	r2, sp
 800b918:	ab01      	add	r3, sp, #4
 800b91a:	f7ff ffc9 	bl	800b8b0 <__swhatbuf_r>
 800b91e:	9f00      	ldr	r7, [sp, #0]
 800b920:	4605      	mov	r5, r0
 800b922:	4639      	mov	r1, r7
 800b924:	4630      	mov	r0, r6
 800b926:	f7fe fc11 	bl	800a14c <_malloc_r>
 800b92a:	b948      	cbnz	r0, 800b940 <__smakebuf_r+0x46>
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d4ee      	bmi.n	800b912 <__smakebuf_r+0x18>
 800b934:	f023 0303 	bic.w	r3, r3, #3
 800b938:	f043 0302 	orr.w	r3, r3, #2
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	e7e2      	b.n	800b906 <__smakebuf_r+0xc>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	b15b      	cbz	r3, 800b96a <__smakebuf_r+0x70>
 800b952:	4630      	mov	r0, r6
 800b954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b958:	f000 f81e 	bl	800b998 <_isatty_r>
 800b95c:	b128      	cbz	r0, 800b96a <__smakebuf_r+0x70>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f023 0303 	bic.w	r3, r3, #3
 800b964:	f043 0301 	orr.w	r3, r3, #1
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	431d      	orrs	r5, r3
 800b96e:	81a5      	strh	r5, [r4, #12]
 800b970:	e7cf      	b.n	800b912 <__smakebuf_r+0x18>
	...

0800b974 <_fstat_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	2300      	movs	r3, #0
 800b978:	4d06      	ldr	r5, [pc, #24]	@ (800b994 <_fstat_r+0x20>)
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	4611      	mov	r1, r2
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f7f5 fecb 	bl	800171c <_fstat>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d102      	bne.n	800b990 <_fstat_r+0x1c>
 800b98a:	682b      	ldr	r3, [r5, #0]
 800b98c:	b103      	cbz	r3, 800b990 <_fstat_r+0x1c>
 800b98e:	6023      	str	r3, [r4, #0]
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	200016e4 	.word	0x200016e4

0800b998 <_isatty_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	2300      	movs	r3, #0
 800b99c:	4d05      	ldr	r5, [pc, #20]	@ (800b9b4 <_isatty_r+0x1c>)
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	602b      	str	r3, [r5, #0]
 800b9a4:	f7f5 fec9 	bl	800173a <_isatty>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	d102      	bne.n	800b9b2 <_isatty_r+0x1a>
 800b9ac:	682b      	ldr	r3, [r5, #0]
 800b9ae:	b103      	cbz	r3, 800b9b2 <_isatty_r+0x1a>
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	bd38      	pop	{r3, r4, r5, pc}
 800b9b4:	200016e4 	.word	0x200016e4

0800b9b8 <_init>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	bf00      	nop
 800b9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9be:	bc08      	pop	{r3}
 800b9c0:	469e      	mov	lr, r3
 800b9c2:	4770      	bx	lr

0800b9c4 <_fini>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr
