
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800c4c0  0800c4c0  0000d4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc84  0800cc84  0000e348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc84  0800cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc8c  0800cc8c  0000e348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800cc94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000348  0800cfdc  0000e348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016f4  0800cfdc  0000e6f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d978  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbf  00000000  00000000  0001bce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  0001f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a63a  00000000  00000000  0001ff19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faf2  00000000  00000000  0003a553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893bc  00000000  00000000  0004a045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3401  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000d3444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d7594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c4a8 	.word	0x0800c4a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800c4a8 	.word	0x0800c4a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_fcmpun>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_fcmpun+0x14>
 8000fb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fba:	d108      	bne.n	8000fce <__aeabi_fcmpun+0x26>
 8000fbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fc0:	d102      	bne.n	8000fc8 <__aeabi_fcmpun+0x20>
 8000fc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fc6:	d102      	bne.n	8000fce <__aeabi_fcmpun+0x26>
 8000fc8:	f04f 0000 	mov.w	r0, #0
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0001 	mov.w	r0, #1
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_f2iz>:
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fdc:	d30f      	bcc.n	8000ffe <__aeabi_f2iz+0x2a>
 8000fde:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fe2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fe6:	d90d      	bls.n	8001004 <__aeabi_f2iz+0x30>
 8000fe8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	bf18      	it	ne
 8000ffa:	4240      	negne	r0, r0
 8000ffc:	4770      	bx	lr
 8000ffe:	f04f 0000 	mov.w	r0, #0
 8001002:	4770      	bx	lr
 8001004:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001008:	d101      	bne.n	800100e <__aeabi_f2iz+0x3a>
 800100a:	0242      	lsls	r2, r0, #9
 800100c:	d105      	bne.n	800101a <__aeabi_f2iz+0x46>
 800100e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001012:	bf08      	it	eq
 8001014:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001018:	4770      	bx	lr
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	4770      	bx	lr

08001020 <__aeabi_d2lz>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	2200      	movs	r2, #0
 8001024:	2300      	movs	r3, #0
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	f7ff fcc7 	bl	80009bc <__aeabi_dcmplt>
 800102e:	b928      	cbnz	r0, 800103c <__aeabi_d2lz+0x1c>
 8001030:	4620      	mov	r0, r4
 8001032:	4629      	mov	r1, r5
 8001034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001038:	f000 b80a 	b.w	8001050 <__aeabi_d2ulz>
 800103c:	4620      	mov	r0, r4
 800103e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001042:	f000 f805 	bl	8001050 <__aeabi_d2ulz>
 8001046:	4240      	negs	r0, r0
 8001048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800104c:	bd38      	pop	{r3, r4, r5, pc}
 800104e:	bf00      	nop

08001050 <__aeabi_d2ulz>:
 8001050:	b5d0      	push	{r4, r6, r7, lr}
 8001052:	2200      	movs	r2, #0
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <__aeabi_d2ulz+0x34>)
 8001056:	4606      	mov	r6, r0
 8001058:	460f      	mov	r7, r1
 800105a:	f7ff fa3d 	bl	80004d8 <__aeabi_dmul>
 800105e:	f7ff fcd5 	bl	8000a0c <__aeabi_d2uiz>
 8001062:	4604      	mov	r4, r0
 8001064:	f7ff f9be 	bl	80003e4 <__aeabi_ui2d>
 8001068:	2200      	movs	r2, #0
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <__aeabi_d2ulz+0x38>)
 800106c:	f7ff fa34 	bl	80004d8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4630      	mov	r0, r6
 8001076:	4639      	mov	r1, r7
 8001078:	f7ff f876 	bl	8000168 <__aeabi_dsub>
 800107c:	f7ff fcc6 	bl	8000a0c <__aeabi_d2uiz>
 8001080:	4621      	mov	r1, r4
 8001082:	bdd0      	pop	{r4, r6, r7, pc}
 8001084:	3df00000 	.word	0x3df00000
 8001088:	41f00000 	.word	0x41f00000

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
  HAL_Init();
 8001092:	f001 f941 	bl	8002318 <HAL_Init>
  SystemClock_Config();
 8001096:	f000 f81d 	bl	80010d4 <SystemClock_Config>
  MX_GPIO_Init();
 800109a:	f000 f877 	bl	800118c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 800109e:	f007 fd79 	bl	8008b94 <MX_USB_DEVICE_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 80010a2:	f000 fd19 	bl	8001ad8 <setup>

  // Envío inicial
  uint8_t mensaje[] = "G-code listo\r\n";
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <main+0x44>)
 80010a8:	463c      	mov	r4, r7
 80010aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ac:	c407      	stmia	r4!, {r0, r1, r2}
 80010ae:	8023      	strh	r3, [r4, #0]
 80010b0:	3402      	adds	r4, #2
 80010b2:	0c1b      	lsrs	r3, r3, #16
 80010b4:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(mensaje, sizeof(mensaje) - 1);
 80010b6:	463b      	mov	r3, r7
 80010b8:	210e      	movs	r1, #14
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fe5c 	bl	8008d78 <CDC_Transmit_FS>

  while (1)
  {
    // Equivalente al loop() de Arduino
    loop();
 80010c0:	f000 fc40 	bl	8001944 <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 80010c4:	2032      	movs	r0, #50	@ 0x32
 80010c6:	f001 f989 	bl	80023dc <HAL_Delay>
    loop();
 80010ca:	bf00      	nop
 80010cc:	e7f8      	b.n	80010c0 <main+0x34>
 80010ce:	bf00      	nop
 80010d0:	0800c4c0 	.word	0x0800c4c0

080010d4 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010de:	2228      	movs	r2, #40	@ 0x28
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f009 f957 	bl	800a396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001120:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f99c 	bl	8004468 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001136:	f000 ff93 	bl	8002060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800114a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f003 fc08 	bl	800496c <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001162:	f000 ff7d 	bl	8002060 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001166:	2310      	movs	r3, #16
 8001168:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800116a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800116e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fd56 	bl	8004c24 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800117e:	f000 ff6f 	bl	8002060 <Error_Handler>
  }
}
 8001182:	bf00      	nop
 8001184:	3750      	adds	r7, #80	@ 0x50
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <MX_GPIO_Init+0xd4>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 80011e8:	2200      	movs	r2, #0
 80011ea:	f240 31d9 	movw	r1, #985	@ 0x3d9
 80011ee:	481d      	ldr	r0, [pc, #116]	@ (8001264 <MX_GPIO_Init+0xd8>)
 80011f0:	f001 fbc1 	bl	8002976 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80011fa:	481b      	ldr	r0, [pc, #108]	@ (8001268 <MX_GPIO_Init+0xdc>)
 80011fc:	f001 fbbb 	bl	8002976 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8001200:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8001204:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	4812      	ldr	r0, [pc, #72]	@ (8001264 <MX_GPIO_Init+0xd8>)
 800121a:	f001 fa11 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800121e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	@ (8001264 <MX_GPIO_Init+0xd8>)
 8001234:	f001 fa04 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001238:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2302      	movs	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_GPIO_Init+0xdc>)
 8001252:	f001 f9f5 	bl	8002640 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40010800 	.word	0x40010800

0800126c <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <delay_us+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <delay_us+0x44>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9a      	lsrs	r2, r3, #18
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <delay_us+0x48>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800128e:	bf00      	nop
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <delay_us+0x48>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f8      	bhi.n	8001290 <delay_us+0x24>
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000004 	.word	0x20000004
 80012b0:	431bde83 	.word	0x431bde83
 80012b4:	e0001000 	.word	0xe0001000

080012b8 <X_stepOnce>:

void X_stepOnce(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2140      	movs	r1, #64	@ 0x40
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <X_stepOnce+0x24>)
 80012c2:	f001 fb58 	bl	8002976 <HAL_GPIO_WritePin>
    delay_us(2);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f7ff ffd0 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	@ 0x40
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <X_stepOnce+0x24>)
 80012d2:	f001 fb50 	bl	8002976 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <Y_stepOnce>:

void Y_stepOnce(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ea:	4807      	ldr	r0, [pc, #28]	@ (8001308 <Y_stepOnce+0x28>)
 80012ec:	f001 fb43 	bl	8002976 <HAL_GPIO_WritePin>
    delay_us(2);
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff ffbb 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <Y_stepOnce+0x28>)
 80012fe:	f001 fb3a 	bl	8002976 <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010c00 	.word	0x40010c00

0800130c <Z_stepOnce>:

void Z_stepOnce(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001316:	4807      	ldr	r0, [pc, #28]	@ (8001334 <Z_stepOnce+0x28>)
 8001318:	f001 fb2d 	bl	8002976 <HAL_GPIO_WritePin>
    delay_us(2);
 800131c:	2002      	movs	r0, #2
 800131e:	f7ff ffa5 	bl	800126c <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <Z_stepOnce+0x28>)
 800132a:	f001 fb24 	bl	8002976 <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010800 	.word	0x40010800

08001338 <X_move>:

void X_move(int32_t steps, bool dir) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	461a      	mov	r2, r3
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <X_move+0x88>)
 800134c:	f001 fb13 	bl	8002976 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <X_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	2101      	movs	r1, #1
 800135a:	4819      	ldr	r0, [pc, #100]	@ (80013c0 <X_move+0x88>)
 800135c:	f001 fb0b 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2102      	movs	r1, #2
 8001364:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <X_move+0x88>)
 8001366:	f001 fb06 	bl	8002976 <HAL_GPIO_WritePin>
 800136a:	e009      	b.n	8001380 <X_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2101      	movs	r1, #1
 8001370:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <X_move+0x88>)
 8001372:	f001 fb00 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <X_move+0x88>)
 800137c:	f001 fafb 	bl	8002976 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e009      	b.n	800139a <X_move+0x62>
        X_stepOnce();
 8001386:	f7ff ff97 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 800138a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff6c 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dbf1      	blt.n	8001386 <X_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2101      	movs	r1, #1
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <X_move+0x88>)
 80013a8:	f001 fae5 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <X_move+0x88>)
 80013b2:	f001 fae0 	bl	8002976 <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40010c00 	.word	0x40010c00

080013c4 <Y_move>:

void Y_move(int32_t steps, bool dir) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2108      	movs	r1, #8
 80013d6:	481d      	ldr	r0, [pc, #116]	@ (800144c <Y_move+0x88>)
 80013d8:	f001 facd 	bl	8002976 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <Y_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2101      	movs	r1, #1
 80013e6:	4819      	ldr	r0, [pc, #100]	@ (800144c <Y_move+0x88>)
 80013e8:	f001 fac5 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	4816      	ldr	r0, [pc, #88]	@ (800144c <Y_move+0x88>)
 80013f2:	f001 fac0 	bl	8002976 <HAL_GPIO_WritePin>
 80013f6:	e009      	b.n	800140c <Y_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2101      	movs	r1, #1
 80013fc:	4813      	ldr	r0, [pc, #76]	@ (800144c <Y_move+0x88>)
 80013fe:	f001 faba 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2102      	movs	r1, #2
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <Y_move+0x88>)
 8001408:	f001 fab5 	bl	8002976 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e009      	b.n	8001426 <Y_move+0x62>
        Y_stepOnce();
 8001412:	f7ff ff65 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001416:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff26 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbf1      	blt.n	8001412 <Y_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	4806      	ldr	r0, [pc, #24]	@ (800144c <Y_move+0x88>)
 8001434:	f001 fa9f 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	4803      	ldr	r0, [pc, #12]	@ (800144c <Y_move+0x88>)
 800143e:	f001 fa9a 	bl	8002976 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <Z_move>:

void Z_move(int32_t steps, bool dir) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dir ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800146a:	481d      	ldr	r0, [pc, #116]	@ (80014e0 <Z_move+0x90>)
 800146c:	f001 fa83 	bl	8002976 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <Z_move+0x3c>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2101      	movs	r1, #1
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <Z_move+0x94>)
 800147c:	f001 fa7b 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2102      	movs	r1, #2
 8001484:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <Z_move+0x94>)
 8001486:	f001 fa76 	bl	8002976 <HAL_GPIO_WritePin>
 800148a:	e009      	b.n	80014a0 <Z_move+0x50>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <Z_move+0x94>)
 8001492:	f001 fa70 	bl	8002976 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	2102      	movs	r1, #2
 800149a:	4812      	ldr	r0, [pc, #72]	@ (80014e4 <Z_move+0x94>)
 800149c:	f001 fa6b 	bl	8002976 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e009      	b.n	80014ba <Z_move+0x6a>
        Z_stepOnce();
 80014a6:	f7ff ff31 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 80014aa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fedc 	bl	800126c <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf1      	blt.n	80014a6 <Z_move+0x56>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <Z_move+0x94>)
 80014c8:	f001 fa55 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2102      	movs	r1, #2
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <Z_move+0x94>)
 80014d2:	f001 fa50 	bl	8002976 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40010c00 	.word	0x40010c00

080014e8 <extractParameter>:
void readUSBCommands(void) {
    // Esta función se implementará con callback de USB CDC
    // Por ahora vacía, se procesará en el callback
}

float extractParameter(const char* command, char param) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
    char* ptr = strchr(command, param);
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f008 ff54 	bl	800a3a6 <strchr>
 80014fe:	60f8      	str	r0, [r7, #12]
    if (ptr) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00c      	beq.n	8001520 <extractParameter+0x38>
        return atof(ptr + 1);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3301      	adds	r3, #1
 800150a:	4618      	mov	r0, r3
 800150c:	f008 f812 	bl	8009534 <atof>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fa98 	bl	8000a4c <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	e000      	b.n	8001522 <extractParameter+0x3a>
    }
    return NAN; // Not a Number
 8001520:	4b02      	ldr	r3, [pc, #8]	@ (800152c <extractParameter+0x44>)
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	7fc00000 	.word	0x7fc00000

08001530 <moveAxes>:

void moveAxes(float x, float y, float z) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b0a2      	sub	sp, #136	@ 0x88
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
    // Convertir de milímetros a pasos usando valores específicos por eje
    int32_t xSteps = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int32_t ySteps = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	67bb      	str	r3, [r7, #120]	@ 0x78
    int32_t zSteps = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	677b      	str	r3, [r7, #116]	@ 0x74
    bool xDir = true;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    bool yDir = true;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    bool zDir = true;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
    
    if (!isnan(x)) {
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fd23 	bl	8000fa8 <__aeabi_fcmpun>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <moveAxes+0x70>
        // Calcular pasos relativos para el eje X (mm → pasos)
        int32_t targetX = x * STEPS_PER_MM_X; // Convertir mm a pasos (79 steps/mm)
 8001568:	4983      	ldr	r1, [pc, #524]	@ (8001778 <moveAxes+0x248>)
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fbcc 	bl	8000d08 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd2e 	bl	8000fd4 <__aeabi_f2iz>
 8001578:	4603      	mov	r3, r0
 800157a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        xSteps = targetX - currentX;
 800157c:	4b7f      	ldr	r3, [pc, #508]	@ (800177c <moveAxes+0x24c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	67fb      	str	r3, [r7, #124]	@ 0x7c
        xDir = (xSteps >= 0);
 8001586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001588:	43db      	mvns	r3, r3
 800158a:	0fdb      	lsrs	r3, r3, #31
 800158c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        xSteps = abs(xSteps);
 8001590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfb8      	it	lt
 8001596:	425b      	neglt	r3, r3
 8001598:	67fb      	str	r3, [r7, #124]	@ 0x7c
        currentX = targetX; // Actualizar posición actual
 800159a:	4a78      	ldr	r2, [pc, #480]	@ (800177c <moveAxes+0x24c>)
 800159c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800159e:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(y)) {
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f7ff fd00 	bl	8000fa8 <__aeabi_fcmpun>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <moveAxes+0xb6>
        // Calcular pasos relativos para el eje Y (mm → pasos)
        int32_t targetY = y * STEPS_PER_MM_Y; // Convertir mm a pasos (79 steps/mm)
 80015ae:	4972      	ldr	r1, [pc, #456]	@ (8001778 <moveAxes+0x248>)
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fba9 	bl	8000d08 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fd0b 	bl	8000fd4 <__aeabi_f2iz>
 80015be:	4603      	mov	r3, r0
 80015c0:	66bb      	str	r3, [r7, #104]	@ 0x68
        ySteps = targetY - currentY;
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <moveAxes+0x250>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	67bb      	str	r3, [r7, #120]	@ 0x78
        yDir = (ySteps >= 0);
 80015cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015ce:	43db      	mvns	r3, r3
 80015d0:	0fdb      	lsrs	r3, r3, #31
 80015d2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
        ySteps = abs(ySteps);
 80015d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bfb8      	it	lt
 80015dc:	425b      	neglt	r3, r3
 80015de:	67bb      	str	r3, [r7, #120]	@ 0x78
        currentY = targetY; // Actualizar posición actual
 80015e0:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <moveAxes+0x250>)
 80015e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015e4:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(z)) {
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fcdd 	bl	8000fa8 <__aeabi_fcmpun>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11b      	bne.n	800162c <moveAxes+0xfc>
        // Calcular pasos relativos para el eje Z (mm → pasos)
        int32_t targetZ = z * STEPS_PER_MM_Z; // Convertir mm a pasos (3930 steps/mm)
 80015f4:	4963      	ldr	r1, [pc, #396]	@ (8001784 <moveAxes+0x254>)
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fb86 	bl	8000d08 <__aeabi_fmul>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fce8 	bl	8000fd4 <__aeabi_f2iz>
 8001604:	4603      	mov	r3, r0
 8001606:	667b      	str	r3, [r7, #100]	@ 0x64
        zSteps = targetZ - currentZ;
 8001608:	4b5f      	ldr	r3, [pc, #380]	@ (8001788 <moveAxes+0x258>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	677b      	str	r3, [r7, #116]	@ 0x74
        zDir = (zSteps >= 0);
 8001612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001614:	43db      	mvns	r3, r3
 8001616:	0fdb      	lsrs	r3, r3, #31
 8001618:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
        zSteps = abs(zSteps);
 800161c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	677b      	str	r3, [r7, #116]	@ 0x74
        currentZ = targetZ; // Actualizar posición actual
 8001626:	4a58      	ldr	r2, [pc, #352]	@ (8001788 <moveAxes+0x258>)
 8001628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800162a:	6013      	str	r3, [r2, #0]
    }
    
    // Mover los motores
    if (xSteps > 0) {
 800162c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800162e:	2b00      	cmp	r3, #0
 8001630:	dd32      	ble.n	8001698 <moveAxes+0x168>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo X: %.2fmm (%ld pasos), dir: %s\r\n", 
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fcb7 	bl	8000fa8 <__aeabi_fcmpun>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d105      	bne.n	800164c <moveAxes+0x11c>
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e003      	b.n	8001654 <moveAxes+0x124>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
 8001658:	2900      	cmp	r1, #0
 800165a:	d001      	beq.n	8001660 <moveAxes+0x130>
 800165c:	494b      	ldr	r1, [pc, #300]	@ (800178c <moveAxes+0x25c>)
 800165e:	e000      	b.n	8001662 <moveAxes+0x132>
 8001660:	494b      	ldr	r1, [pc, #300]	@ (8001790 <moveAxes+0x260>)
 8001662:	f107 0014 	add.w	r0, r7, #20
 8001666:	9101      	str	r1, [sp, #4]
 8001668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800166a:	9100      	str	r1, [sp, #0]
 800166c:	4949      	ldr	r1, [pc, #292]	@ (8001794 <moveAxes+0x264>)
 800166e:	f008 fe2d 	bl	800a2cc <siprintf>
               !isnan(x) ? x : 0.0, xSteps, xDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fd6a 	bl	8000150 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f007 fb76 	bl	8008d78 <CDC_Transmit_FS>
        X_move(xSteps, xDir);
 800168c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001690:	4619      	mov	r1, r3
 8001692:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001694:	f7ff fe50 	bl	8001338 <X_move>
    }
    
    if (ySteps > 0) {
 8001698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd32      	ble.n	8001704 <moveAxes+0x1d4>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo Y: %.2fmm (%ld pasos), dir: %s\r\n", 
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff fc81 	bl	8000fa8 <__aeabi_fcmpun>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <moveAxes+0x188>
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e003      	b.n	80016c0 <moveAxes+0x190>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f897 1072 	ldrb.w	r1, [r7, #114]	@ 0x72
 80016c4:	2900      	cmp	r1, #0
 80016c6:	d001      	beq.n	80016cc <moveAxes+0x19c>
 80016c8:	4930      	ldr	r1, [pc, #192]	@ (800178c <moveAxes+0x25c>)
 80016ca:	e000      	b.n	80016ce <moveAxes+0x19e>
 80016cc:	4930      	ldr	r1, [pc, #192]	@ (8001790 <moveAxes+0x260>)
 80016ce:	f107 0014 	add.w	r0, r7, #20
 80016d2:	9101      	str	r1, [sp, #4]
 80016d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80016d6:	9100      	str	r1, [sp, #0]
 80016d8:	492f      	ldr	r1, [pc, #188]	@ (8001798 <moveAxes+0x268>)
 80016da:	f008 fdf7 	bl	800a2cc <siprintf>
               !isnan(y) ? y : 0.0, ySteps, yDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd34 	bl	8000150 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fb40 	bl	8008d78 <CDC_Transmit_FS>
        Y_move(ySteps, yDir);
 80016f8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80016fc:	4619      	mov	r1, r3
 80016fe:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001700:	f7ff fe60 	bl	80013c4 <Y_move>
    }
    
    if (zSteps > 0) {
 8001704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001706:	2b00      	cmp	r3, #0
 8001708:	dd32      	ble.n	8001770 <moveAxes+0x240>
        // Enviar información por USB CDC
        char msg[80];
        sprintf(msg, "Moviendo Z: %.2fmm (%ld pasos), dir: %s\r\n", 
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fc4b 	bl	8000fa8 <__aeabi_fcmpun>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <moveAxes+0x1f4>
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe fe85 	bl	8000428 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e003      	b.n	800172c <moveAxes+0x1fc>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f897 1071 	ldrb.w	r1, [r7, #113]	@ 0x71
 8001730:	2900      	cmp	r1, #0
 8001732:	d001      	beq.n	8001738 <moveAxes+0x208>
 8001734:	4915      	ldr	r1, [pc, #84]	@ (800178c <moveAxes+0x25c>)
 8001736:	e000      	b.n	800173a <moveAxes+0x20a>
 8001738:	4915      	ldr	r1, [pc, #84]	@ (8001790 <moveAxes+0x260>)
 800173a:	f107 0014 	add.w	r0, r7, #20
 800173e:	9101      	str	r1, [sp, #4]
 8001740:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001742:	9100      	str	r1, [sp, #0]
 8001744:	4915      	ldr	r1, [pc, #84]	@ (800179c <moveAxes+0x26c>)
 8001746:	f008 fdc1 	bl	800a2cc <siprintf>
               !isnan(z) ? z : 0.0, zSteps, zDir ? "+" : "-");
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fcfe 	bl	8000150 <strlen>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f007 fb0a 	bl	8008d78 <CDC_Transmit_FS>
        Z_move(zSteps, zDir);
 8001764:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001768:	4619      	mov	r1, r3
 800176a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800176c:	f7ff fe70 	bl	8001450 <Z_move>
    }
}
 8001770:	bf00      	nop
 8001772:	3780      	adds	r7, #128	@ 0x80
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	429e0000 	.word	0x429e0000
 800177c:	20000364 	.word	0x20000364
 8001780:	20000368 	.word	0x20000368
 8001784:	4575a000 	.word	0x4575a000
 8001788:	2000036c 	.word	0x2000036c
 800178c:	0800c4d0 	.word	0x0800c4d0
 8001790:	0800c4d4 	.word	0x0800c4d4
 8001794:	0800c4d8 	.word	0x0800c4d8
 8001798:	0800c504 	.word	0x0800c504
 800179c:	0800c530 	.word	0x0800c530

080017a0 <processGcode>:

void processGcode(const char* command) {
 80017a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a4:	b0a6      	sub	sp, #152	@ 0x98
 80017a6:	af04      	add	r7, sp, #16
 80017a8:	6078      	str	r0, [r7, #4]
    // char msg[100];
    // sprintf(msg, "Procesando: %s\r\n", command);
    // CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
    
    // Procesar comando G0 o G1 (movimientos)
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80017aa:	2202      	movs	r2, #2
 80017ac:	4957      	ldr	r1, [pc, #348]	@ (800190c <processGcode+0x16c>)
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f008 fe06 	bl	800a3c0 <strncmp>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <processGcode+0x2a>
 80017ba:	2202      	movs	r2, #2
 80017bc:	4954      	ldr	r1, [pc, #336]	@ (8001910 <processGcode+0x170>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f008 fdfe 	bl	800a3c0 <strncmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d119      	bne.n	80017fe <processGcode+0x5e>
        // Procesar movimiento
        float xPos = extractParameter(command, 'X');
 80017ca:	2158      	movs	r1, #88	@ 0x58
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe8b 	bl	80014e8 <extractParameter>
 80017d2:	67b8      	str	r0, [r7, #120]	@ 0x78
        float yPos = extractParameter(command, 'Y');
 80017d4:	2159      	movs	r1, #89	@ 0x59
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fe86 	bl	80014e8 <extractParameter>
 80017dc:	6778      	str	r0, [r7, #116]	@ 0x74
        float zPos = extractParameter(command, 'Z');
 80017de:	215a      	movs	r1, #90	@ 0x5a
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe81 	bl	80014e8 <extractParameter>
 80017e6:	6738      	str	r0, [r7, #112]	@ 0x70
        
        // Mover los ejes
        moveAxes(xPos, yPos, zPos);
 80017e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80017ea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80017ec:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80017ee:	f7ff fe9f 	bl	8001530 <moveAxes>
        
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80017f2:	2104      	movs	r1, #4
 80017f4:	4847      	ldr	r0, [pc, #284]	@ (8001914 <processGcode+0x174>)
 80017f6:	f007 fabf 	bl	8008d78 <CDC_Transmit_FS>
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80017fa:	bf00      	nop
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
    }
    else {
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
    }
}
 80017fc:	e081      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "G28", 3) == 0) {
 80017fe:	2203      	movs	r2, #3
 8001800:	4945      	ldr	r1, [pc, #276]	@ (8001918 <processGcode+0x178>)
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f008 fddc 	bl	800a3c0 <strncmp>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <processGcode+0x84>
        CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 800180e:	2116      	movs	r1, #22
 8001810:	4842      	ldr	r0, [pc, #264]	@ (800191c <processGcode+0x17c>)
 8001812:	f007 fab1 	bl	8008d78 <CDC_Transmit_FS>
        performHoming();
 8001816:	f000 fa8b 	bl	8001d30 <performHoming>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 800181a:	2104      	movs	r1, #4
 800181c:	483d      	ldr	r0, [pc, #244]	@ (8001914 <processGcode+0x174>)
 800181e:	f007 faab 	bl	8008d78 <CDC_Transmit_FS>
}
 8001822:	e06e      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "M114", 4) == 0) {
 8001824:	2204      	movs	r2, #4
 8001826:	493e      	ldr	r1, [pc, #248]	@ (8001920 <processGcode+0x180>)
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f008 fdc9 	bl	800a3c0 <strncmp>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d153      	bne.n	80018dc <processGcode+0x13c>
        float xPos = currentX / (float)STEPS_PER_MM_X;
 8001834:	4b3b      	ldr	r3, [pc, #236]	@ (8001924 <processGcode+0x184>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa11 	bl	8000c60 <__aeabi_i2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4939      	ldr	r1, [pc, #228]	@ (8001928 <processGcode+0x188>)
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fb14 	bl	8000e70 <__aeabi_fdiv>
 8001848:	4603      	mov	r3, r0
 800184a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        float yPos = currentY / (float)STEPS_PER_MM_Y;
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <processGcode+0x18c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa04 	bl	8000c60 <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4933      	ldr	r1, [pc, #204]	@ (8001928 <processGcode+0x188>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fb07 	bl	8000e70 <__aeabi_fdiv>
 8001862:	4603      	mov	r3, r0
 8001864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001868:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <processGcode+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f9f7 	bl	8000c60 <__aeabi_i2f>
 8001872:	4603      	mov	r3, r0
 8001874:	492f      	ldr	r1, [pc, #188]	@ (8001934 <processGcode+0x194>)
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fafa 	bl	8000e70 <__aeabi_fdiv>
 800187c:	4603      	mov	r3, r0
 800187e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        sprintf(posMsg, "X:%.2f Y:%.2f Z:%.2f\r\n", xPos, yPos, zPos);
 8001880:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001884:	f7fe fdd0 	bl	8000428 <__aeabi_f2d>
 8001888:	4680      	mov	r8, r0
 800188a:	4689      	mov	r9, r1
 800188c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800189a:	f7fe fdc5 	bl	8000428 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	f107 000c 	add.w	r0, r7, #12
 80018a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018aa:	e9cd 4500 	strd	r4, r5, [sp]
 80018ae:	4642      	mov	r2, r8
 80018b0:	464b      	mov	r3, r9
 80018b2:	4921      	ldr	r1, [pc, #132]	@ (8001938 <processGcode+0x198>)
 80018b4:	f008 fd0a 	bl	800a2cc <siprintf>
        CDC_Transmit_FS((uint8_t*)posMsg, strlen(posMsg));
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fc47 	bl	8000150 <strlen>
 80018c2:	4603      	mov	r3, r0
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fa53 	bl	8008d78 <CDC_Transmit_FS>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80018d2:	2104      	movs	r1, #4
 80018d4:	480f      	ldr	r0, [pc, #60]	@ (8001914 <processGcode+0x174>)
 80018d6:	f007 fa4f 	bl	8008d78 <CDC_Transmit_FS>
}
 80018da:	e012      	b.n	8001902 <processGcode+0x162>
    else if (strncmp(command, "M503", 4) == 0) {
 80018dc:	2204      	movs	r2, #4
 80018de:	4917      	ldr	r1, [pc, #92]	@ (800193c <processGcode+0x19c>)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f008 fd6d 	bl	800a3c0 <strncmp>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <processGcode+0x15a>
        showConfiguration();
 80018ec:	f000 f928 	bl	8001b40 <showConfiguration>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80018f0:	2104      	movs	r1, #4
 80018f2:	4808      	ldr	r0, [pc, #32]	@ (8001914 <processGcode+0x174>)
 80018f4:	f007 fa40 	bl	8008d78 <CDC_Transmit_FS>
}
 80018f8:	e003      	b.n	8001902 <processGcode+0x162>
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
 80018fa:	2117      	movs	r1, #23
 80018fc:	4810      	ldr	r0, [pc, #64]	@ (8001940 <processGcode+0x1a0>)
 80018fe:	f007 fa3b 	bl	8008d78 <CDC_Transmit_FS>
}
 8001902:	bf00      	nop
 8001904:	3788      	adds	r7, #136	@ 0x88
 8001906:	46bd      	mov	sp, r7
 8001908:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800190c:	0800c55c 	.word	0x0800c55c
 8001910:	0800c560 	.word	0x0800c560
 8001914:	0800c564 	.word	0x0800c564
 8001918:	0800c56c 	.word	0x0800c56c
 800191c:	0800c570 	.word	0x0800c570
 8001920:	0800c588 	.word	0x0800c588
 8001924:	20000364 	.word	0x20000364
 8001928:	429e0000 	.word	0x429e0000
 800192c:	20000368 	.word	0x20000368
 8001930:	2000036c 	.word	0x2000036c
 8001934:	4575a000 	.word	0x4575a000
 8001938:	0800c590 	.word	0x0800c590
 800193c:	0800c5a8 	.word	0x0800c5a8
 8001940:	0800c5b0 	.word	0x0800c5b0

08001944 <loop>:

void loop(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
    static uint32_t lastEndstopCheck = 0;
    static bool endstopXWasPressed = false; 
    static bool endstopYWasPressed = false;
    static bool endstopZWasPressed = false;
    
    uint32_t currentTime = HAL_GetTick();
 800194a:	f000 fd3d 	bl	80023c8 <HAL_GetTick>
 800194e:	6078      	str	r0, [r7, #4]
    
    // Verificar fines de carrera solo cada 10ms para evitar spam
    if (currentTime - lastEndstopCheck > 10) {
 8001950:	4b53      	ldr	r3, [pc, #332]	@ (8001aa0 <loop+0x15c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b0a      	cmp	r3, #10
 800195a:	f240 808d 	bls.w	8001a78 <loop+0x134>
        lastEndstopCheck = currentTime;
 800195e:	4a50      	ldr	r2, [pc, #320]	@ (8001aa0 <loop+0x15c>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
        
        // Fin de carrera X - solo mensaje cuando cambia de estado
        bool endstopX = (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001964:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001968:	484e      	ldr	r0, [pc, #312]	@ (8001aa4 <loop+0x160>)
 800196a:	f000 ffed 	bl	8002948 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	70fb      	strb	r3, [r7, #3]
        if (endstopX && !endstopXWasPressed) {
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00e      	beq.n	800199e <loop+0x5a>
 8001980:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <loop+0x164>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <loop+0x5a>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X activado\r\n", 27);
 800198e:	211b      	movs	r1, #27
 8001990:	4846      	ldr	r0, [pc, #280]	@ (8001aac <loop+0x168>)
 8001992:	f007 f9f1 	bl	8008d78 <CDC_Transmit_FS>
            // Opcional: detener motor X o hacer homing
            // X_move(100, false); // Retroceder 100 pasos
            endstopXWasPressed = true;
 8001996:	4b44      	ldr	r3, [pc, #272]	@ (8001aa8 <loop+0x164>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	e010      	b.n	80019c0 <loop+0x7c>
        } else if (!endstopX && endstopXWasPressed) {
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f083 0301 	eor.w	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <loop+0x7c>
 80019aa:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa8 <loop+0x164>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <loop+0x7c>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X desactivado\r\n", 30);
 80019b2:	211e      	movs	r1, #30
 80019b4:	483e      	ldr	r0, [pc, #248]	@ (8001ab0 <loop+0x16c>)
 80019b6:	f007 f9df 	bl	8008d78 <CDC_Transmit_FS>
            endstopXWasPressed = false;
 80019ba:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <loop+0x164>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Y
        bool endstopY = (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 80019c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c4:	4837      	ldr	r0, [pc, #220]	@ (8001aa4 <loop+0x160>)
 80019c6:	f000 ffbf 	bl	8002948 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	70bb      	strb	r3, [r7, #2]
        if (endstopY && !endstopYWasPressed) {
 80019d6:	78bb      	ldrb	r3, [r7, #2]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00e      	beq.n	80019fa <loop+0xb6>
 80019dc:	4b35      	ldr	r3, [pc, #212]	@ (8001ab4 <loop+0x170>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f083 0301 	eor.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <loop+0xb6>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y activado\r\n", 27);
 80019ea:	211b      	movs	r1, #27
 80019ec:	4832      	ldr	r0, [pc, #200]	@ (8001ab8 <loop+0x174>)
 80019ee:	f007 f9c3 	bl	8008d78 <CDC_Transmit_FS>
            endstopYWasPressed = true;
 80019f2:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <loop+0x170>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e010      	b.n	8001a1c <loop+0xd8>
        } else if (!endstopY && endstopYWasPressed) {
 80019fa:	78bb      	ldrb	r3, [r7, #2]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00a      	beq.n	8001a1c <loop+0xd8>
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <loop+0x170>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <loop+0xd8>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y desactivado\r\n", 30);
 8001a0e:	211e      	movs	r1, #30
 8001a10:	482a      	ldr	r0, [pc, #168]	@ (8001abc <loop+0x178>)
 8001a12:	f007 f9b1 	bl	8008d78 <CDC_Transmit_FS>
            endstopYWasPressed = false;
 8001a16:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <loop+0x170>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Z
        bool endstopZ = (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001a1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a20:	4820      	ldr	r0, [pc, #128]	@ (8001aa4 <loop+0x160>)
 8001a22:	f000 ff91 	bl	8002948 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	707b      	strb	r3, [r7, #1]
        if (endstopZ && !endstopZWasPressed) {
 8001a32:	787b      	ldrb	r3, [r7, #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00e      	beq.n	8001a56 <loop+0x112>
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <loop+0x17c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f083 0301 	eor.w	r3, r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <loop+0x112>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z activado\r\n", 27);
 8001a46:	211b      	movs	r1, #27
 8001a48:	481e      	ldr	r0, [pc, #120]	@ (8001ac4 <loop+0x180>)
 8001a4a:	f007 f995 	bl	8008d78 <CDC_Transmit_FS>
            endstopZWasPressed = true;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <loop+0x17c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e010      	b.n	8001a78 <loop+0x134>
        } else if (!endstopZ && endstopZWasPressed) {
 8001a56:	787b      	ldrb	r3, [r7, #1]
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <loop+0x134>
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <loop+0x17c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <loop+0x134>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z desactivado\r\n", 30);
 8001a6a:	211e      	movs	r1, #30
 8001a6c:	4816      	ldr	r0, [pc, #88]	@ (8001ac8 <loop+0x184>)
 8001a6e:	f007 f983 	bl	8008d78 <CDC_Transmit_FS>
            endstopZWasPressed = false;
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <loop+0x17c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
        }
    }

    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8001a78:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <loop+0x188>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <loop+0x152>
        char debugMsg[120];
        sprintf(debugMsg, ">>> [%s]\r\n", usbBuffer);
        CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
        #endif
        
        processGcode(usbBuffer);
 8001a80:	4813      	ldr	r0, [pc, #76]	@ (8001ad0 <loop+0x18c>)
 8001a82:	f7ff fe8d 	bl	80017a0 <processGcode>
        
        // IMPORTANTE: Resetear todo después de procesar
        usbBufferIndex = 0;
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <loop+0x190>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8001a8c:	2264      	movs	r2, #100	@ 0x64
 8001a8e:	2100      	movs	r1, #0
 8001a90:	480f      	ldr	r0, [pc, #60]	@ (8001ad0 <loop+0x18c>)
 8001a92:	f008 fc80 	bl	800a396 <memset>
    }
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200003d8 	.word	0x200003d8
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	200003dc 	.word	0x200003dc
 8001aac:	0800c5c8 	.word	0x0800c5c8
 8001ab0:	0800c5e4 	.word	0x0800c5e4
 8001ab4:	200003dd 	.word	0x200003dd
 8001ab8:	0800c604 	.word	0x0800c604
 8001abc:	0800c620 	.word	0x0800c620
 8001ac0:	200003de 	.word	0x200003de
 8001ac4:	0800c640 	.word	0x0800c640
 8001ac8:	0800c65c 	.word	0x0800c65c
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000370 	.word	0x20000370
 8001ad4:	200003d4 	.word	0x200003d4

08001ad8 <setup>:

void setup(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <setup+0x58>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a13      	ldr	r2, [pc, #76]	@ (8001b30 <setup+0x58>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <setup+0x5c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <setup+0x5c>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Habilita driver X
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afa:	480f      	ldr	r0, [pc, #60]	@ (8001b38 <setup+0x60>)
 8001afc:	f000 ff3b 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Y
 8001b00:	2200      	movs	r2, #0
 8001b02:	2110      	movs	r1, #16
 8001b04:	480c      	ldr	r0, [pc, #48]	@ (8001b38 <setup+0x60>)
 8001b06:	f000 ff36 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Z
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b10:	480a      	ldr	r0, [pc, #40]	@ (8001b3c <setup+0x64>)
 8001b12:	f000 ff30 	bl	8002976 <HAL_GPIO_WritePin>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4807      	ldr	r0, [pc, #28]	@ (8001b38 <setup+0x60>)
 8001b1c:	f000 ff2b 	bl	8002976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2102      	movs	r1, #2
 8001b24:	4804      	ldr	r0, [pc, #16]	@ (8001b38 <setup+0x60>)
 8001b26:	f000 ff26 	bl	8002976 <HAL_GPIO_WritePin>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000edf0 	.word	0xe000edf0
 8001b34:	e0001000 	.word	0xe0001000
 8001b38:	40010c00 	.word	0x40010c00
 8001b3c:	40010800 	.word	0x40010800

08001b40 <showConfiguration>:

// Función auxiliar para movimiento genérico (no utilizada actualmente)
// Se mantiene para compatibilidad futura

// Función para mostrar la configuración actual del sistema
void showConfiguration(void) {
 8001b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b44:	b0ba      	sub	sp, #232	@ 0xe8
 8001b46:	af04      	add	r7, sp, #16
    char msg[200];
    
    CDC_Transmit_FS((uint8_t*)"=== CONFIGURACIÓN CNC ===\r\n", 28);
 8001b48:	211c      	movs	r1, #28
 8001b4a:	4850      	ldr	r0, [pc, #320]	@ (8001c8c <showConfiguration+0x14c>)
 8001b4c:	f007 f914 	bl	8008d78 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	224f      	movs	r2, #79	@ 0x4f
 8001b54:	494e      	ldr	r1, [pc, #312]	@ (8001c90 <showConfiguration+0x150>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f008 fbb8 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe faf6 	bl	8000150 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f007 f903 	bl	8008d78 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	224f      	movs	r2, #79	@ 0x4f
 8001b76:	4947      	ldr	r1, [pc, #284]	@ (8001c94 <showConfiguration+0x154>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f008 fba7 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fae5 	bl	8000150 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f007 f8f2 	bl	8008d78 <CDC_Transmit_FS>
    
    sprintf(msg, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001b9a:	493f      	ldr	r1, [pc, #252]	@ (8001c98 <showConfiguration+0x158>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fb95 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fad3 	bl	8000150 <strlen>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 f8e0 	bl	8008d78 <CDC_Transmit_FS>
    
    sprintf(msg, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001bb8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4936      	ldr	r1, [pc, #216]	@ (8001c9c <showConfiguration+0x15c>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f008 fb82 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fac0 	bl	8000150 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 f8cd 	bl	8008d78 <CDC_Transmit_FS>
    
    // Mostrar posición actual
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001bde:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <showConfiguration+0x160>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f83c 	bl	8000c60 <__aeabi_i2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	492e      	ldr	r1, [pc, #184]	@ (8001ca4 <showConfiguration+0x164>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f93f 	bl	8000e70 <__aeabi_fdiv>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <showConfiguration+0x168>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f82f 	bl	8000c60 <__aeabi_i2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4927      	ldr	r1, [pc, #156]	@ (8001ca4 <showConfiguration+0x164>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f932 	bl	8000e70 <__aeabi_fdiv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <showConfiguration+0x16c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f822 	bl	8000c60 <__aeabi_i2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4924      	ldr	r1, [pc, #144]	@ (8001cb0 <showConfiguration+0x170>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f925 	bl	8000e70 <__aeabi_fdiv>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    sprintf(msg, "Posición actual: X%.2f Y%.2f Z%.2f mm\r\n", xPos, yPos, zPos);
 8001c2c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001c30:	f7fe fbfa 	bl	8000428 <__aeabi_f2d>
 8001c34:	4680      	mov	r8, r0
 8001c36:	4689      	mov	r9, r1
 8001c38:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001c3c:	f7fe fbf4 	bl	8000428 <__aeabi_f2d>
 8001c40:	4604      	mov	r4, r0
 8001c42:	460d      	mov	r5, r1
 8001c44:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001c48:	f7fe fbee 	bl	8000428 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	1d38      	adds	r0, r7, #4
 8001c52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c56:	e9cd 4500 	strd	r4, r5, [sp]
 8001c5a:	4642      	mov	r2, r8
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	4915      	ldr	r1, [pc, #84]	@ (8001cb4 <showConfiguration+0x174>)
 8001c60:	f008 fb34 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fa72 	bl	8000150 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f007 f87f 	bl	8008d78 <CDC_Transmit_FS>
    
    CDC_Transmit_FS((uint8_t*)"=== FIN CONFIGURACIÓN ===\r\n", 28);
 8001c7a:	211c      	movs	r1, #28
 8001c7c:	480e      	ldr	r0, [pc, #56]	@ (8001cb8 <showConfiguration+0x178>)
 8001c7e:	f007 f87b 	bl	8008d78 <CDC_Transmit_FS>
}
 8001c82:	bf00      	nop
 8001c84:	37d8      	adds	r7, #216	@ 0xd8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c8c:	0800c67c 	.word	0x0800c67c
 8001c90:	0800c69c 	.word	0x0800c69c
 8001c94:	0800c6b4 	.word	0x0800c6b4
 8001c98:	0800c6cc 	.word	0x0800c6cc
 8001c9c:	0800c6e4 	.word	0x0800c6e4
 8001ca0:	20000364 	.word	0x20000364
 8001ca4:	429e0000 	.word	0x429e0000
 8001ca8:	20000368 	.word	0x20000368
 8001cac:	2000036c 	.word	0x2000036c
 8001cb0:	4575a000 	.word	0x4575a000
 8001cb4:	0800c6f8 	.word	0x0800c6f8
 8001cb8:	0800c724 	.word	0x0800c724

08001cbc <isEndstopPressed>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
    switch(axis) {
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b5a      	cmp	r3, #90	@ 0x5a
 8001cca:	d01e      	beq.n	8001d0a <isEndstopPressed+0x4e>
 8001ccc:	2b5a      	cmp	r3, #90	@ 0x5a
 8001cce:	dc28      	bgt.n	8001d22 <isEndstopPressed+0x66>
 8001cd0:	2b58      	cmp	r3, #88	@ 0x58
 8001cd2:	d002      	beq.n	8001cda <isEndstopPressed+0x1e>
 8001cd4:	2b59      	cmp	r3, #89	@ 0x59
 8001cd6:	d00c      	beq.n	8001cf2 <isEndstopPressed+0x36>
 8001cd8:	e023      	b.n	8001d22 <isEndstopPressed+0x66>
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001cda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cde:	4813      	ldr	r0, [pc, #76]	@ (8001d2c <isEndstopPressed+0x70>)
 8001ce0:	f000 fe32 	bl	8002948 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf0c      	ite	eq
 8001cea:	2301      	moveq	r3, #1
 8001cec:	2300      	movne	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e018      	b.n	8001d24 <isEndstopPressed+0x68>
        case 'Y':
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cf6:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <isEndstopPressed+0x70>)
 8001cf8:	f000 fe26 	bl	8002948 <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e00c      	b.n	8001d24 <isEndstopPressed+0x68>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001d0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <isEndstopPressed+0x70>)
 8001d10:	f000 fe1a 	bl	8002948 <HAL_GPIO_ReadPin>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf0c      	ite	eq
 8001d1a:	2301      	moveq	r3, #1
 8001d1c:	2300      	movne	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e000      	b.n	8001d24 <isEndstopPressed+0x68>
        default:
            return false;
 8001d22:	2300      	movs	r3, #0
    }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b098      	sub	sp, #96	@ 0x60
 8001d34:	af00      	add	r7, sp, #0
    char msg[80];
    
    // Enviar mensaje de inicio de homing
    CDC_Transmit_FS((uint8_t*)"Iniciando secuencia de homingg...\r\n", 34);
 8001d36:	2122      	movs	r1, #34	@ 0x22
 8001d38:	48bb      	ldr	r0, [pc, #748]	@ (8002028 <performHoming+0x2f8>)
 8001d3a:	f007 f81d 	bl	8008d78 <CDC_Transmit_FS>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(msg, "Fase 1: Buscando finales de carrera...\r\n");
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	49ba      	ldr	r1, [pc, #744]	@ (800202c <performHoming+0x2fc>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f008 fac2 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fa00 	bl	8000150 <strlen>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 f80d 	bl	8008d78 <CDC_Transmit_FS>
    
    // Homing del eje X
    sprintf(msg, "Homing eje X...\r\n");
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	49b3      	ldr	r1, [pc, #716]	@ (8002030 <performHoming+0x300>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f008 fab2 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe f9f0 	bl	8000150 <strlen>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 fffd 	bl	8008d78 <CDC_Transmit_FS>

    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	48ac      	ldr	r0, [pc, #688]	@ (8002034 <performHoming+0x304>)
 8001d84:	f000 fdf7 	bl	8002976 <HAL_GPIO_WritePin>
    // Mover hacia el final de carrera X (dirección negativa)
    while (!isEndstopPressed('X')) {
 8001d88:	e006      	b.n	8001d98 <performHoming+0x68>
        X_stepOnce();
 8001d8a:	f7ff fa95 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001d8e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fa6a 	bl	800126c <delay_us>
    while (!isEndstopPressed('X')) {
 8001d98:	2058      	movs	r0, #88	@ 0x58
 8001d9a:	f7ff ff8f 	bl	8001cbc <isEndstopPressed>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f083 0301 	eor.w	r3, r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ef      	bne.n	8001d8a <performHoming+0x5a>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001daa:	2201      	movs	r2, #1
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	48a1      	ldr	r0, [pc, #644]	@ (8002034 <performHoming+0x304>)
 8001db0:	f000 fde1 	bl	8002976 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001db4:	2300      	movs	r3, #0
 8001db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001db8:	e012      	b.n	8001de0 <performHoming+0xb0>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001dba:	2058      	movs	r0, #88	@ 0x58
 8001dbc:	f7ff ff7e 	bl	8001cbc <isEndstopPressed>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <performHoming+0xb8>
        X_stepOnce();
 8001dcc:	f7ff fa74 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001dd0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fa49 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ddc:	3301      	adds	r3, #1
 8001dde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	dde9      	ble.n	8001dba <performHoming+0x8a>
 8001de6:	e000      	b.n	8001dea <performHoming+0xba>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001de8:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001dea:	2200      	movs	r2, #0
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	4891      	ldr	r0, [pc, #580]	@ (8002034 <performHoming+0x304>)
 8001df0:	f000 fdc1 	bl	8002976 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('X')) {
 8001df4:	e00a      	b.n	8001e0c <performHoming+0xdc>
        X_stepOnce();
 8001df6:	f7ff fa5f 	bl	80012b8 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001dfa:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fa30 	bl	800126c <delay_us>
    while (!isEndstopPressed('X')) {
 8001e0c:	2058      	movs	r0, #88	@ 0x58
 8001e0e:	f7ff ff55 	bl	8001cbc <isEndstopPressed>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1eb      	bne.n	8001df6 <performHoming+0xc6>
    }
    
    currentX = 0; // Establecer posición home
 8001e1e:	4b86      	ldr	r3, [pc, #536]	@ (8002038 <performHoming+0x308>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje XX en posición home\r\n");
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4985      	ldr	r1, [pc, #532]	@ (800203c <performHoming+0x30c>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f008 fa4f 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe f98d 	bl	8000150 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 ff9a 	bl	8008d78 <CDC_Transmit_FS>
    
    // Homing del eje Y
    sprintf(msg, "Homing eje Y...\r\n");
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	497e      	ldr	r1, [pc, #504]	@ (8002040 <performHoming+0x310>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f008 fa3f 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f97d 	bl	8000150 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f006 ff8a 	bl	8008d78 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Y (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001e64:	2200      	movs	r2, #0
 8001e66:	2108      	movs	r1, #8
 8001e68:	4872      	ldr	r0, [pc, #456]	@ (8002034 <performHoming+0x304>)
 8001e6a:	f000 fd84 	bl	8002976 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001e6e:	e006      	b.n	8001e7e <performHoming+0x14e>
        Y_stepOnce();
 8001e70:	f7ff fa36 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e74:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f9f7 	bl	800126c <delay_us>
    while (!isEndstopPressed('Y')) {
 8001e7e:	2059      	movs	r0, #89	@ 0x59
 8001e80:	f7ff ff1c 	bl	8001cbc <isEndstopPressed>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f083 0301 	eor.w	r3, r3, #1
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1ef      	bne.n	8001e70 <performHoming+0x140>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001e90:	2201      	movs	r2, #1
 8001e92:	2108      	movs	r1, #8
 8001e94:	4867      	ldr	r0, [pc, #412]	@ (8002034 <performHoming+0x304>)
 8001e96:	f000 fd6e 	bl	8002976 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e9e:	e012      	b.n	8001ec6 <performHoming+0x196>
        if (!isEndstopPressed('Y')) break;
 8001ea0:	2059      	movs	r0, #89	@ 0x59
 8001ea2:	f7ff ff0b 	bl	8001cbc <isEndstopPressed>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <performHoming+0x19e>
        Y_stepOnce();
 8001eb2:	f7ff fa15 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001eb6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f9d6 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	dde9      	ble.n	8001ea0 <performHoming+0x170>
 8001ecc:	e000      	b.n	8001ed0 <performHoming+0x1a0>
        if (!isEndstopPressed('Y')) break;
 8001ece:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	4857      	ldr	r0, [pc, #348]	@ (8002034 <performHoming+0x304>)
 8001ed6:	f000 fd4e 	bl	8002976 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001eda:	e00a      	b.n	8001ef2 <performHoming+0x1c2>
        Y_stepOnce();
 8001edc:	f7ff fa00 	bl	80012e0 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001ee0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f9bd 	bl	800126c <delay_us>
    while (!isEndstopPressed('Y')) {
 8001ef2:	2059      	movs	r0, #89	@ 0x59
 8001ef4:	f7ff fee2 	bl	8001cbc <isEndstopPressed>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1eb      	bne.n	8001edc <performHoming+0x1ac>
    }
    
    currentY = 0; // Establecer posición home
 8001f04:	4b4f      	ldr	r3, [pc, #316]	@ (8002044 <performHoming+0x314>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Y en posición home\r\n");
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	494e      	ldr	r1, [pc, #312]	@ (8002048 <performHoming+0x318>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f008 f9dc 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f91a 	bl	8000150 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f006 ff27 	bl	8008d78 <CDC_Transmit_FS>
    
    // Homing del eje Z
    sprintf(msg, "Homing eje Z...\r\n");
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4947      	ldr	r1, [pc, #284]	@ (800204c <performHoming+0x31c>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f008 f9cc 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe f90a 	bl	8000150 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f006 ff17 	bl	8008d78 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Z (dirección negativa)
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f50:	483f      	ldr	r0, [pc, #252]	@ (8002050 <performHoming+0x320>)
 8001f52:	f000 fd10 	bl	8002976 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001f56:	e006      	b.n	8001f66 <performHoming+0x236>
        Z_stepOnce();
 8001f58:	f7ff f9d8 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8001f5c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f983 	bl	800126c <delay_us>
    while (!isEndstopPressed('Z')) {
 8001f66:	205a      	movs	r0, #90	@ 0x5a
 8001f68:	f7ff fea8 	bl	8001cbc <isEndstopPressed>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ef      	bne.n	8001f58 <performHoming+0x228>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f7e:	4834      	ldr	r0, [pc, #208]	@ (8002050 <performHoming+0x320>)
 8001f80:	f000 fcf9 	bl	8002976 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001f84:	2300      	movs	r3, #0
 8001f86:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f88:	e012      	b.n	8001fb0 <performHoming+0x280>
        if (!isEndstopPressed('Z')) break;
 8001f8a:	205a      	movs	r0, #90	@ 0x5a
 8001f8c:	f7ff fe96 	bl	8001cbc <isEndstopPressed>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10d      	bne.n	8001fb8 <performHoming+0x288>
        Z_stepOnce();
 8001f9c:	f7ff f9b6 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8001fa0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f961 	bl	800126c <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fac:	3301      	adds	r3, #1
 8001fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	dde9      	ble.n	8001f8a <performHoming+0x25a>
 8001fb6:	e000      	b.n	8001fba <performHoming+0x28a>
        if (!isEndstopPressed('Z')) break;
 8001fb8:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc0:	4823      	ldr	r0, [pc, #140]	@ (8002050 <performHoming+0x320>)
 8001fc2:	f000 fcd8 	bl	8002976 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001fc6:	e00a      	b.n	8001fde <performHoming+0x2ae>
        Z_stepOnce();
 8001fc8:	f7ff f9a0 	bl	800130c <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001fcc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f947 	bl	800126c <delay_us>
    while (!isEndstopPressed('Z')) {
 8001fde:	205a      	movs	r0, #90	@ 0x5a
 8001fe0:	f7ff fe6c 	bl	8001cbc <isEndstopPressed>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1eb      	bne.n	8001fc8 <performHoming+0x298>
    }
    
    currentZ = 0; // Establecer posición home
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <performHoming+0x324>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Z en posición home\r\n");
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4917      	ldr	r1, [pc, #92]	@ (8002058 <performHoming+0x328>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f008 f966 	bl	800a2cc <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f8a4 	bl	8000150 <strlen>
 8002008:	4603      	mov	r3, r0
 800200a:	b29a      	uxth	r2, r3
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f006 feb1 	bl	8008d78 <CDC_Transmit_FS>
    
    // Mensaje final
    CDC_Transmit_FS((uint8_t*)"Homing completado. Todos los ejes en posición home.\r\n", 54);
 8002016:	2136      	movs	r1, #54	@ 0x36
 8002018:	4810      	ldr	r0, [pc, #64]	@ (800205c <performHoming+0x32c>)
 800201a:	f006 fead 	bl	8008d78 <CDC_Transmit_FS>
}
 800201e:	bf00      	nop
 8002020:	3760      	adds	r7, #96	@ 0x60
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0800c744 	.word	0x0800c744
 800202c:	0800c768 	.word	0x0800c768
 8002030:	0800c794 	.word	0x0800c794
 8002034:	40010c00 	.word	0x40010c00
 8002038:	20000364 	.word	0x20000364
 800203c:	0800c7a8 	.word	0x0800c7a8
 8002040:	0800c7c4 	.word	0x0800c7c4
 8002044:	20000368 	.word	0x20000368
 8002048:	0800c7d8 	.word	0x0800c7d8
 800204c:	0800c7f4 	.word	0x0800c7f4
 8002050:	40010800 	.word	0x40010800
 8002054:	2000036c 	.word	0x2000036c
 8002058:	0800c808 	.word	0x0800c808
 800205c:	0800c824 	.word	0x0800c824

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <Error_Handler+0x8>

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_MspInit+0x5c>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <HAL_MspInit+0x5c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6193      	str	r3, [r2, #24]
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_MspInit+0x5c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_MspInit+0x5c>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <HAL_MspInit+0x5c>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <HAL_MspInit+0x5c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_MspInit+0x60>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	4a04      	ldr	r2, [pc, #16]	@ (80020cc <HAL_MspInit+0x60>)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <NMI_Handler+0x4>

080020d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <MemManage_Handler+0x4>

080020e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 f940 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800212e:	f000 fd56 	bl	8002bde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200010b0 	.word	0x200010b0

0800213c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return 1;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <_kill>:

int _kill(int pid, int sig)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002154:	f008 f98c 	bl	800a470 <__errno>
 8002158:	4603      	mov	r3, r0
 800215a:	2216      	movs	r2, #22
 800215c:	601a      	str	r2, [r3, #0]
  return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_exit>:

void _exit (int status)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002172:	f04f 31ff 	mov.w	r1, #4294967295
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffe7 	bl	800214a <_kill>
  while (1) {}    /* Make sure we hang here */
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <_exit+0x12>

08002180 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00a      	b.n	80021a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002192:	f3af 8000 	nop.w
 8002196:	4601      	mov	r1, r0
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	60ba      	str	r2, [r7, #8]
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf0      	blt.n	8002192 <_read+0x12>
  }

  return len;
 80021b0:	687b      	ldr	r3, [r7, #4]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf1      	blt.n	80021cc <_write+0x12>
  }
  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_close>:

int _close(int file)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002218:	605a      	str	r2, [r3, #4]
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <_isatty>:

int _isatty(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800223a:	b480      	push	{r7}
 800223c:	b085      	sub	sp, #20
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
	...

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f008 f8f4 	bl	800a470 <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20005000 	.word	0x20005000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	200003e0 	.word	0x200003e0
 80022bc:	200016f8 	.word	0x200016f8

080022c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022cc:	f7ff fff8 	bl	80022c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480b      	ldr	r0, [pc, #44]	@ (8002300 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022d2:	490c      	ldr	r1, [pc, #48]	@ (8002304 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002308 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a09      	ldr	r2, [pc, #36]	@ (800230c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022e8:	4c09      	ldr	r4, [pc, #36]	@ (8002310 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022f6:	f008 f8c1 	bl	800a47c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7fe fec7 	bl	800108c <main>
  bx lr
 80022fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002304:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8002308:	0800cc94 	.word	0x0800cc94
  ldr r2, =_sbss
 800230c:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8002310:	200016f4 	.word	0x200016f4

08002314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_2_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <HAL_Init+0x28>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <HAL_Init+0x28>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f947 	bl	80025bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fe9a 	bl	800206c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f95f 	bl	8002626 <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f000 f927 	bl	80025d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	@ (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000004 	.word	0x20000004
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_IncTick+0x20>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	@ (80023c4 <HAL_IncTick+0x20>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	200003e4 	.word	0x200003e4

080023c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <HAL_GetTick+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	200003e4 	.word	0x200003e4

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff fff0 	bl	80023c8 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_Delay+0x44>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffe0 	bl	80023c8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000000c 	.word	0x2000000c

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4906      	ldr	r1, [pc, #24]	@ (80024bc <__NVIC_EnableIRQ+0x34>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	@ (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	@ (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	@ 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002588:	d301      	bcc.n	800258e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258a:	2301      	movs	r3, #1
 800258c:	e00f      	b.n	80025ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258e:	4a0a      	ldr	r2, [pc, #40]	@ (80025b8 <SysTick_Config+0x40>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002596:	210f      	movs	r1, #15
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	f7ff ff90 	bl	80024c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <SysTick_Config+0x40>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <SysTick_Config+0x40>)
 80025a8:	2207      	movs	r2, #7
 80025aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	e000e010 	.word	0xe000e010

080025bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff ff2d 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e4:	f7ff ff42 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	6978      	ldr	r0, [r7, #20]
 80025f0:	f7ff ff90 	bl	8002514 <NVIC_EncodePriority>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff5f 	bl	80024c0 <__NVIC_SetPriority>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff35 	bl	8002488 <__NVIC_EnableIRQ>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ffa2 	bl	8002578 <SysTick_Config>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e169      	b.n	8002928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002654:	2201      	movs	r2, #1
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8158 	bne.w	8002922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4a9a      	ldr	r2, [pc, #616]	@ (80028e0 <HAL_GPIO_Init+0x2a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d05e      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 800267c:	4a98      	ldr	r2, [pc, #608]	@ (80028e0 <HAL_GPIO_Init+0x2a0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d875      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 8002682:	4a98      	ldr	r2, [pc, #608]	@ (80028e4 <HAL_GPIO_Init+0x2a4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d058      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002688:	4a96      	ldr	r2, [pc, #600]	@ (80028e4 <HAL_GPIO_Init+0x2a4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d86f      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800268e:	4a96      	ldr	r2, [pc, #600]	@ (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d052      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 8002694:	4a94      	ldr	r2, [pc, #592]	@ (80028e8 <HAL_GPIO_Init+0x2a8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d869      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 800269a:	4a94      	ldr	r2, [pc, #592]	@ (80028ec <HAL_GPIO_Init+0x2ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04c      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026a0:	4a92      	ldr	r2, [pc, #584]	@ (80028ec <HAL_GPIO_Init+0x2ac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d863      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026a6:	4a92      	ldr	r2, [pc, #584]	@ (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d046      	beq.n	800273a <HAL_GPIO_Init+0xfa>
 80026ac:	4a90      	ldr	r2, [pc, #576]	@ (80028f0 <HAL_GPIO_Init+0x2b0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d85d      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026b2:	2b12      	cmp	r3, #18
 80026b4:	d82a      	bhi.n	800270c <HAL_GPIO_Init+0xcc>
 80026b6:	2b12      	cmp	r3, #18
 80026b8:	d859      	bhi.n	800276e <HAL_GPIO_Init+0x12e>
 80026ba:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_GPIO_Init+0x80>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	0800273b 	.word	0x0800273b
 80026c4:	08002715 	.word	0x08002715
 80026c8:	08002727 	.word	0x08002727
 80026cc:	08002769 	.word	0x08002769
 80026d0:	0800276f 	.word	0x0800276f
 80026d4:	0800276f 	.word	0x0800276f
 80026d8:	0800276f 	.word	0x0800276f
 80026dc:	0800276f 	.word	0x0800276f
 80026e0:	0800276f 	.word	0x0800276f
 80026e4:	0800276f 	.word	0x0800276f
 80026e8:	0800276f 	.word	0x0800276f
 80026ec:	0800276f 	.word	0x0800276f
 80026f0:	0800276f 	.word	0x0800276f
 80026f4:	0800276f 	.word	0x0800276f
 80026f8:	0800276f 	.word	0x0800276f
 80026fc:	0800276f 	.word	0x0800276f
 8002700:	0800276f 	.word	0x0800276f
 8002704:	0800271d 	.word	0x0800271d
 8002708:	08002731 	.word	0x08002731
 800270c:	4a79      	ldr	r2, [pc, #484]	@ (80028f4 <HAL_GPIO_Init+0x2b4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002712:	e02c      	b.n	800276e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e029      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	3304      	adds	r3, #4
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e024      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	3308      	adds	r3, #8
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e01f      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	330c      	adds	r3, #12
 8002736:	623b      	str	r3, [r7, #32]
          break;
 8002738:	e01a      	b.n	8002770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002742:	2304      	movs	r3, #4
 8002744:	623b      	str	r3, [r7, #32]
          break;
 8002746:	e013      	b.n	8002770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002750:	2308      	movs	r3, #8
 8002752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	611a      	str	r2, [r3, #16]
          break;
 800275a:	e009      	b.n	8002770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800275c:	2308      	movs	r3, #8
 800275e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	615a      	str	r2, [r3, #20]
          break;
 8002766:	e003      	b.n	8002770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
          break;
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x130>
          break;
 800276e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2bff      	cmp	r3, #255	@ 0xff
 8002774:	d801      	bhi.n	800277a <HAL_GPIO_Init+0x13a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	e001      	b.n	800277e <HAL_GPIO_Init+0x13e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3304      	adds	r3, #4
 800277e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2bff      	cmp	r3, #255	@ 0xff
 8002784:	d802      	bhi.n	800278c <HAL_GPIO_Init+0x14c>
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	e002      	b.n	8002792 <HAL_GPIO_Init+0x152>
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	3b08      	subs	r3, #8
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	210f      	movs	r1, #15
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80b1 	beq.w	8002922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027c0:	4b4d      	ldr	r3, [pc, #308]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_GPIO_Init+0x2b8>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027d8:	4a48      	ldr	r2, [pc, #288]	@ (80028fc <HAL_GPIO_Init+0x2bc>)
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	3302      	adds	r3, #2
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a40      	ldr	r2, [pc, #256]	@ (8002900 <HAL_GPIO_Init+0x2c0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d013      	beq.n	800282c <HAL_GPIO_Init+0x1ec>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <HAL_GPIO_Init+0x2c4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00d      	beq.n	8002828 <HAL_GPIO_Init+0x1e8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3e      	ldr	r2, [pc, #248]	@ (8002908 <HAL_GPIO_Init+0x2c8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <HAL_GPIO_Init+0x1e4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3d      	ldr	r2, [pc, #244]	@ (800290c <HAL_GPIO_Init+0x2cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d101      	bne.n	8002820 <HAL_GPIO_Init+0x1e0>
 800281c:	2303      	movs	r3, #3
 800281e:	e006      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002820:	2304      	movs	r3, #4
 8002822:	e004      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002824:	2302      	movs	r3, #2
 8002826:	e002      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_GPIO_Init+0x1ee>
 800282c:	2300      	movs	r3, #0
 800282e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002830:	f002 0203 	and.w	r2, r2, #3
 8002834:	0092      	lsls	r2, r2, #2
 8002836:	4093      	lsls	r3, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800283e:	492f      	ldr	r1, [pc, #188]	@ (80028fc <HAL_GPIO_Init+0x2bc>)
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d006      	beq.n	8002866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002858:	4b2d      	ldr	r3, [pc, #180]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	492c      	ldr	r1, [pc, #176]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
 8002864:	e006      	b.n	8002874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002866:	4b2a      	ldr	r3, [pc, #168]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	43db      	mvns	r3, r3
 800286e:	4928      	ldr	r1, [pc, #160]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002870:	4013      	ands	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002880:	4b23      	ldr	r3, [pc, #140]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4922      	ldr	r1, [pc, #136]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	43db      	mvns	r3, r3
 8002896:	491e      	ldr	r1, [pc, #120]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 8002898:	4013      	ands	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4918      	ldr	r1, [pc, #96]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028b6:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4914      	ldr	r1, [pc, #80]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d021      	beq.n	8002914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e021      	b.n	8002922 <HAL_GPIO_Init+0x2e2>
 80028de:	bf00      	nop
 80028e0:	10320000 	.word	0x10320000
 80028e4:	10310000 	.word	0x10310000
 80028e8:	10220000 	.word	0x10220000
 80028ec:	10210000 	.word	0x10210000
 80028f0:	10120000 	.word	0x10120000
 80028f4:	10110000 	.word	0x10110000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010800 	.word	0x40010800
 8002904:	40010c00 	.word	0x40010c00
 8002908:	40011000 	.word	0x40011000
 800290c:	40011400 	.word	0x40011400
 8002910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_GPIO_Init+0x304>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	43db      	mvns	r3, r3
 800291c:	4909      	ldr	r1, [pc, #36]	@ (8002944 <HAL_GPIO_Init+0x304>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	3301      	adds	r3, #1
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	f47f ae8e 	bne.w	8002654 <HAL_GPIO_Init+0x14>
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	372c      	adds	r7, #44	@ 0x2c
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	e001      	b.n	800296a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
 8002982:	4613      	mov	r3, r2
 8002984:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002986:	787b      	ldrb	r3, [r7, #1]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298c:	887a      	ldrh	r2, [r7, #2]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002992:	e003      	b.n	800299c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	041a      	lsls	r2, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	611a      	str	r2, [r3, #16]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0e8      	b.n	8002b8a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f006 fb07 	bl	8008fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 f9f6 	bl	8004dd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f4:	f002 f9cc 	bl	8004d90 <USB_CoreInit>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0bf      	b.n	8002b8a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 f9fa 	bl	8004e0a <USB_SetCurrentMode>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b0      	b.n	8002b8a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	e03e      	b.n	8002aac <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3311      	adds	r3, #17
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	3310      	adds	r3, #16
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	3313      	adds	r3, #19
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	3320      	adds	r3, #32
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3324      	adds	r3, #36	@ 0x24
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	791b      	ldrb	r3, [r3, #4]
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d3bb      	bcc.n	8002a2e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e044      	b.n	8002b46 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	440b      	add	r3, r1
 8002af6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	3301      	adds	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	791b      	ldrb	r3, [r3, #4]
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3b5      	bcc.n	8002abc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5a:	f002 f962 	bl	8004e22 <USB_DevInit>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00c      	b.n	8002b8a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fbe1 	bl	800734a <USB_DevDisconnect>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_Start+0x16>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e016      	b.n	8002bd6 <HAL_PCD_Start+0x44>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 f8f8 	bl	8004daa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bba:	2101      	movs	r1, #1
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f006 fc82 	bl	80094c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fbb5 	bl	8007336 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 fbb7 	bl	800735e <USB_ReadInterrupts>
 8002bf0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb1a 	bl	8003236 <PCD_EP_ISR_Handler>

    return;
 8002c02:	e119      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d013      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 fa55 	bl	80090d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f905 	bl	8002e3e <HAL_PCD_SetAddress>

    return;
 8002c34:	e100      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c58:	e0ee      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c76:	b292      	uxth	r2, r2
 8002c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c7c:	e0dc      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d027      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0208 	bic.w	r2, r2, #8
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f006 fa45 	bl	8009148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cd6:	e0af      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8083 	beq.w	8002dea <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e010      	b.n	8002d0c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	441a      	add	r2, r3
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	8812      	ldrh	r2, [r2, #0]
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	3320      	adds	r3, #32
 8002d00:	443b      	add	r3, r7
 8002d02:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002d06:	7ffb      	ldrb	r3, [r7, #31]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	7ffb      	ldrb	r3, [r7, #31]
 8002d0e:	2b07      	cmp	r3, #7
 8002d10:	d9eb      	bls.n	8002cea <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	b292      	uxth	r2, r2
 8002d26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	b292      	uxth	r2, r2
 8002d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d42:	bf00      	nop
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f6      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e00f      	b.n	8002d94 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d74:	7ffb      	ldrb	r3, [r7, #31]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	7ffa      	ldrb	r2, [r7, #31]
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	440a      	add	r2, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	3320      	adds	r3, #32
 8002d86:	443b      	add	r3, r7
 8002d88:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d8c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	3301      	adds	r3, #1
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	7ffb      	ldrb	r3, [r7, #31]
 8002d96:	2b07      	cmp	r3, #7
 8002d98:	d9ec      	bls.n	8002d74 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0208 	orr.w	r2, r2, #8
 8002dac:	b292      	uxth	r2, r2
 8002dae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0204 	orr.w	r2, r2, #4
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f006 f996 	bl	8009114 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002de8:	e026      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00f      	beq.n	8002e14 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e06:	b292      	uxth	r2, r2
 8002e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f006 f954 	bl	80090ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002e12:	e011      	b.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002e36:	bf00      	nop
  }
}
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_SetAddress+0x1a>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e012      	b.n	8002e7e <HAL_PCD_SetAddress+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fa4e 	bl	8007310 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	4608      	mov	r0, r1
 8002e90:	4611      	mov	r1, r2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4603      	mov	r3, r0
 8002e96:	70fb      	strb	r3, [r7, #3]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	803b      	strh	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	da0e      	bge.n	8002eca <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	f003 0207 	and.w	r2, r3, #7
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	3310      	adds	r3, #16
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	705a      	strb	r2, [r3, #1]
 8002ec8:	e00e      	b.n	8002ee8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	f003 0207 	and.w	r2, r3, #7
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef4:	883a      	ldrh	r2, [r7, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	78ba      	ldrb	r2, [r7, #2]
 8002efe:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f00:	78bb      	ldrb	r3, [r7, #2]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d102      	bne.n	8002f0c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_PCD_EP_Open+0x94>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e00e      	b.n	8002f38 <HAL_PCD_EP_Open+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68f9      	ldr	r1, [r7, #12]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 ff97 	bl	8004e5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da0e      	bge.n	8002f72 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 0207 	and.w	r2, r3, #7
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	3310      	adds	r3, #16
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	705a      	strb	r2, [r3, #1]
 8002f70:	e00e      	b.n	8002f90 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 0207 	and.w	r2, r3, #7
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_EP_Close+0x6a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e00e      	b.n	8002fc8 <HAL_PCD_EP_Close+0x88>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f002 fb0f 	bl	80055dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f003 0207 	and.w	r2, r3, #7
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	b2da      	uxtb	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 fcc6 	bl	80059b4 <USB_EPStartXfer>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003054:	681b      	ldr	r3, [r3, #0]
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 0207 	and.w	r2, r3, #7
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	3310      	adds	r3, #16
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2201      	movs	r2, #1
 80030aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ac:	7afb      	ldrb	r3, [r7, #11]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6979      	ldr	r1, [r7, #20]
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fc78 	bl	80059b4 <USB_EPStartXfer>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	7912      	ldrb	r2, [r2, #4]
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04c      	b.n	8003186 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da0e      	bge.n	8003112 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 0207 	and.w	r2, r3, #7
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	3310      	adds	r3, #16
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
 8003110:	e00c      	b.n	800312c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_EP_SetStall+0x7e>
 8003148:	2302      	movs	r3, #2
 800314a:	e01c      	b.n	8003186 <HAL_PCD_EP_SetStall+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 ffdb 	bl	8007116 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f004 f900 	bl	800737c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	7912      	ldrb	r2, [r2, #4]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e040      	b.n	800322e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0e      	bge.n	80031d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	3310      	adds	r3, #16
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00e      	b.n	80031f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0207 	and.w	r2, r3, #7
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_PCD_EP_ClrStall+0x82>
 800320c:	2302      	movs	r3, #2
 800320e:	e00e      	b.n	800322e <HAL_PCD_EP_ClrStall+0xa0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 ffc9 	bl	80071b6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b096      	sub	sp, #88	@ 0x58
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800323e:	e3bb      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003248:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800324c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800325a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 8175 	bne.w	800354e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003264:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d14e      	bne.n	800330e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800327c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003280:	81fb      	strh	r3, [r7, #14]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	89fb      	ldrh	r3, [r7, #14]
 8003288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3310      	adds	r3, #16
 8003298:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	3302      	adds	r3, #2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	441a      	add	r2, r3
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032d4:	2100      	movs	r1, #0
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f005 fed5 	bl	8009086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7b5b      	ldrb	r3, [r3, #13]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8368 	beq.w	80039b8 <PCD_EP_ISR_Handler+0x782>
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 8363 	bne.w	80039b8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7b5b      	ldrb	r3, [r3, #13]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	735a      	strb	r2, [r3, #13]
 800330c:	e354      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003314:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003328:	2b00      	cmp	r3, #0
 800332a:	d034      	beq.n	8003396 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003334:	b29b      	uxth	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	3306      	adds	r3, #6
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003356:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003364:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003368:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800336a:	b29b      	uxth	r3, r3
 800336c:	f004 f857 	bl	800741e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800337c:	4013      	ands	r3, r2
 800337e:	823b      	strh	r3, [r7, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	8a3a      	ldrh	r2, [r7, #16]
 8003386:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800338a:	b292      	uxth	r2, r2
 800338c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f005 fe4c 	bl	800902c <HAL_PCD_SetupStageCallback>
 8003394:	e310      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003396:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800339a:	2b00      	cmp	r3, #0
 800339c:	f280 830c 	bge.w	80039b8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033ac:	4013      	ands	r3, r2
 80033ae:	83fb      	strh	r3, [r7, #30]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	8bfa      	ldrh	r2, [r7, #30]
 80033b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033ba:	b292      	uxth	r2, r2
 80033bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	3306      	adds	r3, #6
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d019      	beq.n	8003426 <PCD_EP_ISR_Handler+0x1f0>
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d015      	beq.n	8003426 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	6959      	ldr	r1, [r3, #20]
 8003402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003404:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800340a:	b29b      	uxth	r3, r3
 800340c:	f004 f807 	bl	800741e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	441a      	add	r2, r3
 800341a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800341c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800341e:	2100      	movs	r1, #0
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f005 fe15 	bl	8009050 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 82bd 	bne.w	80039b8 <PCD_EP_ISR_Handler+0x782>
 800343e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003442:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003446:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800344a:	f000 82b5 	beq.w	80039b8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4413      	add	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003478:	b29a      	uxth	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b3e      	cmp	r3, #62	@ 0x3e
 8003484:	d91d      	bls.n	80034c2 <PCD_EP_ISR_Handler+0x28c>
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <PCD_EP_ISR_Handler+0x26a>
 800349a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800349c:	3b01      	subs	r3, #1
 800349e:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	e026      	b.n	8003510 <PCD_EP_ISR_Handler+0x2da>
 80034c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <PCD_EP_ISR_Handler+0x2aa>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034d8:	b29a      	uxth	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e017      	b.n	8003510 <PCD_EP_ISR_Handler+0x2da>
 80034e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <PCD_EP_ISR_Handler+0x2c4>
 80034f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f6:	3301      	adds	r3, #1
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29a      	uxth	r2, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003502:	b29b      	uxth	r3, r3
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	b29b      	uxth	r3, r3
 8003508:	4313      	orrs	r3, r2
 800350a:	b29a      	uxth	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800351c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003520:	827b      	strh	r3, [r7, #18]
 8003522:	8a7b      	ldrh	r3, [r7, #18]
 8003524:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003528:	827b      	strh	r3, [r7, #18]
 800352a:	8a7b      	ldrh	r3, [r7, #18]
 800352c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003530:	827b      	strh	r3, [r7, #18]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	8a7b      	ldrh	r3, [r7, #18]
 8003538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800353c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003548:	b29b      	uxth	r3, r3
 800354a:	8013      	strh	r3, [r2, #0]
 800354c:	e234      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003562:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003566:	2b00      	cmp	r3, #0
 8003568:	f280 80fc 	bge.w	8003764 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003582:	4013      	ands	r3, r2
 8003584:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800359a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800359e:	b292      	uxth	r2, r2
 80035a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035a2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ba:	7b1b      	ldrb	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d125      	bne.n	800360c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	3306      	adds	r3, #6
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8092 	beq.w	800371a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fc:	6959      	ldr	r1, [r3, #20]
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	88da      	ldrh	r2, [r3, #6]
 8003602:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003606:	f003 ff0a 	bl	800741e <USB_ReadPMA>
 800360a:	e086      	b.n	800371a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800360c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360e:	78db      	ldrb	r3, [r3, #3]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d10a      	bne.n	800362a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003614:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003618:	461a      	mov	r2, r3
 800361a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f9d9 	bl	80039d4 <HAL_PCD_EP_DB_Receive>
 8003622:	4603      	mov	r3, r0
 8003624:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003628:	e077      	b.n	800371a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003644:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800365a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003666:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	3302      	adds	r3, #2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80036b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02e      	beq.n	800371a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c2:	6959      	ldr	r1, [r3, #20]
 80036c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c6:	891a      	ldrh	r2, [r3, #8]
 80036c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80036cc:	f003 fea7 	bl	800741e <USB_ReadPMA>
 80036d0:	e023      	b.n	800371a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	3306      	adds	r3, #6
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80036fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	6959      	ldr	r1, [r3, #20]
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	895a      	ldrh	r2, [r3, #10]
 8003712:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003716:	f003 fe82 	bl	800741e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	69da      	ldr	r2, [r3, #28]
 800371e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003722:	441a      	add	r2, r3
 8003724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003726:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003730:	441a      	add	r2, r3
 8003732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003734:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <PCD_EP_ISR_Handler+0x514>
 800373e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	429a      	cmp	r2, r3
 8003748:	d206      	bcs.n	8003758 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f005 fc7d 	bl	8009050 <HAL_PCD_DataOutStageCallback>
 8003756:	e005      	b.n	8003764 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800375e:	4618      	mov	r0, r3
 8003760:	f002 f928 	bl	80059b4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003764:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8123 	beq.w	80039b8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003772:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	3310      	adds	r3, #16
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80037b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037be:	b29b      	uxth	r3, r3
 80037c0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80037c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c4:	78db      	ldrb	r3, [r3, #3]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	f040 80a2 	bne.w	8003910 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80037d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d4:	7b1b      	ldrb	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8093 	beq.w	8003902 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d046      	beq.n	8003876 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d126      	bne.n	800383e <PCD_EP_ISR_Handler+0x608>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	4413      	add	r3, r2
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	011a      	lsls	r2, r3, #4
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	4413      	add	r3, r2
 8003812:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003816:	623b      	str	r3, [r7, #32]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003822:	b29a      	uxth	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003836:	b29a      	uxth	r2, r3
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e061      	b.n	8003902 <PCD_EP_ISR_Handler+0x6cc>
 800383e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d15d      	bne.n	8003902 <PCD_EP_ISR_Handler+0x6cc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003854:	b29b      	uxth	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	4413      	add	r3, r2
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	011a      	lsls	r2, r3, #4
 8003864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003866:	4413      	add	r3, r2
 8003868:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800386c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e045      	b.n	8003902 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800387c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d126      	bne.n	80038d2 <PCD_EP_ISR_Handler+0x69c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	637b      	str	r3, [r7, #52]	@ 0x34
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003898:	4413      	add	r3, r2
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	e017      	b.n	8003902 <PCD_EP_ISR_Handler+0x6cc>
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d113      	bne.n	8003902 <PCD_EP_ISR_Handler+0x6cc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e8:	4413      	add	r3, r2
 80038ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f4:	4413      	add	r3, r2
 80038f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	2200      	movs	r2, #0
 8003900:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f005 fbbc 	bl	8009086 <HAL_PCD_DataInStageCallback>
 800390e:	e053      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d146      	bne.n	80039aa <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	3302      	adds	r3, #2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003944:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394a:	699a      	ldr	r2, [r3, #24]
 800394c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003950:	429a      	cmp	r2, r3
 8003952:	d907      	bls.n	8003964 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800395c:	1ad2      	subs	r2, r2, r3
 800395e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003960:	619a      	str	r2, [r3, #24]
 8003962:	e002      	b.n	800396a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800396a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f005 fb84 	bl	8009086 <HAL_PCD_DataInStageCallback>
 800397e:	e01b      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003988:	441a      	add	r2, r3
 800398a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800398e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003996:	441a      	add	r2, r3
 8003998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 f806 	bl	80059b4 <USB_EPStartXfer>
 80039a8:	e006      	b.n	80039b8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039ae:	461a      	mov	r2, r3
 80039b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f91b 	bl	8003bee <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b21b      	sxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f6ff ac3b 	blt.w	8003240 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3758      	adds	r7, #88	@ 0x58
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d07e      	beq.n	8003aea <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	3302      	adds	r3, #2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a14:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	8b7b      	ldrh	r3, [r7, #26]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d306      	bcc.n	8003a2e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	8b7b      	ldrh	r3, [r7, #26]
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	619a      	str	r2, [r3, #24]
 8003a2c:	e002      	b.n	8003a34 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d123      	bne.n	8003a84 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	833b      	strh	r3, [r7, #24]
 8003a58:	8b3b      	ldrh	r3, [r7, #24]
 8003a5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a5e:	833b      	strh	r3, [r7, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	8b3b      	ldrh	r3, [r7, #24]
 8003a70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01f      	beq.n	8003ace <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa8:	82fb      	strh	r3, [r7, #22]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	8afb      	ldrh	r3, [r7, #22]
 8003aba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003abe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ac6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8087 	beq.w	8003be4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6959      	ldr	r1, [r3, #20]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	891a      	ldrh	r2, [r3, #8]
 8003ae2:	8b7b      	ldrh	r3, [r7, #26]
 8003ae4:	f003 fc9b 	bl	800741e <USB_ReadPMA>
 8003ae8:	e07c      	b.n	8003be4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	3306      	adds	r3, #6
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	8b7b      	ldrh	r3, [r7, #26]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d306      	bcc.n	8003b2c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	8b7b      	ldrh	r3, [r7, #26]
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	619a      	str	r2, [r3, #24]
 8003b2a:	e002      	b.n	8003b32 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d123      	bne.n	8003b82 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b54:	83fb      	strh	r3, [r7, #30]
 8003b56:	8bfb      	ldrh	r3, [r7, #30]
 8003b58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b5c:	83fb      	strh	r3, [r7, #30]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	8bfb      	ldrh	r3, [r7, #30]
 8003b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11f      	bne.n	8003bcc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba6:	83bb      	strh	r3, [r7, #28]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	8bbb      	ldrh	r3, [r7, #28]
 8003bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6959      	ldr	r1, [r3, #20]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	895a      	ldrh	r2, [r3, #10]
 8003bde:	8b7b      	ldrh	r3, [r7, #26]
 8003be0:	f003 fc1d 	bl	800741e <USB_ReadPMA>
    }
  }

  return count;
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b0a4      	sub	sp, #144	@ 0x90
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 81dd 	beq.w	8003fc2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3302      	adds	r3, #2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	699a      	ldr	r2, [r3, #24]
 8003c38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d907      	bls.n	8003c50 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	699a      	ldr	r2, [r3, #24]
 8003c44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003c48:	1ad2      	subs	r2, r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	619a      	str	r2, [r3, #24]
 8003c4e:	e002      	b.n	8003c56 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 80b9 	bne.w	8003dd2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d126      	bne.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7c:	4413      	add	r3, r2
 8003c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	e01a      	b.n	8003cec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d116      	bne.n	8003cec <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	4413      	add	r3, r2
 8003cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	011a      	lsls	r2, r3, #4
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	4413      	add	r3, r2
 8003ce0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d126      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	011a      	lsls	r2, r3, #4
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	e017      	b.n	8003d78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d113      	bne.n	8003d78 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	4413      	add	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	011a      	lsls	r2, r3, #4
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2200      	movs	r2, #0
 8003d76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f005 f981 	bl	8009086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 82fc 	beq.w	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003daa:	82fb      	strh	r3, [r7, #22]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	441a      	add	r2, r3
 8003dba:	8afb      	ldrh	r3, [r7, #22]
 8003dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	8013      	strh	r3, [r2, #0]
 8003dd0:	e2da      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d021      	beq.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	f040 82ae 	bne.w	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e34:	441a      	add	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e42:	441a      	add	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d30b      	bcc.n	8003e6c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	621a      	str	r2, [r3, #32]
 8003e6a:	e017      	b.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d108      	bne.n	8003e86 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003e74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003e84:	e00a      	b.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d165      	bne.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x382>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb8:	4413      	add	r3, r2
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	011a      	lsls	r2, r3, #4
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ee2:	d91d      	bls.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x332>
 8003ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <HAL_PCD_EP_DB_Transmit+0x310>
 8003ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efa:	3b01      	subs	r3, #1
 8003efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e044      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_PCD_EP_DB_Transmit+0x350>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	e035      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f54:	3301      	adds	r3, #1
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	801a      	strh	r2, [r3, #0]
 8003f6e:	e01c      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d118      	bne.n	8003faa <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f8c:	4413      	add	r3, r2
 8003f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011a      	lsls	r2, r3, #4
 8003f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f98:	4413      	add	r3, r2
 8003f9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6959      	ldr	r1, [r3, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	891a      	ldrh	r2, [r3, #8]
 8003fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f003 f9e9 	bl	8007392 <USB_WritePMA>
 8003fc0:	e1e2      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3306      	adds	r3, #6
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d307      	bcc.n	800400a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	619a      	str	r2, [r3, #24]
 8004008:	e002      	b.n	8004010 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f040 80c0 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d126      	bne.n	8004070 <HAL_PCD_EP_DB_Transmit+0x482>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004036:	4413      	add	r3, r2
 8004038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	011a      	lsls	r2, r3, #4
 8004040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004042:	4413      	add	r3, r2
 8004044:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800404a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004054:	b29a      	uxth	r2, r3
 8004056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004068:	b29a      	uxth	r2, r3
 800406a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	e01a      	b.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d116      	bne.n	80040a6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	667b      	str	r3, [r7, #100]	@ 0x64
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800408c:	4413      	add	r3, r2
 800408e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	011a      	lsls	r2, r3, #4
 8004096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004098:	4413      	add	r3, r2
 800409a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800409e:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a2:	2200      	movs	r2, #0
 80040a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d12b      	bne.n	800410c <HAL_PCD_EP_DB_Transmit+0x51e>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c8:	4413      	add	r3, r2
 80040ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	011a      	lsls	r2, r3, #4
 80040d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d4:	4413      	add	r3, r2
 80040d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004102:	b29a      	uxth	r2, r3
 8004104:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004108:	801a      	strh	r2, [r3, #0]
 800410a:	e017      	b.n	800413c <HAL_PCD_EP_DB_Transmit+0x54e>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d113      	bne.n	800413c <HAL_PCD_EP_DB_Transmit+0x54e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004122:	4413      	add	r3, r2
 8004124:	677b      	str	r3, [r7, #116]	@ 0x74
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	011a      	lsls	r2, r3, #4
 800412c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800412e:	4413      	add	r3, r2
 8004130:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004134:	673b      	str	r3, [r7, #112]	@ 0x70
 8004136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004138:	2200      	movs	r2, #0
 800413a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f004 ff9f 	bl	8009086 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800414e:	2b00      	cmp	r3, #0
 8004150:	f040 811a 	bne.w	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800418c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
 8004198:	e0f6      	b.n	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d121      	bne.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	f040 80ca 	bne.w	8004388 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041fc:	441a      	add	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800420a:	441a      	add	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	6a1a      	ldr	r2, [r3, #32]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	d30b      	bcc.n	8004234 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	621a      	str	r2, [r3, #32]
 8004232:	e017      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d108      	bne.n	800424e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800423c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800424c:	e00a      	b.n	8004264 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2200      	movs	r2, #0
 800425a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	657b      	str	r3, [r7, #84]	@ 0x54
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d165      	bne.n	800433e <HAL_PCD_EP_DB_Transmit+0x750>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004286:	4413      	add	r3, r2
 8004288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	011a      	lsls	r2, r3, #4
 8004290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004292:	4413      	add	r3, r2
 8004294:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800429a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80042b0:	d91d      	bls.n	80042ee <HAL_PCD_EP_DB_Transmit+0x700>
 80042b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_PCD_EP_DB_Transmit+0x6de>
 80042c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042c8:	3b01      	subs	r3, #1
 80042ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	b29b      	uxth	r3, r3
 80042da:	4313      	orrs	r3, r2
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e041      	b.n	8004372 <HAL_PCD_EP_DB_Transmit+0x784>
 80042ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <HAL_PCD_EP_DB_Transmit+0x71e>
 80042f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004304:	b29a      	uxth	r2, r3
 8004306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e032      	b.n	8004372 <HAL_PCD_EP_DB_Transmit+0x784>
 800430c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_PCD_EP_DB_Transmit+0x738>
 8004320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004322:	3301      	adds	r3, #1
 8004324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29a      	uxth	r2, r3
 800432c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800432e:	b29b      	uxth	r3, r3
 8004330:	029b      	lsls	r3, r3, #10
 8004332:	b29b      	uxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800433a:	801a      	strh	r2, [r3, #0]
 800433c:	e019      	b.n	8004372 <HAL_PCD_EP_DB_Transmit+0x784>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d115      	bne.n	8004372 <HAL_PCD_EP_DB_Transmit+0x784>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800434e:	b29b      	uxth	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	4413      	add	r3, r2
 8004356:	657b      	str	r3, [r7, #84]	@ 0x54
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	011a      	lsls	r2, r3, #4
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	4413      	add	r3, r2
 8004362:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004366:	653b      	str	r3, [r7, #80]	@ 0x50
 8004368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800436c:	b29a      	uxth	r2, r3
 800436e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004370:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6959      	ldr	r1, [r3, #20]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	895a      	ldrh	r2, [r3, #10]
 800437e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004382:	b29b      	uxth	r3, r3
 8004384:	f003 f805 	bl	8007392 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800439e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043a2:	82bb      	strh	r3, [r7, #20]
 80043a4:	8abb      	ldrh	r3, [r7, #20]
 80043a6:	f083 0310 	eor.w	r3, r3, #16
 80043aa:	82bb      	strh	r3, [r7, #20]
 80043ac:	8abb      	ldrh	r3, [r7, #20]
 80043ae:	f083 0320 	eor.w	r3, r3, #32
 80043b2:	82bb      	strh	r3, [r7, #20]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	441a      	add	r2, r3
 80043c2:	8abb      	ldrh	r3, [r7, #20]
 80043c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3790      	adds	r7, #144	@ 0x90
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	817b      	strh	r3, [r7, #10]
 80043f0:	4613      	mov	r3, r2
 80043f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	f003 0207 	and.w	r2, r3, #7
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	3310      	adds	r3, #16
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e009      	b.n	800442c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004418:	897a      	ldrh	r2, [r7, #10]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800442c:	893b      	ldrh	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	b29a      	uxth	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	80da      	strh	r2, [r3, #6]
 8004440:	e00b      	b.n	800445a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2201      	movs	r2, #1
 8004446:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	b29a      	uxth	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	b29a      	uxth	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr
	...

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e272      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8087 	beq.w	8004596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	4b92      	ldr	r3, [pc, #584]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b04      	cmp	r3, #4
 8004492:	d00c      	beq.n	80044ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004494:	4b8f      	ldr	r3, [pc, #572]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d112      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
 80044a0:	4b8c      	ldr	r3, [pc, #560]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4b89      	ldr	r3, [pc, #548]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06c      	beq.n	8004594 <HAL_RCC_OscConfig+0x12c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d168      	bne.n	8004594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e24c      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x76>
 80044d0:	4b80      	ldr	r3, [pc, #512]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7f      	ldr	r2, [pc, #508]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e02e      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b7b      	ldr	r3, [pc, #492]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7a      	ldr	r2, [pc, #488]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b78      	ldr	r3, [pc, #480]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a77      	ldr	r2, [pc, #476]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e01d      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0xbc>
 800450a:	4b72      	ldr	r3, [pc, #456]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a71      	ldr	r2, [pc, #452]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b6f      	ldr	r3, [pc, #444]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6e      	ldr	r2, [pc, #440]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e00b      	b.n	800453c <HAL_RCC_OscConfig+0xd4>
 8004524:	4b6b      	ldr	r3, [pc, #428]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a6a      	ldr	r2, [pc, #424]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800452a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4b68      	ldr	r3, [pc, #416]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a67      	ldr	r2, [pc, #412]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d013      	beq.n	800456c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd ff40 	bl	80023c8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd ff3c 	bl	80023c8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e200      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b5d      	ldr	r3, [pc, #372]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0xe4>
 800456a:	e014      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fd ff2c 	bl	80023c8 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fd ff28 	bl	80023c8 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1ec      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	4b53      	ldr	r3, [pc, #332]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x10c>
 8004592:	e000      	b.n	8004596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d063      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a2:	4b4c      	ldr	r3, [pc, #304]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00b      	beq.n	80045c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ae:	4b49      	ldr	r3, [pc, #292]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
 80045ba:	4b46      	ldr	r3, [pc, #280]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d116      	bne.n	80045f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c6:	4b43      	ldr	r3, [pc, #268]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e1c0      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b3d      	ldr	r3, [pc, #244]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4939      	ldr	r1, [pc, #228]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	e03a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_OscConfig+0x270>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004602:	f7fd fee1 	bl	80023c8 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fd fedd 	bl	80023c8 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1a1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	4b2d      	ldr	r3, [pc, #180]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004628:	4b2a      	ldr	r3, [pc, #168]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	4927      	ldr	r1, [pc, #156]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800463e:	4b26      	ldr	r3, [pc, #152]	@ (80046d8 <HAL_RCC_OscConfig+0x270>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd fec0 	bl	80023c8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464c:	f7fd febc 	bl	80023c8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e180      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03a      	beq.n	80046ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d019      	beq.n	80046b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b17      	ldr	r3, [pc, #92]	@ (80046dc <HAL_RCC_OscConfig+0x274>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fd fea0 	bl	80023c8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fd fe9c 	bl	80023c8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e160      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <HAL_RCC_OscConfig+0x26c>)
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f000 fa9c 	bl	8004be8 <RCC_Delay>
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <HAL_RCC_OscConfig+0x274>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b8:	f7fd fe86 	bl	80023c8 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046be:	e00f      	b.n	80046e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fd fe82 	bl	80023c8 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d908      	bls.n	80046e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e146      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	42420000 	.word	0x42420000
 80046dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b92      	ldr	r3, [pc, #584]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e9      	bne.n	80046c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80a6 	beq.w	8004846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a87      	ldr	r2, [pc, #540]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]
 8004716:	4b85      	ldr	r3, [pc, #532]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	@ (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b7f      	ldr	r3, [pc, #508]	@ (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	@ (8004930 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fd fe43 	bl	80023c8 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fd fe3f 	bl	80023c8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	@ 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e103      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	@ (8004930 <HAL_RCC_OscConfig+0x4c8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x312>
 800476c:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a6e      	ldr	r2, [pc, #440]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x334>
 8004782:	4b6a      	ldr	r3, [pc, #424]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a69      	ldr	r2, [pc, #420]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6213      	str	r3, [r2, #32]
 800478e:	4b67      	ldr	r3, [pc, #412]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	4a66      	ldr	r2, [pc, #408]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6213      	str	r3, [r2, #32]
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x356>
 80047a4:	4b61      	ldr	r3, [pc, #388]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a60      	ldr	r2, [pc, #384]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	4b5e      	ldr	r3, [pc, #376]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	4a5d      	ldr	r2, [pc, #372]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6213      	str	r3, [r2, #32]
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x36e>
 80047be:	4b5b      	ldr	r3, [pc, #364]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6213      	str	r3, [r2, #32]
 80047ca:	4b58      	ldr	r3, [pc, #352]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a57      	ldr	r2, [pc, #348]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047de:	f7fd fdf3 	bl	80023c8 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fdef 	bl	80023c8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0b1      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x37e>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fd fddd 	bl	80023c8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fd fdd9 	bl	80023c8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e09b      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a3b      	ldr	r2, [pc, #236]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d061      	beq.n	8004920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d146      	bne.n	80048f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b33      	ldr	r3, [pc, #204]	@ (8004934 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd fdad 	bl	80023c8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd fda9 	bl	80023c8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e06d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004898:	d108      	bne.n	80048ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	4921      	ldr	r1, [pc, #132]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ac:	4b1f      	ldr	r3, [pc, #124]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a19      	ldr	r1, [r3, #32]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	430b      	orrs	r3, r1
 80048be:	491b      	ldr	r1, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fd7d 	bl	80023c8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fd fd79 	bl	80023c8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x46a>
 80048f0:	e035      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_RCC_OscConfig+0x4cc>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fd fd66 	bl	80023c8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004900:	f7fd fd62 	bl	80023c8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e026      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCC_OscConfig+0x4c4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x498>
 800491e:	e01e      	b.n	800495e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e019      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004938:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x500>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	429a      	cmp	r2, r3
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0d0      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b6a      	ldr	r3, [pc, #424]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d910      	bls.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b67      	ldr	r3, [pc, #412]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 0207 	bic.w	r2, r3, #7
 8004996:	4965      	ldr	r1, [pc, #404]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499e:	4b63      	ldr	r3, [pc, #396]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0b8      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d020      	beq.n	80049fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c8:	4b59      	ldr	r3, [pc, #356]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	4a58      	ldr	r2, [pc, #352]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a52      	ldr	r2, [pc, #328]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80049ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ec:	4b50      	ldr	r3, [pc, #320]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	494d      	ldr	r1, [pc, #308]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d040      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a12:	4b47      	ldr	r3, [pc, #284]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d115      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e07f      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2a:	4b41      	ldr	r3, [pc, #260]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e073      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e06b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4a:	4b39      	ldr	r3, [pc, #228]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f023 0203 	bic.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4936      	ldr	r1, [pc, #216]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a5c:	f7fd fcb4 	bl	80023c8 <HAL_GetTick>
 8004a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fd fcb0 	bl	80023c8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e053      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 020c 	and.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d1eb      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d210      	bcs.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0207 	bic.w	r2, r3, #7
 8004aa2:	4922      	ldr	r1, [pc, #136]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e032      	b.n	8004b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac8:	4b19      	ldr	r3, [pc, #100]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4916      	ldr	r1, [pc, #88]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	490e      	ldr	r1, [pc, #56]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afa:	f000 f821 	bl	8004b40 <HAL_RCC_GetSysClockFreq>
 8004afe:	4602      	mov	r2, r0
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	490a      	ldr	r1, [pc, #40]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	5ccb      	ldrb	r3, [r1, r3]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a09      	ldr	r2, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1cc>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b16:	4b09      	ldr	r3, [pc, #36]	@ (8004b3c <HAL_RCC_ClockConfig+0x1d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fd fc12 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800c8a4 	.word	0x0800c8a4
 8004b38:	20000004 	.word	0x20000004
 8004b3c:	20000008 	.word	0x20000008

08004b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x30>
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x36>
 8004b6e:	e027      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b70:	4b19      	ldr	r3, [pc, #100]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b72:	613b      	str	r3, [r7, #16]
      break;
 8004b74:	e027      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0c9b      	lsrs	r3, r3, #18
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d010      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b8e:	4b11      	ldr	r3, [pc, #68]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	0c5b      	lsrs	r3, r3, #17
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ba2:	fb03 f202 	mul.w	r2, r3, r2
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e004      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	613b      	str	r3, [r7, #16]
      break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc2:	613b      	str	r3, [r7, #16]
      break;
 8004bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc6:	693b      	ldr	r3, [r7, #16]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	0800c8b4 	.word	0x0800c8b4
 8004be0:	0800c8c4 	.word	0x0800c8c4
 8004be4:	003d0900 	.word	0x003d0900

08004be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <RCC_Delay+0x34>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <RCC_Delay+0x38>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a5b      	lsrs	r3, r3, #9
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c04:	bf00      	nop
  }
  while (Delay --);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	60fa      	str	r2, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <RCC_Delay+0x1c>
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000004 	.word	0x20000004
 8004c20:	10624dd3 	.word	0x10624dd3

08004c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d07d      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c44:	4b4f      	ldr	r3, [pc, #316]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b4c      	ldr	r3, [pc, #304]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4a4b      	ldr	r2, [pc, #300]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	61d3      	str	r3, [r2, #28]
 8004c5c:	4b49      	ldr	r3, [pc, #292]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	4b46      	ldr	r3, [pc, #280]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d118      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c78:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c84:	f7fd fba0 	bl	80023c8 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fd fb9c 	bl	80023c8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e06d      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004caa:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02e      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d027      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cde:	4a29      	ldr	r2, [pc, #164]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fd fb6b 	bl	80023c8 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd fb67 	bl	80023c8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e036      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ee      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4917      	ldr	r1, [pc, #92]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d30:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d48:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	490b      	ldr	r1, [pc, #44]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d008      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d66:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4904      	ldr	r1, [pc, #16]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42420440 	.word	0x42420440

08004d90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	4638      	mov	r0, r7
 8004d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004dbe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr

08004dd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004dde:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004de2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	460b      	mov	r3, r1
 8004e14:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b085      	sub	sp, #20
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b09d      	sub	sp, #116	@ 0x74
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	78db      	ldrb	r3, [r3, #3]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d81f      	bhi.n	8004ece <USB_ActivateEndpoint+0x72>
 8004e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e94 <USB_ActivateEndpoint+0x38>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004ec1 	.word	0x08004ec1
 8004e9c:	08004ed7 	.word	0x08004ed7
 8004ea0:	08004eb3 	.word	0x08004eb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ea8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004eb0:	e012      	b.n	8004ed8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004eb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004eb6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004eba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ebe:	e00b      	b.n	8004ed8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ec0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ec4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ec8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004ecc:	e004      	b.n	8004ed8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004ed4:	e000      	b.n	8004ed8 <USB_ActivateEndpoint+0x7c>
      break;
 8004ed6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	7812      	ldrb	r2, [r2, #0]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	7b1b      	ldrb	r3, [r3, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 8178 	bne.w	8005238 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8084 	beq.w	800505a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	4413      	add	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	011a      	lsls	r2, r3, #4
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	88db      	ldrh	r3, [r3, #6]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	827b      	strh	r3, [r7, #18]
 8004f94:	8a7b      	ldrh	r3, [r7, #18]
 8004f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01b      	beq.n	8004fd6 <USB_ActivateEndpoint+0x17a>
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb4:	823b      	strh	r3, [r7, #16]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	8a3b      	ldrh	r3, [r7, #16]
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d020      	beq.n	8005020 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	81bb      	strh	r3, [r7, #12]
 8004ff6:	89bb      	ldrh	r3, [r7, #12]
 8004ff8:	f083 0320 	eor.w	r3, r3, #32
 8004ffc:	81bb      	strh	r3, [r7, #12]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	89bb      	ldrh	r3, [r7, #12]
 800500a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800500e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501a:	b29b      	uxth	r3, r3
 800501c:	8013      	strh	r3, [r2, #0]
 800501e:	e2d5      	b.n	80055cc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005036:	81fb      	strh	r3, [r7, #14]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	89fb      	ldrh	r3, [r7, #14]
 8005044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800504c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005054:	b29b      	uxth	r3, r3
 8005056:	8013      	strh	r3, [r2, #0]
 8005058:	e2b8      	b.n	80055cc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	633b      	str	r3, [r7, #48]	@ 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	4413      	add	r3, r2
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	011a      	lsls	r2, r3, #4
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	4413      	add	r3, r2
 8005078:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	88db      	ldrh	r3, [r3, #6]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	b29b      	uxth	r3, r3
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	4413      	add	r3, r2
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	011a      	lsls	r2, r3, #4
 80050a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050aa:	4413      	add	r3, r2
 80050ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80050c8:	d91d      	bls.n	8005106 <USB_ActivateEndpoint+0x2aa>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d102      	bne.n	80050e4 <USB_ActivateEndpoint+0x288>
 80050de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050e0:	3b01      	subs	r3, #1
 80050e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	029b      	lsls	r3, r3, #10
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e026      	b.n	8005154 <USB_ActivateEndpoint+0x2f8>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <USB_ActivateEndpoint+0x2c8>
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b29b      	uxth	r3, r3
 8005114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511c:	b29a      	uxth	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	e017      	b.n	8005154 <USB_ActivateEndpoint+0x2f8>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <USB_ActivateEndpoint+0x2e2>
 8005138:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800513a:	3301      	adds	r3, #1
 800513c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b29a      	uxth	r2, r3
 8005144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29b      	uxth	r3, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	b29a      	uxth	r2, r3
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <USB_ActivateEndpoint+0x348>
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800517e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005182:	843b      	strh	r3, [r7, #32]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	8c3b      	ldrh	r3, [r7, #32]
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005198:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800519c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d124      	bne.n	80051f6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c2:	83bb      	strh	r3, [r7, #28]
 80051c4:	8bbb      	ldrh	r3, [r7, #28]
 80051c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051ca:	83bb      	strh	r3, [r7, #28]
 80051cc:	8bbb      	ldrh	r3, [r7, #28]
 80051ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051d2:	83bb      	strh	r3, [r7, #28]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	441a      	add	r2, r3
 80051de:	8bbb      	ldrh	r3, [r7, #28]
 80051e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8013      	strh	r3, [r2, #0]
 80051f4:	e1ea      	b.n	80055cc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520c:	83fb      	strh	r3, [r7, #30]
 800520e:	8bfb      	ldrh	r3, [r7, #30]
 8005210:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005214:	83fb      	strh	r3, [r7, #30]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	8bfb      	ldrh	r3, [r7, #30]
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800522a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]
 8005236:	e1c9      	b.n	80055cc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	78db      	ldrb	r3, [r3, #3]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d11e      	bne.n	800527e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005268:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800526c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005270:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005278:	b29b      	uxth	r3, r3
 800527a:	8013      	strh	r3, [r2, #0]
 800527c:	e01d      	b.n	80052ba <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005294:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	441a      	add	r2, r3
 80052a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ca:	4413      	add	r3, r2
 80052cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	011a      	lsls	r2, r3, #4
 80052d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	891b      	ldrh	r3, [r3, #8]
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fe:	4413      	add	r3, r2
 8005300:	657b      	str	r3, [r7, #84]	@ 0x54
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	011a      	lsls	r2, r3, #4
 8005308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530a:	4413      	add	r3, r2
 800530c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005310:	653b      	str	r3, [r7, #80]	@ 0x50
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	895b      	ldrh	r3, [r3, #10]
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005320:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 8093 	bne.w	8005452 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800533c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <USB_ActivateEndpoint+0x524>
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800536c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800537c:	b29b      	uxth	r3, r3
 800537e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800538e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <USB_ActivateEndpoint+0x574>
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80053bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80053e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80053ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053ee:	873b      	strh	r3, [r7, #56]	@ 0x38
 80053f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80053f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800542a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800542e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]
 8005450:	e0bc      	b.n	80055cc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01d      	beq.n	80054aa <USB_ActivateEndpoint+0x64e>
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005484:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800549a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800549e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80054ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01d      	beq.n	8005502 <USB_ActivateEndpoint+0x6a6>
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054dc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80054ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d024      	beq.n	8005554 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005520:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005528:	f083 0320 	eor.w	r3, r3, #32
 800552c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
 8005552:	e01d      	b.n	8005590 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800556a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800557c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005580:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558c:	b29b      	uxth	r3, r3
 800558e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80055cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3774      	adds	r7, #116	@ 0x74
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055dc:	b480      	push	{r7}
 80055de:	b08d      	sub	sp, #52	@ 0x34
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	7b1b      	ldrb	r3, [r3, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 808e 	bne.w	800570c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d044      	beq.n	8005682 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	81bb      	strh	r3, [r7, #12]
 8005606:	89bb      	ldrh	r3, [r7, #12]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01b      	beq.n	8005648 <USB_DeactivateEndpoint+0x6c>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	817b      	strh	r3, [r7, #10]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565e:	813b      	strh	r3, [r7, #8]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	893b      	ldrh	r3, [r7, #8]
 800566c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]
 8005680:	e192      	b.n	80059a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	827b      	strh	r3, [r7, #18]
 8005690:	8a7b      	ldrh	r3, [r7, #18]
 8005692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d01b      	beq.n	80056d2 <USB_DeactivateEndpoint+0xf6>
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b0:	823b      	strh	r3, [r7, #16]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	8a3b      	ldrh	r3, [r7, #16]
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e8:	81fb      	strh	r3, [r7, #14]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	441a      	add	r2, r3
 80056f4:	89fb      	ldrh	r3, [r7, #14]
 80056f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005706:	b29b      	uxth	r3, r3
 8005708:	8013      	strh	r3, [r2, #0]
 800570a:	e14d      	b.n	80059a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 80a5 	bne.w	8005860 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	843b      	strh	r3, [r7, #32]
 8005724:	8c3b      	ldrh	r3, [r7, #32]
 8005726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <USB_DeactivateEndpoint+0x18a>
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005744:	83fb      	strh	r3, [r7, #30]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	8bfb      	ldrh	r3, [r7, #30]
 8005752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800575e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005762:	b29b      	uxth	r3, r3
 8005764:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	83bb      	strh	r3, [r7, #28]
 8005774:	8bbb      	ldrh	r3, [r7, #28]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01b      	beq.n	80057b6 <USB_DeactivateEndpoint+0x1da>
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005794:	837b      	strh	r3, [r7, #26]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	441a      	add	r2, r3
 80057a0:	8b7b      	ldrh	r3, [r7, #26]
 80057a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057cc:	833b      	strh	r3, [r7, #24]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	441a      	add	r2, r3
 80057d8:	8b3b      	ldrh	r3, [r7, #24]
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005800:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005804:	82fb      	strh	r3, [r7, #22]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800581e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583c:	82bb      	strh	r3, [r7, #20]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	441a      	add	r2, r3
 8005848:	8abb      	ldrh	r3, [r7, #20]
 800584a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800584e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e0a3      	b.n	80059a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800586e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <USB_DeactivateEndpoint+0x2d4>
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800588a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800589c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80058be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80058c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <USB_DeactivateEndpoint+0x324>
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	441a      	add	r2, r3
 80058ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800592c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800594a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800595c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800596c:	b29b      	uxth	r3, r3
 800596e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005986:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800599c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3734      	adds	r7, #52	@ 0x34
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b0c2      	sub	sp, #264	@ 0x108
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c2:	6018      	str	r0, [r3, #0]
 80059c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059cc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	f040 86b7 	bne.w	800674e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80059e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d908      	bls.n	8005a0e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a0c:	e007      	b.n	8005a1e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	7b1b      	ldrb	r3, [r3, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d13a      	bne.n	8005aa4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6959      	ldr	r1, [r3, #20]
 8005a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	88da      	ldrh	r2, [r3, #6]
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	f001 fc9c 	bl	8007392 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	011a      	lsls	r2, r3, #4
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	f000 be1f 	b.w	80066e2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	f040 8462 	bne.w	800637a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	f240 83df 	bls.w	8006292 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b24:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	1ad2      	subs	r2, r2, r3
 8005b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 81c7 	beq.w	8005f04 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d177      	bne.n	8005c82 <USB_EPStartXfer+0x2ce>
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	4413      	add	r3, r2
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	011a      	lsls	r2, r3, #4
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005be4:	d921      	bls.n	8005c2a <USB_EPStartXfer+0x276>
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <USB_EPStartXfer+0x252>
 8005bfc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c00:	3b01      	subs	r3, #1
 8005c02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e050      	b.n	8005ccc <USB_EPStartXfer+0x318>
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <USB_EPStartXfer+0x294>
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	801a      	strh	r2, [r3, #0]
 8005c46:	e041      	b.n	8005ccc <USB_EPStartXfer+0x318>
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <USB_EPStartXfer+0x2b4>
 8005c5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c62:	3301      	adds	r3, #1
 8005c64:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	e024      	b.n	8005ccc <USB_EPStartXfer+0x318>
 8005c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d11c      	bne.n	8005ccc <USB_EPStartXfer+0x318>
 8005c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	4413      	add	r3, r2
 8005ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	011a      	lsls	r2, r3, #4
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	895b      	ldrh	r3, [r3, #10]
 8005cd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6959      	ldr	r1, [r3, #20]
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005cf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005cf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005cfa:	6800      	ldr	r0, [r0, #0]
 8005cfc:	f001 fb49 	bl	8007392 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	441a      	add	r2, r3
 8005d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d90f      	bls.n	8005d5a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	621a      	str	r2, [r3, #32]
 8005d58:	e00e      	b.n	8005d78 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d177      	bne.n	8005e78 <USB_EPStartXfer+0x4c4>
 8005d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	4413      	add	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dda:	d921      	bls.n	8005e20 <USB_EPStartXfer+0x46c>
 8005ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <USB_EPStartXfer+0x448>
 8005df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	029b      	lsls	r3, r3, #10
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e056      	b.n	8005ece <USB_EPStartXfer+0x51a>
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <USB_EPStartXfer+0x48a>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	e047      	b.n	8005ece <USB_EPStartXfer+0x51a>
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <USB_EPStartXfer+0x4aa>
 8005e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	e02a      	b.n	8005ece <USB_EPStartXfer+0x51a>
 8005e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d122      	bne.n	8005ece <USB_EPStartXfer+0x51a>
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	891b      	ldrh	r3, [r3, #8]
 8005eda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6959      	ldr	r1, [r3, #20]
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005ef4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ef8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	f001 fa48 	bl	8007392 <USB_WritePMA>
 8005f02:	e3ee      	b.n	80066e2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d177      	bne.n	8006004 <USB_EPStartXfer+0x650>
 8005f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f34:	4413      	add	r3, r2
 8005f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f66:	d921      	bls.n	8005fac <USB_EPStartXfer+0x5f8>
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <USB_EPStartXfer+0x5d4>
 8005f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f82:	3b01      	subs	r3, #1
 8005f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	029b      	lsls	r3, r3, #10
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	e056      	b.n	800605a <USB_EPStartXfer+0x6a6>
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <USB_EPStartXfer+0x616>
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	e047      	b.n	800605a <USB_EPStartXfer+0x6a6>
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <USB_EPStartXfer+0x636>
 8005fe0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	029b      	lsls	r3, r3, #10
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e02a      	b.n	800605a <USB_EPStartXfer+0x6a6>
 8006004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d122      	bne.n	800605a <USB_EPStartXfer+0x6a6>
 8006014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602e:	b29b      	uxth	r3, r3
 8006030:	461a      	mov	r2, r3
 8006032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006034:	4413      	add	r3, r2
 8006036:	653b      	str	r3, [r7, #80]	@ 0x50
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006048:	4413      	add	r3, r2
 800604a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800604e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006054:	b29a      	uxth	r2, r3
 8006056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006058:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800605a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	891b      	ldrh	r3, [r3, #8]
 8006066:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800606a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6959      	ldr	r1, [r3, #20]
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607a:	b29b      	uxth	r3, r3
 800607c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006080:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006084:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006088:	6800      	ldr	r0, [r0, #0]
 800608a:	f001 f982 	bl	8007392 <USB_WritePMA>
            ep->xfer_buff += len;
 800608e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609e:	441a      	add	r2, r3
 80060a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6a1a      	ldr	r2, [r3, #32]
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d90f      	bls.n	80060e8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80060c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	621a      	str	r2, [r3, #32]
 80060e6:	e00e      	b.n	8006106 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80060f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	643b      	str	r3, [r7, #64]	@ 0x40
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d177      	bne.n	8006212 <USB_EPStartXfer+0x85e>
 8006122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800613c:	b29b      	uxth	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006142:	4413      	add	r3, r2
 8006144:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800614a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	011a      	lsls	r2, r3, #4
 8006154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006156:	4413      	add	r3, r2
 8006158:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
 800615e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006168:	b29a      	uxth	r2, r3
 800616a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	2b3e      	cmp	r3, #62	@ 0x3e
 8006174:	d921      	bls.n	80061ba <USB_EPStartXfer+0x806>
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <USB_EPStartXfer+0x7e2>
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	3b01      	subs	r3, #1
 8006192:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4313      	orrs	r3, r2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e050      	b.n	800625c <USB_EPStartXfer+0x8a8>
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <USB_EPStartXfer+0x824>
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d4:	801a      	strh	r2, [r3, #0]
 80061d6:	e041      	b.n	800625c <USB_EPStartXfer+0x8a8>
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	085b      	lsrs	r3, r3, #1
 80061de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d004      	beq.n	80061f8 <USB_EPStartXfer+0x844>
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f2:	3301      	adds	r3, #1
 80061f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29b      	uxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	e024      	b.n	800625c <USB_EPStartXfer+0x8a8>
 8006212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d11c      	bne.n	800625c <USB_EPStartXfer+0x8a8>
 8006222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006230:	b29b      	uxth	r3, r3
 8006232:	461a      	mov	r2, r3
 8006234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006236:	4413      	add	r3, r2
 8006238:	643b      	str	r3, [r7, #64]	@ 0x40
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	011a      	lsls	r2, r3, #4
 8006248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800624a:	4413      	add	r3, r2
 800624c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	b29a      	uxth	r2, r3
 8006258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	895b      	ldrh	r3, [r3, #10]
 8006268:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800626c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6959      	ldr	r1, [r3, #20]
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	b29b      	uxth	r3, r3
 800627e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006282:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006286:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	f001 f881 	bl	8007392 <USB_WritePMA>
 8006290:	e227      	b.n	80066e2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80062c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80062cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006318:	b29b      	uxth	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800631e:	4413      	add	r3, r2
 8006320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	011a      	lsls	r2, r3, #4
 8006330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006332:	4413      	add	r3, r2
 8006334:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633e:	b29a      	uxth	r2, r3
 8006340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006342:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	891b      	ldrh	r3, [r3, #8]
 8006350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6959      	ldr	r1, [r3, #20]
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006364:	b29b      	uxth	r3, r3
 8006366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800636a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800636e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006372:	6800      	ldr	r0, [r0, #0]
 8006374:	f001 f80d 	bl	8007392 <USB_WritePMA>
 8006378:	e1b3      	b.n	80066e2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800637a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80c6 	beq.w	800654c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80063cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d177      	bne.n	80064cc <USB_EPStartXfer+0xb18>
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063fc:	4413      	add	r3, r2
 80063fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006410:	4413      	add	r3, r2
 8006412:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006416:	667b      	str	r3, [r7, #100]	@ 0x64
 8006418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006422:	b29a      	uxth	r2, r3
 8006424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	2b3e      	cmp	r3, #62	@ 0x3e
 800642e:	d921      	bls.n	8006474 <USB_EPStartXfer+0xac0>
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <USB_EPStartXfer+0xa9c>
 8006446:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800644a:	3b01      	subs	r3, #1
 800644c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29a      	uxth	r2, r3
 8006456:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800645a:	b29b      	uxth	r3, r3
 800645c:	029b      	lsls	r3, r3, #10
 800645e:	b29b      	uxth	r3, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646c:	b29a      	uxth	r2, r3
 800646e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e050      	b.n	8006516 <USB_EPStartXfer+0xb62>
 8006474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <USB_EPStartXfer+0xade>
 800647c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800648e:	801a      	strh	r2, [r3, #0]
 8006490:	e041      	b.n	8006516 <USB_EPStartXfer+0xb62>
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <USB_EPStartXfer+0xafe>
 80064a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064ac:	3301      	adds	r3, #1
 80064ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e024      	b.n	8006516 <USB_EPStartXfer+0xb62>
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d11c      	bne.n	8006516 <USB_EPStartXfer+0xb62>
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064f0:	4413      	add	r3, r2
 80064f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	011a      	lsls	r2, r3, #4
 8006502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006504:	4413      	add	r3, r2
 8006506:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800650a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	b29a      	uxth	r2, r3
 8006512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006514:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	895b      	ldrh	r3, [r3, #10]
 8006522:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6959      	ldr	r1, [r3, #20]
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006536:	b29b      	uxth	r3, r3
 8006538:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800653c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006540:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006544:	6800      	ldr	r0, [r0, #0]
 8006546:	f000 ff24 	bl	8007392 <USB_WritePMA>
 800654a:	e0ca      	b.n	80066e2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d177      	bne.n	800664c <USB_EPStartXfer+0xc98>
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006576:	b29b      	uxth	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800657c:	4413      	add	r3, r2
 800657e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	011a      	lsls	r2, r3, #4
 800658e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006590:	4413      	add	r3, r2
 8006592:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006596:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006598:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ae:	d921      	bls.n	80065f4 <USB_EPStartXfer+0xc40>
 80065b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <USB_EPStartXfer+0xc1c>
 80065c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065ca:	3b01      	subs	r3, #1
 80065cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29b      	uxth	r3, r3
 80065e0:	4313      	orrs	r3, r2
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e05c      	b.n	80066ae <USB_EPStartXfer+0xcfa>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <USB_EPStartXfer+0xc5e>
 80065fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660a:	b29a      	uxth	r2, r3
 800660c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e04d      	b.n	80066ae <USB_EPStartXfer+0xcfa>
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <USB_EPStartXfer+0xc7e>
 8006628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800662c:	3301      	adds	r3, #1
 800662e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	b29a      	uxth	r2, r3
 8006646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e030      	b.n	80066ae <USB_EPStartXfer+0xcfa>
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	785b      	ldrb	r3, [r3, #1]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d128      	bne.n	80066ae <USB_EPStartXfer+0xcfa>
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800666a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006678:	b29b      	uxth	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006680:	4413      	add	r3, r2
 8006682:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	011a      	lsls	r2, r3, #4
 8006694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006698:	4413      	add	r3, r2
 800669a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800669e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	891b      	ldrh	r3, [r3, #8]
 80066ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6959      	ldr	r1, [r3, #20]
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066dc:	6800      	ldr	r0, [r0, #0]
 80066de:	f000 fe58 	bl	8007392 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006708:	817b      	strh	r3, [r7, #10]
 800670a:	897b      	ldrh	r3, [r7, #10]
 800670c:	f083 0310 	eor.w	r3, r3, #16
 8006710:	817b      	strh	r3, [r7, #10]
 8006712:	897b      	ldrh	r3, [r7, #10]
 8006714:	f083 0320 	eor.w	r3, r3, #32
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	897b      	ldrh	r3, [r7, #10]
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]
 800674a:	f000 bcde 	b.w	800710a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	7b1b      	ldrb	r3, [r3, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 80bb 	bne.w	80068d6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	429a      	cmp	r2, r3
 800677a:	d917      	bls.n	80067ac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800678c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	619a      	str	r2, [r3, #24]
 80067aa:	e00e      	b.n	80067ca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	461a      	mov	r2, r3
 80067ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80067ee:	4413      	add	r3, r2
 80067f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800680c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681c:	b29a      	uxth	r2, r3
 800681e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	2b3e      	cmp	r3, #62	@ 0x3e
 800682a:	d924      	bls.n	8006876 <USB_EPStartXfer+0xec2>
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <USB_EPStartXfer+0xe98>
 8006842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006846:	3b01      	subs	r3, #1
 8006848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800684c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006858:	b29b      	uxth	r3, r3
 800685a:	029b      	lsls	r3, r3, #10
 800685c:	b29b      	uxth	r3, r3
 800685e:	4313      	orrs	r3, r2
 8006860:	b29b      	uxth	r3, r3
 8006862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686a:	b29a      	uxth	r2, r3
 800686c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	f000 bc10 	b.w	8007096 <USB_EPStartXfer+0x16e2>
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10c      	bne.n	8006898 <USB_EPStartXfer+0xee4>
 800687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688e:	b29a      	uxth	r2, r3
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006894:	801a      	strh	r2, [r3, #0]
 8006896:	e3fe      	b.n	8007096 <USB_EPStartXfer+0x16e2>
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <USB_EPStartXfer+0xf04>
 80068ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068b2:	3301      	adds	r3, #1
 80068b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	029b      	lsls	r3, r3, #10
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e3df      	b.n	8007096 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	78db      	ldrb	r3, [r3, #3]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	f040 8218 	bne.w	8006d18 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80068e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 809d 	bne.w	8006a34 <USB_EPStartXfer+0x1080>
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006916:	b29b      	uxth	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800691e:	4413      	add	r3, r2
 8006920:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	011a      	lsls	r2, r3, #4
 8006932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006936:	4413      	add	r3, r2
 8006938:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800693c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	2b3e      	cmp	r3, #62	@ 0x3e
 8006962:	d92b      	bls.n	80069bc <USB_EPStartXfer+0x1008>
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <USB_EPStartXfer+0xfe0>
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	3b01      	subs	r3, #1
 8006990:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29a      	uxth	r2, r3
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	029b      	lsls	r3, r3, #10
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069b8:	801a      	strh	r2, [r3, #0]
 80069ba:	e070      	b.n	8006a9e <USB_EPStartXfer+0x10ea>
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10c      	bne.n	80069e6 <USB_EPStartXfer+0x1032>
 80069cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069dc:	b29a      	uxth	r2, r3
 80069de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	e05b      	b.n	8006a9e <USB_EPStartXfer+0x10ea>
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <USB_EPStartXfer+0x1062>
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e034      	b.n	8006a9e <USB_EPStartXfer+0x10ea>
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d12c      	bne.n	8006a9e <USB_EPStartXfer+0x10ea>
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a68:	4413      	add	r3, r2
 8006a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	011a      	lsls	r2, r3, #4
 8006a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	785b      	ldrb	r3, [r3, #1]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 809d 	bne.w	8006bf8 <USB_EPStartXfer+0x1244>
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	011a      	lsls	r2, r3, #4
 8006af6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b26:	d92b      	bls.n	8006b80 <USB_EPStartXfer+0x11cc>
 8006b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d104      	bne.n	8006b58 <USB_EPStartXfer+0x11a4>
 8006b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b52:	3b01      	subs	r3, #1
 8006b54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	029b      	lsls	r3, r3, #10
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b7c:	801a      	strh	r2, [r3, #0]
 8006b7e:	e069      	b.n	8006c54 <USB_EPStartXfer+0x12a0>
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10c      	bne.n	8006baa <USB_EPStartXfer+0x11f6>
 8006b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	e054      	b.n	8006c54 <USB_EPStartXfer+0x12a0>
 8006baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <USB_EPStartXfer+0x1226>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf4:	801a      	strh	r2, [r3, #0]
 8006bf6:	e02d      	b.n	8006c54 <USB_EPStartXfer+0x12a0>
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d125      	bne.n	8006c54 <USB_EPStartXfer+0x12a0>
 8006c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c1e:	4413      	add	r3, r2
 8006c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	011a      	lsls	r2, r3, #4
 8006c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c36:	4413      	add	r3, r2
 8006c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8218 	beq.w	8007096 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <USB_EPStartXfer+0x12ea>
 8006c92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c9e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f040 81f5 	bne.w	8007096 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f040 81ee 	bne.w	8007096 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
 8006d16:	e1be      	b.n	8007096 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 81b4 	bne.w	8007092 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d917      	bls.n	8006d76 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	619a      	str	r2, [r3, #24]
 8006d74:	e00e      	b.n	8006d94 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2200      	movs	r2, #0
 8006d92:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 8085 	bne.w	8006eb0 <USB_EPStartXfer+0x14fc>
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dca:	4413      	add	r3, r2
 8006dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006dfe:	801a      	strh	r2, [r3, #0]
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e06:	d923      	bls.n	8006e50 <USB_EPStartXfer+0x149c>
 8006e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0c:	095b      	lsrs	r3, r3, #5
 8006e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <USB_EPStartXfer+0x1474>
 8006e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e22:	3b01      	subs	r3, #1
 8006e24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e060      	b.n	8006f12 <USB_EPStartXfer+0x155e>
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <USB_EPStartXfer+0x14be>
 8006e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	e04f      	b.n	8006f12 <USB_EPStartXfer+0x155e>
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <USB_EPStartXfer+0x14de>
 8006e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e030      	b.n	8006f12 <USB_EPStartXfer+0x155e>
 8006eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d128      	bne.n	8006f12 <USB_EPStartXfer+0x155e>
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	011a      	lsls	r2, r3, #4
 8006ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006efc:	4413      	add	r3, r2
 8006efe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	785b      	ldrb	r3, [r3, #1]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8085 	bne.w	800703c <USB_EPStartXfer+0x1688>
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f56:	4413      	add	r3, r2
 8006f58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	011a      	lsls	r2, r3, #4
 8006f6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f92:	d923      	bls.n	8006fdc <USB_EPStartXfer+0x1628>
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <USB_EPStartXfer+0x1600>
 8006faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	029b      	lsls	r3, r3, #10
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	e05c      	b.n	8007096 <USB_EPStartXfer+0x16e2>
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10c      	bne.n	8006ffe <USB_EPStartXfer+0x164a>
 8006fe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ffa:	801a      	strh	r2, [r3, #0]
 8006ffc:	e04b      	b.n	8007096 <USB_EPStartXfer+0x16e2>
 8006ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007002:	085b      	lsrs	r3, r3, #1
 8007004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d004      	beq.n	800701e <USB_EPStartXfer+0x166a>
 8007014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007018:	3301      	adds	r3, #1
 800701a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800701e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800702a:	b29b      	uxth	r3, r3
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b29b      	uxth	r3, r3
 8007030:	4313      	orrs	r3, r2
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	e02c      	b.n	8007096 <USB_EPStartXfer+0x16e2>
 800703c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d124      	bne.n	8007096 <USB_EPStartXfer+0x16e2>
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007062:	4413      	add	r3, r2
 8007064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	011a      	lsls	r2, r3, #4
 8007076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800707a:	4413      	add	r3, r2
 800707c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	e001      	b.n	8007096 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e03a      	b.n	800710c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070bc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80070d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	785b      	ldrb	r3, [r3, #1]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d020      	beq.n	800716a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800713e:	81bb      	strh	r3, [r7, #12]
 8007140:	89bb      	ldrh	r3, [r7, #12]
 8007142:	f083 0310 	eor.w	r3, r3, #16
 8007146:	81bb      	strh	r3, [r7, #12]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	441a      	add	r2, r3
 8007152:	89bb      	ldrh	r3, [r7, #12]
 8007154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800715c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]
 8007168:	e01f      	b.n	80071aa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800717c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007180:	81fb      	strh	r3, [r7, #14]
 8007182:	89fb      	ldrh	r3, [r7, #14]
 8007184:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007188:	81fb      	strh	r3, [r7, #14]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	441a      	add	r2, r3
 8007194:	89fb      	ldrh	r3, [r7, #14]
 8007196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800719a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800719e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr

080071b6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b087      	sub	sp, #28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	7b1b      	ldrb	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 809d 	bne.w	8007304 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04c      	beq.n	800726c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	823b      	strh	r3, [r7, #16]
 80071e0:	8a3b      	ldrh	r3, [r7, #16]
 80071e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01b      	beq.n	8007222 <USB_EPClearStall+0x6c>
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007200:	81fb      	strh	r3, [r7, #14]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	89fb      	ldrh	r3, [r7, #14]
 800720e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800721e:	b29b      	uxth	r3, r3
 8007220:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	78db      	ldrb	r3, [r3, #3]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d06c      	beq.n	8007304 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800723c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007240:	81bb      	strh	r3, [r7, #12]
 8007242:	89bb      	ldrh	r3, [r7, #12]
 8007244:	f083 0320 	eor.w	r3, r3, #32
 8007248:	81bb      	strh	r3, [r7, #12]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	441a      	add	r2, r3
 8007254:	89bb      	ldrh	r3, [r7, #12]
 8007256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800725a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800725e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007266:	b29b      	uxth	r3, r3
 8007268:	8013      	strh	r3, [r2, #0]
 800726a:	e04b      	b.n	8007304 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	82fb      	strh	r3, [r7, #22]
 800727a:	8afb      	ldrh	r3, [r7, #22]
 800727c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01b      	beq.n	80072bc <USB_EPClearStall+0x106>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800729a:	82bb      	strh	r3, [r7, #20]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	441a      	add	r2, r3
 80072a6:	8abb      	ldrh	r3, [r7, #20]
 80072a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80072b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072d2:	827b      	strh	r3, [r7, #18]
 80072d4:	8a7b      	ldrh	r3, [r7, #18]
 80072d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80072da:	827b      	strh	r3, [r7, #18]
 80072dc:	8a7b      	ldrh	r3, [r7, #18]
 80072de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80072e2:	827b      	strh	r3, [r7, #18]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	8a7b      	ldrh	r3, [r7, #18]
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2280      	movs	r2, #128	@ 0x80
 8007326:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	bc80      	pop	{r7}
 800735c:	4770      	bx	lr

0800735e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800736c:	b29b      	uxth	r3, r3
 800736e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007370:	68fb      	ldr	r3, [r7, #12]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr

08007392 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007392:	b480      	push	{r7}
 8007394:	b08b      	sub	sp, #44	@ 0x2c
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4611      	mov	r1, r2
 800739e:	461a      	mov	r2, r3
 80073a0:	460b      	mov	r3, r1
 80073a2:	80fb      	strh	r3, [r7, #6]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073a8:	88bb      	ldrh	r3, [r7, #4]
 80073aa:	3301      	adds	r3, #1
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	005a      	lsls	r2, r3, #1
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ca:	e01f      	b.n	800740c <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	3301      	adds	r3, #1
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	b21b      	sxth	r3, r3
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	b21a      	sxth	r2, r3
 80073de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	b21b      	sxth	r3, r3
 80073e6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	8a7a      	ldrh	r2, [r7, #18]
 80073ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	3302      	adds	r3, #2
 80073f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	3302      	adds	r3, #2
 80073f8:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	3b01      	subs	r3, #1
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1dc      	bne.n	80073cc <USB_WritePMA+0x3a>
  }
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	372c      	adds	r7, #44	@ 0x2c
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800741e:	b480      	push	{r7}
 8007420:	b08b      	sub	sp, #44	@ 0x2c
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	4611      	mov	r1, r2
 800742a:	461a      	mov	r2, r3
 800742c:	460b      	mov	r3, r1
 800742e:	80fb      	strh	r3, [r7, #6]
 8007430:	4613      	mov	r3, r2
 8007432:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007434:	88bb      	ldrh	r3, [r7, #4]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	b29b      	uxth	r3, r3
 800743a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007444:	88fb      	ldrh	r3, [r7, #6]
 8007446:	005a      	lsls	r2, r3, #1
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007450:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
 8007456:	e01b      	b.n	8007490 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	3302      	adds	r3, #2
 8007464:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	b2da      	uxtb	r2, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3301      	adds	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	b2da      	uxtb	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3301      	adds	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	3302      	adds	r3, #2
 8007488:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	3b01      	subs	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e0      	bne.n	8007458 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007496:	88bb      	ldrh	r3, [r7, #4]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	701a      	strb	r2, [r3, #0]
  }
}
 80074b2:	bf00      	nop
 80074b4:	372c      	adds	r7, #44	@ 0x2c
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7c1b      	ldrb	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d115      	bne.n	8007500 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074d8:	2202      	movs	r2, #2
 80074da:	2181      	movs	r1, #129	@ 0x81
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 feb6 	bl	800924e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80074e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ec:	2202      	movs	r2, #2
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 feac 	bl	800924e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80074fe:	e012      	b.n	8007526 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007500:	2340      	movs	r3, #64	@ 0x40
 8007502:	2202      	movs	r2, #2
 8007504:	2181      	movs	r1, #129	@ 0x81
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f001 fea1 	bl	800924e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007512:	2340      	movs	r3, #64	@ 0x40
 8007514:	2202      	movs	r2, #2
 8007516:	2101      	movs	r1, #1
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f001 fe98 	bl	800924e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007526:	2308      	movs	r3, #8
 8007528:	2203      	movs	r2, #3
 800752a:	2182      	movs	r1, #130	@ 0x82
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fe8e 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007538:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800753c:	f001 ffae 	bl	800949c <USBD_static_malloc>
 8007540:	4602      	mov	r2, r0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
 8007556:	e026      	b.n	80075a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800755e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007588:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800758c:	2101      	movs	r1, #1
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 ff4d 	bl	800942e <USBD_LL_PrepareReceive>
 8007594:	e007      	b.n	80075a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800759c:	2340      	movs	r3, #64	@ 0x40
 800759e:	2101      	movs	r1, #1
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 ff44 	bl	800942e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075c0:	2181      	movs	r1, #129	@ 0x81
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fe69 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075ce:	2101      	movs	r1, #1
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fe62 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80075de:	2182      	movs	r1, #130	@ 0x82
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fe5a 	bl	800929a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00e      	beq.n	8007614 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007606:	4618      	mov	r0, r3
 8007608:	f001 ff54 	bl	80094b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800762e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007644:	2b00      	cmp	r3, #0
 8007646:	d039      	beq.n	80076bc <USBD_CDC_Setup+0x9e>
 8007648:	2b20      	cmp	r3, #32
 800764a:	d17f      	bne.n	800774c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d029      	beq.n	80076a8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	b25b      	sxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	da11      	bge.n	8007682 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800766a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	88d2      	ldrh	r2, [r2, #6]
 8007670:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007672:	6939      	ldr	r1, [r7, #16]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	461a      	mov	r2, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fa06 	bl	8008a8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007680:	e06b      	b.n	800775a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	785a      	ldrb	r2, [r3, #1]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007698:	6939      	ldr	r1, [r7, #16]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	88db      	ldrh	r3, [r3, #6]
 800769e:	461a      	mov	r2, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 fa21 	bl	8008ae8 <USBD_CtlPrepareRx>
      break;
 80076a6:	e058      	b.n	800775a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	7850      	ldrb	r0, [r2, #1]
 80076b4:	2200      	movs	r2, #0
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	4798      	blx	r3
      break;
 80076ba:	e04e      	b.n	800775a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b0b      	cmp	r3, #11
 80076c2:	d02e      	beq.n	8007722 <USBD_CDC_Setup+0x104>
 80076c4:	2b0b      	cmp	r3, #11
 80076c6:	dc38      	bgt.n	800773a <USBD_CDC_Setup+0x11c>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <USBD_CDC_Setup+0xb4>
 80076cc:	2b0a      	cmp	r3, #10
 80076ce:	d014      	beq.n	80076fa <USBD_CDC_Setup+0xdc>
 80076d0:	e033      	b.n	800773a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d107      	bne.n	80076ec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	2202      	movs	r2, #2
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f9d1 	bl	8008a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076ea:	e02e      	b.n	800774a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 f962 	bl	80089b8 <USBD_CtlError>
            ret = USBD_FAIL;
 80076f4:	2302      	movs	r3, #2
 80076f6:	75fb      	strb	r3, [r7, #23]
          break;
 80076f8:	e027      	b.n	800774a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007700:	2b03      	cmp	r3, #3
 8007702:	d107      	bne.n	8007714 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007704:	f107 030f 	add.w	r3, r7, #15
 8007708:	2201      	movs	r2, #1
 800770a:	4619      	mov	r1, r3
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f9bd 	bl	8008a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007712:	e01a      	b.n	800774a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 f94e 	bl	80089b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800771c:	2302      	movs	r3, #2
 800771e:	75fb      	strb	r3, [r7, #23]
          break;
 8007720:	e013      	b.n	800774a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007728:	2b03      	cmp	r3, #3
 800772a:	d00d      	beq.n	8007748 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f942 	bl	80089b8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007734:	2302      	movs	r3, #2
 8007736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007738:	e006      	b.n	8007748 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 f93b 	bl	80089b8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007742:	2302      	movs	r3, #2
 8007744:	75fb      	strb	r3, [r7, #23]
          break;
 8007746:	e000      	b.n	800774a <USBD_CDC_Setup+0x12c>
          break;
 8007748:	bf00      	nop
      }
      break;
 800774a:	e006      	b.n	800775a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 f932 	bl	80089b8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007754:	2302      	movs	r3, #2
 8007756:	75fb      	strb	r3, [r7, #23]
      break;
 8007758:	bf00      	nop
  }

  return ret;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007776:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800777e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d03a      	beq.n	8007800 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	6879      	ldr	r1, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	440b      	add	r3, r1
 8007798:	331c      	adds	r3, #28
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d029      	beq.n	80077f4 <USBD_CDC_DataIn+0x90>
 80077a0:	78fa      	ldrb	r2, [r7, #3]
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	331c      	adds	r3, #28
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	78f9      	ldrb	r1, [r7, #3]
 80077b4:	68b8      	ldr	r0, [r7, #8]
 80077b6:	460b      	mov	r3, r1
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4403      	add	r3, r0
 80077c0:	3320      	adds	r3, #32
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d110      	bne.n	80077f4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	331c      	adds	r3, #28
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077e6:	78f9      	ldrb	r1, [r7, #3]
 80077e8:	2300      	movs	r3, #0
 80077ea:	2200      	movs	r2, #0
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 fdfb 	bl	80093e8 <USBD_LL_Transmit>
 80077f2:	e003      	b.n	80077fc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e000      	b.n	8007802 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007800:	2302      	movs	r3, #2
  }
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 fe26 	bl	8009474 <USBD_LL_GetRxDataSize>
 8007828:	4602      	mov	r2, r0
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800784e:	4611      	mov	r1, r2
 8007850:	4798      	blx	r3

    return USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	e000      	b.n	8007858 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007856:	2302      	movs	r3, #2
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800786e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <USBD_CDC_EP0_RxReady+0x44>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007880:	2bff      	cmp	r3, #255	@ 0xff
 8007882:	d00f      	beq.n	80078a4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007892:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800789a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	22ff      	movs	r2, #255	@ 0xff
 80078a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2243      	movs	r2, #67	@ 0x43
 80078bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	@ (80078cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000098 	.word	0x20000098

080078d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2243      	movs	r2, #67	@ 0x43
 80078dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80078de:	4b03      	ldr	r3, [pc, #12]	@ (80078ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000054 	.word	0x20000054

080078f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2243      	movs	r2, #67	@ 0x43
 80078fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80078fe:	4b03      	ldr	r3, [pc, #12]	@ (800790c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	bc80      	pop	{r7}
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	200000dc 	.word	0x200000dc

08007910 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	220a      	movs	r2, #10
 800791c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800791e:	4b03      	ldr	r3, [pc, #12]	@ (800792c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000010 	.word	0x20000010

08007930 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800793a:	2302      	movs	r3, #2
 800793c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007970:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800797a:	88fa      	ldrh	r2, [r7, #6]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr

0800798e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800799e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01c      	beq.n	8007a08 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d115      	bne.n	8007a04 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2181      	movs	r1, #129	@ 0x81
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fcf4 	bl	80093e8 <USBD_LL_Transmit>

      return USBD_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e002      	b.n	8007a0a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a08:	2302      	movs	r3, #2
  }
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	7c1b      	ldrb	r3, [r3, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a3e:	2101      	movs	r1, #1
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 fcf4 	bl	800942e <USBD_LL_PrepareReceive>
 8007a46:	e007      	b.n	8007a58 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a4e:	2340      	movs	r3, #64	@ 0x40
 8007a50:	2101      	movs	r1, #1
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 fceb 	bl	800942e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e000      	b.n	8007a5e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a5c:	2302      	movs	r3, #2
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	4613      	mov	r3, r2
 8007a72:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e01a      	b.n	8007ab4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f001 fb59 	bl	8009164 <USBD_LL_Init>

  return USBD_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3710      	adds	r7, #16
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d006      	beq.n	8007ade <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
 8007adc:	e001      	b.n	8007ae2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr

08007aee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fb8e 	bl	8009218 <USBD_LL_Start>

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b26:	2302      	movs	r3, #2
 8007b28:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fed8 	bl	8008946 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007bb2:	f003 031f 	and.w	r3, r3, #31
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d016      	beq.n	8007be8 <USBD_LL_SetupStage+0x6a>
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d81c      	bhi.n	8007bf8 <USBD_LL_SetupStage+0x7a>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <USBD_LL_SetupStage+0x4a>
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d008      	beq.n	8007bd8 <USBD_LL_SetupStage+0x5a>
 8007bc6:	e017      	b.n	8007bf8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9cb 	bl	8007f6c <USBD_StdDevReq>
      break;
 8007bd6:	e01a      	b.n	8007c0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa2d 	bl	8008040 <USBD_StdItfReq>
      break;
 8007be6:	e012      	b.n	8007c0e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fa6d 	bl	80080d0 <USBD_StdEPReq>
      break;
 8007bf6:	e00a      	b.n	8007c0e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007bfe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fb66 	bl	80092d8 <USBD_LL_StallEP>
      break;
 8007c0c:	bf00      	nop
  }

  return USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	460b      	mov	r3, r1
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d14b      	bne.n	8007cc4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c32:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d134      	bne.n	8007ca8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d919      	bls.n	8007c7e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d203      	bcs.n	8007c6c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	e002      	b.n	8007c72 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	461a      	mov	r2, r3
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 ff54 	bl	8008b24 <USBD_CtlContinueRx>
 8007c7c:	e038      	b.n	8007cf0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d105      	bne.n	8007ca0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 ff51 	bl	8008b48 <USBD_CtlSendStatus>
 8007ca6:	e023      	b.n	8007cf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d11e      	bne.n	8007cf0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007cba:	2100      	movs	r1, #0
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f001 fb0b 	bl	80092d8 <USBD_LL_StallEP>
 8007cc2:	e015      	b.n	8007cf0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00d      	beq.n	8007cec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d108      	bne.n	8007cec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	7afa      	ldrb	r2, [r7, #11]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	4798      	blx	r3
 8007cea:	e001      	b.n	8007cf0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cec:	2302      	movs	r3, #2
 8007cee:	e000      	b.n	8007cf2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	460b      	mov	r3, r1
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d17f      	bne.n	8007e0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3314      	adds	r3, #20
 8007d12:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d15c      	bne.n	8007dd8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d915      	bls.n	8007d56 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 febe 	bl	8008ac4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 fb6d 	bl	800942e <USBD_LL_PrepareReceive>
 8007d54:	e04e      	b.n	8007df4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	6912      	ldr	r2, [r2, #16]
 8007d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d62:	fb01 f202 	mul.w	r2, r1, r2
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d11c      	bne.n	8007da6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d316      	bcc.n	8007da6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d20f      	bcs.n	8007da6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d86:	2200      	movs	r2, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fe9a 	bl	8008ac4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f001 fb45 	bl	800942e <USBD_LL_PrepareReceive>
 8007da4:	e026      	b.n	8007df4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00a      	beq.n	8007dc8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d105      	bne.n	8007dc8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007dc8:	2180      	movs	r1, #128	@ 0x80
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fa84 	bl	80092d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fecc 	bl	8008b6e <USBD_CtlReceiveStatus>
 8007dd6:	e00d      	b.n	8007df4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d004      	beq.n	8007dec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007dec:	2180      	movs	r1, #128	@ 0x80
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 fa72 	bl	80092d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d11d      	bne.n	8007e3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7ff fe81 	bl	8007b06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e0c:	e015      	b.n	8007e3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d108      	bne.n	8007e36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	7afa      	ldrb	r2, [r7, #11]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	4798      	blx	r3
 8007e34:	e001      	b.n	8007e3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e36:	2302      	movs	r3, #2
 8007e38:	e000      	b.n	8007e3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e4c:	2340      	movs	r3, #64	@ 0x40
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f9fb 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2240      	movs	r2, #64	@ 0x40
 8007e64:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2180      	movs	r1, #128	@ 0x80
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f9ed 	bl	800924e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2240      	movs	r2, #64	@ 0x40
 8007e7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6852      	ldr	r2, [r2, #4]
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
  }

  return USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2204      	movs	r2, #4
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr

08007f0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d105      	bne.n	8007f2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d10b      	bne.n	8007f60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f82:	2b40      	cmp	r3, #64	@ 0x40
 8007f84:	d005      	beq.n	8007f92 <USBD_StdDevReq+0x26>
 8007f86:	2b40      	cmp	r3, #64	@ 0x40
 8007f88:	d84f      	bhi.n	800802a <USBD_StdDevReq+0xbe>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <USBD_StdDevReq+0x36>
 8007f8e:	2b20      	cmp	r3, #32
 8007f90:	d14b      	bne.n	800802a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
      break;
 8007fa0:	e048      	b.n	8008034 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b09      	cmp	r3, #9
 8007fa8:	d839      	bhi.n	800801e <USBD_StdDevReq+0xb2>
 8007faa:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <USBD_StdDevReq+0x44>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08008001 	.word	0x08008001
 8007fb4:	08008015 	.word	0x08008015
 8007fb8:	0800801f 	.word	0x0800801f
 8007fbc:	0800800b 	.word	0x0800800b
 8007fc0:	0800801f 	.word	0x0800801f
 8007fc4:	08007fe3 	.word	0x08007fe3
 8007fc8:	08007fd9 	.word	0x08007fd9
 8007fcc:	0800801f 	.word	0x0800801f
 8007fd0:	08007ff7 	.word	0x08007ff7
 8007fd4:	08007fed 	.word	0x08007fed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f9dc 	bl	8008398 <USBD_GetDescriptor>
          break;
 8007fe0:	e022      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fb3f 	bl	8008668 <USBD_SetAddress>
          break;
 8007fea:	e01d      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fb7e 	bl	80086f0 <USBD_SetConfig>
          break;
 8007ff4:	e018      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fc07 	bl	800880c <USBD_GetConfig>
          break;
 8007ffe:	e013      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fc37 	bl	8008876 <USBD_GetStatus>
          break;
 8008008:	e00e      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fc65 	bl	80088dc <USBD_SetFeature>
          break;
 8008012:	e009      	b.n	8008028 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc74 	bl	8008904 <USBD_ClrFeature>
          break;
 800801c:	e004      	b.n	8008028 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fcc9 	bl	80089b8 <USBD_CtlError>
          break;
 8008026:	bf00      	nop
      }
      break;
 8008028:	e004      	b.n	8008034 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fcc3 	bl	80089b8 <USBD_CtlError>
      break;
 8008032:	bf00      	nop
  }

  return ret;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop

08008040 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008056:	2b40      	cmp	r3, #64	@ 0x40
 8008058:	d005      	beq.n	8008066 <USBD_StdItfReq+0x26>
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d82e      	bhi.n	80080bc <USBD_StdItfReq+0x7c>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <USBD_StdItfReq+0x26>
 8008062:	2b20      	cmp	r3, #32
 8008064:	d12a      	bne.n	80080bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800806c:	3b01      	subs	r3, #1
 800806e:	2b02      	cmp	r3, #2
 8008070:	d81d      	bhi.n	80080ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	889b      	ldrh	r3, [r3, #4]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	d813      	bhi.n	80080a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4798      	blx	r3
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <USBD_StdItfReq+0x78>
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fd53 	bl	8008b48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080a2:	e009      	b.n	80080b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fc86 	bl	80089b8 <USBD_CtlError>
          break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fc81 	bl	80089b8 <USBD_CtlError>
          break;
 80080b6:	e000      	b.n	80080ba <USBD_StdItfReq+0x7a>
          break;
 80080b8:	bf00      	nop
      }
      break;
 80080ba:	e004      	b.n	80080c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fc7a 	bl	80089b8 <USBD_CtlError>
      break;
 80080c4:	bf00      	nop
  }

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	889b      	ldrh	r3, [r3, #4]
 80080e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080ec:	2b40      	cmp	r3, #64	@ 0x40
 80080ee:	d007      	beq.n	8008100 <USBD_StdEPReq+0x30>
 80080f0:	2b40      	cmp	r3, #64	@ 0x40
 80080f2:	f200 8146 	bhi.w	8008382 <USBD_StdEPReq+0x2b2>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <USBD_StdEPReq+0x40>
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	f040 8141 	bne.w	8008382 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
      break;
 800810e:	e13d      	b.n	800838c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008118:	2b20      	cmp	r3, #32
 800811a:	d10a      	bne.n	8008132 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	e12d      	b.n	800838e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d007      	beq.n	800814a <USBD_StdEPReq+0x7a>
 800813a:	2b03      	cmp	r3, #3
 800813c:	f300 811b 	bgt.w	8008376 <USBD_StdEPReq+0x2a6>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d072      	beq.n	800822a <USBD_StdEPReq+0x15a>
 8008144:	2b01      	cmp	r3, #1
 8008146:	d03a      	beq.n	80081be <USBD_StdEPReq+0xee>
 8008148:	e115      	b.n	8008376 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008150:	2b02      	cmp	r3, #2
 8008152:	d002      	beq.n	800815a <USBD_StdEPReq+0x8a>
 8008154:	2b03      	cmp	r3, #3
 8008156:	d015      	beq.n	8008184 <USBD_StdEPReq+0xb4>
 8008158:	e02b      	b.n	80081b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <USBD_StdEPReq+0xaa>
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b80      	cmp	r3, #128	@ 0x80
 8008164:	d009      	beq.n	800817a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 f8b4 	bl	80092d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008170:	2180      	movs	r1, #128	@ 0x80
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f8b0 	bl	80092d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008178:	e020      	b.n	80081bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc1b 	bl	80089b8 <USBD_CtlError>
              break;
 8008182:	e01b      	b.n	80081bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	885b      	ldrh	r3, [r3, #2]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10e      	bne.n	80081aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00b      	beq.n	80081aa <USBD_StdEPReq+0xda>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b80      	cmp	r3, #128	@ 0x80
 8008196:	d008      	beq.n	80081aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f897 	bl	80092d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fccc 	bl	8008b48 <USBD_CtlSendStatus>

              break;
 80081b0:	e004      	b.n	80081bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fbff 	bl	80089b8 <USBD_CtlError>
              break;
 80081ba:	bf00      	nop
          }
          break;
 80081bc:	e0e0      	b.n	8008380 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d002      	beq.n	80081ce <USBD_StdEPReq+0xfe>
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d015      	beq.n	80081f8 <USBD_StdEPReq+0x128>
 80081cc:	e026      	b.n	800821c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00c      	beq.n	80081ee <USBD_StdEPReq+0x11e>
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2b80      	cmp	r3, #128	@ 0x80
 80081d8:	d009      	beq.n	80081ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 f87a 	bl	80092d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081e4:	2180      	movs	r1, #128	@ 0x80
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f876 	bl	80092d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081ec:	e01c      	b.n	8008228 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fbe1 	bl	80089b8 <USBD_CtlError>
              break;
 80081f6:	e017      	b.n	8008228 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d112      	bne.n	8008226 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 f881 	bl	8009316 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc97 	bl	8008b48 <USBD_CtlSendStatus>
              }
              break;
 800821a:	e004      	b.n	8008226 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fbca 	bl	80089b8 <USBD_CtlError>
              break;
 8008224:	e000      	b.n	8008228 <USBD_StdEPReq+0x158>
              break;
 8008226:	bf00      	nop
          }
          break;
 8008228:	e0aa      	b.n	8008380 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008230:	2b02      	cmp	r3, #2
 8008232:	d002      	beq.n	800823a <USBD_StdEPReq+0x16a>
 8008234:	2b03      	cmp	r3, #3
 8008236:	d032      	beq.n	800829e <USBD_StdEPReq+0x1ce>
 8008238:	e097      	b.n	800836a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <USBD_StdEPReq+0x180>
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b80      	cmp	r3, #128	@ 0x80
 8008244:	d004      	beq.n	8008250 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fbb5 	bl	80089b8 <USBD_CtlError>
                break;
 800824e:	e091      	b.n	8008374 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	da0b      	bge.n	8008270 <USBD_StdEPReq+0x1a0>
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	3310      	adds	r3, #16
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	4413      	add	r3, r2
 800826c:	3304      	adds	r3, #4
 800826e:	e00b      	b.n	8008288 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	3304      	adds	r3, #4
 8008288:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2202      	movs	r2, #2
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fbf8 	bl	8008a8c <USBD_CtlSendData>
              break;
 800829c:	e06a      	b.n	8008374 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800829e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	da11      	bge.n	80082ca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	f003 020f 	and.w	r2, r3, #15
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	3318      	adds	r3, #24
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d117      	bne.n	80082f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fb78 	bl	80089b8 <USBD_CtlError>
                  break;
 80082c8:	e054      	b.n	8008374 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	f003 020f 	and.w	r2, r3, #15
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fb65 	bl	80089b8 <USBD_CtlError>
                  break;
 80082ee:	e041      	b.n	8008374 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	da0b      	bge.n	8008310 <USBD_StdEPReq+0x240>
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082fe:	4613      	mov	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	3310      	adds	r3, #16
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	4413      	add	r3, r2
 800830c:	3304      	adds	r3, #4
 800830e:	e00b      	b.n	8008328 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	4413      	add	r3, r2
 8008326:	3304      	adds	r3, #4
 8008328:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <USBD_StdEPReq+0x266>
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b80      	cmp	r3, #128	@ 0x80
 8008334:	d103      	bne.n	800833e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e00e      	b.n	800835c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f806 	bl	8009354 <USBD_LL_IsStallEP>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e002      	b.n	800835c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2202      	movs	r2, #2
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb92 	bl	8008a8c <USBD_CtlSendData>
              break;
 8008368:	e004      	b.n	8008374 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fb23 	bl	80089b8 <USBD_CtlError>
              break;
 8008372:	bf00      	nop
          }
          break;
 8008374:	e004      	b.n	8008380 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fb1d 	bl	80089b8 <USBD_CtlError>
          break;
 800837e:	bf00      	nop
      }
      break;
 8008380:	e004      	b.n	800838c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fb17 	bl	80089b8 <USBD_CtlError>
      break;
 800838a:	bf00      	nop
  }

  return ret;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	885b      	ldrh	r3, [r3, #2]
 80083b2:	0a1b      	lsrs	r3, r3, #8
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b06      	cmp	r3, #6
 80083ba:	f200 8128 	bhi.w	800860e <USBD_GetDescriptor+0x276>
 80083be:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <USBD_GetDescriptor+0x2c>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083e1 	.word	0x080083e1
 80083c8:	080083f9 	.word	0x080083f9
 80083cc:	08008439 	.word	0x08008439
 80083d0:	0800860f 	.word	0x0800860f
 80083d4:	0800860f 	.word	0x0800860f
 80083d8:	080085af 	.word	0x080085af
 80083dc:	080085db 	.word	0x080085db
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
      break;
 80083f6:	e112      	b.n	800861e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7c1b      	ldrb	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008408:	f107 0208 	add.w	r2, r7, #8
 800840c:	4610      	mov	r0, r2
 800840e:	4798      	blx	r3
 8008410:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	2202      	movs	r2, #2
 8008418:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800841a:	e100      	b.n	800861e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008424:	f107 0208 	add.w	r2, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	2202      	movs	r2, #2
 8008434:	701a      	strb	r2, [r3, #0]
      break;
 8008436:	e0f2      	b.n	800861e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	885b      	ldrh	r3, [r3, #2]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b05      	cmp	r3, #5
 8008440:	f200 80ac 	bhi.w	800859c <USBD_GetDescriptor+0x204>
 8008444:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <USBD_GetDescriptor+0xb4>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	08008465 	.word	0x08008465
 8008450:	08008499 	.word	0x08008499
 8008454:	080084cd 	.word	0x080084cd
 8008458:	08008501 	.word	0x08008501
 800845c:	08008535 	.word	0x08008535
 8008460:	08008569 	.word	0x08008569
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	7c12      	ldrb	r2, [r2, #16]
 800847c:	f107 0108 	add.w	r1, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008486:	e091      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fa94 	bl	80089b8 <USBD_CtlError>
            err++;
 8008490:	7afb      	ldrb	r3, [r7, #11]
 8008492:	3301      	adds	r3, #1
 8008494:	72fb      	strb	r3, [r7, #11]
          break;
 8008496:	e089      	b.n	80085ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	7c12      	ldrb	r2, [r2, #16]
 80084b0:	f107 0108 	add.w	r1, r7, #8
 80084b4:	4610      	mov	r0, r2
 80084b6:	4798      	blx	r3
 80084b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ba:	e077      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa7a 	bl	80089b8 <USBD_CtlError>
            err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ca:	e06f      	b.n	80085ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00b      	beq.n	80084f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	7c12      	ldrb	r2, [r2, #16]
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	4610      	mov	r0, r2
 80084ea:	4798      	blx	r3
 80084ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ee:	e05d      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa60 	bl	80089b8 <USBD_CtlError>
            err++;
 80084f8:	7afb      	ldrb	r3, [r7, #11]
 80084fa:	3301      	adds	r3, #1
 80084fc:	72fb      	strb	r3, [r7, #11]
          break;
 80084fe:	e055      	b.n	80085ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e043      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fa46 	bl	80089b8 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e03b      	b.n	80085ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e029      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa2c 	bl	80089b8 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e021      	b.n	80085ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e00f      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa12 	bl	80089b8 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e007      	b.n	80085ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa0a 	bl	80089b8 <USBD_CtlError>
          err++;
 80085a4:	7afb      	ldrb	r3, [r7, #11]
 80085a6:	3301      	adds	r3, #1
 80085a8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085aa:	e038      	b.n	800861e <USBD_GetDescriptor+0x286>
 80085ac:	e037      	b.n	800861e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7c1b      	ldrb	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d109      	bne.n	80085ca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085be:	f107 0208 	add.w	r2, r7, #8
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
 80085c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085c8:	e029      	b.n	800861e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9f3 	bl	80089b8 <USBD_CtlError>
        err++;
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	3301      	adds	r3, #1
 80085d6:	72fb      	strb	r3, [r7, #11]
      break;
 80085d8:	e021      	b.n	800861e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	7c1b      	ldrb	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10d      	bne.n	80085fe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ea:	f107 0208 	add.w	r2, r7, #8
 80085ee:	4610      	mov	r0, r2
 80085f0:	4798      	blx	r3
 80085f2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	2207      	movs	r2, #7
 80085fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085fc:	e00f      	b.n	800861e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f9d9 	bl	80089b8 <USBD_CtlError>
        err++;
 8008606:	7afb      	ldrb	r3, [r7, #11]
 8008608:	3301      	adds	r3, #1
 800860a:	72fb      	strb	r3, [r7, #11]
      break;
 800860c:	e007      	b.n	800861e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f9d1 	bl	80089b8 <USBD_CtlError>
      err++;
 8008616:	7afb      	ldrb	r3, [r7, #11]
 8008618:	3301      	adds	r3, #1
 800861a:	72fb      	strb	r3, [r7, #11]
      break;
 800861c:	bf00      	nop
  }

  if (err != 0U)
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11c      	bne.n	800865e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008624:	893b      	ldrh	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d011      	beq.n	800864e <USBD_GetDescriptor+0x2b6>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	88db      	ldrh	r3, [r3, #6]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88da      	ldrh	r2, [r3, #6]
 8008636:	893b      	ldrh	r3, [r7, #8]
 8008638:	4293      	cmp	r3, r2
 800863a:	bf28      	it	cs
 800863c:	4613      	movcs	r3, r2
 800863e:	b29b      	uxth	r3, r3
 8008640:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008642:	893b      	ldrh	r3, [r7, #8]
 8008644:	461a      	mov	r2, r3
 8008646:	68f9      	ldr	r1, [r7, #12]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa1f 	bl	8008a8c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d104      	bne.n	8008660 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa76 	bl	8008b48 <USBD_CtlSendStatus>
 800865c:	e000      	b.n	8008660 <USBD_GetDescriptor+0x2c8>
    return;
 800865e:	bf00      	nop
    }
  }
}
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop

08008668 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	889b      	ldrh	r3, [r3, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d130      	bne.n	80086dc <USBD_SetAddress+0x74>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	88db      	ldrh	r3, [r3, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d12c      	bne.n	80086dc <USBD_SetAddress+0x74>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	885b      	ldrh	r3, [r3, #2]
 8008686:	2b7f      	cmp	r3, #127	@ 0x7f
 8008688:	d828      	bhi.n	80086dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800869c:	2b03      	cmp	r3, #3
 800869e:	d104      	bne.n	80086aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f988 	bl	80089b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a8:	e01d      	b.n	80086e6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fe77 	bl	80093aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa43 	bl	8008b48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d0:	e009      	b.n	80086e6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086da:	e004      	b.n	80086e6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f96a 	bl	80089b8 <USBD_CtlError>
  }
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	4b41      	ldr	r3, [pc, #260]	@ (8008808 <USBD_SetConfig+0x118>)
 8008702:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008704:	4b40      	ldr	r3, [pc, #256]	@ (8008808 <USBD_SetConfig+0x118>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d904      	bls.n	8008716 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f952 	bl	80089b8 <USBD_CtlError>
 8008714:	e075      	b.n	8008802 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800871c:	2b02      	cmp	r3, #2
 800871e:	d002      	beq.n	8008726 <USBD_SetConfig+0x36>
 8008720:	2b03      	cmp	r3, #3
 8008722:	d023      	beq.n	800876c <USBD_SetConfig+0x7c>
 8008724:	e062      	b.n	80087ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008726:	4b38      	ldr	r3, [pc, #224]	@ (8008808 <USBD_SetConfig+0x118>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01a      	beq.n	8008764 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800872e:	4b36      	ldr	r3, [pc, #216]	@ (8008808 <USBD_SetConfig+0x118>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2203      	movs	r2, #3
 800873c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008740:	4b31      	ldr	r3, [pc, #196]	@ (8008808 <USBD_SetConfig+0x118>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff f9e7 	bl	8007b1a <USBD_SetClassConfig>
 800874c:	4603      	mov	r3, r0
 800874e:	2b02      	cmp	r3, #2
 8008750:	d104      	bne.n	800875c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f92f 	bl	80089b8 <USBD_CtlError>
            return;
 800875a:	e052      	b.n	8008802 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f9f3 	bl	8008b48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008762:	e04e      	b.n	8008802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9ef 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 800876a:	e04a      	b.n	8008802 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800876c:	4b26      	ldr	r3, [pc, #152]	@ (8008808 <USBD_SetConfig+0x118>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d112      	bne.n	800879a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800877c:	4b22      	ldr	r3, [pc, #136]	@ (8008808 <USBD_SetConfig+0x118>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008786:	4b20      	ldr	r3, [pc, #128]	@ (8008808 <USBD_SetConfig+0x118>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff f9e3 	bl	8007b58 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9d8 	bl	8008b48 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008798:	e033      	b.n	8008802 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800879a:	4b1b      	ldr	r3, [pc, #108]	@ (8008808 <USBD_SetConfig+0x118>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d01d      	beq.n	80087e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff f9d1 	bl	8007b58 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087b6:	4b14      	ldr	r3, [pc, #80]	@ (8008808 <USBD_SetConfig+0x118>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087c0:	4b11      	ldr	r3, [pc, #68]	@ (8008808 <USBD_SetConfig+0x118>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff f9a7 	bl	8007b1a <USBD_SetClassConfig>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d104      	bne.n	80087dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f8ef 	bl	80089b8 <USBD_CtlError>
            return;
 80087da:	e012      	b.n	8008802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f9b3 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 80087e2:	e00e      	b.n	8008802 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f9af 	bl	8008b48 <USBD_CtlSendStatus>
        break;
 80087ea:	e00a      	b.n	8008802 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8e2 	bl	80089b8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087f4:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <USBD_SetConfig+0x118>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff f9ac 	bl	8007b58 <USBD_ClrClassConfig>
        break;
 8008800:	bf00      	nop
    }
  }
}
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	200003e8 	.word	0x200003e8

0800880c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d004      	beq.n	8008828 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f8c9 	bl	80089b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008826:	e022      	b.n	800886e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800882e:	2b02      	cmp	r3, #2
 8008830:	dc02      	bgt.n	8008838 <USBD_GetConfig+0x2c>
 8008832:	2b00      	cmp	r3, #0
 8008834:	dc03      	bgt.n	800883e <USBD_GetConfig+0x32>
 8008836:	e015      	b.n	8008864 <USBD_GetConfig+0x58>
 8008838:	2b03      	cmp	r3, #3
 800883a:	d00b      	beq.n	8008854 <USBD_GetConfig+0x48>
 800883c:	e012      	b.n	8008864 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3308      	adds	r3, #8
 8008848:	2201      	movs	r2, #1
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f91d 	bl	8008a8c <USBD_CtlSendData>
        break;
 8008852:	e00c      	b.n	800886e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	3304      	adds	r3, #4
 8008858:	2201      	movs	r2, #1
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f915 	bl	8008a8c <USBD_CtlSendData>
        break;
 8008862:	e004      	b.n	800886e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f8a6 	bl	80089b8 <USBD_CtlError>
        break;
 800886c:	bf00      	nop
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008886:	3b01      	subs	r3, #1
 8008888:	2b02      	cmp	r3, #2
 800888a:	d81e      	bhi.n	80088ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	88db      	ldrh	r3, [r3, #6]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d004      	beq.n	800889e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f88e 	bl	80089b8 <USBD_CtlError>
        break;
 800889c:	e01a      	b.n	80088d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f043 0202 	orr.w	r2, r3, #2
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	330c      	adds	r3, #12
 80088be:	2202      	movs	r2, #2
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8e2 	bl	8008a8c <USBD_CtlSendData>
      break;
 80088c8:	e004      	b.n	80088d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f873 	bl	80089b8 <USBD_CtlError>
      break;
 80088d2:	bf00      	nop
  }
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d106      	bne.n	80088fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f926 	bl	8008b48 <USBD_CtlSendStatus>
  }
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008914:	3b01      	subs	r3, #1
 8008916:	2b02      	cmp	r3, #2
 8008918:	d80b      	bhi.n	8008932 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	885b      	ldrh	r3, [r3, #2]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d10c      	bne.n	800893c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f90c 	bl	8008b48 <USBD_CtlSendStatus>
      }
      break;
 8008930:	e004      	b.n	800893c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f83f 	bl	80089b8 <USBD_CtlError>
      break;
 800893a:	e000      	b.n	800893e <USBD_ClrFeature+0x3a>
      break;
 800893c:	bf00      	nop
  }
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	785a      	ldrb	r2, [r3, #1]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	3302      	adds	r3, #2
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3303      	adds	r3, #3
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	4413      	add	r3, r2
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	3304      	adds	r3, #4
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	3305      	adds	r3, #5
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	b29b      	uxth	r3, r3
 800898c:	4413      	add	r3, r2
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	3306      	adds	r3, #6
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	3307      	adds	r3, #7
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	4413      	add	r3, r2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	80da      	strh	r2, [r3, #6]

}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089c2:	2180      	movs	r1, #128	@ 0x80
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc87 	bl	80092d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fc83 	bl	80092d8 <USBD_LL_StallEP>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b086      	sub	sp, #24
 80089de:	af00      	add	r7, sp, #0
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d032      	beq.n	8008a56 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f834 	bl	8008a5e <USBD_GetLen>
 80089f6:	4603      	mov	r3, r0
 80089f8:	3301      	adds	r3, #1
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	75fa      	strb	r2, [r7, #23]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	4413      	add	r3, r2
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	7812      	ldrb	r2, [r2, #0]
 8008a14:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	75fa      	strb	r2, [r7, #23]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4413      	add	r3, r2
 8008a22:	2203      	movs	r2, #3
 8008a24:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a26:	e012      	b.n	8008a4e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	60fa      	str	r2, [r7, #12]
 8008a2e:	7dfa      	ldrb	r2, [r7, #23]
 8008a30:	1c51      	adds	r1, r2, #1
 8008a32:	75f9      	strb	r1, [r7, #23]
 8008a34:	4611      	mov	r1, r2
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	440a      	add	r2, r1
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	75fa      	strb	r2, [r7, #23]
 8008a44:	461a      	mov	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	4413      	add	r3, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e8      	bne.n	8008a28 <USBD_GetString+0x4e>
    }
  }
}
 8008a56:	bf00      	nop
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a6a:	e005      	b.n	8008a78 <USBD_GetLen+0x1a>
  {
    len++;
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3301      	adds	r3, #1
 8008a76:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1f5      	bne.n	8008a6c <USBD_GetLen+0xe>
  }

  return len;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008aa2:	88fa      	ldrh	r2, [r7, #6]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008aa8:	88fa      	ldrh	r2, [r7, #6]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fc97 	bl	80093e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ad2:	88fb      	ldrh	r3, [r7, #6]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fc85 	bl	80093e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2203      	movs	r2, #3
 8008afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b06:	88fa      	ldrh	r2, [r7, #6]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	2100      	movs	r1, #0
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 fc8a 	bl	800942e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b32:	88fb      	ldrh	r3, [r7, #6]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	2100      	movs	r1, #0
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fc78 	bl	800942e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2204      	movs	r2, #4
 8008b54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b58:	2300      	movs	r3, #0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fc42 	bl	80093e8 <USBD_LL_Transmit>

  return USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2205      	movs	r2, #5
 8008b7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2200      	movs	r2, #0
 8008b82:	2100      	movs	r1, #0
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc52 	bl	800942e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4912      	ldr	r1, [pc, #72]	@ (8008be4 <MX_USB_DEVICE_Init+0x50>)
 8008b9c:	4812      	ldr	r0, [pc, #72]	@ (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008b9e:	f7fe ff62 	bl	8007a66 <USBD_Init>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ba8:	f7f9 fa5a 	bl	8002060 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bac:	490f      	ldr	r1, [pc, #60]	@ (8008bec <MX_USB_DEVICE_Init+0x58>)
 8008bae:	480e      	ldr	r0, [pc, #56]	@ (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bb0:	f7fe ff84 	bl	8007abc <USBD_RegisterClass>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bba:	f7f9 fa51 	bl	8002060 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bbe:	490c      	ldr	r1, [pc, #48]	@ (8008bf0 <MX_USB_DEVICE_Init+0x5c>)
 8008bc0:	4809      	ldr	r0, [pc, #36]	@ (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bc2:	f7fe feb5 	bl	8007930 <USBD_CDC_RegisterInterface>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bcc:	f7f9 fa48 	bl	8002060 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bd0:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <MX_USB_DEVICE_Init+0x54>)
 8008bd2:	f7fe ff8c 	bl	8007aee <USBD_Start>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008bdc:	f7f9 fa40 	bl	8002060 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008be0:	bf00      	nop
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000130 	.word	0x20000130
 8008be8:	200003ec 	.word	0x200003ec
 8008bec:	2000001c 	.word	0x2000001c
 8008bf0:	20000120 	.word	0x20000120

08008bf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4905      	ldr	r1, [pc, #20]	@ (8008c10 <CDC_Init_FS+0x1c>)
 8008bfc:	4805      	ldr	r0, [pc, #20]	@ (8008c14 <CDC_Init_FS+0x20>)
 8008bfe:	f7fe fead 	bl	800795c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c02:	4905      	ldr	r1, [pc, #20]	@ (8008c18 <CDC_Init_FS+0x24>)
 8008c04:	4803      	ldr	r0, [pc, #12]	@ (8008c14 <CDC_Init_FS+0x20>)
 8008c06:	f7fe fec2 	bl	800798e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000ab0 	.word	0x20000ab0
 8008c14:	200003ec 	.word	0x200003ec
 8008c18:	200006b0 	.word	0x200006b0

08008c1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr
	...

08008c2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b23      	cmp	r3, #35	@ 0x23
 8008c40:	d84a      	bhi.n	8008cd8 <CDC_Control_FS+0xac>
 8008c42:	a201      	add	r2, pc, #4	@ (adr r2, 8008c48 <CDC_Control_FS+0x1c>)
 8008c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c48:	08008cd9 	.word	0x08008cd9
 8008c4c:	08008cd9 	.word	0x08008cd9
 8008c50:	08008cd9 	.word	0x08008cd9
 8008c54:	08008cd9 	.word	0x08008cd9
 8008c58:	08008cd9 	.word	0x08008cd9
 8008c5c:	08008cd9 	.word	0x08008cd9
 8008c60:	08008cd9 	.word	0x08008cd9
 8008c64:	08008cd9 	.word	0x08008cd9
 8008c68:	08008cd9 	.word	0x08008cd9
 8008c6c:	08008cd9 	.word	0x08008cd9
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008cd9 	.word	0x08008cd9
 8008c7c:	08008cd9 	.word	0x08008cd9
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008cd9 	.word	0x08008cd9
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	08008cd9 	.word	0x08008cd9
 8008c90:	08008cd9 	.word	0x08008cd9
 8008c94:	08008cd9 	.word	0x08008cd9
 8008c98:	08008cd9 	.word	0x08008cd9
 8008c9c:	08008cd9 	.word	0x08008cd9
 8008ca0:	08008cd9 	.word	0x08008cd9
 8008ca4:	08008cd9 	.word	0x08008cd9
 8008ca8:	08008cd9 	.word	0x08008cd9
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008cd9 	.word	0x08008cd9
 8008cbc:	08008cd9 	.word	0x08008cd9
 8008cc0:	08008cd9 	.word	0x08008cd9
 8008cc4:	08008cd9 	.word	0x08008cd9
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008cd9 	.word	0x08008cd9
 8008cd0:	08008cd9 	.word	0x08008cd9
 8008cd4:	08008cd9 	.word	0x08008cd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008cd8:	bf00      	nop
  }

  return (USBD_OK);
 8008cda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop

08008ce8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e025      	b.n	8008d44 <CDC_Receive_FS+0x5c>
    char receivedChar = Buf[i];
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	2b0a      	cmp	r3, #10
 8008d06:	d10b      	bne.n	8008d20 <CDC_Receive_FS+0x38>
      usbBuffer[usbBufferIndex] = '\0';
 8008d08:	4b17      	ldr	r3, [pc, #92]	@ (8008d68 <CDC_Receive_FS+0x80>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a17      	ldr	r2, [pc, #92]	@ (8008d6c <CDC_Receive_FS+0x84>)
 8008d0e:	2100      	movs	r1, #0
 8008d10:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;
 8008d12:	4b17      	ldr	r3, [pc, #92]	@ (8008d70 <CDC_Receive_FS+0x88>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	701a      	strb	r2, [r3, #0]
      usbBufferIndex = 0;
 8008d18:	4b13      	ldr	r3, [pc, #76]	@ (8008d68 <CDC_Receive_FS+0x80>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
      break;
 8008d1e:	e016      	b.n	8008d4e <CDC_Receive_FS+0x66>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	2b0d      	cmp	r3, #13
 8008d24:	d00b      	beq.n	8008d3e <CDC_Receive_FS+0x56>
 8008d26:	4b10      	ldr	r3, [pc, #64]	@ (8008d68 <CDC_Receive_FS+0x80>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b62      	cmp	r3, #98	@ 0x62
 8008d2c:	d807      	bhi.n	8008d3e <CDC_Receive_FS+0x56>
      usbBuffer[usbBufferIndex++] = receivedChar;
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d68 <CDC_Receive_FS+0x80>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	490c      	ldr	r1, [pc, #48]	@ (8008d68 <CDC_Receive_FS+0x80>)
 8008d36:	600a      	str	r2, [r1, #0]
 8008d38:	490c      	ldr	r1, [pc, #48]	@ (8008d6c <CDC_Receive_FS+0x84>)
 8008d3a:	7afa      	ldrb	r2, [r7, #11]
 8008d3c:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d3d4      	bcc.n	8008cf8 <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4808      	ldr	r0, [pc, #32]	@ (8008d74 <CDC_Receive_FS+0x8c>)
 8008d52:	f7fe fe1c 	bl	800798e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d56:	4807      	ldr	r0, [pc, #28]	@ (8008d74 <CDC_Receive_FS+0x8c>)
 8008d58:	f7fe fe5b 	bl	8007a12 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	200003d4 	.word	0x200003d4
 8008d6c:	20000370 	.word	0x20000370
 8008d70:	20000000 	.word	0x20000000
 8008d74:	200003ec 	.word	0x200003ec

08008d78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d88:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc0 <CDC_Transmit_FS+0x48>)
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e00b      	b.n	8008db6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d9e:	887b      	ldrh	r3, [r7, #2]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4806      	ldr	r0, [pc, #24]	@ (8008dc0 <CDC_Transmit_FS+0x48>)
 8008da6:	f7fe fdd9 	bl	800795c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008daa:	4805      	ldr	r0, [pc, #20]	@ (8008dc0 <CDC_Transmit_FS+0x48>)
 8008dac:	f7fe fe02 	bl	80079b4 <USBD_CDC_TransmitPacket>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200003ec 	.word	0x200003ec

08008dc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	6039      	str	r1, [r7, #0]
 8008dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2212      	movs	r2, #18
 8008dd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000014c 	.word	0x2000014c

08008de8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2204      	movs	r2, #4
 8008df8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dfa:	4b03      	ldr	r3, [pc, #12]	@ (8008e08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20000160 	.word	0x20000160

08008e0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d105      	bne.n	8008e2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4907      	ldr	r1, [pc, #28]	@ (8008e40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e22:	4808      	ldr	r0, [pc, #32]	@ (8008e44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e24:	f7ff fdd9 	bl	80089da <USBD_GetString>
 8008e28:	e004      	b.n	8008e34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e2a:	683a      	ldr	r2, [r7, #0]
 8008e2c:	4904      	ldr	r1, [pc, #16]	@ (8008e40 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e2e:	4805      	ldr	r0, [pc, #20]	@ (8008e44 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e30:	f7ff fdd3 	bl	80089da <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e34:	4b02      	ldr	r3, [pc, #8]	@ (8008e40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000eb0 	.word	0x20000eb0
 8008e44:	0800c85c 	.word	0x0800c85c

08008e48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	6039      	str	r1, [r7, #0]
 8008e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	4904      	ldr	r1, [pc, #16]	@ (8008e68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e58:	4804      	ldr	r0, [pc, #16]	@ (8008e6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e5a:	f7ff fdbe 	bl	80089da <USBD_GetString>
  return USBD_StrDesc;
 8008e5e:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000eb0 	.word	0x20000eb0
 8008e6c:	0800c874 	.word	0x0800c874

08008e70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	221a      	movs	r2, #26
 8008e80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e82:	f000 f843 	bl	8008f0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e86:	4b02      	ldr	r3, [pc, #8]	@ (8008e90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000164 	.word	0x20000164

08008e94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4907      	ldr	r1, [pc, #28]	@ (8008ec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eaa:	4808      	ldr	r0, [pc, #32]	@ (8008ecc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eac:	f7ff fd95 	bl	80089da <USBD_GetString>
 8008eb0:	e004      	b.n	8008ebc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4904      	ldr	r1, [pc, #16]	@ (8008ec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eb6:	4805      	ldr	r0, [pc, #20]	@ (8008ecc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eb8:	f7ff fd8f 	bl	80089da <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ebc:	4b02      	ldr	r3, [pc, #8]	@ (8008ec8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20000eb0 	.word	0x20000eb0
 8008ecc:	0800c888 	.word	0x0800c888

08008ed0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	6039      	str	r1, [r7, #0]
 8008eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d105      	bne.n	8008eee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	4907      	ldr	r1, [pc, #28]	@ (8008f04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ee6:	4808      	ldr	r0, [pc, #32]	@ (8008f08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ee8:	f7ff fd77 	bl	80089da <USBD_GetString>
 8008eec:	e004      	b.n	8008ef8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	4904      	ldr	r1, [pc, #16]	@ (8008f04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ef2:	4805      	ldr	r0, [pc, #20]	@ (8008f08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ef4:	f7ff fd71 	bl	80089da <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ef8:	4b02      	ldr	r3, [pc, #8]	@ (8008f04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000eb0 	.word	0x20000eb0
 8008f08:	0800c894 	.word	0x0800c894

08008f0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f12:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <Get_SerialNum+0x44>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <Get_SerialNum+0x48>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <Get_SerialNum+0x4c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f32:	2208      	movs	r2, #8
 8008f34:	4909      	ldr	r1, [pc, #36]	@ (8008f5c <Get_SerialNum+0x50>)
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f000 f814 	bl	8008f64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	4908      	ldr	r1, [pc, #32]	@ (8008f60 <Get_SerialNum+0x54>)
 8008f40:	68b8      	ldr	r0, [r7, #8]
 8008f42:	f000 f80f 	bl	8008f64 <IntToUnicode>
  }
}
 8008f46:	bf00      	nop
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	1ffff7e8 	.word	0x1ffff7e8
 8008f54:	1ffff7ec 	.word	0x1ffff7ec
 8008f58:	1ffff7f0 	.word	0x1ffff7f0
 8008f5c:	20000166 	.word	0x20000166
 8008f60:	20000176 	.word	0x20000176

08008f64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]
 8008f7a:	e027      	b.n	8008fcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	0f1b      	lsrs	r3, r3, #28
 8008f80:	2b09      	cmp	r3, #9
 8008f82:	d80b      	bhi.n	8008f9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	0f1b      	lsrs	r3, r3, #28
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	4619      	mov	r1, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	440b      	add	r3, r1
 8008f94:	3230      	adds	r2, #48	@ 0x30
 8008f96:	b2d2      	uxtb	r2, r2
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	e00a      	b.n	8008fb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	0f1b      	lsrs	r3, r3, #28
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	440b      	add	r3, r1
 8008fac:	3237      	adds	r2, #55	@ 0x37
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fb8:	7dfb      	ldrb	r3, [r7, #23]
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	75fb      	strb	r3, [r7, #23]
 8008fcc:	7dfa      	ldrb	r2, [r7, #23]
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d3d3      	bcc.n	8008f7c <IntToUnicode+0x18>
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a0d      	ldr	r2, [pc, #52]	@ (8009024 <HAL_PCD_MspInit+0x44>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d113      	bne.n	800901a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8009028 <HAL_PCD_MspInit+0x48>)
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8009028 <HAL_PCD_MspInit+0x48>)
 8008ff8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ffc:	61d3      	str	r3, [r2, #28]
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <HAL_PCD_MspInit+0x48>)
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	2014      	movs	r0, #20
 8009010:	f7f9 fadf 	bl	80025d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009014:	2014      	movs	r0, #20
 8009016:	f7f9 faf8 	bl	800260a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800901a:	bf00      	nop
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40005c00 	.word	0x40005c00
 8009028:	40021000 	.word	0x40021000

0800902c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7fe fd9b 	bl	8007b7e <USBD_LL_SetupStage>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	440b      	add	r3, r1
 8009070:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	4619      	mov	r1, r3
 800907a:	f7fe fdcd 	bl	8007c18 <USBD_LL_DataOutStage>
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009098:	78fa      	ldrb	r2, [r7, #3]
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	440b      	add	r3, r1
 80090a6:	3324      	adds	r3, #36	@ 0x24
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	78fb      	ldrb	r3, [r7, #3]
 80090ac:	4619      	mov	r1, r3
 80090ae:	f7fe fe24 	bl	8007cfa <USBD_LL_DataInStage>
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe ff34 	bl	8007f36 <USBD_LL_SOF>
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090de:	2301      	movs	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	799b      	ldrb	r3, [r3, #6]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d001      	beq.n	80090ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090ea:	f7f8 ffb9 	bl	8002060 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090f4:	7bfa      	ldrb	r2, [r7, #15]
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fee4 	bl	8007ec6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009104:	4618      	mov	r0, r3
 8009106:	f7fe fe9d 	bl	8007e44 <USBD_LL_Reset>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fede 	bl	8007ee4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	7a9b      	ldrb	r3, [r3, #10]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009130:	4b04      	ldr	r3, [pc, #16]	@ (8009144 <HAL_PCD_SuspendCallback+0x30>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4a03      	ldr	r2, [pc, #12]	@ (8009144 <HAL_PCD_SuspendCallback+0x30>)
 8009136:	f043 0306 	orr.w	r3, r3, #6
 800913a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800913c:	bf00      	nop
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	e000ed00 	.word	0xe000ed00

08009148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fed8 	bl	8007f0c <USBD_LL_Resume>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800916c:	4a28      	ldr	r2, [pc, #160]	@ (8009210 <USBD_LL_Init+0xac>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a26      	ldr	r2, [pc, #152]	@ (8009210 <USBD_LL_Init+0xac>)
 8009178:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800917c:	4b24      	ldr	r3, [pc, #144]	@ (8009210 <USBD_LL_Init+0xac>)
 800917e:	4a25      	ldr	r2, [pc, #148]	@ (8009214 <USBD_LL_Init+0xb0>)
 8009180:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009182:	4b23      	ldr	r3, [pc, #140]	@ (8009210 <USBD_LL_Init+0xac>)
 8009184:	2208      	movs	r2, #8
 8009186:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009188:	4b21      	ldr	r3, [pc, #132]	@ (8009210 <USBD_LL_Init+0xac>)
 800918a:	2202      	movs	r2, #2
 800918c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800918e:	4b20      	ldr	r3, [pc, #128]	@ (8009210 <USBD_LL_Init+0xac>)
 8009190:	2200      	movs	r2, #0
 8009192:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009194:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <USBD_LL_Init+0xac>)
 8009196:	2200      	movs	r2, #0
 8009198:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800919a:	4b1d      	ldr	r3, [pc, #116]	@ (8009210 <USBD_LL_Init+0xac>)
 800919c:	2200      	movs	r2, #0
 800919e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091a0:	481b      	ldr	r0, [pc, #108]	@ (8009210 <USBD_LL_Init+0xac>)
 80091a2:	f7f9 fc00 	bl	80029a6 <HAL_PCD_Init>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091ac:	f7f8 ff58 	bl	8002060 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091b6:	2318      	movs	r3, #24
 80091b8:	2200      	movs	r2, #0
 80091ba:	2100      	movs	r1, #0
 80091bc:	f7fb f911 	bl	80043e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091c6:	2358      	movs	r3, #88	@ 0x58
 80091c8:	2200      	movs	r2, #0
 80091ca:	2180      	movs	r1, #128	@ 0x80
 80091cc:	f7fb f909 	bl	80043e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091d6:	23c0      	movs	r3, #192	@ 0xc0
 80091d8:	2200      	movs	r2, #0
 80091da:	2181      	movs	r1, #129	@ 0x81
 80091dc:	f7fb f901 	bl	80043e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80091ea:	2200      	movs	r2, #0
 80091ec:	2101      	movs	r1, #1
 80091ee:	f7fb f8f8 	bl	80043e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091fc:	2200      	movs	r2, #0
 80091fe:	2182      	movs	r1, #130	@ 0x82
 8009200:	f7fb f8ef 	bl	80043e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	200010b0 	.word	0x200010b0
 8009214:	40005c00 	.word	0x40005c00

08009218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800922e:	4618      	mov	r0, r3
 8009230:	f7f9 fcaf 	bl	8002b92 <HAL_PCD_Start>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	4618      	mov	r0, r3
 800923c:	f000 f94e 	bl	80094dc <USBD_Get_USB_Status>
 8009240:	4603      	mov	r3, r0
 8009242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009244:	7bbb      	ldrb	r3, [r7, #14]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	461a      	mov	r2, r3
 800925c:	4603      	mov	r3, r0
 800925e:	70fb      	strb	r3, [r7, #3]
 8009260:	460b      	mov	r3, r1
 8009262:	70bb      	strb	r3, [r7, #2]
 8009264:	4613      	mov	r3, r2
 8009266:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009276:	78bb      	ldrb	r3, [r7, #2]
 8009278:	883a      	ldrh	r2, [r7, #0]
 800927a:	78f9      	ldrb	r1, [r7, #3]
 800927c:	f7f9 fe03 	bl	8002e86 <HAL_PCD_EP_Open>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f928 	bl	80094dc <USBD_Get_USB_Status>
 800928c:	4603      	mov	r3, r0
 800928e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009290:	7bbb      	ldrb	r3, [r7, #14]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7f9 fe41 	bl	8002f40 <HAL_PCD_EP_Close>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f909 	bl	80094dc <USBD_Get_USB_Status>
 80092ca:	4603      	mov	r3, r0
 80092cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f9 fee9 	bl	80030ce <HAL_PCD_EP_SetStall>
 80092fc:	4603      	mov	r3, r0
 80092fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 f8ea 	bl	80094dc <USBD_Get_USB_Status>
 8009308:	4603      	mov	r3, r0
 800930a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800930c:	7bbb      	ldrb	r3, [r7, #14]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7f9 ff2a 	bl	800318e <HAL_PCD_EP_ClrStall>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	4618      	mov	r0, r3
 8009342:	f000 f8cb 	bl	80094dc <USBD_Get_USB_Status>
 8009346:	4603      	mov	r3, r0
 8009348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800934a:	7bbb      	ldrb	r3, [r7, #14]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009366:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	da0b      	bge.n	8009388 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	440b      	add	r3, r1
 8009382:	3312      	adds	r3, #18
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	e00b      	b.n	80093a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	440b      	add	r3, r1
 800939a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800939e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr

080093aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7f9 fd38 	bl	8002e3e <HAL_PCD_SetAddress>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f881 	bl	80094dc <USBD_Get_USB_Status>
 80093da:	4603      	mov	r3, r0
 80093dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093de:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	461a      	mov	r2, r3
 80093f4:	460b      	mov	r3, r1
 80093f6:	72fb      	strb	r3, [r7, #11]
 80093f8:	4613      	mov	r3, r2
 80093fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800940a:	893b      	ldrh	r3, [r7, #8]
 800940c:	7af9      	ldrb	r1, [r7, #11]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	f7f9 fe26 	bl	8003060 <HAL_PCD_EP_Transmit>
 8009414:	4603      	mov	r3, r0
 8009416:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f85e 	bl	80094dc <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009424:	7dbb      	ldrb	r3, [r7, #22]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	461a      	mov	r2, r3
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
 800943e:	4613      	mov	r3, r2
 8009440:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009450:	893b      	ldrh	r3, [r7, #8]
 8009452:	7af9      	ldrb	r1, [r7, #11]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	f7f9 fdbb 	bl	8002fd0 <HAL_PCD_EP_Receive>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f83b 	bl	80094dc <USBD_Get_USB_Status>
 8009466:	4603      	mov	r3, r0
 8009468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800946a:	7dbb      	ldrb	r3, [r7, #22]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009486:	78fa      	ldrb	r2, [r7, #3]
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7f9 fdd1 	bl	8003032 <HAL_PCD_EP_GetRxCount>
 8009490:	4603      	mov	r3, r0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094a4:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <USBD_static_malloc+0x14>)
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bc80      	pop	{r7}
 80094ae:	4770      	bx	lr
 80094b0:	20001388 	.word	0x20001388

080094b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]

}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr

080094c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr

080094dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d817      	bhi.n	8009520 <USBD_Get_USB_Status+0x44>
 80094f0:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <USBD_Get_USB_Status+0x1c>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	08009509 	.word	0x08009509
 80094fc:	0800950f 	.word	0x0800950f
 8009500:	08009515 	.word	0x08009515
 8009504:	0800951b 	.word	0x0800951b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
    break;
 800950c:	e00b      	b.n	8009526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800950e:	2302      	movs	r3, #2
 8009510:	73fb      	strb	r3, [r7, #15]
    break;
 8009512:	e008      	b.n	8009526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009514:	2301      	movs	r3, #1
 8009516:	73fb      	strb	r3, [r7, #15]
    break;
 8009518:	e005      	b.n	8009526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	73fb      	strb	r3, [r7, #15]
    break;
 800951e:	e002      	b.n	8009526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009520:	2302      	movs	r3, #2
 8009522:	73fb      	strb	r3, [r7, #15]
    break;
 8009524:	bf00      	nop
  }
  return usb_status;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop

08009534 <atof>:
 8009534:	2100      	movs	r1, #0
 8009536:	f000 bdfb 	b.w	800a130 <strtod>

0800953a <sulp>:
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	460f      	mov	r7, r1
 8009540:	4690      	mov	r8, r2
 8009542:	f001 ff85 	bl	800b450 <__ulp>
 8009546:	4604      	mov	r4, r0
 8009548:	460d      	mov	r5, r1
 800954a:	f1b8 0f00 	cmp.w	r8, #0
 800954e:	d011      	beq.n	8009574 <sulp+0x3a>
 8009550:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009554:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009558:	2b00      	cmp	r3, #0
 800955a:	dd0b      	ble.n	8009574 <sulp+0x3a>
 800955c:	2400      	movs	r4, #0
 800955e:	051b      	lsls	r3, r3, #20
 8009560:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009564:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009568:	4622      	mov	r2, r4
 800956a:	462b      	mov	r3, r5
 800956c:	f7f6 ffb4 	bl	80004d8 <__aeabi_dmul>
 8009570:	4604      	mov	r4, r0
 8009572:	460d      	mov	r5, r1
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	0000      	movs	r0, r0
	...

08009580 <_strtod_l>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	b09f      	sub	sp, #124	@ 0x7c
 8009586:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009588:	2200      	movs	r2, #0
 800958a:	460c      	mov	r4, r1
 800958c:	921a      	str	r2, [sp, #104]	@ 0x68
 800958e:	f04f 0a00 	mov.w	sl, #0
 8009592:	f04f 0b00 	mov.w	fp, #0
 8009596:	460a      	mov	r2, r1
 8009598:	9005      	str	r0, [sp, #20]
 800959a:	9219      	str	r2, [sp, #100]	@ 0x64
 800959c:	7811      	ldrb	r1, [r2, #0]
 800959e:	292b      	cmp	r1, #43	@ 0x2b
 80095a0:	d048      	beq.n	8009634 <_strtod_l+0xb4>
 80095a2:	d836      	bhi.n	8009612 <_strtod_l+0x92>
 80095a4:	290d      	cmp	r1, #13
 80095a6:	d830      	bhi.n	800960a <_strtod_l+0x8a>
 80095a8:	2908      	cmp	r1, #8
 80095aa:	d830      	bhi.n	800960e <_strtod_l+0x8e>
 80095ac:	2900      	cmp	r1, #0
 80095ae:	d039      	beq.n	8009624 <_strtod_l+0xa4>
 80095b0:	2200      	movs	r2, #0
 80095b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80095b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80095b6:	782a      	ldrb	r2, [r5, #0]
 80095b8:	2a30      	cmp	r2, #48	@ 0x30
 80095ba:	f040 80b0 	bne.w	800971e <_strtod_l+0x19e>
 80095be:	786a      	ldrb	r2, [r5, #1]
 80095c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095c4:	2a58      	cmp	r2, #88	@ 0x58
 80095c6:	d16c      	bne.n	80096a2 <_strtod_l+0x122>
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095cc:	4a8f      	ldr	r2, [pc, #572]	@ (800980c <_strtod_l+0x28c>)
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	ab1a      	add	r3, sp, #104	@ 0x68
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	9805      	ldr	r0, [sp, #20]
 80095d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095d8:	a919      	add	r1, sp, #100	@ 0x64
 80095da:	f001 f83b 	bl	800a654 <__gethex>
 80095de:	f010 060f 	ands.w	r6, r0, #15
 80095e2:	4604      	mov	r4, r0
 80095e4:	d005      	beq.n	80095f2 <_strtod_l+0x72>
 80095e6:	2e06      	cmp	r6, #6
 80095e8:	d126      	bne.n	8009638 <_strtod_l+0xb8>
 80095ea:	2300      	movs	r3, #0
 80095ec:	3501      	adds	r5, #1
 80095ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80095f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80095f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f040 8582 	bne.w	800a0fe <_strtod_l+0xb7e>
 80095fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095fc:	b1bb      	cbz	r3, 800962e <_strtod_l+0xae>
 80095fe:	4650      	mov	r0, sl
 8009600:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009604:	b01f      	add	sp, #124	@ 0x7c
 8009606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960a:	2920      	cmp	r1, #32
 800960c:	d1d0      	bne.n	80095b0 <_strtod_l+0x30>
 800960e:	3201      	adds	r2, #1
 8009610:	e7c3      	b.n	800959a <_strtod_l+0x1a>
 8009612:	292d      	cmp	r1, #45	@ 0x2d
 8009614:	d1cc      	bne.n	80095b0 <_strtod_l+0x30>
 8009616:	2101      	movs	r1, #1
 8009618:	910e      	str	r1, [sp, #56]	@ 0x38
 800961a:	1c51      	adds	r1, r2, #1
 800961c:	9119      	str	r1, [sp, #100]	@ 0x64
 800961e:	7852      	ldrb	r2, [r2, #1]
 8009620:	2a00      	cmp	r2, #0
 8009622:	d1c7      	bne.n	80095b4 <_strtod_l+0x34>
 8009624:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009626:	9419      	str	r4, [sp, #100]	@ 0x64
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 8566 	bne.w	800a0fa <_strtod_l+0xb7a>
 800962e:	4650      	mov	r0, sl
 8009630:	4659      	mov	r1, fp
 8009632:	e7e7      	b.n	8009604 <_strtod_l+0x84>
 8009634:	2100      	movs	r1, #0
 8009636:	e7ef      	b.n	8009618 <_strtod_l+0x98>
 8009638:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800963a:	b13a      	cbz	r2, 800964c <_strtod_l+0xcc>
 800963c:	2135      	movs	r1, #53	@ 0x35
 800963e:	a81c      	add	r0, sp, #112	@ 0x70
 8009640:	f001 fff6 	bl	800b630 <__copybits>
 8009644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009646:	9805      	ldr	r0, [sp, #20]
 8009648:	f001 fbd6 	bl	800adf8 <_Bfree>
 800964c:	3e01      	subs	r6, #1
 800964e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009650:	2e04      	cmp	r6, #4
 8009652:	d806      	bhi.n	8009662 <_strtod_l+0xe2>
 8009654:	e8df f006 	tbb	[pc, r6]
 8009658:	201d0314 	.word	0x201d0314
 800965c:	14          	.byte	0x14
 800965d:	00          	.byte	0x00
 800965e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009662:	05e1      	lsls	r1, r4, #23
 8009664:	bf48      	it	mi
 8009666:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800966a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800966e:	0d1b      	lsrs	r3, r3, #20
 8009670:	051b      	lsls	r3, r3, #20
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1bd      	bne.n	80095f2 <_strtod_l+0x72>
 8009676:	f000 fefb 	bl	800a470 <__errno>
 800967a:	2322      	movs	r3, #34	@ 0x22
 800967c:	6003      	str	r3, [r0, #0]
 800967e:	e7b8      	b.n	80095f2 <_strtod_l+0x72>
 8009680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009688:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800968c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009690:	e7e7      	b.n	8009662 <_strtod_l+0xe2>
 8009692:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009810 <_strtod_l+0x290>
 8009696:	e7e4      	b.n	8009662 <_strtod_l+0xe2>
 8009698:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800969c:	f04f 3aff 	mov.w	sl, #4294967295
 80096a0:	e7df      	b.n	8009662 <_strtod_l+0xe2>
 80096a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b30      	cmp	r3, #48	@ 0x30
 80096ac:	d0f9      	beq.n	80096a2 <_strtod_l+0x122>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d09f      	beq.n	80095f2 <_strtod_l+0x72>
 80096b2:	2301      	movs	r3, #1
 80096b4:	2700      	movs	r7, #0
 80096b6:	220a      	movs	r2, #10
 80096b8:	46b9      	mov	r9, r7
 80096ba:	9308      	str	r3, [sp, #32]
 80096bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096be:	970b      	str	r7, [sp, #44]	@ 0x2c
 80096c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80096c2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096c4:	7805      	ldrb	r5, [r0, #0]
 80096c6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096ca:	b2d9      	uxtb	r1, r3
 80096cc:	2909      	cmp	r1, #9
 80096ce:	d928      	bls.n	8009722 <_strtod_l+0x1a2>
 80096d0:	2201      	movs	r2, #1
 80096d2:	4950      	ldr	r1, [pc, #320]	@ (8009814 <_strtod_l+0x294>)
 80096d4:	f000 fe74 	bl	800a3c0 <strncmp>
 80096d8:	2800      	cmp	r0, #0
 80096da:	d032      	beq.n	8009742 <_strtod_l+0x1c2>
 80096dc:	2000      	movs	r0, #0
 80096de:	462a      	mov	r2, r5
 80096e0:	4603      	mov	r3, r0
 80096e2:	464d      	mov	r5, r9
 80096e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096e6:	2a65      	cmp	r2, #101	@ 0x65
 80096e8:	d001      	beq.n	80096ee <_strtod_l+0x16e>
 80096ea:	2a45      	cmp	r2, #69	@ 0x45
 80096ec:	d114      	bne.n	8009718 <_strtod_l+0x198>
 80096ee:	b91d      	cbnz	r5, 80096f8 <_strtod_l+0x178>
 80096f0:	9a08      	ldr	r2, [sp, #32]
 80096f2:	4302      	orrs	r2, r0
 80096f4:	d096      	beq.n	8009624 <_strtod_l+0xa4>
 80096f6:	2500      	movs	r5, #0
 80096f8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096fa:	1c62      	adds	r2, r4, #1
 80096fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80096fe:	7862      	ldrb	r2, [r4, #1]
 8009700:	2a2b      	cmp	r2, #43	@ 0x2b
 8009702:	d07a      	beq.n	80097fa <_strtod_l+0x27a>
 8009704:	2a2d      	cmp	r2, #45	@ 0x2d
 8009706:	d07e      	beq.n	8009806 <_strtod_l+0x286>
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009710:	2909      	cmp	r1, #9
 8009712:	f240 8085 	bls.w	8009820 <_strtod_l+0x2a0>
 8009716:	9419      	str	r4, [sp, #100]	@ 0x64
 8009718:	f04f 0800 	mov.w	r8, #0
 800971c:	e0a5      	b.n	800986a <_strtod_l+0x2ea>
 800971e:	2300      	movs	r3, #0
 8009720:	e7c8      	b.n	80096b4 <_strtod_l+0x134>
 8009722:	f1b9 0f08 	cmp.w	r9, #8
 8009726:	bfd8      	it	le
 8009728:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800972a:	f100 0001 	add.w	r0, r0, #1
 800972e:	bfd6      	itet	le
 8009730:	fb02 3301 	mlale	r3, r2, r1, r3
 8009734:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009738:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800973a:	f109 0901 	add.w	r9, r9, #1
 800973e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009740:	e7bf      	b.n	80096c2 <_strtod_l+0x142>
 8009742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	9219      	str	r2, [sp, #100]	@ 0x64
 8009748:	785a      	ldrb	r2, [r3, #1]
 800974a:	f1b9 0f00 	cmp.w	r9, #0
 800974e:	d03b      	beq.n	80097c8 <_strtod_l+0x248>
 8009750:	464d      	mov	r5, r9
 8009752:	900a      	str	r0, [sp, #40]	@ 0x28
 8009754:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009758:	2b09      	cmp	r3, #9
 800975a:	d912      	bls.n	8009782 <_strtod_l+0x202>
 800975c:	2301      	movs	r3, #1
 800975e:	e7c2      	b.n	80096e6 <_strtod_l+0x166>
 8009760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009762:	3001      	adds	r0, #1
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	9219      	str	r2, [sp, #100]	@ 0x64
 8009768:	785a      	ldrb	r2, [r3, #1]
 800976a:	2a30      	cmp	r2, #48	@ 0x30
 800976c:	d0f8      	beq.n	8009760 <_strtod_l+0x1e0>
 800976e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009772:	2b08      	cmp	r3, #8
 8009774:	f200 84c8 	bhi.w	800a108 <_strtod_l+0xb88>
 8009778:	900a      	str	r0, [sp, #40]	@ 0x28
 800977a:	2000      	movs	r0, #0
 800977c:	4605      	mov	r5, r0
 800977e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009780:	930c      	str	r3, [sp, #48]	@ 0x30
 8009782:	3a30      	subs	r2, #48	@ 0x30
 8009784:	f100 0301 	add.w	r3, r0, #1
 8009788:	d018      	beq.n	80097bc <_strtod_l+0x23c>
 800978a:	462e      	mov	r6, r5
 800978c:	f04f 0e0a 	mov.w	lr, #10
 8009790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009792:	4419      	add	r1, r3
 8009794:	910a      	str	r1, [sp, #40]	@ 0x28
 8009796:	1c71      	adds	r1, r6, #1
 8009798:	eba1 0c05 	sub.w	ip, r1, r5
 800979c:	4563      	cmp	r3, ip
 800979e:	dc15      	bgt.n	80097cc <_strtod_l+0x24c>
 80097a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80097a4:	182b      	adds	r3, r5, r0
 80097a6:	2b08      	cmp	r3, #8
 80097a8:	f105 0501 	add.w	r5, r5, #1
 80097ac:	4405      	add	r5, r0
 80097ae:	dc1a      	bgt.n	80097e6 <_strtod_l+0x266>
 80097b0:	230a      	movs	r3, #10
 80097b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097b4:	fb03 2301 	mla	r3, r3, r1, r2
 80097b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ba:	2300      	movs	r3, #0
 80097bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097be:	4618      	mov	r0, r3
 80097c0:	1c51      	adds	r1, r2, #1
 80097c2:	9119      	str	r1, [sp, #100]	@ 0x64
 80097c4:	7852      	ldrb	r2, [r2, #1]
 80097c6:	e7c5      	b.n	8009754 <_strtod_l+0x1d4>
 80097c8:	4648      	mov	r0, r9
 80097ca:	e7ce      	b.n	800976a <_strtod_l+0x1ea>
 80097cc:	2e08      	cmp	r6, #8
 80097ce:	dc05      	bgt.n	80097dc <_strtod_l+0x25c>
 80097d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80097d2:	fb0e f606 	mul.w	r6, lr, r6
 80097d6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80097d8:	460e      	mov	r6, r1
 80097da:	e7dc      	b.n	8009796 <_strtod_l+0x216>
 80097dc:	2910      	cmp	r1, #16
 80097de:	bfd8      	it	le
 80097e0:	fb0e f707 	mulle.w	r7, lr, r7
 80097e4:	e7f8      	b.n	80097d8 <_strtod_l+0x258>
 80097e6:	2b0f      	cmp	r3, #15
 80097e8:	bfdc      	itt	le
 80097ea:	230a      	movle	r3, #10
 80097ec:	fb03 2707 	mlale	r7, r3, r7, r2
 80097f0:	e7e3      	b.n	80097ba <_strtod_l+0x23a>
 80097f2:	2300      	movs	r3, #0
 80097f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f6:	2301      	movs	r3, #1
 80097f8:	e77a      	b.n	80096f0 <_strtod_l+0x170>
 80097fa:	f04f 0c00 	mov.w	ip, #0
 80097fe:	1ca2      	adds	r2, r4, #2
 8009800:	9219      	str	r2, [sp, #100]	@ 0x64
 8009802:	78a2      	ldrb	r2, [r4, #2]
 8009804:	e782      	b.n	800970c <_strtod_l+0x18c>
 8009806:	f04f 0c01 	mov.w	ip, #1
 800980a:	e7f8      	b.n	80097fe <_strtod_l+0x27e>
 800980c:	0800ca40 	.word	0x0800ca40
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800c8c6 	.word	0x0800c8c6
 8009818:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800981a:	1c51      	adds	r1, r2, #1
 800981c:	9119      	str	r1, [sp, #100]	@ 0x64
 800981e:	7852      	ldrb	r2, [r2, #1]
 8009820:	2a30      	cmp	r2, #48	@ 0x30
 8009822:	d0f9      	beq.n	8009818 <_strtod_l+0x298>
 8009824:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009828:	2908      	cmp	r1, #8
 800982a:	f63f af75 	bhi.w	8009718 <_strtod_l+0x198>
 800982e:	f04f 080a 	mov.w	r8, #10
 8009832:	3a30      	subs	r2, #48	@ 0x30
 8009834:	9209      	str	r2, [sp, #36]	@ 0x24
 8009836:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009838:	920f      	str	r2, [sp, #60]	@ 0x3c
 800983a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800983c:	1c56      	adds	r6, r2, #1
 800983e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009840:	7852      	ldrb	r2, [r2, #1]
 8009842:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009846:	f1be 0f09 	cmp.w	lr, #9
 800984a:	d939      	bls.n	80098c0 <_strtod_l+0x340>
 800984c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800984e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009852:	1a76      	subs	r6, r6, r1
 8009854:	2e08      	cmp	r6, #8
 8009856:	dc03      	bgt.n	8009860 <_strtod_l+0x2e0>
 8009858:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800985a:	4588      	cmp	r8, r1
 800985c:	bfa8      	it	ge
 800985e:	4688      	movge	r8, r1
 8009860:	f1bc 0f00 	cmp.w	ip, #0
 8009864:	d001      	beq.n	800986a <_strtod_l+0x2ea>
 8009866:	f1c8 0800 	rsb	r8, r8, #0
 800986a:	2d00      	cmp	r5, #0
 800986c:	d14e      	bne.n	800990c <_strtod_l+0x38c>
 800986e:	9908      	ldr	r1, [sp, #32]
 8009870:	4308      	orrs	r0, r1
 8009872:	f47f aebe 	bne.w	80095f2 <_strtod_l+0x72>
 8009876:	2b00      	cmp	r3, #0
 8009878:	f47f aed4 	bne.w	8009624 <_strtod_l+0xa4>
 800987c:	2a69      	cmp	r2, #105	@ 0x69
 800987e:	d028      	beq.n	80098d2 <_strtod_l+0x352>
 8009880:	dc25      	bgt.n	80098ce <_strtod_l+0x34e>
 8009882:	2a49      	cmp	r2, #73	@ 0x49
 8009884:	d025      	beq.n	80098d2 <_strtod_l+0x352>
 8009886:	2a4e      	cmp	r2, #78	@ 0x4e
 8009888:	f47f aecc 	bne.w	8009624 <_strtod_l+0xa4>
 800988c:	4999      	ldr	r1, [pc, #612]	@ (8009af4 <_strtod_l+0x574>)
 800988e:	a819      	add	r0, sp, #100	@ 0x64
 8009890:	f001 f902 	bl	800aa98 <__match>
 8009894:	2800      	cmp	r0, #0
 8009896:	f43f aec5 	beq.w	8009624 <_strtod_l+0xa4>
 800989a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b28      	cmp	r3, #40	@ 0x28
 80098a0:	d12e      	bne.n	8009900 <_strtod_l+0x380>
 80098a2:	4995      	ldr	r1, [pc, #596]	@ (8009af8 <_strtod_l+0x578>)
 80098a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80098a6:	a819      	add	r0, sp, #100	@ 0x64
 80098a8:	f001 f90a 	bl	800aac0 <__hexnan>
 80098ac:	2805      	cmp	r0, #5
 80098ae:	d127      	bne.n	8009900 <_strtod_l+0x380>
 80098b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80098b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80098ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098be:	e698      	b.n	80095f2 <_strtod_l+0x72>
 80098c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098c2:	fb08 2101 	mla	r1, r8, r1, r2
 80098c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80098cc:	e7b5      	b.n	800983a <_strtod_l+0x2ba>
 80098ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80098d0:	e7da      	b.n	8009888 <_strtod_l+0x308>
 80098d2:	498a      	ldr	r1, [pc, #552]	@ (8009afc <_strtod_l+0x57c>)
 80098d4:	a819      	add	r0, sp, #100	@ 0x64
 80098d6:	f001 f8df 	bl	800aa98 <__match>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f43f aea2 	beq.w	8009624 <_strtod_l+0xa4>
 80098e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098e2:	4987      	ldr	r1, [pc, #540]	@ (8009b00 <_strtod_l+0x580>)
 80098e4:	3b01      	subs	r3, #1
 80098e6:	a819      	add	r0, sp, #100	@ 0x64
 80098e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80098ea:	f001 f8d5 	bl	800aa98 <__match>
 80098ee:	b910      	cbnz	r0, 80098f6 <_strtod_l+0x376>
 80098f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098f2:	3301      	adds	r3, #1
 80098f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80098f6:	f04f 0a00 	mov.w	sl, #0
 80098fa:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009b04 <_strtod_l+0x584>
 80098fe:	e678      	b.n	80095f2 <_strtod_l+0x72>
 8009900:	4881      	ldr	r0, [pc, #516]	@ (8009b08 <_strtod_l+0x588>)
 8009902:	f000 fdf1 	bl	800a4e8 <nan>
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	e672      	b.n	80095f2 <_strtod_l+0x72>
 800990c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800990e:	f1b9 0f00 	cmp.w	r9, #0
 8009912:	bf08      	it	eq
 8009914:	46a9      	moveq	r9, r5
 8009916:	eba8 0303 	sub.w	r3, r8, r3
 800991a:	2d10      	cmp	r5, #16
 800991c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800991e:	462c      	mov	r4, r5
 8009920:	9309      	str	r3, [sp, #36]	@ 0x24
 8009922:	bfa8      	it	ge
 8009924:	2410      	movge	r4, #16
 8009926:	f7f6 fd5d 	bl	80003e4 <__aeabi_ui2d>
 800992a:	2d09      	cmp	r5, #9
 800992c:	4682      	mov	sl, r0
 800992e:	468b      	mov	fp, r1
 8009930:	dc11      	bgt.n	8009956 <_strtod_l+0x3d6>
 8009932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009934:	2b00      	cmp	r3, #0
 8009936:	f43f ae5c 	beq.w	80095f2 <_strtod_l+0x72>
 800993a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993c:	dd76      	ble.n	8009a2c <_strtod_l+0x4ac>
 800993e:	2b16      	cmp	r3, #22
 8009940:	dc5d      	bgt.n	80099fe <_strtod_l+0x47e>
 8009942:	4972      	ldr	r1, [pc, #456]	@ (8009b0c <_strtod_l+0x58c>)
 8009944:	4652      	mov	r2, sl
 8009946:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800994a:	465b      	mov	r3, fp
 800994c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009950:	f7f6 fdc2 	bl	80004d8 <__aeabi_dmul>
 8009954:	e7d7      	b.n	8009906 <_strtod_l+0x386>
 8009956:	4b6d      	ldr	r3, [pc, #436]	@ (8009b0c <_strtod_l+0x58c>)
 8009958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800995c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009960:	f7f6 fdba 	bl	80004d8 <__aeabi_dmul>
 8009964:	4682      	mov	sl, r0
 8009966:	4638      	mov	r0, r7
 8009968:	468b      	mov	fp, r1
 800996a:	f7f6 fd3b 	bl	80003e4 <__aeabi_ui2d>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	f7f6 fbf9 	bl	800016c <__adddf3>
 800997a:	2d0f      	cmp	r5, #15
 800997c:	4682      	mov	sl, r0
 800997e:	468b      	mov	fp, r1
 8009980:	ddd7      	ble.n	8009932 <_strtod_l+0x3b2>
 8009982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009984:	1b2c      	subs	r4, r5, r4
 8009986:	441c      	add	r4, r3
 8009988:	2c00      	cmp	r4, #0
 800998a:	f340 8093 	ble.w	8009ab4 <_strtod_l+0x534>
 800998e:	f014 030f 	ands.w	r3, r4, #15
 8009992:	d00a      	beq.n	80099aa <_strtod_l+0x42a>
 8009994:	495d      	ldr	r1, [pc, #372]	@ (8009b0c <_strtod_l+0x58c>)
 8009996:	4652      	mov	r2, sl
 8009998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800999c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099a0:	465b      	mov	r3, fp
 80099a2:	f7f6 fd99 	bl	80004d8 <__aeabi_dmul>
 80099a6:	4682      	mov	sl, r0
 80099a8:	468b      	mov	fp, r1
 80099aa:	f034 040f 	bics.w	r4, r4, #15
 80099ae:	d073      	beq.n	8009a98 <_strtod_l+0x518>
 80099b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80099b4:	dd49      	ble.n	8009a4a <_strtod_l+0x4ca>
 80099b6:	2400      	movs	r4, #0
 80099b8:	46a0      	mov	r8, r4
 80099ba:	46a1      	mov	r9, r4
 80099bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099be:	2322      	movs	r3, #34	@ 0x22
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	9a05      	ldr	r2, [sp, #20]
 80099c6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009b04 <_strtod_l+0x584>
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f43f ae0f 	beq.w	80095f2 <_strtod_l+0x72>
 80099d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099d6:	9805      	ldr	r0, [sp, #20]
 80099d8:	f001 fa0e 	bl	800adf8 <_Bfree>
 80099dc:	4649      	mov	r1, r9
 80099de:	9805      	ldr	r0, [sp, #20]
 80099e0:	f001 fa0a 	bl	800adf8 <_Bfree>
 80099e4:	4641      	mov	r1, r8
 80099e6:	9805      	ldr	r0, [sp, #20]
 80099e8:	f001 fa06 	bl	800adf8 <_Bfree>
 80099ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f001 fa02 	bl	800adf8 <_Bfree>
 80099f4:	4621      	mov	r1, r4
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	f001 f9fe 	bl	800adf8 <_Bfree>
 80099fc:	e5f9      	b.n	80095f2 <_strtod_l+0x72>
 80099fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a04:	4293      	cmp	r3, r2
 8009a06:	dbbc      	blt.n	8009982 <_strtod_l+0x402>
 8009a08:	4c40      	ldr	r4, [pc, #256]	@ (8009b0c <_strtod_l+0x58c>)
 8009a0a:	f1c5 050f 	rsb	r5, r5, #15
 8009a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a12:	4652      	mov	r2, sl
 8009a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a18:	465b      	mov	r3, fp
 8009a1a:	f7f6 fd5d 	bl	80004d8 <__aeabi_dmul>
 8009a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a20:	1b5d      	subs	r5, r3, r5
 8009a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a2a:	e791      	b.n	8009950 <_strtod_l+0x3d0>
 8009a2c:	3316      	adds	r3, #22
 8009a2e:	dba8      	blt.n	8009982 <_strtod_l+0x402>
 8009a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a32:	4650      	mov	r0, sl
 8009a34:	eba3 0808 	sub.w	r8, r3, r8
 8009a38:	4b34      	ldr	r3, [pc, #208]	@ (8009b0c <_strtod_l+0x58c>)
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a40:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a44:	f7f6 fe72 	bl	800072c <__aeabi_ddiv>
 8009a48:	e75d      	b.n	8009906 <_strtod_l+0x386>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4650      	mov	r0, sl
 8009a4e:	4659      	mov	r1, fp
 8009a50:	461e      	mov	r6, r3
 8009a52:	4f2f      	ldr	r7, [pc, #188]	@ (8009b10 <_strtod_l+0x590>)
 8009a54:	1124      	asrs	r4, r4, #4
 8009a56:	2c01      	cmp	r4, #1
 8009a58:	dc21      	bgt.n	8009a9e <_strtod_l+0x51e>
 8009a5a:	b10b      	cbz	r3, 8009a60 <_strtod_l+0x4e0>
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	468b      	mov	fp, r1
 8009a60:	492b      	ldr	r1, [pc, #172]	@ (8009b10 <_strtod_l+0x590>)
 8009a62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a6a:	4652      	mov	r2, sl
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	465b      	mov	r3, fp
 8009a72:	f7f6 fd31 	bl	80004d8 <__aeabi_dmul>
 8009a76:	4b23      	ldr	r3, [pc, #140]	@ (8009b04 <_strtod_l+0x584>)
 8009a78:	460a      	mov	r2, r1
 8009a7a:	400b      	ands	r3, r1
 8009a7c:	4925      	ldr	r1, [pc, #148]	@ (8009b14 <_strtod_l+0x594>)
 8009a7e:	4682      	mov	sl, r0
 8009a80:	428b      	cmp	r3, r1
 8009a82:	d898      	bhi.n	80099b6 <_strtod_l+0x436>
 8009a84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a88:	428b      	cmp	r3, r1
 8009a8a:	bf86      	itte	hi
 8009a8c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a90:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009b18 <_strtod_l+0x598>
 8009a94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	e076      	b.n	8009b8c <_strtod_l+0x60c>
 8009a9e:	07e2      	lsls	r2, r4, #31
 8009aa0:	d504      	bpl.n	8009aac <_strtod_l+0x52c>
 8009aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa6:	f7f6 fd17 	bl	80004d8 <__aeabi_dmul>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	3601      	adds	r6, #1
 8009aae:	1064      	asrs	r4, r4, #1
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	e7d0      	b.n	8009a56 <_strtod_l+0x4d6>
 8009ab4:	d0f0      	beq.n	8009a98 <_strtod_l+0x518>
 8009ab6:	4264      	negs	r4, r4
 8009ab8:	f014 020f 	ands.w	r2, r4, #15
 8009abc:	d00a      	beq.n	8009ad4 <_strtod_l+0x554>
 8009abe:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <_strtod_l+0x58c>)
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ac6:	4659      	mov	r1, fp
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	f7f6 fe2e 	bl	800072c <__aeabi_ddiv>
 8009ad0:	4682      	mov	sl, r0
 8009ad2:	468b      	mov	fp, r1
 8009ad4:	1124      	asrs	r4, r4, #4
 8009ad6:	d0df      	beq.n	8009a98 <_strtod_l+0x518>
 8009ad8:	2c1f      	cmp	r4, #31
 8009ada:	dd1f      	ble.n	8009b1c <_strtod_l+0x59c>
 8009adc:	2400      	movs	r4, #0
 8009ade:	46a0      	mov	r8, r4
 8009ae0:	46a1      	mov	r9, r4
 8009ae2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ae4:	2322      	movs	r3, #34	@ 0x22
 8009ae6:	9a05      	ldr	r2, [sp, #20]
 8009ae8:	f04f 0a00 	mov.w	sl, #0
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	e76b      	b.n	80099cc <_strtod_l+0x44c>
 8009af4:	0800c8d1 	.word	0x0800c8d1
 8009af8:	0800ca2c 	.word	0x0800ca2c
 8009afc:	0800c8c8 	.word	0x0800c8c8
 8009b00:	0800c8cb 	.word	0x0800c8cb
 8009b04:	7ff00000 	.word	0x7ff00000
 8009b08:	0800ca2b 	.word	0x0800ca2b
 8009b0c:	0800cab8 	.word	0x0800cab8
 8009b10:	0800ca90 	.word	0x0800ca90
 8009b14:	7ca00000 	.word	0x7ca00000
 8009b18:	7fefffff 	.word	0x7fefffff
 8009b1c:	f014 0310 	ands.w	r3, r4, #16
 8009b20:	bf18      	it	ne
 8009b22:	236a      	movne	r3, #106	@ 0x6a
 8009b24:	4650      	mov	r0, sl
 8009b26:	9308      	str	r3, [sp, #32]
 8009b28:	4659      	mov	r1, fp
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4e77      	ldr	r6, [pc, #476]	@ (8009d0c <_strtod_l+0x78c>)
 8009b2e:	07e7      	lsls	r7, r4, #31
 8009b30:	d504      	bpl.n	8009b3c <_strtod_l+0x5bc>
 8009b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b36:	f7f6 fccf 	bl	80004d8 <__aeabi_dmul>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	1064      	asrs	r4, r4, #1
 8009b3e:	f106 0608 	add.w	r6, r6, #8
 8009b42:	d1f4      	bne.n	8009b2e <_strtod_l+0x5ae>
 8009b44:	b10b      	cbz	r3, 8009b4a <_strtod_l+0x5ca>
 8009b46:	4682      	mov	sl, r0
 8009b48:	468b      	mov	fp, r1
 8009b4a:	9b08      	ldr	r3, [sp, #32]
 8009b4c:	b1b3      	cbz	r3, 8009b7c <_strtod_l+0x5fc>
 8009b4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	4659      	mov	r1, fp
 8009b5a:	dd0f      	ble.n	8009b7c <_strtod_l+0x5fc>
 8009b5c:	2b1f      	cmp	r3, #31
 8009b5e:	dd58      	ble.n	8009c12 <_strtod_l+0x692>
 8009b60:	2b34      	cmp	r3, #52	@ 0x34
 8009b62:	bfd8      	it	le
 8009b64:	f04f 33ff 	movle.w	r3, #4294967295
 8009b68:	f04f 0a00 	mov.w	sl, #0
 8009b6c:	bfcf      	iteee	gt
 8009b6e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b72:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b76:	4093      	lslle	r3, r2
 8009b78:	ea03 0b01 	andle.w	fp, r3, r1
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4650      	mov	r0, sl
 8009b82:	4659      	mov	r1, fp
 8009b84:	f7f6 ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1a7      	bne.n	8009adc <_strtod_l+0x55c>
 8009b8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b8e:	464a      	mov	r2, r9
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b94:	462b      	mov	r3, r5
 8009b96:	9805      	ldr	r0, [sp, #20]
 8009b98:	f001 f996 	bl	800aec8 <__s2b>
 8009b9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f43f af09 	beq.w	80099b6 <_strtod_l+0x436>
 8009ba4:	2400      	movs	r4, #0
 8009ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	eba3 0308 	sub.w	r3, r3, r8
 8009bb0:	bfa8      	it	ge
 8009bb2:	2300      	movge	r3, #0
 8009bb4:	46a0      	mov	r8, r4
 8009bb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009bb8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009bbc:	9316      	str	r3, [sp, #88]	@ 0x58
 8009bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc0:	9805      	ldr	r0, [sp, #20]
 8009bc2:	6859      	ldr	r1, [r3, #4]
 8009bc4:	f001 f8d8 	bl	800ad78 <_Balloc>
 8009bc8:	4681      	mov	r9, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	f43f aef7 	beq.w	80099be <_strtod_l+0x43e>
 8009bd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bd2:	300c      	adds	r0, #12
 8009bd4:	691a      	ldr	r2, [r3, #16]
 8009bd6:	f103 010c 	add.w	r1, r3, #12
 8009bda:	3202      	adds	r2, #2
 8009bdc:	0092      	lsls	r2, r2, #2
 8009bde:	f000 fc74 	bl	800a4ca <memcpy>
 8009be2:	ab1c      	add	r3, sp, #112	@ 0x70
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	4652      	mov	r2, sl
 8009bec:	465b      	mov	r3, fp
 8009bee:	9805      	ldr	r0, [sp, #20]
 8009bf0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009bf4:	f001 fc94 	bl	800b520 <__d2b>
 8009bf8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	f43f aedf 	beq.w	80099be <_strtod_l+0x43e>
 8009c00:	2101      	movs	r1, #1
 8009c02:	9805      	ldr	r0, [sp, #20]
 8009c04:	f001 f9f6 	bl	800aff4 <__i2b>
 8009c08:	4680      	mov	r8, r0
 8009c0a:	b948      	cbnz	r0, 8009c20 <_strtod_l+0x6a0>
 8009c0c:	f04f 0800 	mov.w	r8, #0
 8009c10:	e6d5      	b.n	80099be <_strtod_l+0x43e>
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	ea03 0a0a 	and.w	sl, r3, sl
 8009c1e:	e7ad      	b.n	8009b7c <_strtod_l+0x5fc>
 8009c20:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c22:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	bfab      	itete	ge
 8009c28:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c2a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c2c:	18ef      	addge	r7, r5, r3
 8009c2e:	1b5e      	sublt	r6, r3, r5
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	bfa8      	it	ge
 8009c34:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c36:	eba5 0503 	sub.w	r5, r5, r3
 8009c3a:	4415      	add	r5, r2
 8009c3c:	4b34      	ldr	r3, [pc, #208]	@ (8009d10 <_strtod_l+0x790>)
 8009c3e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c42:	bfb8      	it	lt
 8009c44:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c46:	429d      	cmp	r5, r3
 8009c48:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c4c:	da50      	bge.n	8009cf0 <_strtod_l+0x770>
 8009c4e:	1b5b      	subs	r3, r3, r5
 8009c50:	2b1f      	cmp	r3, #31
 8009c52:	f04f 0101 	mov.w	r1, #1
 8009c56:	eba2 0203 	sub.w	r2, r2, r3
 8009c5a:	dc3d      	bgt.n	8009cd8 <_strtod_l+0x758>
 8009c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c62:	2300      	movs	r3, #0
 8009c64:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c66:	18bd      	adds	r5, r7, r2
 8009c68:	9b08      	ldr	r3, [sp, #32]
 8009c6a:	42af      	cmp	r7, r5
 8009c6c:	4416      	add	r6, r2
 8009c6e:	441e      	add	r6, r3
 8009c70:	463b      	mov	r3, r7
 8009c72:	bfa8      	it	ge
 8009c74:	462b      	movge	r3, r5
 8009c76:	42b3      	cmp	r3, r6
 8009c78:	bfa8      	it	ge
 8009c7a:	4633      	movge	r3, r6
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	bfc2      	ittt	gt
 8009c80:	1aed      	subgt	r5, r5, r3
 8009c82:	1af6      	subgt	r6, r6, r3
 8009c84:	1aff      	subgt	r7, r7, r3
 8009c86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dd16      	ble.n	8009cba <_strtod_l+0x73a>
 8009c8c:	4641      	mov	r1, r8
 8009c8e:	461a      	mov	r2, r3
 8009c90:	9805      	ldr	r0, [sp, #20]
 8009c92:	f001 fa67 	bl	800b164 <__pow5mult>
 8009c96:	4680      	mov	r8, r0
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d0b7      	beq.n	8009c0c <_strtod_l+0x68c>
 8009c9c:	4601      	mov	r1, r0
 8009c9e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ca0:	9805      	ldr	r0, [sp, #20]
 8009ca2:	f001 f9bd 	bl	800b020 <__multiply>
 8009ca6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	f43f ae88 	beq.w	80099be <_strtod_l+0x43e>
 8009cae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cb0:	9805      	ldr	r0, [sp, #20]
 8009cb2:	f001 f8a1 	bl	800adf8 <_Bfree>
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	dc1d      	bgt.n	8009cfa <_strtod_l+0x77a>
 8009cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dd27      	ble.n	8009d14 <_strtod_l+0x794>
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cc8:	9805      	ldr	r0, [sp, #20]
 8009cca:	f001 fa4b 	bl	800b164 <__pow5mult>
 8009cce:	4681      	mov	r9, r0
 8009cd0:	bb00      	cbnz	r0, 8009d14 <_strtod_l+0x794>
 8009cd2:	f04f 0900 	mov.w	r9, #0
 8009cd6:	e672      	b.n	80099be <_strtod_l+0x43e>
 8009cd8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cdc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009ce0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009ce4:	35e2      	adds	r5, #226	@ 0xe2
 8009ce6:	fa01 f305 	lsl.w	r3, r1, r5
 8009cea:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cec:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cee:	e7ba      	b.n	8009c66 <_strtod_l+0x6e6>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cf8:	e7b5      	b.n	8009c66 <_strtod_l+0x6e6>
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cfe:	9805      	ldr	r0, [sp, #20]
 8009d00:	f001 fa8a 	bl	800b218 <__lshift>
 8009d04:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d1d9      	bne.n	8009cbe <_strtod_l+0x73e>
 8009d0a:	e658      	b.n	80099be <_strtod_l+0x43e>
 8009d0c:	0800ca58 	.word	0x0800ca58
 8009d10:	fffffc02 	.word	0xfffffc02
 8009d14:	2e00      	cmp	r6, #0
 8009d16:	dd07      	ble.n	8009d28 <_strtod_l+0x7a8>
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4632      	mov	r2, r6
 8009d1c:	9805      	ldr	r0, [sp, #20]
 8009d1e:	f001 fa7b 	bl	800b218 <__lshift>
 8009d22:	4681      	mov	r9, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0d4      	beq.n	8009cd2 <_strtod_l+0x752>
 8009d28:	2f00      	cmp	r7, #0
 8009d2a:	dd08      	ble.n	8009d3e <_strtod_l+0x7be>
 8009d2c:	4641      	mov	r1, r8
 8009d2e:	463a      	mov	r2, r7
 8009d30:	9805      	ldr	r0, [sp, #20]
 8009d32:	f001 fa71 	bl	800b218 <__lshift>
 8009d36:	4680      	mov	r8, r0
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f43f ae40 	beq.w	80099be <_strtod_l+0x43e>
 8009d3e:	464a      	mov	r2, r9
 8009d40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d42:	9805      	ldr	r0, [sp, #20]
 8009d44:	f001 faf0 	bl	800b328 <__mdiff>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f43f ae37 	beq.w	80099be <_strtod_l+0x43e>
 8009d50:	68c3      	ldr	r3, [r0, #12]
 8009d52:	4641      	mov	r1, r8
 8009d54:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d56:	2300      	movs	r3, #0
 8009d58:	60c3      	str	r3, [r0, #12]
 8009d5a:	f001 fac9 	bl	800b2f0 <__mcmp>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	da3d      	bge.n	8009dde <_strtod_l+0x85e>
 8009d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d64:	ea53 030a 	orrs.w	r3, r3, sl
 8009d68:	d163      	bne.n	8009e32 <_strtod_l+0x8b2>
 8009d6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d15f      	bne.n	8009e32 <_strtod_l+0x8b2>
 8009d72:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d76:	0d1b      	lsrs	r3, r3, #20
 8009d78:	051b      	lsls	r3, r3, #20
 8009d7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d7e:	d958      	bls.n	8009e32 <_strtod_l+0x8b2>
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	b913      	cbnz	r3, 8009d8a <_strtod_l+0x80a>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	dd53      	ble.n	8009e32 <_strtod_l+0x8b2>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	9805      	ldr	r0, [sp, #20]
 8009d90:	f001 fa42 	bl	800b218 <__lshift>
 8009d94:	4641      	mov	r1, r8
 8009d96:	4604      	mov	r4, r0
 8009d98:	f001 faaa 	bl	800b2f0 <__mcmp>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	dd48      	ble.n	8009e32 <_strtod_l+0x8b2>
 8009da0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009da4:	9a08      	ldr	r2, [sp, #32]
 8009da6:	0d1b      	lsrs	r3, r3, #20
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	2a00      	cmp	r2, #0
 8009dac:	d062      	beq.n	8009e74 <_strtod_l+0x8f4>
 8009dae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009db2:	d85f      	bhi.n	8009e74 <_strtod_l+0x8f4>
 8009db4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009db8:	f67f ae94 	bls.w	8009ae4 <_strtod_l+0x564>
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	4ba3      	ldr	r3, [pc, #652]	@ (800a050 <_strtod_l+0xad0>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f7f6 fb88 	bl	80004d8 <__aeabi_dmul>
 8009dc8:	4ba2      	ldr	r3, [pc, #648]	@ (800a054 <_strtod_l+0xad4>)
 8009dca:	4682      	mov	sl, r0
 8009dcc:	400b      	ands	r3, r1
 8009dce:	468b      	mov	fp, r1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f47f adff 	bne.w	80099d4 <_strtod_l+0x454>
 8009dd6:	2322      	movs	r3, #34	@ 0x22
 8009dd8:	9a05      	ldr	r2, [sp, #20]
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e5fa      	b.n	80099d4 <_strtod_l+0x454>
 8009dde:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009de2:	d165      	bne.n	8009eb0 <_strtod_l+0x930>
 8009de4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009de6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dea:	b35a      	cbz	r2, 8009e44 <_strtod_l+0x8c4>
 8009dec:	4a9a      	ldr	r2, [pc, #616]	@ (800a058 <_strtod_l+0xad8>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d12b      	bne.n	8009e4a <_strtod_l+0x8ca>
 8009df2:	9b08      	ldr	r3, [sp, #32]
 8009df4:	4651      	mov	r1, sl
 8009df6:	b303      	cbz	r3, 8009e3a <_strtod_l+0x8ba>
 8009df8:	465a      	mov	r2, fp
 8009dfa:	4b96      	ldr	r3, [pc, #600]	@ (800a054 <_strtod_l+0xad4>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e02:	f04f 32ff 	mov.w	r2, #4294967295
 8009e06:	d81b      	bhi.n	8009e40 <_strtod_l+0x8c0>
 8009e08:	0d1b      	lsrs	r3, r3, #20
 8009e0a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d119      	bne.n	8009e4a <_strtod_l+0x8ca>
 8009e16:	4b91      	ldr	r3, [pc, #580]	@ (800a05c <_strtod_l+0xadc>)
 8009e18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d102      	bne.n	8009e24 <_strtod_l+0x8a4>
 8009e1e:	3101      	adds	r1, #1
 8009e20:	f43f adcd 	beq.w	80099be <_strtod_l+0x43e>
 8009e24:	f04f 0a00 	mov.w	sl, #0
 8009e28:	4b8a      	ldr	r3, [pc, #552]	@ (800a054 <_strtod_l+0xad4>)
 8009e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e2c:	401a      	ands	r2, r3
 8009e2e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1c1      	bne.n	8009dbc <_strtod_l+0x83c>
 8009e38:	e5cc      	b.n	80099d4 <_strtod_l+0x454>
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	e7e8      	b.n	8009e12 <_strtod_l+0x892>
 8009e40:	4613      	mov	r3, r2
 8009e42:	e7e6      	b.n	8009e12 <_strtod_l+0x892>
 8009e44:	ea53 030a 	orrs.w	r3, r3, sl
 8009e48:	d0aa      	beq.n	8009da0 <_strtod_l+0x820>
 8009e4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e4c:	b1db      	cbz	r3, 8009e86 <_strtod_l+0x906>
 8009e4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e50:	4213      	tst	r3, r2
 8009e52:	d0ee      	beq.n	8009e32 <_strtod_l+0x8b2>
 8009e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e56:	4650      	mov	r0, sl
 8009e58:	4659      	mov	r1, fp
 8009e5a:	9a08      	ldr	r2, [sp, #32]
 8009e5c:	b1bb      	cbz	r3, 8009e8e <_strtod_l+0x90e>
 8009e5e:	f7ff fb6c 	bl	800953a <sulp>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e6a:	f7f6 f97f 	bl	800016c <__adddf3>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	e7de      	b.n	8009e32 <_strtod_l+0x8b2>
 8009e74:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e78:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e7c:	f04f 3aff 	mov.w	sl, #4294967295
 8009e80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e84:	e7d5      	b.n	8009e32 <_strtod_l+0x8b2>
 8009e86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e88:	ea13 0f0a 	tst.w	r3, sl
 8009e8c:	e7e1      	b.n	8009e52 <_strtod_l+0x8d2>
 8009e8e:	f7ff fb54 	bl	800953a <sulp>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e9a:	f7f6 f965 	bl	8000168 <__aeabi_dsub>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	468b      	mov	fp, r1
 8009ea6:	f7f6 fd7f 	bl	80009a8 <__aeabi_dcmpeq>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d0c1      	beq.n	8009e32 <_strtod_l+0x8b2>
 8009eae:	e619      	b.n	8009ae4 <_strtod_l+0x564>
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f001 fb8c 	bl	800b5d0 <__ratio>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	f7f6 fd85 	bl	80009d0 <__aeabi_dcmple>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d06d      	beq.n	8009fa6 <_strtod_l+0xa26>
 8009eca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d178      	bne.n	8009fc2 <_strtod_l+0xa42>
 8009ed0:	f1ba 0f00 	cmp.w	sl, #0
 8009ed4:	d156      	bne.n	8009f84 <_strtod_l+0xa04>
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d158      	bne.n	8009f92 <_strtod_l+0xa12>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4b5e      	ldr	r3, [pc, #376]	@ (800a060 <_strtod_l+0xae0>)
 8009ee8:	f7f6 fd68 	bl	80009bc <__aeabi_dcmplt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d157      	bne.n	8009fa0 <_strtod_l+0xa20>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4b5b      	ldr	r3, [pc, #364]	@ (800a064 <_strtod_l+0xae4>)
 8009ef8:	f7f6 faee 	bl	80004d8 <__aeabi_dmul>
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f04:	9606      	str	r6, [sp, #24]
 8009f06:	9307      	str	r3, [sp, #28]
 8009f08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f0c:	4d51      	ldr	r5, [pc, #324]	@ (800a054 <_strtod_l+0xad4>)
 8009f0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f14:	401d      	ands	r5, r3
 8009f16:	4b54      	ldr	r3, [pc, #336]	@ (800a068 <_strtod_l+0xae8>)
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	f040 80ab 	bne.w	800a074 <_strtod_l+0xaf4>
 8009f1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f20:	4650      	mov	r0, sl
 8009f22:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f26:	4659      	mov	r1, fp
 8009f28:	f001 fa92 	bl	800b450 <__ulp>
 8009f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f30:	f7f6 fad2 	bl	80004d8 <__aeabi_dmul>
 8009f34:	4652      	mov	r2, sl
 8009f36:	465b      	mov	r3, fp
 8009f38:	f7f6 f918 	bl	800016c <__adddf3>
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4945      	ldr	r1, [pc, #276]	@ (800a054 <_strtod_l+0xad4>)
 8009f40:	4a4a      	ldr	r2, [pc, #296]	@ (800a06c <_strtod_l+0xaec>)
 8009f42:	4019      	ands	r1, r3
 8009f44:	4291      	cmp	r1, r2
 8009f46:	4682      	mov	sl, r0
 8009f48:	d942      	bls.n	8009fd0 <_strtod_l+0xa50>
 8009f4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f4c:	4b43      	ldr	r3, [pc, #268]	@ (800a05c <_strtod_l+0xadc>)
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d103      	bne.n	8009f5a <_strtod_l+0x9da>
 8009f52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f54:	3301      	adds	r3, #1
 8009f56:	f43f ad32 	beq.w	80099be <_strtod_l+0x43e>
 8009f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8009f5e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a05c <_strtod_l+0xadc>
 8009f62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	f000 ff47 	bl	800adf8 <_Bfree>
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	9805      	ldr	r0, [sp, #20]
 8009f6e:	f000 ff43 	bl	800adf8 <_Bfree>
 8009f72:	4641      	mov	r1, r8
 8009f74:	9805      	ldr	r0, [sp, #20]
 8009f76:	f000 ff3f 	bl	800adf8 <_Bfree>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	f000 ff3b 	bl	800adf8 <_Bfree>
 8009f82:	e61c      	b.n	8009bbe <_strtod_l+0x63e>
 8009f84:	f1ba 0f01 	cmp.w	sl, #1
 8009f88:	d103      	bne.n	8009f92 <_strtod_l+0xa12>
 8009f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f43f ada9 	beq.w	8009ae4 <_strtod_l+0x564>
 8009f92:	2200      	movs	r2, #0
 8009f94:	4b36      	ldr	r3, [pc, #216]	@ (800a070 <_strtod_l+0xaf0>)
 8009f96:	2600      	movs	r6, #0
 8009f98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f9c:	4f30      	ldr	r7, [pc, #192]	@ (800a060 <_strtod_l+0xae0>)
 8009f9e:	e7b3      	b.n	8009f08 <_strtod_l+0x988>
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	4f30      	ldr	r7, [pc, #192]	@ (800a064 <_strtod_l+0xae4>)
 8009fa4:	e7ac      	b.n	8009f00 <_strtod_l+0x980>
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4b2e      	ldr	r3, [pc, #184]	@ (800a064 <_strtod_l+0xae4>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fa93 	bl	80004d8 <__aeabi_dmul>
 8009fb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0a1      	beq.n	8009f00 <_strtod_l+0x980>
 8009fbc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fc0:	e7a2      	b.n	8009f08 <_strtod_l+0x988>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4b26      	ldr	r3, [pc, #152]	@ (800a060 <_strtod_l+0xae0>)
 8009fc6:	4616      	mov	r6, r2
 8009fc8:	461f      	mov	r7, r3
 8009fca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009fce:	e79b      	b.n	8009f08 <_strtod_l+0x988>
 8009fd0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009fd4:	9b08      	ldr	r3, [sp, #32]
 8009fd6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1c1      	bne.n	8009f62 <_strtod_l+0x9e2>
 8009fde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fe2:	0d1b      	lsrs	r3, r3, #20
 8009fe4:	051b      	lsls	r3, r3, #20
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	d1bb      	bne.n	8009f62 <_strtod_l+0x9e2>
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f7 f817 	bl	8001020 <__aeabi_d2lz>
 8009ff2:	f7f6 fa43 	bl	800047c <__aeabi_l2d>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 f8b3 	bl	8000168 <__aeabi_dsub>
 800a002:	460b      	mov	r3, r1
 800a004:	4602      	mov	r2, r0
 800a006:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a00a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a00e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a010:	ea46 060a 	orr.w	r6, r6, sl
 800a014:	431e      	orrs	r6, r3
 800a016:	d06a      	beq.n	800a0ee <_strtod_l+0xb6e>
 800a018:	a309      	add	r3, pc, #36	@ (adr r3, 800a040 <_strtod_l+0xac0>)
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f7f6 fccd 	bl	80009bc <__aeabi_dcmplt>
 800a022:	2800      	cmp	r0, #0
 800a024:	f47f acd6 	bne.w	80099d4 <_strtod_l+0x454>
 800a028:	a307      	add	r3, pc, #28	@ (adr r3, 800a048 <_strtod_l+0xac8>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a032:	f7f6 fce1 	bl	80009f8 <__aeabi_dcmpgt>
 800a036:	2800      	cmp	r0, #0
 800a038:	d093      	beq.n	8009f62 <_strtod_l+0x9e2>
 800a03a:	e4cb      	b.n	80099d4 <_strtod_l+0x454>
 800a03c:	f3af 8000 	nop.w
 800a040:	94a03595 	.word	0x94a03595
 800a044:	3fdfffff 	.word	0x3fdfffff
 800a048:	35afe535 	.word	0x35afe535
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	39500000 	.word	0x39500000
 800a054:	7ff00000 	.word	0x7ff00000
 800a058:	000fffff 	.word	0x000fffff
 800a05c:	7fefffff 	.word	0x7fefffff
 800a060:	3ff00000 	.word	0x3ff00000
 800a064:	3fe00000 	.word	0x3fe00000
 800a068:	7fe00000 	.word	0x7fe00000
 800a06c:	7c9fffff 	.word	0x7c9fffff
 800a070:	bff00000 	.word	0xbff00000
 800a074:	9b08      	ldr	r3, [sp, #32]
 800a076:	b323      	cbz	r3, 800a0c2 <_strtod_l+0xb42>
 800a078:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a07c:	d821      	bhi.n	800a0c2 <_strtod_l+0xb42>
 800a07e:	a328      	add	r3, pc, #160	@ (adr r3, 800a120 <_strtod_l+0xba0>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4630      	mov	r0, r6
 800a086:	4639      	mov	r1, r7
 800a088:	f7f6 fca2 	bl	80009d0 <__aeabi_dcmple>
 800a08c:	b1a0      	cbz	r0, 800a0b8 <_strtod_l+0xb38>
 800a08e:	4639      	mov	r1, r7
 800a090:	4630      	mov	r0, r6
 800a092:	f7f6 fcbb 	bl	8000a0c <__aeabi_d2uiz>
 800a096:	2801      	cmp	r0, #1
 800a098:	bf38      	it	cc
 800a09a:	2001      	movcc	r0, #1
 800a09c:	f7f6 f9a2 	bl	80003e4 <__aeabi_ui2d>
 800a0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	b9fb      	cbnz	r3, 800a0e8 <_strtod_l+0xb68>
 800a0a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800a0ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0be:	1b5b      	subs	r3, r3, r5
 800a0c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0ca:	f001 f9c1 	bl	800b450 <__ulp>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	f7f6 f9ff 	bl	80004d8 <__aeabi_dmul>
 800a0da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0de:	f7f6 f845 	bl	800016c <__adddf3>
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	468b      	mov	fp, r1
 800a0e6:	e775      	b.n	8009fd4 <_strtod_l+0xa54>
 800a0e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0ec:	e7e0      	b.n	800a0b0 <_strtod_l+0xb30>
 800a0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a128 <_strtod_l+0xba8>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 fc62 	bl	80009bc <__aeabi_dcmplt>
 800a0f8:	e79d      	b.n	800a036 <_strtod_l+0xab6>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a100:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	f7ff ba79 	b.w	80095fa <_strtod_l+0x7a>
 800a108:	2a65      	cmp	r2, #101	@ 0x65
 800a10a:	f43f ab72 	beq.w	80097f2 <_strtod_l+0x272>
 800a10e:	2a45      	cmp	r2, #69	@ 0x45
 800a110:	f43f ab6f 	beq.w	80097f2 <_strtod_l+0x272>
 800a114:	2301      	movs	r3, #1
 800a116:	f7ff bbaa 	b.w	800986e <_strtod_l+0x2ee>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	ffc00000 	.word	0xffc00000
 800a124:	41dfffff 	.word	0x41dfffff
 800a128:	94a03595 	.word	0x94a03595
 800a12c:	3fcfffff 	.word	0x3fcfffff

0800a130 <strtod>:
 800a130:	460a      	mov	r2, r1
 800a132:	4601      	mov	r1, r0
 800a134:	4802      	ldr	r0, [pc, #8]	@ (800a140 <strtod+0x10>)
 800a136:	4b03      	ldr	r3, [pc, #12]	@ (800a144 <strtod+0x14>)
 800a138:	6800      	ldr	r0, [r0, #0]
 800a13a:	f7ff ba21 	b.w	8009580 <_strtod_l>
 800a13e:	bf00      	nop
 800a140:	200002f8 	.word	0x200002f8
 800a144:	2000018c 	.word	0x2000018c

0800a148 <std>:
 800a148:	2300      	movs	r3, #0
 800a14a:	b510      	push	{r4, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	e9c0 3300 	strd	r3, r3, [r0]
 800a152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a156:	6083      	str	r3, [r0, #8]
 800a158:	8181      	strh	r1, [r0, #12]
 800a15a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a15c:	81c2      	strh	r2, [r0, #14]
 800a15e:	6183      	str	r3, [r0, #24]
 800a160:	4619      	mov	r1, r3
 800a162:	2208      	movs	r2, #8
 800a164:	305c      	adds	r0, #92	@ 0x5c
 800a166:	f000 f916 	bl	800a396 <memset>
 800a16a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a0 <std+0x58>)
 800a16c:	6224      	str	r4, [r4, #32]
 800a16e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a170:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a4 <std+0x5c>)
 800a172:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a174:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a8 <std+0x60>)
 800a176:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a178:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <std+0x64>)
 800a17a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a17c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b0 <std+0x68>)
 800a17e:	429c      	cmp	r4, r3
 800a180:	d006      	beq.n	800a190 <std+0x48>
 800a182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a186:	4294      	cmp	r4, r2
 800a188:	d002      	beq.n	800a190 <std+0x48>
 800a18a:	33d0      	adds	r3, #208	@ 0xd0
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d105      	bne.n	800a19c <std+0x54>
 800a190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a198:	f000 b994 	b.w	800a4c4 <__retarget_lock_init_recursive>
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800a311 	.word	0x0800a311
 800a1a4:	0800a333 	.word	0x0800a333
 800a1a8:	0800a36b 	.word	0x0800a36b
 800a1ac:	0800a38f 	.word	0x0800a38f
 800a1b0:	200015a8 	.word	0x200015a8

0800a1b4 <stdio_exit_handler>:
 800a1b4:	4a02      	ldr	r2, [pc, #8]	@ (800a1c0 <stdio_exit_handler+0xc>)
 800a1b6:	4903      	ldr	r1, [pc, #12]	@ (800a1c4 <stdio_exit_handler+0x10>)
 800a1b8:	4803      	ldr	r0, [pc, #12]	@ (800a1c8 <stdio_exit_handler+0x14>)
 800a1ba:	f000 b869 	b.w	800a290 <_fwalk_sglue>
 800a1be:	bf00      	nop
 800a1c0:	20000180 	.word	0x20000180
 800a1c4:	0800bda1 	.word	0x0800bda1
 800a1c8:	200002fc 	.word	0x200002fc

0800a1cc <cleanup_stdio>:
 800a1cc:	6841      	ldr	r1, [r0, #4]
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <cleanup_stdio+0x34>)
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	d001      	beq.n	800a1dc <cleanup_stdio+0x10>
 800a1d8:	f001 fde2 	bl	800bda0 <_fflush_r>
 800a1dc:	68a1      	ldr	r1, [r4, #8]
 800a1de:	4b09      	ldr	r3, [pc, #36]	@ (800a204 <cleanup_stdio+0x38>)
 800a1e0:	4299      	cmp	r1, r3
 800a1e2:	d002      	beq.n	800a1ea <cleanup_stdio+0x1e>
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f001 fddb 	bl	800bda0 <_fflush_r>
 800a1ea:	68e1      	ldr	r1, [r4, #12]
 800a1ec:	4b06      	ldr	r3, [pc, #24]	@ (800a208 <cleanup_stdio+0x3c>)
 800a1ee:	4299      	cmp	r1, r3
 800a1f0:	d004      	beq.n	800a1fc <cleanup_stdio+0x30>
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f8:	f001 bdd2 	b.w	800bda0 <_fflush_r>
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	200015a8 	.word	0x200015a8
 800a204:	20001610 	.word	0x20001610
 800a208:	20001678 	.word	0x20001678

0800a20c <global_stdio_init.part.0>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	4b0b      	ldr	r3, [pc, #44]	@ (800a23c <global_stdio_init.part.0+0x30>)
 800a210:	4c0b      	ldr	r4, [pc, #44]	@ (800a240 <global_stdio_init.part.0+0x34>)
 800a212:	4a0c      	ldr	r2, [pc, #48]	@ (800a244 <global_stdio_init.part.0+0x38>)
 800a214:	4620      	mov	r0, r4
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	2104      	movs	r1, #4
 800a21a:	2200      	movs	r2, #0
 800a21c:	f7ff ff94 	bl	800a148 <std>
 800a220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a224:	2201      	movs	r2, #1
 800a226:	2109      	movs	r1, #9
 800a228:	f7ff ff8e 	bl	800a148 <std>
 800a22c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a230:	2202      	movs	r2, #2
 800a232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a236:	2112      	movs	r1, #18
 800a238:	f7ff bf86 	b.w	800a148 <std>
 800a23c:	200016e0 	.word	0x200016e0
 800a240:	200015a8 	.word	0x200015a8
 800a244:	0800a1b5 	.word	0x0800a1b5

0800a248 <__sfp_lock_acquire>:
 800a248:	4801      	ldr	r0, [pc, #4]	@ (800a250 <__sfp_lock_acquire+0x8>)
 800a24a:	f000 b93c 	b.w	800a4c6 <__retarget_lock_acquire_recursive>
 800a24e:	bf00      	nop
 800a250:	200016e9 	.word	0x200016e9

0800a254 <__sfp_lock_release>:
 800a254:	4801      	ldr	r0, [pc, #4]	@ (800a25c <__sfp_lock_release+0x8>)
 800a256:	f000 b937 	b.w	800a4c8 <__retarget_lock_release_recursive>
 800a25a:	bf00      	nop
 800a25c:	200016e9 	.word	0x200016e9

0800a260 <__sinit>:
 800a260:	b510      	push	{r4, lr}
 800a262:	4604      	mov	r4, r0
 800a264:	f7ff fff0 	bl	800a248 <__sfp_lock_acquire>
 800a268:	6a23      	ldr	r3, [r4, #32]
 800a26a:	b11b      	cbz	r3, 800a274 <__sinit+0x14>
 800a26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a270:	f7ff bff0 	b.w	800a254 <__sfp_lock_release>
 800a274:	4b04      	ldr	r3, [pc, #16]	@ (800a288 <__sinit+0x28>)
 800a276:	6223      	str	r3, [r4, #32]
 800a278:	4b04      	ldr	r3, [pc, #16]	@ (800a28c <__sinit+0x2c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1f5      	bne.n	800a26c <__sinit+0xc>
 800a280:	f7ff ffc4 	bl	800a20c <global_stdio_init.part.0>
 800a284:	e7f2      	b.n	800a26c <__sinit+0xc>
 800a286:	bf00      	nop
 800a288:	0800a1cd 	.word	0x0800a1cd
 800a28c:	200016e0 	.word	0x200016e0

0800a290 <_fwalk_sglue>:
 800a290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a294:	4607      	mov	r7, r0
 800a296:	4688      	mov	r8, r1
 800a298:	4614      	mov	r4, r2
 800a29a:	2600      	movs	r6, #0
 800a29c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a2a4:	d505      	bpl.n	800a2b2 <_fwalk_sglue+0x22>
 800a2a6:	6824      	ldr	r4, [r4, #0]
 800a2a8:	2c00      	cmp	r4, #0
 800a2aa:	d1f7      	bne.n	800a29c <_fwalk_sglue+0xc>
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	89ab      	ldrh	r3, [r5, #12]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d907      	bls.n	800a2c8 <_fwalk_sglue+0x38>
 800a2b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	d003      	beq.n	800a2c8 <_fwalk_sglue+0x38>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	47c0      	blx	r8
 800a2c6:	4306      	orrs	r6, r0
 800a2c8:	3568      	adds	r5, #104	@ 0x68
 800a2ca:	e7e9      	b.n	800a2a0 <_fwalk_sglue+0x10>

0800a2cc <siprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a2d2:	b510      	push	{r4, lr}
 800a2d4:	2400      	movs	r4, #0
 800a2d6:	b09d      	sub	sp, #116	@ 0x74
 800a2d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a2da:	9002      	str	r0, [sp, #8]
 800a2dc:	9006      	str	r0, [sp, #24]
 800a2de:	9107      	str	r1, [sp, #28]
 800a2e0:	9104      	str	r1, [sp, #16]
 800a2e2:	4809      	ldr	r0, [pc, #36]	@ (800a308 <siprintf+0x3c>)
 800a2e4:	4909      	ldr	r1, [pc, #36]	@ (800a30c <siprintf+0x40>)
 800a2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ea:	9105      	str	r1, [sp, #20]
 800a2ec:	6800      	ldr	r0, [r0, #0]
 800a2ee:	a902      	add	r1, sp, #8
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a2f4:	f001 fa48 	bl	800b788 <_svfiprintf_r>
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	701c      	strb	r4, [r3, #0]
 800a2fc:	b01d      	add	sp, #116	@ 0x74
 800a2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a302:	b003      	add	sp, #12
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	200002f8 	.word	0x200002f8
 800a30c:	ffff0208 	.word	0xffff0208

0800a310 <__sread>:
 800a310:	b510      	push	{r4, lr}
 800a312:	460c      	mov	r4, r1
 800a314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a318:	f000 f886 	bl	800a428 <_read_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	bfab      	itete	ge
 800a320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a322:	89a3      	ldrhlt	r3, [r4, #12]
 800a324:	181b      	addge	r3, r3, r0
 800a326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a32a:	bfac      	ite	ge
 800a32c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a32e:	81a3      	strhlt	r3, [r4, #12]
 800a330:	bd10      	pop	{r4, pc}

0800a332 <__swrite>:
 800a332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a336:	461f      	mov	r7, r3
 800a338:	898b      	ldrh	r3, [r1, #12]
 800a33a:	4605      	mov	r5, r0
 800a33c:	05db      	lsls	r3, r3, #23
 800a33e:	460c      	mov	r4, r1
 800a340:	4616      	mov	r6, r2
 800a342:	d505      	bpl.n	800a350 <__swrite+0x1e>
 800a344:	2302      	movs	r3, #2
 800a346:	2200      	movs	r2, #0
 800a348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34c:	f000 f85a 	bl	800a404 <_lseek_r>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	4632      	mov	r2, r6
 800a354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	4628      	mov	r0, r5
 800a35c:	463b      	mov	r3, r7
 800a35e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	f000 b871 	b.w	800a44c <_write_r>

0800a36a <__sseek>:
 800a36a:	b510      	push	{r4, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 f847 	bl	800a404 <_lseek_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	bf15      	itete	ne
 800a37c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a37e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a386:	81a3      	strheq	r3, [r4, #12]
 800a388:	bf18      	it	ne
 800a38a:	81a3      	strhne	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__sclose>:
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 b827 	b.w	800a3e4 <_close_r>

0800a396 <memset>:
 800a396:	4603      	mov	r3, r0
 800a398:	4402      	add	r2, r0
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d100      	bne.n	800a3a0 <memset+0xa>
 800a39e:	4770      	bx	lr
 800a3a0:	f803 1b01 	strb.w	r1, [r3], #1
 800a3a4:	e7f9      	b.n	800a39a <memset+0x4>

0800a3a6 <strchr>:
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	b2c9      	uxtb	r1, r1
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b0:	b112      	cbz	r2, 800a3b8 <strchr+0x12>
 800a3b2:	428a      	cmp	r2, r1
 800a3b4:	d1f9      	bne.n	800a3aa <strchr+0x4>
 800a3b6:	4770      	bx	lr
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	bf18      	it	ne
 800a3bc:	2000      	movne	r0, #0
 800a3be:	4770      	bx	lr

0800a3c0 <strncmp>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	b16a      	cbz	r2, 800a3e0 <strncmp+0x20>
 800a3c4:	3901      	subs	r1, #1
 800a3c6:	1884      	adds	r4, r0, r2
 800a3c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d103      	bne.n	800a3dc <strncmp+0x1c>
 800a3d4:	42a0      	cmp	r0, r4
 800a3d6:	d001      	beq.n	800a3dc <strncmp+0x1c>
 800a3d8:	2a00      	cmp	r2, #0
 800a3da:	d1f5      	bne.n	800a3c8 <strncmp+0x8>
 800a3dc:	1ad0      	subs	r0, r2, r3
 800a3de:	bd10      	pop	{r4, pc}
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	e7fc      	b.n	800a3de <strncmp+0x1e>

0800a3e4 <_close_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4d05      	ldr	r5, [pc, #20]	@ (800a400 <_close_r+0x1c>)
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f7 feff 	bl	80021f2 <_close>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_close_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_close_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	200016e4 	.word	0x200016e4

0800a404 <_lseek_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4604      	mov	r4, r0
 800a408:	4608      	mov	r0, r1
 800a40a:	4611      	mov	r1, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	4d05      	ldr	r5, [pc, #20]	@ (800a424 <_lseek_r+0x20>)
 800a410:	602a      	str	r2, [r5, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	f7f7 ff11 	bl	800223a <_lseek>
 800a418:	1c43      	adds	r3, r0, #1
 800a41a:	d102      	bne.n	800a422 <_lseek_r+0x1e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b103      	cbz	r3, 800a422 <_lseek_r+0x1e>
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	200016e4 	.word	0x200016e4

0800a428 <_read_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	2200      	movs	r2, #0
 800a432:	4d05      	ldr	r5, [pc, #20]	@ (800a448 <_read_r+0x20>)
 800a434:	602a      	str	r2, [r5, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	f7f7 fea2 	bl	8002180 <_read>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_read_r+0x1e>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_read_r+0x1e>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	200016e4 	.word	0x200016e4

0800a44c <_write_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	4611      	mov	r1, r2
 800a454:	2200      	movs	r2, #0
 800a456:	4d05      	ldr	r5, [pc, #20]	@ (800a46c <_write_r+0x20>)
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f7f7 fead 	bl	80021ba <_write>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_write_r+0x1e>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_write_r+0x1e>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	200016e4 	.word	0x200016e4

0800a470 <__errno>:
 800a470:	4b01      	ldr	r3, [pc, #4]	@ (800a478 <__errno+0x8>)
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	200002f8 	.word	0x200002f8

0800a47c <__libc_init_array>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	2600      	movs	r6, #0
 800a480:	4d0c      	ldr	r5, [pc, #48]	@ (800a4b4 <__libc_init_array+0x38>)
 800a482:	4c0d      	ldr	r4, [pc, #52]	@ (800a4b8 <__libc_init_array+0x3c>)
 800a484:	1b64      	subs	r4, r4, r5
 800a486:	10a4      	asrs	r4, r4, #2
 800a488:	42a6      	cmp	r6, r4
 800a48a:	d109      	bne.n	800a4a0 <__libc_init_array+0x24>
 800a48c:	f002 f80c 	bl	800c4a8 <_init>
 800a490:	2600      	movs	r6, #0
 800a492:	4d0a      	ldr	r5, [pc, #40]	@ (800a4bc <__libc_init_array+0x40>)
 800a494:	4c0a      	ldr	r4, [pc, #40]	@ (800a4c0 <__libc_init_array+0x44>)
 800a496:	1b64      	subs	r4, r4, r5
 800a498:	10a4      	asrs	r4, r4, #2
 800a49a:	42a6      	cmp	r6, r4
 800a49c:	d105      	bne.n	800a4aa <__libc_init_array+0x2e>
 800a49e:	bd70      	pop	{r4, r5, r6, pc}
 800a4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a4:	4798      	blx	r3
 800a4a6:	3601      	adds	r6, #1
 800a4a8:	e7ee      	b.n	800a488 <__libc_init_array+0xc>
 800a4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ae:	4798      	blx	r3
 800a4b0:	3601      	adds	r6, #1
 800a4b2:	e7f2      	b.n	800a49a <__libc_init_array+0x1e>
 800a4b4:	0800cc8c 	.word	0x0800cc8c
 800a4b8:	0800cc8c 	.word	0x0800cc8c
 800a4bc:	0800cc8c 	.word	0x0800cc8c
 800a4c0:	0800cc90 	.word	0x0800cc90

0800a4c4 <__retarget_lock_init_recursive>:
 800a4c4:	4770      	bx	lr

0800a4c6 <__retarget_lock_acquire_recursive>:
 800a4c6:	4770      	bx	lr

0800a4c8 <__retarget_lock_release_recursive>:
 800a4c8:	4770      	bx	lr

0800a4ca <memcpy>:
 800a4ca:	440a      	add	r2, r1
 800a4cc:	4291      	cmp	r1, r2
 800a4ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4d2:	d100      	bne.n	800a4d6 <memcpy+0xc>
 800a4d4:	4770      	bx	lr
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4dc:	4291      	cmp	r1, r2
 800a4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4e2:	d1f9      	bne.n	800a4d8 <memcpy+0xe>
 800a4e4:	bd10      	pop	{r4, pc}
	...

0800a4e8 <nan>:
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	4901      	ldr	r1, [pc, #4]	@ (800a4f0 <nan+0x8>)
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	7ff80000 	.word	0x7ff80000

0800a4f4 <_free_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d040      	beq.n	800a57e <_free_r+0x8a>
 800a4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a500:	1f0c      	subs	r4, r1, #4
 800a502:	2b00      	cmp	r3, #0
 800a504:	bfb8      	it	lt
 800a506:	18e4      	addlt	r4, r4, r3
 800a508:	f000 fc2a 	bl	800ad60 <__malloc_lock>
 800a50c:	4a1c      	ldr	r2, [pc, #112]	@ (800a580 <_free_r+0x8c>)
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	b933      	cbnz	r3, 800a520 <_free_r+0x2c>
 800a512:	6063      	str	r3, [r4, #4]
 800a514:	6014      	str	r4, [r2, #0]
 800a516:	4628      	mov	r0, r5
 800a518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a51c:	f000 bc26 	b.w	800ad6c <__malloc_unlock>
 800a520:	42a3      	cmp	r3, r4
 800a522:	d908      	bls.n	800a536 <_free_r+0x42>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	1821      	adds	r1, r4, r0
 800a528:	428b      	cmp	r3, r1
 800a52a:	bf01      	itttt	eq
 800a52c:	6819      	ldreq	r1, [r3, #0]
 800a52e:	685b      	ldreq	r3, [r3, #4]
 800a530:	1809      	addeq	r1, r1, r0
 800a532:	6021      	streq	r1, [r4, #0]
 800a534:	e7ed      	b.n	800a512 <_free_r+0x1e>
 800a536:	461a      	mov	r2, r3
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	b10b      	cbz	r3, 800a540 <_free_r+0x4c>
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d9fa      	bls.n	800a536 <_free_r+0x42>
 800a540:	6811      	ldr	r1, [r2, #0]
 800a542:	1850      	adds	r0, r2, r1
 800a544:	42a0      	cmp	r0, r4
 800a546:	d10b      	bne.n	800a560 <_free_r+0x6c>
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	4401      	add	r1, r0
 800a54c:	1850      	adds	r0, r2, r1
 800a54e:	4283      	cmp	r3, r0
 800a550:	6011      	str	r1, [r2, #0]
 800a552:	d1e0      	bne.n	800a516 <_free_r+0x22>
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4408      	add	r0, r1
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	6053      	str	r3, [r2, #4]
 800a55e:	e7da      	b.n	800a516 <_free_r+0x22>
 800a560:	d902      	bls.n	800a568 <_free_r+0x74>
 800a562:	230c      	movs	r3, #12
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	e7d6      	b.n	800a516 <_free_r+0x22>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	6063      	str	r3, [r4, #4]
 800a57a:	6054      	str	r4, [r2, #4]
 800a57c:	e7cb      	b.n	800a516 <_free_r+0x22>
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	200016f0 	.word	0x200016f0

0800a584 <rshift>:
 800a584:	6903      	ldr	r3, [r0, #16]
 800a586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a58a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a58e:	f100 0414 	add.w	r4, r0, #20
 800a592:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a596:	dd46      	ble.n	800a626 <rshift+0xa2>
 800a598:	f011 011f 	ands.w	r1, r1, #31
 800a59c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a5a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a5a4:	d10c      	bne.n	800a5c0 <rshift+0x3c>
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f100 0710 	add.w	r7, r0, #16
 800a5ac:	42b1      	cmp	r1, r6
 800a5ae:	d335      	bcc.n	800a61c <rshift+0x98>
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	1eea      	subs	r2, r5, #3
 800a5b6:	4296      	cmp	r6, r2
 800a5b8:	bf38      	it	cc
 800a5ba:	2300      	movcc	r3, #0
 800a5bc:	4423      	add	r3, r4
 800a5be:	e015      	b.n	800a5ec <rshift+0x68>
 800a5c0:	46a1      	mov	r9, r4
 800a5c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a5c6:	f1c1 0820 	rsb	r8, r1, #32
 800a5ca:	40cf      	lsrs	r7, r1
 800a5cc:	f105 0e04 	add.w	lr, r5, #4
 800a5d0:	4576      	cmp	r6, lr
 800a5d2:	46f4      	mov	ip, lr
 800a5d4:	d816      	bhi.n	800a604 <rshift+0x80>
 800a5d6:	1a9a      	subs	r2, r3, r2
 800a5d8:	0092      	lsls	r2, r2, #2
 800a5da:	3a04      	subs	r2, #4
 800a5dc:	3501      	adds	r5, #1
 800a5de:	42ae      	cmp	r6, r5
 800a5e0:	bf38      	it	cc
 800a5e2:	2200      	movcc	r2, #0
 800a5e4:	18a3      	adds	r3, r4, r2
 800a5e6:	50a7      	str	r7, [r4, r2]
 800a5e8:	b107      	cbz	r7, 800a5ec <rshift+0x68>
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	eba3 0204 	sub.w	r2, r3, r4
 800a5f2:	bf08      	it	eq
 800a5f4:	2300      	moveq	r3, #0
 800a5f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5fa:	6102      	str	r2, [r0, #16]
 800a5fc:	bf08      	it	eq
 800a5fe:	6143      	streq	r3, [r0, #20]
 800a600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a604:	f8dc c000 	ldr.w	ip, [ip]
 800a608:	fa0c fc08 	lsl.w	ip, ip, r8
 800a60c:	ea4c 0707 	orr.w	r7, ip, r7
 800a610:	f849 7b04 	str.w	r7, [r9], #4
 800a614:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a618:	40cf      	lsrs	r7, r1
 800a61a:	e7d9      	b.n	800a5d0 <rshift+0x4c>
 800a61c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a620:	f847 cf04 	str.w	ip, [r7, #4]!
 800a624:	e7c2      	b.n	800a5ac <rshift+0x28>
 800a626:	4623      	mov	r3, r4
 800a628:	e7e0      	b.n	800a5ec <rshift+0x68>

0800a62a <__hexdig_fun>:
 800a62a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d802      	bhi.n	800a638 <__hexdig_fun+0xe>
 800a632:	3820      	subs	r0, #32
 800a634:	b2c0      	uxtb	r0, r0
 800a636:	4770      	bx	lr
 800a638:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a63c:	2b05      	cmp	r3, #5
 800a63e:	d801      	bhi.n	800a644 <__hexdig_fun+0x1a>
 800a640:	3847      	subs	r0, #71	@ 0x47
 800a642:	e7f7      	b.n	800a634 <__hexdig_fun+0xa>
 800a644:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a648:	2b05      	cmp	r3, #5
 800a64a:	d801      	bhi.n	800a650 <__hexdig_fun+0x26>
 800a64c:	3827      	subs	r0, #39	@ 0x27
 800a64e:	e7f1      	b.n	800a634 <__hexdig_fun+0xa>
 800a650:	2000      	movs	r0, #0
 800a652:	4770      	bx	lr

0800a654 <__gethex>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	468a      	mov	sl, r1
 800a65a:	4690      	mov	r8, r2
 800a65c:	b085      	sub	sp, #20
 800a65e:	9302      	str	r3, [sp, #8]
 800a660:	680b      	ldr	r3, [r1, #0]
 800a662:	9001      	str	r0, [sp, #4]
 800a664:	1c9c      	adds	r4, r3, #2
 800a666:	46a1      	mov	r9, r4
 800a668:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a66c:	2830      	cmp	r0, #48	@ 0x30
 800a66e:	d0fa      	beq.n	800a666 <__gethex+0x12>
 800a670:	eba9 0303 	sub.w	r3, r9, r3
 800a674:	f1a3 0b02 	sub.w	fp, r3, #2
 800a678:	f7ff ffd7 	bl	800a62a <__hexdig_fun>
 800a67c:	4605      	mov	r5, r0
 800a67e:	2800      	cmp	r0, #0
 800a680:	d168      	bne.n	800a754 <__gethex+0x100>
 800a682:	2201      	movs	r2, #1
 800a684:	4648      	mov	r0, r9
 800a686:	499f      	ldr	r1, [pc, #636]	@ (800a904 <__gethex+0x2b0>)
 800a688:	f7ff fe9a 	bl	800a3c0 <strncmp>
 800a68c:	4607      	mov	r7, r0
 800a68e:	2800      	cmp	r0, #0
 800a690:	d167      	bne.n	800a762 <__gethex+0x10e>
 800a692:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a696:	4626      	mov	r6, r4
 800a698:	f7ff ffc7 	bl	800a62a <__hexdig_fun>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d062      	beq.n	800a766 <__gethex+0x112>
 800a6a0:	4623      	mov	r3, r4
 800a6a2:	7818      	ldrb	r0, [r3, #0]
 800a6a4:	4699      	mov	r9, r3
 800a6a6:	2830      	cmp	r0, #48	@ 0x30
 800a6a8:	f103 0301 	add.w	r3, r3, #1
 800a6ac:	d0f9      	beq.n	800a6a2 <__gethex+0x4e>
 800a6ae:	f7ff ffbc 	bl	800a62a <__hexdig_fun>
 800a6b2:	fab0 f580 	clz	r5, r0
 800a6b6:	f04f 0b01 	mov.w	fp, #1
 800a6ba:	096d      	lsrs	r5, r5, #5
 800a6bc:	464a      	mov	r2, r9
 800a6be:	4616      	mov	r6, r2
 800a6c0:	7830      	ldrb	r0, [r6, #0]
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	f7ff ffb1 	bl	800a62a <__hexdig_fun>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1f8      	bne.n	800a6be <__gethex+0x6a>
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	498c      	ldr	r1, [pc, #560]	@ (800a904 <__gethex+0x2b0>)
 800a6d2:	f7ff fe75 	bl	800a3c0 <strncmp>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d13f      	bne.n	800a75a <__gethex+0x106>
 800a6da:	b944      	cbnz	r4, 800a6ee <__gethex+0x9a>
 800a6dc:	1c74      	adds	r4, r6, #1
 800a6de:	4622      	mov	r2, r4
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	7830      	ldrb	r0, [r6, #0]
 800a6e4:	3201      	adds	r2, #1
 800a6e6:	f7ff ffa0 	bl	800a62a <__hexdig_fun>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d1f8      	bne.n	800a6e0 <__gethex+0x8c>
 800a6ee:	1ba4      	subs	r4, r4, r6
 800a6f0:	00a7      	lsls	r7, r4, #2
 800a6f2:	7833      	ldrb	r3, [r6, #0]
 800a6f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a6f8:	2b50      	cmp	r3, #80	@ 0x50
 800a6fa:	d13e      	bne.n	800a77a <__gethex+0x126>
 800a6fc:	7873      	ldrb	r3, [r6, #1]
 800a6fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a700:	d033      	beq.n	800a76a <__gethex+0x116>
 800a702:	2b2d      	cmp	r3, #45	@ 0x2d
 800a704:	d034      	beq.n	800a770 <__gethex+0x11c>
 800a706:	2400      	movs	r4, #0
 800a708:	1c71      	adds	r1, r6, #1
 800a70a:	7808      	ldrb	r0, [r1, #0]
 800a70c:	f7ff ff8d 	bl	800a62a <__hexdig_fun>
 800a710:	1e43      	subs	r3, r0, #1
 800a712:	b2db      	uxtb	r3, r3
 800a714:	2b18      	cmp	r3, #24
 800a716:	d830      	bhi.n	800a77a <__gethex+0x126>
 800a718:	f1a0 0210 	sub.w	r2, r0, #16
 800a71c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a720:	f7ff ff83 	bl	800a62a <__hexdig_fun>
 800a724:	f100 3cff 	add.w	ip, r0, #4294967295
 800a728:	fa5f fc8c 	uxtb.w	ip, ip
 800a72c:	f1bc 0f18 	cmp.w	ip, #24
 800a730:	f04f 030a 	mov.w	r3, #10
 800a734:	d91e      	bls.n	800a774 <__gethex+0x120>
 800a736:	b104      	cbz	r4, 800a73a <__gethex+0xe6>
 800a738:	4252      	negs	r2, r2
 800a73a:	4417      	add	r7, r2
 800a73c:	f8ca 1000 	str.w	r1, [sl]
 800a740:	b1ed      	cbz	r5, 800a77e <__gethex+0x12a>
 800a742:	f1bb 0f00 	cmp.w	fp, #0
 800a746:	bf0c      	ite	eq
 800a748:	2506      	moveq	r5, #6
 800a74a:	2500      	movne	r5, #0
 800a74c:	4628      	mov	r0, r5
 800a74e:	b005      	add	sp, #20
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	2500      	movs	r5, #0
 800a756:	462c      	mov	r4, r5
 800a758:	e7b0      	b.n	800a6bc <__gethex+0x68>
 800a75a:	2c00      	cmp	r4, #0
 800a75c:	d1c7      	bne.n	800a6ee <__gethex+0x9a>
 800a75e:	4627      	mov	r7, r4
 800a760:	e7c7      	b.n	800a6f2 <__gethex+0x9e>
 800a762:	464e      	mov	r6, r9
 800a764:	462f      	mov	r7, r5
 800a766:	2501      	movs	r5, #1
 800a768:	e7c3      	b.n	800a6f2 <__gethex+0x9e>
 800a76a:	2400      	movs	r4, #0
 800a76c:	1cb1      	adds	r1, r6, #2
 800a76e:	e7cc      	b.n	800a70a <__gethex+0xb6>
 800a770:	2401      	movs	r4, #1
 800a772:	e7fb      	b.n	800a76c <__gethex+0x118>
 800a774:	fb03 0002 	mla	r0, r3, r2, r0
 800a778:	e7ce      	b.n	800a718 <__gethex+0xc4>
 800a77a:	4631      	mov	r1, r6
 800a77c:	e7de      	b.n	800a73c <__gethex+0xe8>
 800a77e:	4629      	mov	r1, r5
 800a780:	eba6 0309 	sub.w	r3, r6, r9
 800a784:	3b01      	subs	r3, #1
 800a786:	2b07      	cmp	r3, #7
 800a788:	dc0a      	bgt.n	800a7a0 <__gethex+0x14c>
 800a78a:	9801      	ldr	r0, [sp, #4]
 800a78c:	f000 faf4 	bl	800ad78 <_Balloc>
 800a790:	4604      	mov	r4, r0
 800a792:	b940      	cbnz	r0, 800a7a6 <__gethex+0x152>
 800a794:	4602      	mov	r2, r0
 800a796:	21e4      	movs	r1, #228	@ 0xe4
 800a798:	4b5b      	ldr	r3, [pc, #364]	@ (800a908 <__gethex+0x2b4>)
 800a79a:	485c      	ldr	r0, [pc, #368]	@ (800a90c <__gethex+0x2b8>)
 800a79c:	f001 fb60 	bl	800be60 <__assert_func>
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	105b      	asrs	r3, r3, #1
 800a7a4:	e7ef      	b.n	800a786 <__gethex+0x132>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f100 0a14 	add.w	sl, r0, #20
 800a7ac:	4655      	mov	r5, sl
 800a7ae:	469b      	mov	fp, r3
 800a7b0:	45b1      	cmp	r9, r6
 800a7b2:	d337      	bcc.n	800a824 <__gethex+0x1d0>
 800a7b4:	f845 bb04 	str.w	fp, [r5], #4
 800a7b8:	eba5 050a 	sub.w	r5, r5, sl
 800a7bc:	10ad      	asrs	r5, r5, #2
 800a7be:	6125      	str	r5, [r4, #16]
 800a7c0:	4658      	mov	r0, fp
 800a7c2:	f000 fbcb 	bl	800af5c <__hi0bits>
 800a7c6:	016d      	lsls	r5, r5, #5
 800a7c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a7cc:	1a2d      	subs	r5, r5, r0
 800a7ce:	42b5      	cmp	r5, r6
 800a7d0:	dd54      	ble.n	800a87c <__gethex+0x228>
 800a7d2:	1bad      	subs	r5, r5, r6
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 ff4d 	bl	800b676 <__any_on>
 800a7dc:	4681      	mov	r9, r0
 800a7de:	b178      	cbz	r0, 800a800 <__gethex+0x1ac>
 800a7e0:	f04f 0901 	mov.w	r9, #1
 800a7e4:	1e6b      	subs	r3, r5, #1
 800a7e6:	1159      	asrs	r1, r3, #5
 800a7e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7ec:	f003 021f 	and.w	r2, r3, #31
 800a7f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a7f4:	420a      	tst	r2, r1
 800a7f6:	d003      	beq.n	800a800 <__gethex+0x1ac>
 800a7f8:	454b      	cmp	r3, r9
 800a7fa:	dc36      	bgt.n	800a86a <__gethex+0x216>
 800a7fc:	f04f 0902 	mov.w	r9, #2
 800a800:	4629      	mov	r1, r5
 800a802:	4620      	mov	r0, r4
 800a804:	f7ff febe 	bl	800a584 <rshift>
 800a808:	442f      	add	r7, r5
 800a80a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a80e:	42bb      	cmp	r3, r7
 800a810:	da42      	bge.n	800a898 <__gethex+0x244>
 800a812:	4621      	mov	r1, r4
 800a814:	9801      	ldr	r0, [sp, #4]
 800a816:	f000 faef 	bl	800adf8 <_Bfree>
 800a81a:	2300      	movs	r3, #0
 800a81c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a81e:	25a3      	movs	r5, #163	@ 0xa3
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	e793      	b.n	800a74c <__gethex+0xf8>
 800a824:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a828:	2a2e      	cmp	r2, #46	@ 0x2e
 800a82a:	d012      	beq.n	800a852 <__gethex+0x1fe>
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d104      	bne.n	800a83a <__gethex+0x1e6>
 800a830:	f845 bb04 	str.w	fp, [r5], #4
 800a834:	f04f 0b00 	mov.w	fp, #0
 800a838:	465b      	mov	r3, fp
 800a83a:	7830      	ldrb	r0, [r6, #0]
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	f7ff fef4 	bl	800a62a <__hexdig_fun>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	f000 000f 	and.w	r0, r0, #15
 800a848:	4098      	lsls	r0, r3
 800a84a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a84e:	3304      	adds	r3, #4
 800a850:	e7ae      	b.n	800a7b0 <__gethex+0x15c>
 800a852:	45b1      	cmp	r9, r6
 800a854:	d8ea      	bhi.n	800a82c <__gethex+0x1d8>
 800a856:	2201      	movs	r2, #1
 800a858:	4630      	mov	r0, r6
 800a85a:	492a      	ldr	r1, [pc, #168]	@ (800a904 <__gethex+0x2b0>)
 800a85c:	9303      	str	r3, [sp, #12]
 800a85e:	f7ff fdaf 	bl	800a3c0 <strncmp>
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	2800      	cmp	r0, #0
 800a866:	d1e1      	bne.n	800a82c <__gethex+0x1d8>
 800a868:	e7a2      	b.n	800a7b0 <__gethex+0x15c>
 800a86a:	4620      	mov	r0, r4
 800a86c:	1ea9      	subs	r1, r5, #2
 800a86e:	f000 ff02 	bl	800b676 <__any_on>
 800a872:	2800      	cmp	r0, #0
 800a874:	d0c2      	beq.n	800a7fc <__gethex+0x1a8>
 800a876:	f04f 0903 	mov.w	r9, #3
 800a87a:	e7c1      	b.n	800a800 <__gethex+0x1ac>
 800a87c:	da09      	bge.n	800a892 <__gethex+0x23e>
 800a87e:	1b75      	subs	r5, r6, r5
 800a880:	4621      	mov	r1, r4
 800a882:	462a      	mov	r2, r5
 800a884:	9801      	ldr	r0, [sp, #4]
 800a886:	f000 fcc7 	bl	800b218 <__lshift>
 800a88a:	4604      	mov	r4, r0
 800a88c:	1b7f      	subs	r7, r7, r5
 800a88e:	f100 0a14 	add.w	sl, r0, #20
 800a892:	f04f 0900 	mov.w	r9, #0
 800a896:	e7b8      	b.n	800a80a <__gethex+0x1b6>
 800a898:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a89c:	42bd      	cmp	r5, r7
 800a89e:	dd6f      	ble.n	800a980 <__gethex+0x32c>
 800a8a0:	1bed      	subs	r5, r5, r7
 800a8a2:	42ae      	cmp	r6, r5
 800a8a4:	dc34      	bgt.n	800a910 <__gethex+0x2bc>
 800a8a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d022      	beq.n	800a8f4 <__gethex+0x2a0>
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d024      	beq.n	800a8fc <__gethex+0x2a8>
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d115      	bne.n	800a8e2 <__gethex+0x28e>
 800a8b6:	42ae      	cmp	r6, r5
 800a8b8:	d113      	bne.n	800a8e2 <__gethex+0x28e>
 800a8ba:	2e01      	cmp	r6, #1
 800a8bc:	d10b      	bne.n	800a8d6 <__gethex+0x282>
 800a8be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8c2:	9a02      	ldr	r2, [sp, #8]
 800a8c4:	2562      	movs	r5, #98	@ 0x62
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	6123      	str	r3, [r4, #16]
 800a8cc:	f8ca 3000 	str.w	r3, [sl]
 800a8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d2:	601c      	str	r4, [r3, #0]
 800a8d4:	e73a      	b.n	800a74c <__gethex+0xf8>
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	1e71      	subs	r1, r6, #1
 800a8da:	f000 fecc 	bl	800b676 <__any_on>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d1ed      	bne.n	800a8be <__gethex+0x26a>
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	9801      	ldr	r0, [sp, #4]
 800a8e6:	f000 fa87 	bl	800adf8 <_Bfree>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8ee:	2550      	movs	r5, #80	@ 0x50
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	e72b      	b.n	800a74c <__gethex+0xf8>
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1f3      	bne.n	800a8e2 <__gethex+0x28e>
 800a8fa:	e7e0      	b.n	800a8be <__gethex+0x26a>
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1dd      	bne.n	800a8be <__gethex+0x26a>
 800a902:	e7ee      	b.n	800a8e2 <__gethex+0x28e>
 800a904:	0800c8c6 	.word	0x0800c8c6
 800a908:	0800c8dc 	.word	0x0800c8dc
 800a90c:	0800c8ed 	.word	0x0800c8ed
 800a910:	1e6f      	subs	r7, r5, #1
 800a912:	f1b9 0f00 	cmp.w	r9, #0
 800a916:	d130      	bne.n	800a97a <__gethex+0x326>
 800a918:	b127      	cbz	r7, 800a924 <__gethex+0x2d0>
 800a91a:	4639      	mov	r1, r7
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 feaa 	bl	800b676 <__any_on>
 800a922:	4681      	mov	r9, r0
 800a924:	2301      	movs	r3, #1
 800a926:	4629      	mov	r1, r5
 800a928:	1b76      	subs	r6, r6, r5
 800a92a:	2502      	movs	r5, #2
 800a92c:	117a      	asrs	r2, r7, #5
 800a92e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a932:	f007 071f 	and.w	r7, r7, #31
 800a936:	40bb      	lsls	r3, r7
 800a938:	4213      	tst	r3, r2
 800a93a:	4620      	mov	r0, r4
 800a93c:	bf18      	it	ne
 800a93e:	f049 0902 	orrne.w	r9, r9, #2
 800a942:	f7ff fe1f 	bl	800a584 <rshift>
 800a946:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d047      	beq.n	800a9e0 <__gethex+0x38c>
 800a950:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d015      	beq.n	800a984 <__gethex+0x330>
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d017      	beq.n	800a98c <__gethex+0x338>
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d109      	bne.n	800a974 <__gethex+0x320>
 800a960:	f019 0f02 	tst.w	r9, #2
 800a964:	d006      	beq.n	800a974 <__gethex+0x320>
 800a966:	f8da 3000 	ldr.w	r3, [sl]
 800a96a:	ea49 0903 	orr.w	r9, r9, r3
 800a96e:	f019 0f01 	tst.w	r9, #1
 800a972:	d10e      	bne.n	800a992 <__gethex+0x33e>
 800a974:	f045 0510 	orr.w	r5, r5, #16
 800a978:	e032      	b.n	800a9e0 <__gethex+0x38c>
 800a97a:	f04f 0901 	mov.w	r9, #1
 800a97e:	e7d1      	b.n	800a924 <__gethex+0x2d0>
 800a980:	2501      	movs	r5, #1
 800a982:	e7e2      	b.n	800a94a <__gethex+0x2f6>
 800a984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a986:	f1c3 0301 	rsb	r3, r3, #1
 800a98a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f0      	beq.n	800a974 <__gethex+0x320>
 800a992:	f04f 0c00 	mov.w	ip, #0
 800a996:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a99a:	f104 0314 	add.w	r3, r4, #20
 800a99e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9b0:	d01b      	beq.n	800a9ea <__gethex+0x396>
 800a9b2:	3201      	adds	r2, #1
 800a9b4:	6002      	str	r2, [r0, #0]
 800a9b6:	2d02      	cmp	r5, #2
 800a9b8:	f104 0314 	add.w	r3, r4, #20
 800a9bc:	d13c      	bne.n	800aa38 <__gethex+0x3e4>
 800a9be:	f8d8 2000 	ldr.w	r2, [r8]
 800a9c2:	3a01      	subs	r2, #1
 800a9c4:	42b2      	cmp	r2, r6
 800a9c6:	d109      	bne.n	800a9dc <__gethex+0x388>
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	1171      	asrs	r1, r6, #5
 800a9cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9d0:	f006 061f 	and.w	r6, r6, #31
 800a9d4:	fa02 f606 	lsl.w	r6, r2, r6
 800a9d8:	421e      	tst	r6, r3
 800a9da:	d13a      	bne.n	800aa52 <__gethex+0x3fe>
 800a9dc:	f045 0520 	orr.w	r5, r5, #32
 800a9e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9e2:	601c      	str	r4, [r3, #0]
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	601f      	str	r7, [r3, #0]
 800a9e8:	e6b0      	b.n	800a74c <__gethex+0xf8>
 800a9ea:	4299      	cmp	r1, r3
 800a9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9f0:	d8d9      	bhi.n	800a9a6 <__gethex+0x352>
 800a9f2:	68a3      	ldr	r3, [r4, #8]
 800a9f4:	459b      	cmp	fp, r3
 800a9f6:	db17      	blt.n	800aa28 <__gethex+0x3d4>
 800a9f8:	6861      	ldr	r1, [r4, #4]
 800a9fa:	9801      	ldr	r0, [sp, #4]
 800a9fc:	3101      	adds	r1, #1
 800a9fe:	f000 f9bb 	bl	800ad78 <_Balloc>
 800aa02:	4681      	mov	r9, r0
 800aa04:	b918      	cbnz	r0, 800aa0e <__gethex+0x3ba>
 800aa06:	4602      	mov	r2, r0
 800aa08:	2184      	movs	r1, #132	@ 0x84
 800aa0a:	4b19      	ldr	r3, [pc, #100]	@ (800aa70 <__gethex+0x41c>)
 800aa0c:	e6c5      	b.n	800a79a <__gethex+0x146>
 800aa0e:	6922      	ldr	r2, [r4, #16]
 800aa10:	f104 010c 	add.w	r1, r4, #12
 800aa14:	3202      	adds	r2, #2
 800aa16:	0092      	lsls	r2, r2, #2
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7ff fd56 	bl	800a4ca <memcpy>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	9801      	ldr	r0, [sp, #4]
 800aa22:	f000 f9e9 	bl	800adf8 <_Bfree>
 800aa26:	464c      	mov	r4, r9
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	6122      	str	r2, [r4, #16]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa34:	615a      	str	r2, [r3, #20]
 800aa36:	e7be      	b.n	800a9b6 <__gethex+0x362>
 800aa38:	6922      	ldr	r2, [r4, #16]
 800aa3a:	455a      	cmp	r2, fp
 800aa3c:	dd0b      	ble.n	800aa56 <__gethex+0x402>
 800aa3e:	2101      	movs	r1, #1
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7ff fd9f 	bl	800a584 <rshift>
 800aa46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa4a:	3701      	adds	r7, #1
 800aa4c:	42bb      	cmp	r3, r7
 800aa4e:	f6ff aee0 	blt.w	800a812 <__gethex+0x1be>
 800aa52:	2501      	movs	r5, #1
 800aa54:	e7c2      	b.n	800a9dc <__gethex+0x388>
 800aa56:	f016 061f 	ands.w	r6, r6, #31
 800aa5a:	d0fa      	beq.n	800aa52 <__gethex+0x3fe>
 800aa5c:	4453      	add	r3, sl
 800aa5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa62:	f000 fa7b 	bl	800af5c <__hi0bits>
 800aa66:	f1c6 0620 	rsb	r6, r6, #32
 800aa6a:	42b0      	cmp	r0, r6
 800aa6c:	dbe7      	blt.n	800aa3e <__gethex+0x3ea>
 800aa6e:	e7f0      	b.n	800aa52 <__gethex+0x3fe>
 800aa70:	0800c8dc 	.word	0x0800c8dc

0800aa74 <L_shift>:
 800aa74:	f1c2 0208 	rsb	r2, r2, #8
 800aa78:	0092      	lsls	r2, r2, #2
 800aa7a:	b570      	push	{r4, r5, r6, lr}
 800aa7c:	f1c2 0620 	rsb	r6, r2, #32
 800aa80:	6843      	ldr	r3, [r0, #4]
 800aa82:	6804      	ldr	r4, [r0, #0]
 800aa84:	fa03 f506 	lsl.w	r5, r3, r6
 800aa88:	432c      	orrs	r4, r5
 800aa8a:	40d3      	lsrs	r3, r2
 800aa8c:	6004      	str	r4, [r0, #0]
 800aa8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa92:	4288      	cmp	r0, r1
 800aa94:	d3f4      	bcc.n	800aa80 <L_shift+0xc>
 800aa96:	bd70      	pop	{r4, r5, r6, pc}

0800aa98 <__match>:
 800aa98:	b530      	push	{r4, r5, lr}
 800aa9a:	6803      	ldr	r3, [r0, #0]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaa2:	b914      	cbnz	r4, 800aaaa <__match+0x12>
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	bd30      	pop	{r4, r5, pc}
 800aaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aab2:	2d19      	cmp	r5, #25
 800aab4:	bf98      	it	ls
 800aab6:	3220      	addls	r2, #32
 800aab8:	42a2      	cmp	r2, r4
 800aaba:	d0f0      	beq.n	800aa9e <__match+0x6>
 800aabc:	2000      	movs	r0, #0
 800aabe:	e7f3      	b.n	800aaa8 <__match+0x10>

0800aac0 <__hexnan>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	2500      	movs	r5, #0
 800aac6:	680b      	ldr	r3, [r1, #0]
 800aac8:	4682      	mov	sl, r0
 800aaca:	115e      	asrs	r6, r3, #5
 800aacc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aad0:	f013 031f 	ands.w	r3, r3, #31
 800aad4:	bf18      	it	ne
 800aad6:	3604      	addne	r6, #4
 800aad8:	1f37      	subs	r7, r6, #4
 800aada:	4690      	mov	r8, r2
 800aadc:	46b9      	mov	r9, r7
 800aade:	463c      	mov	r4, r7
 800aae0:	46ab      	mov	fp, r5
 800aae2:	b087      	sub	sp, #28
 800aae4:	6801      	ldr	r1, [r0, #0]
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	f846 5c04 	str.w	r5, [r6, #-4]
 800aaec:	9502      	str	r5, [sp, #8]
 800aaee:	784a      	ldrb	r2, [r1, #1]
 800aaf0:	1c4b      	adds	r3, r1, #1
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	b342      	cbz	r2, 800ab48 <__hexnan+0x88>
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	9204      	str	r2, [sp, #16]
 800aafc:	f7ff fd95 	bl	800a62a <__hexdig_fun>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d151      	bne.n	800aba8 <__hexnan+0xe8>
 800ab04:	9a04      	ldr	r2, [sp, #16]
 800ab06:	9905      	ldr	r1, [sp, #20]
 800ab08:	2a20      	cmp	r2, #32
 800ab0a:	d818      	bhi.n	800ab3e <__hexnan+0x7e>
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	459b      	cmp	fp, r3
 800ab10:	dd13      	ble.n	800ab3a <__hexnan+0x7a>
 800ab12:	454c      	cmp	r4, r9
 800ab14:	d206      	bcs.n	800ab24 <__hexnan+0x64>
 800ab16:	2d07      	cmp	r5, #7
 800ab18:	dc04      	bgt.n	800ab24 <__hexnan+0x64>
 800ab1a:	462a      	mov	r2, r5
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f7ff ffa8 	bl	800aa74 <L_shift>
 800ab24:	4544      	cmp	r4, r8
 800ab26:	d952      	bls.n	800abce <__hexnan+0x10e>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab32:	461d      	mov	r5, r3
 800ab34:	464c      	mov	r4, r9
 800ab36:	f8cd b008 	str.w	fp, [sp, #8]
 800ab3a:	9903      	ldr	r1, [sp, #12]
 800ab3c:	e7d7      	b.n	800aaee <__hexnan+0x2e>
 800ab3e:	2a29      	cmp	r2, #41	@ 0x29
 800ab40:	d157      	bne.n	800abf2 <__hexnan+0x132>
 800ab42:	3102      	adds	r1, #2
 800ab44:	f8ca 1000 	str.w	r1, [sl]
 800ab48:	f1bb 0f00 	cmp.w	fp, #0
 800ab4c:	d051      	beq.n	800abf2 <__hexnan+0x132>
 800ab4e:	454c      	cmp	r4, r9
 800ab50:	d206      	bcs.n	800ab60 <__hexnan+0xa0>
 800ab52:	2d07      	cmp	r5, #7
 800ab54:	dc04      	bgt.n	800ab60 <__hexnan+0xa0>
 800ab56:	462a      	mov	r2, r5
 800ab58:	4649      	mov	r1, r9
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff ff8a 	bl	800aa74 <L_shift>
 800ab60:	4544      	cmp	r4, r8
 800ab62:	d936      	bls.n	800abd2 <__hexnan+0x112>
 800ab64:	4623      	mov	r3, r4
 800ab66:	f1a8 0204 	sub.w	r2, r8, #4
 800ab6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab6e:	429f      	cmp	r7, r3
 800ab70:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab74:	d2f9      	bcs.n	800ab6a <__hexnan+0xaa>
 800ab76:	1b3b      	subs	r3, r7, r4
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	3401      	adds	r4, #1
 800ab80:	3e03      	subs	r6, #3
 800ab82:	42b4      	cmp	r4, r6
 800ab84:	bf88      	it	hi
 800ab86:	2304      	movhi	r3, #4
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4443      	add	r3, r8
 800ab8c:	f843 2b04 	str.w	r2, [r3], #4
 800ab90:	429f      	cmp	r7, r3
 800ab92:	d2fb      	bcs.n	800ab8c <__hexnan+0xcc>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	b91b      	cbnz	r3, 800aba0 <__hexnan+0xe0>
 800ab98:	4547      	cmp	r7, r8
 800ab9a:	d128      	bne.n	800abee <__hexnan+0x12e>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	2005      	movs	r0, #5
 800aba2:	b007      	add	sp, #28
 800aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba8:	3501      	adds	r5, #1
 800abaa:	2d08      	cmp	r5, #8
 800abac:	f10b 0b01 	add.w	fp, fp, #1
 800abb0:	dd06      	ble.n	800abc0 <__hexnan+0x100>
 800abb2:	4544      	cmp	r4, r8
 800abb4:	d9c1      	bls.n	800ab3a <__hexnan+0x7a>
 800abb6:	2300      	movs	r3, #0
 800abb8:	2501      	movs	r5, #1
 800abba:	f844 3c04 	str.w	r3, [r4, #-4]
 800abbe:	3c04      	subs	r4, #4
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	f000 000f 	and.w	r0, r0, #15
 800abc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	e7b5      	b.n	800ab3a <__hexnan+0x7a>
 800abce:	2508      	movs	r5, #8
 800abd0:	e7b3      	b.n	800ab3a <__hexnan+0x7a>
 800abd2:	9b01      	ldr	r3, [sp, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0dd      	beq.n	800ab94 <__hexnan+0xd4>
 800abd8:	f04f 32ff 	mov.w	r2, #4294967295
 800abdc:	f1c3 0320 	rsb	r3, r3, #32
 800abe0:	40da      	lsrs	r2, r3
 800abe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800abe6:	4013      	ands	r3, r2
 800abe8:	f846 3c04 	str.w	r3, [r6, #-4]
 800abec:	e7d2      	b.n	800ab94 <__hexnan+0xd4>
 800abee:	3f04      	subs	r7, #4
 800abf0:	e7d0      	b.n	800ab94 <__hexnan+0xd4>
 800abf2:	2004      	movs	r0, #4
 800abf4:	e7d5      	b.n	800aba2 <__hexnan+0xe2>
	...

0800abf8 <sbrk_aligned>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	4e0f      	ldr	r6, [pc, #60]	@ (800ac38 <sbrk_aligned+0x40>)
 800abfc:	460c      	mov	r4, r1
 800abfe:	6831      	ldr	r1, [r6, #0]
 800ac00:	4605      	mov	r5, r0
 800ac02:	b911      	cbnz	r1, 800ac0a <sbrk_aligned+0x12>
 800ac04:	f001 f90e 	bl	800be24 <_sbrk_r>
 800ac08:	6030      	str	r0, [r6, #0]
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f001 f909 	bl	800be24 <_sbrk_r>
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d103      	bne.n	800ac1e <sbrk_aligned+0x26>
 800ac16:	f04f 34ff 	mov.w	r4, #4294967295
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
 800ac1e:	1cc4      	adds	r4, r0, #3
 800ac20:	f024 0403 	bic.w	r4, r4, #3
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d0f8      	beq.n	800ac1a <sbrk_aligned+0x22>
 800ac28:	1a21      	subs	r1, r4, r0
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f001 f8fa 	bl	800be24 <_sbrk_r>
 800ac30:	3001      	adds	r0, #1
 800ac32:	d1f2      	bne.n	800ac1a <sbrk_aligned+0x22>
 800ac34:	e7ef      	b.n	800ac16 <sbrk_aligned+0x1e>
 800ac36:	bf00      	nop
 800ac38:	200016ec 	.word	0x200016ec

0800ac3c <_malloc_r>:
 800ac3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac40:	1ccd      	adds	r5, r1, #3
 800ac42:	f025 0503 	bic.w	r5, r5, #3
 800ac46:	3508      	adds	r5, #8
 800ac48:	2d0c      	cmp	r5, #12
 800ac4a:	bf38      	it	cc
 800ac4c:	250c      	movcc	r5, #12
 800ac4e:	2d00      	cmp	r5, #0
 800ac50:	4606      	mov	r6, r0
 800ac52:	db01      	blt.n	800ac58 <_malloc_r+0x1c>
 800ac54:	42a9      	cmp	r1, r5
 800ac56:	d904      	bls.n	800ac62 <_malloc_r+0x26>
 800ac58:	230c      	movs	r3, #12
 800ac5a:	6033      	str	r3, [r6, #0]
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad38 <_malloc_r+0xfc>
 800ac66:	f000 f87b 	bl	800ad60 <__malloc_lock>
 800ac6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac6e:	461c      	mov	r4, r3
 800ac70:	bb44      	cbnz	r4, 800acc4 <_malloc_r+0x88>
 800ac72:	4629      	mov	r1, r5
 800ac74:	4630      	mov	r0, r6
 800ac76:	f7ff ffbf 	bl	800abf8 <sbrk_aligned>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	d158      	bne.n	800ad32 <_malloc_r+0xf6>
 800ac80:	f8d8 4000 	ldr.w	r4, [r8]
 800ac84:	4627      	mov	r7, r4
 800ac86:	2f00      	cmp	r7, #0
 800ac88:	d143      	bne.n	800ad12 <_malloc_r+0xd6>
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d04b      	beq.n	800ad26 <_malloc_r+0xea>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	4639      	mov	r1, r7
 800ac92:	4630      	mov	r0, r6
 800ac94:	eb04 0903 	add.w	r9, r4, r3
 800ac98:	f001 f8c4 	bl	800be24 <_sbrk_r>
 800ac9c:	4581      	cmp	r9, r0
 800ac9e:	d142      	bne.n	800ad26 <_malloc_r+0xea>
 800aca0:	6821      	ldr	r1, [r4, #0]
 800aca2:	4630      	mov	r0, r6
 800aca4:	1a6d      	subs	r5, r5, r1
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7ff ffa6 	bl	800abf8 <sbrk_aligned>
 800acac:	3001      	adds	r0, #1
 800acae:	d03a      	beq.n	800ad26 <_malloc_r+0xea>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	442b      	add	r3, r5
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	f8d8 3000 	ldr.w	r3, [r8]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	bb62      	cbnz	r2, 800ad18 <_malloc_r+0xdc>
 800acbe:	f8c8 7000 	str.w	r7, [r8]
 800acc2:	e00f      	b.n	800ace4 <_malloc_r+0xa8>
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	1b52      	subs	r2, r2, r5
 800acc8:	d420      	bmi.n	800ad0c <_malloc_r+0xd0>
 800acca:	2a0b      	cmp	r2, #11
 800accc:	d917      	bls.n	800acfe <_malloc_r+0xc2>
 800acce:	1961      	adds	r1, r4, r5
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	6025      	str	r5, [r4, #0]
 800acd4:	bf18      	it	ne
 800acd6:	6059      	strne	r1, [r3, #4]
 800acd8:	6863      	ldr	r3, [r4, #4]
 800acda:	bf08      	it	eq
 800acdc:	f8c8 1000 	streq.w	r1, [r8]
 800ace0:	5162      	str	r2, [r4, r5]
 800ace2:	604b      	str	r3, [r1, #4]
 800ace4:	4630      	mov	r0, r6
 800ace6:	f000 f841 	bl	800ad6c <__malloc_unlock>
 800acea:	f104 000b 	add.w	r0, r4, #11
 800acee:	1d23      	adds	r3, r4, #4
 800acf0:	f020 0007 	bic.w	r0, r0, #7
 800acf4:	1ac2      	subs	r2, r0, r3
 800acf6:	bf1c      	itt	ne
 800acf8:	1a1b      	subne	r3, r3, r0
 800acfa:	50a3      	strne	r3, [r4, r2]
 800acfc:	e7af      	b.n	800ac5e <_malloc_r+0x22>
 800acfe:	6862      	ldr	r2, [r4, #4]
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	bf0c      	ite	eq
 800ad04:	f8c8 2000 	streq.w	r2, [r8]
 800ad08:	605a      	strne	r2, [r3, #4]
 800ad0a:	e7eb      	b.n	800ace4 <_malloc_r+0xa8>
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	6864      	ldr	r4, [r4, #4]
 800ad10:	e7ae      	b.n	800ac70 <_malloc_r+0x34>
 800ad12:	463c      	mov	r4, r7
 800ad14:	687f      	ldr	r7, [r7, #4]
 800ad16:	e7b6      	b.n	800ac86 <_malloc_r+0x4a>
 800ad18:	461a      	mov	r2, r3
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	d1fb      	bne.n	800ad18 <_malloc_r+0xdc>
 800ad20:	2300      	movs	r3, #0
 800ad22:	6053      	str	r3, [r2, #4]
 800ad24:	e7de      	b.n	800ace4 <_malloc_r+0xa8>
 800ad26:	230c      	movs	r3, #12
 800ad28:	4630      	mov	r0, r6
 800ad2a:	6033      	str	r3, [r6, #0]
 800ad2c:	f000 f81e 	bl	800ad6c <__malloc_unlock>
 800ad30:	e794      	b.n	800ac5c <_malloc_r+0x20>
 800ad32:	6005      	str	r5, [r0, #0]
 800ad34:	e7d6      	b.n	800ace4 <_malloc_r+0xa8>
 800ad36:	bf00      	nop
 800ad38:	200016f0 	.word	0x200016f0

0800ad3c <__ascii_mbtowc>:
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	b901      	cbnz	r1, 800ad42 <__ascii_mbtowc+0x6>
 800ad40:	a901      	add	r1, sp, #4
 800ad42:	b142      	cbz	r2, 800ad56 <__ascii_mbtowc+0x1a>
 800ad44:	b14b      	cbz	r3, 800ad5a <__ascii_mbtowc+0x1e>
 800ad46:	7813      	ldrb	r3, [r2, #0]
 800ad48:	600b      	str	r3, [r1, #0]
 800ad4a:	7812      	ldrb	r2, [r2, #0]
 800ad4c:	1e10      	subs	r0, r2, #0
 800ad4e:	bf18      	it	ne
 800ad50:	2001      	movne	r0, #1
 800ad52:	b002      	add	sp, #8
 800ad54:	4770      	bx	lr
 800ad56:	4610      	mov	r0, r2
 800ad58:	e7fb      	b.n	800ad52 <__ascii_mbtowc+0x16>
 800ad5a:	f06f 0001 	mvn.w	r0, #1
 800ad5e:	e7f8      	b.n	800ad52 <__ascii_mbtowc+0x16>

0800ad60 <__malloc_lock>:
 800ad60:	4801      	ldr	r0, [pc, #4]	@ (800ad68 <__malloc_lock+0x8>)
 800ad62:	f7ff bbb0 	b.w	800a4c6 <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	200016e8 	.word	0x200016e8

0800ad6c <__malloc_unlock>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	@ (800ad74 <__malloc_unlock+0x8>)
 800ad6e:	f7ff bbab 	b.w	800a4c8 <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	200016e8 	.word	0x200016e8

0800ad78 <_Balloc>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	69c6      	ldr	r6, [r0, #28]
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	b976      	cbnz	r6, 800ada0 <_Balloc+0x28>
 800ad82:	2010      	movs	r0, #16
 800ad84:	f001 f89e 	bl	800bec4 <malloc>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	61e0      	str	r0, [r4, #28]
 800ad8c:	b920      	cbnz	r0, 800ad98 <_Balloc+0x20>
 800ad8e:	216b      	movs	r1, #107	@ 0x6b
 800ad90:	4b17      	ldr	r3, [pc, #92]	@ (800adf0 <_Balloc+0x78>)
 800ad92:	4818      	ldr	r0, [pc, #96]	@ (800adf4 <_Balloc+0x7c>)
 800ad94:	f001 f864 	bl	800be60 <__assert_func>
 800ad98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad9c:	6006      	str	r6, [r0, #0]
 800ad9e:	60c6      	str	r6, [r0, #12]
 800ada0:	69e6      	ldr	r6, [r4, #28]
 800ada2:	68f3      	ldr	r3, [r6, #12]
 800ada4:	b183      	cbz	r3, 800adc8 <_Balloc+0x50>
 800ada6:	69e3      	ldr	r3, [r4, #28]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adae:	b9b8      	cbnz	r0, 800ade0 <_Balloc+0x68>
 800adb0:	2101      	movs	r1, #1
 800adb2:	fa01 f605 	lsl.w	r6, r1, r5
 800adb6:	1d72      	adds	r2, r6, #5
 800adb8:	4620      	mov	r0, r4
 800adba:	0092      	lsls	r2, r2, #2
 800adbc:	f001 f86e 	bl	800be9c <_calloc_r>
 800adc0:	b160      	cbz	r0, 800addc <_Balloc+0x64>
 800adc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adc6:	e00e      	b.n	800ade6 <_Balloc+0x6e>
 800adc8:	2221      	movs	r2, #33	@ 0x21
 800adca:	2104      	movs	r1, #4
 800adcc:	4620      	mov	r0, r4
 800adce:	f001 f865 	bl	800be9c <_calloc_r>
 800add2:	69e3      	ldr	r3, [r4, #28]
 800add4:	60f0      	str	r0, [r6, #12]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e4      	bne.n	800ada6 <_Balloc+0x2e>
 800addc:	2000      	movs	r0, #0
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	6802      	ldr	r2, [r0, #0]
 800ade2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ade6:	2300      	movs	r3, #0
 800ade8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adec:	e7f7      	b.n	800adde <_Balloc+0x66>
 800adee:	bf00      	nop
 800adf0:	0800c94d 	.word	0x0800c94d
 800adf4:	0800c964 	.word	0x0800c964

0800adf8 <_Bfree>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	69c6      	ldr	r6, [r0, #28]
 800adfc:	4605      	mov	r5, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	b976      	cbnz	r6, 800ae20 <_Bfree+0x28>
 800ae02:	2010      	movs	r0, #16
 800ae04:	f001 f85e 	bl	800bec4 <malloc>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	61e8      	str	r0, [r5, #28]
 800ae0c:	b920      	cbnz	r0, 800ae18 <_Bfree+0x20>
 800ae0e:	218f      	movs	r1, #143	@ 0x8f
 800ae10:	4b08      	ldr	r3, [pc, #32]	@ (800ae34 <_Bfree+0x3c>)
 800ae12:	4809      	ldr	r0, [pc, #36]	@ (800ae38 <_Bfree+0x40>)
 800ae14:	f001 f824 	bl	800be60 <__assert_func>
 800ae18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae1c:	6006      	str	r6, [r0, #0]
 800ae1e:	60c6      	str	r6, [r0, #12]
 800ae20:	b13c      	cbz	r4, 800ae32 <_Bfree+0x3a>
 800ae22:	69eb      	ldr	r3, [r5, #28]
 800ae24:	6862      	ldr	r2, [r4, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae2c:	6021      	str	r1, [r4, #0]
 800ae2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	0800c94d 	.word	0x0800c94d
 800ae38:	0800c964 	.word	0x0800c964

0800ae3c <__multadd>:
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	4607      	mov	r7, r0
 800ae42:	460c      	mov	r4, r1
 800ae44:	461e      	mov	r6, r3
 800ae46:	2000      	movs	r0, #0
 800ae48:	690d      	ldr	r5, [r1, #16]
 800ae4a:	f101 0c14 	add.w	ip, r1, #20
 800ae4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ae52:	3001      	adds	r0, #1
 800ae54:	b299      	uxth	r1, r3
 800ae56:	fb02 6101 	mla	r1, r2, r1, r6
 800ae5a:	0c1e      	lsrs	r6, r3, #16
 800ae5c:	0c0b      	lsrs	r3, r1, #16
 800ae5e:	fb02 3306 	mla	r3, r2, r6, r3
 800ae62:	b289      	uxth	r1, r1
 800ae64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae68:	4285      	cmp	r5, r0
 800ae6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ae72:	dcec      	bgt.n	800ae4e <__multadd+0x12>
 800ae74:	b30e      	cbz	r6, 800aeba <__multadd+0x7e>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dc19      	bgt.n	800aeb0 <__multadd+0x74>
 800ae7c:	6861      	ldr	r1, [r4, #4]
 800ae7e:	4638      	mov	r0, r7
 800ae80:	3101      	adds	r1, #1
 800ae82:	f7ff ff79 	bl	800ad78 <_Balloc>
 800ae86:	4680      	mov	r8, r0
 800ae88:	b928      	cbnz	r0, 800ae96 <__multadd+0x5a>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	21ba      	movs	r1, #186	@ 0xba
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	@ (800aec0 <__multadd+0x84>)
 800ae90:	480c      	ldr	r0, [pc, #48]	@ (800aec4 <__multadd+0x88>)
 800ae92:	f000 ffe5 	bl	800be60 <__assert_func>
 800ae96:	6922      	ldr	r2, [r4, #16]
 800ae98:	f104 010c 	add.w	r1, r4, #12
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	0092      	lsls	r2, r2, #2
 800aea0:	300c      	adds	r0, #12
 800aea2:	f7ff fb12 	bl	800a4ca <memcpy>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f7ff ffa5 	bl	800adf8 <_Bfree>
 800aeae:	4644      	mov	r4, r8
 800aeb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	615e      	str	r6, [r3, #20]
 800aeb8:	6125      	str	r5, [r4, #16]
 800aeba:	4620      	mov	r0, r4
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	0800c8dc 	.word	0x0800c8dc
 800aec4:	0800c964 	.word	0x0800c964

0800aec8 <__s2b>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	4615      	mov	r5, r2
 800aece:	2209      	movs	r2, #9
 800aed0:	461f      	mov	r7, r3
 800aed2:	3308      	adds	r3, #8
 800aed4:	460c      	mov	r4, r1
 800aed6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeda:	4606      	mov	r6, r0
 800aedc:	2201      	movs	r2, #1
 800aede:	2100      	movs	r1, #0
 800aee0:	429a      	cmp	r2, r3
 800aee2:	db09      	blt.n	800aef8 <__s2b+0x30>
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7ff ff47 	bl	800ad78 <_Balloc>
 800aeea:	b940      	cbnz	r0, 800aefe <__s2b+0x36>
 800aeec:	4602      	mov	r2, r0
 800aeee:	21d3      	movs	r1, #211	@ 0xd3
 800aef0:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <__s2b+0x8c>)
 800aef2:	4819      	ldr	r0, [pc, #100]	@ (800af58 <__s2b+0x90>)
 800aef4:	f000 ffb4 	bl	800be60 <__assert_func>
 800aef8:	0052      	lsls	r2, r2, #1
 800aefa:	3101      	adds	r1, #1
 800aefc:	e7f0      	b.n	800aee0 <__s2b+0x18>
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	2d09      	cmp	r5, #9
 800af02:	6143      	str	r3, [r0, #20]
 800af04:	f04f 0301 	mov.w	r3, #1
 800af08:	6103      	str	r3, [r0, #16]
 800af0a:	dd16      	ble.n	800af3a <__s2b+0x72>
 800af0c:	f104 0909 	add.w	r9, r4, #9
 800af10:	46c8      	mov	r8, r9
 800af12:	442c      	add	r4, r5
 800af14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af18:	4601      	mov	r1, r0
 800af1a:	220a      	movs	r2, #10
 800af1c:	4630      	mov	r0, r6
 800af1e:	3b30      	subs	r3, #48	@ 0x30
 800af20:	f7ff ff8c 	bl	800ae3c <__multadd>
 800af24:	45a0      	cmp	r8, r4
 800af26:	d1f5      	bne.n	800af14 <__s2b+0x4c>
 800af28:	f1a5 0408 	sub.w	r4, r5, #8
 800af2c:	444c      	add	r4, r9
 800af2e:	1b2d      	subs	r5, r5, r4
 800af30:	1963      	adds	r3, r4, r5
 800af32:	42bb      	cmp	r3, r7
 800af34:	db04      	blt.n	800af40 <__s2b+0x78>
 800af36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3a:	2509      	movs	r5, #9
 800af3c:	340a      	adds	r4, #10
 800af3e:	e7f6      	b.n	800af2e <__s2b+0x66>
 800af40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af44:	4601      	mov	r1, r0
 800af46:	220a      	movs	r2, #10
 800af48:	4630      	mov	r0, r6
 800af4a:	3b30      	subs	r3, #48	@ 0x30
 800af4c:	f7ff ff76 	bl	800ae3c <__multadd>
 800af50:	e7ee      	b.n	800af30 <__s2b+0x68>
 800af52:	bf00      	nop
 800af54:	0800c8dc 	.word	0x0800c8dc
 800af58:	0800c964 	.word	0x0800c964

0800af5c <__hi0bits>:
 800af5c:	4603      	mov	r3, r0
 800af5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af62:	bf3a      	itte	cc
 800af64:	0403      	lslcc	r3, r0, #16
 800af66:	2010      	movcc	r0, #16
 800af68:	2000      	movcs	r0, #0
 800af6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af6e:	bf3c      	itt	cc
 800af70:	021b      	lslcc	r3, r3, #8
 800af72:	3008      	addcc	r0, #8
 800af74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af78:	bf3c      	itt	cc
 800af7a:	011b      	lslcc	r3, r3, #4
 800af7c:	3004      	addcc	r0, #4
 800af7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af82:	bf3c      	itt	cc
 800af84:	009b      	lslcc	r3, r3, #2
 800af86:	3002      	addcc	r0, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	db05      	blt.n	800af98 <__hi0bits+0x3c>
 800af8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af90:	f100 0001 	add.w	r0, r0, #1
 800af94:	bf08      	it	eq
 800af96:	2020      	moveq	r0, #32
 800af98:	4770      	bx	lr

0800af9a <__lo0bits>:
 800af9a:	6803      	ldr	r3, [r0, #0]
 800af9c:	4602      	mov	r2, r0
 800af9e:	f013 0007 	ands.w	r0, r3, #7
 800afa2:	d00b      	beq.n	800afbc <__lo0bits+0x22>
 800afa4:	07d9      	lsls	r1, r3, #31
 800afa6:	d421      	bmi.n	800afec <__lo0bits+0x52>
 800afa8:	0798      	lsls	r0, r3, #30
 800afaa:	bf49      	itett	mi
 800afac:	085b      	lsrmi	r3, r3, #1
 800afae:	089b      	lsrpl	r3, r3, #2
 800afb0:	2001      	movmi	r0, #1
 800afb2:	6013      	strmi	r3, [r2, #0]
 800afb4:	bf5c      	itt	pl
 800afb6:	2002      	movpl	r0, #2
 800afb8:	6013      	strpl	r3, [r2, #0]
 800afba:	4770      	bx	lr
 800afbc:	b299      	uxth	r1, r3
 800afbe:	b909      	cbnz	r1, 800afc4 <__lo0bits+0x2a>
 800afc0:	2010      	movs	r0, #16
 800afc2:	0c1b      	lsrs	r3, r3, #16
 800afc4:	b2d9      	uxtb	r1, r3
 800afc6:	b909      	cbnz	r1, 800afcc <__lo0bits+0x32>
 800afc8:	3008      	adds	r0, #8
 800afca:	0a1b      	lsrs	r3, r3, #8
 800afcc:	0719      	lsls	r1, r3, #28
 800afce:	bf04      	itt	eq
 800afd0:	091b      	lsreq	r3, r3, #4
 800afd2:	3004      	addeq	r0, #4
 800afd4:	0799      	lsls	r1, r3, #30
 800afd6:	bf04      	itt	eq
 800afd8:	089b      	lsreq	r3, r3, #2
 800afda:	3002      	addeq	r0, #2
 800afdc:	07d9      	lsls	r1, r3, #31
 800afde:	d403      	bmi.n	800afe8 <__lo0bits+0x4e>
 800afe0:	085b      	lsrs	r3, r3, #1
 800afe2:	f100 0001 	add.w	r0, r0, #1
 800afe6:	d003      	beq.n	800aff0 <__lo0bits+0x56>
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	4770      	bx	lr
 800afec:	2000      	movs	r0, #0
 800afee:	4770      	bx	lr
 800aff0:	2020      	movs	r0, #32
 800aff2:	4770      	bx	lr

0800aff4 <__i2b>:
 800aff4:	b510      	push	{r4, lr}
 800aff6:	460c      	mov	r4, r1
 800aff8:	2101      	movs	r1, #1
 800affa:	f7ff febd 	bl	800ad78 <_Balloc>
 800affe:	4602      	mov	r2, r0
 800b000:	b928      	cbnz	r0, 800b00e <__i2b+0x1a>
 800b002:	f240 1145 	movw	r1, #325	@ 0x145
 800b006:	4b04      	ldr	r3, [pc, #16]	@ (800b018 <__i2b+0x24>)
 800b008:	4804      	ldr	r0, [pc, #16]	@ (800b01c <__i2b+0x28>)
 800b00a:	f000 ff29 	bl	800be60 <__assert_func>
 800b00e:	2301      	movs	r3, #1
 800b010:	6144      	str	r4, [r0, #20]
 800b012:	6103      	str	r3, [r0, #16]
 800b014:	bd10      	pop	{r4, pc}
 800b016:	bf00      	nop
 800b018:	0800c8dc 	.word	0x0800c8dc
 800b01c:	0800c964 	.word	0x0800c964

0800b020 <__multiply>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4617      	mov	r7, r2
 800b026:	690a      	ldr	r2, [r1, #16]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	4689      	mov	r9, r1
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bfa2      	ittt	ge
 800b030:	463b      	movge	r3, r7
 800b032:	460f      	movge	r7, r1
 800b034:	4699      	movge	r9, r3
 800b036:	693d      	ldr	r5, [r7, #16]
 800b038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	eb05 060a 	add.w	r6, r5, sl
 800b044:	42b3      	cmp	r3, r6
 800b046:	b085      	sub	sp, #20
 800b048:	bfb8      	it	lt
 800b04a:	3101      	addlt	r1, #1
 800b04c:	f7ff fe94 	bl	800ad78 <_Balloc>
 800b050:	b930      	cbnz	r0, 800b060 <__multiply+0x40>
 800b052:	4602      	mov	r2, r0
 800b054:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b058:	4b40      	ldr	r3, [pc, #256]	@ (800b15c <__multiply+0x13c>)
 800b05a:	4841      	ldr	r0, [pc, #260]	@ (800b160 <__multiply+0x140>)
 800b05c:	f000 ff00 	bl	800be60 <__assert_func>
 800b060:	f100 0414 	add.w	r4, r0, #20
 800b064:	4623      	mov	r3, r4
 800b066:	2200      	movs	r2, #0
 800b068:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b06c:	4573      	cmp	r3, lr
 800b06e:	d320      	bcc.n	800b0b2 <__multiply+0x92>
 800b070:	f107 0814 	add.w	r8, r7, #20
 800b074:	f109 0114 	add.w	r1, r9, #20
 800b078:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b07c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b080:	9302      	str	r3, [sp, #8]
 800b082:	1beb      	subs	r3, r5, r7
 800b084:	3b15      	subs	r3, #21
 800b086:	f023 0303 	bic.w	r3, r3, #3
 800b08a:	3304      	adds	r3, #4
 800b08c:	3715      	adds	r7, #21
 800b08e:	42bd      	cmp	r5, r7
 800b090:	bf38      	it	cc
 800b092:	2304      	movcc	r3, #4
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	9b02      	ldr	r3, [sp, #8]
 800b098:	9103      	str	r1, [sp, #12]
 800b09a:	428b      	cmp	r3, r1
 800b09c:	d80c      	bhi.n	800b0b8 <__multiply+0x98>
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	dd03      	ble.n	800b0aa <__multiply+0x8a>
 800b0a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d055      	beq.n	800b156 <__multiply+0x136>
 800b0aa:	6106      	str	r6, [r0, #16]
 800b0ac:	b005      	add	sp, #20
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	f843 2b04 	str.w	r2, [r3], #4
 800b0b6:	e7d9      	b.n	800b06c <__multiply+0x4c>
 800b0b8:	f8b1 a000 	ldrh.w	sl, [r1]
 800b0bc:	f1ba 0f00 	cmp.w	sl, #0
 800b0c0:	d01f      	beq.n	800b102 <__multiply+0xe2>
 800b0c2:	46c4      	mov	ip, r8
 800b0c4:	46a1      	mov	r9, r4
 800b0c6:	2700      	movs	r7, #0
 800b0c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b0cc:	f8d9 3000 	ldr.w	r3, [r9]
 800b0d0:	fa1f fb82 	uxth.w	fp, r2
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0da:	443b      	add	r3, r7
 800b0dc:	f8d9 7000 	ldr.w	r7, [r9]
 800b0e0:	0c12      	lsrs	r2, r2, #16
 800b0e2:	0c3f      	lsrs	r7, r7, #16
 800b0e4:	fb0a 7202 	mla	r2, sl, r2, r7
 800b0e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0f2:	4565      	cmp	r5, ip
 800b0f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b0f8:	f849 3b04 	str.w	r3, [r9], #4
 800b0fc:	d8e4      	bhi.n	800b0c8 <__multiply+0xa8>
 800b0fe:	9b01      	ldr	r3, [sp, #4]
 800b100:	50e7      	str	r7, [r4, r3]
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	3104      	adds	r1, #4
 800b106:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	d020      	beq.n	800b152 <__multiply+0x132>
 800b110:	4647      	mov	r7, r8
 800b112:	46a4      	mov	ip, r4
 800b114:	f04f 0a00 	mov.w	sl, #0
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	f8b7 b000 	ldrh.w	fp, [r7]
 800b11e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b122:	b29b      	uxth	r3, r3
 800b124:	fb09 220b 	mla	r2, r9, fp, r2
 800b128:	4452      	add	r2, sl
 800b12a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b12e:	f84c 3b04 	str.w	r3, [ip], #4
 800b132:	f857 3b04 	ldr.w	r3, [r7], #4
 800b136:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b13a:	f8bc 3000 	ldrh.w	r3, [ip]
 800b13e:	42bd      	cmp	r5, r7
 800b140:	fb09 330a 	mla	r3, r9, sl, r3
 800b144:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b14c:	d8e5      	bhi.n	800b11a <__multiply+0xfa>
 800b14e:	9a01      	ldr	r2, [sp, #4]
 800b150:	50a3      	str	r3, [r4, r2]
 800b152:	3404      	adds	r4, #4
 800b154:	e79f      	b.n	800b096 <__multiply+0x76>
 800b156:	3e01      	subs	r6, #1
 800b158:	e7a1      	b.n	800b09e <__multiply+0x7e>
 800b15a:	bf00      	nop
 800b15c:	0800c8dc 	.word	0x0800c8dc
 800b160:	0800c964 	.word	0x0800c964

0800b164 <__pow5mult>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4615      	mov	r5, r2
 800b16a:	f012 0203 	ands.w	r2, r2, #3
 800b16e:	4607      	mov	r7, r0
 800b170:	460e      	mov	r6, r1
 800b172:	d007      	beq.n	800b184 <__pow5mult+0x20>
 800b174:	4c25      	ldr	r4, [pc, #148]	@ (800b20c <__pow5mult+0xa8>)
 800b176:	3a01      	subs	r2, #1
 800b178:	2300      	movs	r3, #0
 800b17a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b17e:	f7ff fe5d 	bl	800ae3c <__multadd>
 800b182:	4606      	mov	r6, r0
 800b184:	10ad      	asrs	r5, r5, #2
 800b186:	d03d      	beq.n	800b204 <__pow5mult+0xa0>
 800b188:	69fc      	ldr	r4, [r7, #28]
 800b18a:	b97c      	cbnz	r4, 800b1ac <__pow5mult+0x48>
 800b18c:	2010      	movs	r0, #16
 800b18e:	f000 fe99 	bl	800bec4 <malloc>
 800b192:	4602      	mov	r2, r0
 800b194:	61f8      	str	r0, [r7, #28]
 800b196:	b928      	cbnz	r0, 800b1a4 <__pow5mult+0x40>
 800b198:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b19c:	4b1c      	ldr	r3, [pc, #112]	@ (800b210 <__pow5mult+0xac>)
 800b19e:	481d      	ldr	r0, [pc, #116]	@ (800b214 <__pow5mult+0xb0>)
 800b1a0:	f000 fe5e 	bl	800be60 <__assert_func>
 800b1a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1a8:	6004      	str	r4, [r0, #0]
 800b1aa:	60c4      	str	r4, [r0, #12]
 800b1ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b1b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1b4:	b94c      	cbnz	r4, 800b1ca <__pow5mult+0x66>
 800b1b6:	f240 2171 	movw	r1, #625	@ 0x271
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7ff ff1a 	bl	800aff4 <__i2b>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	f04f 0900 	mov.w	r9, #0
 800b1ce:	07eb      	lsls	r3, r5, #31
 800b1d0:	d50a      	bpl.n	800b1e8 <__pow5mult+0x84>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7ff ff22 	bl	800b020 <__multiply>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff fe09 	bl	800adf8 <_Bfree>
 800b1e6:	4646      	mov	r6, r8
 800b1e8:	106d      	asrs	r5, r5, #1
 800b1ea:	d00b      	beq.n	800b204 <__pow5mult+0xa0>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	b938      	cbnz	r0, 800b200 <__pow5mult+0x9c>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff ff13 	bl	800b020 <__multiply>
 800b1fa:	6020      	str	r0, [r4, #0]
 800b1fc:	f8c0 9000 	str.w	r9, [r0]
 800b200:	4604      	mov	r4, r0
 800b202:	e7e4      	b.n	800b1ce <__pow5mult+0x6a>
 800b204:	4630      	mov	r0, r6
 800b206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20a:	bf00      	nop
 800b20c:	0800ca80 	.word	0x0800ca80
 800b210:	0800c94d 	.word	0x0800c94d
 800b214:	0800c964 	.word	0x0800c964

0800b218 <__lshift>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	460c      	mov	r4, r1
 800b21e:	4607      	mov	r7, r0
 800b220:	4691      	mov	r9, r2
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	6849      	ldr	r1, [r1, #4]
 800b226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b230:	f108 0601 	add.w	r6, r8, #1
 800b234:	42b3      	cmp	r3, r6
 800b236:	db0b      	blt.n	800b250 <__lshift+0x38>
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff fd9d 	bl	800ad78 <_Balloc>
 800b23e:	4605      	mov	r5, r0
 800b240:	b948      	cbnz	r0, 800b256 <__lshift+0x3e>
 800b242:	4602      	mov	r2, r0
 800b244:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b248:	4b27      	ldr	r3, [pc, #156]	@ (800b2e8 <__lshift+0xd0>)
 800b24a:	4828      	ldr	r0, [pc, #160]	@ (800b2ec <__lshift+0xd4>)
 800b24c:	f000 fe08 	bl	800be60 <__assert_func>
 800b250:	3101      	adds	r1, #1
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	e7ee      	b.n	800b234 <__lshift+0x1c>
 800b256:	2300      	movs	r3, #0
 800b258:	f100 0114 	add.w	r1, r0, #20
 800b25c:	f100 0210 	add.w	r2, r0, #16
 800b260:	4618      	mov	r0, r3
 800b262:	4553      	cmp	r3, sl
 800b264:	db33      	blt.n	800b2ce <__lshift+0xb6>
 800b266:	6920      	ldr	r0, [r4, #16]
 800b268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b26c:	f104 0314 	add.w	r3, r4, #20
 800b270:	f019 091f 	ands.w	r9, r9, #31
 800b274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b27c:	d02b      	beq.n	800b2d6 <__lshift+0xbe>
 800b27e:	468a      	mov	sl, r1
 800b280:	2200      	movs	r2, #0
 800b282:	f1c9 0e20 	rsb	lr, r9, #32
 800b286:	6818      	ldr	r0, [r3, #0]
 800b288:	fa00 f009 	lsl.w	r0, r0, r9
 800b28c:	4310      	orrs	r0, r2
 800b28e:	f84a 0b04 	str.w	r0, [sl], #4
 800b292:	f853 2b04 	ldr.w	r2, [r3], #4
 800b296:	459c      	cmp	ip, r3
 800b298:	fa22 f20e 	lsr.w	r2, r2, lr
 800b29c:	d8f3      	bhi.n	800b286 <__lshift+0x6e>
 800b29e:	ebac 0304 	sub.w	r3, ip, r4
 800b2a2:	3b15      	subs	r3, #21
 800b2a4:	f023 0303 	bic.w	r3, r3, #3
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	f104 0015 	add.w	r0, r4, #21
 800b2ae:	4560      	cmp	r0, ip
 800b2b0:	bf88      	it	hi
 800b2b2:	2304      	movhi	r3, #4
 800b2b4:	50ca      	str	r2, [r1, r3]
 800b2b6:	b10a      	cbz	r2, 800b2bc <__lshift+0xa4>
 800b2b8:	f108 0602 	add.w	r6, r8, #2
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4638      	mov	r0, r7
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	612e      	str	r6, [r5, #16]
 800b2c4:	f7ff fd98 	bl	800adf8 <_Bfree>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	e7c5      	b.n	800b262 <__lshift+0x4a>
 800b2d6:	3904      	subs	r1, #4
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	459c      	cmp	ip, r3
 800b2de:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2e2:	d8f9      	bhi.n	800b2d8 <__lshift+0xc0>
 800b2e4:	e7ea      	b.n	800b2bc <__lshift+0xa4>
 800b2e6:	bf00      	nop
 800b2e8:	0800c8dc 	.word	0x0800c8dc
 800b2ec:	0800c964 	.word	0x0800c964

0800b2f0 <__mcmp>:
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	690a      	ldr	r2, [r1, #16]
 800b2f4:	6900      	ldr	r0, [r0, #16]
 800b2f6:	b530      	push	{r4, r5, lr}
 800b2f8:	1a80      	subs	r0, r0, r2
 800b2fa:	d10e      	bne.n	800b31a <__mcmp+0x2a>
 800b2fc:	3314      	adds	r3, #20
 800b2fe:	3114      	adds	r1, #20
 800b300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b30c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b310:	4295      	cmp	r5, r2
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	d205      	bcs.n	800b322 <__mcmp+0x32>
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fb      	b.n	800b31a <__mcmp+0x2a>
 800b322:	2001      	movs	r0, #1
 800b324:	e7f9      	b.n	800b31a <__mcmp+0x2a>
	...

0800b328 <__mdiff>:
 800b328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4689      	mov	r9, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	4611      	mov	r1, r2
 800b332:	4648      	mov	r0, r9
 800b334:	4614      	mov	r4, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d112      	bne.n	800b364 <__mdiff+0x3c>
 800b33e:	4629      	mov	r1, r5
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fd19 	bl	800ad78 <_Balloc>
 800b346:	4602      	mov	r2, r0
 800b348:	b928      	cbnz	r0, 800b356 <__mdiff+0x2e>
 800b34a:	f240 2137 	movw	r1, #567	@ 0x237
 800b34e:	4b3e      	ldr	r3, [pc, #248]	@ (800b448 <__mdiff+0x120>)
 800b350:	483e      	ldr	r0, [pc, #248]	@ (800b44c <__mdiff+0x124>)
 800b352:	f000 fd85 	bl	800be60 <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b35c:	4610      	mov	r0, r2
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b364:	bfbc      	itt	lt
 800b366:	464b      	movlt	r3, r9
 800b368:	46a1      	movlt	r9, r4
 800b36a:	4630      	mov	r0, r6
 800b36c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b370:	bfba      	itte	lt
 800b372:	461c      	movlt	r4, r3
 800b374:	2501      	movlt	r5, #1
 800b376:	2500      	movge	r5, #0
 800b378:	f7ff fcfe 	bl	800ad78 <_Balloc>
 800b37c:	4602      	mov	r2, r0
 800b37e:	b918      	cbnz	r0, 800b388 <__mdiff+0x60>
 800b380:	f240 2145 	movw	r1, #581	@ 0x245
 800b384:	4b30      	ldr	r3, [pc, #192]	@ (800b448 <__mdiff+0x120>)
 800b386:	e7e3      	b.n	800b350 <__mdiff+0x28>
 800b388:	f100 0b14 	add.w	fp, r0, #20
 800b38c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b390:	f109 0310 	add.w	r3, r9, #16
 800b394:	60c5      	str	r5, [r0, #12]
 800b396:	f04f 0c00 	mov.w	ip, #0
 800b39a:	f109 0514 	add.w	r5, r9, #20
 800b39e:	46d9      	mov	r9, fp
 800b3a0:	6926      	ldr	r6, [r4, #16]
 800b3a2:	f104 0e14 	add.w	lr, r4, #20
 800b3a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b3b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b3ba:	b281      	uxth	r1, r0
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	fa1f f38a 	uxth.w	r3, sl
 800b3c2:	1a5b      	subs	r3, r3, r1
 800b3c4:	0c00      	lsrs	r0, r0, #16
 800b3c6:	4463      	add	r3, ip
 800b3c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3d6:	4576      	cmp	r6, lr
 800b3d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3dc:	f849 3b04 	str.w	r3, [r9], #4
 800b3e0:	d8e6      	bhi.n	800b3b0 <__mdiff+0x88>
 800b3e2:	1b33      	subs	r3, r6, r4
 800b3e4:	3b15      	subs	r3, #21
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	3415      	adds	r4, #21
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	42a6      	cmp	r6, r4
 800b3f0:	bf38      	it	cc
 800b3f2:	2304      	movcc	r3, #4
 800b3f4:	441d      	add	r5, r3
 800b3f6:	445b      	add	r3, fp
 800b3f8:	461e      	mov	r6, r3
 800b3fa:	462c      	mov	r4, r5
 800b3fc:	4544      	cmp	r4, r8
 800b3fe:	d30e      	bcc.n	800b41e <__mdiff+0xf6>
 800b400:	f108 0103 	add.w	r1, r8, #3
 800b404:	1b49      	subs	r1, r1, r5
 800b406:	f021 0103 	bic.w	r1, r1, #3
 800b40a:	3d03      	subs	r5, #3
 800b40c:	45a8      	cmp	r8, r5
 800b40e:	bf38      	it	cc
 800b410:	2100      	movcc	r1, #0
 800b412:	440b      	add	r3, r1
 800b414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b418:	b199      	cbz	r1, 800b442 <__mdiff+0x11a>
 800b41a:	6117      	str	r7, [r2, #16]
 800b41c:	e79e      	b.n	800b35c <__mdiff+0x34>
 800b41e:	46e6      	mov	lr, ip
 800b420:	f854 1b04 	ldr.w	r1, [r4], #4
 800b424:	fa1f fc81 	uxth.w	ip, r1
 800b428:	44f4      	add	ip, lr
 800b42a:	0c08      	lsrs	r0, r1, #16
 800b42c:	4471      	add	r1, lr
 800b42e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b432:	b289      	uxth	r1, r1
 800b434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b438:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b43c:	f846 1b04 	str.w	r1, [r6], #4
 800b440:	e7dc      	b.n	800b3fc <__mdiff+0xd4>
 800b442:	3f01      	subs	r7, #1
 800b444:	e7e6      	b.n	800b414 <__mdiff+0xec>
 800b446:	bf00      	nop
 800b448:	0800c8dc 	.word	0x0800c8dc
 800b44c:	0800c964 	.word	0x0800c964

0800b450 <__ulp>:
 800b450:	4b0e      	ldr	r3, [pc, #56]	@ (800b48c <__ulp+0x3c>)
 800b452:	400b      	ands	r3, r1
 800b454:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dc08      	bgt.n	800b46e <__ulp+0x1e>
 800b45c:	425b      	negs	r3, r3
 800b45e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b462:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b466:	da04      	bge.n	800b472 <__ulp+0x22>
 800b468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b46c:	4113      	asrs	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	e008      	b.n	800b484 <__ulp+0x34>
 800b472:	f1a2 0314 	sub.w	r3, r2, #20
 800b476:	2b1e      	cmp	r3, #30
 800b478:	bfd6      	itet	le
 800b47a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b47e:	2201      	movgt	r2, #1
 800b480:	40da      	lsrle	r2, r3
 800b482:	2300      	movs	r3, #0
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	7ff00000 	.word	0x7ff00000

0800b490 <__b2d>:
 800b490:	6902      	ldr	r2, [r0, #16]
 800b492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b494:	f100 0614 	add.w	r6, r0, #20
 800b498:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b49c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b4a0:	4f1e      	ldr	r7, [pc, #120]	@ (800b51c <__b2d+0x8c>)
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fd5a 	bl	800af5c <__hi0bits>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f1c0 0020 	rsb	r0, r0, #32
 800b4ae:	2b0a      	cmp	r3, #10
 800b4b0:	f1a2 0504 	sub.w	r5, r2, #4
 800b4b4:	6008      	str	r0, [r1, #0]
 800b4b6:	dc12      	bgt.n	800b4de <__b2d+0x4e>
 800b4b8:	42ae      	cmp	r6, r5
 800b4ba:	bf2c      	ite	cs
 800b4bc:	2200      	movcs	r2, #0
 800b4be:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b4c2:	f1c3 0c0b 	rsb	ip, r3, #11
 800b4c6:	3315      	adds	r3, #21
 800b4c8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b4cc:	fa04 f303 	lsl.w	r3, r4, r3
 800b4d0:	fa22 f20c 	lsr.w	r2, r2, ip
 800b4d4:	ea4e 0107 	orr.w	r1, lr, r7
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	42ae      	cmp	r6, r5
 800b4e0:	bf36      	itet	cc
 800b4e2:	f1a2 0508 	subcc.w	r5, r2, #8
 800b4e6:	2200      	movcs	r2, #0
 800b4e8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b4ec:	3b0b      	subs	r3, #11
 800b4ee:	d012      	beq.n	800b516 <__b2d+0x86>
 800b4f0:	f1c3 0720 	rsb	r7, r3, #32
 800b4f4:	fa22 f107 	lsr.w	r1, r2, r7
 800b4f8:	409c      	lsls	r4, r3
 800b4fa:	430c      	orrs	r4, r1
 800b4fc:	42b5      	cmp	r5, r6
 800b4fe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b502:	bf94      	ite	ls
 800b504:	2400      	movls	r4, #0
 800b506:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b50a:	409a      	lsls	r2, r3
 800b50c:	40fc      	lsrs	r4, r7
 800b50e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b512:	4322      	orrs	r2, r4
 800b514:	e7e1      	b.n	800b4da <__b2d+0x4a>
 800b516:	ea44 0107 	orr.w	r1, r4, r7
 800b51a:	e7de      	b.n	800b4da <__b2d+0x4a>
 800b51c:	3ff00000 	.word	0x3ff00000

0800b520 <__d2b>:
 800b520:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b524:	2101      	movs	r1, #1
 800b526:	4690      	mov	r8, r2
 800b528:	4699      	mov	r9, r3
 800b52a:	9e08      	ldr	r6, [sp, #32]
 800b52c:	f7ff fc24 	bl	800ad78 <_Balloc>
 800b530:	4604      	mov	r4, r0
 800b532:	b930      	cbnz	r0, 800b542 <__d2b+0x22>
 800b534:	4602      	mov	r2, r0
 800b536:	f240 310f 	movw	r1, #783	@ 0x30f
 800b53a:	4b23      	ldr	r3, [pc, #140]	@ (800b5c8 <__d2b+0xa8>)
 800b53c:	4823      	ldr	r0, [pc, #140]	@ (800b5cc <__d2b+0xac>)
 800b53e:	f000 fc8f 	bl	800be60 <__assert_func>
 800b542:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54a:	b10d      	cbz	r5, 800b550 <__d2b+0x30>
 800b54c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	f1b8 0300 	subs.w	r3, r8, #0
 800b556:	d024      	beq.n	800b5a2 <__d2b+0x82>
 800b558:	4668      	mov	r0, sp
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	f7ff fd1d 	bl	800af9a <__lo0bits>
 800b560:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b564:	b1d8      	cbz	r0, 800b59e <__d2b+0x7e>
 800b566:	f1c0 0320 	rsb	r3, r0, #32
 800b56a:	fa02 f303 	lsl.w	r3, r2, r3
 800b56e:	430b      	orrs	r3, r1
 800b570:	40c2      	lsrs	r2, r0
 800b572:	6163      	str	r3, [r4, #20]
 800b574:	9201      	str	r2, [sp, #4]
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bf0c      	ite	eq
 800b57c:	2201      	moveq	r2, #1
 800b57e:	2202      	movne	r2, #2
 800b580:	61a3      	str	r3, [r4, #24]
 800b582:	6122      	str	r2, [r4, #16]
 800b584:	b1ad      	cbz	r5, 800b5b2 <__d2b+0x92>
 800b586:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b58a:	4405      	add	r5, r0
 800b58c:	6035      	str	r5, [r6, #0]
 800b58e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b594:	6018      	str	r0, [r3, #0]
 800b596:	4620      	mov	r0, r4
 800b598:	b002      	add	sp, #8
 800b59a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b59e:	6161      	str	r1, [r4, #20]
 800b5a0:	e7e9      	b.n	800b576 <__d2b+0x56>
 800b5a2:	a801      	add	r0, sp, #4
 800b5a4:	f7ff fcf9 	bl	800af9a <__lo0bits>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	6163      	str	r3, [r4, #20]
 800b5ae:	3020      	adds	r0, #32
 800b5b0:	e7e7      	b.n	800b582 <__d2b+0x62>
 800b5b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5ba:	6030      	str	r0, [r6, #0]
 800b5bc:	6918      	ldr	r0, [r3, #16]
 800b5be:	f7ff fccd 	bl	800af5c <__hi0bits>
 800b5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5c6:	e7e4      	b.n	800b592 <__d2b+0x72>
 800b5c8:	0800c8dc 	.word	0x0800c8dc
 800b5cc:	0800c964 	.word	0x0800c964

0800b5d0 <__ratio>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	b085      	sub	sp, #20
 800b5d6:	e9cd 1000 	strd	r1, r0, [sp]
 800b5da:	a902      	add	r1, sp, #8
 800b5dc:	f7ff ff58 	bl	800b490 <__b2d>
 800b5e0:	468b      	mov	fp, r1
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	9800      	ldr	r0, [sp, #0]
 800b5e8:	a903      	add	r1, sp, #12
 800b5ea:	f7ff ff51 	bl	800b490 <__b2d>
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	4689      	mov	r9, r1
 800b5f4:	6919      	ldr	r1, [r3, #16]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	1ac9      	subs	r1, r1, r3
 800b600:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b604:	1a9b      	subs	r3, r3, r2
 800b606:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfcd      	iteet	gt
 800b60e:	463a      	movgt	r2, r7
 800b610:	462a      	movle	r2, r5
 800b612:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b616:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b61a:	bfd8      	it	le
 800b61c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b620:	464b      	mov	r3, r9
 800b622:	4622      	mov	r2, r4
 800b624:	4659      	mov	r1, fp
 800b626:	f7f5 f881 	bl	800072c <__aeabi_ddiv>
 800b62a:	b005      	add	sp, #20
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b630 <__copybits>:
 800b630:	3901      	subs	r1, #1
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	1149      	asrs	r1, r1, #5
 800b636:	6914      	ldr	r4, [r2, #16]
 800b638:	3101      	adds	r1, #1
 800b63a:	f102 0314 	add.w	r3, r2, #20
 800b63e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b646:	1f05      	subs	r5, r0, #4
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d30c      	bcc.n	800b666 <__copybits+0x36>
 800b64c:	1aa3      	subs	r3, r4, r2
 800b64e:	3b11      	subs	r3, #17
 800b650:	f023 0303 	bic.w	r3, r3, #3
 800b654:	3211      	adds	r2, #17
 800b656:	42a2      	cmp	r2, r4
 800b658:	bf88      	it	hi
 800b65a:	2300      	movhi	r3, #0
 800b65c:	4418      	add	r0, r3
 800b65e:	2300      	movs	r3, #0
 800b660:	4288      	cmp	r0, r1
 800b662:	d305      	bcc.n	800b670 <__copybits+0x40>
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	f853 6b04 	ldr.w	r6, [r3], #4
 800b66a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b66e:	e7eb      	b.n	800b648 <__copybits+0x18>
 800b670:	f840 3b04 	str.w	r3, [r0], #4
 800b674:	e7f4      	b.n	800b660 <__copybits+0x30>

0800b676 <__any_on>:
 800b676:	f100 0214 	add.w	r2, r0, #20
 800b67a:	6900      	ldr	r0, [r0, #16]
 800b67c:	114b      	asrs	r3, r1, #5
 800b67e:	4298      	cmp	r0, r3
 800b680:	b510      	push	{r4, lr}
 800b682:	db11      	blt.n	800b6a8 <__any_on+0x32>
 800b684:	dd0a      	ble.n	800b69c <__any_on+0x26>
 800b686:	f011 011f 	ands.w	r1, r1, #31
 800b68a:	d007      	beq.n	800b69c <__any_on+0x26>
 800b68c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b690:	fa24 f001 	lsr.w	r0, r4, r1
 800b694:	fa00 f101 	lsl.w	r1, r0, r1
 800b698:	428c      	cmp	r4, r1
 800b69a:	d10b      	bne.n	800b6b4 <__any_on+0x3e>
 800b69c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d803      	bhi.n	800b6ac <__any_on+0x36>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd10      	pop	{r4, pc}
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	e7f7      	b.n	800b69c <__any_on+0x26>
 800b6ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d0f5      	beq.n	800b6a0 <__any_on+0x2a>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	e7f6      	b.n	800b6a6 <__any_on+0x30>

0800b6b8 <__ascii_wctomb>:
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4608      	mov	r0, r1
 800b6bc:	b141      	cbz	r1, 800b6d0 <__ascii_wctomb+0x18>
 800b6be:	2aff      	cmp	r2, #255	@ 0xff
 800b6c0:	d904      	bls.n	800b6cc <__ascii_wctomb+0x14>
 800b6c2:	228a      	movs	r2, #138	@ 0x8a
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	4770      	bx	lr
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	700a      	strb	r2, [r1, #0]
 800b6d0:	4770      	bx	lr

0800b6d2 <__ssputs_r>:
 800b6d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d6:	461f      	mov	r7, r3
 800b6d8:	688e      	ldr	r6, [r1, #8]
 800b6da:	4682      	mov	sl, r0
 800b6dc:	42be      	cmp	r6, r7
 800b6de:	460c      	mov	r4, r1
 800b6e0:	4690      	mov	r8, r2
 800b6e2:	680b      	ldr	r3, [r1, #0]
 800b6e4:	d82d      	bhi.n	800b742 <__ssputs_r+0x70>
 800b6e6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6ea:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6ee:	d026      	beq.n	800b73e <__ssputs_r+0x6c>
 800b6f0:	6965      	ldr	r5, [r4, #20]
 800b6f2:	6909      	ldr	r1, [r1, #16]
 800b6f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6f8:	eba3 0901 	sub.w	r9, r3, r1
 800b6fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b700:	1c7b      	adds	r3, r7, #1
 800b702:	444b      	add	r3, r9
 800b704:	106d      	asrs	r5, r5, #1
 800b706:	429d      	cmp	r5, r3
 800b708:	bf38      	it	cc
 800b70a:	461d      	movcc	r5, r3
 800b70c:	0553      	lsls	r3, r2, #21
 800b70e:	d527      	bpl.n	800b760 <__ssputs_r+0x8e>
 800b710:	4629      	mov	r1, r5
 800b712:	f7ff fa93 	bl	800ac3c <_malloc_r>
 800b716:	4606      	mov	r6, r0
 800b718:	b360      	cbz	r0, 800b774 <__ssputs_r+0xa2>
 800b71a:	464a      	mov	r2, r9
 800b71c:	6921      	ldr	r1, [r4, #16]
 800b71e:	f7fe fed4 	bl	800a4ca <memcpy>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	6126      	str	r6, [r4, #16]
 800b730:	444e      	add	r6, r9
 800b732:	6026      	str	r6, [r4, #0]
 800b734:	463e      	mov	r6, r7
 800b736:	6165      	str	r5, [r4, #20]
 800b738:	eba5 0509 	sub.w	r5, r5, r9
 800b73c:	60a5      	str	r5, [r4, #8]
 800b73e:	42be      	cmp	r6, r7
 800b740:	d900      	bls.n	800b744 <__ssputs_r+0x72>
 800b742:	463e      	mov	r6, r7
 800b744:	4632      	mov	r2, r6
 800b746:	4641      	mov	r1, r8
 800b748:	6820      	ldr	r0, [r4, #0]
 800b74a:	f000 fb51 	bl	800bdf0 <memmove>
 800b74e:	2000      	movs	r0, #0
 800b750:	68a3      	ldr	r3, [r4, #8]
 800b752:	1b9b      	subs	r3, r3, r6
 800b754:	60a3      	str	r3, [r4, #8]
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	4433      	add	r3, r6
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b760:	462a      	mov	r2, r5
 800b762:	f000 fbb7 	bl	800bed4 <_realloc_r>
 800b766:	4606      	mov	r6, r0
 800b768:	2800      	cmp	r0, #0
 800b76a:	d1e0      	bne.n	800b72e <__ssputs_r+0x5c>
 800b76c:	4650      	mov	r0, sl
 800b76e:	6921      	ldr	r1, [r4, #16]
 800b770:	f7fe fec0 	bl	800a4f4 <_free_r>
 800b774:	230c      	movs	r3, #12
 800b776:	f8ca 3000 	str.w	r3, [sl]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b784:	81a3      	strh	r3, [r4, #12]
 800b786:	e7e9      	b.n	800b75c <__ssputs_r+0x8a>

0800b788 <_svfiprintf_r>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	4698      	mov	r8, r3
 800b78e:	898b      	ldrh	r3, [r1, #12]
 800b790:	4607      	mov	r7, r0
 800b792:	061b      	lsls	r3, r3, #24
 800b794:	460d      	mov	r5, r1
 800b796:	4614      	mov	r4, r2
 800b798:	b09d      	sub	sp, #116	@ 0x74
 800b79a:	d510      	bpl.n	800b7be <_svfiprintf_r+0x36>
 800b79c:	690b      	ldr	r3, [r1, #16]
 800b79e:	b973      	cbnz	r3, 800b7be <_svfiprintf_r+0x36>
 800b7a0:	2140      	movs	r1, #64	@ 0x40
 800b7a2:	f7ff fa4b 	bl	800ac3c <_malloc_r>
 800b7a6:	6028      	str	r0, [r5, #0]
 800b7a8:	6128      	str	r0, [r5, #16]
 800b7aa:	b930      	cbnz	r0, 800b7ba <_svfiprintf_r+0x32>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	b01d      	add	sp, #116	@ 0x74
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	2340      	movs	r3, #64	@ 0x40
 800b7bc:	616b      	str	r3, [r5, #20]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7c2:	2320      	movs	r3, #32
 800b7c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7c8:	2330      	movs	r3, #48	@ 0x30
 800b7ca:	f04f 0901 	mov.w	r9, #1
 800b7ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b96c <_svfiprintf_r+0x1e4>
 800b7d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7da:	4623      	mov	r3, r4
 800b7dc:	469a      	mov	sl, r3
 800b7de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7e2:	b10a      	cbz	r2, 800b7e8 <_svfiprintf_r+0x60>
 800b7e4:	2a25      	cmp	r2, #37	@ 0x25
 800b7e6:	d1f9      	bne.n	800b7dc <_svfiprintf_r+0x54>
 800b7e8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ec:	d00b      	beq.n	800b806 <_svfiprintf_r+0x7e>
 800b7ee:	465b      	mov	r3, fp
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f7ff ff6c 	bl	800b6d2 <__ssputs_r>
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	f000 80a7 	beq.w	800b94e <_svfiprintf_r+0x1c6>
 800b800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b802:	445a      	add	r2, fp
 800b804:	9209      	str	r2, [sp, #36]	@ 0x24
 800b806:	f89a 3000 	ldrb.w	r3, [sl]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 809f 	beq.w	800b94e <_svfiprintf_r+0x1c6>
 800b810:	2300      	movs	r3, #0
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b81a:	f10a 0a01 	add.w	sl, sl, #1
 800b81e:	9304      	str	r3, [sp, #16]
 800b820:	9307      	str	r3, [sp, #28]
 800b822:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b826:	931a      	str	r3, [sp, #104]	@ 0x68
 800b828:	4654      	mov	r4, sl
 800b82a:	2205      	movs	r2, #5
 800b82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b830:	484e      	ldr	r0, [pc, #312]	@ (800b96c <_svfiprintf_r+0x1e4>)
 800b832:	f000 fb07 	bl	800be44 <memchr>
 800b836:	9a04      	ldr	r2, [sp, #16]
 800b838:	b9d8      	cbnz	r0, 800b872 <_svfiprintf_r+0xea>
 800b83a:	06d0      	lsls	r0, r2, #27
 800b83c:	bf44      	itt	mi
 800b83e:	2320      	movmi	r3, #32
 800b840:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b844:	0711      	lsls	r1, r2, #28
 800b846:	bf44      	itt	mi
 800b848:	232b      	movmi	r3, #43	@ 0x2b
 800b84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b84e:	f89a 3000 	ldrb.w	r3, [sl]
 800b852:	2b2a      	cmp	r3, #42	@ 0x2a
 800b854:	d015      	beq.n	800b882 <_svfiprintf_r+0xfa>
 800b856:	4654      	mov	r4, sl
 800b858:	2000      	movs	r0, #0
 800b85a:	f04f 0c0a 	mov.w	ip, #10
 800b85e:	9a07      	ldr	r2, [sp, #28]
 800b860:	4621      	mov	r1, r4
 800b862:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b866:	3b30      	subs	r3, #48	@ 0x30
 800b868:	2b09      	cmp	r3, #9
 800b86a:	d94b      	bls.n	800b904 <_svfiprintf_r+0x17c>
 800b86c:	b1b0      	cbz	r0, 800b89c <_svfiprintf_r+0x114>
 800b86e:	9207      	str	r2, [sp, #28]
 800b870:	e014      	b.n	800b89c <_svfiprintf_r+0x114>
 800b872:	eba0 0308 	sub.w	r3, r0, r8
 800b876:	fa09 f303 	lsl.w	r3, r9, r3
 800b87a:	4313      	orrs	r3, r2
 800b87c:	46a2      	mov	sl, r4
 800b87e:	9304      	str	r3, [sp, #16]
 800b880:	e7d2      	b.n	800b828 <_svfiprintf_r+0xa0>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	1d19      	adds	r1, r3, #4
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	9103      	str	r1, [sp, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bfbb      	ittet	lt
 800b88e:	425b      	neglt	r3, r3
 800b890:	f042 0202 	orrlt.w	r2, r2, #2
 800b894:	9307      	strge	r3, [sp, #28]
 800b896:	9307      	strlt	r3, [sp, #28]
 800b898:	bfb8      	it	lt
 800b89a:	9204      	strlt	r2, [sp, #16]
 800b89c:	7823      	ldrb	r3, [r4, #0]
 800b89e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8a0:	d10a      	bne.n	800b8b8 <_svfiprintf_r+0x130>
 800b8a2:	7863      	ldrb	r3, [r4, #1]
 800b8a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a6:	d132      	bne.n	800b90e <_svfiprintf_r+0x186>
 800b8a8:	9b03      	ldr	r3, [sp, #12]
 800b8aa:	3402      	adds	r4, #2
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	9203      	str	r2, [sp, #12]
 800b8b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8b6:	9305      	str	r3, [sp, #20]
 800b8b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b970 <_svfiprintf_r+0x1e8>
 800b8bc:	2203      	movs	r2, #3
 800b8be:	4650      	mov	r0, sl
 800b8c0:	7821      	ldrb	r1, [r4, #0]
 800b8c2:	f000 fabf 	bl	800be44 <memchr>
 800b8c6:	b138      	cbz	r0, 800b8d8 <_svfiprintf_r+0x150>
 800b8c8:	2240      	movs	r2, #64	@ 0x40
 800b8ca:	9b04      	ldr	r3, [sp, #16]
 800b8cc:	eba0 000a 	sub.w	r0, r0, sl
 800b8d0:	4082      	lsls	r2, r0
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	3401      	adds	r4, #1
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8dc:	2206      	movs	r2, #6
 800b8de:	4825      	ldr	r0, [pc, #148]	@ (800b974 <_svfiprintf_r+0x1ec>)
 800b8e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8e4:	f000 faae 	bl	800be44 <memchr>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d036      	beq.n	800b95a <_svfiprintf_r+0x1d2>
 800b8ec:	4b22      	ldr	r3, [pc, #136]	@ (800b978 <_svfiprintf_r+0x1f0>)
 800b8ee:	bb1b      	cbnz	r3, 800b938 <_svfiprintf_r+0x1b0>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	3307      	adds	r3, #7
 800b8f4:	f023 0307 	bic.w	r3, r3, #7
 800b8f8:	3308      	adds	r3, #8
 800b8fa:	9303      	str	r3, [sp, #12]
 800b8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8fe:	4433      	add	r3, r6
 800b900:	9309      	str	r3, [sp, #36]	@ 0x24
 800b902:	e76a      	b.n	800b7da <_svfiprintf_r+0x52>
 800b904:	460c      	mov	r4, r1
 800b906:	2001      	movs	r0, #1
 800b908:	fb0c 3202 	mla	r2, ip, r2, r3
 800b90c:	e7a8      	b.n	800b860 <_svfiprintf_r+0xd8>
 800b90e:	2300      	movs	r3, #0
 800b910:	f04f 0c0a 	mov.w	ip, #10
 800b914:	4619      	mov	r1, r3
 800b916:	3401      	adds	r4, #1
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	4620      	mov	r0, r4
 800b91c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b920:	3a30      	subs	r2, #48	@ 0x30
 800b922:	2a09      	cmp	r2, #9
 800b924:	d903      	bls.n	800b92e <_svfiprintf_r+0x1a6>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0c6      	beq.n	800b8b8 <_svfiprintf_r+0x130>
 800b92a:	9105      	str	r1, [sp, #20]
 800b92c:	e7c4      	b.n	800b8b8 <_svfiprintf_r+0x130>
 800b92e:	4604      	mov	r4, r0
 800b930:	2301      	movs	r3, #1
 800b932:	fb0c 2101 	mla	r1, ip, r1, r2
 800b936:	e7f0      	b.n	800b91a <_svfiprintf_r+0x192>
 800b938:	ab03      	add	r3, sp, #12
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	462a      	mov	r2, r5
 800b93e:	4638      	mov	r0, r7
 800b940:	4b0e      	ldr	r3, [pc, #56]	@ (800b97c <_svfiprintf_r+0x1f4>)
 800b942:	a904      	add	r1, sp, #16
 800b944:	f3af 8000 	nop.w
 800b948:	1c42      	adds	r2, r0, #1
 800b94a:	4606      	mov	r6, r0
 800b94c:	d1d6      	bne.n	800b8fc <_svfiprintf_r+0x174>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	065b      	lsls	r3, r3, #25
 800b952:	f53f af2d 	bmi.w	800b7b0 <_svfiprintf_r+0x28>
 800b956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b958:	e72c      	b.n	800b7b4 <_svfiprintf_r+0x2c>
 800b95a:	ab03      	add	r3, sp, #12
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	462a      	mov	r2, r5
 800b960:	4638      	mov	r0, r7
 800b962:	4b06      	ldr	r3, [pc, #24]	@ (800b97c <_svfiprintf_r+0x1f4>)
 800b964:	a904      	add	r1, sp, #16
 800b966:	f000 f87d 	bl	800ba64 <_printf_i>
 800b96a:	e7ed      	b.n	800b948 <_svfiprintf_r+0x1c0>
 800b96c:	0800c9bd 	.word	0x0800c9bd
 800b970:	0800c9c3 	.word	0x0800c9c3
 800b974:	0800c9c7 	.word	0x0800c9c7
 800b978:	00000000 	.word	0x00000000
 800b97c:	0800b6d3 	.word	0x0800b6d3

0800b980 <_printf_common>:
 800b980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b984:	4616      	mov	r6, r2
 800b986:	4698      	mov	r8, r3
 800b988:	688a      	ldr	r2, [r1, #8]
 800b98a:	690b      	ldr	r3, [r1, #16]
 800b98c:	4607      	mov	r7, r0
 800b98e:	4293      	cmp	r3, r2
 800b990:	bfb8      	it	lt
 800b992:	4613      	movlt	r3, r2
 800b994:	6033      	str	r3, [r6, #0]
 800b996:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b99a:	460c      	mov	r4, r1
 800b99c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9a0:	b10a      	cbz	r2, 800b9a6 <_printf_common+0x26>
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	6033      	str	r3, [r6, #0]
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	0699      	lsls	r1, r3, #26
 800b9aa:	bf42      	ittt	mi
 800b9ac:	6833      	ldrmi	r3, [r6, #0]
 800b9ae:	3302      	addmi	r3, #2
 800b9b0:	6033      	strmi	r3, [r6, #0]
 800b9b2:	6825      	ldr	r5, [r4, #0]
 800b9b4:	f015 0506 	ands.w	r5, r5, #6
 800b9b8:	d106      	bne.n	800b9c8 <_printf_common+0x48>
 800b9ba:	f104 0a19 	add.w	sl, r4, #25
 800b9be:	68e3      	ldr	r3, [r4, #12]
 800b9c0:	6832      	ldr	r2, [r6, #0]
 800b9c2:	1a9b      	subs	r3, r3, r2
 800b9c4:	42ab      	cmp	r3, r5
 800b9c6:	dc2b      	bgt.n	800ba20 <_printf_common+0xa0>
 800b9c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9cc:	6822      	ldr	r2, [r4, #0]
 800b9ce:	3b00      	subs	r3, #0
 800b9d0:	bf18      	it	ne
 800b9d2:	2301      	movne	r3, #1
 800b9d4:	0692      	lsls	r2, r2, #26
 800b9d6:	d430      	bmi.n	800ba3a <_printf_common+0xba>
 800b9d8:	4641      	mov	r1, r8
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9e0:	47c8      	blx	r9
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d023      	beq.n	800ba2e <_printf_common+0xae>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	6922      	ldr	r2, [r4, #16]
 800b9ea:	f003 0306 	and.w	r3, r3, #6
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	bf14      	ite	ne
 800b9f2:	2500      	movne	r5, #0
 800b9f4:	6833      	ldreq	r3, [r6, #0]
 800b9f6:	f04f 0600 	mov.w	r6, #0
 800b9fa:	bf08      	it	eq
 800b9fc:	68e5      	ldreq	r5, [r4, #12]
 800b9fe:	f104 041a 	add.w	r4, r4, #26
 800ba02:	bf08      	it	eq
 800ba04:	1aed      	subeq	r5, r5, r3
 800ba06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba0a:	bf08      	it	eq
 800ba0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba10:	4293      	cmp	r3, r2
 800ba12:	bfc4      	itt	gt
 800ba14:	1a9b      	subgt	r3, r3, r2
 800ba16:	18ed      	addgt	r5, r5, r3
 800ba18:	42b5      	cmp	r5, r6
 800ba1a:	d11a      	bne.n	800ba52 <_printf_common+0xd2>
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e008      	b.n	800ba32 <_printf_common+0xb2>
 800ba20:	2301      	movs	r3, #1
 800ba22:	4652      	mov	r2, sl
 800ba24:	4641      	mov	r1, r8
 800ba26:	4638      	mov	r0, r7
 800ba28:	47c8      	blx	r9
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	d103      	bne.n	800ba36 <_printf_common+0xb6>
 800ba2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba36:	3501      	adds	r5, #1
 800ba38:	e7c1      	b.n	800b9be <_printf_common+0x3e>
 800ba3a:	2030      	movs	r0, #48	@ 0x30
 800ba3c:	18e1      	adds	r1, r4, r3
 800ba3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba48:	4422      	add	r2, r4
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba50:	e7c2      	b.n	800b9d8 <_printf_common+0x58>
 800ba52:	2301      	movs	r3, #1
 800ba54:	4622      	mov	r2, r4
 800ba56:	4641      	mov	r1, r8
 800ba58:	4638      	mov	r0, r7
 800ba5a:	47c8      	blx	r9
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0e6      	beq.n	800ba2e <_printf_common+0xae>
 800ba60:	3601      	adds	r6, #1
 800ba62:	e7d9      	b.n	800ba18 <_printf_common+0x98>

0800ba64 <_printf_i>:
 800ba64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba68:	7e0f      	ldrb	r7, [r1, #24]
 800ba6a:	4691      	mov	r9, r2
 800ba6c:	2f78      	cmp	r7, #120	@ 0x78
 800ba6e:	4680      	mov	r8, r0
 800ba70:	460c      	mov	r4, r1
 800ba72:	469a      	mov	sl, r3
 800ba74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba7a:	d807      	bhi.n	800ba8c <_printf_i+0x28>
 800ba7c:	2f62      	cmp	r7, #98	@ 0x62
 800ba7e:	d80a      	bhi.n	800ba96 <_printf_i+0x32>
 800ba80:	2f00      	cmp	r7, #0
 800ba82:	f000 80d1 	beq.w	800bc28 <_printf_i+0x1c4>
 800ba86:	2f58      	cmp	r7, #88	@ 0x58
 800ba88:	f000 80b8 	beq.w	800bbfc <_printf_i+0x198>
 800ba8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba94:	e03a      	b.n	800bb0c <_printf_i+0xa8>
 800ba96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba9a:	2b15      	cmp	r3, #21
 800ba9c:	d8f6      	bhi.n	800ba8c <_printf_i+0x28>
 800ba9e:	a101      	add	r1, pc, #4	@ (adr r1, 800baa4 <_printf_i+0x40>)
 800baa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baa4:	0800bafd 	.word	0x0800bafd
 800baa8:	0800bb11 	.word	0x0800bb11
 800baac:	0800ba8d 	.word	0x0800ba8d
 800bab0:	0800ba8d 	.word	0x0800ba8d
 800bab4:	0800ba8d 	.word	0x0800ba8d
 800bab8:	0800ba8d 	.word	0x0800ba8d
 800babc:	0800bb11 	.word	0x0800bb11
 800bac0:	0800ba8d 	.word	0x0800ba8d
 800bac4:	0800ba8d 	.word	0x0800ba8d
 800bac8:	0800ba8d 	.word	0x0800ba8d
 800bacc:	0800ba8d 	.word	0x0800ba8d
 800bad0:	0800bc0f 	.word	0x0800bc0f
 800bad4:	0800bb3b 	.word	0x0800bb3b
 800bad8:	0800bbc9 	.word	0x0800bbc9
 800badc:	0800ba8d 	.word	0x0800ba8d
 800bae0:	0800ba8d 	.word	0x0800ba8d
 800bae4:	0800bc31 	.word	0x0800bc31
 800bae8:	0800ba8d 	.word	0x0800ba8d
 800baec:	0800bb3b 	.word	0x0800bb3b
 800baf0:	0800ba8d 	.word	0x0800ba8d
 800baf4:	0800ba8d 	.word	0x0800ba8d
 800baf8:	0800bbd1 	.word	0x0800bbd1
 800bafc:	6833      	ldr	r3, [r6, #0]
 800bafe:	1d1a      	adds	r2, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6032      	str	r2, [r6, #0]
 800bb04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e09c      	b.n	800bc4a <_printf_i+0x1e6>
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	6820      	ldr	r0, [r4, #0]
 800bb14:	1d19      	adds	r1, r3, #4
 800bb16:	6031      	str	r1, [r6, #0]
 800bb18:	0606      	lsls	r6, r0, #24
 800bb1a:	d501      	bpl.n	800bb20 <_printf_i+0xbc>
 800bb1c:	681d      	ldr	r5, [r3, #0]
 800bb1e:	e003      	b.n	800bb28 <_printf_i+0xc4>
 800bb20:	0645      	lsls	r5, r0, #25
 800bb22:	d5fb      	bpl.n	800bb1c <_printf_i+0xb8>
 800bb24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	da03      	bge.n	800bb34 <_printf_i+0xd0>
 800bb2c:	232d      	movs	r3, #45	@ 0x2d
 800bb2e:	426d      	negs	r5, r5
 800bb30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb34:	230a      	movs	r3, #10
 800bb36:	4858      	ldr	r0, [pc, #352]	@ (800bc98 <_printf_i+0x234>)
 800bb38:	e011      	b.n	800bb5e <_printf_i+0xfa>
 800bb3a:	6821      	ldr	r1, [r4, #0]
 800bb3c:	6833      	ldr	r3, [r6, #0]
 800bb3e:	0608      	lsls	r0, r1, #24
 800bb40:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb44:	d402      	bmi.n	800bb4c <_printf_i+0xe8>
 800bb46:	0649      	lsls	r1, r1, #25
 800bb48:	bf48      	it	mi
 800bb4a:	b2ad      	uxthmi	r5, r5
 800bb4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb4e:	6033      	str	r3, [r6, #0]
 800bb50:	bf14      	ite	ne
 800bb52:	230a      	movne	r3, #10
 800bb54:	2308      	moveq	r3, #8
 800bb56:	4850      	ldr	r0, [pc, #320]	@ (800bc98 <_printf_i+0x234>)
 800bb58:	2100      	movs	r1, #0
 800bb5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb5e:	6866      	ldr	r6, [r4, #4]
 800bb60:	2e00      	cmp	r6, #0
 800bb62:	60a6      	str	r6, [r4, #8]
 800bb64:	db05      	blt.n	800bb72 <_printf_i+0x10e>
 800bb66:	6821      	ldr	r1, [r4, #0]
 800bb68:	432e      	orrs	r6, r5
 800bb6a:	f021 0104 	bic.w	r1, r1, #4
 800bb6e:	6021      	str	r1, [r4, #0]
 800bb70:	d04b      	beq.n	800bc0a <_printf_i+0x1a6>
 800bb72:	4616      	mov	r6, r2
 800bb74:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb78:	fb03 5711 	mls	r7, r3, r1, r5
 800bb7c:	5dc7      	ldrb	r7, [r0, r7]
 800bb7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb82:	462f      	mov	r7, r5
 800bb84:	42bb      	cmp	r3, r7
 800bb86:	460d      	mov	r5, r1
 800bb88:	d9f4      	bls.n	800bb74 <_printf_i+0x110>
 800bb8a:	2b08      	cmp	r3, #8
 800bb8c:	d10b      	bne.n	800bba6 <_printf_i+0x142>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	07df      	lsls	r7, r3, #31
 800bb92:	d508      	bpl.n	800bba6 <_printf_i+0x142>
 800bb94:	6923      	ldr	r3, [r4, #16]
 800bb96:	6861      	ldr	r1, [r4, #4]
 800bb98:	4299      	cmp	r1, r3
 800bb9a:	bfde      	ittt	le
 800bb9c:	2330      	movle	r3, #48	@ 0x30
 800bb9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bba2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bba6:	1b92      	subs	r2, r2, r6
 800bba8:	6122      	str	r2, [r4, #16]
 800bbaa:	464b      	mov	r3, r9
 800bbac:	4621      	mov	r1, r4
 800bbae:	4640      	mov	r0, r8
 800bbb0:	f8cd a000 	str.w	sl, [sp]
 800bbb4:	aa03      	add	r2, sp, #12
 800bbb6:	f7ff fee3 	bl	800b980 <_printf_common>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d14a      	bne.n	800bc54 <_printf_i+0x1f0>
 800bbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc2:	b004      	add	sp, #16
 800bbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	f043 0320 	orr.w	r3, r3, #32
 800bbce:	6023      	str	r3, [r4, #0]
 800bbd0:	2778      	movs	r7, #120	@ 0x78
 800bbd2:	4832      	ldr	r0, [pc, #200]	@ (800bc9c <_printf_i+0x238>)
 800bbd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	6831      	ldr	r1, [r6, #0]
 800bbdc:	061f      	lsls	r7, r3, #24
 800bbde:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbe2:	d402      	bmi.n	800bbea <_printf_i+0x186>
 800bbe4:	065f      	lsls	r7, r3, #25
 800bbe6:	bf48      	it	mi
 800bbe8:	b2ad      	uxthmi	r5, r5
 800bbea:	6031      	str	r1, [r6, #0]
 800bbec:	07d9      	lsls	r1, r3, #31
 800bbee:	bf44      	itt	mi
 800bbf0:	f043 0320 	orrmi.w	r3, r3, #32
 800bbf4:	6023      	strmi	r3, [r4, #0]
 800bbf6:	b11d      	cbz	r5, 800bc00 <_printf_i+0x19c>
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	e7ad      	b.n	800bb58 <_printf_i+0xf4>
 800bbfc:	4826      	ldr	r0, [pc, #152]	@ (800bc98 <_printf_i+0x234>)
 800bbfe:	e7e9      	b.n	800bbd4 <_printf_i+0x170>
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	f023 0320 	bic.w	r3, r3, #32
 800bc06:	6023      	str	r3, [r4, #0]
 800bc08:	e7f6      	b.n	800bbf8 <_printf_i+0x194>
 800bc0a:	4616      	mov	r6, r2
 800bc0c:	e7bd      	b.n	800bb8a <_printf_i+0x126>
 800bc0e:	6833      	ldr	r3, [r6, #0]
 800bc10:	6825      	ldr	r5, [r4, #0]
 800bc12:	1d18      	adds	r0, r3, #4
 800bc14:	6961      	ldr	r1, [r4, #20]
 800bc16:	6030      	str	r0, [r6, #0]
 800bc18:	062e      	lsls	r6, r5, #24
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	d501      	bpl.n	800bc22 <_printf_i+0x1be>
 800bc1e:	6019      	str	r1, [r3, #0]
 800bc20:	e002      	b.n	800bc28 <_printf_i+0x1c4>
 800bc22:	0668      	lsls	r0, r5, #25
 800bc24:	d5fb      	bpl.n	800bc1e <_printf_i+0x1ba>
 800bc26:	8019      	strh	r1, [r3, #0]
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4616      	mov	r6, r2
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	e7bc      	b.n	800bbaa <_printf_i+0x146>
 800bc30:	6833      	ldr	r3, [r6, #0]
 800bc32:	2100      	movs	r1, #0
 800bc34:	1d1a      	adds	r2, r3, #4
 800bc36:	6032      	str	r2, [r6, #0]
 800bc38:	681e      	ldr	r6, [r3, #0]
 800bc3a:	6862      	ldr	r2, [r4, #4]
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f000 f901 	bl	800be44 <memchr>
 800bc42:	b108      	cbz	r0, 800bc48 <_printf_i+0x1e4>
 800bc44:	1b80      	subs	r0, r0, r6
 800bc46:	6060      	str	r0, [r4, #4]
 800bc48:	6863      	ldr	r3, [r4, #4]
 800bc4a:	6123      	str	r3, [r4, #16]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc52:	e7aa      	b.n	800bbaa <_printf_i+0x146>
 800bc54:	4632      	mov	r2, r6
 800bc56:	4649      	mov	r1, r9
 800bc58:	4640      	mov	r0, r8
 800bc5a:	6923      	ldr	r3, [r4, #16]
 800bc5c:	47d0      	blx	sl
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d0ad      	beq.n	800bbbe <_printf_i+0x15a>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	079b      	lsls	r3, r3, #30
 800bc66:	d413      	bmi.n	800bc90 <_printf_i+0x22c>
 800bc68:	68e0      	ldr	r0, [r4, #12]
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	4298      	cmp	r0, r3
 800bc6e:	bfb8      	it	lt
 800bc70:	4618      	movlt	r0, r3
 800bc72:	e7a6      	b.n	800bbc2 <_printf_i+0x15e>
 800bc74:	2301      	movs	r3, #1
 800bc76:	4632      	mov	r2, r6
 800bc78:	4649      	mov	r1, r9
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	47d0      	blx	sl
 800bc7e:	3001      	adds	r0, #1
 800bc80:	d09d      	beq.n	800bbbe <_printf_i+0x15a>
 800bc82:	3501      	adds	r5, #1
 800bc84:	68e3      	ldr	r3, [r4, #12]
 800bc86:	9903      	ldr	r1, [sp, #12]
 800bc88:	1a5b      	subs	r3, r3, r1
 800bc8a:	42ab      	cmp	r3, r5
 800bc8c:	dcf2      	bgt.n	800bc74 <_printf_i+0x210>
 800bc8e:	e7eb      	b.n	800bc68 <_printf_i+0x204>
 800bc90:	2500      	movs	r5, #0
 800bc92:	f104 0619 	add.w	r6, r4, #25
 800bc96:	e7f5      	b.n	800bc84 <_printf_i+0x220>
 800bc98:	0800c9ce 	.word	0x0800c9ce
 800bc9c:	0800c9df 	.word	0x0800c9df

0800bca0 <__sflush_r>:
 800bca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	0716      	lsls	r6, r2, #28
 800bca8:	4605      	mov	r5, r0
 800bcaa:	460c      	mov	r4, r1
 800bcac:	d454      	bmi.n	800bd58 <__sflush_r+0xb8>
 800bcae:	684b      	ldr	r3, [r1, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc02      	bgt.n	800bcba <__sflush_r+0x1a>
 800bcb4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dd48      	ble.n	800bd4c <__sflush_r+0xac>
 800bcba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcbc:	2e00      	cmp	r6, #0
 800bcbe:	d045      	beq.n	800bd4c <__sflush_r+0xac>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcc6:	682f      	ldr	r7, [r5, #0]
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	d030      	beq.n	800bd30 <__sflush_r+0x90>
 800bcce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	0759      	lsls	r1, r3, #29
 800bcd4:	d505      	bpl.n	800bce2 <__sflush_r+0x42>
 800bcd6:	6863      	ldr	r3, [r4, #4]
 800bcd8:	1ad2      	subs	r2, r2, r3
 800bcda:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcdc:	b10b      	cbz	r3, 800bce2 <__sflush_r+0x42>
 800bcde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	4628      	mov	r0, r5
 800bce6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bce8:	6a21      	ldr	r1, [r4, #32]
 800bcea:	47b0      	blx	r6
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	d106      	bne.n	800bd00 <__sflush_r+0x60>
 800bcf2:	6829      	ldr	r1, [r5, #0]
 800bcf4:	291d      	cmp	r1, #29
 800bcf6:	d82b      	bhi.n	800bd50 <__sflush_r+0xb0>
 800bcf8:	4a28      	ldr	r2, [pc, #160]	@ (800bd9c <__sflush_r+0xfc>)
 800bcfa:	40ca      	lsrs	r2, r1
 800bcfc:	07d6      	lsls	r6, r2, #31
 800bcfe:	d527      	bpl.n	800bd50 <__sflush_r+0xb0>
 800bd00:	2200      	movs	r2, #0
 800bd02:	6062      	str	r2, [r4, #4]
 800bd04:	6922      	ldr	r2, [r4, #16]
 800bd06:	04d9      	lsls	r1, r3, #19
 800bd08:	6022      	str	r2, [r4, #0]
 800bd0a:	d504      	bpl.n	800bd16 <__sflush_r+0x76>
 800bd0c:	1c42      	adds	r2, r0, #1
 800bd0e:	d101      	bne.n	800bd14 <__sflush_r+0x74>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b903      	cbnz	r3, 800bd16 <__sflush_r+0x76>
 800bd14:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd18:	602f      	str	r7, [r5, #0]
 800bd1a:	b1b9      	cbz	r1, 800bd4c <__sflush_r+0xac>
 800bd1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd20:	4299      	cmp	r1, r3
 800bd22:	d002      	beq.n	800bd2a <__sflush_r+0x8a>
 800bd24:	4628      	mov	r0, r5
 800bd26:	f7fe fbe5 	bl	800a4f4 <_free_r>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd2e:	e00d      	b.n	800bd4c <__sflush_r+0xac>
 800bd30:	2301      	movs	r3, #1
 800bd32:	4628      	mov	r0, r5
 800bd34:	47b0      	blx	r6
 800bd36:	4602      	mov	r2, r0
 800bd38:	1c50      	adds	r0, r2, #1
 800bd3a:	d1c9      	bne.n	800bcd0 <__sflush_r+0x30>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0c6      	beq.n	800bcd0 <__sflush_r+0x30>
 800bd42:	2b1d      	cmp	r3, #29
 800bd44:	d001      	beq.n	800bd4a <__sflush_r+0xaa>
 800bd46:	2b16      	cmp	r3, #22
 800bd48:	d11d      	bne.n	800bd86 <__sflush_r+0xe6>
 800bd4a:	602f      	str	r7, [r5, #0]
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	e021      	b.n	800bd94 <__sflush_r+0xf4>
 800bd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd54:	b21b      	sxth	r3, r3
 800bd56:	e01a      	b.n	800bd8e <__sflush_r+0xee>
 800bd58:	690f      	ldr	r7, [r1, #16]
 800bd5a:	2f00      	cmp	r7, #0
 800bd5c:	d0f6      	beq.n	800bd4c <__sflush_r+0xac>
 800bd5e:	0793      	lsls	r3, r2, #30
 800bd60:	bf18      	it	ne
 800bd62:	2300      	movne	r3, #0
 800bd64:	680e      	ldr	r6, [r1, #0]
 800bd66:	bf08      	it	eq
 800bd68:	694b      	ldreq	r3, [r1, #20]
 800bd6a:	1bf6      	subs	r6, r6, r7
 800bd6c:	600f      	str	r7, [r1, #0]
 800bd6e:	608b      	str	r3, [r1, #8]
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	ddeb      	ble.n	800bd4c <__sflush_r+0xac>
 800bd74:	4633      	mov	r3, r6
 800bd76:	463a      	mov	r2, r7
 800bd78:	4628      	mov	r0, r5
 800bd7a:	6a21      	ldr	r1, [r4, #32]
 800bd7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bd80:	47e0      	blx	ip
 800bd82:	2800      	cmp	r0, #0
 800bd84:	dc07      	bgt.n	800bd96 <__sflush_r+0xf6>
 800bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd92:	81a3      	strh	r3, [r4, #12]
 800bd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd96:	4407      	add	r7, r0
 800bd98:	1a36      	subs	r6, r6, r0
 800bd9a:	e7e9      	b.n	800bd70 <__sflush_r+0xd0>
 800bd9c:	20400001 	.word	0x20400001

0800bda0 <_fflush_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	690b      	ldr	r3, [r1, #16]
 800bda4:	4605      	mov	r5, r0
 800bda6:	460c      	mov	r4, r1
 800bda8:	b913      	cbnz	r3, 800bdb0 <_fflush_r+0x10>
 800bdaa:	2500      	movs	r5, #0
 800bdac:	4628      	mov	r0, r5
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	b118      	cbz	r0, 800bdba <_fflush_r+0x1a>
 800bdb2:	6a03      	ldr	r3, [r0, #32]
 800bdb4:	b90b      	cbnz	r3, 800bdba <_fflush_r+0x1a>
 800bdb6:	f7fe fa53 	bl	800a260 <__sinit>
 800bdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0f3      	beq.n	800bdaa <_fflush_r+0xa>
 800bdc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdc4:	07d0      	lsls	r0, r2, #31
 800bdc6:	d404      	bmi.n	800bdd2 <_fflush_r+0x32>
 800bdc8:	0599      	lsls	r1, r3, #22
 800bdca:	d402      	bmi.n	800bdd2 <_fflush_r+0x32>
 800bdcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdce:	f7fe fb7a 	bl	800a4c6 <__retarget_lock_acquire_recursive>
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f7ff ff63 	bl	800bca0 <__sflush_r>
 800bdda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bddc:	4605      	mov	r5, r0
 800bdde:	07da      	lsls	r2, r3, #31
 800bde0:	d4e4      	bmi.n	800bdac <_fflush_r+0xc>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	059b      	lsls	r3, r3, #22
 800bde6:	d4e1      	bmi.n	800bdac <_fflush_r+0xc>
 800bde8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdea:	f7fe fb6d 	bl	800a4c8 <__retarget_lock_release_recursive>
 800bdee:	e7dd      	b.n	800bdac <_fflush_r+0xc>

0800bdf0 <memmove>:
 800bdf0:	4288      	cmp	r0, r1
 800bdf2:	b510      	push	{r4, lr}
 800bdf4:	eb01 0402 	add.w	r4, r1, r2
 800bdf8:	d902      	bls.n	800be00 <memmove+0x10>
 800bdfa:	4284      	cmp	r4, r0
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	d807      	bhi.n	800be10 <memmove+0x20>
 800be00:	1e43      	subs	r3, r0, #1
 800be02:	42a1      	cmp	r1, r4
 800be04:	d008      	beq.n	800be18 <memmove+0x28>
 800be06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be0e:	e7f8      	b.n	800be02 <memmove+0x12>
 800be10:	4601      	mov	r1, r0
 800be12:	4402      	add	r2, r0
 800be14:	428a      	cmp	r2, r1
 800be16:	d100      	bne.n	800be1a <memmove+0x2a>
 800be18:	bd10      	pop	{r4, pc}
 800be1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be22:	e7f7      	b.n	800be14 <memmove+0x24>

0800be24 <_sbrk_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	2300      	movs	r3, #0
 800be28:	4d05      	ldr	r5, [pc, #20]	@ (800be40 <_sbrk_r+0x1c>)
 800be2a:	4604      	mov	r4, r0
 800be2c:	4608      	mov	r0, r1
 800be2e:	602b      	str	r3, [r5, #0]
 800be30:	f7f6 fa10 	bl	8002254 <_sbrk>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_sbrk_r+0x1a>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_sbrk_r+0x1a>
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	200016e4 	.word	0x200016e4

0800be44 <memchr>:
 800be44:	4603      	mov	r3, r0
 800be46:	b510      	push	{r4, lr}
 800be48:	b2c9      	uxtb	r1, r1
 800be4a:	4402      	add	r2, r0
 800be4c:	4293      	cmp	r3, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	d101      	bne.n	800be56 <memchr+0x12>
 800be52:	2000      	movs	r0, #0
 800be54:	e003      	b.n	800be5e <memchr+0x1a>
 800be56:	7804      	ldrb	r4, [r0, #0]
 800be58:	3301      	adds	r3, #1
 800be5a:	428c      	cmp	r4, r1
 800be5c:	d1f6      	bne.n	800be4c <memchr+0x8>
 800be5e:	bd10      	pop	{r4, pc}

0800be60 <__assert_func>:
 800be60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be62:	4614      	mov	r4, r2
 800be64:	461a      	mov	r2, r3
 800be66:	4b09      	ldr	r3, [pc, #36]	@ (800be8c <__assert_func+0x2c>)
 800be68:	4605      	mov	r5, r0
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68d8      	ldr	r0, [r3, #12]
 800be6e:	b14c      	cbz	r4, 800be84 <__assert_func+0x24>
 800be70:	4b07      	ldr	r3, [pc, #28]	@ (800be90 <__assert_func+0x30>)
 800be72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be76:	9100      	str	r1, [sp, #0]
 800be78:	462b      	mov	r3, r5
 800be7a:	4906      	ldr	r1, [pc, #24]	@ (800be94 <__assert_func+0x34>)
 800be7c:	f000 f858 	bl	800bf30 <fiprintf>
 800be80:	f000 f868 	bl	800bf54 <abort>
 800be84:	4b04      	ldr	r3, [pc, #16]	@ (800be98 <__assert_func+0x38>)
 800be86:	461c      	mov	r4, r3
 800be88:	e7f3      	b.n	800be72 <__assert_func+0x12>
 800be8a:	bf00      	nop
 800be8c:	200002f8 	.word	0x200002f8
 800be90:	0800c9f0 	.word	0x0800c9f0
 800be94:	0800c9fd 	.word	0x0800c9fd
 800be98:	0800ca2b 	.word	0x0800ca2b

0800be9c <_calloc_r>:
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	fba1 5402 	umull	r5, r4, r1, r2
 800bea2:	b934      	cbnz	r4, 800beb2 <_calloc_r+0x16>
 800bea4:	4629      	mov	r1, r5
 800bea6:	f7fe fec9 	bl	800ac3c <_malloc_r>
 800beaa:	4606      	mov	r6, r0
 800beac:	b928      	cbnz	r0, 800beba <_calloc_r+0x1e>
 800beae:	4630      	mov	r0, r6
 800beb0:	bd70      	pop	{r4, r5, r6, pc}
 800beb2:	220c      	movs	r2, #12
 800beb4:	2600      	movs	r6, #0
 800beb6:	6002      	str	r2, [r0, #0]
 800beb8:	e7f9      	b.n	800beae <_calloc_r+0x12>
 800beba:	462a      	mov	r2, r5
 800bebc:	4621      	mov	r1, r4
 800bebe:	f7fe fa6a 	bl	800a396 <memset>
 800bec2:	e7f4      	b.n	800beae <_calloc_r+0x12>

0800bec4 <malloc>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	@ (800bed0 <malloc+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f7fe beb7 	b.w	800ac3c <_malloc_r>
 800bece:	bf00      	nop
 800bed0:	200002f8 	.word	0x200002f8

0800bed4 <_realloc_r>:
 800bed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed8:	4607      	mov	r7, r0
 800beda:	4614      	mov	r4, r2
 800bedc:	460d      	mov	r5, r1
 800bede:	b921      	cbnz	r1, 800beea <_realloc_r+0x16>
 800bee0:	4611      	mov	r1, r2
 800bee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bee6:	f7fe bea9 	b.w	800ac3c <_malloc_r>
 800beea:	b92a      	cbnz	r2, 800bef8 <_realloc_r+0x24>
 800beec:	f7fe fb02 	bl	800a4f4 <_free_r>
 800bef0:	4625      	mov	r5, r4
 800bef2:	4628      	mov	r0, r5
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	f000 f833 	bl	800bf62 <_malloc_usable_size_r>
 800befc:	4284      	cmp	r4, r0
 800befe:	4606      	mov	r6, r0
 800bf00:	d802      	bhi.n	800bf08 <_realloc_r+0x34>
 800bf02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf06:	d8f4      	bhi.n	800bef2 <_realloc_r+0x1e>
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f7fe fe96 	bl	800ac3c <_malloc_r>
 800bf10:	4680      	mov	r8, r0
 800bf12:	b908      	cbnz	r0, 800bf18 <_realloc_r+0x44>
 800bf14:	4645      	mov	r5, r8
 800bf16:	e7ec      	b.n	800bef2 <_realloc_r+0x1e>
 800bf18:	42b4      	cmp	r4, r6
 800bf1a:	4622      	mov	r2, r4
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	bf28      	it	cs
 800bf20:	4632      	movcs	r2, r6
 800bf22:	f7fe fad2 	bl	800a4ca <memcpy>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4638      	mov	r0, r7
 800bf2a:	f7fe fae3 	bl	800a4f4 <_free_r>
 800bf2e:	e7f1      	b.n	800bf14 <_realloc_r+0x40>

0800bf30 <fiprintf>:
 800bf30:	b40e      	push	{r1, r2, r3}
 800bf32:	b503      	push	{r0, r1, lr}
 800bf34:	4601      	mov	r1, r0
 800bf36:	ab03      	add	r3, sp, #12
 800bf38:	4805      	ldr	r0, [pc, #20]	@ (800bf50 <fiprintf+0x20>)
 800bf3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf3e:	6800      	ldr	r0, [r0, #0]
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	f000 f83d 	bl	800bfc0 <_vfiprintf_r>
 800bf46:	b002      	add	sp, #8
 800bf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf4c:	b003      	add	sp, #12
 800bf4e:	4770      	bx	lr
 800bf50:	200002f8 	.word	0x200002f8

0800bf54 <abort>:
 800bf54:	2006      	movs	r0, #6
 800bf56:	b508      	push	{r3, lr}
 800bf58:	f000 fa06 	bl	800c368 <raise>
 800bf5c:	2001      	movs	r0, #1
 800bf5e:	f7f6 f904 	bl	800216a <_exit>

0800bf62 <_malloc_usable_size_r>:
 800bf62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf66:	1f18      	subs	r0, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	bfbc      	itt	lt
 800bf6c:	580b      	ldrlt	r3, [r1, r0]
 800bf6e:	18c0      	addlt	r0, r0, r3
 800bf70:	4770      	bx	lr

0800bf72 <__sfputc_r>:
 800bf72:	6893      	ldr	r3, [r2, #8]
 800bf74:	b410      	push	{r4}
 800bf76:	3b01      	subs	r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	6093      	str	r3, [r2, #8]
 800bf7c:	da07      	bge.n	800bf8e <__sfputc_r+0x1c>
 800bf7e:	6994      	ldr	r4, [r2, #24]
 800bf80:	42a3      	cmp	r3, r4
 800bf82:	db01      	blt.n	800bf88 <__sfputc_r+0x16>
 800bf84:	290a      	cmp	r1, #10
 800bf86:	d102      	bne.n	800bf8e <__sfputc_r+0x1c>
 800bf88:	bc10      	pop	{r4}
 800bf8a:	f000 b931 	b.w	800c1f0 <__swbuf_r>
 800bf8e:	6813      	ldr	r3, [r2, #0]
 800bf90:	1c58      	adds	r0, r3, #1
 800bf92:	6010      	str	r0, [r2, #0]
 800bf94:	7019      	strb	r1, [r3, #0]
 800bf96:	4608      	mov	r0, r1
 800bf98:	bc10      	pop	{r4}
 800bf9a:	4770      	bx	lr

0800bf9c <__sfputs_r>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	460f      	mov	r7, r1
 800bfa2:	4614      	mov	r4, r2
 800bfa4:	18d5      	adds	r5, r2, r3
 800bfa6:	42ac      	cmp	r4, r5
 800bfa8:	d101      	bne.n	800bfae <__sfputs_r+0x12>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e007      	b.n	800bfbe <__sfputs_r+0x22>
 800bfae:	463a      	mov	r2, r7
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb6:	f7ff ffdc 	bl	800bf72 <__sfputc_r>
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	d1f3      	bne.n	800bfa6 <__sfputs_r+0xa>
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfc0 <_vfiprintf_r>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	460d      	mov	r5, r1
 800bfc6:	4614      	mov	r4, r2
 800bfc8:	4698      	mov	r8, r3
 800bfca:	4606      	mov	r6, r0
 800bfcc:	b09d      	sub	sp, #116	@ 0x74
 800bfce:	b118      	cbz	r0, 800bfd8 <_vfiprintf_r+0x18>
 800bfd0:	6a03      	ldr	r3, [r0, #32]
 800bfd2:	b90b      	cbnz	r3, 800bfd8 <_vfiprintf_r+0x18>
 800bfd4:	f7fe f944 	bl	800a260 <__sinit>
 800bfd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfda:	07d9      	lsls	r1, r3, #31
 800bfdc:	d405      	bmi.n	800bfea <_vfiprintf_r+0x2a>
 800bfde:	89ab      	ldrh	r3, [r5, #12]
 800bfe0:	059a      	lsls	r2, r3, #22
 800bfe2:	d402      	bmi.n	800bfea <_vfiprintf_r+0x2a>
 800bfe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfe6:	f7fe fa6e 	bl	800a4c6 <__retarget_lock_acquire_recursive>
 800bfea:	89ab      	ldrh	r3, [r5, #12]
 800bfec:	071b      	lsls	r3, r3, #28
 800bfee:	d501      	bpl.n	800bff4 <_vfiprintf_r+0x34>
 800bff0:	692b      	ldr	r3, [r5, #16]
 800bff2:	b99b      	cbnz	r3, 800c01c <_vfiprintf_r+0x5c>
 800bff4:	4629      	mov	r1, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	f000 f938 	bl	800c26c <__swsetup_r>
 800bffc:	b170      	cbz	r0, 800c01c <_vfiprintf_r+0x5c>
 800bffe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c000:	07dc      	lsls	r4, r3, #31
 800c002:	d504      	bpl.n	800c00e <_vfiprintf_r+0x4e>
 800c004:	f04f 30ff 	mov.w	r0, #4294967295
 800c008:	b01d      	add	sp, #116	@ 0x74
 800c00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00e:	89ab      	ldrh	r3, [r5, #12]
 800c010:	0598      	lsls	r0, r3, #22
 800c012:	d4f7      	bmi.n	800c004 <_vfiprintf_r+0x44>
 800c014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c016:	f7fe fa57 	bl	800a4c8 <__retarget_lock_release_recursive>
 800c01a:	e7f3      	b.n	800c004 <_vfiprintf_r+0x44>
 800c01c:	2300      	movs	r3, #0
 800c01e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c020:	2320      	movs	r3, #32
 800c022:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c026:	2330      	movs	r3, #48	@ 0x30
 800c028:	f04f 0901 	mov.w	r9, #1
 800c02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c030:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c1dc <_vfiprintf_r+0x21c>
 800c034:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c038:	4623      	mov	r3, r4
 800c03a:	469a      	mov	sl, r3
 800c03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c040:	b10a      	cbz	r2, 800c046 <_vfiprintf_r+0x86>
 800c042:	2a25      	cmp	r2, #37	@ 0x25
 800c044:	d1f9      	bne.n	800c03a <_vfiprintf_r+0x7a>
 800c046:	ebba 0b04 	subs.w	fp, sl, r4
 800c04a:	d00b      	beq.n	800c064 <_vfiprintf_r+0xa4>
 800c04c:	465b      	mov	r3, fp
 800c04e:	4622      	mov	r2, r4
 800c050:	4629      	mov	r1, r5
 800c052:	4630      	mov	r0, r6
 800c054:	f7ff ffa2 	bl	800bf9c <__sfputs_r>
 800c058:	3001      	adds	r0, #1
 800c05a:	f000 80a7 	beq.w	800c1ac <_vfiprintf_r+0x1ec>
 800c05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c060:	445a      	add	r2, fp
 800c062:	9209      	str	r2, [sp, #36]	@ 0x24
 800c064:	f89a 3000 	ldrb.w	r3, [sl]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 809f 	beq.w	800c1ac <_vfiprintf_r+0x1ec>
 800c06e:	2300      	movs	r3, #0
 800c070:	f04f 32ff 	mov.w	r2, #4294967295
 800c074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c078:	f10a 0a01 	add.w	sl, sl, #1
 800c07c:	9304      	str	r3, [sp, #16]
 800c07e:	9307      	str	r3, [sp, #28]
 800c080:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c084:	931a      	str	r3, [sp, #104]	@ 0x68
 800c086:	4654      	mov	r4, sl
 800c088:	2205      	movs	r2, #5
 800c08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c08e:	4853      	ldr	r0, [pc, #332]	@ (800c1dc <_vfiprintf_r+0x21c>)
 800c090:	f7ff fed8 	bl	800be44 <memchr>
 800c094:	9a04      	ldr	r2, [sp, #16]
 800c096:	b9d8      	cbnz	r0, 800c0d0 <_vfiprintf_r+0x110>
 800c098:	06d1      	lsls	r1, r2, #27
 800c09a:	bf44      	itt	mi
 800c09c:	2320      	movmi	r3, #32
 800c09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0a2:	0713      	lsls	r3, r2, #28
 800c0a4:	bf44      	itt	mi
 800c0a6:	232b      	movmi	r3, #43	@ 0x2b
 800c0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0b2:	d015      	beq.n	800c0e0 <_vfiprintf_r+0x120>
 800c0b4:	4654      	mov	r4, sl
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	f04f 0c0a 	mov.w	ip, #10
 800c0bc:	9a07      	ldr	r2, [sp, #28]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0c4:	3b30      	subs	r3, #48	@ 0x30
 800c0c6:	2b09      	cmp	r3, #9
 800c0c8:	d94b      	bls.n	800c162 <_vfiprintf_r+0x1a2>
 800c0ca:	b1b0      	cbz	r0, 800c0fa <_vfiprintf_r+0x13a>
 800c0cc:	9207      	str	r2, [sp, #28]
 800c0ce:	e014      	b.n	800c0fa <_vfiprintf_r+0x13a>
 800c0d0:	eba0 0308 	sub.w	r3, r0, r8
 800c0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	46a2      	mov	sl, r4
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	e7d2      	b.n	800c086 <_vfiprintf_r+0xc6>
 800c0e0:	9b03      	ldr	r3, [sp, #12]
 800c0e2:	1d19      	adds	r1, r3, #4
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	9103      	str	r1, [sp, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	bfbb      	ittet	lt
 800c0ec:	425b      	neglt	r3, r3
 800c0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c0f2:	9307      	strge	r3, [sp, #28]
 800c0f4:	9307      	strlt	r3, [sp, #28]
 800c0f6:	bfb8      	it	lt
 800c0f8:	9204      	strlt	r2, [sp, #16]
 800c0fa:	7823      	ldrb	r3, [r4, #0]
 800c0fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0fe:	d10a      	bne.n	800c116 <_vfiprintf_r+0x156>
 800c100:	7863      	ldrb	r3, [r4, #1]
 800c102:	2b2a      	cmp	r3, #42	@ 0x2a
 800c104:	d132      	bne.n	800c16c <_vfiprintf_r+0x1ac>
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	3402      	adds	r4, #2
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	9203      	str	r2, [sp, #12]
 800c110:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c114:	9305      	str	r3, [sp, #20]
 800c116:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c1e0 <_vfiprintf_r+0x220>
 800c11a:	2203      	movs	r2, #3
 800c11c:	4650      	mov	r0, sl
 800c11e:	7821      	ldrb	r1, [r4, #0]
 800c120:	f7ff fe90 	bl	800be44 <memchr>
 800c124:	b138      	cbz	r0, 800c136 <_vfiprintf_r+0x176>
 800c126:	2240      	movs	r2, #64	@ 0x40
 800c128:	9b04      	ldr	r3, [sp, #16]
 800c12a:	eba0 000a 	sub.w	r0, r0, sl
 800c12e:	4082      	lsls	r2, r0
 800c130:	4313      	orrs	r3, r2
 800c132:	3401      	adds	r4, #1
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13a:	2206      	movs	r2, #6
 800c13c:	4829      	ldr	r0, [pc, #164]	@ (800c1e4 <_vfiprintf_r+0x224>)
 800c13e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c142:	f7ff fe7f 	bl	800be44 <memchr>
 800c146:	2800      	cmp	r0, #0
 800c148:	d03f      	beq.n	800c1ca <_vfiprintf_r+0x20a>
 800c14a:	4b27      	ldr	r3, [pc, #156]	@ (800c1e8 <_vfiprintf_r+0x228>)
 800c14c:	bb1b      	cbnz	r3, 800c196 <_vfiprintf_r+0x1d6>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	3307      	adds	r3, #7
 800c152:	f023 0307 	bic.w	r3, r3, #7
 800c156:	3308      	adds	r3, #8
 800c158:	9303      	str	r3, [sp, #12]
 800c15a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c15c:	443b      	add	r3, r7
 800c15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c160:	e76a      	b.n	800c038 <_vfiprintf_r+0x78>
 800c162:	460c      	mov	r4, r1
 800c164:	2001      	movs	r0, #1
 800c166:	fb0c 3202 	mla	r2, ip, r2, r3
 800c16a:	e7a8      	b.n	800c0be <_vfiprintf_r+0xfe>
 800c16c:	2300      	movs	r3, #0
 800c16e:	f04f 0c0a 	mov.w	ip, #10
 800c172:	4619      	mov	r1, r3
 800c174:	3401      	adds	r4, #1
 800c176:	9305      	str	r3, [sp, #20]
 800c178:	4620      	mov	r0, r4
 800c17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17e:	3a30      	subs	r2, #48	@ 0x30
 800c180:	2a09      	cmp	r2, #9
 800c182:	d903      	bls.n	800c18c <_vfiprintf_r+0x1cc>
 800c184:	2b00      	cmp	r3, #0
 800c186:	d0c6      	beq.n	800c116 <_vfiprintf_r+0x156>
 800c188:	9105      	str	r1, [sp, #20]
 800c18a:	e7c4      	b.n	800c116 <_vfiprintf_r+0x156>
 800c18c:	4604      	mov	r4, r0
 800c18e:	2301      	movs	r3, #1
 800c190:	fb0c 2101 	mla	r1, ip, r1, r2
 800c194:	e7f0      	b.n	800c178 <_vfiprintf_r+0x1b8>
 800c196:	ab03      	add	r3, sp, #12
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	462a      	mov	r2, r5
 800c19c:	4630      	mov	r0, r6
 800c19e:	4b13      	ldr	r3, [pc, #76]	@ (800c1ec <_vfiprintf_r+0x22c>)
 800c1a0:	a904      	add	r1, sp, #16
 800c1a2:	f3af 8000 	nop.w
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	1c78      	adds	r0, r7, #1
 800c1aa:	d1d6      	bne.n	800c15a <_vfiprintf_r+0x19a>
 800c1ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ae:	07d9      	lsls	r1, r3, #31
 800c1b0:	d405      	bmi.n	800c1be <_vfiprintf_r+0x1fe>
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	059a      	lsls	r2, r3, #22
 800c1b6:	d402      	bmi.n	800c1be <_vfiprintf_r+0x1fe>
 800c1b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1ba:	f7fe f985 	bl	800a4c8 <__retarget_lock_release_recursive>
 800c1be:	89ab      	ldrh	r3, [r5, #12]
 800c1c0:	065b      	lsls	r3, r3, #25
 800c1c2:	f53f af1f 	bmi.w	800c004 <_vfiprintf_r+0x44>
 800c1c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1c8:	e71e      	b.n	800c008 <_vfiprintf_r+0x48>
 800c1ca:	ab03      	add	r3, sp, #12
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	4b06      	ldr	r3, [pc, #24]	@ (800c1ec <_vfiprintf_r+0x22c>)
 800c1d4:	a904      	add	r1, sp, #16
 800c1d6:	f7ff fc45 	bl	800ba64 <_printf_i>
 800c1da:	e7e4      	b.n	800c1a6 <_vfiprintf_r+0x1e6>
 800c1dc:	0800c9bd 	.word	0x0800c9bd
 800c1e0:	0800c9c3 	.word	0x0800c9c3
 800c1e4:	0800c9c7 	.word	0x0800c9c7
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	0800bf9d 	.word	0x0800bf9d

0800c1f0 <__swbuf_r>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	460e      	mov	r6, r1
 800c1f4:	4614      	mov	r4, r2
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	b118      	cbz	r0, 800c202 <__swbuf_r+0x12>
 800c1fa:	6a03      	ldr	r3, [r0, #32]
 800c1fc:	b90b      	cbnz	r3, 800c202 <__swbuf_r+0x12>
 800c1fe:	f7fe f82f 	bl	800a260 <__sinit>
 800c202:	69a3      	ldr	r3, [r4, #24]
 800c204:	60a3      	str	r3, [r4, #8]
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	071a      	lsls	r2, r3, #28
 800c20a:	d501      	bpl.n	800c210 <__swbuf_r+0x20>
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	b943      	cbnz	r3, 800c222 <__swbuf_r+0x32>
 800c210:	4621      	mov	r1, r4
 800c212:	4628      	mov	r0, r5
 800c214:	f000 f82a 	bl	800c26c <__swsetup_r>
 800c218:	b118      	cbz	r0, 800c222 <__swbuf_r+0x32>
 800c21a:	f04f 37ff 	mov.w	r7, #4294967295
 800c21e:	4638      	mov	r0, r7
 800c220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c222:	6823      	ldr	r3, [r4, #0]
 800c224:	6922      	ldr	r2, [r4, #16]
 800c226:	b2f6      	uxtb	r6, r6
 800c228:	1a98      	subs	r0, r3, r2
 800c22a:	6963      	ldr	r3, [r4, #20]
 800c22c:	4637      	mov	r7, r6
 800c22e:	4283      	cmp	r3, r0
 800c230:	dc05      	bgt.n	800c23e <__swbuf_r+0x4e>
 800c232:	4621      	mov	r1, r4
 800c234:	4628      	mov	r0, r5
 800c236:	f7ff fdb3 	bl	800bda0 <_fflush_r>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d1ed      	bne.n	800c21a <__swbuf_r+0x2a>
 800c23e:	68a3      	ldr	r3, [r4, #8]
 800c240:	3b01      	subs	r3, #1
 800c242:	60a3      	str	r3, [r4, #8]
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	1c5a      	adds	r2, r3, #1
 800c248:	6022      	str	r2, [r4, #0]
 800c24a:	701e      	strb	r6, [r3, #0]
 800c24c:	6962      	ldr	r2, [r4, #20]
 800c24e:	1c43      	adds	r3, r0, #1
 800c250:	429a      	cmp	r2, r3
 800c252:	d004      	beq.n	800c25e <__swbuf_r+0x6e>
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	07db      	lsls	r3, r3, #31
 800c258:	d5e1      	bpl.n	800c21e <__swbuf_r+0x2e>
 800c25a:	2e0a      	cmp	r6, #10
 800c25c:	d1df      	bne.n	800c21e <__swbuf_r+0x2e>
 800c25e:	4621      	mov	r1, r4
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff fd9d 	bl	800bda0 <_fflush_r>
 800c266:	2800      	cmp	r0, #0
 800c268:	d0d9      	beq.n	800c21e <__swbuf_r+0x2e>
 800c26a:	e7d6      	b.n	800c21a <__swbuf_r+0x2a>

0800c26c <__swsetup_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4b29      	ldr	r3, [pc, #164]	@ (800c314 <__swsetup_r+0xa8>)
 800c270:	4605      	mov	r5, r0
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	460c      	mov	r4, r1
 800c276:	b118      	cbz	r0, 800c280 <__swsetup_r+0x14>
 800c278:	6a03      	ldr	r3, [r0, #32]
 800c27a:	b90b      	cbnz	r3, 800c280 <__swsetup_r+0x14>
 800c27c:	f7fd fff0 	bl	800a260 <__sinit>
 800c280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c284:	0719      	lsls	r1, r3, #28
 800c286:	d422      	bmi.n	800c2ce <__swsetup_r+0x62>
 800c288:	06da      	lsls	r2, r3, #27
 800c28a:	d407      	bmi.n	800c29c <__swsetup_r+0x30>
 800c28c:	2209      	movs	r2, #9
 800c28e:	602a      	str	r2, [r5, #0]
 800c290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e033      	b.n	800c304 <__swsetup_r+0x98>
 800c29c:	0758      	lsls	r0, r3, #29
 800c29e:	d512      	bpl.n	800c2c6 <__swsetup_r+0x5a>
 800c2a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2a2:	b141      	cbz	r1, 800c2b6 <__swsetup_r+0x4a>
 800c2a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d002      	beq.n	800c2b2 <__swsetup_r+0x46>
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fe f921 	bl	800a4f4 <_free_r>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2bc:	81a3      	strh	r3, [r4, #12]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	6063      	str	r3, [r4, #4]
 800c2c2:	6923      	ldr	r3, [r4, #16]
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	f043 0308 	orr.w	r3, r3, #8
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	6923      	ldr	r3, [r4, #16]
 800c2d0:	b94b      	cbnz	r3, 800c2e6 <__swsetup_r+0x7a>
 800c2d2:	89a3      	ldrh	r3, [r4, #12]
 800c2d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2dc:	d003      	beq.n	800c2e6 <__swsetup_r+0x7a>
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	f000 f882 	bl	800c3ea <__smakebuf_r>
 800c2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ea:	f013 0201 	ands.w	r2, r3, #1
 800c2ee:	d00a      	beq.n	800c306 <__swsetup_r+0x9a>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	60a2      	str	r2, [r4, #8]
 800c2f4:	6962      	ldr	r2, [r4, #20]
 800c2f6:	4252      	negs	r2, r2
 800c2f8:	61a2      	str	r2, [r4, #24]
 800c2fa:	6922      	ldr	r2, [r4, #16]
 800c2fc:	b942      	cbnz	r2, 800c310 <__swsetup_r+0xa4>
 800c2fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c302:	d1c5      	bne.n	800c290 <__swsetup_r+0x24>
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	0799      	lsls	r1, r3, #30
 800c308:	bf58      	it	pl
 800c30a:	6962      	ldrpl	r2, [r4, #20]
 800c30c:	60a2      	str	r2, [r4, #8]
 800c30e:	e7f4      	b.n	800c2fa <__swsetup_r+0x8e>
 800c310:	2000      	movs	r0, #0
 800c312:	e7f7      	b.n	800c304 <__swsetup_r+0x98>
 800c314:	200002f8 	.word	0x200002f8

0800c318 <_raise_r>:
 800c318:	291f      	cmp	r1, #31
 800c31a:	b538      	push	{r3, r4, r5, lr}
 800c31c:	4605      	mov	r5, r0
 800c31e:	460c      	mov	r4, r1
 800c320:	d904      	bls.n	800c32c <_raise_r+0x14>
 800c322:	2316      	movs	r3, #22
 800c324:	6003      	str	r3, [r0, #0]
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c32e:	b112      	cbz	r2, 800c336 <_raise_r+0x1e>
 800c330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c334:	b94b      	cbnz	r3, 800c34a <_raise_r+0x32>
 800c336:	4628      	mov	r0, r5
 800c338:	f000 f830 	bl	800c39c <_getpid_r>
 800c33c:	4622      	mov	r2, r4
 800c33e:	4601      	mov	r1, r0
 800c340:	4628      	mov	r0, r5
 800c342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c346:	f000 b817 	b.w	800c378 <_kill_r>
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d00a      	beq.n	800c364 <_raise_r+0x4c>
 800c34e:	1c59      	adds	r1, r3, #1
 800c350:	d103      	bne.n	800c35a <_raise_r+0x42>
 800c352:	2316      	movs	r3, #22
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	2001      	movs	r0, #1
 800c358:	e7e7      	b.n	800c32a <_raise_r+0x12>
 800c35a:	2100      	movs	r1, #0
 800c35c:	4620      	mov	r0, r4
 800c35e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c362:	4798      	blx	r3
 800c364:	2000      	movs	r0, #0
 800c366:	e7e0      	b.n	800c32a <_raise_r+0x12>

0800c368 <raise>:
 800c368:	4b02      	ldr	r3, [pc, #8]	@ (800c374 <raise+0xc>)
 800c36a:	4601      	mov	r1, r0
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	f7ff bfd3 	b.w	800c318 <_raise_r>
 800c372:	bf00      	nop
 800c374:	200002f8 	.word	0x200002f8

0800c378 <_kill_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	2300      	movs	r3, #0
 800c37c:	4d06      	ldr	r5, [pc, #24]	@ (800c398 <_kill_r+0x20>)
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	f7f5 fee0 	bl	800214a <_kill>
 800c38a:	1c43      	adds	r3, r0, #1
 800c38c:	d102      	bne.n	800c394 <_kill_r+0x1c>
 800c38e:	682b      	ldr	r3, [r5, #0]
 800c390:	b103      	cbz	r3, 800c394 <_kill_r+0x1c>
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	bf00      	nop
 800c398:	200016e4 	.word	0x200016e4

0800c39c <_getpid_r>:
 800c39c:	f7f5 bece 	b.w	800213c <_getpid>

0800c3a0 <__swhatbuf_r>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	4615      	mov	r5, r2
 800c3aa:	2900      	cmp	r1, #0
 800c3ac:	461e      	mov	r6, r3
 800c3ae:	b096      	sub	sp, #88	@ 0x58
 800c3b0:	da0c      	bge.n	800c3cc <__swhatbuf_r+0x2c>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c3ba:	bf14      	ite	ne
 800c3bc:	2340      	movne	r3, #64	@ 0x40
 800c3be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	6031      	str	r1, [r6, #0]
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	b016      	add	sp, #88	@ 0x58
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	466a      	mov	r2, sp
 800c3ce:	f000 f849 	bl	800c464 <_fstat_r>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dbed      	blt.n	800c3b2 <__swhatbuf_r+0x12>
 800c3d6:	9901      	ldr	r1, [sp, #4]
 800c3d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c3dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c3e0:	4259      	negs	r1, r3
 800c3e2:	4159      	adcs	r1, r3
 800c3e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3e8:	e7eb      	b.n	800c3c2 <__swhatbuf_r+0x22>

0800c3ea <__smakebuf_r>:
 800c3ea:	898b      	ldrh	r3, [r1, #12]
 800c3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3ee:	079d      	lsls	r5, r3, #30
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	d507      	bpl.n	800c406 <__smakebuf_r+0x1c>
 800c3f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	6123      	str	r3, [r4, #16]
 800c3fe:	2301      	movs	r3, #1
 800c400:	6163      	str	r3, [r4, #20]
 800c402:	b003      	add	sp, #12
 800c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c406:	466a      	mov	r2, sp
 800c408:	ab01      	add	r3, sp, #4
 800c40a:	f7ff ffc9 	bl	800c3a0 <__swhatbuf_r>
 800c40e:	9f00      	ldr	r7, [sp, #0]
 800c410:	4605      	mov	r5, r0
 800c412:	4639      	mov	r1, r7
 800c414:	4630      	mov	r0, r6
 800c416:	f7fe fc11 	bl	800ac3c <_malloc_r>
 800c41a:	b948      	cbnz	r0, 800c430 <__smakebuf_r+0x46>
 800c41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c420:	059a      	lsls	r2, r3, #22
 800c422:	d4ee      	bmi.n	800c402 <__smakebuf_r+0x18>
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	f043 0302 	orr.w	r3, r3, #2
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	e7e2      	b.n	800c3f6 <__smakebuf_r+0xc>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	9b01      	ldr	r3, [sp, #4]
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	b15b      	cbz	r3, 800c45a <__smakebuf_r+0x70>
 800c442:	4630      	mov	r0, r6
 800c444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c448:	f000 f81e 	bl	800c488 <_isatty_r>
 800c44c:	b128      	cbz	r0, 800c45a <__smakebuf_r+0x70>
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	f023 0303 	bic.w	r3, r3, #3
 800c454:	f043 0301 	orr.w	r3, r3, #1
 800c458:	81a3      	strh	r3, [r4, #12]
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	431d      	orrs	r5, r3
 800c45e:	81a5      	strh	r5, [r4, #12]
 800c460:	e7cf      	b.n	800c402 <__smakebuf_r+0x18>
	...

0800c464 <_fstat_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	2300      	movs	r3, #0
 800c468:	4d06      	ldr	r5, [pc, #24]	@ (800c484 <_fstat_r+0x20>)
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	f7f5 fec9 	bl	8002208 <_fstat>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d102      	bne.n	800c480 <_fstat_r+0x1c>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b103      	cbz	r3, 800c480 <_fstat_r+0x1c>
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	bf00      	nop
 800c484:	200016e4 	.word	0x200016e4

0800c488 <_isatty_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	2300      	movs	r3, #0
 800c48c:	4d05      	ldr	r5, [pc, #20]	@ (800c4a4 <_isatty_r+0x1c>)
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7f5 fec7 	bl	8002226 <_isatty>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_isatty_r+0x1a>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_isatty_r+0x1a>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	200016e4 	.word	0x200016e4

0800c4a8 <_init>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr

0800c4b4 <_fini>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	bf00      	nop
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr
