
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc38  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800bd48  0800bd48  0000cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c40c  0800c40c  0000e348  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c40c  0800c40c  0000d40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c414  0800c414  0000e348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c414  0800c414  0000d414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c418  0800c418  0000d418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000348  20000000  0800c41c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000348  0800c764  0000e348  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016f4  0800c764  0000e6f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e348  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8d9  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbf  00000000  00000000  0001bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0001ea10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  0001f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a62e  00000000  00000000  0001fe72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa18  00000000  00000000  0003a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008937e  00000000  00000000  00049eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  000d327c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d7308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd30 	.word	0x0800bd30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800bd30 	.word	0x0800bd30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fcmpun>:
 8000b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	d102      	bne.n	8000b50 <__aeabi_fcmpun+0x14>
 8000b4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b4e:	d108      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b54:	d102      	bne.n	8000b5c <__aeabi_fcmpun+0x20>
 8000b56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff59 	bl	8000a5c <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff4a 	bl	8000a5c <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  HAL_Init();
 8000bda:	f000 ffe3 	bl	8001ba4 <HAL_Init>
  SystemClock_Config();
 8000bde:	f000 f81d 	bl	8000c1c <SystemClock_Config>
  MX_GPIO_Init();
 8000be2:	f000 f877 	bl	8000cd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 8000be6:	f007 fc1b 	bl	8008420 <MX_USB_DEVICE_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 8000bea:	f000 fc79 	bl	80014e0 <setup>

  // Envío inicial
  uint8_t mensaje[] = "G-code listo\r\n";
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <main+0x44>)
 8000bf0:	463c      	mov	r4, r7
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf6:	8023      	strh	r3, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(mensaje, sizeof(mensaje) - 1);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	210e      	movs	r1, #14
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fcfe 	bl	8008604 <CDC_Transmit_FS>

  while (1)
  {
    // Equivalente al loop() de Arduino
    loop();
 8000c08:	f000 fba0 	bl	800134c <loop>
    
    // Pausa optimizada para reducir carga del procesador y terminal
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 8000c0c:	2032      	movs	r0, #50	@ 0x32
 8000c0e:	f001 f82b 	bl	8001c68 <HAL_Delay>
    loop();
 8000c12:	bf00      	nop
 8000c14:	e7f8      	b.n	8000c08 <main+0x34>
 8000c16:	bf00      	nop
 8000c18:	0800bd48 	.word	0x0800bd48

08000c1c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2228      	movs	r2, #40	@ 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fff7 	bl	8009c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f83e 	bl	8003cf4 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c7e:	f000 fe35 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 faaa 	bl	80041f8 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000caa:	f000 fe1f 	bl	80018ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cb6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fbf8 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cc6:	f000 fe11 	bl	80018ec <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3750      	adds	r7, #80	@ 0x50
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 31d9 	movw	r1, #985	@ 0x3d9
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d38:	f001 fa63 	bl	8002202 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000d42:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d44:	f001 fa5d 	bl	8002202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d48:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8000d4c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d62:	f001 f8b3 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d66:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d7c:	f001 f8a6 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d80:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d9a:	f001 f897 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010800 	.word	0x40010800

08000db4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <delay_us+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <delay_us+0x44>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9a      	lsrs	r2, r3, #18
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <delay_us+0x48>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000dd6:	bf00      	nop
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <delay_us+0x48>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d8f8      	bhi.n	8000dd8 <delay_us+0x24>
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000004 	.word	0x20000004
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	e0001000 	.word	0xe0001000

08000e00 <X_stepOnce>:

void X_stepOnce(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <X_stepOnce+0x24>)
 8000e0a:	f001 f9fa 	bl	8002202 <HAL_GPIO_WritePin>
    delay_us(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ffd0 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <X_stepOnce+0x24>)
 8000e1a:	f001 f9f2 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <Y_stepOnce>:

void Y_stepOnce(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e34:	f001 f9e5 	bl	8002202 <HAL_GPIO_WritePin>
    delay_us(2);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff ffbb 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e46:	f001 f9dc 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <Z_stepOnce>:

void Z_stepOnce(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e60:	f001 f9cf 	bl	8002202 <HAL_GPIO_WritePin>
    delay_us(2);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ffa5 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e72:	f001 f9c6 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010800 	.word	0x40010800

08000e80 <X_move>:

void X_move(int32_t steps, bool dir) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <X_move+0x88>)
 8000e94:	f001 f9b5 	bl	8002202 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00a      	beq.n	8000eb4 <X_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <X_move+0x88>)
 8000ea4:	f001 f9ad 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <X_move+0x88>)
 8000eae:	f001 f9a8 	bl	8002202 <HAL_GPIO_WritePin>
 8000eb2:	e009      	b.n	8000ec8 <X_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <X_move+0x88>)
 8000eba:	f001 f9a2 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <X_move+0x88>)
 8000ec4:	f001 f99d 	bl	8002202 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e009      	b.n	8000ee2 <X_move+0x62>
        X_stepOnce();
 8000ece:	f7ff ff97 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8000ed2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff6c 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf1      	blt.n	8000ece <X_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <X_move+0x88>)
 8000ef0:	f001 f987 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <X_move+0x88>)
 8000efa:	f001 f982 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <Y_move>:

void Y_move(int32_t steps, bool dir) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <Y_move+0x88>)
 8000f20:	f001 f96f 	bl	8002202 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <Y_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <Y_move+0x88>)
 8000f30:	f001 f967 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <Y_move+0x88>)
 8000f3a:	f001 f962 	bl	8002202 <HAL_GPIO_WritePin>
 8000f3e:	e009      	b.n	8000f54 <Y_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <Y_move+0x88>)
 8000f46:	f001 f95c 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <Y_move+0x88>)
 8000f50:	f001 f957 	bl	8002202 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e009      	b.n	8000f6e <Y_move+0x62>
        Y_stepOnce();
 8000f5a:	f7ff ff65 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8000f5e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff26 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf1      	blt.n	8000f5a <Y_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <Y_move+0x88>)
 8000f7c:	f001 f941 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <Y_move+0x88>)
 8000f86:	f001 f93c 	bl	8002202 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <Z_move>:

void Z_move(int32_t steps, bool dir) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dir ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb2:	481d      	ldr	r0, [pc, #116]	@ (8001028 <Z_move+0x90>)
 8000fb4:	f001 f925 	bl	8002202 <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00a      	beq.n	8000fd4 <Z_move+0x3c>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	481a      	ldr	r0, [pc, #104]	@ (800102c <Z_move+0x94>)
 8000fc4:	f001 f91d 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4817      	ldr	r0, [pc, #92]	@ (800102c <Z_move+0x94>)
 8000fce:	f001 f918 	bl	8002202 <HAL_GPIO_WritePin>
 8000fd2:	e009      	b.n	8000fe8 <Z_move+0x50>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4814      	ldr	r0, [pc, #80]	@ (800102c <Z_move+0x94>)
 8000fda:	f001 f912 	bl	8002202 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4812      	ldr	r0, [pc, #72]	@ (800102c <Z_move+0x94>)
 8000fe4:	f001 f90d 	bl	8002202 <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e009      	b.n	8001002 <Z_move+0x6a>
        Z_stepOnce();
 8000fee:	f7ff ff31 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8000ff2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fedc 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf1      	blt.n	8000fee <Z_move+0x56>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <Z_move+0x94>)
 8001010:	f001 f8f7 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <Z_move+0x94>)
 800101a:	f001 f8f2 	bl	8002202 <HAL_GPIO_WritePin>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40010800 	.word	0x40010800
 800102c:	40010c00 	.word	0x40010c00

08001030 <extractParameter>:
void readUSBCommands(void) {
    // Esta función se implementará con callback de USB CDC
    // Por ahora vacía, se procesará en el callback
}

float extractParameter(const char* command, char param) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
    char* ptr = strchr(command, param);
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f008 fdf4 	bl	8009c2e <strchr>
 8001046:	60f8      	str	r0, [r7, #12]
    if (ptr) {
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00c      	beq.n	8001068 <extractParameter+0x38>
        return atof(ptr + 1);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f007 feb4 	bl	8008dc0 <atof>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd1c 	bl	8000a9c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	e000      	b.n	800106a <extractParameter+0x3a>
    }
    return NAN; // Not a Number
 8001068:	4b02      	ldr	r3, [pc, #8]	@ (8001074 <extractParameter+0x44>)
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	7fc00000 	.word	0x7fc00000

08001078 <moveAxes>:

void moveAxes(float x, float y, float z) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b098      	sub	sp, #96	@ 0x60
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
    // Convertir a pasos
    int32_t xSteps = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t ySteps = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	65bb      	str	r3, [r7, #88]	@ 0x58
    int32_t zSteps = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	657b      	str	r3, [r7, #84]	@ 0x54
    bool xDir = true;
 8001090:	2301      	movs	r3, #1
 8001092:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool yDir = true;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    bool zDir = true;
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    
    if (!isnan(x)) {
 80010a2:	68f9      	ldr	r1, [r7, #12]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fd49 	bl	8000b3c <__aeabi_fcmpun>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d121      	bne.n	80010f4 <moveAxes+0x7c>
        // Calcular pasos relativos para el eje X
        int32_t targetX = x * (STEPS_PER_REV / 360.0); // Convertir a pasos
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff f9b9 	bl	8000428 <__aeabi_f2d>
 80010b6:	a370      	add	r3, pc, #448	@ (adr r3, 8001278 <moveAxes+0x200>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fca0 	bl	8000a0c <__aeabi_d2iz>
 80010cc:	4603      	mov	r3, r0
 80010ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
        xSteps = targetX - currentX;
 80010d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001280 <moveAxes+0x208>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
        xDir = (xSteps >= 0);
 80010da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010dc:	43db      	mvns	r3, r3
 80010de:	0fdb      	lsrs	r3, r3, #31
 80010e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        xSteps = abs(xSteps);
 80010e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bfb8      	it	lt
 80010ea:	425b      	neglt	r3, r3
 80010ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
        currentX = targetX; // Actualizar posición actual
 80010ee:	4a64      	ldr	r2, [pc, #400]	@ (8001280 <moveAxes+0x208>)
 80010f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010f2:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(y)) {
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	68b8      	ldr	r0, [r7, #8]
 80010f8:	f7ff fd20 	bl	8000b3c <__aeabi_fcmpun>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d121      	bne.n	8001146 <moveAxes+0xce>
        // Calcular pasos relativos para el eje Y
        int32_t targetY = y * (STEPS_PER_REV / 360.0); // Convertir a pasos
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f7ff f990 	bl	8000428 <__aeabi_f2d>
 8001108:	a35b      	add	r3, pc, #364	@ (adr r3, 8001278 <moveAxes+0x200>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff f9e3 	bl	80004d8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fc77 	bl	8000a0c <__aeabi_d2iz>
 800111e:	4603      	mov	r3, r0
 8001120:	64bb      	str	r3, [r7, #72]	@ 0x48
        ySteps = targetY - currentY;
 8001122:	4b58      	ldr	r3, [pc, #352]	@ (8001284 <moveAxes+0x20c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	65bb      	str	r3, [r7, #88]	@ 0x58
        yDir = (ySteps >= 0);
 800112c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800112e:	43db      	mvns	r3, r3
 8001130:	0fdb      	lsrs	r3, r3, #31
 8001132:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        ySteps = abs(ySteps);
 8001136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	65bb      	str	r3, [r7, #88]	@ 0x58
        currentY = targetY; // Actualizar posición actual
 8001140:	4a50      	ldr	r2, [pc, #320]	@ (8001284 <moveAxes+0x20c>)
 8001142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001144:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(z)) {
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fcf7 	bl	8000b3c <__aeabi_fcmpun>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d121      	bne.n	8001198 <moveAxes+0x120>
        // Calcular pasos relativos para el eje Z
        int32_t targetZ = z * (STEPS_PER_REV / 360.0); // Convertir a pasos
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f967 	bl	8000428 <__aeabi_f2d>
 800115a:	a347      	add	r3, pc, #284	@ (adr r3, 8001278 <moveAxes+0x200>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fc4e 	bl	8000a0c <__aeabi_d2iz>
 8001170:	4603      	mov	r3, r0
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
        zSteps = targetZ - currentZ;
 8001174:	4b44      	ldr	r3, [pc, #272]	@ (8001288 <moveAxes+0x210>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	657b      	str	r3, [r7, #84]	@ 0x54
        zDir = (zSteps >= 0);
 800117e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001180:	43db      	mvns	r3, r3
 8001182:	0fdb      	lsrs	r3, r3, #31
 8001184:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        zSteps = abs(zSteps);
 8001188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800118a:	2b00      	cmp	r3, #0
 800118c:	bfb8      	it	lt
 800118e:	425b      	neglt	r3, r3
 8001190:	657b      	str	r3, [r7, #84]	@ 0x54
        currentZ = targetZ; // Actualizar posición actual
 8001192:	4a3d      	ldr	r2, [pc, #244]	@ (8001288 <moveAxes+0x210>)
 8001194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001196:	6013      	str	r3, [r2, #0]
    }
    
    // Mover los motores
    if (xSteps > 0) {
 8001198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119a:	2b00      	cmp	r3, #0
 800119c:	dd1f      	ble.n	80011de <moveAxes+0x166>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo X: %ld pasos, dir: %s\r\n", xSteps, xDir ? "horario" : "antihorario");
 800119e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <moveAxes+0x132>
 80011a6:	4b39      	ldr	r3, [pc, #228]	@ (800128c <moveAxes+0x214>)
 80011a8:	e000      	b.n	80011ac <moveAxes+0x134>
 80011aa:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <moveAxes+0x218>)
 80011ac:	f107 0010 	add.w	r0, r7, #16
 80011b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011b2:	4938      	ldr	r1, [pc, #224]	@ (8001294 <moveAxes+0x21c>)
 80011b4:	f008 fcce 	bl	8009b54 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffc7 	bl	8000150 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fa19 	bl	8008604 <CDC_Transmit_FS>
        X_move(xSteps, xDir);
 80011d2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80011d6:	4619      	mov	r1, r3
 80011d8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80011da:	f7ff fe51 	bl	8000e80 <X_move>
    }
    
    if (ySteps > 0) {
 80011de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd1f      	ble.n	8001224 <moveAxes+0x1ac>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Y: %ld pasos, dir: %s\r\n", ySteps, yDir ? "horario" : "antihorario");
 80011e4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <moveAxes+0x178>
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <moveAxes+0x214>)
 80011ee:	e000      	b.n	80011f2 <moveAxes+0x17a>
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <moveAxes+0x218>)
 80011f2:	f107 0010 	add.w	r0, r7, #16
 80011f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011f8:	4927      	ldr	r1, [pc, #156]	@ (8001298 <moveAxes+0x220>)
 80011fa:	f008 fcab 	bl	8009b54 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffa4 	bl	8000150 <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f007 f9f6 	bl	8008604 <CDC_Transmit_FS>
        Y_move(ySteps, yDir);
 8001218:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800121c:	4619      	mov	r1, r3
 800121e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001220:	f7ff fe74 	bl	8000f0c <Y_move>
    }
    
    if (zSteps > 0) {
 8001224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001226:	2b00      	cmp	r3, #0
 8001228:	dd1f      	ble.n	800126a <moveAxes+0x1f2>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Z: %ld pasos, dir: %s\r\n", zSteps, zDir ? "horario" : "antihorario");
 800122a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <moveAxes+0x1be>
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <moveAxes+0x214>)
 8001234:	e000      	b.n	8001238 <moveAxes+0x1c0>
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <moveAxes+0x218>)
 8001238:	f107 0010 	add.w	r0, r7, #16
 800123c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800123e:	4917      	ldr	r1, [pc, #92]	@ (800129c <moveAxes+0x224>)
 8001240:	f008 fc88 	bl	8009b54 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	4618      	mov	r0, r3
 800124a:	f7fe ff81 	bl	8000150 <strlen>
 800124e:	4603      	mov	r3, r0
 8001250:	b29a      	uxth	r2, r3
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f007 f9d3 	bl	8008604 <CDC_Transmit_FS>
        Z_move(zSteps, zDir);
 800125e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001262:	4619      	mov	r1, r3
 8001264:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001266:	f7ff fe97 	bl	8000f98 <Z_move>
    }
}
 800126a:	bf00      	nop
 800126c:	3760      	adds	r7, #96	@ 0x60
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	8e38e38e 	.word	0x8e38e38e
 800127c:	401638e3 	.word	0x401638e3
 8001280:	20000364 	.word	0x20000364
 8001284:	20000368 	.word	0x20000368
 8001288:	2000036c 	.word	0x2000036c
 800128c:	0800bd58 	.word	0x0800bd58
 8001290:	0800bd60 	.word	0x0800bd60
 8001294:	0800bd6c 	.word	0x0800bd6c
 8001298:	0800bd90 	.word	0x0800bd90
 800129c:	0800bdb4 	.word	0x0800bdb4

080012a0 <processGcode>:

void processGcode(const char* command) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    // char msg[100];
    // sprintf(msg, "Procesando: %s\r\n", command);
    // CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
    
    // Procesar comando G0 o G1 (movimientos)
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80012a8:	2202      	movs	r2, #2
 80012aa:	4922      	ldr	r1, [pc, #136]	@ (8001334 <processGcode+0x94>)
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f008 fccb 	bl	8009c48 <strncmp>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <processGcode+0x28>
 80012b8:	2202      	movs	r2, #2
 80012ba:	491f      	ldr	r1, [pc, #124]	@ (8001338 <processGcode+0x98>)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f008 fcc3 	bl	8009c48 <strncmp>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d119      	bne.n	80012fc <processGcode+0x5c>
        // Procesar movimiento
        float xPos = extractParameter(command, 'X');
 80012c8:	2158      	movs	r1, #88	@ 0x58
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff feb0 	bl	8001030 <extractParameter>
 80012d0:	6178      	str	r0, [r7, #20]
        float yPos = extractParameter(command, 'Y');
 80012d2:	2159      	movs	r1, #89	@ 0x59
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff feab 	bl	8001030 <extractParameter>
 80012da:	6138      	str	r0, [r7, #16]
        float zPos = extractParameter(command, 'Z');
 80012dc:	215a      	movs	r1, #90	@ 0x5a
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fea6 	bl	8001030 <extractParameter>
 80012e4:	60f8      	str	r0, [r7, #12]
        
        // Mover los ejes
        moveAxes(xPos, yPos, zPos);
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff fec4 	bl	8001078 <moveAxes>
        
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4812      	ldr	r0, [pc, #72]	@ (800133c <processGcode+0x9c>)
 80012f4:	f007 f986 	bl	8008604 <CDC_Transmit_FS>
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80012f8:	bf00      	nop
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
    }
    else {
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
    }
}
 80012fa:	e016      	b.n	800132a <processGcode+0x8a>
    else if (strncmp(command, "G28", 3) == 0) {
 80012fc:	2203      	movs	r2, #3
 80012fe:	4910      	ldr	r1, [pc, #64]	@ (8001340 <processGcode+0xa0>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f008 fca1 	bl	8009c48 <strncmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10a      	bne.n	8001322 <processGcode+0x82>
        CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 800130c:	2116      	movs	r1, #22
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <processGcode+0xa4>)
 8001310:	f007 f978 	bl	8008604 <CDC_Transmit_FS>
        performHoming();
 8001314:	f000 f952 	bl	80015bc <performHoming>
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 8001318:	2104      	movs	r1, #4
 800131a:	4808      	ldr	r0, [pc, #32]	@ (800133c <processGcode+0x9c>)
 800131c:	f007 f972 	bl	8008604 <CDC_Transmit_FS>
}
 8001320:	e003      	b.n	800132a <processGcode+0x8a>
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
 8001322:	2117      	movs	r1, #23
 8001324:	4808      	ldr	r0, [pc, #32]	@ (8001348 <processGcode+0xa8>)
 8001326:	f007 f96d 	bl	8008604 <CDC_Transmit_FS>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800bdd8 	.word	0x0800bdd8
 8001338:	0800bddc 	.word	0x0800bddc
 800133c:	0800bde0 	.word	0x0800bde0
 8001340:	0800bde8 	.word	0x0800bde8
 8001344:	0800bdec 	.word	0x0800bdec
 8001348:	0800be04 	.word	0x0800be04

0800134c <loop>:

void loop(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
    static uint32_t lastEndstopCheck = 0;
    static bool endstopXWasPressed = false; 
    static bool endstopYWasPressed = false;
    static bool endstopZWasPressed = false;
    
    uint32_t currentTime = HAL_GetTick();
 8001352:	f000 fc7f 	bl	8001c54 <HAL_GetTick>
 8001356:	6078      	str	r0, [r7, #4]
    
    // Verificar fines de carrera solo cada 10ms para evitar spam
    if (currentTime - lastEndstopCheck > 10) {
 8001358:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <loop+0x15c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b0a      	cmp	r3, #10
 8001362:	f240 808d 	bls.w	8001480 <loop+0x134>
        lastEndstopCheck = currentTime;
 8001366:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <loop+0x15c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
        
        // Fin de carrera X - solo mensaje cuando cambia de estado
        bool endstopX = (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 800136c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001370:	484e      	ldr	r0, [pc, #312]	@ (80014ac <loop+0x160>)
 8001372:	f000 ff2f 	bl	80021d4 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	70fb      	strb	r3, [r7, #3]
        if (endstopX && !endstopXWasPressed) {
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00e      	beq.n	80013a6 <loop+0x5a>
 8001388:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <loop+0x164>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <loop+0x5a>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X activado\r\n", 27);
 8001396:	211b      	movs	r1, #27
 8001398:	4846      	ldr	r0, [pc, #280]	@ (80014b4 <loop+0x168>)
 800139a:	f007 f933 	bl	8008604 <CDC_Transmit_FS>
            // Opcional: detener motor X o hacer homing
            // X_move(100, false); // Retroceder 100 pasos
            endstopXWasPressed = true;
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <loop+0x164>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e010      	b.n	80013c8 <loop+0x7c>
        } else if (!endstopX && endstopXWasPressed) {
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00a      	beq.n	80013c8 <loop+0x7c>
 80013b2:	4b3f      	ldr	r3, [pc, #252]	@ (80014b0 <loop+0x164>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <loop+0x7c>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera X desactivado\r\n", 30);
 80013ba:	211e      	movs	r1, #30
 80013bc:	483e      	ldr	r0, [pc, #248]	@ (80014b8 <loop+0x16c>)
 80013be:	f007 f921 	bl	8008604 <CDC_Transmit_FS>
            endstopXWasPressed = false;
 80013c2:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <loop+0x164>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Y
        bool endstopY = (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 80013c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013cc:	4837      	ldr	r0, [pc, #220]	@ (80014ac <loop+0x160>)
 80013ce:	f000 ff01 	bl	80021d4 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	70bb      	strb	r3, [r7, #2]
        if (endstopY && !endstopYWasPressed) {
 80013de:	78bb      	ldrb	r3, [r7, #2]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00e      	beq.n	8001402 <loop+0xb6>
 80013e4:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <loop+0x170>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	f083 0301 	eor.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <loop+0xb6>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y activado\r\n", 27);
 80013f2:	211b      	movs	r1, #27
 80013f4:	4832      	ldr	r0, [pc, #200]	@ (80014c0 <loop+0x174>)
 80013f6:	f007 f905 	bl	8008604 <CDC_Transmit_FS>
            endstopYWasPressed = true;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <loop+0x170>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e010      	b.n	8001424 <loop+0xd8>
        } else if (!endstopY && endstopYWasPressed) {
 8001402:	78bb      	ldrb	r3, [r7, #2]
 8001404:	f083 0301 	eor.w	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <loop+0xd8>
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <loop+0x170>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <loop+0xd8>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Y desactivado\r\n", 30);
 8001416:	211e      	movs	r1, #30
 8001418:	482a      	ldr	r0, [pc, #168]	@ (80014c4 <loop+0x178>)
 800141a:	f007 f8f3 	bl	8008604 <CDC_Transmit_FS>
            endstopYWasPressed = false;
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <loop+0x170>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
        }
        
        // Fin de carrera Z
        bool endstopZ = (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <loop+0x160>)
 800142a:	f000 fed3 	bl	80021d4 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	707b      	strb	r3, [r7, #1]
        if (endstopZ && !endstopZWasPressed) {
 800143a:	787b      	ldrb	r3, [r7, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <loop+0x112>
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <loop+0x17c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <loop+0x112>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z activado\r\n", 27);
 800144e:	211b      	movs	r1, #27
 8001450:	481e      	ldr	r0, [pc, #120]	@ (80014cc <loop+0x180>)
 8001452:	f007 f8d7 	bl	8008604 <CDC_Transmit_FS>
            endstopZWasPressed = true;
 8001456:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <loop+0x17c>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e010      	b.n	8001480 <loop+0x134>
        } else if (!endstopZ && endstopZWasPressed) {
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	f083 0301 	eor.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <loop+0x134>
 800146a:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <loop+0x17c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <loop+0x134>
            CDC_Transmit_FS((uint8_t*)"Fin de carrera Z desactivado\r\n", 30);
 8001472:	211e      	movs	r1, #30
 8001474:	4816      	ldr	r0, [pc, #88]	@ (80014d0 <loop+0x184>)
 8001476:	f007 f8c5 	bl	8008604 <CDC_Transmit_FS>
            endstopZWasPressed = false;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <loop+0x17c>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
        }
    }

    // Procesar comandos USB CDC - SOLO cuando hay un comando completo
    if (usbCommandComplete) {
 8001480:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <loop+0x188>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <loop+0x152>
        char debugMsg[120];
        sprintf(debugMsg, ">>> [%s]\r\n", usbBuffer);
        CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
        #endif
        
        processGcode(usbBuffer);
 8001488:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <loop+0x18c>)
 800148a:	f7ff ff09 	bl	80012a0 <processGcode>
        
        // IMPORTANTE: Resetear todo después de procesar
        usbBufferIndex = 0;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <loop+0x190>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8001494:	2264      	movs	r2, #100	@ 0x64
 8001496:	2100      	movs	r1, #0
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <loop+0x18c>)
 800149a:	f008 fbc0 	bl	8009c1e <memset>
    }
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200003d8 	.word	0x200003d8
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	200003dc 	.word	0x200003dc
 80014b4:	0800be1c 	.word	0x0800be1c
 80014b8:	0800be38 	.word	0x0800be38
 80014bc:	200003dd 	.word	0x200003dd
 80014c0:	0800be58 	.word	0x0800be58
 80014c4:	0800be74 	.word	0x0800be74
 80014c8:	200003de 	.word	0x200003de
 80014cc:	0800be94 	.word	0x0800be94
 80014d0:	0800beb0 	.word	0x0800beb0
 80014d4:	20000000 	.word	0x20000000
 80014d8:	20000370 	.word	0x20000370
 80014dc:	200003d4 	.word	0x200003d4

080014e0 <setup>:

void setup(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <setup+0x58>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <setup+0x58>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ee:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <setup+0x5c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a11      	ldr	r2, [pc, #68]	@ (800153c <setup+0x5c>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Habilita driver X
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001502:	480f      	ldr	r0, [pc, #60]	@ (8001540 <setup+0x60>)
 8001504:	f000 fe7d 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Y
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	480c      	ldr	r0, [pc, #48]	@ (8001540 <setup+0x60>)
 800150e:	f000 fe78 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Z
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001518:	480a      	ldr	r0, [pc, #40]	@ (8001544 <setup+0x64>)
 800151a:	f000 fe72 	bl	8002202 <HAL_GPIO_WritePin>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	4807      	ldr	r0, [pc, #28]	@ (8001540 <setup+0x60>)
 8001524:	f000 fe6d 	bl	8002202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <setup+0x60>)
 800152e:	f000 fe68 	bl	8002202 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000edf0 	.word	0xe000edf0
 800153c:	e0001000 	.word	0xe0001000
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40010800 	.word	0x40010800

08001548 <isEndstopPressed>:

// Función auxiliar para movimiento genérico (no utilizada actualmente)
// Se mantiene para compatibilidad futura

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
    switch(axis) {
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b5a      	cmp	r3, #90	@ 0x5a
 8001556:	d01e      	beq.n	8001596 <isEndstopPressed+0x4e>
 8001558:	2b5a      	cmp	r3, #90	@ 0x5a
 800155a:	dc28      	bgt.n	80015ae <isEndstopPressed+0x66>
 800155c:	2b58      	cmp	r3, #88	@ 0x58
 800155e:	d002      	beq.n	8001566 <isEndstopPressed+0x1e>
 8001560:	2b59      	cmp	r3, #89	@ 0x59
 8001562:	d00c      	beq.n	800157e <isEndstopPressed+0x36>
 8001564:	e023      	b.n	80015ae <isEndstopPressed+0x66>
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156a:	4813      	ldr	r0, [pc, #76]	@ (80015b8 <isEndstopPressed+0x70>)
 800156c:	f000 fe32 	bl	80021d4 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	e018      	b.n	80015b0 <isEndstopPressed+0x68>
        case 'Y':
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 800157e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001582:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <isEndstopPressed+0x70>)
 8001584:	f000 fe26 	bl	80021d4 <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	e00c      	b.n	80015b0 <isEndstopPressed+0x68>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159a:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <isEndstopPressed+0x70>)
 800159c:	f000 fe1a 	bl	80021d4 <HAL_GPIO_ReadPin>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	e000      	b.n	80015b0 <isEndstopPressed+0x68>
        default:
            return false;
 80015ae:	2300      	movs	r3, #0
    }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40010c00 	.word	0x40010c00

080015bc <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b098      	sub	sp, #96	@ 0x60
 80015c0:	af00      	add	r7, sp, #0
    char msg[80];
    
    // Enviar mensaje de inicio de homing
    CDC_Transmit_FS((uint8_t*)"Iniciando secuencia de homingg...\r\n", 34);
 80015c2:	2122      	movs	r1, #34	@ 0x22
 80015c4:	48bb      	ldr	r0, [pc, #748]	@ (80018b4 <performHoming+0x2f8>)
 80015c6:	f007 f81d 	bl	8008604 <CDC_Transmit_FS>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(msg, "Fase 1: Buscando finales de carrera...\r\n");
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	49ba      	ldr	r1, [pc, #744]	@ (80018b8 <performHoming+0x2fc>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f008 fac0 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fdba 	bl	8000150 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 f80d 	bl	8008604 <CDC_Transmit_FS>
    
    // Homing del eje X
    sprintf(msg, "Homing eje X...\r\n");
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	49b3      	ldr	r1, [pc, #716]	@ (80018bc <performHoming+0x300>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 fab0 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fdaa 	bl	8000150 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29a      	uxth	r2, r3
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f006 fffd 	bl	8008604 <CDC_Transmit_FS>

    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 800160a:	2200      	movs	r2, #0
 800160c:	2180      	movs	r1, #128	@ 0x80
 800160e:	48ac      	ldr	r0, [pc, #688]	@ (80018c0 <performHoming+0x304>)
 8001610:	f000 fdf7 	bl	8002202 <HAL_GPIO_WritePin>
    // Mover hacia el final de carrera X (dirección negativa)
    while (!isEndstopPressed('X')) {
 8001614:	e006      	b.n	8001624 <performHoming+0x68>
        X_stepOnce();
 8001616:	f7ff fbf3 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 800161a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fbc8 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('X')) {
 8001624:	2058      	movs	r0, #88	@ 0x58
 8001626:	f7ff ff8f 	bl	8001548 <isEndstopPressed>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ef      	bne.n	8001616 <performHoming+0x5a>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001636:	2201      	movs	r2, #1
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	48a1      	ldr	r0, [pc, #644]	@ (80018c0 <performHoming+0x304>)
 800163c:	f000 fde1 	bl	8002202 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001640:	2300      	movs	r3, #0
 8001642:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001644:	e012      	b.n	800166c <performHoming+0xb0>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001646:	2058      	movs	r0, #88	@ 0x58
 8001648:	f7ff ff7e 	bl	8001548 <isEndstopPressed>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <performHoming+0xb8>
        X_stepOnce();
 8001658:	f7ff fbd2 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 800165c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fba7 	bl	8000db4 <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001668:	3301      	adds	r3, #1
 800166a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800166c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166e:	2b09      	cmp	r3, #9
 8001670:	dde9      	ble.n	8001646 <performHoming+0x8a>
 8001672:	e000      	b.n	8001676 <performHoming+0xba>
        if (!isEndstopPressed('X')) break; // Salir cuando se libere el endstop
 8001674:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001676:	2200      	movs	r2, #0
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	4891      	ldr	r0, [pc, #580]	@ (80018c0 <performHoming+0x304>)
 800167c:	f000 fdc1 	bl	8002202 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('X')) {
 8001680:	e00a      	b.n	8001698 <performHoming+0xdc>
        X_stepOnce();
 8001682:	f7ff fbbd 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001686:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800168a:	461a      	mov	r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fb8e 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('X')) {
 8001698:	2058      	movs	r0, #88	@ 0x58
 800169a:	f7ff ff55 	bl	8001548 <isEndstopPressed>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1eb      	bne.n	8001682 <performHoming+0xc6>
    }
    
    currentX = 0; // Establecer posición home
 80016aa:	4b86      	ldr	r3, [pc, #536]	@ (80018c4 <performHoming+0x308>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje XX en posición home\r\n");
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4985      	ldr	r1, [pc, #532]	@ (80018c8 <performHoming+0x30c>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f008 fa4d 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fd47 	bl	8000150 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f006 ff9a 	bl	8008604 <CDC_Transmit_FS>
    
    // Homing del eje Y
    sprintf(msg, "Homing eje Y...\r\n");
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	497e      	ldr	r1, [pc, #504]	@ (80018cc <performHoming+0x310>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f008 fa3d 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd37 	bl	8000150 <strlen>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 ff8a 	bl	8008604 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Y (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 80016f0:	2200      	movs	r2, #0
 80016f2:	2108      	movs	r1, #8
 80016f4:	4872      	ldr	r0, [pc, #456]	@ (80018c0 <performHoming+0x304>)
 80016f6:	f000 fd84 	bl	8002202 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 80016fa:	e006      	b.n	800170a <performHoming+0x14e>
        Y_stepOnce();
 80016fc:	f7ff fb94 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001700:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb55 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('Y')) {
 800170a:	2059      	movs	r0, #89	@ 0x59
 800170c:	f7ff ff1c 	bl	8001548 <isEndstopPressed>
 8001710:	4603      	mov	r3, r0
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ef      	bne.n	80016fc <performHoming+0x140>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 800171c:	2201      	movs	r2, #1
 800171e:	2108      	movs	r1, #8
 8001720:	4867      	ldr	r0, [pc, #412]	@ (80018c0 <performHoming+0x304>)
 8001722:	f000 fd6e 	bl	8002202 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001726:	2300      	movs	r3, #0
 8001728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800172a:	e012      	b.n	8001752 <performHoming+0x196>
        if (!isEndstopPressed('Y')) break;
 800172c:	2059      	movs	r0, #89	@ 0x59
 800172e:	f7ff ff0b 	bl	8001548 <isEndstopPressed>
 8001732:	4603      	mov	r3, r0
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <performHoming+0x19e>
        Y_stepOnce();
 800173e:	f7ff fb73 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001742:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fb34 	bl	8000db4 <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 800174c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800174e:	3301      	adds	r3, #1
 8001750:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001754:	2b09      	cmp	r3, #9
 8001756:	dde9      	ble.n	800172c <performHoming+0x170>
 8001758:	e000      	b.n	800175c <performHoming+0x1a0>
        if (!isEndstopPressed('Y')) break;
 800175a:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Y
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 800175c:	2200      	movs	r2, #0
 800175e:	2108      	movs	r1, #8
 8001760:	4857      	ldr	r0, [pc, #348]	@ (80018c0 <performHoming+0x304>)
 8001762:	f000 fd4e 	bl	8002202 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001766:	e00a      	b.n	800177e <performHoming+0x1c2>
        Y_stepOnce();
 8001768:	f7ff fb5e 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 800176c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001770:	461a      	mov	r2, r3
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb1b 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('Y')) {
 800177e:	2059      	movs	r0, #89	@ 0x59
 8001780:	f7ff fee2 	bl	8001548 <isEndstopPressed>
 8001784:	4603      	mov	r3, r0
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1eb      	bne.n	8001768 <performHoming+0x1ac>
    }
    
    currentY = 0; // Establecer posición home
 8001790:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <performHoming+0x314>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Y en posición home\r\n");
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	494e      	ldr	r1, [pc, #312]	@ (80018d4 <performHoming+0x318>)
 800179a:	4618      	mov	r0, r3
 800179c:	f008 f9da 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fcd4 	bl	8000150 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 ff27 	bl	8008604 <CDC_Transmit_FS>
    
    // Homing del eje Z
    sprintf(msg, "Homing eje Z...\r\n");
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4947      	ldr	r1, [pc, #284]	@ (80018d8 <performHoming+0x31c>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f008 f9ca 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fcc4 	bl	8000150 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 ff17 	bl	8008604 <CDC_Transmit_FS>
    
    // Mover hacia el final de carrera Z (dirección negativa)
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017dc:	483f      	ldr	r0, [pc, #252]	@ (80018dc <performHoming+0x320>)
 80017de:	f000 fd10 	bl	8002202 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 80017e2:	e006      	b.n	80017f2 <performHoming+0x236>
        Z_stepOnce();
 80017e4:	f7ff fb36 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 80017e8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fae1 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('Z')) {
 80017f2:	205a      	movs	r0, #90	@ 0x5a
 80017f4:	f7ff fea8 	bl	8001548 <isEndstopPressed>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f083 0301 	eor.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ef      	bne.n	80017e4 <performHoming+0x228>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
    }
    
    // Retroceder un poco del final de carrera Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800180a:	4834      	ldr	r0, [pc, #208]	@ (80018dc <performHoming+0x320>)
 800180c:	f000 fcf9 	bl	8002202 <HAL_GPIO_WritePin>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001810:	2300      	movs	r3, #0
 8001812:	657b      	str	r3, [r7, #84]	@ 0x54
 8001814:	e012      	b.n	800183c <performHoming+0x280>
        if (!isEndstopPressed('Z')) break;
 8001816:	205a      	movs	r0, #90	@ 0x5a
 8001818:	f7ff fe96 	bl	8001548 <isEndstopPressed>
 800181c:	4603      	mov	r3, r0
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10d      	bne.n	8001844 <performHoming+0x288>
        Z_stepOnce();
 8001828:	f7ff fb14 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 800182c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fabf 	bl	8000db4 <delay_us>
    for (int i = 0; i < 10; i++) { // Retroceder 50 pasos
 8001836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001838:	3301      	adds	r3, #1
 800183a:	657b      	str	r3, [r7, #84]	@ 0x54
 800183c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800183e:	2b09      	cmp	r3, #9
 8001840:	dde9      	ble.n	8001816 <performHoming+0x25a>
 8001842:	e000      	b.n	8001846 <performHoming+0x28a>
        if (!isEndstopPressed('Z')) break;
 8001844:	bf00      	nop
    }
    
    // FASE 2: Movimiento lento de precisión para Z
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800184c:	4823      	ldr	r0, [pc, #140]	@ (80018dc <performHoming+0x320>)
 800184e:	f000 fcd8 	bl	8002202 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001852:	e00a      	b.n	800186a <performHoming+0x2ae>
        Z_stepOnce();
 8001854:	f7ff fafe 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001858:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff faa5 	bl	8000db4 <delay_us>
    while (!isEndstopPressed('Z')) {
 800186a:	205a      	movs	r0, #90	@ 0x5a
 800186c:	f7ff fe6c 	bl	8001548 <isEndstopPressed>
 8001870:	4603      	mov	r3, r0
 8001872:	f083 0301 	eor.w	r3, r3, #1
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1eb      	bne.n	8001854 <performHoming+0x298>
    }
    
    currentZ = 0; // Establecer posición home
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <performHoming+0x324>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
    sprintf(msg, "Eje Z en posición home\r\n");
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4917      	ldr	r1, [pc, #92]	@ (80018e4 <performHoming+0x328>)
 8001886:	4618      	mov	r0, r3
 8001888:	f008 f964 	bl	8009b54 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fc5e 	bl	8000150 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f006 feb1 	bl	8008604 <CDC_Transmit_FS>
    
    // Mensaje final
    CDC_Transmit_FS((uint8_t*)"Homing completado. Todos los ejes en posición home.\r\n", 54);
 80018a2:	2136      	movs	r1, #54	@ 0x36
 80018a4:	4810      	ldr	r0, [pc, #64]	@ (80018e8 <performHoming+0x32c>)
 80018a6:	f006 fead 	bl	8008604 <CDC_Transmit_FS>
}
 80018aa:	bf00      	nop
 80018ac:	3760      	adds	r7, #96	@ 0x60
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	0800bed0 	.word	0x0800bed0
 80018b8:	0800bef4 	.word	0x0800bef4
 80018bc:	0800bf20 	.word	0x0800bf20
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	20000364 	.word	0x20000364
 80018c8:	0800bf34 	.word	0x0800bf34
 80018cc:	0800bf50 	.word	0x0800bf50
 80018d0:	20000368 	.word	0x20000368
 80018d4:	0800bf64 	.word	0x0800bf64
 80018d8:	0800bf80 	.word	0x0800bf80
 80018dc:	40010800 	.word	0x40010800
 80018e0:	2000036c 	.word	0x2000036c
 80018e4:	0800bf94 	.word	0x0800bf94
 80018e8:	0800bfb0 	.word	0x0800bfb0

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <Error_Handler+0x8>

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <HAL_MspInit+0x5c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_MspInit+0x5c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0e      	ldr	r2, [pc, #56]	@ (8001954 <HAL_MspInit+0x5c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_MspInit+0x60>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <HAL_MspInit+0x60>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 f940 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019ba:	f000 fd56 	bl	800246a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200010b0 	.word	0x200010b0

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_kill>:

int _kill(int pid, int sig)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e0:	f008 f98a 	bl	8009cf8 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2216      	movs	r2, #22
 80019e8:	601a      	str	r2, [r3, #0]
  return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_exit>:

void _exit (int status)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffe7 	bl	80019d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <_exit+0x12>

08001a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
  }

  return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
  }
  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa4:	605a      	str	r2, [r3, #4]
  return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <_isatty>:

int _isatty(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f008 f8f2 	bl	8009cf8 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20005000 	.word	0x20005000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200003e0 	.word	0x200003e0
 8001b48:	200016f8 	.word	0x200016f8

08001b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff fff8 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b5e:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b60:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b74:	4c09      	ldr	r4, [pc, #36]	@ (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f008 f8bf 	bl	8009d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b86:	f7ff f825 	bl	8000bd4 <main>
  bx lr
 8001b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8001b94:	0800c41c 	.word	0x0800c41c
  ldr r2, =_sbss
 8001b98:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001b9c:	200016f4 	.word	0x200016f4

08001ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC1_2_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <HAL_Init+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <HAL_Init+0x28>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f947 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fe9a 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f95f 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f927 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	@ (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000004 	.word	0x20000004
 8001c28:	2000000c 	.word	0x2000000c
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a03      	ldr	r2, [pc, #12]	@ (8001c50 <HAL_IncTick+0x20>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	200003e4 	.word	0x200003e4

08001c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	@ (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	200003e4 	.word	0x200003e4

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fff0 	bl	8001c54 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffe0 	bl	8001c54 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4906      	ldr	r1, [pc, #24]	@ (8001d48 <__NVIC_EnableIRQ+0x34>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	@ (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	@ (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff90 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff2d 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff42 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff35 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	@ 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e169      	b.n	80021b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8158 	bne.w	80021ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a9a      	ldr	r2, [pc, #616]	@ (800216c <HAL_GPIO_Init+0x2a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d05e      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f08:	4a98      	ldr	r2, [pc, #608]	@ (800216c <HAL_GPIO_Init+0x2a0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d875      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f0e:	4a98      	ldr	r2, [pc, #608]	@ (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d058      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f14:	4a96      	ldr	r2, [pc, #600]	@ (8002170 <HAL_GPIO_Init+0x2a4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d86f      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f1a:	4a96      	ldr	r2, [pc, #600]	@ (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d052      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f20:	4a94      	ldr	r2, [pc, #592]	@ (8002174 <HAL_GPIO_Init+0x2a8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d869      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f26:	4a94      	ldr	r2, [pc, #592]	@ (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04c      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a92      	ldr	r2, [pc, #584]	@ (8002178 <HAL_GPIO_Init+0x2ac>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d863      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f32:	4a92      	ldr	r2, [pc, #584]	@ (800217c <HAL_GPIO_Init+0x2b0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d046      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a90      	ldr	r2, [pc, #576]	@ (800217c <HAL_GPIO_Init+0x2b0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d85d      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d82a      	bhi.n	8001f98 <HAL_GPIO_Init+0xcc>
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d859      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f46:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <HAL_GPIO_Init+0x80>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fa1 	.word	0x08001fa1
 8001f54:	08001fb3 	.word	0x08001fb3
 8001f58:	08001ff5 	.word	0x08001ff5
 8001f5c:	08001ffb 	.word	0x08001ffb
 8001f60:	08001ffb 	.word	0x08001ffb
 8001f64:	08001ffb 	.word	0x08001ffb
 8001f68:	08001ffb 	.word	0x08001ffb
 8001f6c:	08001ffb 	.word	0x08001ffb
 8001f70:	08001ffb 	.word	0x08001ffb
 8001f74:	08001ffb 	.word	0x08001ffb
 8001f78:	08001ffb 	.word	0x08001ffb
 8001f7c:	08001ffb 	.word	0x08001ffb
 8001f80:	08001ffb 	.word	0x08001ffb
 8001f84:	08001ffb 	.word	0x08001ffb
 8001f88:	08001ffb 	.word	0x08001ffb
 8001f8c:	08001ffb 	.word	0x08001ffb
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	4a79      	ldr	r2, [pc, #484]	@ (8002180 <HAL_GPIO_Init+0x2b4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9e:	e02c      	b.n	8001ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e029      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e024      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e01f      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e01a      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e013      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	611a      	str	r2, [r3, #16]
          break;
 8001fe6:	e009      	b.n	8001ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	615a      	str	r2, [r3, #20]
          break;
 8001ff2:	e003      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          break;
 8001ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	@ 0xff
 8002000:	d801      	bhi.n	8002006 <HAL_GPIO_Init+0x13a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e001      	b.n	800200a <HAL_GPIO_Init+0x13e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2bff      	cmp	r3, #255	@ 0xff
 8002010:	d802      	bhi.n	8002018 <HAL_GPIO_Init+0x14c>
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x152>
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	3b08      	subs	r3, #8
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	210f      	movs	r1, #15
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80b1 	beq.w	80021ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204c:	4b4d      	ldr	r3, [pc, #308]	@ (8002184 <HAL_GPIO_Init+0x2b8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a4c      	ldr	r2, [pc, #304]	@ (8002184 <HAL_GPIO_Init+0x2b8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b4a      	ldr	r3, [pc, #296]	@ (8002184 <HAL_GPIO_Init+0x2b8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002064:	4a48      	ldr	r2, [pc, #288]	@ (8002188 <HAL_GPIO_Init+0x2bc>)
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a40      	ldr	r2, [pc, #256]	@ (800218c <HAL_GPIO_Init+0x2c0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d013      	beq.n	80020b8 <HAL_GPIO_Init+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3f      	ldr	r2, [pc, #252]	@ (8002190 <HAL_GPIO_Init+0x2c4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00d      	beq.n	80020b4 <HAL_GPIO_Init+0x1e8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a3e      	ldr	r2, [pc, #248]	@ (8002194 <HAL_GPIO_Init+0x2c8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d007      	beq.n	80020b0 <HAL_GPIO_Init+0x1e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002198 <HAL_GPIO_Init+0x2cc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_GPIO_Init+0x1e0>
 80020a8:	2303      	movs	r3, #3
 80020aa:	e006      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e004      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e002      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_GPIO_Init+0x1ee>
 80020b8:	2300      	movs	r3, #0
 80020ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020bc:	f002 0203 	and.w	r2, r2, #3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4093      	lsls	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ca:	492f      	ldr	r1, [pc, #188]	@ (8002188 <HAL_GPIO_Init+0x2bc>)
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d006      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e4:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	492c      	ldr	r1, [pc, #176]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	608b      	str	r3, [r1, #8]
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f2:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4928      	ldr	r1, [pc, #160]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4922      	ldr	r1, [pc, #136]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	491e      	ldr	r1, [pc, #120]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002134:	4b19      	ldr	r3, [pc, #100]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4918      	ldr	r1, [pc, #96]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	4914      	ldr	r1, [pc, #80]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d021      	beq.n	80021a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	490e      	ldr	r1, [pc, #56]	@ (800219c <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e021      	b.n	80021ae <HAL_GPIO_Init+0x2e2>
 800216a:	bf00      	nop
 800216c:	10320000 	.word	0x10320000
 8002170:	10310000 	.word	0x10310000
 8002174:	10220000 	.word	0x10220000
 8002178:	10210000 	.word	0x10210000
 800217c:	10120000 	.word	0x10120000
 8002180:	10110000 	.word	0x10110000
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40011000 	.word	0x40011000
 8002198:	40011400 	.word	0x40011400
 800219c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_GPIO_Init+0x304>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	4909      	ldr	r1, [pc, #36]	@ (80021d0 <HAL_GPIO_Init+0x304>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	3301      	adds	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f47f ae8e 	bne.w	8001ee0 <HAL_GPIO_Init+0x14>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	372c      	adds	r7, #44	@ 0x2c
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40010400 	.word	0x40010400

080021d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	887b      	ldrh	r3, [r7, #2]
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002212:	787b      	ldrb	r3, [r7, #1]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800221e:	e003      	b.n	8002228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	041a      	lsls	r2, r3, #16
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0e8      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f006 fb07 	bl	800886c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2203      	movs	r2, #3
 8002262:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f002 f9f6 	bl	8004662 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002280:	f002 f9cc 	bl	800461c <USB_CoreInit>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0bf      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f002 f9fa 	bl	8004696 <USB_SetCurrentMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b0      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e03e      	b.n	8002338 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3311      	adds	r3, #17
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	440b      	add	r3, r1
 80022dc:	3310      	adds	r3, #16
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3313      	adds	r3, #19
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3320      	adds	r3, #32
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3324      	adds	r3, #36	@ 0x24
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3bb      	bcc.n	80022ba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e044      	b.n	80023d2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	791b      	ldrb	r3, [r3, #4]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3b5      	bcc.n	8002348 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023e6:	f002 f962 	bl	80046ae <USB_DevInit>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00c      	b.n	8002416 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fbe1 	bl	8006bd6 <USB_DevDisconnect>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_PCD_Start+0x16>
 8002430:	2302      	movs	r3, #2
 8002432:	e016      	b.n	8002462 <HAL_PCD_Start+0x44>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f002 f8f8 	bl	8004636 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002446:	2101      	movs	r1, #1
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f006 fc82 	bl	8008d52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fbb5 	bl	8006bc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 fbb7 	bl	8006bea <USB_ReadInterrupts>
 800247c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb1a 	bl	8002ac2 <PCD_EP_ISR_Handler>

    return;
 800248e:	e119      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f006 fa55 	bl	8008962 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024b8:	2100      	movs	r1, #0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f905 	bl	80026ca <HAL_PCD_SetAddress>

    return;
 80024c0:	e100      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80024e4:	e0ee      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002508:	e0dc      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d027      	beq.n	8002564 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0204 	bic.w	r2, r2, #4
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	b292      	uxth	r2, r2
 8002540:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f006 fa45 	bl	80089d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800255c:	b292      	uxth	r2, r2
 800255e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002562:	e0af      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8083 	beq.w	8002676 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e010      	b.n	8002598 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	7ffb      	ldrb	r3, [r7, #31]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	441a      	add	r2, r3
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	b292      	uxth	r2, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	3320      	adds	r3, #32
 800258c:	443b      	add	r3, r7
 800258e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	3301      	adds	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	7ffb      	ldrb	r3, [r7, #31]
 800259a:	2b07      	cmp	r3, #7
 800259c:	d9eb      	bls.n	8002576 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	b292      	uxth	r2, r2
 80025ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80025ce:	bf00      	nop
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f6      	beq.n	80025d0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f4:	b292      	uxth	r2, r2
 80025f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	77fb      	strb	r3, [r7, #31]
 80025fe:	e00f      	b.n	8002620 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002600:	7ffb      	ldrb	r3, [r7, #31]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4611      	mov	r1, r2
 8002608:	7ffa      	ldrb	r2, [r7, #31]
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	440a      	add	r2, r1
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	3320      	adds	r3, #32
 8002612:	443b      	add	r3, r7
 8002614:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002618:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	3301      	adds	r3, #1
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	7ffb      	ldrb	r3, [r7, #31]
 8002622:	2b07      	cmp	r3, #7
 8002624:	d9ec      	bls.n	8002600 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800262e:	b29a      	uxth	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0208 	orr.w	r2, r2, #8
 8002638:	b292      	uxth	r2, r2
 800263a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002650:	b292      	uxth	r2, r2
 8002652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	b292      	uxth	r2, r2
 800266a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f006 f996 	bl	80089a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002674:	e026      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00f      	beq.n	80026a0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002692:	b292      	uxth	r2, r2
 8002694:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f006 f954 	bl	8008946 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800269e:	e011      	b.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026bc:	b292      	uxth	r2, r2
 80026be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80026c2:	bf00      	nop
  }
}
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_SetAddress+0x1a>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e012      	b.n	800270a <HAL_PCD_SetAddress+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fa4e 	bl	8006b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	4608      	mov	r0, r1
 800271c:	4611      	mov	r1, r2
 800271e:	461a      	mov	r2, r3
 8002720:	4603      	mov	r3, r0
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	460b      	mov	r3, r1
 8002726:	803b      	strh	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002734:	2b00      	cmp	r3, #0
 8002736:	da0e      	bge.n	8002756 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	3310      	adds	r3, #16
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	705a      	strb	r2, [r3, #1]
 8002754:	e00e      	b.n	8002774 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 0207 	and.w	r2, r3, #7
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002780:	883a      	ldrh	r2, [r7, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	78ba      	ldrb	r2, [r7, #2]
 800278a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800278c:	78bb      	ldrb	r3, [r7, #2]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d102      	bne.n	8002798 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_PCD_EP_Open+0x94>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e00e      	b.n	80027c4 <HAL_PCD_EP_Open+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 ff97 	bl	80046e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80027c2:	7afb      	ldrb	r3, [r7, #11]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da0e      	bge.n	80027fe <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 0207 	and.w	r2, r3, #7
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3310      	adds	r3, #16
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	705a      	strb	r2, [r3, #1]
 80027fc:	e00e      	b.n	800281c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 0207 	and.w	r2, r3, #7
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_EP_Close+0x6a>
 8002832:	2302      	movs	r3, #2
 8002834:	e00e      	b.n	8002854 <HAL_PCD_EP_Close+0x88>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f002 fb0f 	bl	8004e68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	460b      	mov	r3, r1
 800286a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800286c:	7afb      	ldrb	r3, [r7, #11]
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6979      	ldr	r1, [r7, #20]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fcc6 	bl	8005240 <USB_EPStartXfer>

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80028e0:	681b      	ldr	r3, [r3, #0]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	7afb      	ldrb	r3, [r7, #11]
 80028fe:	f003 0207 	and.w	r2, r3, #7
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3310      	adds	r3, #16
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2da      	uxtb	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6979      	ldr	r1, [r7, #20]
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fc78 	bl	8005240 <USB_EPStartXfer>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	7912      	ldrb	r2, [r2, #4]
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e04c      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da0e      	bge.n	800299e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	3310      	adds	r3, #16
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	705a      	strb	r2, [r3, #1]
 800299c:	e00c      	b.n	80029b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_PCD_EP_SetStall+0x7e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e01c      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 ffdb 	bl	80069a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f004 f900 	bl	8006c08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	7912      	ldrb	r2, [r2, #4]
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e040      	b.n	8002aba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da0e      	bge.n	8002a5e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 0207 	and.w	r2, r3, #7
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	3310      	adds	r3, #16
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	705a      	strb	r2, [r3, #1]
 8002a5c:	e00e      	b.n	8002a7c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 0207 	and.w	r2, r3, #7
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_PCD_EP_ClrStall+0x82>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e00e      	b.n	8002aba <HAL_PCD_EP_ClrStall+0xa0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 ffc9 	bl	8006a42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b096      	sub	sp, #88	@ 0x58
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aca:	e3bb      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ad4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ad8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002ae6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8175 	bne.w	8002dda <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002af0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d14e      	bne.n	8002b9a <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0c:	81fb      	strh	r3, [r7, #14]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3310      	adds	r3, #16
 8002b24:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	441a      	add	r2, r3
 8002b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b60:	2100      	movs	r1, #0
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f005 fed5 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7b5b      	ldrb	r3, [r3, #13]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8368 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
 8002b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8363 	bne.w	8003244 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	735a      	strb	r2, [r3, #13]
 8002b98:	e354      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ba0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d034      	beq.n	8002c22 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3306      	adds	r3, #6
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f004 f857 	bl	8006caa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c08:	4013      	ands	r3, r2
 8002c0a:	823b      	strh	r3, [r7, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	8a3a      	ldrh	r2, [r7, #16]
 8002c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c16:	b292      	uxth	r2, r2
 8002c18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f005 fe4c 	bl	80088b8 <HAL_PCD_SetupStageCallback>
 8002c20:	e310      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f280 830c 	bge.w	8003244 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c38:	4013      	ands	r3, r2
 8002c3a:	83fb      	strh	r3, [r7, #30]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	8bfa      	ldrh	r2, [r7, #30]
 8002c42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c46:	b292      	uxth	r2, r2
 8002c48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3306      	adds	r3, #6
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d019      	beq.n	8002cb2 <PCD_EP_ISR_Handler+0x1f0>
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8c:	6959      	ldr	r1, [r3, #20]
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f004 f807 	bl	8006caa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 fe15 	bl	80088dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002cbc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 82bd 	bne.w	8003244 <PCD_EP_ISR_Handler+0x782>
 8002cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cd6:	f000 82b5 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d10:	d91d      	bls.n	8002d4e <PCD_EP_ISR_Handler+0x28c>
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <PCD_EP_ISR_Handler+0x26a>
 8002d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	e026      	b.n	8002d9c <PCD_EP_ISR_Handler+0x2da>
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <PCD_EP_ISR_Handler+0x2aa>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	e017      	b.n	8002d9c <PCD_EP_ISR_Handler+0x2da>
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <PCD_EP_ISR_Handler+0x2c4>
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d82:	3301      	adds	r3, #1
 8002d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dac:	827b      	strh	r3, [r7, #18]
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002db4:	827b      	strh	r3, [r7, #18]
 8002db6:	8a7b      	ldrh	r3, [r7, #18]
 8002db8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002dbc:	827b      	strh	r3, [r7, #18]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	8a7b      	ldrh	r3, [r7, #18]
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]
 8002dd8:	e234      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f280 80fc 	bge.w	8002ff0 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002e0e:	4013      	ands	r3, r2
 8002e10:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e2e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e46:	7b1b      	ldrb	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d125      	bne.n	8002e98 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3306      	adds	r3, #6
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e74:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002e78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8092 	beq.w	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e88:	6959      	ldr	r1, [r3, #20]
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	88da      	ldrh	r2, [r3, #6]
 8002e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e92:	f003 ff0a 	bl	8006caa <USB_ReadPMA>
 8002e96:	e086      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9a:	78db      	ldrb	r3, [r3, #3]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d10a      	bne.n	8002eb6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f9d9 	bl	8003260 <HAL_PCD_EP_DB_Receive>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002eb4:	e077      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ef2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d024      	beq.n	8002f5e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02e      	beq.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	6959      	ldr	r1, [r3, #20]
 8002f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f52:	891a      	ldrh	r2, [r3, #8]
 8002f54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f58:	f003 fea7 	bl	8006caa <USB_ReadPMA>
 8002f5c:	e023      	b.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	3306      	adds	r3, #6
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	6959      	ldr	r1, [r3, #20]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	895a      	ldrh	r2, [r3, #10]
 8002f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fa2:	f003 fe82 	bl	8006caa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fae:	441a      	add	r2, r3
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fbc:	441a      	add	r2, r3
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <PCD_EP_ISR_Handler+0x514>
 8002fca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d206      	bcs.n	8002fe4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f005 fc7d 	bl	80088dc <HAL_PCD_DataOutStageCallback>
 8002fe2:	e005      	b.n	8002ff0 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 f928 	bl	8005240 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8123 	beq.w	8003244 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ffe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	3310      	adds	r3, #16
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800304a:	b29b      	uxth	r3, r3
 800304c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	78db      	ldrb	r3, [r3, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 80a2 	bne.w	800319c <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	7b1b      	ldrb	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8093 	beq.w	800318e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003068:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800306c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d046      	beq.n	8003102 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d126      	bne.n	80030ca <PCD_EP_ISR_Handler+0x608>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	4413      	add	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	011a      	lsls	r2, r3, #4
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	4413      	add	r3, r2
 800309e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e061      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d15d      	bne.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	4413      	add	r3, r2
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	2200      	movs	r2, #0
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e045      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d126      	bne.n	800315e <PCD_EP_ISR_Handler+0x69c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	4413      	add	r3, r2
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011a      	lsls	r2, r3, #4
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	4413      	add	r3, r2
 8003132:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003142:	b29a      	uxth	r2, r3
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e017      	b.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 800315e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d113      	bne.n	800318e <PCD_EP_ISR_Handler+0x6cc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003174:	4413      	add	r3, r2
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	011a      	lsls	r2, r3, #4
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003180:	4413      	add	r3, r2
 8003182:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318a:	2200      	movs	r2, #0
 800318c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f005 fbbc 	bl	8008912 <HAL_PCD_DataInStageCallback>
 800319a:	e053      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800319c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d146      	bne.n	8003236 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	3302      	adds	r3, #2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031dc:	429a      	cmp	r2, r3
 80031de:	d907      	bls.n	80031f0 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80031e8:	1ad2      	subs	r2, r2, r3
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	619a      	str	r2, [r3, #24]
 80031ee:	e002      	b.n	80031f6 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80031f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f005 fb84 	bl	8008912 <HAL_PCD_DataInStageCallback>
 800320a:	e01b      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003214:	441a      	add	r2, r3
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800321a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003222:	441a      	add	r2, r3
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800322e:	4618      	mov	r0, r3
 8003230:	f002 f806 	bl	8005240 <USB_EPStartXfer>
 8003234:	e006      	b.n	8003244 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800323a:	461a      	mov	r2, r3
 800323c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f91b 	bl	800347a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800324c:	b29b      	uxth	r3, r3
 800324e:	b21b      	sxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f6ff ac3b 	blt.w	8002acc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3758      	adds	r7, #88	@ 0x58
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d07e      	beq.n	8003376 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	3302      	adds	r3, #2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	8b7b      	ldrh	r3, [r7, #26]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d306      	bcc.n	80032ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	8b7b      	ldrh	r3, [r7, #26]
 80032b2:	1ad2      	subs	r2, r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	619a      	str	r2, [r3, #24]
 80032b8:	e002      	b.n	80032c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d123      	bne.n	8003310 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	833b      	strh	r3, [r7, #24]
 80032e4:	8b3b      	ldrh	r3, [r7, #24]
 80032e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032ea:	833b      	strh	r3, [r7, #24]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	8b3b      	ldrh	r3, [r7, #24]
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d01f      	beq.n	800335a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003334:	82fb      	strh	r3, [r7, #22]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	8afb      	ldrh	r3, [r7, #22]
 8003346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800334a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800334e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800335a:	8b7b      	ldrh	r3, [r7, #26]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8087 	beq.w	8003470 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	891a      	ldrh	r2, [r3, #8]
 800336e:	8b7b      	ldrh	r3, [r7, #26]
 8003370:	f003 fc9b 	bl	8006caa <USB_ReadPMA>
 8003374:	e07c      	b.n	8003470 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	3306      	adds	r3, #6
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	8b7b      	ldrh	r3, [r7, #26]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d306      	bcc.n	80033b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	e002      	b.n	80033be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d123      	bne.n	800340e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e0:	83fb      	strh	r3, [r7, #30]
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033e8:	83fb      	strh	r3, [r7, #30]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003402:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800340a:	b29b      	uxth	r3, r3
 800340c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11f      	bne.n	8003458 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800342e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003432:	83bb      	strh	r3, [r7, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	441a      	add	r2, r3
 8003442:	8bbb      	ldrh	r3, [r7, #28]
 8003444:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003448:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800344c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003450:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003454:	b29b      	uxth	r3, r3
 8003456:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003458:	8b7b      	ldrh	r3, [r7, #26]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6959      	ldr	r1, [r3, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	895a      	ldrh	r2, [r3, #10]
 800346a:	8b7b      	ldrh	r3, [r7, #26]
 800346c:	f003 fc1d 	bl	8006caa <USB_ReadPMA>
    }
  }

  return count;
 8003470:	8b7b      	ldrh	r3, [r7, #26]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b0a4      	sub	sp, #144	@ 0x90
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 81dd 	beq.w	800384e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	3302      	adds	r3, #2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d907      	bls.n	80034dc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034d4:	1ad2      	subs	r2, r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	e002      	b.n	80034e2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 80b9 	bne.w	800365e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d126      	bne.n	8003542 <HAL_PCD_EP_DB_Transmit+0xc8>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	4413      	add	r3, r2
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	011a      	lsls	r2, r3, #4
 8003512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003514:	4413      	add	r3, r2
 8003516:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003526:	b29a      	uxth	r2, r3
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353a:	b29a      	uxth	r2, r3
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	801a      	strh	r2, [r3, #0]
 8003540:	e01a      	b.n	8003578 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d116      	bne.n	8003578 <HAL_PCD_EP_DB_Transmit+0xfe>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	4413      	add	r3, r2
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	011a      	lsls	r2, r3, #4
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	4413      	add	r3, r2
 800356c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003570:	633b      	str	r3, [r7, #48]	@ 0x30
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	785b      	ldrb	r3, [r3, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d126      	bne.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	011a      	lsls	r2, r3, #4
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	801a      	strh	r2, [r3, #0]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	e017      	b.n	8003604 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d113      	bne.n	8003604 <HAL_PCD_EP_DB_Transmit+0x18a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	4413      	add	r3, r2
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	011a      	lsls	r2, r3, #4
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	4413      	add	r3, r2
 80035f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	2200      	movs	r2, #0
 8003602:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f005 f981 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 82fc 	beq.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003636:	82fb      	strh	r3, [r7, #22]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800364c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003658:	b29b      	uxth	r3, r3
 800365a:	8013      	strh	r3, [r2, #0]
 800365c:	e2da      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d021      	beq.n	80036ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	441a      	add	r2, r3
 8003694:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 82ae 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036c0:	441a      	add	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036ce:	441a      	add	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d30b      	bcc.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6a1a      	ldr	r2, [r3, #32]
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f0:	1ad2      	subs	r2, r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	621a      	str	r2, [r3, #32]
 80036f6:	e017      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003700:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003710:	e00a      	b.n	8003728 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d165      	bne.n	80037fc <HAL_PCD_EP_DB_Transmit+0x382>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003744:	4413      	add	r3, r2
 8003746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	011a      	lsls	r2, r3, #4
 800374e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003750:	4413      	add	r3, r2
 8003752:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003762:	b29a      	uxth	r2, r3
 8003764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003766:	801a      	strh	r2, [r3, #0]
 8003768:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800376c:	2b3e      	cmp	r3, #62	@ 0x3e
 800376e:	d91d      	bls.n	80037ac <HAL_PCD_EP_DB_Transmit+0x332>
 8003770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003778:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x310>
 8003784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003786:	3b01      	subs	r3, #1
 8003788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29a      	uxth	r2, r3
 8003790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003792:	b29b      	uxth	r3, r3
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	b29b      	uxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	801a      	strh	r2, [r3, #0]
 80037aa:	e044      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_PCD_EP_DB_Transmit+0x350>
 80037b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	e035      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80037de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e0:	3301      	adds	r3, #1
 80037e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	029b      	lsls	r3, r3, #10
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	e01c      	b.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d118      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	647b      	str	r3, [r7, #68]	@ 0x44
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	4413      	add	r3, r2
 800381a:	647b      	str	r3, [r7, #68]	@ 0x44
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	011a      	lsls	r2, r3, #4
 8003822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003824:	4413      	add	r3, r2
 8003826:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800382a:	643b      	str	r3, [r7, #64]	@ 0x40
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003830:	b29a      	uxth	r2, r3
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6959      	ldr	r1, [r3, #20]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	891a      	ldrh	r2, [r3, #8]
 8003842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003846:	b29b      	uxth	r3, r3
 8003848:	f003 f9e9 	bl	8006c1e <USB_WritePMA>
 800384c:	e1e2      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	3306      	adds	r3, #6
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003876:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003882:	429a      	cmp	r2, r3
 8003884:	d307      	bcc.n	8003896 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	619a      	str	r2, [r3, #24]
 8003894:	e002      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 80c0 	bne.w	8003a26 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_PCD_EP_DB_Transmit+0x482>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038c2:	4413      	add	r3, r2
 80038c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	011a      	lsls	r2, r3, #4
 80038cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038ce:	4413      	add	r3, r2
 80038d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e01a      	b.n	8003932 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d116      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	667b      	str	r3, [r7, #100]	@ 0x64
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003912:	b29b      	uxth	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003918:	4413      	add	r3, r2
 800391a:	667b      	str	r3, [r7, #100]	@ 0x64
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003924:	4413      	add	r3, r2
 8003926:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800392a:	663b      	str	r3, [r7, #96]	@ 0x60
 800392c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800392e:	2200      	movs	r2, #0
 8003930:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	677b      	str	r3, [r7, #116]	@ 0x74
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d12b      	bne.n	8003998 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003954:	4413      	add	r3, r2
 8003956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003960:	4413      	add	r3, r2
 8003962:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800396a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	b29a      	uxth	r2, r3
 8003978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800397c:	801a      	strh	r2, [r3, #0]
 800397e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800398a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398e:	b29a      	uxth	r2, r3
 8003990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e017      	b.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d113      	bne.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ae:	4413      	add	r3, r2
 80039b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	011a      	lsls	r2, r3, #4
 80039b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ba:	4413      	add	r3, r2
 80039bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80039c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c4:	2200      	movs	r2, #0
 80039c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f004 ff9f 	bl	8008912 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 811a 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8013      	strh	r3, [r2, #0]
 8003a24:	e0f6      	b.n	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d121      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	f040 80ca 	bne.w	8003c14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a88:	441a      	add	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	69da      	ldr	r2, [r3, #28]
 8003a92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a96:	441a      	add	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d30b      	bcc.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ab8:	1ad2      	subs	r2, r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	621a      	str	r2, [r3, #32]
 8003abe:	e017      	b.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003ac8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003ad8:	e00a      	b.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	785b      	ldrb	r3, [r3, #1]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d165      	bne.n	8003bca <HAL_PCD_EP_DB_Transmit+0x750>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b12:	4413      	add	r3, r2
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	011a      	lsls	r2, r3, #4
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b1e:	4413      	add	r3, r2
 8003b20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b3c:	d91d      	bls.n	8003b7a <HAL_PCD_EP_DB_Transmit+0x700>
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003b52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b54:	3b01      	subs	r3, #1
 8003b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4313      	orrs	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e041      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e032      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_PCD_EP_DB_Transmit+0x738>
 8003bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bae:	3301      	adds	r3, #1
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	e019      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d115      	bne.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x784>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	4413      	add	r3, r2
 8003be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	011a      	lsls	r2, r3, #4
 8003bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bec:	4413      	add	r3, r2
 8003bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6959      	ldr	r1, [r3, #20]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	895a      	ldrh	r2, [r3, #10]
 8003c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f003 f805 	bl	8006c1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2e:	82bb      	strh	r3, [r7, #20]
 8003c30:	8abb      	ldrh	r3, [r7, #20]
 8003c32:	f083 0310 	eor.w	r3, r3, #16
 8003c36:	82bb      	strh	r3, [r7, #20]
 8003c38:	8abb      	ldrh	r3, [r7, #20]
 8003c3a:	f083 0320 	eor.w	r3, r3, #32
 8003c3e:	82bb      	strh	r3, [r7, #20]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	8abb      	ldrh	r3, [r7, #20]
 8003c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3790      	adds	r7, #144	@ 0x90
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	817b      	strh	r3, [r7, #10]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	f003 0207 	and.w	r2, r3, #7
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e009      	b.n	8003cb8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca4:	897a      	ldrh	r2, [r7, #10]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	80da      	strh	r2, [r3, #6]
 8003ccc:	e00b      	b.n	8003ce6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e272      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8087 	beq.w	8003e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d14:	4b92      	ldr	r3, [pc, #584]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d20:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d112      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
 8003d2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3a:	4b89      	ldr	r3, [pc, #548]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x12c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d168      	bne.n	8003e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e24c      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x76>
 8003d5c:	4b80      	ldr	r3, [pc, #512]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a7f      	ldr	r2, [pc, #508]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x98>
 8003d72:	4b7b      	ldr	r3, [pc, #492]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7a      	ldr	r2, [pc, #488]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b78      	ldr	r3, [pc, #480]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a77      	ldr	r2, [pc, #476]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0xbc>
 8003d96:	4b72      	ldr	r3, [pc, #456]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a71      	ldr	r2, [pc, #452]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6f      	ldr	r3, [pc, #444]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6e      	ldr	r2, [pc, #440]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xd4>
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6a      	ldr	r2, [pc, #424]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b68      	ldr	r3, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a67      	ldr	r2, [pc, #412]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd ff40 	bl	8001c54 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd ff3c 	bl	8001c54 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e200      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5d      	ldr	r3, [pc, #372]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xe4>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd ff2c 	bl	8001c54 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd ff28 	bl	8001c54 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1ec      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b53      	ldr	r3, [pc, #332]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x10c>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e3a:	4b49      	ldr	r3, [pc, #292]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
 8003e46:	4b46      	ldr	r3, [pc, #280]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c0      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4939      	ldr	r1, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fd fee1 	bl	8001c54 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd fedd 	bl	8001c54 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4927      	ldr	r1, [pc, #156]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b26      	ldr	r3, [pc, #152]	@ (8003f64 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fec0 	bl	8001c54 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd febc 	bl	8001c54 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e180      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03a      	beq.n	8003f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d019      	beq.n	8003f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fd fea0 	bl	8001c54 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd fe9c 	bl	8001c54 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e160      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f000 fa9c 	bl	8004474 <RCC_Delay>
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fd fe86 	bl	8001c54 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00f      	b.n	8003f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fe82 	bl	8001c54 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d908      	bls.n	8003f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e146      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000
 8003f64:	42420000 	.word	0x42420000
 8003f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e9      	bne.n	8003f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a6 	beq.w	80040d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	61d3      	str	r3, [r2, #28]
 8003fa2:	4b85      	ldr	r3, [pc, #532]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b82      	ldr	r3, [pc, #520]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fe43 	bl	8001c54 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd fe3f 	bl	8001c54 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	@ 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e103      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <HAL_RCC_OscConfig+0x4c8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x312>
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6213      	str	r3, [r2, #32]
 8004004:	e02d      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x334>
 800400e:	4b6a      	ldr	r3, [pc, #424]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	4a69      	ldr	r2, [pc, #420]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	6213      	str	r3, [r2, #32]
 800401a:	4b67      	ldr	r3, [pc, #412]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4a66      	ldr	r2, [pc, #408]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	6213      	str	r3, [r2, #32]
 8004026:	e01c      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b05      	cmp	r3, #5
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x356>
 8004030:	4b61      	ldr	r3, [pc, #388]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4a60      	ldr	r2, [pc, #384]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	6213      	str	r3, [r2, #32]
 800403c:	4b5e      	ldr	r3, [pc, #376]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a5d      	ldr	r2, [pc, #372]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	e00b      	b.n	8004062 <HAL_RCC_OscConfig+0x36e>
 800404a:	4b5b      	ldr	r3, [pc, #364]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	4a5a      	ldr	r2, [pc, #360]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6213      	str	r3, [r2, #32]
 8004056:	4b58      	ldr	r3, [pc, #352]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4a57      	ldr	r2, [pc, #348]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d015      	beq.n	8004096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fd fdf3 	bl	8001c54 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fd fdef 	bl	8001c54 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0b1      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	4b4b      	ldr	r3, [pc, #300]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ee      	beq.n	8004072 <HAL_RCC_OscConfig+0x37e>
 8004094:	e014      	b.n	80040c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fd fddd 	bl	8001c54 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	e00a      	b.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409e:	f7fd fdd9 	bl	8001c54 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e09b      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	4b40      	ldr	r3, [pc, #256]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ee      	bne.n	800409e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b3c      	ldr	r3, [pc, #240]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	4a3b      	ldr	r2, [pc, #236]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8087 	beq.w	80041ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040dc:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 030c 	and.w	r3, r3, #12
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d061      	beq.n	80041ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d146      	bne.n	800417e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f0:	4b33      	ldr	r3, [pc, #204]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fd fdad 	bl	8001c54 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fd fda9 	bl	8001c54 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e06d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004110:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f0      	bne.n	80040fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004124:	d108      	bne.n	8004138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4921      	ldr	r1, [pc, #132]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a19      	ldr	r1, [r3, #32]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	430b      	orrs	r3, r1
 800414a:	491b      	ldr	r1, [pc, #108]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd fd7d 	bl	8001c54 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd fd79 	bl	8001c54 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e03d      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x46a>
 800417c:	e035      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fd66 	bl	8001c54 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fd fd62 	bl	8001c54 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e026      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_RCC_OscConfig+0x4c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x498>
 80041aa:	e01e      	b.n	80041ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e019      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x500>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000

080041f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0d0      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b6a      	ldr	r3, [pc, #424]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b67      	ldr	r3, [pc, #412]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 0207 	bic.w	r2, r3, #7
 8004222:	4965      	ldr	r1, [pc, #404]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0b8      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a58      	ldr	r2, [pc, #352]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800425e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800426c:	4b53      	ldr	r3, [pc, #332]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a52      	ldr	r2, [pc, #328]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004276:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004278:	4b50      	ldr	r3, [pc, #320]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	494d      	ldr	r1, [pc, #308]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d040      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b47      	ldr	r3, [pc, #284]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07f      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b41      	ldr	r3, [pc, #260]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e073      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4936      	ldr	r1, [pc, #216]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fcb4 	bl	8001c54 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd fcb0 	bl	8001c54 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e053      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d210      	bcs.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4922      	ldr	r1, [pc, #136]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b20      	ldr	r3, [pc, #128]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e032      	b.n	80043ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4916      	ldr	r1, [pc, #88]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004386:	f000 f821 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 800438a:	4602      	mov	r2, r0
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	490a      	ldr	r1, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	5ccb      	ldrb	r3, [r1, r3]
 800439a:	fa22 f303 	lsr.w	r3, r2, r3
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <HAL_RCC_ClockConfig+0x1cc>)
 80043a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_RCC_ClockConfig+0x1d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fd fc12 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40021000 	.word	0x40021000
 80043c0:	0800c030 	.word	0x0800c030
 80043c4:	20000004 	.word	0x20000004
 80043c8:	20000008 	.word	0x20000008

080043cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x30>
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0x36>
 80043fa:	e027      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fe:	613b      	str	r3, [r7, #16]
      break;
 8004400:	e027      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a17      	ldr	r2, [pc, #92]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x9c>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800441a:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x94>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0c5b      	lsrs	r3, r3, #17
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	4a11      	ldr	r2, [pc, #68]	@ (800446c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e004      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0c      	ldr	r2, [pc, #48]	@ (8004470 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004440:	fb02 f303 	mul.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	613b      	str	r3, [r7, #16]
      break;
 800444a:	e002      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b05      	ldr	r3, [pc, #20]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x98>)
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004452:	693b      	ldr	r3, [r7, #16]
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	007a1200 	.word	0x007a1200
 8004468:	0800c040 	.word	0x0800c040
 800446c:	0800c050 	.word	0x0800c050
 8004470:	003d0900 	.word	0x003d0900

08004474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800447c:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <RCC_Delay+0x34>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <RCC_Delay+0x38>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0a5b      	lsrs	r3, r3, #9
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004490:	bf00      	nop
  }
  while (Delay --);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	60fa      	str	r2, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f9      	bne.n	8004490 <RCC_Delay+0x1c>
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	20000004 	.word	0x20000004
 80044ac:	10624dd3 	.word	0x10624dd3

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d07d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d0:	4b4f      	ldr	r3, [pc, #316]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10d      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044dc:	4b4c      	ldr	r3, [pc, #304]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	61d3      	str	r3, [r2, #28]
 80044e8:	4b49      	ldr	r3, [pc, #292]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	4b46      	ldr	r3, [pc, #280]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d118      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004504:	4b43      	ldr	r3, [pc, #268]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a42      	ldr	r2, [pc, #264]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800450a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004510:	f7fd fba0 	bl	8001c54 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004518:	f7fd fb9c 	bl	8001c54 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	@ 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e06d      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	4b3a      	ldr	r3, [pc, #232]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004536:	4b36      	ldr	r3, [pc, #216]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d02e      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d027      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b2e      	ldr	r3, [pc, #184]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b2e      	ldr	r3, [pc, #184]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004564:	4b2c      	ldr	r3, [pc, #176]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800456a:	4a29      	ldr	r2, [pc, #164]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d014      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fb6b 	bl	8001c54 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fd fb67 	bl	8001c54 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e036      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	4b1d      	ldr	r3, [pc, #116]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ee      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4917      	ldr	r1, [pc, #92]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045bc:	4b14      	ldr	r3, [pc, #80]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	490b      	ldr	r1, [pc, #44]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004600:	4313      	orrs	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
 8004618:	42420440 	.word	0x42420440

0800461c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	4638      	mov	r0, r7
 8004626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004646:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800464a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	b29a      	uxth	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800466a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800466e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	b29b      	uxth	r3, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	b29b      	uxth	r3, r3
 8004680:	4013      	ands	r3, r2
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	460b      	mov	r3, r1
 80046a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	4638      	mov	r0, r7
 80046b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b09d      	sub	sp, #116	@ 0x74
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800470a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d81f      	bhi.n	800475a <USB_ActivateEndpoint+0x72>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <USB_ActivateEndpoint+0x38>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004731 	.word	0x08004731
 8004724:	0800474d 	.word	0x0800474d
 8004728:	08004763 	.word	0x08004763
 800472c:	0800473f 	.word	0x0800473f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004730:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004738:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800473c:	e012      	b.n	8004764 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800473e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004742:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004746:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800474a:	e00b      	b.n	8004764 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800474c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004750:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004754:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004758:	e004      	b.n	8004764 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004760:	e000      	b.n	8004764 <USB_ActivateEndpoint+0x7c>
      break;
 8004762:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479c:	b29b      	uxth	r3, r3
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	7812      	ldrb	r2, [r2, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	7b1b      	ldrb	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 8178 	bne.w	8004ac4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8084 	beq.w	80048e6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	4413      	add	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	011a      	lsls	r2, r3, #4
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	88db      	ldrh	r3, [r3, #6]
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	827b      	strh	r3, [r7, #18]
 8004820:	8a7b      	ldrh	r3, [r7, #18]
 8004822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <USB_ActivateEndpoint+0x17a>
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004840:	823b      	strh	r3, [r7, #16]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	8a3b      	ldrh	r3, [r7, #16]
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800485a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	78db      	ldrb	r3, [r3, #3]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d020      	beq.n	80048ac <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004880:	81bb      	strh	r3, [r7, #12]
 8004882:	89bb      	ldrh	r3, [r7, #12]
 8004884:	f083 0320 	eor.w	r3, r3, #32
 8004888:	81bb      	strh	r3, [r7, #12]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	89bb      	ldrh	r3, [r7, #12]
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e2d5      	b.n	8004e58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c2:	81fb      	strh	r3, [r7, #14]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	89fb      	ldrh	r3, [r7, #14]
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]
 80048e4:	e2b8      	b.n	8004e58 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	4413      	add	r3, r2
 80048f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	011a      	lsls	r2, r3, #4
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	4413      	add	r3, r2
 8004904:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	88db      	ldrh	r3, [r3, #6]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004918:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	4413      	add	r3, r2
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	011a      	lsls	r2, r3, #4
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	4413      	add	r3, r2
 8004938:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004948:	b29a      	uxth	r2, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b3e      	cmp	r3, #62	@ 0x3e
 8004954:	d91d      	bls.n	8004992 <USB_ActivateEndpoint+0x2aa>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <USB_ActivateEndpoint+0x288>
 800496a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800496c:	3b01      	subs	r3, #1
 800496e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29a      	uxth	r2, r3
 8004976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004978:	b29b      	uxth	r3, r3
 800497a:	029b      	lsls	r3, r3, #10
 800497c:	b29b      	uxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	b29b      	uxth	r3, r3
 8004982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498a:	b29a      	uxth	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e026      	b.n	80049e0 <USB_ActivateEndpoint+0x2f8>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <USB_ActivateEndpoint+0x2c8>
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e017      	b.n	80049e0 <USB_ActivateEndpoint+0x2f8>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <USB_ActivateEndpoint+0x2e2>
 80049c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049c6:	3301      	adds	r3, #1
 80049c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4313      	orrs	r3, r2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 80049ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80049f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01b      	beq.n	8004a30 <USB_ActivateEndpoint+0x348>
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0e:	843b      	strh	r3, [r7, #32]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	8c3b      	ldrh	r3, [r7, #32]
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d124      	bne.n	8004a82 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4e:	83bb      	strh	r3, [r7, #28]
 8004a50:	8bbb      	ldrh	r3, [r7, #28]
 8004a52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004a56:	83bb      	strh	r3, [r7, #28]
 8004a58:	8bbb      	ldrh	r3, [r7, #28]
 8004a5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a5e:	83bb      	strh	r3, [r7, #28]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	8bbb      	ldrh	r3, [r7, #28]
 8004a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	8013      	strh	r3, [r2, #0]
 8004a80:	e1ea      	b.n	8004e58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a98:	83fb      	strh	r3, [r7, #30]
 8004a9a:	8bfb      	ldrh	r3, [r7, #30]
 8004a9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004aa0:	83fb      	strh	r3, [r7, #30]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	8bfb      	ldrh	r3, [r7, #30]
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
 8004ac2:	e1c9      	b.n	8004e58 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11e      	bne.n	8004b0a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
 8004b08:	e01d      	b.n	8004b46 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b20:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b56:	4413      	add	r3, r2
 8004b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	011a      	lsls	r2, r3, #4
 8004b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	891b      	ldrh	r3, [r3, #8]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8a:	4413      	add	r3, r2
 8004b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004b9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	895b      	ldrh	r3, [r3, #10]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 8093 	bne.w	8004cde <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004bc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <USB_ActivateEndpoint+0x524>
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004c1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <USB_ActivateEndpoint+0x574>
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	8013      	strh	r3, [r2, #0]
 8004cdc:	e0bc      	b.n	8004e58 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01d      	beq.n	8004d36 <USB_ActivateEndpoint+0x64e>
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004d46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01d      	beq.n	8004d8e <USB_ActivateEndpoint+0x6a6>
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	78db      	ldrb	r3, [r3, #3]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d024      	beq.n	8004de0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004db0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004db4:	f083 0320 	eor.w	r3, r3, #32
 8004db8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
 8004dde:	e01d      	b.n	8004e1c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3774      	adds	r7, #116	@ 0x74
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop

08004e68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b08d      	sub	sp, #52	@ 0x34
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 808e 	bne.w	8004f98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d044      	beq.n	8004f0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	81bb      	strh	r3, [r7, #12]
 8004e92:	89bb      	ldrh	r3, [r7, #12]
 8004e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01b      	beq.n	8004ed4 <USB_DeactivateEndpoint+0x6c>
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	817b      	strh	r3, [r7, #10]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	441a      	add	r2, r3
 8004ebe:	897b      	ldrh	r3, [r7, #10]
 8004ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ecc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eea:	813b      	strh	r3, [r7, #8]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	893b      	ldrh	r3, [r7, #8]
 8004ef8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004efc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8013      	strh	r3, [r2, #0]
 8004f0c:	e192      	b.n	8005234 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	827b      	strh	r3, [r7, #18]
 8004f1c:	8a7b      	ldrh	r3, [r7, #18]
 8004f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01b      	beq.n	8004f5e <USB_DeactivateEndpoint+0xf6>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3c:	823b      	strh	r3, [r7, #16]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	8a3b      	ldrh	r3, [r7, #16]
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f74:	81fb      	strh	r3, [r7, #14]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	89fb      	ldrh	r3, [r7, #14]
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
 8004f96:	e14d      	b.n	8005234 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 80a5 	bne.w	80050ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	843b      	strh	r3, [r7, #32]
 8004fb0:	8c3b      	ldrh	r3, [r7, #32]
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <USB_DeactivateEndpoint+0x18a>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd0:	83fb      	strh	r3, [r7, #30]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	83bb      	strh	r3, [r7, #28]
 8005000:	8bbb      	ldrh	r3, [r7, #28]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01b      	beq.n	8005042 <USB_DeactivateEndpoint+0x1da>
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800501c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005020:	837b      	strh	r3, [r7, #26]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	8b7b      	ldrh	r3, [r7, #26]
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800503a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005058:	833b      	strh	r3, [r7, #24]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	441a      	add	r2, r3
 8005064:	8b3b      	ldrh	r3, [r7, #24]
 8005066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800506a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005072:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005076:	b29b      	uxth	r3, r3
 8005078:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800508c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005090:	82fb      	strh	r3, [r7, #22]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	8afb      	ldrh	r3, [r7, #22]
 800509e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050c8:	82bb      	strh	r3, [r7, #20]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	8abb      	ldrh	r3, [r7, #20]
 80050d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	8013      	strh	r3, [r2, #0]
 80050ea:	e0a3      	b.n	8005234 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80050fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <USB_DeactivateEndpoint+0x2d4>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800514a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01b      	beq.n	800518c <USB_DeactivateEndpoint+0x324>
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005184:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800520e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005212:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800522c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3734      	adds	r7, #52	@ 0x34
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0c2      	sub	sp, #264	@ 0x108
 8005244:	af00      	add	r7, sp, #0
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524e:	6018      	str	r0, [r3, #0]
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005258:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	f040 86b7 	bne.w	8005fda <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	429a      	cmp	r2, r3
 8005286:	d908      	bls.n	800529a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005298:	e007      	b.n	80052aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800529a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	7b1b      	ldrb	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d13a      	bne.n	8005330 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	88da      	ldrh	r2, [r3, #6]
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f001 fc9c 	bl	8006c1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	011a      	lsls	r2, r3, #4
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	f000 be1f 	b.w	8005f6e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	2b02      	cmp	r3, #2
 800533e:	f040 8462 	bne.w	8005c06 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a1a      	ldr	r2, [r3, #32]
 800534e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	f240 83df 	bls.w	8005b1e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005386:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	441a      	add	r2, r3
 80053a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80053a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80053b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80053bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a1a      	ldr	r2, [r3, #32]
 80053c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053cc:	1ad2      	subs	r2, r2, r3
 80053ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 81c7 	beq.w	8005790 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	633b      	str	r3, [r7, #48]	@ 0x30
 800540e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d177      	bne.n	800550e <USB_EPStartXfer+0x2ce>
 800541e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800542a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800542e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	4413      	add	r3, r2
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	011a      	lsls	r2, r3, #4
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	4413      	add	r3, r2
 8005454:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005464:	b29a      	uxth	r2, r3
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005470:	d921      	bls.n	80054b6 <USB_EPStartXfer+0x276>
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800547c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <USB_EPStartXfer+0x252>
 8005488:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800548c:	3b01      	subs	r3, #1
 800548e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800549c:	b29b      	uxth	r3, r3
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	e050      	b.n	8005558 <USB_EPStartXfer+0x318>
 80054b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <USB_EPStartXfer+0x294>
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e041      	b.n	8005558 <USB_EPStartXfer+0x318>
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <USB_EPStartXfer+0x2b4>
 80054ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054ee:	3301      	adds	r3, #1
 80054f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80054fe:	b29b      	uxth	r3, r3
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	b29b      	uxth	r3, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	b29a      	uxth	r2, r3
 8005508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	e024      	b.n	8005558 <USB_EPStartXfer+0x318>
 800550e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d11c      	bne.n	8005558 <USB_EPStartXfer+0x318>
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	4413      	add	r3, r2
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30
 8005536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	011a      	lsls	r2, r3, #4
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	4413      	add	r3, r2
 8005548:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005552:	b29a      	uxth	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005556:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	895b      	ldrh	r3, [r3, #10]
 8005564:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6959      	ldr	r1, [r3, #20]
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005578:	b29b      	uxth	r3, r3
 800557a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800557e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005582:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	f001 fb49 	bl	8006c1e <USB_WritePMA>
            ep->xfer_buff += len;
 800558c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559c:	441a      	add	r2, r3
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a1a      	ldr	r2, [r3, #32]
 80055b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d90f      	bls.n	80055e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80055c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	621a      	str	r2, [r3, #32]
 80055e4:	e00e      	b.n	8005604 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80055e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d177      	bne.n	8005704 <USB_EPStartXfer+0x4c4>
 8005614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
 8005620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800562e:	b29b      	uxth	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	011a      	lsls	r2, r3, #4
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	4413      	add	r3, r2
 800564a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005664:	2b3e      	cmp	r3, #62	@ 0x3e
 8005666:	d921      	bls.n	80056ac <USB_EPStartXfer+0x46c>
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <USB_EPStartXfer+0x448>
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005682:	3b01      	subs	r3, #1
 8005684:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29b      	uxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e056      	b.n	800575a <USB_EPStartXfer+0x51a>
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <USB_EPStartXfer+0x48a>
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e047      	b.n	800575a <USB_EPStartXfer+0x51a>
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <USB_EPStartXfer+0x4aa>
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e4:	3301      	adds	r3, #1
 80056e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e02a      	b.n	800575a <USB_EPStartXfer+0x51a>
 8005704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d122      	bne.n	800575a <USB_EPStartXfer+0x51a>
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800572e:	b29b      	uxth	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	4413      	add	r3, r2
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	4413      	add	r3, r2
 800574a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005754:	b29a      	uxth	r2, r3
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800575a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	891b      	ldrh	r3, [r3, #8]
 8005766:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800576a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6959      	ldr	r1, [r3, #20]
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	b29b      	uxth	r3, r3
 800577c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005780:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005784:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005788:	6800      	ldr	r0, [r0, #0]
 800578a:	f001 fa48 	bl	8006c1e <USB_WritePMA>
 800578e:	e3ee      	b.n	8005f6e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d177      	bne.n	8005890 <USB_EPStartXfer+0x650>
 80057a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c0:	4413      	add	r3, r2
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057da:	647b      	str	r3, [r7, #68]	@ 0x44
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80057f2:	d921      	bls.n	8005838 <USB_EPStartXfer+0x5f8>
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <USB_EPStartXfer+0x5d4>
 800580a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800580e:	3b01      	subs	r3, #1
 8005810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29a      	uxth	r2, r3
 800581a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29b      	uxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29a      	uxth	r2, r3
 8005832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e056      	b.n	80058e6 <USB_EPStartXfer+0x6a6>
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <USB_EPStartXfer+0x616>
 8005840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584e:	b29a      	uxth	r2, r3
 8005850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e047      	b.n	80058e6 <USB_EPStartXfer+0x6a6>
 8005856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d004      	beq.n	8005876 <USB_EPStartXfer+0x636>
 800586c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005870:	3301      	adds	r3, #1
 8005872:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	b29a      	uxth	r2, r3
 800588a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	e02a      	b.n	80058e6 <USB_EPStartXfer+0x6a6>
 8005890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d122      	bne.n	80058e6 <USB_EPStartXfer+0x6a6>
 80058a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c0:	4413      	add	r3, r2
 80058c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	011a      	lsls	r2, r3, #4
 80058d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d4:	4413      	add	r3, r2
 80058d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	891b      	ldrh	r3, [r3, #8]
 80058f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6959      	ldr	r1, [r3, #20]
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005906:	b29b      	uxth	r3, r3
 8005908:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800590c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005910:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005914:	6800      	ldr	r0, [r0, #0]
 8005916:	f001 f982 	bl	8006c1e <USB_WritePMA>
            ep->xfer_buff += len;
 800591a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592a:	441a      	add	r2, r3
 800592c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d90f      	bls.n	8005974 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	1ad2      	subs	r2, r2, r3
 8005966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	621a      	str	r2, [r3, #32]
 8005972:	e00e      	b.n	8005992 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	643b      	str	r3, [r7, #64]	@ 0x40
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d177      	bne.n	8005a9e <USB_EPStartXfer+0x85e>
 80059ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ce:	4413      	add	r3, r2
 80059d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	011a      	lsls	r2, r3, #4
 80059e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a00:	d921      	bls.n	8005a46 <USB_EPStartXfer+0x806>
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <USB_EPStartXfer+0x7e2>
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	029b      	lsls	r3, r3, #10
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4313      	orrs	r3, r2
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e050      	b.n	8005ae8 <USB_EPStartXfer+0x8a8>
 8005a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <USB_EPStartXfer+0x824>
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e041      	b.n	8005ae8 <USB_EPStartXfer+0x8a8>
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d004      	beq.n	8005a84 <USB_EPStartXfer+0x844>
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4313      	orrs	r3, r2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e024      	b.n	8005ae8 <USB_EPStartXfer+0x8a8>
 8005a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d11c      	bne.n	8005ae8 <USB_EPStartXfer+0x8a8>
 8005aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac2:	4413      	add	r3, r2
 8005ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	011a      	lsls	r2, r3, #4
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	895b      	ldrh	r3, [r3, #10]
 8005af4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6959      	ldr	r1, [r3, #20]
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	f001 f881 	bl	8006c1e <USB_WritePMA>
 8005b1c:	e227      	b.n	8005f6e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b54:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	441a      	add	r2, r3
 8005b72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005baa:	4413      	add	r3, r2
 8005bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	011a      	lsls	r2, r3, #4
 8005bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	891b      	ldrh	r3, [r3, #8]
 8005bdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6959      	ldr	r1, [r3, #20]
 8005bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005bf6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005bfa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bfe:	6800      	ldr	r0, [r0, #0]
 8005c00:	f001 f80d 	bl	8006c1e <USB_WritePMA>
 8005c04:	e1b3      	b.n	8005f6e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a1a      	ldr	r2, [r3, #32]
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80c6 	beq.w	8005dd8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d177      	bne.n	8005d58 <USB_EPStartXfer+0xb18>
 8005c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c88:	4413      	add	r3, r2
 8005c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cba:	d921      	bls.n	8005d00 <USB_EPStartXfer+0xac0>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d104      	bne.n	8005cdc <USB_EPStartXfer+0xa9c>
 8005cd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4313      	orrs	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	e050      	b.n	8005da2 <USB_EPStartXfer+0xb62>
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <USB_EPStartXfer+0xade>
 8005d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e041      	b.n	8005da2 <USB_EPStartXfer+0xb62>
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <USB_EPStartXfer+0xafe>
 8005d34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e024      	b.n	8005da2 <USB_EPStartXfer+0xb62>
 8005d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d11c      	bne.n	8005da2 <USB_EPStartXfer+0xb62>
 8005d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d7c:	4413      	add	r3, r2
 8005d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	011a      	lsls	r2, r3, #4
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d90:	4413      	add	r3, r2
 8005d92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	895b      	ldrh	r3, [r3, #10]
 8005dae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6959      	ldr	r1, [r3, #20]
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005dc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005dcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005dd0:	6800      	ldr	r0, [r0, #0]
 8005dd2:	f000 ff24 	bl	8006c1e <USB_WritePMA>
 8005dd6:	e0ca      	b.n	8005f6e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d177      	bne.n	8005ed8 <USB_EPStartXfer+0xc98>
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e08:	4413      	add	r3, r2
 8005e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e3a:	d921      	bls.n	8005e80 <USB_EPStartXfer+0xc40>
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4a:	f003 031f 	and.w	r3, r3, #31
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <USB_EPStartXfer+0xc1c>
 8005e52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e56:	3b01      	subs	r3, #1
 8005e58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	029b      	lsls	r3, r3, #10
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e05c      	b.n	8005f3a <USB_EPStartXfer+0xcfa>
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <USB_EPStartXfer+0xc5e>
 8005e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e04d      	b.n	8005f3a <USB_EPStartXfer+0xcfa>
 8005e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <USB_EPStartXfer+0xc7e>
 8005eb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e030      	b.n	8005f3a <USB_EPStartXfer+0xcfa>
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	785b      	ldrb	r3, [r3, #1]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d128      	bne.n	8005f3a <USB_EPStartXfer+0xcfa>
 8005ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	011a      	lsls	r2, r3, #4
 8005f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f24:	4413      	add	r3, r2
 8005f26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	891b      	ldrh	r3, [r3, #8]
 8005f46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6959      	ldr	r1, [r3, #20]
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f60:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f64:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f68:	6800      	ldr	r0, [r0, #0]
 8005f6a:	f000 fe58 	bl	8006c1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f94:	817b      	strh	r3, [r7, #10]
 8005f96:	897b      	ldrh	r3, [r7, #10]
 8005f98:	f083 0310 	eor.w	r3, r3, #16
 8005f9c:	817b      	strh	r3, [r7, #10]
 8005f9e:	897b      	ldrh	r3, [r7, #10]
 8005fa0:	f083 0320 	eor.w	r3, r3, #32
 8005fa4:	817b      	strh	r3, [r7, #10]
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	897b      	ldrh	r3, [r7, #10]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	f000 bcde 	b.w	8006996 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	7b1b      	ldrb	r3, [r3, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 80bb 	bne.w	8006162 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699a      	ldr	r2, [r3, #24]
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d917      	bls.n	8006038 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006028:	1ad2      	subs	r2, r2, r3
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	619a      	str	r2, [r3, #24]
 8006036:	e00e      	b.n	8006056 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800607a:	4413      	add	r3, r2
 800607c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	011a      	lsls	r2, r3, #4
 800608e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006092:	4413      	add	r3, r2
 8006094:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006098:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80060b6:	d924      	bls.n	8006102 <USB_EPStartXfer+0xec2>
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <USB_EPStartXfer+0xe98>
 80060ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4313      	orrs	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	f000 bc10 	b.w	8006922 <USB_EPStartXfer+0x16e2>
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <USB_EPStartXfer+0xee4>
 800610a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	e3fe      	b.n	8006922 <USB_EPStartXfer+0x16e2>
 8006124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <USB_EPStartXfer+0xf04>
 800613a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800613e:	3301      	adds	r3, #1
 8006140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	b29a      	uxth	r2, r3
 800614c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	4313      	orrs	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	e3df      	b.n	8006922 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b02      	cmp	r3, #2
 8006170:	f040 8218 	bne.w	80065a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 809d 	bne.w	80062c0 <USB_EPStartXfer+0x1080>
 8006186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061aa:	4413      	add	r3, r2
 80061ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	011a      	lsls	r2, r3, #4
 80061be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ee:	d92b      	bls.n	8006248 <USB_EPStartXfer+0x1008>
 80061f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <USB_EPStartXfer+0xfe0>
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621a:	3b01      	subs	r3, #1
 800621c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622c:	b29b      	uxth	r3, r3
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	b29b      	uxth	r3, r3
 8006232:	4313      	orrs	r3, r2
 8006234:	b29b      	uxth	r3, r3
 8006236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623e:	b29a      	uxth	r2, r3
 8006240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006244:	801a      	strh	r2, [r3, #0]
 8006246:	e070      	b.n	800632a <USB_EPStartXfer+0x10ea>
 8006248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <USB_EPStartXfer+0x1032>
 8006258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e05b      	b.n	800632a <USB_EPStartXfer+0x10ea>
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <USB_EPStartXfer+0x1062>
 8006298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629c:	3301      	adds	r3, #1
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	029b      	lsls	r3, r3, #10
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e034      	b.n	800632a <USB_EPStartXfer+0x10ea>
 80062c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d12c      	bne.n	800632a <USB_EPStartXfer+0x10ea>
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062f4:	4413      	add	r3, r2
 80062f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	011a      	lsls	r2, r3, #4
 8006308:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800630c:	4413      	add	r3, r2
 800630e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006312:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 809d 	bne.w	8006484 <USB_EPStartXfer+0x1244>
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800636e:	4413      	add	r3, r2
 8006370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	011a      	lsls	r2, r3, #4
 8006382:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006386:	4413      	add	r3, r2
 8006388:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80063b2:	d92b      	bls.n	800640c <USB_EPStartXfer+0x11cc>
 80063b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <USB_EPStartXfer+0x11a4>
 80063da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063de:	3b01      	subs	r3, #1
 80063e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	029b      	lsls	r3, r3, #10
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006402:	b29a      	uxth	r2, r3
 8006404:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	e069      	b.n	80064e0 <USB_EPStartXfer+0x12a0>
 800640c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <USB_EPStartXfer+0x11f6>
 800641c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006432:	801a      	strh	r2, [r3, #0]
 8006434:	e054      	b.n	80064e0 <USB_EPStartXfer+0x12a0>
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d004      	beq.n	8006466 <USB_EPStartXfer+0x1226>
 800645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006460:	3301      	adds	r3, #1
 8006462:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29a      	uxth	r2, r3
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29b      	uxth	r3, r3
 8006478:	4313      	orrs	r3, r2
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e02d      	b.n	80064e0 <USB_EPStartXfer+0x12a0>
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d125      	bne.n	80064e0 <USB_EPStartXfer+0x12a0>
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064aa:	4413      	add	r3, r2
 80064ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8218 	beq.w	8006922 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006512:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <USB_EPStartXfer+0x12ea>
 800651e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10d      	bne.n	8006546 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800652a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800652e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 81f5 	bne.w	8006922 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006538:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	f040 81ee 	bne.w	8006922 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800658e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8013      	strh	r3, [r2, #0]
 80065a2:	e1be      	b.n	8006922 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	78db      	ldrb	r3, [r3, #3]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	f040 81b4 	bne.w	800691e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d917      	bls.n	8006602 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80065e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	1ad2      	subs	r2, r2, r3
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	619a      	str	r2, [r3, #24]
 8006600:	e00e      	b.n	8006620 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8085 	bne.w	800673c <USB_EPStartXfer+0x14fc>
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006656:	4413      	add	r3, r2
 8006658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	011a      	lsls	r2, r3, #4
 800666a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800666e:	4413      	add	r3, r2
 8006670:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006684:	b29a      	uxth	r2, r3
 8006686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	2b3e      	cmp	r3, #62	@ 0x3e
 8006692:	d923      	bls.n	80066dc <USB_EPStartXfer+0x149c>
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <USB_EPStartXfer+0x1474>
 80066aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ae:	3b01      	subs	r3, #1
 80066b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	029b      	lsls	r3, r3, #10
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	4313      	orrs	r3, r2
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066d8:	801a      	strh	r2, [r3, #0]
 80066da:	e060      	b.n	800679e <USB_EPStartXfer+0x155e>
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10c      	bne.n	80066fe <USB_EPStartXfer+0x14be>
 80066e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	e04f      	b.n	800679e <USB_EPStartXfer+0x155e>
 80066fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <USB_EPStartXfer+0x14de>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800671e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800672a:	b29b      	uxth	r3, r3
 800672c:	029b      	lsls	r3, r3, #10
 800672e:	b29b      	uxth	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e030      	b.n	800679e <USB_EPStartXfer+0x155e>
 800673c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d128      	bne.n	800679e <USB_EPStartXfer+0x155e>
 800674c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006768:	b29b      	uxth	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006770:	4413      	add	r3, r2
 8006772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	011a      	lsls	r2, r3, #4
 8006784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006788:	4413      	add	r3, r2
 800678a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800678e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 8085 	bne.w	80068c8 <USB_EPStartXfer+0x1688>
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067e2:	4413      	add	r3, r2
 80067e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80067e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	011a      	lsls	r2, r3, #4
 80067f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067fa:	4413      	add	r3, r2
 80067fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681c:	2b3e      	cmp	r3, #62	@ 0x3e
 800681e:	d923      	bls.n	8006868 <USB_EPStartXfer+0x1628>
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <USB_EPStartXfer+0x1600>
 8006836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800683a:	3b01      	subs	r3, #1
 800683c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29a      	uxth	r2, r3
 8006848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800684c:	b29b      	uxth	r3, r3
 800684e:	029b      	lsls	r3, r3, #10
 8006850:	b29b      	uxth	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29a      	uxth	r2, r3
 8006860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006864:	801a      	strh	r2, [r3, #0]
 8006866:	e05c      	b.n	8006922 <USB_EPStartXfer+0x16e2>
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10c      	bne.n	800688a <USB_EPStartXfer+0x164a>
 8006870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006880:	b29a      	uxth	r2, r3
 8006882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e04b      	b.n	8006922 <USB_EPStartXfer+0x16e2>
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <USB_EPStartXfer+0x166a>
 80068a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a4:	3301      	adds	r3, #1
 80068a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	b29a      	uxth	r2, r3
 80068c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e02c      	b.n	8006922 <USB_EPStartXfer+0x16e2>
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d124      	bne.n	8006922 <USB_EPStartXfer+0x16e2>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068ee:	4413      	add	r3, r2
 80068f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	011a      	lsls	r2, r3, #4
 8006902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006906:	4413      	add	r3, r2
 8006908:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800690c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	b29a      	uxth	r2, r3
 8006916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e001      	b.n	8006922 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e03a      	b.n	8006998 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006948:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800694c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006950:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006954:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006958:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800695c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006960:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	441a      	add	r2, r3
 800697e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d020      	beq.n	80069f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ca:	81bb      	strh	r3, [r7, #12]
 80069cc:	89bb      	ldrh	r3, [r7, #12]
 80069ce:	f083 0310 	eor.w	r3, r3, #16
 80069d2:	81bb      	strh	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	89bb      	ldrh	r3, [r7, #12]
 80069e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8013      	strh	r3, [r2, #0]
 80069f4:	e01f      	b.n	8006a36 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0c:	81fb      	strh	r3, [r7, #14]
 8006a0e:	89fb      	ldrh	r3, [r7, #14]
 8006a10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006a14:	81fb      	strh	r3, [r7, #14]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	441a      	add	r2, r3
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr

08006a42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	7b1b      	ldrb	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 809d 	bne.w	8006b90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d04c      	beq.n	8006af8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	823b      	strh	r3, [r7, #16]
 8006a6c:	8a3b      	ldrh	r3, [r7, #16]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01b      	beq.n	8006aae <USB_EPClearStall+0x6c>
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8c:	81fb      	strh	r3, [r7, #14]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d06c      	beq.n	8006b90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006acc:	81bb      	strh	r3, [r7, #12]
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f083 0320 	eor.w	r3, r3, #32
 8006ad4:	81bb      	strh	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
 8006af6:	e04b      	b.n	8006b90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	82fb      	strh	r3, [r7, #22]
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01b      	beq.n	8006b48 <USB_EPClearStall+0x106>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	82bb      	strh	r3, [r7, #20]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	8abb      	ldrh	r3, [r7, #20]
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	827b      	strh	r3, [r7, #18]
 8006b60:	8a7b      	ldrh	r3, [r7, #18]
 8006b62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006b66:	827b      	strh	r3, [r7, #18]
 8006b68:	8a7b      	ldrh	r3, [r7, #18]
 8006b6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b6e:	827b      	strh	r3, [r7, #18]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	8a7b      	ldrh	r3, [r7, #18]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d103      	bne.n	8006bb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2280      	movs	r2, #128	@ 0x80
 8006bb2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr

08006bc2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bc80      	pop	{r7}
 8006bd4:	4770      	bx	lr

08006bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr

08006bea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b085      	sub	sp, #20
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr

08006c1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b08b      	sub	sp, #44	@ 0x2c
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	80fb      	strh	r3, [r7, #6]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c34:	88bb      	ldrh	r3, [r7, #4]
 8006c36:	3301      	adds	r3, #1
 8006c38:	085b      	lsrs	r3, r3, #1
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c44:	88fb      	ldrh	r3, [r7, #6]
 8006c46:	005a      	lsls	r2, r3, #1
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c56:	e01f      	b.n	8006c98 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3301      	adds	r3, #1
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b21b      	sxth	r3, r3
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	b21a      	sxth	r2, r3
 8006c6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	b21b      	sxth	r3, r3
 8006c72:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	8a7a      	ldrh	r2, [r7, #18]
 8006c78:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	3302      	adds	r3, #2
 8006c84:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	3b01      	subs	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1dc      	bne.n	8006c58 <USB_WritePMA+0x3a>
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	372c      	adds	r7, #44	@ 0x2c
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b08b      	sub	sp, #44	@ 0x2c
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	460b      	mov	r3, r1
 8006cba:	80fb      	strh	r3, [r7, #6]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cc0:	88bb      	ldrh	r3, [r7, #4]
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	005a      	lsls	r2, r3, #1
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006cdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce2:	e01b      	b.n	8006d1c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	3302      	adds	r3, #2
 8006cf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	3302      	adds	r3, #2
 8006d14:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e0      	bne.n	8006ce4 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8006d3e:	bf00      	nop
 8006d40:	372c      	adds	r7, #44	@ 0x2c
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7c1b      	ldrb	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d115      	bne.n	8006d8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d64:	2202      	movs	r2, #2
 8006d66:	2181      	movs	r1, #129	@ 0x81
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 feb6 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d78:	2202      	movs	r2, #2
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 feac 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006d8a:	e012      	b.n	8006db2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d8c:	2340      	movs	r3, #64	@ 0x40
 8006d8e:	2202      	movs	r2, #2
 8006d90:	2181      	movs	r1, #129	@ 0x81
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 fea1 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d9e:	2340      	movs	r3, #64	@ 0x40
 8006da0:	2202      	movs	r2, #2
 8006da2:	2101      	movs	r1, #1
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fe98 	bl	8008ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006db2:	2308      	movs	r3, #8
 8006db4:	2203      	movs	r2, #3
 8006db6:	2182      	movs	r1, #130	@ 0x82
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fe8e 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006dc8:	f001 ffae 	bl	8008d28 <USBD_static_malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006dde:	2301      	movs	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	e026      	b.n	8006e32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7c1b      	ldrb	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e18:	2101      	movs	r1, #1
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 ff4d 	bl	8008cba <USBD_LL_PrepareReceive>
 8006e20:	e007      	b.n	8006e32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e28:	2340      	movs	r3, #64	@ 0x40
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 ff44 	bl	8008cba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e4c:	2181      	movs	r1, #129	@ 0x81
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fe69 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fe62 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e6a:	2182      	movs	r1, #130	@ 0x82
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fe5a 	bl	8008b26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 ff54 	bl	8008d40 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b086      	sub	sp, #24
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d039      	beq.n	8006f48 <USBD_CDC_Setup+0x9e>
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d17f      	bne.n	8006fd8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	88db      	ldrh	r3, [r3, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d029      	beq.n	8006f34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b25b      	sxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da11      	bge.n	8006f0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	88d2      	ldrh	r2, [r2, #6]
 8006efc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006efe:	6939      	ldr	r1, [r7, #16]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	88db      	ldrh	r3, [r3, #6]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fa06 	bl	8008318 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f0c:	e06b      	b.n	8006fe6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	785a      	ldrb	r2, [r3, #1]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	88db      	ldrh	r3, [r3, #6]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f24:	6939      	ldr	r1, [r7, #16]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	88db      	ldrh	r3, [r3, #6]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fa21 	bl	8008374 <USBD_CtlPrepareRx>
      break;
 8006f32:	e058      	b.n	8006fe6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	7850      	ldrb	r0, [r2, #1]
 8006f40:	2200      	movs	r2, #0
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	4798      	blx	r3
      break;
 8006f46:	e04e      	b.n	8006fe6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b0b      	cmp	r3, #11
 8006f4e:	d02e      	beq.n	8006fae <USBD_CDC_Setup+0x104>
 8006f50:	2b0b      	cmp	r3, #11
 8006f52:	dc38      	bgt.n	8006fc6 <USBD_CDC_Setup+0x11c>
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <USBD_CDC_Setup+0xb4>
 8006f58:	2b0a      	cmp	r3, #10
 8006f5a:	d014      	beq.n	8006f86 <USBD_CDC_Setup+0xdc>
 8006f5c:	e033      	b.n	8006fc6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d107      	bne.n	8006f78 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f9d1 	bl	8008318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f76:	e02e      	b.n	8006fd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f962 	bl	8008244 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f80:	2302      	movs	r3, #2
 8006f82:	75fb      	strb	r3, [r7, #23]
          break;
 8006f84:	e027      	b.n	8006fd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d107      	bne.n	8006fa0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f90:	f107 030f 	add.w	r3, r7, #15
 8006f94:	2201      	movs	r2, #1
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 f9bd 	bl	8008318 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f9e:	e01a      	b.n	8006fd6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f94e 	bl	8008244 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	75fb      	strb	r3, [r7, #23]
          break;
 8006fac:	e013      	b.n	8006fd6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d00d      	beq.n	8006fd4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 f942 	bl	8008244 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fc4:	e006      	b.n	8006fd4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 f93b 	bl	8008244 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fd2:	e000      	b.n	8006fd6 <USBD_CDC_Setup+0x12c>
          break;
 8006fd4:	bf00      	nop
      }
      break;
 8006fd6:	e006      	b.n	8006fe6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f932 	bl	8008244 <USBD_CtlError>
      ret = USBD_FAIL;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe4:	bf00      	nop
  }

  return ret;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007002:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800700a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d03a      	beq.n	800708c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	331c      	adds	r3, #28
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d029      	beq.n	8007080 <USBD_CDC_DataIn+0x90>
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	331c      	adds	r3, #28
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	78f9      	ldrb	r1, [r7, #3]
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	460b      	mov	r3, r1
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	4403      	add	r3, r0
 800704c:	3320      	adds	r3, #32
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	fbb2 f1f3 	udiv	r1, r2, r3
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d110      	bne.n	8007080 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	331c      	adds	r3, #28
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007072:	78f9      	ldrb	r1, [r7, #3]
 8007074:	2300      	movs	r3, #0
 8007076:	2200      	movs	r2, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 fdfb 	bl	8008c74 <USBD_LL_Transmit>
 800707e:	e003      	b.n	8007088 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800708c:	2302      	movs	r3, #2
  }
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fe26 	bl	8008d00 <USBD_LL_GetRxDataSize>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00d      	beq.n	80070e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80070da:	4611      	mov	r1, r2
 80070dc:	4798      	blx	r3

    return USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	e000      	b.n	80070e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80070e2:	2302      	movs	r3, #2
  }
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007102:	2b00      	cmp	r3, #0
 8007104:	d014      	beq.n	8007130 <USBD_CDC_EP0_RxReady+0x44>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800710c:	2bff      	cmp	r3, #255	@ 0xff
 800710e:	d00f      	beq.n	8007130 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800711e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007126:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	22ff      	movs	r2, #255	@ 0xff
 800712c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2243      	movs	r2, #67	@ 0x43
 8007148:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800714a:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000098 	.word	0x20000098

0800715c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2243      	movs	r2, #67	@ 0x43
 8007168:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800716a:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000054 	.word	0x20000054

0800717c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2243      	movs	r2, #67	@ 0x43
 8007188:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800718a:	4b03      	ldr	r3, [pc, #12]	@ (8007198 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200000dc 	.word	0x200000dc

0800719c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	220a      	movs	r2, #10
 80071a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071aa:	4b03      	ldr	r3, [pc, #12]	@ (80071b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000010 	.word	0x20000010

080071bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80071c6:	2302      	movs	r3, #2
 80071c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800722a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800724e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01c      	beq.n	8007294 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007260:	2b00      	cmp	r3, #0
 8007262:	d115      	bne.n	8007290 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007282:	b29b      	uxth	r3, r3
 8007284:	2181      	movs	r1, #129	@ 0x81
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fcf4 	bl	8008c74 <USBD_LL_Transmit>

      return USBD_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e002      	b.n	8007296 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d017      	beq.n	80072e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7c1b      	ldrb	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072ca:	2101      	movs	r1, #1
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fcf4 	bl	8008cba <USBD_LL_PrepareReceive>
 80072d2:	e007      	b.n	80072e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072da:	2340      	movs	r3, #64	@ 0x40
 80072dc:	2101      	movs	r1, #1
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fceb 	bl	8008cba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e000      	b.n	80072ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80072e8:	2302      	movs	r3, #2
  }
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	4613      	mov	r3, r2
 80072fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007306:	2302      	movs	r3, #2
 8007308:	e01a      	b.n	8007340 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	79fa      	ldrb	r2, [r7, #7]
 8007336:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f001 fb59 	bl	80089f0 <USBD_LL_Init>

  return USBD_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e001      	b.n	800736e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800736a:	2302      	movs	r3, #2
 800736c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fb8e 	bl	8008aa4 <USBD_LL_Start>

  return USBD_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	460b      	mov	r3, r1
 80073b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073b2:	2302      	movs	r3, #2
 80073b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	4611      	mov	r1, r2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	4611      	mov	r1, r2
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4798      	blx	r3

  return USBD_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fed8 	bl	80081d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007430:	461a      	mov	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2b02      	cmp	r3, #2
 8007444:	d016      	beq.n	8007474 <USBD_LL_SetupStage+0x6a>
 8007446:	2b02      	cmp	r3, #2
 8007448:	d81c      	bhi.n	8007484 <USBD_LL_SetupStage+0x7a>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <USBD_LL_SetupStage+0x4a>
 800744e:	2b01      	cmp	r3, #1
 8007450:	d008      	beq.n	8007464 <USBD_LL_SetupStage+0x5a>
 8007452:	e017      	b.n	8007484 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9cb 	bl	80077f8 <USBD_StdDevReq>
      break;
 8007462:	e01a      	b.n	800749a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa2d 	bl	80078cc <USBD_StdItfReq>
      break;
 8007472:	e012      	b.n	800749a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fa6d 	bl	800795c <USBD_StdEPReq>
      break;
 8007482:	e00a      	b.n	800749a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800748a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800748e:	b2db      	uxtb	r3, r3
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 fb66 	bl	8008b64 <USBD_LL_StallEP>
      break;
 8007498:	bf00      	nop
  }

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	460b      	mov	r3, r1
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d14b      	bne.n	8007550 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80074be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d134      	bne.n	8007534 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d919      	bls.n	800750a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d203      	bcs.n	80074f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	e002      	b.n	80074fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 ff54 	bl	80083b0 <USBD_CtlContinueRx>
 8007508:	e038      	b.n	800757c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800751c:	2b03      	cmp	r3, #3
 800751e:	d105      	bne.n	800752c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 ff51 	bl	80083d4 <USBD_CtlSendStatus>
 8007532:	e023      	b.n	800757c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800753a:	2b05      	cmp	r3, #5
 800753c:	d11e      	bne.n	800757c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007546:	2100      	movs	r1, #0
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f001 fb0b 	bl	8008b64 <USBD_LL_StallEP>
 800754e:	e015      	b.n	800757c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00d      	beq.n	8007578 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007562:	2b03      	cmp	r3, #3
 8007564:	d108      	bne.n	8007578 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	7afa      	ldrb	r2, [r7, #11]
 8007570:	4611      	mov	r1, r2
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	4798      	blx	r3
 8007576:	e001      	b.n	800757c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007578:	2302      	movs	r3, #2
 800757a:	e000      	b.n	800757e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	460b      	mov	r3, r1
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d17f      	bne.n	800769a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3314      	adds	r3, #20
 800759e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d15c      	bne.n	8007664 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d915      	bls.n	80075e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 febe 	bl	8008350 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d4:	2300      	movs	r3, #0
 80075d6:	2200      	movs	r2, #0
 80075d8:	2100      	movs	r1, #0
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f001 fb6d 	bl	8008cba <USBD_LL_PrepareReceive>
 80075e0:	e04e      	b.n	8007680 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	6912      	ldr	r2, [r2, #16]
 80075ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80075ee:	fb01 f202 	mul.w	r2, r1, r2
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11c      	bne.n	8007632 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007600:	429a      	cmp	r2, r3
 8007602:	d316      	bcc.n	8007632 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800760e:	429a      	cmp	r2, r3
 8007610:	d20f      	bcs.n	8007632 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fe9a 	bl	8008350 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007624:	2300      	movs	r3, #0
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f001 fb45 	bl	8008cba <USBD_LL_PrepareReceive>
 8007630:	e026      	b.n	8007680 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007644:	2b03      	cmp	r3, #3
 8007646:	d105      	bne.n	8007654 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007654:	2180      	movs	r1, #128	@ 0x80
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f001 fa84 	bl	8008b64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fecc 	bl	80083fa <USBD_CtlReceiveStatus>
 8007662:	e00d      	b.n	8007680 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800766a:	2b04      	cmp	r3, #4
 800766c:	d004      	beq.n	8007678 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007678:	2180      	movs	r1, #128	@ 0x80
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f001 fa72 	bl	8008b64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007686:	2b01      	cmp	r3, #1
 8007688:	d11d      	bne.n	80076c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7ff fe81 	bl	8007392 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007698:	e015      	b.n	80076c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00d      	beq.n	80076c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d108      	bne.n	80076c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	7afa      	ldrb	r2, [r7, #11]
 80076ba:	4611      	mov	r1, r2
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	4798      	blx	r3
 80076c0:	e001      	b.n	80076c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076c2:	2302      	movs	r3, #2
 80076c4:	e000      	b.n	80076c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076d8:	2340      	movs	r3, #64	@ 0x40
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 f9fb 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2240      	movs	r2, #64	@ 0x40
 80076f0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076f4:	2340      	movs	r3, #64	@ 0x40
 80076f6:	2200      	movs	r2, #0
 80076f8:	2180      	movs	r1, #128	@ 0x80
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f9ed 	bl	8008ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2240      	movs	r2, #64	@ 0x40
 800770a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	6852      	ldr	r2, [r2, #4]
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	4611      	mov	r1, r2
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	4798      	blx	r3
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2204      	movs	r2, #4
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d105      	bne.n	80077b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr

080077c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d10b      	bne.n	80077ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800780e:	2b40      	cmp	r3, #64	@ 0x40
 8007810:	d005      	beq.n	800781e <USBD_StdDevReq+0x26>
 8007812:	2b40      	cmp	r3, #64	@ 0x40
 8007814:	d84f      	bhi.n	80078b6 <USBD_StdDevReq+0xbe>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <USBD_StdDevReq+0x36>
 800781a:	2b20      	cmp	r3, #32
 800781c:	d14b      	bne.n	80078b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
      break;
 800782c:	e048      	b.n	80078c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d839      	bhi.n	80078aa <USBD_StdDevReq+0xb2>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <USBD_StdDevReq+0x44>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	0800788d 	.word	0x0800788d
 8007840:	080078a1 	.word	0x080078a1
 8007844:	080078ab 	.word	0x080078ab
 8007848:	08007897 	.word	0x08007897
 800784c:	080078ab 	.word	0x080078ab
 8007850:	0800786f 	.word	0x0800786f
 8007854:	08007865 	.word	0x08007865
 8007858:	080078ab 	.word	0x080078ab
 800785c:	08007883 	.word	0x08007883
 8007860:	08007879 	.word	0x08007879
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9dc 	bl	8007c24 <USBD_GetDescriptor>
          break;
 800786c:	e022      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb3f 	bl	8007ef4 <USBD_SetAddress>
          break;
 8007876:	e01d      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb7e 	bl	8007f7c <USBD_SetConfig>
          break;
 8007880:	e018      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc07 	bl	8008098 <USBD_GetConfig>
          break;
 800788a:	e013      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fc37 	bl	8008102 <USBD_GetStatus>
          break;
 8007894:	e00e      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc65 	bl	8008168 <USBD_SetFeature>
          break;
 800789e:	e009      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc74 	bl	8008190 <USBD_ClrFeature>
          break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fcc9 	bl	8008244 <USBD_CtlError>
          break;
 80078b2:	bf00      	nop
      }
      break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fcc3 	bl	8008244 <USBD_CtlError>
      break;
 80078be:	bf00      	nop
  }

  return ret;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop

080078cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078e2:	2b40      	cmp	r3, #64	@ 0x40
 80078e4:	d005      	beq.n	80078f2 <USBD_StdItfReq+0x26>
 80078e6:	2b40      	cmp	r3, #64	@ 0x40
 80078e8:	d82e      	bhi.n	8007948 <USBD_StdItfReq+0x7c>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USBD_StdItfReq+0x26>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d12a      	bne.n	8007948 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078f8:	3b01      	subs	r3, #1
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d81d      	bhi.n	800793a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d813      	bhi.n	8007930 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d110      	bne.n	8007944 <USBD_StdItfReq+0x78>
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10d      	bne.n	8007944 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd53 	bl	80083d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800792e:	e009      	b.n	8007944 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc86 	bl	8008244 <USBD_CtlError>
          break;
 8007938:	e004      	b.n	8007944 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fc81 	bl	8008244 <USBD_CtlError>
          break;
 8007942:	e000      	b.n	8007946 <USBD_StdItfReq+0x7a>
          break;
 8007944:	bf00      	nop
      }
      break;
 8007946:	e004      	b.n	8007952 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fc7a 	bl	8008244 <USBD_CtlError>
      break;
 8007950:	bf00      	nop
  }

  return USBD_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	889b      	ldrh	r3, [r3, #4]
 800796e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007978:	2b40      	cmp	r3, #64	@ 0x40
 800797a:	d007      	beq.n	800798c <USBD_StdEPReq+0x30>
 800797c:	2b40      	cmp	r3, #64	@ 0x40
 800797e:	f200 8146 	bhi.w	8007c0e <USBD_StdEPReq+0x2b2>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <USBD_StdEPReq+0x40>
 8007986:	2b20      	cmp	r3, #32
 8007988:	f040 8141 	bne.w	8007c0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
      break;
 800799a:	e13d      	b.n	8007c18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d10a      	bne.n	80079be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	e12d      	b.n	8007c1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d007      	beq.n	80079d6 <USBD_StdEPReq+0x7a>
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	f300 811b 	bgt.w	8007c02 <USBD_StdEPReq+0x2a6>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d072      	beq.n	8007ab6 <USBD_StdEPReq+0x15a>
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d03a      	beq.n	8007a4a <USBD_StdEPReq+0xee>
 80079d4:	e115      	b.n	8007c02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d002      	beq.n	80079e6 <USBD_StdEPReq+0x8a>
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d015      	beq.n	8007a10 <USBD_StdEPReq+0xb4>
 80079e4:	e02b      	b.n	8007a3e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00c      	beq.n	8007a06 <USBD_StdEPReq+0xaa>
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b80      	cmp	r3, #128	@ 0x80
 80079f0:	d009      	beq.n	8007a06 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f8b4 	bl	8008b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079fc:	2180      	movs	r1, #128	@ 0x80
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 f8b0 	bl	8008b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a04:	e020      	b.n	8007a48 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc1b 	bl	8008244 <USBD_CtlError>
              break;
 8007a0e:	e01b      	b.n	8007a48 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	885b      	ldrh	r3, [r3, #2]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10e      	bne.n	8007a36 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <USBD_StdEPReq+0xda>
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b80      	cmp	r3, #128	@ 0x80
 8007a22:	d008      	beq.n	8007a36 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	88db      	ldrh	r3, [r3, #6]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d104      	bne.n	8007a36 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f897 	bl	8008b64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fccc 	bl	80083d4 <USBD_CtlSendStatus>

              break;
 8007a3c:	e004      	b.n	8007a48 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fbff 	bl	8008244 <USBD_CtlError>
              break;
 8007a46:	bf00      	nop
          }
          break;
 8007a48:	e0e0      	b.n	8007c0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d002      	beq.n	8007a5a <USBD_StdEPReq+0xfe>
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d015      	beq.n	8007a84 <USBD_StdEPReq+0x128>
 8007a58:	e026      	b.n	8007aa8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00c      	beq.n	8007a7a <USBD_StdEPReq+0x11e>
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b80      	cmp	r3, #128	@ 0x80
 8007a64:	d009      	beq.n	8007a7a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 f87a 	bl	8008b64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a70:	2180      	movs	r1, #128	@ 0x80
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f876 	bl	8008b64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a78:	e01c      	b.n	8007ab4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fbe1 	bl	8008244 <USBD_CtlError>
              break;
 8007a82:	e017      	b.n	8007ab4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	885b      	ldrh	r3, [r3, #2]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d112      	bne.n	8007ab2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f881 	bl	8008ba2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc97 	bl	80083d4 <USBD_CtlSendStatus>
              }
              break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fbca 	bl	8008244 <USBD_CtlError>
              break;
 8007ab0:	e000      	b.n	8007ab4 <USBD_StdEPReq+0x158>
              break;
 8007ab2:	bf00      	nop
          }
          break;
 8007ab4:	e0aa      	b.n	8007c0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d002      	beq.n	8007ac6 <USBD_StdEPReq+0x16a>
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d032      	beq.n	8007b2a <USBD_StdEPReq+0x1ce>
 8007ac4:	e097      	b.n	8007bf6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <USBD_StdEPReq+0x180>
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	2b80      	cmp	r3, #128	@ 0x80
 8007ad0:	d004      	beq.n	8007adc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fbb5 	bl	8008244 <USBD_CtlError>
                break;
 8007ada:	e091      	b.n	8007c00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da0b      	bge.n	8007afc <USBD_StdEPReq+0x1a0>
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	3310      	adds	r3, #16
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	3304      	adds	r3, #4
 8007afa:	e00b      	b.n	8007b14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	3304      	adds	r3, #4
 8007b14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fbf8 	bl	8008318 <USBD_CtlSendData>
              break;
 8007b28:	e06a      	b.n	8007c00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da11      	bge.n	8007b56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3318      	adds	r3, #24
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d117      	bne.n	8007b7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb78 	bl	8008244 <USBD_CtlError>
                  break;
 8007b54:	e054      	b.n	8007c00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	f003 020f 	and.w	r2, r3, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	440b      	add	r3, r1
 8007b68:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fb65 	bl	8008244 <USBD_CtlError>
                  break;
 8007b7a:	e041      	b.n	8007c00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da0b      	bge.n	8007b9c <USBD_StdEPReq+0x240>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	3310      	adds	r3, #16
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4413      	add	r3, r2
 8007b98:	3304      	adds	r3, #4
 8007b9a:	e00b      	b.n	8007bb4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <USBD_StdEPReq+0x266>
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b80      	cmp	r3, #128	@ 0x80
 8007bc0:	d103      	bne.n	8007bca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e00e      	b.n	8007be8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f806 	bl	8008be0 <USBD_LL_IsStallEP>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e002      	b.n	8007be8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2202      	movs	r2, #2
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fb92 	bl	8008318 <USBD_CtlSendData>
              break;
 8007bf4:	e004      	b.n	8007c00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb23 	bl	8008244 <USBD_CtlError>
              break;
 8007bfe:	bf00      	nop
          }
          break;
 8007c00:	e004      	b.n	8007c0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fb1d 	bl	8008244 <USBD_CtlError>
          break;
 8007c0a:	bf00      	nop
      }
      break;
 8007c0c:	e004      	b.n	8007c18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fb17 	bl	8008244 <USBD_CtlError>
      break;
 8007c16:	bf00      	nop
  }

  return ret;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	0a1b      	lsrs	r3, r3, #8
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	2b06      	cmp	r3, #6
 8007c46:	f200 8128 	bhi.w	8007e9a <USBD_GetDescriptor+0x276>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <USBD_GetDescriptor+0x2c>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c6d 	.word	0x08007c6d
 8007c54:	08007c85 	.word	0x08007c85
 8007c58:	08007cc5 	.word	0x08007cc5
 8007c5c:	08007e9b 	.word	0x08007e9b
 8007c60:	08007e9b 	.word	0x08007e9b
 8007c64:	08007e3b 	.word	0x08007e3b
 8007c68:	08007e67 	.word	0x08007e67
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	7c12      	ldrb	r2, [r2, #16]
 8007c78:	f107 0108 	add.w	r1, r7, #8
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	60f8      	str	r0, [r7, #12]
      break;
 8007c82:	e112      	b.n	8007eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	7c1b      	ldrb	r3, [r3, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10d      	bne.n	8007ca8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	f107 0208 	add.w	r2, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ca6:	e100      	b.n	8007eaa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	f107 0208 	add.w	r2, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	701a      	strb	r2, [r3, #0]
      break;
 8007cc2:	e0f2      	b.n	8007eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	885b      	ldrh	r3, [r3, #2]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	f200 80ac 	bhi.w	8007e28 <USBD_GetDescriptor+0x204>
 8007cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd8 <USBD_GetDescriptor+0xb4>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007cf1 	.word	0x08007cf1
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d8d 	.word	0x08007d8d
 8007ce8:	08007dc1 	.word	0x08007dc1
 8007cec:	08007df5 	.word	0x08007df5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e091      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa94 	bl	8008244 <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e089      	b.n	8007e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7c12      	ldrb	r2, [r2, #16]
 8007d3c:	f107 0108 	add.w	r1, r7, #8
 8007d40:	4610      	mov	r0, r2
 8007d42:	4798      	blx	r3
 8007d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d46:	e077      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa7a 	bl	8008244 <USBD_CtlError>
            err++;
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	3301      	adds	r3, #1
 8007d54:	72fb      	strb	r3, [r7, #11]
          break;
 8007d56:	e06f      	b.n	8007e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7a:	e05d      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa60 	bl	8008244 <USBD_CtlError>
            err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8a:	e055      	b.n	8007e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dae:	e043      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa46 	bl	8008244 <USBD_CtlError>
            err++;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dbe:	e03b      	b.n	8007e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de2:	e029      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa2c 	bl	8008244 <USBD_CtlError>
            err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
          break;
 8007df2:	e021      	b.n	8007e38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 0108 	add.w	r1, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e16:	e00f      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa12 	bl	8008244 <USBD_CtlError>
            err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
          break;
 8007e26:	e007      	b.n	8007e38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa0a 	bl	8008244 <USBD_CtlError>
          err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e36:	e038      	b.n	8007eaa <USBD_GetDescriptor+0x286>
 8007e38:	e037      	b.n	8007eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	7c1b      	ldrb	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4a:	f107 0208 	add.w	r2, r7, #8
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e54:	e029      	b.n	8007eaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9f3 	bl	8008244 <USBD_CtlError>
        err++;
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	3301      	adds	r3, #1
 8007e62:	72fb      	strb	r3, [r7, #11]
      break;
 8007e64:	e021      	b.n	8007eaa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	7c1b      	ldrb	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10d      	bne.n	8007e8a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	f107 0208 	add.w	r2, r7, #8
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4798      	blx	r3
 8007e7e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	2207      	movs	r2, #7
 8007e86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e88:	e00f      	b.n	8007eaa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9d9 	bl	8008244 <USBD_CtlError>
        err++;
 8007e92:	7afb      	ldrb	r3, [r7, #11]
 8007e94:	3301      	adds	r3, #1
 8007e96:	72fb      	strb	r3, [r7, #11]
      break;
 8007e98:	e007      	b.n	8007eaa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f9d1 	bl	8008244 <USBD_CtlError>
      err++;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea8:	bf00      	nop
  }

  if (err != 0U)
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d11c      	bne.n	8007eea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007eb0:	893b      	ldrh	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <USBD_GetDescriptor+0x2b6>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88db      	ldrh	r3, [r3, #6]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00d      	beq.n	8007eda <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	88da      	ldrh	r2, [r3, #6]
 8007ec2:	893b      	ldrh	r3, [r7, #8]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bf28      	it	cs
 8007ec8:	4613      	movcs	r3, r2
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ece:	893b      	ldrh	r3, [r7, #8]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68f9      	ldr	r1, [r7, #12]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fa1f 	bl	8008318 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa76 	bl	80083d4 <USBD_CtlSendStatus>
 8007ee8:	e000      	b.n	8007eec <USBD_GetDescriptor+0x2c8>
    return;
 8007eea:	bf00      	nop
    }
  }
}
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop

08007ef4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	889b      	ldrh	r3, [r3, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d130      	bne.n	8007f68 <USBD_SetAddress+0x74>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88db      	ldrh	r3, [r3, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d12c      	bne.n	8007f68 <USBD_SetAddress+0x74>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	885b      	ldrh	r3, [r3, #2]
 8007f12:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f14:	d828      	bhi.n	8007f68 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d104      	bne.n	8007f36 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f988 	bl	8008244 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f34:	e01d      	b.n	8007f72 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	7bfa      	ldrb	r2, [r7, #15]
 8007f3a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fe77 	bl	8008c36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fa43 	bl	80083d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d004      	beq.n	8007f5e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5c:	e009      	b.n	8007f72 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	e004      	b.n	8007f72 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f96a 	bl	8008244 <USBD_CtlError>
  }
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	4b41      	ldr	r3, [pc, #260]	@ (8008094 <USBD_SetConfig+0x118>)
 8007f8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f90:	4b40      	ldr	r3, [pc, #256]	@ (8008094 <USBD_SetConfig+0x118>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d904      	bls.n	8007fa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f952 	bl	8008244 <USBD_CtlError>
 8007fa0:	e075      	b.n	800808e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d002      	beq.n	8007fb2 <USBD_SetConfig+0x36>
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d023      	beq.n	8007ff8 <USBD_SetConfig+0x7c>
 8007fb0:	e062      	b.n	8008078 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007fb2:	4b38      	ldr	r3, [pc, #224]	@ (8008094 <USBD_SetConfig+0x118>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01a      	beq.n	8007ff0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007fba:	4b36      	ldr	r3, [pc, #216]	@ (8008094 <USBD_SetConfig+0x118>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fcc:	4b31      	ldr	r3, [pc, #196]	@ (8008094 <USBD_SetConfig+0x118>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff f9e7 	bl	80073a6 <USBD_SetClassConfig>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d104      	bne.n	8007fe8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f92f 	bl	8008244 <USBD_CtlError>
            return;
 8007fe6:	e052      	b.n	800808e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f9f3 	bl	80083d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fee:	e04e      	b.n	800808e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9ef 	bl	80083d4 <USBD_CtlSendStatus>
        break;
 8007ff6:	e04a      	b.n	800808e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ff8:	4b26      	ldr	r3, [pc, #152]	@ (8008094 <USBD_SetConfig+0x118>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d112      	bne.n	8008026 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008008:	4b22      	ldr	r3, [pc, #136]	@ (8008094 <USBD_SetConfig+0x118>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008012:	4b20      	ldr	r3, [pc, #128]	@ (8008094 <USBD_SetConfig+0x118>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff f9e3 	bl	80073e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9d8 	bl	80083d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008024:	e033      	b.n	800808e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008026:	4b1b      	ldr	r3, [pc, #108]	@ (8008094 <USBD_SetConfig+0x118>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d01d      	beq.n	8008070 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff f9d1 	bl	80073e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008042:	4b14      	ldr	r3, [pc, #80]	@ (8008094 <USBD_SetConfig+0x118>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800804c:	4b11      	ldr	r3, [pc, #68]	@ (8008094 <USBD_SetConfig+0x118>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff f9a7 	bl	80073a6 <USBD_SetClassConfig>
 8008058:	4603      	mov	r3, r0
 800805a:	2b02      	cmp	r3, #2
 800805c:	d104      	bne.n	8008068 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8ef 	bl	8008244 <USBD_CtlError>
            return;
 8008066:	e012      	b.n	800808e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9b3 	bl	80083d4 <USBD_CtlSendStatus>
        break;
 800806e:	e00e      	b.n	800808e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f9af 	bl	80083d4 <USBD_CtlSendStatus>
        break;
 8008076:	e00a      	b.n	800808e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8e2 	bl	8008244 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008080:	4b04      	ldr	r3, [pc, #16]	@ (8008094 <USBD_SetConfig+0x118>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff f9ac 	bl	80073e4 <USBD_ClrClassConfig>
        break;
 800808c:	bf00      	nop
    }
  }
}
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200003e8 	.word	0x200003e8

08008098 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	88db      	ldrh	r3, [r3, #6]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d004      	beq.n	80080b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f8c9 	bl	8008244 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080b2:	e022      	b.n	80080fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	dc02      	bgt.n	80080c4 <USBD_GetConfig+0x2c>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	dc03      	bgt.n	80080ca <USBD_GetConfig+0x32>
 80080c2:	e015      	b.n	80080f0 <USBD_GetConfig+0x58>
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d00b      	beq.n	80080e0 <USBD_GetConfig+0x48>
 80080c8:	e012      	b.n	80080f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3308      	adds	r3, #8
 80080d4:	2201      	movs	r2, #1
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f91d 	bl	8008318 <USBD_CtlSendData>
        break;
 80080de:	e00c      	b.n	80080fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3304      	adds	r3, #4
 80080e4:	2201      	movs	r2, #1
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f915 	bl	8008318 <USBD_CtlSendData>
        break;
 80080ee:	e004      	b.n	80080fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8a6 	bl	8008244 <USBD_CtlError>
        break;
 80080f8:	bf00      	nop
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008112:	3b01      	subs	r3, #1
 8008114:	2b02      	cmp	r3, #2
 8008116:	d81e      	bhi.n	8008156 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	88db      	ldrh	r3, [r3, #6]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d004      	beq.n	800812a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f88e 	bl	8008244 <USBD_CtlError>
        break;
 8008128:	e01a      	b.n	8008160 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	f043 0202 	orr.w	r2, r3, #2
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	330c      	adds	r3, #12
 800814a:	2202      	movs	r2, #2
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f8e2 	bl	8008318 <USBD_CtlSendData>
      break;
 8008154:	e004      	b.n	8008160 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f873 	bl	8008244 <USBD_CtlError>
      break;
 800815e:	bf00      	nop
  }
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d106      	bne.n	8008188 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f926 	bl	80083d4 <USBD_CtlSendStatus>
  }
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d80b      	bhi.n	80081be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	885b      	ldrh	r3, [r3, #2]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10c      	bne.n	80081c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f90c 	bl	80083d4 <USBD_CtlSendStatus>
      }
      break;
 80081bc:	e004      	b.n	80081c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f83f 	bl	8008244 <USBD_CtlError>
      break;
 80081c6:	e000      	b.n	80081ca <USBD_ClrFeature+0x3a>
      break;
 80081c8:	bf00      	nop
  }
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	785a      	ldrb	r2, [r3, #1]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	3302      	adds	r3, #2
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	3303      	adds	r3, #3
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	021b      	lsls	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4413      	add	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	3304      	adds	r3, #4
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	3305      	adds	r3, #5
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b29b      	uxth	r3, r3
 8008218:	4413      	add	r3, r2
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	3306      	adds	r3, #6
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	3307      	adds	r3, #7
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	4413      	add	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	80da      	strh	r2, [r3, #6]

}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800824e:	2180      	movs	r1, #128	@ 0x80
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fc87 	bl	8008b64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008256:	2100      	movs	r1, #0
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fc83 	bl	8008b64 <USBD_LL_StallEP>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d032      	beq.n	80082e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f834 	bl	80082ea <USBD_GetLen>
 8008282:	4603      	mov	r3, r0
 8008284:	3301      	adds	r3, #1
 8008286:	b29b      	uxth	r3, r3
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	75fa      	strb	r2, [r7, #23]
 8008296:	461a      	mov	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	75fa      	strb	r2, [r7, #23]
 80082a8:	461a      	mov	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	2203      	movs	r2, #3
 80082b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082b2:	e012      	b.n	80082da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	60fa      	str	r2, [r7, #12]
 80082ba:	7dfa      	ldrb	r2, [r7, #23]
 80082bc:	1c51      	adds	r1, r2, #1
 80082be:	75f9      	strb	r1, [r7, #23]
 80082c0:	4611      	mov	r1, r2
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	440a      	add	r2, r1
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	75fa      	strb	r2, [r7, #23]
 80082d0:	461a      	mov	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e8      	bne.n	80082b4 <USBD_GetString+0x4e>
    }
  }
}
 80082e2:	bf00      	nop
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082f6:	e005      	b.n	8008304 <USBD_GetLen+0x1a>
  {
    len++;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	3301      	adds	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	3301      	adds	r3, #1
 8008302:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f5      	bne.n	80082f8 <USBD_GetLen+0xe>
  }

  return len;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	bc80      	pop	{r7}
 8008316:	4770      	bx	lr

08008318 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2202      	movs	r2, #2
 800832a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	2100      	movs	r1, #0
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fc97 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	2100      	movs	r1, #0
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fc85 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2203      	movs	r2, #3
 8008386:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008392:	88fa      	ldrh	r2, [r7, #6]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	2100      	movs	r1, #0
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fc8a 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083be:	88fb      	ldrh	r3, [r7, #6]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fc78 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2204      	movs	r2, #4
 80083e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fc42 	bl	8008c74 <USBD_LL_Transmit>

  return USBD_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2205      	movs	r2, #5
 8008406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800840a:	2300      	movs	r3, #0
 800840c:	2200      	movs	r2, #0
 800840e:	2100      	movs	r1, #0
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc52 	bl	8008cba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008424:	2200      	movs	r2, #0
 8008426:	4912      	ldr	r1, [pc, #72]	@ (8008470 <MX_USB_DEVICE_Init+0x50>)
 8008428:	4812      	ldr	r0, [pc, #72]	@ (8008474 <MX_USB_DEVICE_Init+0x54>)
 800842a:	f7fe ff62 	bl	80072f2 <USBD_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008434:	f7f9 fa5a 	bl	80018ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008438:	490f      	ldr	r1, [pc, #60]	@ (8008478 <MX_USB_DEVICE_Init+0x58>)
 800843a:	480e      	ldr	r0, [pc, #56]	@ (8008474 <MX_USB_DEVICE_Init+0x54>)
 800843c:	f7fe ff84 	bl	8007348 <USBD_RegisterClass>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008446:	f7f9 fa51 	bl	80018ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800844a:	490c      	ldr	r1, [pc, #48]	@ (800847c <MX_USB_DEVICE_Init+0x5c>)
 800844c:	4809      	ldr	r0, [pc, #36]	@ (8008474 <MX_USB_DEVICE_Init+0x54>)
 800844e:	f7fe feb5 	bl	80071bc <USBD_CDC_RegisterInterface>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008458:	f7f9 fa48 	bl	80018ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800845c:	4805      	ldr	r0, [pc, #20]	@ (8008474 <MX_USB_DEVICE_Init+0x54>)
 800845e:	f7fe ff8c 	bl	800737a <USBD_Start>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008468:	f7f9 fa40 	bl	80018ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800846c:	bf00      	nop
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000130 	.word	0x20000130
 8008474:	200003ec 	.word	0x200003ec
 8008478:	2000001c 	.word	0x2000001c
 800847c:	20000120 	.word	0x20000120

08008480 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008484:	2200      	movs	r2, #0
 8008486:	4905      	ldr	r1, [pc, #20]	@ (800849c <CDC_Init_FS+0x1c>)
 8008488:	4805      	ldr	r0, [pc, #20]	@ (80084a0 <CDC_Init_FS+0x20>)
 800848a:	f7fe fead 	bl	80071e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800848e:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <CDC_Init_FS+0x24>)
 8008490:	4803      	ldr	r0, [pc, #12]	@ (80084a0 <CDC_Init_FS+0x20>)
 8008492:	f7fe fec2 	bl	800721a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008496:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	20000ab0 	.word	0x20000ab0
 80084a0:	200003ec 	.word	0x200003ec
 80084a4:	200006b0 	.word	0x200006b0

080084a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr
	...

080084b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
 80084c4:	4613      	mov	r3, r2
 80084c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b23      	cmp	r3, #35	@ 0x23
 80084cc:	d84a      	bhi.n	8008564 <CDC_Control_FS+0xac>
 80084ce:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <CDC_Control_FS+0x1c>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	08008565 	.word	0x08008565
 80084d8:	08008565 	.word	0x08008565
 80084dc:	08008565 	.word	0x08008565
 80084e0:	08008565 	.word	0x08008565
 80084e4:	08008565 	.word	0x08008565
 80084e8:	08008565 	.word	0x08008565
 80084ec:	08008565 	.word	0x08008565
 80084f0:	08008565 	.word	0x08008565
 80084f4:	08008565 	.word	0x08008565
 80084f8:	08008565 	.word	0x08008565
 80084fc:	08008565 	.word	0x08008565
 8008500:	08008565 	.word	0x08008565
 8008504:	08008565 	.word	0x08008565
 8008508:	08008565 	.word	0x08008565
 800850c:	08008565 	.word	0x08008565
 8008510:	08008565 	.word	0x08008565
 8008514:	08008565 	.word	0x08008565
 8008518:	08008565 	.word	0x08008565
 800851c:	08008565 	.word	0x08008565
 8008520:	08008565 	.word	0x08008565
 8008524:	08008565 	.word	0x08008565
 8008528:	08008565 	.word	0x08008565
 800852c:	08008565 	.word	0x08008565
 8008530:	08008565 	.word	0x08008565
 8008534:	08008565 	.word	0x08008565
 8008538:	08008565 	.word	0x08008565
 800853c:	08008565 	.word	0x08008565
 8008540:	08008565 	.word	0x08008565
 8008544:	08008565 	.word	0x08008565
 8008548:	08008565 	.word	0x08008565
 800854c:	08008565 	.word	0x08008565
 8008550:	08008565 	.word	0x08008565
 8008554:	08008565 	.word	0x08008565
 8008558:	08008565 	.word	0x08008565
 800855c:	08008565 	.word	0x08008565
 8008560:	08008565 	.word	0x08008565
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008564:	bf00      	nop
  }

  return (USBD_OK);
 8008566:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop

08008574 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e025      	b.n	80085d0 <CDC_Receive_FS+0x5c>
    char receivedChar = Buf[i];
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b0a      	cmp	r3, #10
 8008592:	d10b      	bne.n	80085ac <CDC_Receive_FS+0x38>
      usbBuffer[usbBufferIndex] = '\0';
 8008594:	4b17      	ldr	r3, [pc, #92]	@ (80085f4 <CDC_Receive_FS+0x80>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a17      	ldr	r2, [pc, #92]	@ (80085f8 <CDC_Receive_FS+0x84>)
 800859a:	2100      	movs	r1, #0
 800859c:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;
 800859e:	4b17      	ldr	r3, [pc, #92]	@ (80085fc <CDC_Receive_FS+0x88>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
      usbBufferIndex = 0;
 80085a4:	4b13      	ldr	r3, [pc, #76]	@ (80085f4 <CDC_Receive_FS+0x80>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
      break;
 80085aa:	e016      	b.n	80085da <CDC_Receive_FS+0x66>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	2b0d      	cmp	r3, #13
 80085b0:	d00b      	beq.n	80085ca <CDC_Receive_FS+0x56>
 80085b2:	4b10      	ldr	r3, [pc, #64]	@ (80085f4 <CDC_Receive_FS+0x80>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b62      	cmp	r3, #98	@ 0x62
 80085b8:	d807      	bhi.n	80085ca <CDC_Receive_FS+0x56>
      usbBuffer[usbBufferIndex++] = receivedChar;
 80085ba:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <CDC_Receive_FS+0x80>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	490c      	ldr	r1, [pc, #48]	@ (80085f4 <CDC_Receive_FS+0x80>)
 80085c2:	600a      	str	r2, [r1, #0]
 80085c4:	490c      	ldr	r1, [pc, #48]	@ (80085f8 <CDC_Receive_FS+0x84>)
 80085c6:	7afa      	ldrb	r2, [r7, #11]
 80085c8:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3301      	adds	r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d3d4      	bcc.n	8008584 <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4808      	ldr	r0, [pc, #32]	@ (8008600 <CDC_Receive_FS+0x8c>)
 80085de:	f7fe fe1c 	bl	800721a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085e2:	4807      	ldr	r0, [pc, #28]	@ (8008600 <CDC_Receive_FS+0x8c>)
 80085e4:	f7fe fe5b 	bl	800729e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200003d4 	.word	0x200003d4
 80085f8:	20000370 	.word	0x20000370
 80085fc:	20000000 	.word	0x20000000
 8008600:	200003ec 	.word	0x200003ec

08008604 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008614:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800861a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008626:	2301      	movs	r3, #1
 8008628:	e00b      	b.n	8008642 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800862a:	887b      	ldrh	r3, [r7, #2]
 800862c:	461a      	mov	r2, r3
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	4806      	ldr	r0, [pc, #24]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008632:	f7fe fdd9 	bl	80071e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008636:	4805      	ldr	r0, [pc, #20]	@ (800864c <CDC_Transmit_FS+0x48>)
 8008638:	f7fe fe02 	bl	8007240 <USBD_CDC_TransmitPacket>
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200003ec 	.word	0x200003ec

08008650 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2212      	movs	r2, #18
 8008660:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	@ (8008670 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	2000014c 	.word	0x2000014c

08008674 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2204      	movs	r2, #4
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20000160 	.word	0x20000160

08008698 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	@ (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fdd9 	bl	8008266 <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086bc:	f7ff fdd3 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	@ (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000eb0 	.word	0x20000eb0
 80086d0:	0800bfe8 	.word	0x0800bfe8

080086d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	4904      	ldr	r1, [pc, #16]	@ (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086e4:	4804      	ldr	r0, [pc, #16]	@ (80086f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086e6:	f7ff fdbe 	bl	8008266 <USBD_GetString>
  return USBD_StrDesc;
 80086ea:	4b02      	ldr	r3, [pc, #8]	@ (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000eb0 	.word	0x20000eb0
 80086f8:	0800c000 	.word	0x0800c000

080086fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	221a      	movs	r2, #26
 800870c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800870e:	f000 f843 	bl	8008798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008712:	4b02      	ldr	r3, [pc, #8]	@ (800871c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000164 	.word	0x20000164

08008720 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4907      	ldr	r1, [pc, #28]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4808      	ldr	r0, [pc, #32]	@ (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fd95 	bl	8008266 <USBD_GetString>
 800873c:	e004      	b.n	8008748 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4904      	ldr	r1, [pc, #16]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008742:	4805      	ldr	r0, [pc, #20]	@ (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008744:	f7ff fd8f 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	@ (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000eb0 	.word	0x20000eb0
 8008758:	0800c014 	.word	0x0800c014

0800875c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	@ (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fd77 	bl	8008266 <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	@ (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008780:	f7ff fd71 	bl	8008266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000eb0 	.word	0x20000eb0
 8008794:	0800c020 	.word	0x0800c020

08008798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800879e:	4b0f      	ldr	r3, [pc, #60]	@ (80087dc <Get_SerialNum+0x44>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	@ (80087e0 <Get_SerialNum+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087aa:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <Get_SerialNum+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087be:	2208      	movs	r2, #8
 80087c0:	4909      	ldr	r1, [pc, #36]	@ (80087e8 <Get_SerialNum+0x50>)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f814 	bl	80087f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087c8:	2204      	movs	r2, #4
 80087ca:	4908      	ldr	r1, [pc, #32]	@ (80087ec <Get_SerialNum+0x54>)
 80087cc:	68b8      	ldr	r0, [r7, #8]
 80087ce:	f000 f80f 	bl	80087f0 <IntToUnicode>
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	1ffff7e8 	.word	0x1ffff7e8
 80087e0:	1ffff7ec 	.word	0x1ffff7ec
 80087e4:	1ffff7f0 	.word	0x1ffff7f0
 80087e8:	20000166 	.word	0x20000166
 80087ec:	20000176 	.word	0x20000176

080087f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	e027      	b.n	8008858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	2b09      	cmp	r3, #9
 800880e:	d80b      	bhi.n	8008828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	0f1b      	lsrs	r3, r3, #28
 8008814:	b2da      	uxtb	r2, r3
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4619      	mov	r1, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	440b      	add	r3, r1
 8008820:	3230      	adds	r2, #48	@ 0x30
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e00a      	b.n	800883e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	b2da      	uxtb	r2, r3
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4619      	mov	r1, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	440b      	add	r3, r1
 8008838:	3237      	adds	r2, #55	@ 0x37
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	3301      	adds	r3, #1
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	3301      	adds	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	7dfa      	ldrb	r2, [r7, #23]
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3d3      	bcc.n	8008808 <IntToUnicode+0x18>
  }
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a0d      	ldr	r2, [pc, #52]	@ (80088b0 <HAL_PCD_MspInit+0x44>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d113      	bne.n	80088a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4a0c      	ldr	r2, [pc, #48]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 8008884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008888:	61d3      	str	r3, [r2, #28]
 800888a:	4b0a      	ldr	r3, [pc, #40]	@ (80088b4 <HAL_PCD_MspInit+0x48>)
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008896:	2200      	movs	r2, #0
 8008898:	2100      	movs	r1, #0
 800889a:	2014      	movs	r0, #20
 800889c:	f7f9 fadf 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80088a0:	2014      	movs	r0, #20
 80088a2:	f7f9 faf8 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	40005c00 	.word	0x40005c00
 80088b4:	40021000 	.word	0x40021000

080088b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fe fd9b 	bl	800740a <USBD_LL_SetupStage>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	440b      	add	r3, r1
 80088fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	4619      	mov	r1, r3
 8008906:	f7fe fdcd 	bl	80074a4 <USBD_LL_DataOutStage>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b082      	sub	sp, #8
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	440b      	add	r3, r1
 8008932:	3324      	adds	r3, #36	@ 0x24
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	4619      	mov	r1, r3
 800893a:	f7fe fe24 	bl	8007586 <USBD_LL_DataInStage>
}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe ff34 	bl	80077c2 <USBD_LL_SOF>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	799b      	ldrb	r3, [r3, #6]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d001      	beq.n	800897a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008976:	f7f8 ffb9 	bl	80018ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008980:	7bfa      	ldrb	r2, [r7, #15]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe fee4 	bl	8007752 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fe9d 	bl	80076d0 <USBD_LL_Reset>
}
 8008996:	bf00      	nop
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fede 	bl	8007770 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	7a9b      	ldrb	r3, [r3, #10]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089bc:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <HAL_PCD_SuspendCallback+0x30>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a03      	ldr	r2, [pc, #12]	@ (80089d0 <HAL_PCD_SuspendCallback+0x30>)
 80089c2:	f043 0306 	orr.w	r3, r3, #6
 80089c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	e000ed00 	.word	0xe000ed00

080089d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fed8 	bl	8007798 <USBD_LL_Resume>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80089f8:	4a28      	ldr	r2, [pc, #160]	@ (8008a9c <USBD_LL_Init+0xac>)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a26      	ldr	r2, [pc, #152]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a04:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a08:	4b24      	ldr	r3, [pc, #144]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a0a:	4a25      	ldr	r2, [pc, #148]	@ (8008aa0 <USBD_LL_Init+0xb0>)
 8008a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a0e:	4b23      	ldr	r3, [pc, #140]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a10:	2208      	movs	r2, #8
 8008a12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a14:	4b21      	ldr	r3, [pc, #132]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a16:	2202      	movs	r2, #2
 8008a18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a1a:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a20:	4b1e      	ldr	r3, [pc, #120]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a26:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a2c:	481b      	ldr	r0, [pc, #108]	@ (8008a9c <USBD_LL_Init+0xac>)
 8008a2e:	f7f9 fc00 	bl	8002232 <HAL_PCD_Init>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008a38:	f7f8 ff58 	bl	80018ec <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a42:	2318      	movs	r3, #24
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	f7fb f911 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a52:	2358      	movs	r3, #88	@ 0x58
 8008a54:	2200      	movs	r2, #0
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	f7fb f909 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a62:	23c0      	movs	r3, #192	@ 0xc0
 8008a64:	2200      	movs	r2, #0
 8008a66:	2181      	movs	r1, #129	@ 0x81
 8008a68:	f7fb f901 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008a76:	2200      	movs	r2, #0
 8008a78:	2101      	movs	r1, #1
 8008a7a:	f7fb f8f8 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2182      	movs	r1, #130	@ 0x82
 8008a8c:	f7fb f8ef 	bl	8003c6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	200010b0 	.word	0x200010b0
 8008aa0:	40005c00 	.word	0x40005c00

08008aa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f9 fcaf 	bl	800241e <HAL_PCD_Start>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 f94e 	bl	8008d68 <USBD_Get_USB_Status>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4603      	mov	r3, r0
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70bb      	strb	r3, [r7, #2]
 8008af0:	4613      	mov	r3, r2
 8008af2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b02:	78bb      	ldrb	r3, [r7, #2]
 8008b04:	883a      	ldrh	r2, [r7, #0]
 8008b06:	78f9      	ldrb	r1, [r7, #3]
 8008b08:	f7f9 fe03 	bl	8002712 <HAL_PCD_EP_Open>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f928 	bl	8008d68 <USBD_Get_USB_Status>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b084      	sub	sp, #16
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7f9 fe41 	bl	80027cc <HAL_PCD_EP_Close>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 f909 	bl	8008d68 <USBD_Get_USB_Status>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f9 fee9 	bl	800295a <HAL_PCD_EP_SetStall>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f8ea 	bl	8008d68 <USBD_Get_USB_Status>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7f9 ff2a 	bl	8002a1a <HAL_PCD_EP_ClrStall>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 f8cb 	bl	8008d68 <USBD_Get_USB_Status>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da0b      	bge.n	8008c14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c02:	68f9      	ldr	r1, [r7, #12]
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	440b      	add	r3, r1
 8008c0e:	3312      	adds	r3, #18
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	e00b      	b.n	8008c2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	440b      	add	r3, r1
 8008c26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bc80      	pop	{r7}
 8008c34:	4770      	bx	lr

08008c36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7f9 fd38 	bl	80026ca <HAL_PCD_SetAddress>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f881 	bl	8008d68 <USBD_Get_USB_Status>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	607a      	str	r2, [r7, #4]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	460b      	mov	r3, r1
 8008c82:	72fb      	strb	r3, [r7, #11]
 8008c84:	4613      	mov	r3, r2
 8008c86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008c96:	893b      	ldrh	r3, [r7, #8]
 8008c98:	7af9      	ldrb	r1, [r7, #11]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	f7f9 fe26 	bl	80028ec <HAL_PCD_EP_Transmit>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f85e 	bl	8008d68 <USBD_Get_USB_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	72fb      	strb	r3, [r7, #11]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008cdc:	893b      	ldrh	r3, [r7, #8]
 8008cde:	7af9      	ldrb	r1, [r7, #11]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f7f9 fdbb 	bl	800285c <HAL_PCD_EP_Receive>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f83b 	bl	8008d68 <USBD_Get_USB_Status>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f9 fdd1 	bl	80028be <HAL_PCD_EP_GetRxCount>
 8008d1c:	4603      	mov	r3, r0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d30:	4b02      	ldr	r3, [pc, #8]	@ (8008d3c <USBD_static_malloc+0x14>)
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc80      	pop	{r7}
 8008d3a:	4770      	bx	lr
 8008d3c:	20001388 	.word	0x20001388

08008d40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d76:	79fb      	ldrb	r3, [r7, #7]
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d817      	bhi.n	8008dac <USBD_Get_USB_Status+0x44>
 8008d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d84 <USBD_Get_USB_Status+0x1c>)
 8008d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d82:	bf00      	nop
 8008d84:	08008d95 	.word	0x08008d95
 8008d88:	08008d9b 	.word	0x08008d9b
 8008d8c:	08008da1 	.word	0x08008da1
 8008d90:	08008da7 	.word	0x08008da7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	e00b      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d9e:	e008      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
    break;
 8008da4:	e005      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008da6:	2302      	movs	r3, #2
 8008da8:	73fb      	strb	r3, [r7, #15]
    break;
 8008daa:	e002      	b.n	8008db2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dac:	2302      	movs	r3, #2
 8008dae:	73fb      	strb	r3, [r7, #15]
    break;
 8008db0:	bf00      	nop
  }
  return usb_status;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <atof>:
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f000 bdf9 	b.w	80099b8 <strtod>

08008dc6 <sulp>:
 8008dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dca:	460f      	mov	r7, r1
 8008dcc:	4690      	mov	r8, r2
 8008dce:	f001 ff83 	bl	800acd8 <__ulp>
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	460d      	mov	r5, r1
 8008dd6:	f1b8 0f00 	cmp.w	r8, #0
 8008dda:	d011      	beq.n	8008e00 <sulp+0x3a>
 8008ddc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008de0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd0b      	ble.n	8008e00 <sulp+0x3a>
 8008de8:	2400      	movs	r4, #0
 8008dea:	051b      	lsls	r3, r3, #20
 8008dec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008df0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008df4:	4622      	mov	r2, r4
 8008df6:	462b      	mov	r3, r5
 8008df8:	f7f7 fb6e 	bl	80004d8 <__aeabi_dmul>
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	4620      	mov	r0, r4
 8008e02:	4629      	mov	r1, r5
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e08 <_strtod_l>:
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	b09f      	sub	sp, #124	@ 0x7c
 8008e0e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e10:	2200      	movs	r2, #0
 8008e12:	460c      	mov	r4, r1
 8008e14:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e16:	f04f 0a00 	mov.w	sl, #0
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	460a      	mov	r2, r1
 8008e20:	9005      	str	r0, [sp, #20]
 8008e22:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e24:	7811      	ldrb	r1, [r2, #0]
 8008e26:	292b      	cmp	r1, #43	@ 0x2b
 8008e28:	d048      	beq.n	8008ebc <_strtod_l+0xb4>
 8008e2a:	d836      	bhi.n	8008e9a <_strtod_l+0x92>
 8008e2c:	290d      	cmp	r1, #13
 8008e2e:	d830      	bhi.n	8008e92 <_strtod_l+0x8a>
 8008e30:	2908      	cmp	r1, #8
 8008e32:	d830      	bhi.n	8008e96 <_strtod_l+0x8e>
 8008e34:	2900      	cmp	r1, #0
 8008e36:	d039      	beq.n	8008eac <_strtod_l+0xa4>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e3e:	782a      	ldrb	r2, [r5, #0]
 8008e40:	2a30      	cmp	r2, #48	@ 0x30
 8008e42:	f040 80b0 	bne.w	8008fa6 <_strtod_l+0x19e>
 8008e46:	786a      	ldrb	r2, [r5, #1]
 8008e48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e4c:	2a58      	cmp	r2, #88	@ 0x58
 8008e4e:	d16c      	bne.n	8008f2a <_strtod_l+0x122>
 8008e50:	9302      	str	r3, [sp, #8]
 8008e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e54:	4a8f      	ldr	r2, [pc, #572]	@ (8009094 <_strtod_l+0x28c>)
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	9805      	ldr	r0, [sp, #20]
 8008e5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e60:	a919      	add	r1, sp, #100	@ 0x64
 8008e62:	f001 f83b 	bl	8009edc <__gethex>
 8008e66:	f010 060f 	ands.w	r6, r0, #15
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	d005      	beq.n	8008e7a <_strtod_l+0x72>
 8008e6e:	2e06      	cmp	r6, #6
 8008e70:	d126      	bne.n	8008ec0 <_strtod_l+0xb8>
 8008e72:	2300      	movs	r3, #0
 8008e74:	3501      	adds	r5, #1
 8008e76:	9519      	str	r5, [sp, #100]	@ 0x64
 8008e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 8582 	bne.w	8009986 <_strtod_l+0xb7e>
 8008e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e84:	b1bb      	cbz	r3, 8008eb6 <_strtod_l+0xae>
 8008e86:	4650      	mov	r0, sl
 8008e88:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008e8c:	b01f      	add	sp, #124	@ 0x7c
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	2920      	cmp	r1, #32
 8008e94:	d1d0      	bne.n	8008e38 <_strtod_l+0x30>
 8008e96:	3201      	adds	r2, #1
 8008e98:	e7c3      	b.n	8008e22 <_strtod_l+0x1a>
 8008e9a:	292d      	cmp	r1, #45	@ 0x2d
 8008e9c:	d1cc      	bne.n	8008e38 <_strtod_l+0x30>
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	910e      	str	r1, [sp, #56]	@ 0x38
 8008ea2:	1c51      	adds	r1, r2, #1
 8008ea4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ea6:	7852      	ldrb	r2, [r2, #1]
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	d1c7      	bne.n	8008e3c <_strtod_l+0x34>
 8008eac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eae:	9419      	str	r4, [sp, #100]	@ 0x64
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f040 8566 	bne.w	8009982 <_strtod_l+0xb7a>
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	4659      	mov	r1, fp
 8008eba:	e7e7      	b.n	8008e8c <_strtod_l+0x84>
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	e7ef      	b.n	8008ea0 <_strtod_l+0x98>
 8008ec0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ec2:	b13a      	cbz	r2, 8008ed4 <_strtod_l+0xcc>
 8008ec4:	2135      	movs	r1, #53	@ 0x35
 8008ec6:	a81c      	add	r0, sp, #112	@ 0x70
 8008ec8:	f001 fff6 	bl	800aeb8 <__copybits>
 8008ecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ece:	9805      	ldr	r0, [sp, #20]
 8008ed0:	f001 fbd6 	bl	800a680 <_Bfree>
 8008ed4:	3e01      	subs	r6, #1
 8008ed6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ed8:	2e04      	cmp	r6, #4
 8008eda:	d806      	bhi.n	8008eea <_strtod_l+0xe2>
 8008edc:	e8df f006 	tbb	[pc, r6]
 8008ee0:	201d0314 	.word	0x201d0314
 8008ee4:	14          	.byte	0x14
 8008ee5:	00          	.byte	0x00
 8008ee6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008eea:	05e1      	lsls	r1, r4, #23
 8008eec:	bf48      	it	mi
 8008eee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ef2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ef6:	0d1b      	lsrs	r3, r3, #20
 8008ef8:	051b      	lsls	r3, r3, #20
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1bd      	bne.n	8008e7a <_strtod_l+0x72>
 8008efe:	f000 fefb 	bl	8009cf8 <__errno>
 8008f02:	2322      	movs	r3, #34	@ 0x22
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	e7b8      	b.n	8008e7a <_strtod_l+0x72>
 8008f08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f14:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f18:	e7e7      	b.n	8008eea <_strtod_l+0xe2>
 8008f1a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009098 <_strtod_l+0x290>
 8008f1e:	e7e4      	b.n	8008eea <_strtod_l+0xe2>
 8008f20:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f24:	f04f 3aff 	mov.w	sl, #4294967295
 8008f28:	e7df      	b.n	8008eea <_strtod_l+0xe2>
 8008f2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f2c:	1c5a      	adds	r2, r3, #1
 8008f2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	2b30      	cmp	r3, #48	@ 0x30
 8008f34:	d0f9      	beq.n	8008f2a <_strtod_l+0x122>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d09f      	beq.n	8008e7a <_strtod_l+0x72>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	2700      	movs	r7, #0
 8008f3e:	220a      	movs	r2, #10
 8008f40:	46b9      	mov	r9, r7
 8008f42:	9308      	str	r3, [sp, #32]
 8008f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f46:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008f48:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f4a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f4c:	7805      	ldrb	r5, [r0, #0]
 8008f4e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f52:	b2d9      	uxtb	r1, r3
 8008f54:	2909      	cmp	r1, #9
 8008f56:	d928      	bls.n	8008faa <_strtod_l+0x1a2>
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4950      	ldr	r1, [pc, #320]	@ (800909c <_strtod_l+0x294>)
 8008f5c:	f000 fe74 	bl	8009c48 <strncmp>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d032      	beq.n	8008fca <_strtod_l+0x1c2>
 8008f64:	2000      	movs	r0, #0
 8008f66:	462a      	mov	r2, r5
 8008f68:	4603      	mov	r3, r0
 8008f6a:	464d      	mov	r5, r9
 8008f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f6e:	2a65      	cmp	r2, #101	@ 0x65
 8008f70:	d001      	beq.n	8008f76 <_strtod_l+0x16e>
 8008f72:	2a45      	cmp	r2, #69	@ 0x45
 8008f74:	d114      	bne.n	8008fa0 <_strtod_l+0x198>
 8008f76:	b91d      	cbnz	r5, 8008f80 <_strtod_l+0x178>
 8008f78:	9a08      	ldr	r2, [sp, #32]
 8008f7a:	4302      	orrs	r2, r0
 8008f7c:	d096      	beq.n	8008eac <_strtod_l+0xa4>
 8008f7e:	2500      	movs	r5, #0
 8008f80:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008f82:	1c62      	adds	r2, r4, #1
 8008f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f86:	7862      	ldrb	r2, [r4, #1]
 8008f88:	2a2b      	cmp	r2, #43	@ 0x2b
 8008f8a:	d07a      	beq.n	8009082 <_strtod_l+0x27a>
 8008f8c:	2a2d      	cmp	r2, #45	@ 0x2d
 8008f8e:	d07e      	beq.n	800908e <_strtod_l+0x286>
 8008f90:	f04f 0c00 	mov.w	ip, #0
 8008f94:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008f98:	2909      	cmp	r1, #9
 8008f9a:	f240 8085 	bls.w	80090a8 <_strtod_l+0x2a0>
 8008f9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fa0:	f04f 0800 	mov.w	r8, #0
 8008fa4:	e0a5      	b.n	80090f2 <_strtod_l+0x2ea>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e7c8      	b.n	8008f3c <_strtod_l+0x134>
 8008faa:	f1b9 0f08 	cmp.w	r9, #8
 8008fae:	bfd8      	it	le
 8008fb0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008fb2:	f100 0001 	add.w	r0, r0, #1
 8008fb6:	bfd6      	itet	le
 8008fb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008fbc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008fc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008fc2:	f109 0901 	add.w	r9, r9, #1
 8008fc6:	9019      	str	r0, [sp, #100]	@ 0x64
 8008fc8:	e7bf      	b.n	8008f4a <_strtod_l+0x142>
 8008fca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd0:	785a      	ldrb	r2, [r3, #1]
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	d03b      	beq.n	8009050 <_strtod_l+0x248>
 8008fd8:	464d      	mov	r5, r9
 8008fda:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fdc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d912      	bls.n	800900a <_strtod_l+0x202>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e7c2      	b.n	8008f6e <_strtod_l+0x166>
 8008fe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fea:	3001      	adds	r0, #1
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ff0:	785a      	ldrb	r2, [r3, #1]
 8008ff2:	2a30      	cmp	r2, #48	@ 0x30
 8008ff4:	d0f8      	beq.n	8008fe8 <_strtod_l+0x1e0>
 8008ff6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	f200 84c8 	bhi.w	8009990 <_strtod_l+0xb88>
 8009000:	900a      	str	r0, [sp, #40]	@ 0x28
 8009002:	2000      	movs	r0, #0
 8009004:	4605      	mov	r5, r0
 8009006:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009008:	930c      	str	r3, [sp, #48]	@ 0x30
 800900a:	3a30      	subs	r2, #48	@ 0x30
 800900c:	f100 0301 	add.w	r3, r0, #1
 8009010:	d018      	beq.n	8009044 <_strtod_l+0x23c>
 8009012:	462e      	mov	r6, r5
 8009014:	f04f 0e0a 	mov.w	lr, #10
 8009018:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800901a:	4419      	add	r1, r3
 800901c:	910a      	str	r1, [sp, #40]	@ 0x28
 800901e:	1c71      	adds	r1, r6, #1
 8009020:	eba1 0c05 	sub.w	ip, r1, r5
 8009024:	4563      	cmp	r3, ip
 8009026:	dc15      	bgt.n	8009054 <_strtod_l+0x24c>
 8009028:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800902c:	182b      	adds	r3, r5, r0
 800902e:	2b08      	cmp	r3, #8
 8009030:	f105 0501 	add.w	r5, r5, #1
 8009034:	4405      	add	r5, r0
 8009036:	dc1a      	bgt.n	800906e <_strtod_l+0x266>
 8009038:	230a      	movs	r3, #10
 800903a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800903c:	fb03 2301 	mla	r3, r3, r1, r2
 8009040:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009042:	2300      	movs	r3, #0
 8009044:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009046:	4618      	mov	r0, r3
 8009048:	1c51      	adds	r1, r2, #1
 800904a:	9119      	str	r1, [sp, #100]	@ 0x64
 800904c:	7852      	ldrb	r2, [r2, #1]
 800904e:	e7c5      	b.n	8008fdc <_strtod_l+0x1d4>
 8009050:	4648      	mov	r0, r9
 8009052:	e7ce      	b.n	8008ff2 <_strtod_l+0x1ea>
 8009054:	2e08      	cmp	r6, #8
 8009056:	dc05      	bgt.n	8009064 <_strtod_l+0x25c>
 8009058:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800905a:	fb0e f606 	mul.w	r6, lr, r6
 800905e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009060:	460e      	mov	r6, r1
 8009062:	e7dc      	b.n	800901e <_strtod_l+0x216>
 8009064:	2910      	cmp	r1, #16
 8009066:	bfd8      	it	le
 8009068:	fb0e f707 	mulle.w	r7, lr, r7
 800906c:	e7f8      	b.n	8009060 <_strtod_l+0x258>
 800906e:	2b0f      	cmp	r3, #15
 8009070:	bfdc      	itt	le
 8009072:	230a      	movle	r3, #10
 8009074:	fb03 2707 	mlale	r7, r3, r7, r2
 8009078:	e7e3      	b.n	8009042 <_strtod_l+0x23a>
 800907a:	2300      	movs	r3, #0
 800907c:	930a      	str	r3, [sp, #40]	@ 0x28
 800907e:	2301      	movs	r3, #1
 8009080:	e77a      	b.n	8008f78 <_strtod_l+0x170>
 8009082:	f04f 0c00 	mov.w	ip, #0
 8009086:	1ca2      	adds	r2, r4, #2
 8009088:	9219      	str	r2, [sp, #100]	@ 0x64
 800908a:	78a2      	ldrb	r2, [r4, #2]
 800908c:	e782      	b.n	8008f94 <_strtod_l+0x18c>
 800908e:	f04f 0c01 	mov.w	ip, #1
 8009092:	e7f8      	b.n	8009086 <_strtod_l+0x27e>
 8009094:	0800c1cc 	.word	0x0800c1cc
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	0800c052 	.word	0x0800c052
 80090a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090a2:	1c51      	adds	r1, r2, #1
 80090a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80090a6:	7852      	ldrb	r2, [r2, #1]
 80090a8:	2a30      	cmp	r2, #48	@ 0x30
 80090aa:	d0f9      	beq.n	80090a0 <_strtod_l+0x298>
 80090ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090b0:	2908      	cmp	r1, #8
 80090b2:	f63f af75 	bhi.w	8008fa0 <_strtod_l+0x198>
 80090b6:	f04f 080a 	mov.w	r8, #10
 80090ba:	3a30      	subs	r2, #48	@ 0x30
 80090bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80090be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80090c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090c4:	1c56      	adds	r6, r2, #1
 80090c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80090c8:	7852      	ldrb	r2, [r2, #1]
 80090ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80090ce:	f1be 0f09 	cmp.w	lr, #9
 80090d2:	d939      	bls.n	8009148 <_strtod_l+0x340>
 80090d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80090d6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80090da:	1a76      	subs	r6, r6, r1
 80090dc:	2e08      	cmp	r6, #8
 80090de:	dc03      	bgt.n	80090e8 <_strtod_l+0x2e0>
 80090e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090e2:	4588      	cmp	r8, r1
 80090e4:	bfa8      	it	ge
 80090e6:	4688      	movge	r8, r1
 80090e8:	f1bc 0f00 	cmp.w	ip, #0
 80090ec:	d001      	beq.n	80090f2 <_strtod_l+0x2ea>
 80090ee:	f1c8 0800 	rsb	r8, r8, #0
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	d14e      	bne.n	8009194 <_strtod_l+0x38c>
 80090f6:	9908      	ldr	r1, [sp, #32]
 80090f8:	4308      	orrs	r0, r1
 80090fa:	f47f aebe 	bne.w	8008e7a <_strtod_l+0x72>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f47f aed4 	bne.w	8008eac <_strtod_l+0xa4>
 8009104:	2a69      	cmp	r2, #105	@ 0x69
 8009106:	d028      	beq.n	800915a <_strtod_l+0x352>
 8009108:	dc25      	bgt.n	8009156 <_strtod_l+0x34e>
 800910a:	2a49      	cmp	r2, #73	@ 0x49
 800910c:	d025      	beq.n	800915a <_strtod_l+0x352>
 800910e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009110:	f47f aecc 	bne.w	8008eac <_strtod_l+0xa4>
 8009114:	4999      	ldr	r1, [pc, #612]	@ (800937c <_strtod_l+0x574>)
 8009116:	a819      	add	r0, sp, #100	@ 0x64
 8009118:	f001 f902 	bl	800a320 <__match>
 800911c:	2800      	cmp	r0, #0
 800911e:	f43f aec5 	beq.w	8008eac <_strtod_l+0xa4>
 8009122:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b28      	cmp	r3, #40	@ 0x28
 8009128:	d12e      	bne.n	8009188 <_strtod_l+0x380>
 800912a:	4995      	ldr	r1, [pc, #596]	@ (8009380 <_strtod_l+0x578>)
 800912c:	aa1c      	add	r2, sp, #112	@ 0x70
 800912e:	a819      	add	r0, sp, #100	@ 0x64
 8009130:	f001 f90a 	bl	800a348 <__hexnan>
 8009134:	2805      	cmp	r0, #5
 8009136:	d127      	bne.n	8009188 <_strtod_l+0x380>
 8009138:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800913a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800913e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009142:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009146:	e698      	b.n	8008e7a <_strtod_l+0x72>
 8009148:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800914a:	fb08 2101 	mla	r1, r8, r1, r2
 800914e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009152:	9209      	str	r2, [sp, #36]	@ 0x24
 8009154:	e7b5      	b.n	80090c2 <_strtod_l+0x2ba>
 8009156:	2a6e      	cmp	r2, #110	@ 0x6e
 8009158:	e7da      	b.n	8009110 <_strtod_l+0x308>
 800915a:	498a      	ldr	r1, [pc, #552]	@ (8009384 <_strtod_l+0x57c>)
 800915c:	a819      	add	r0, sp, #100	@ 0x64
 800915e:	f001 f8df 	bl	800a320 <__match>
 8009162:	2800      	cmp	r0, #0
 8009164:	f43f aea2 	beq.w	8008eac <_strtod_l+0xa4>
 8009168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800916a:	4987      	ldr	r1, [pc, #540]	@ (8009388 <_strtod_l+0x580>)
 800916c:	3b01      	subs	r3, #1
 800916e:	a819      	add	r0, sp, #100	@ 0x64
 8009170:	9319      	str	r3, [sp, #100]	@ 0x64
 8009172:	f001 f8d5 	bl	800a320 <__match>
 8009176:	b910      	cbnz	r0, 800917e <_strtod_l+0x376>
 8009178:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917a:	3301      	adds	r3, #1
 800917c:	9319      	str	r3, [sp, #100]	@ 0x64
 800917e:	f04f 0a00 	mov.w	sl, #0
 8009182:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800938c <_strtod_l+0x584>
 8009186:	e678      	b.n	8008e7a <_strtod_l+0x72>
 8009188:	4881      	ldr	r0, [pc, #516]	@ (8009390 <_strtod_l+0x588>)
 800918a:	f000 fdf1 	bl	8009d70 <nan>
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	e672      	b.n	8008e7a <_strtod_l+0x72>
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	f1b9 0f00 	cmp.w	r9, #0
 800919a:	bf08      	it	eq
 800919c:	46a9      	moveq	r9, r5
 800919e:	eba8 0303 	sub.w	r3, r8, r3
 80091a2:	2d10      	cmp	r5, #16
 80091a4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80091a6:	462c      	mov	r4, r5
 80091a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091aa:	bfa8      	it	ge
 80091ac:	2410      	movge	r4, #16
 80091ae:	f7f7 f919 	bl	80003e4 <__aeabi_ui2d>
 80091b2:	2d09      	cmp	r5, #9
 80091b4:	4682      	mov	sl, r0
 80091b6:	468b      	mov	fp, r1
 80091b8:	dc11      	bgt.n	80091de <_strtod_l+0x3d6>
 80091ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f43f ae5c 	beq.w	8008e7a <_strtod_l+0x72>
 80091c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c4:	dd76      	ble.n	80092b4 <_strtod_l+0x4ac>
 80091c6:	2b16      	cmp	r3, #22
 80091c8:	dc5d      	bgt.n	8009286 <_strtod_l+0x47e>
 80091ca:	4972      	ldr	r1, [pc, #456]	@ (8009394 <_strtod_l+0x58c>)
 80091cc:	4652      	mov	r2, sl
 80091ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091d2:	465b      	mov	r3, fp
 80091d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d8:	f7f7 f97e 	bl	80004d8 <__aeabi_dmul>
 80091dc:	e7d7      	b.n	800918e <_strtod_l+0x386>
 80091de:	4b6d      	ldr	r3, [pc, #436]	@ (8009394 <_strtod_l+0x58c>)
 80091e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80091e8:	f7f7 f976 	bl	80004d8 <__aeabi_dmul>
 80091ec:	4682      	mov	sl, r0
 80091ee:	4638      	mov	r0, r7
 80091f0:	468b      	mov	fp, r1
 80091f2:	f7f7 f8f7 	bl	80003e4 <__aeabi_ui2d>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4650      	mov	r0, sl
 80091fc:	4659      	mov	r1, fp
 80091fe:	f7f6 ffb5 	bl	800016c <__adddf3>
 8009202:	2d0f      	cmp	r5, #15
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	ddd7      	ble.n	80091ba <_strtod_l+0x3b2>
 800920a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800920c:	1b2c      	subs	r4, r5, r4
 800920e:	441c      	add	r4, r3
 8009210:	2c00      	cmp	r4, #0
 8009212:	f340 8093 	ble.w	800933c <_strtod_l+0x534>
 8009216:	f014 030f 	ands.w	r3, r4, #15
 800921a:	d00a      	beq.n	8009232 <_strtod_l+0x42a>
 800921c:	495d      	ldr	r1, [pc, #372]	@ (8009394 <_strtod_l+0x58c>)
 800921e:	4652      	mov	r2, sl
 8009220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009228:	465b      	mov	r3, fp
 800922a:	f7f7 f955 	bl	80004d8 <__aeabi_dmul>
 800922e:	4682      	mov	sl, r0
 8009230:	468b      	mov	fp, r1
 8009232:	f034 040f 	bics.w	r4, r4, #15
 8009236:	d073      	beq.n	8009320 <_strtod_l+0x518>
 8009238:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800923c:	dd49      	ble.n	80092d2 <_strtod_l+0x4ca>
 800923e:	2400      	movs	r4, #0
 8009240:	46a0      	mov	r8, r4
 8009242:	46a1      	mov	r9, r4
 8009244:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009246:	2322      	movs	r3, #34	@ 0x22
 8009248:	f04f 0a00 	mov.w	sl, #0
 800924c:	9a05      	ldr	r2, [sp, #20]
 800924e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800938c <_strtod_l+0x584>
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009256:	2b00      	cmp	r3, #0
 8009258:	f43f ae0f 	beq.w	8008e7a <_strtod_l+0x72>
 800925c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800925e:	9805      	ldr	r0, [sp, #20]
 8009260:	f001 fa0e 	bl	800a680 <_Bfree>
 8009264:	4649      	mov	r1, r9
 8009266:	9805      	ldr	r0, [sp, #20]
 8009268:	f001 fa0a 	bl	800a680 <_Bfree>
 800926c:	4641      	mov	r1, r8
 800926e:	9805      	ldr	r0, [sp, #20]
 8009270:	f001 fa06 	bl	800a680 <_Bfree>
 8009274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009276:	9805      	ldr	r0, [sp, #20]
 8009278:	f001 fa02 	bl	800a680 <_Bfree>
 800927c:	4621      	mov	r1, r4
 800927e:	9805      	ldr	r0, [sp, #20]
 8009280:	f001 f9fe 	bl	800a680 <_Bfree>
 8009284:	e5f9      	b.n	8008e7a <_strtod_l+0x72>
 8009286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009288:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800928c:	4293      	cmp	r3, r2
 800928e:	dbbc      	blt.n	800920a <_strtod_l+0x402>
 8009290:	4c40      	ldr	r4, [pc, #256]	@ (8009394 <_strtod_l+0x58c>)
 8009292:	f1c5 050f 	rsb	r5, r5, #15
 8009296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800929a:	4652      	mov	r2, sl
 800929c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a0:	465b      	mov	r3, fp
 80092a2:	f7f7 f919 	bl	80004d8 <__aeabi_dmul>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	1b5d      	subs	r5, r3, r5
 80092aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092b2:	e791      	b.n	80091d8 <_strtod_l+0x3d0>
 80092b4:	3316      	adds	r3, #22
 80092b6:	dba8      	blt.n	800920a <_strtod_l+0x402>
 80092b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ba:	4650      	mov	r0, sl
 80092bc:	eba3 0808 	sub.w	r8, r3, r8
 80092c0:	4b34      	ldr	r3, [pc, #208]	@ (8009394 <_strtod_l+0x58c>)
 80092c2:	4659      	mov	r1, fp
 80092c4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80092c8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80092cc:	f7f7 fa2e 	bl	800072c <__aeabi_ddiv>
 80092d0:	e75d      	b.n	800918e <_strtod_l+0x386>
 80092d2:	2300      	movs	r3, #0
 80092d4:	4650      	mov	r0, sl
 80092d6:	4659      	mov	r1, fp
 80092d8:	461e      	mov	r6, r3
 80092da:	4f2f      	ldr	r7, [pc, #188]	@ (8009398 <_strtod_l+0x590>)
 80092dc:	1124      	asrs	r4, r4, #4
 80092de:	2c01      	cmp	r4, #1
 80092e0:	dc21      	bgt.n	8009326 <_strtod_l+0x51e>
 80092e2:	b10b      	cbz	r3, 80092e8 <_strtod_l+0x4e0>
 80092e4:	4682      	mov	sl, r0
 80092e6:	468b      	mov	fp, r1
 80092e8:	492b      	ldr	r1, [pc, #172]	@ (8009398 <_strtod_l+0x590>)
 80092ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80092ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80092f2:	4652      	mov	r2, sl
 80092f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f8:	465b      	mov	r3, fp
 80092fa:	f7f7 f8ed 	bl	80004d8 <__aeabi_dmul>
 80092fe:	4b23      	ldr	r3, [pc, #140]	@ (800938c <_strtod_l+0x584>)
 8009300:	460a      	mov	r2, r1
 8009302:	400b      	ands	r3, r1
 8009304:	4925      	ldr	r1, [pc, #148]	@ (800939c <_strtod_l+0x594>)
 8009306:	4682      	mov	sl, r0
 8009308:	428b      	cmp	r3, r1
 800930a:	d898      	bhi.n	800923e <_strtod_l+0x436>
 800930c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009310:	428b      	cmp	r3, r1
 8009312:	bf86      	itte	hi
 8009314:	f04f 3aff 	movhi.w	sl, #4294967295
 8009318:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80093a0 <_strtod_l+0x598>
 800931c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009320:	2300      	movs	r3, #0
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	e076      	b.n	8009414 <_strtod_l+0x60c>
 8009326:	07e2      	lsls	r2, r4, #31
 8009328:	d504      	bpl.n	8009334 <_strtod_l+0x52c>
 800932a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800932e:	f7f7 f8d3 	bl	80004d8 <__aeabi_dmul>
 8009332:	2301      	movs	r3, #1
 8009334:	3601      	adds	r6, #1
 8009336:	1064      	asrs	r4, r4, #1
 8009338:	3708      	adds	r7, #8
 800933a:	e7d0      	b.n	80092de <_strtod_l+0x4d6>
 800933c:	d0f0      	beq.n	8009320 <_strtod_l+0x518>
 800933e:	4264      	negs	r4, r4
 8009340:	f014 020f 	ands.w	r2, r4, #15
 8009344:	d00a      	beq.n	800935c <_strtod_l+0x554>
 8009346:	4b13      	ldr	r3, [pc, #76]	@ (8009394 <_strtod_l+0x58c>)
 8009348:	4650      	mov	r0, sl
 800934a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800934e:	4659      	mov	r1, fp
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	f7f7 f9ea 	bl	800072c <__aeabi_ddiv>
 8009358:	4682      	mov	sl, r0
 800935a:	468b      	mov	fp, r1
 800935c:	1124      	asrs	r4, r4, #4
 800935e:	d0df      	beq.n	8009320 <_strtod_l+0x518>
 8009360:	2c1f      	cmp	r4, #31
 8009362:	dd1f      	ble.n	80093a4 <_strtod_l+0x59c>
 8009364:	2400      	movs	r4, #0
 8009366:	46a0      	mov	r8, r4
 8009368:	46a1      	mov	r9, r4
 800936a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800936c:	2322      	movs	r3, #34	@ 0x22
 800936e:	9a05      	ldr	r2, [sp, #20]
 8009370:	f04f 0a00 	mov.w	sl, #0
 8009374:	f04f 0b00 	mov.w	fp, #0
 8009378:	6013      	str	r3, [r2, #0]
 800937a:	e76b      	b.n	8009254 <_strtod_l+0x44c>
 800937c:	0800c05d 	.word	0x0800c05d
 8009380:	0800c1b8 	.word	0x0800c1b8
 8009384:	0800c054 	.word	0x0800c054
 8009388:	0800c057 	.word	0x0800c057
 800938c:	7ff00000 	.word	0x7ff00000
 8009390:	0800c1b7 	.word	0x0800c1b7
 8009394:	0800c240 	.word	0x0800c240
 8009398:	0800c218 	.word	0x0800c218
 800939c:	7ca00000 	.word	0x7ca00000
 80093a0:	7fefffff 	.word	0x7fefffff
 80093a4:	f014 0310 	ands.w	r3, r4, #16
 80093a8:	bf18      	it	ne
 80093aa:	236a      	movne	r3, #106	@ 0x6a
 80093ac:	4650      	mov	r0, sl
 80093ae:	9308      	str	r3, [sp, #32]
 80093b0:	4659      	mov	r1, fp
 80093b2:	2300      	movs	r3, #0
 80093b4:	4e77      	ldr	r6, [pc, #476]	@ (8009594 <_strtod_l+0x78c>)
 80093b6:	07e7      	lsls	r7, r4, #31
 80093b8:	d504      	bpl.n	80093c4 <_strtod_l+0x5bc>
 80093ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093be:	f7f7 f88b 	bl	80004d8 <__aeabi_dmul>
 80093c2:	2301      	movs	r3, #1
 80093c4:	1064      	asrs	r4, r4, #1
 80093c6:	f106 0608 	add.w	r6, r6, #8
 80093ca:	d1f4      	bne.n	80093b6 <_strtod_l+0x5ae>
 80093cc:	b10b      	cbz	r3, 80093d2 <_strtod_l+0x5ca>
 80093ce:	4682      	mov	sl, r0
 80093d0:	468b      	mov	fp, r1
 80093d2:	9b08      	ldr	r3, [sp, #32]
 80093d4:	b1b3      	cbz	r3, 8009404 <_strtod_l+0x5fc>
 80093d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80093da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80093de:	2b00      	cmp	r3, #0
 80093e0:	4659      	mov	r1, fp
 80093e2:	dd0f      	ble.n	8009404 <_strtod_l+0x5fc>
 80093e4:	2b1f      	cmp	r3, #31
 80093e6:	dd58      	ble.n	800949a <_strtod_l+0x692>
 80093e8:	2b34      	cmp	r3, #52	@ 0x34
 80093ea:	bfd8      	it	le
 80093ec:	f04f 33ff 	movle.w	r3, #4294967295
 80093f0:	f04f 0a00 	mov.w	sl, #0
 80093f4:	bfcf      	iteee	gt
 80093f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80093fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80093fe:	4093      	lslle	r3, r2
 8009400:	ea03 0b01 	andle.w	fp, r3, r1
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	4650      	mov	r0, sl
 800940a:	4659      	mov	r1, fp
 800940c:	f7f7 facc 	bl	80009a8 <__aeabi_dcmpeq>
 8009410:	2800      	cmp	r0, #0
 8009412:	d1a7      	bne.n	8009364 <_strtod_l+0x55c>
 8009414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009416:	464a      	mov	r2, r9
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800941c:	462b      	mov	r3, r5
 800941e:	9805      	ldr	r0, [sp, #20]
 8009420:	f001 f996 	bl	800a750 <__s2b>
 8009424:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f af09 	beq.w	800923e <_strtod_l+0x436>
 800942c:	2400      	movs	r4, #0
 800942e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009432:	2a00      	cmp	r2, #0
 8009434:	eba3 0308 	sub.w	r3, r3, r8
 8009438:	bfa8      	it	ge
 800943a:	2300      	movge	r3, #0
 800943c:	46a0      	mov	r8, r4
 800943e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009440:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009444:	9316      	str	r3, [sp, #88]	@ 0x58
 8009446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	f001 f8d8 	bl	800a600 <_Balloc>
 8009450:	4681      	mov	r9, r0
 8009452:	2800      	cmp	r0, #0
 8009454:	f43f aef7 	beq.w	8009246 <_strtod_l+0x43e>
 8009458:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800945a:	300c      	adds	r0, #12
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	f103 010c 	add.w	r1, r3, #12
 8009462:	3202      	adds	r2, #2
 8009464:	0092      	lsls	r2, r2, #2
 8009466:	f000 fc74 	bl	8009d52 <memcpy>
 800946a:	ab1c      	add	r3, sp, #112	@ 0x70
 800946c:	9301      	str	r3, [sp, #4]
 800946e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	9805      	ldr	r0, [sp, #20]
 8009478:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800947c:	f001 fc94 	bl	800ada8 <__d2b>
 8009480:	901a      	str	r0, [sp, #104]	@ 0x68
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aedf 	beq.w	8009246 <_strtod_l+0x43e>
 8009488:	2101      	movs	r1, #1
 800948a:	9805      	ldr	r0, [sp, #20]
 800948c:	f001 f9f6 	bl	800a87c <__i2b>
 8009490:	4680      	mov	r8, r0
 8009492:	b948      	cbnz	r0, 80094a8 <_strtod_l+0x6a0>
 8009494:	f04f 0800 	mov.w	r8, #0
 8009498:	e6d5      	b.n	8009246 <_strtod_l+0x43e>
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	ea03 0a0a 	and.w	sl, r3, sl
 80094a6:	e7ad      	b.n	8009404 <_strtod_l+0x5fc>
 80094a8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094aa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	bfab      	itete	ge
 80094b0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094b2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80094b4:	18ef      	addge	r7, r5, r3
 80094b6:	1b5e      	sublt	r6, r3, r5
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	bfa8      	it	ge
 80094bc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80094be:	eba5 0503 	sub.w	r5, r5, r3
 80094c2:	4415      	add	r5, r2
 80094c4:	4b34      	ldr	r3, [pc, #208]	@ (8009598 <_strtod_l+0x790>)
 80094c6:	f105 35ff 	add.w	r5, r5, #4294967295
 80094ca:	bfb8      	it	lt
 80094cc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80094ce:	429d      	cmp	r5, r3
 80094d0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80094d4:	da50      	bge.n	8009578 <_strtod_l+0x770>
 80094d6:	1b5b      	subs	r3, r3, r5
 80094d8:	2b1f      	cmp	r3, #31
 80094da:	f04f 0101 	mov.w	r1, #1
 80094de:	eba2 0203 	sub.w	r2, r2, r3
 80094e2:	dc3d      	bgt.n	8009560 <_strtod_l+0x758>
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094ea:	2300      	movs	r3, #0
 80094ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80094ee:	18bd      	adds	r5, r7, r2
 80094f0:	9b08      	ldr	r3, [sp, #32]
 80094f2:	42af      	cmp	r7, r5
 80094f4:	4416      	add	r6, r2
 80094f6:	441e      	add	r6, r3
 80094f8:	463b      	mov	r3, r7
 80094fa:	bfa8      	it	ge
 80094fc:	462b      	movge	r3, r5
 80094fe:	42b3      	cmp	r3, r6
 8009500:	bfa8      	it	ge
 8009502:	4633      	movge	r3, r6
 8009504:	2b00      	cmp	r3, #0
 8009506:	bfc2      	ittt	gt
 8009508:	1aed      	subgt	r5, r5, r3
 800950a:	1af6      	subgt	r6, r6, r3
 800950c:	1aff      	subgt	r7, r7, r3
 800950e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009510:	2b00      	cmp	r3, #0
 8009512:	dd16      	ble.n	8009542 <_strtod_l+0x73a>
 8009514:	4641      	mov	r1, r8
 8009516:	461a      	mov	r2, r3
 8009518:	9805      	ldr	r0, [sp, #20]
 800951a:	f001 fa67 	bl	800a9ec <__pow5mult>
 800951e:	4680      	mov	r8, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d0b7      	beq.n	8009494 <_strtod_l+0x68c>
 8009524:	4601      	mov	r1, r0
 8009526:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009528:	9805      	ldr	r0, [sp, #20]
 800952a:	f001 f9bd 	bl	800a8a8 <__multiply>
 800952e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009530:	2800      	cmp	r0, #0
 8009532:	f43f ae88 	beq.w	8009246 <_strtod_l+0x43e>
 8009536:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009538:	9805      	ldr	r0, [sp, #20]
 800953a:	f001 f8a1 	bl	800a680 <_Bfree>
 800953e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009540:	931a      	str	r3, [sp, #104]	@ 0x68
 8009542:	2d00      	cmp	r5, #0
 8009544:	dc1d      	bgt.n	8009582 <_strtod_l+0x77a>
 8009546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	dd27      	ble.n	800959c <_strtod_l+0x794>
 800954c:	4649      	mov	r1, r9
 800954e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009550:	9805      	ldr	r0, [sp, #20]
 8009552:	f001 fa4b 	bl	800a9ec <__pow5mult>
 8009556:	4681      	mov	r9, r0
 8009558:	bb00      	cbnz	r0, 800959c <_strtod_l+0x794>
 800955a:	f04f 0900 	mov.w	r9, #0
 800955e:	e672      	b.n	8009246 <_strtod_l+0x43e>
 8009560:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009564:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009568:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800956c:	35e2      	adds	r5, #226	@ 0xe2
 800956e:	fa01 f305 	lsl.w	r3, r1, r5
 8009572:	9310      	str	r3, [sp, #64]	@ 0x40
 8009574:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009576:	e7ba      	b.n	80094ee <_strtod_l+0x6e6>
 8009578:	2300      	movs	r3, #0
 800957a:	9310      	str	r3, [sp, #64]	@ 0x40
 800957c:	2301      	movs	r3, #1
 800957e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009580:	e7b5      	b.n	80094ee <_strtod_l+0x6e6>
 8009582:	462a      	mov	r2, r5
 8009584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f001 fa8a 	bl	800aaa0 <__lshift>
 800958c:	901a      	str	r0, [sp, #104]	@ 0x68
 800958e:	2800      	cmp	r0, #0
 8009590:	d1d9      	bne.n	8009546 <_strtod_l+0x73e>
 8009592:	e658      	b.n	8009246 <_strtod_l+0x43e>
 8009594:	0800c1e0 	.word	0x0800c1e0
 8009598:	fffffc02 	.word	0xfffffc02
 800959c:	2e00      	cmp	r6, #0
 800959e:	dd07      	ble.n	80095b0 <_strtod_l+0x7a8>
 80095a0:	4649      	mov	r1, r9
 80095a2:	4632      	mov	r2, r6
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	f001 fa7b 	bl	800aaa0 <__lshift>
 80095aa:	4681      	mov	r9, r0
 80095ac:	2800      	cmp	r0, #0
 80095ae:	d0d4      	beq.n	800955a <_strtod_l+0x752>
 80095b0:	2f00      	cmp	r7, #0
 80095b2:	dd08      	ble.n	80095c6 <_strtod_l+0x7be>
 80095b4:	4641      	mov	r1, r8
 80095b6:	463a      	mov	r2, r7
 80095b8:	9805      	ldr	r0, [sp, #20]
 80095ba:	f001 fa71 	bl	800aaa0 <__lshift>
 80095be:	4680      	mov	r8, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f43f ae40 	beq.w	8009246 <_strtod_l+0x43e>
 80095c6:	464a      	mov	r2, r9
 80095c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	f001 faf0 	bl	800abb0 <__mdiff>
 80095d0:	4604      	mov	r4, r0
 80095d2:	2800      	cmp	r0, #0
 80095d4:	f43f ae37 	beq.w	8009246 <_strtod_l+0x43e>
 80095d8:	68c3      	ldr	r3, [r0, #12]
 80095da:	4641      	mov	r1, r8
 80095dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095de:	2300      	movs	r3, #0
 80095e0:	60c3      	str	r3, [r0, #12]
 80095e2:	f001 fac9 	bl	800ab78 <__mcmp>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	da3d      	bge.n	8009666 <_strtod_l+0x85e>
 80095ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ec:	ea53 030a 	orrs.w	r3, r3, sl
 80095f0:	d163      	bne.n	80096ba <_strtod_l+0x8b2>
 80095f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d15f      	bne.n	80096ba <_strtod_l+0x8b2>
 80095fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80095fe:	0d1b      	lsrs	r3, r3, #20
 8009600:	051b      	lsls	r3, r3, #20
 8009602:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009606:	d958      	bls.n	80096ba <_strtod_l+0x8b2>
 8009608:	6963      	ldr	r3, [r4, #20]
 800960a:	b913      	cbnz	r3, 8009612 <_strtod_l+0x80a>
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	2b01      	cmp	r3, #1
 8009610:	dd53      	ble.n	80096ba <_strtod_l+0x8b2>
 8009612:	4621      	mov	r1, r4
 8009614:	2201      	movs	r2, #1
 8009616:	9805      	ldr	r0, [sp, #20]
 8009618:	f001 fa42 	bl	800aaa0 <__lshift>
 800961c:	4641      	mov	r1, r8
 800961e:	4604      	mov	r4, r0
 8009620:	f001 faaa 	bl	800ab78 <__mcmp>
 8009624:	2800      	cmp	r0, #0
 8009626:	dd48      	ble.n	80096ba <_strtod_l+0x8b2>
 8009628:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800962c:	9a08      	ldr	r2, [sp, #32]
 800962e:	0d1b      	lsrs	r3, r3, #20
 8009630:	051b      	lsls	r3, r3, #20
 8009632:	2a00      	cmp	r2, #0
 8009634:	d062      	beq.n	80096fc <_strtod_l+0x8f4>
 8009636:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800963a:	d85f      	bhi.n	80096fc <_strtod_l+0x8f4>
 800963c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009640:	f67f ae94 	bls.w	800936c <_strtod_l+0x564>
 8009644:	4650      	mov	r0, sl
 8009646:	4659      	mov	r1, fp
 8009648:	4ba3      	ldr	r3, [pc, #652]	@ (80098d8 <_strtod_l+0xad0>)
 800964a:	2200      	movs	r2, #0
 800964c:	f7f6 ff44 	bl	80004d8 <__aeabi_dmul>
 8009650:	4ba2      	ldr	r3, [pc, #648]	@ (80098dc <_strtod_l+0xad4>)
 8009652:	4682      	mov	sl, r0
 8009654:	400b      	ands	r3, r1
 8009656:	468b      	mov	fp, r1
 8009658:	2b00      	cmp	r3, #0
 800965a:	f47f adff 	bne.w	800925c <_strtod_l+0x454>
 800965e:	2322      	movs	r3, #34	@ 0x22
 8009660:	9a05      	ldr	r2, [sp, #20]
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	e5fa      	b.n	800925c <_strtod_l+0x454>
 8009666:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800966a:	d165      	bne.n	8009738 <_strtod_l+0x930>
 800966c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800966e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009672:	b35a      	cbz	r2, 80096cc <_strtod_l+0x8c4>
 8009674:	4a9a      	ldr	r2, [pc, #616]	@ (80098e0 <_strtod_l+0xad8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d12b      	bne.n	80096d2 <_strtod_l+0x8ca>
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	4651      	mov	r1, sl
 800967e:	b303      	cbz	r3, 80096c2 <_strtod_l+0x8ba>
 8009680:	465a      	mov	r2, fp
 8009682:	4b96      	ldr	r3, [pc, #600]	@ (80098dc <_strtod_l+0xad4>)
 8009684:	4013      	ands	r3, r2
 8009686:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	d81b      	bhi.n	80096c8 <_strtod_l+0x8c0>
 8009690:	0d1b      	lsrs	r3, r3, #20
 8009692:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009696:	fa02 f303 	lsl.w	r3, r2, r3
 800969a:	4299      	cmp	r1, r3
 800969c:	d119      	bne.n	80096d2 <_strtod_l+0x8ca>
 800969e:	4b91      	ldr	r3, [pc, #580]	@ (80098e4 <_strtod_l+0xadc>)
 80096a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d102      	bne.n	80096ac <_strtod_l+0x8a4>
 80096a6:	3101      	adds	r1, #1
 80096a8:	f43f adcd 	beq.w	8009246 <_strtod_l+0x43e>
 80096ac:	f04f 0a00 	mov.w	sl, #0
 80096b0:	4b8a      	ldr	r3, [pc, #552]	@ (80098dc <_strtod_l+0xad4>)
 80096b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096b4:	401a      	ands	r2, r3
 80096b6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1c1      	bne.n	8009644 <_strtod_l+0x83c>
 80096c0:	e5cc      	b.n	800925c <_strtod_l+0x454>
 80096c2:	f04f 33ff 	mov.w	r3, #4294967295
 80096c6:	e7e8      	b.n	800969a <_strtod_l+0x892>
 80096c8:	4613      	mov	r3, r2
 80096ca:	e7e6      	b.n	800969a <_strtod_l+0x892>
 80096cc:	ea53 030a 	orrs.w	r3, r3, sl
 80096d0:	d0aa      	beq.n	8009628 <_strtod_l+0x820>
 80096d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096d4:	b1db      	cbz	r3, 800970e <_strtod_l+0x906>
 80096d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096d8:	4213      	tst	r3, r2
 80096da:	d0ee      	beq.n	80096ba <_strtod_l+0x8b2>
 80096dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096de:	4650      	mov	r0, sl
 80096e0:	4659      	mov	r1, fp
 80096e2:	9a08      	ldr	r2, [sp, #32]
 80096e4:	b1bb      	cbz	r3, 8009716 <_strtod_l+0x90e>
 80096e6:	f7ff fb6e 	bl	8008dc6 <sulp>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096f2:	f7f6 fd3b 	bl	800016c <__adddf3>
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	e7de      	b.n	80096ba <_strtod_l+0x8b2>
 80096fc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009700:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009704:	f04f 3aff 	mov.w	sl, #4294967295
 8009708:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800970c:	e7d5      	b.n	80096ba <_strtod_l+0x8b2>
 800970e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009710:	ea13 0f0a 	tst.w	r3, sl
 8009714:	e7e1      	b.n	80096da <_strtod_l+0x8d2>
 8009716:	f7ff fb56 	bl	8008dc6 <sulp>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009722:	f7f6 fd21 	bl	8000168 <__aeabi_dsub>
 8009726:	2200      	movs	r2, #0
 8009728:	2300      	movs	r3, #0
 800972a:	4682      	mov	sl, r0
 800972c:	468b      	mov	fp, r1
 800972e:	f7f7 f93b 	bl	80009a8 <__aeabi_dcmpeq>
 8009732:	2800      	cmp	r0, #0
 8009734:	d0c1      	beq.n	80096ba <_strtod_l+0x8b2>
 8009736:	e619      	b.n	800936c <_strtod_l+0x564>
 8009738:	4641      	mov	r1, r8
 800973a:	4620      	mov	r0, r4
 800973c:	f001 fb8c 	bl	800ae58 <__ratio>
 8009740:	2200      	movs	r2, #0
 8009742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009746:	4606      	mov	r6, r0
 8009748:	460f      	mov	r7, r1
 800974a:	f7f7 f941 	bl	80009d0 <__aeabi_dcmple>
 800974e:	2800      	cmp	r0, #0
 8009750:	d06d      	beq.n	800982e <_strtod_l+0xa26>
 8009752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d178      	bne.n	800984a <_strtod_l+0xa42>
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	d156      	bne.n	800980c <_strtod_l+0xa04>
 800975e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009764:	2b00      	cmp	r3, #0
 8009766:	d158      	bne.n	800981a <_strtod_l+0xa12>
 8009768:	2200      	movs	r2, #0
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	4b5e      	ldr	r3, [pc, #376]	@ (80098e8 <_strtod_l+0xae0>)
 8009770:	f7f7 f924 	bl	80009bc <__aeabi_dcmplt>
 8009774:	2800      	cmp	r0, #0
 8009776:	d157      	bne.n	8009828 <_strtod_l+0xa20>
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	2200      	movs	r2, #0
 800977e:	4b5b      	ldr	r3, [pc, #364]	@ (80098ec <_strtod_l+0xae4>)
 8009780:	f7f6 feaa 	bl	80004d8 <__aeabi_dmul>
 8009784:	4606      	mov	r6, r0
 8009786:	460f      	mov	r7, r1
 8009788:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800978c:	9606      	str	r6, [sp, #24]
 800978e:	9307      	str	r3, [sp, #28]
 8009790:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009794:	4d51      	ldr	r5, [pc, #324]	@ (80098dc <_strtod_l+0xad4>)
 8009796:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800979a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800979c:	401d      	ands	r5, r3
 800979e:	4b54      	ldr	r3, [pc, #336]	@ (80098f0 <_strtod_l+0xae8>)
 80097a0:	429d      	cmp	r5, r3
 80097a2:	f040 80ab 	bne.w	80098fc <_strtod_l+0xaf4>
 80097a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097a8:	4650      	mov	r0, sl
 80097aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097ae:	4659      	mov	r1, fp
 80097b0:	f001 fa92 	bl	800acd8 <__ulp>
 80097b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	4652      	mov	r2, sl
 80097be:	465b      	mov	r3, fp
 80097c0:	f7f6 fcd4 	bl	800016c <__adddf3>
 80097c4:	460b      	mov	r3, r1
 80097c6:	4945      	ldr	r1, [pc, #276]	@ (80098dc <_strtod_l+0xad4>)
 80097c8:	4a4a      	ldr	r2, [pc, #296]	@ (80098f4 <_strtod_l+0xaec>)
 80097ca:	4019      	ands	r1, r3
 80097cc:	4291      	cmp	r1, r2
 80097ce:	4682      	mov	sl, r0
 80097d0:	d942      	bls.n	8009858 <_strtod_l+0xa50>
 80097d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097d4:	4b43      	ldr	r3, [pc, #268]	@ (80098e4 <_strtod_l+0xadc>)
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d103      	bne.n	80097e2 <_strtod_l+0x9da>
 80097da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097dc:	3301      	adds	r3, #1
 80097de:	f43f ad32 	beq.w	8009246 <_strtod_l+0x43e>
 80097e2:	f04f 3aff 	mov.w	sl, #4294967295
 80097e6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80098e4 <_strtod_l+0xadc>
 80097ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097ec:	9805      	ldr	r0, [sp, #20]
 80097ee:	f000 ff47 	bl	800a680 <_Bfree>
 80097f2:	4649      	mov	r1, r9
 80097f4:	9805      	ldr	r0, [sp, #20]
 80097f6:	f000 ff43 	bl	800a680 <_Bfree>
 80097fa:	4641      	mov	r1, r8
 80097fc:	9805      	ldr	r0, [sp, #20]
 80097fe:	f000 ff3f 	bl	800a680 <_Bfree>
 8009802:	4621      	mov	r1, r4
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	f000 ff3b 	bl	800a680 <_Bfree>
 800980a:	e61c      	b.n	8009446 <_strtod_l+0x63e>
 800980c:	f1ba 0f01 	cmp.w	sl, #1
 8009810:	d103      	bne.n	800981a <_strtod_l+0xa12>
 8009812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009814:	2b00      	cmp	r3, #0
 8009816:	f43f ada9 	beq.w	800936c <_strtod_l+0x564>
 800981a:	2200      	movs	r2, #0
 800981c:	4b36      	ldr	r3, [pc, #216]	@ (80098f8 <_strtod_l+0xaf0>)
 800981e:	2600      	movs	r6, #0
 8009820:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009824:	4f30      	ldr	r7, [pc, #192]	@ (80098e8 <_strtod_l+0xae0>)
 8009826:	e7b3      	b.n	8009790 <_strtod_l+0x988>
 8009828:	2600      	movs	r6, #0
 800982a:	4f30      	ldr	r7, [pc, #192]	@ (80098ec <_strtod_l+0xae4>)
 800982c:	e7ac      	b.n	8009788 <_strtod_l+0x980>
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	4b2e      	ldr	r3, [pc, #184]	@ (80098ec <_strtod_l+0xae4>)
 8009834:	2200      	movs	r2, #0
 8009836:	f7f6 fe4f 	bl	80004d8 <__aeabi_dmul>
 800983a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800983c:	4606      	mov	r6, r0
 800983e:	460f      	mov	r7, r1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d0a1      	beq.n	8009788 <_strtod_l+0x980>
 8009844:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009848:	e7a2      	b.n	8009790 <_strtod_l+0x988>
 800984a:	2200      	movs	r2, #0
 800984c:	4b26      	ldr	r3, [pc, #152]	@ (80098e8 <_strtod_l+0xae0>)
 800984e:	4616      	mov	r6, r2
 8009850:	461f      	mov	r7, r3
 8009852:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009856:	e79b      	b.n	8009790 <_strtod_l+0x988>
 8009858:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800985c:	9b08      	ldr	r3, [sp, #32]
 800985e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1c1      	bne.n	80097ea <_strtod_l+0x9e2>
 8009866:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800986a:	0d1b      	lsrs	r3, r3, #20
 800986c:	051b      	lsls	r3, r3, #20
 800986e:	429d      	cmp	r5, r3
 8009870:	d1bb      	bne.n	80097ea <_strtod_l+0x9e2>
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f7 f977 	bl	8000b68 <__aeabi_d2lz>
 800987a:	f7f6 fdff 	bl	800047c <__aeabi_l2d>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	f7f6 fc6f 	bl	8000168 <__aeabi_dsub>
 800988a:	460b      	mov	r3, r1
 800988c:	4602      	mov	r2, r0
 800988e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009892:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009898:	ea46 060a 	orr.w	r6, r6, sl
 800989c:	431e      	orrs	r6, r3
 800989e:	d06a      	beq.n	8009976 <_strtod_l+0xb6e>
 80098a0:	a309      	add	r3, pc, #36	@ (adr r3, 80098c8 <_strtod_l+0xac0>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f7 f889 	bl	80009bc <__aeabi_dcmplt>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f47f acd6 	bne.w	800925c <_strtod_l+0x454>
 80098b0:	a307      	add	r3, pc, #28	@ (adr r3, 80098d0 <_strtod_l+0xac8>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ba:	f7f7 f89d 	bl	80009f8 <__aeabi_dcmpgt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d093      	beq.n	80097ea <_strtod_l+0x9e2>
 80098c2:	e4cb      	b.n	800925c <_strtod_l+0x454>
 80098c4:	f3af 8000 	nop.w
 80098c8:	94a03595 	.word	0x94a03595
 80098cc:	3fdfffff 	.word	0x3fdfffff
 80098d0:	35afe535 	.word	0x35afe535
 80098d4:	3fe00000 	.word	0x3fe00000
 80098d8:	39500000 	.word	0x39500000
 80098dc:	7ff00000 	.word	0x7ff00000
 80098e0:	000fffff 	.word	0x000fffff
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	3ff00000 	.word	0x3ff00000
 80098ec:	3fe00000 	.word	0x3fe00000
 80098f0:	7fe00000 	.word	0x7fe00000
 80098f4:	7c9fffff 	.word	0x7c9fffff
 80098f8:	bff00000 	.word	0xbff00000
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	b323      	cbz	r3, 800994a <_strtod_l+0xb42>
 8009900:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009904:	d821      	bhi.n	800994a <_strtod_l+0xb42>
 8009906:	a328      	add	r3, pc, #160	@ (adr r3, 80099a8 <_strtod_l+0xba0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	4630      	mov	r0, r6
 800990e:	4639      	mov	r1, r7
 8009910:	f7f7 f85e 	bl	80009d0 <__aeabi_dcmple>
 8009914:	b1a0      	cbz	r0, 8009940 <_strtod_l+0xb38>
 8009916:	4639      	mov	r1, r7
 8009918:	4630      	mov	r0, r6
 800991a:	f7f7 f89f 	bl	8000a5c <__aeabi_d2uiz>
 800991e:	2801      	cmp	r0, #1
 8009920:	bf38      	it	cc
 8009922:	2001      	movcc	r0, #1
 8009924:	f7f6 fd5e 	bl	80003e4 <__aeabi_ui2d>
 8009928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	b9fb      	cbnz	r3, 8009970 <_strtod_l+0xb68>
 8009930:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009934:	9014      	str	r0, [sp, #80]	@ 0x50
 8009936:	9315      	str	r3, [sp, #84]	@ 0x54
 8009938:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800993c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009940:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009942:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009946:	1b5b      	subs	r3, r3, r5
 8009948:	9311      	str	r3, [sp, #68]	@ 0x44
 800994a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800994e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009952:	f001 f9c1 	bl	800acd8 <__ulp>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4650      	mov	r0, sl
 800995c:	4659      	mov	r1, fp
 800995e:	f7f6 fdbb 	bl	80004d8 <__aeabi_dmul>
 8009962:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009966:	f7f6 fc01 	bl	800016c <__adddf3>
 800996a:	4682      	mov	sl, r0
 800996c:	468b      	mov	fp, r1
 800996e:	e775      	b.n	800985c <_strtod_l+0xa54>
 8009970:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009974:	e7e0      	b.n	8009938 <_strtod_l+0xb30>
 8009976:	a30e      	add	r3, pc, #56	@ (adr r3, 80099b0 <_strtod_l+0xba8>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7f7 f81e 	bl	80009bc <__aeabi_dcmplt>
 8009980:	e79d      	b.n	80098be <_strtod_l+0xab6>
 8009982:	2300      	movs	r3, #0
 8009984:	930e      	str	r3, [sp, #56]	@ 0x38
 8009986:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009988:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	f7ff ba79 	b.w	8008e82 <_strtod_l+0x7a>
 8009990:	2a65      	cmp	r2, #101	@ 0x65
 8009992:	f43f ab72 	beq.w	800907a <_strtod_l+0x272>
 8009996:	2a45      	cmp	r2, #69	@ 0x45
 8009998:	f43f ab6f 	beq.w	800907a <_strtod_l+0x272>
 800999c:	2301      	movs	r3, #1
 800999e:	f7ff bbaa 	b.w	80090f6 <_strtod_l+0x2ee>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	ffc00000 	.word	0xffc00000
 80099ac:	41dfffff 	.word	0x41dfffff
 80099b0:	94a03595 	.word	0x94a03595
 80099b4:	3fcfffff 	.word	0x3fcfffff

080099b8 <strtod>:
 80099b8:	460a      	mov	r2, r1
 80099ba:	4601      	mov	r1, r0
 80099bc:	4802      	ldr	r0, [pc, #8]	@ (80099c8 <strtod+0x10>)
 80099be:	4b03      	ldr	r3, [pc, #12]	@ (80099cc <strtod+0x14>)
 80099c0:	6800      	ldr	r0, [r0, #0]
 80099c2:	f7ff ba21 	b.w	8008e08 <_strtod_l>
 80099c6:	bf00      	nop
 80099c8:	200002f8 	.word	0x200002f8
 80099cc:	2000018c 	.word	0x2000018c

080099d0 <std>:
 80099d0:	2300      	movs	r3, #0
 80099d2:	b510      	push	{r4, lr}
 80099d4:	4604      	mov	r4, r0
 80099d6:	e9c0 3300 	strd	r3, r3, [r0]
 80099da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099de:	6083      	str	r3, [r0, #8]
 80099e0:	8181      	strh	r1, [r0, #12]
 80099e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80099e4:	81c2      	strh	r2, [r0, #14]
 80099e6:	6183      	str	r3, [r0, #24]
 80099e8:	4619      	mov	r1, r3
 80099ea:	2208      	movs	r2, #8
 80099ec:	305c      	adds	r0, #92	@ 0x5c
 80099ee:	f000 f916 	bl	8009c1e <memset>
 80099f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a28 <std+0x58>)
 80099f4:	6224      	str	r4, [r4, #32]
 80099f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80099f8:	4b0c      	ldr	r3, [pc, #48]	@ (8009a2c <std+0x5c>)
 80099fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a30 <std+0x60>)
 80099fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a00:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <std+0x64>)
 8009a02:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a04:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <std+0x68>)
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d006      	beq.n	8009a18 <std+0x48>
 8009a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a0e:	4294      	cmp	r4, r2
 8009a10:	d002      	beq.n	8009a18 <std+0x48>
 8009a12:	33d0      	adds	r3, #208	@ 0xd0
 8009a14:	429c      	cmp	r4, r3
 8009a16:	d105      	bne.n	8009a24 <std+0x54>
 8009a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	f000 b994 	b.w	8009d4c <__retarget_lock_init_recursive>
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	08009b99 	.word	0x08009b99
 8009a2c:	08009bbb 	.word	0x08009bbb
 8009a30:	08009bf3 	.word	0x08009bf3
 8009a34:	08009c17 	.word	0x08009c17
 8009a38:	200015a8 	.word	0x200015a8

08009a3c <stdio_exit_handler>:
 8009a3c:	4a02      	ldr	r2, [pc, #8]	@ (8009a48 <stdio_exit_handler+0xc>)
 8009a3e:	4903      	ldr	r1, [pc, #12]	@ (8009a4c <stdio_exit_handler+0x10>)
 8009a40:	4803      	ldr	r0, [pc, #12]	@ (8009a50 <stdio_exit_handler+0x14>)
 8009a42:	f000 b869 	b.w	8009b18 <_fwalk_sglue>
 8009a46:	bf00      	nop
 8009a48:	20000180 	.word	0x20000180
 8009a4c:	0800b629 	.word	0x0800b629
 8009a50:	200002fc 	.word	0x200002fc

08009a54 <cleanup_stdio>:
 8009a54:	6841      	ldr	r1, [r0, #4]
 8009a56:	4b0c      	ldr	r3, [pc, #48]	@ (8009a88 <cleanup_stdio+0x34>)
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	d001      	beq.n	8009a64 <cleanup_stdio+0x10>
 8009a60:	f001 fde2 	bl	800b628 <_fflush_r>
 8009a64:	68a1      	ldr	r1, [r4, #8]
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <cleanup_stdio+0x38>)
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	d002      	beq.n	8009a72 <cleanup_stdio+0x1e>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f001 fddb 	bl	800b628 <_fflush_r>
 8009a72:	68e1      	ldr	r1, [r4, #12]
 8009a74:	4b06      	ldr	r3, [pc, #24]	@ (8009a90 <cleanup_stdio+0x3c>)
 8009a76:	4299      	cmp	r1, r3
 8009a78:	d004      	beq.n	8009a84 <cleanup_stdio+0x30>
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a80:	f001 bdd2 	b.w	800b628 <_fflush_r>
 8009a84:	bd10      	pop	{r4, pc}
 8009a86:	bf00      	nop
 8009a88:	200015a8 	.word	0x200015a8
 8009a8c:	20001610 	.word	0x20001610
 8009a90:	20001678 	.word	0x20001678

08009a94 <global_stdio_init.part.0>:
 8009a94:	b510      	push	{r4, lr}
 8009a96:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac4 <global_stdio_init.part.0+0x30>)
 8009a98:	4c0b      	ldr	r4, [pc, #44]	@ (8009ac8 <global_stdio_init.part.0+0x34>)
 8009a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8009acc <global_stdio_init.part.0+0x38>)
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	2104      	movs	r1, #4
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f7ff ff94 	bl	80099d0 <std>
 8009aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009aac:	2201      	movs	r2, #1
 8009aae:	2109      	movs	r1, #9
 8009ab0:	f7ff ff8e 	bl	80099d0 <std>
 8009ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ab8:	2202      	movs	r2, #2
 8009aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abe:	2112      	movs	r1, #18
 8009ac0:	f7ff bf86 	b.w	80099d0 <std>
 8009ac4:	200016e0 	.word	0x200016e0
 8009ac8:	200015a8 	.word	0x200015a8
 8009acc:	08009a3d 	.word	0x08009a3d

08009ad0 <__sfp_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	@ (8009ad8 <__sfp_lock_acquire+0x8>)
 8009ad2:	f000 b93c 	b.w	8009d4e <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	200016e9 	.word	0x200016e9

08009adc <__sfp_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	@ (8009ae4 <__sfp_lock_release+0x8>)
 8009ade:	f000 b937 	b.w	8009d50 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	200016e9 	.word	0x200016e9

08009ae8 <__sinit>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff fff0 	bl	8009ad0 <__sfp_lock_acquire>
 8009af0:	6a23      	ldr	r3, [r4, #32]
 8009af2:	b11b      	cbz	r3, 8009afc <__sinit+0x14>
 8009af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af8:	f7ff bff0 	b.w	8009adc <__sfp_lock_release>
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <__sinit+0x28>)
 8009afe:	6223      	str	r3, [r4, #32]
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <__sinit+0x2c>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1f5      	bne.n	8009af4 <__sinit+0xc>
 8009b08:	f7ff ffc4 	bl	8009a94 <global_stdio_init.part.0>
 8009b0c:	e7f2      	b.n	8009af4 <__sinit+0xc>
 8009b0e:	bf00      	nop
 8009b10:	08009a55 	.word	0x08009a55
 8009b14:	200016e0 	.word	0x200016e0

08009b18 <_fwalk_sglue>:
 8009b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	4688      	mov	r8, r1
 8009b20:	4614      	mov	r4, r2
 8009b22:	2600      	movs	r6, #0
 8009b24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b28:	f1b9 0901 	subs.w	r9, r9, #1
 8009b2c:	d505      	bpl.n	8009b3a <_fwalk_sglue+0x22>
 8009b2e:	6824      	ldr	r4, [r4, #0]
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	d1f7      	bne.n	8009b24 <_fwalk_sglue+0xc>
 8009b34:	4630      	mov	r0, r6
 8009b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d907      	bls.n	8009b50 <_fwalk_sglue+0x38>
 8009b40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b44:	3301      	adds	r3, #1
 8009b46:	d003      	beq.n	8009b50 <_fwalk_sglue+0x38>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	4306      	orrs	r6, r0
 8009b50:	3568      	adds	r5, #104	@ 0x68
 8009b52:	e7e9      	b.n	8009b28 <_fwalk_sglue+0x10>

08009b54 <siprintf>:
 8009b54:	b40e      	push	{r1, r2, r3}
 8009b56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	2400      	movs	r4, #0
 8009b5e:	b09d      	sub	sp, #116	@ 0x74
 8009b60:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009b62:	9002      	str	r0, [sp, #8]
 8009b64:	9006      	str	r0, [sp, #24]
 8009b66:	9107      	str	r1, [sp, #28]
 8009b68:	9104      	str	r1, [sp, #16]
 8009b6a:	4809      	ldr	r0, [pc, #36]	@ (8009b90 <siprintf+0x3c>)
 8009b6c:	4909      	ldr	r1, [pc, #36]	@ (8009b94 <siprintf+0x40>)
 8009b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b72:	9105      	str	r1, [sp, #20]
 8009b74:	6800      	ldr	r0, [r0, #0]
 8009b76:	a902      	add	r1, sp, #8
 8009b78:	9301      	str	r3, [sp, #4]
 8009b7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009b7c:	f001 fa48 	bl	800b010 <_svfiprintf_r>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	701c      	strb	r4, [r3, #0]
 8009b84:	b01d      	add	sp, #116	@ 0x74
 8009b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b8a:	b003      	add	sp, #12
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	200002f8 	.word	0x200002f8
 8009b94:	ffff0208 	.word	0xffff0208

08009b98 <__sread>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba0:	f000 f886 	bl	8009cb0 <_read_r>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	bfab      	itete	ge
 8009ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009baa:	89a3      	ldrhlt	r3, [r4, #12]
 8009bac:	181b      	addge	r3, r3, r0
 8009bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bb2:	bfac      	ite	ge
 8009bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009bb6:	81a3      	strhlt	r3, [r4, #12]
 8009bb8:	bd10      	pop	{r4, pc}

08009bba <__swrite>:
 8009bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bbe:	461f      	mov	r7, r3
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	05db      	lsls	r3, r3, #23
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	4616      	mov	r6, r2
 8009bca:	d505      	bpl.n	8009bd8 <__swrite+0x1e>
 8009bcc:	2302      	movs	r3, #2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd4:	f000 f85a 	bl	8009c8c <_lseek_r>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	4632      	mov	r2, r6
 8009bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009be0:	81a3      	strh	r3, [r4, #12]
 8009be2:	4628      	mov	r0, r5
 8009be4:	463b      	mov	r3, r7
 8009be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	f000 b871 	b.w	8009cd4 <_write_r>

08009bf2 <__sseek>:
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfa:	f000 f847 	bl	8009c8c <_lseek_r>
 8009bfe:	1c43      	adds	r3, r0, #1
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	bf15      	itete	ne
 8009c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c0e:	81a3      	strheq	r3, [r4, #12]
 8009c10:	bf18      	it	ne
 8009c12:	81a3      	strhne	r3, [r4, #12]
 8009c14:	bd10      	pop	{r4, pc}

08009c16 <__sclose>:
 8009c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c1a:	f000 b827 	b.w	8009c6c <_close_r>

08009c1e <memset>:
 8009c1e:	4603      	mov	r3, r0
 8009c20:	4402      	add	r2, r0
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d100      	bne.n	8009c28 <memset+0xa>
 8009c26:	4770      	bx	lr
 8009c28:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2c:	e7f9      	b.n	8009c22 <memset+0x4>

08009c2e <strchr>:
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b2c9      	uxtb	r1, r1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c38:	b112      	cbz	r2, 8009c40 <strchr+0x12>
 8009c3a:	428a      	cmp	r2, r1
 8009c3c:	d1f9      	bne.n	8009c32 <strchr+0x4>
 8009c3e:	4770      	bx	lr
 8009c40:	2900      	cmp	r1, #0
 8009c42:	bf18      	it	ne
 8009c44:	2000      	movne	r0, #0
 8009c46:	4770      	bx	lr

08009c48 <strncmp>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	b16a      	cbz	r2, 8009c68 <strncmp+0x20>
 8009c4c:	3901      	subs	r1, #1
 8009c4e:	1884      	adds	r4, r0, r2
 8009c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d103      	bne.n	8009c64 <strncmp+0x1c>
 8009c5c:	42a0      	cmp	r0, r4
 8009c5e:	d001      	beq.n	8009c64 <strncmp+0x1c>
 8009c60:	2a00      	cmp	r2, #0
 8009c62:	d1f5      	bne.n	8009c50 <strncmp+0x8>
 8009c64:	1ad0      	subs	r0, r2, r3
 8009c66:	bd10      	pop	{r4, pc}
 8009c68:	4610      	mov	r0, r2
 8009c6a:	e7fc      	b.n	8009c66 <strncmp+0x1e>

08009c6c <_close_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	2300      	movs	r3, #0
 8009c70:	4d05      	ldr	r5, [pc, #20]	@ (8009c88 <_close_r+0x1c>)
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f7 ff01 	bl	8001a7e <_close>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_close_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_close_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	200016e4 	.word	0x200016e4

08009c8c <_lseek_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	2200      	movs	r2, #0
 8009c96:	4d05      	ldr	r5, [pc, #20]	@ (8009cac <_lseek_r+0x20>)
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f7 ff13 	bl	8001ac6 <_lseek>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_lseek_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_lseek_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	200016e4 	.word	0x200016e4

08009cb0 <_read_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	4611      	mov	r1, r2
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4d05      	ldr	r5, [pc, #20]	@ (8009cd0 <_read_r+0x20>)
 8009cbc:	602a      	str	r2, [r5, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f7f7 fea4 	bl	8001a0c <_read>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	d102      	bne.n	8009cce <_read_r+0x1e>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	b103      	cbz	r3, 8009cce <_read_r+0x1e>
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	200016e4 	.word	0x200016e4

08009cd4 <_write_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	4611      	mov	r1, r2
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4d05      	ldr	r5, [pc, #20]	@ (8009cf4 <_write_r+0x20>)
 8009ce0:	602a      	str	r2, [r5, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	f7f7 feaf 	bl	8001a46 <_write>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_write_r+0x1e>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_write_r+0x1e>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	200016e4 	.word	0x200016e4

08009cf8 <__errno>:
 8009cf8:	4b01      	ldr	r3, [pc, #4]	@ (8009d00 <__errno+0x8>)
 8009cfa:	6818      	ldr	r0, [r3, #0]
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	200002f8 	.word	0x200002f8

08009d04 <__libc_init_array>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	2600      	movs	r6, #0
 8009d08:	4d0c      	ldr	r5, [pc, #48]	@ (8009d3c <__libc_init_array+0x38>)
 8009d0a:	4c0d      	ldr	r4, [pc, #52]	@ (8009d40 <__libc_init_array+0x3c>)
 8009d0c:	1b64      	subs	r4, r4, r5
 8009d0e:	10a4      	asrs	r4, r4, #2
 8009d10:	42a6      	cmp	r6, r4
 8009d12:	d109      	bne.n	8009d28 <__libc_init_array+0x24>
 8009d14:	f002 f80c 	bl	800bd30 <_init>
 8009d18:	2600      	movs	r6, #0
 8009d1a:	4d0a      	ldr	r5, [pc, #40]	@ (8009d44 <__libc_init_array+0x40>)
 8009d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8009d48 <__libc_init_array+0x44>)
 8009d1e:	1b64      	subs	r4, r4, r5
 8009d20:	10a4      	asrs	r4, r4, #2
 8009d22:	42a6      	cmp	r6, r4
 8009d24:	d105      	bne.n	8009d32 <__libc_init_array+0x2e>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d2c:	4798      	blx	r3
 8009d2e:	3601      	adds	r6, #1
 8009d30:	e7ee      	b.n	8009d10 <__libc_init_array+0xc>
 8009d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d36:	4798      	blx	r3
 8009d38:	3601      	adds	r6, #1
 8009d3a:	e7f2      	b.n	8009d22 <__libc_init_array+0x1e>
 8009d3c:	0800c414 	.word	0x0800c414
 8009d40:	0800c414 	.word	0x0800c414
 8009d44:	0800c414 	.word	0x0800c414
 8009d48:	0800c418 	.word	0x0800c418

08009d4c <__retarget_lock_init_recursive>:
 8009d4c:	4770      	bx	lr

08009d4e <__retarget_lock_acquire_recursive>:
 8009d4e:	4770      	bx	lr

08009d50 <__retarget_lock_release_recursive>:
 8009d50:	4770      	bx	lr

08009d52 <memcpy>:
 8009d52:	440a      	add	r2, r1
 8009d54:	4291      	cmp	r1, r2
 8009d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d5a:	d100      	bne.n	8009d5e <memcpy+0xc>
 8009d5c:	4770      	bx	lr
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d64:	4291      	cmp	r1, r2
 8009d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d6a:	d1f9      	bne.n	8009d60 <memcpy+0xe>
 8009d6c:	bd10      	pop	{r4, pc}
	...

08009d70 <nan>:
 8009d70:	2000      	movs	r0, #0
 8009d72:	4901      	ldr	r1, [pc, #4]	@ (8009d78 <nan+0x8>)
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	7ff80000 	.word	0x7ff80000

08009d7c <_free_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4605      	mov	r5, r0
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d040      	beq.n	8009e06 <_free_r+0x8a>
 8009d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d88:	1f0c      	subs	r4, r1, #4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	bfb8      	it	lt
 8009d8e:	18e4      	addlt	r4, r4, r3
 8009d90:	f000 fc2a 	bl	800a5e8 <__malloc_lock>
 8009d94:	4a1c      	ldr	r2, [pc, #112]	@ (8009e08 <_free_r+0x8c>)
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	b933      	cbnz	r3, 8009da8 <_free_r+0x2c>
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	6014      	str	r4, [r2, #0]
 8009d9e:	4628      	mov	r0, r5
 8009da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da4:	f000 bc26 	b.w	800a5f4 <__malloc_unlock>
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	d908      	bls.n	8009dbe <_free_r+0x42>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	1821      	adds	r1, r4, r0
 8009db0:	428b      	cmp	r3, r1
 8009db2:	bf01      	itttt	eq
 8009db4:	6819      	ldreq	r1, [r3, #0]
 8009db6:	685b      	ldreq	r3, [r3, #4]
 8009db8:	1809      	addeq	r1, r1, r0
 8009dba:	6021      	streq	r1, [r4, #0]
 8009dbc:	e7ed      	b.n	8009d9a <_free_r+0x1e>
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b10b      	cbz	r3, 8009dc8 <_free_r+0x4c>
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	d9fa      	bls.n	8009dbe <_free_r+0x42>
 8009dc8:	6811      	ldr	r1, [r2, #0]
 8009dca:	1850      	adds	r0, r2, r1
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d10b      	bne.n	8009de8 <_free_r+0x6c>
 8009dd0:	6820      	ldr	r0, [r4, #0]
 8009dd2:	4401      	add	r1, r0
 8009dd4:	1850      	adds	r0, r2, r1
 8009dd6:	4283      	cmp	r3, r0
 8009dd8:	6011      	str	r1, [r2, #0]
 8009dda:	d1e0      	bne.n	8009d9e <_free_r+0x22>
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4408      	add	r0, r1
 8009de2:	6010      	str	r0, [r2, #0]
 8009de4:	6053      	str	r3, [r2, #4]
 8009de6:	e7da      	b.n	8009d9e <_free_r+0x22>
 8009de8:	d902      	bls.n	8009df0 <_free_r+0x74>
 8009dea:	230c      	movs	r3, #12
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	e7d6      	b.n	8009d9e <_free_r+0x22>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	1821      	adds	r1, r4, r0
 8009df4:	428b      	cmp	r3, r1
 8009df6:	bf01      	itttt	eq
 8009df8:	6819      	ldreq	r1, [r3, #0]
 8009dfa:	685b      	ldreq	r3, [r3, #4]
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	6063      	str	r3, [r4, #4]
 8009e02:	6054      	str	r4, [r2, #4]
 8009e04:	e7cb      	b.n	8009d9e <_free_r+0x22>
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	200016f0 	.word	0x200016f0

08009e0c <rshift>:
 8009e0c:	6903      	ldr	r3, [r0, #16]
 8009e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e12:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e16:	f100 0414 	add.w	r4, r0, #20
 8009e1a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e1e:	dd46      	ble.n	8009eae <rshift+0xa2>
 8009e20:	f011 011f 	ands.w	r1, r1, #31
 8009e24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e2c:	d10c      	bne.n	8009e48 <rshift+0x3c>
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f100 0710 	add.w	r7, r0, #16
 8009e34:	42b1      	cmp	r1, r6
 8009e36:	d335      	bcc.n	8009ea4 <rshift+0x98>
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	1eea      	subs	r2, r5, #3
 8009e3e:	4296      	cmp	r6, r2
 8009e40:	bf38      	it	cc
 8009e42:	2300      	movcc	r3, #0
 8009e44:	4423      	add	r3, r4
 8009e46:	e015      	b.n	8009e74 <rshift+0x68>
 8009e48:	46a1      	mov	r9, r4
 8009e4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e4e:	f1c1 0820 	rsb	r8, r1, #32
 8009e52:	40cf      	lsrs	r7, r1
 8009e54:	f105 0e04 	add.w	lr, r5, #4
 8009e58:	4576      	cmp	r6, lr
 8009e5a:	46f4      	mov	ip, lr
 8009e5c:	d816      	bhi.n	8009e8c <rshift+0x80>
 8009e5e:	1a9a      	subs	r2, r3, r2
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	3a04      	subs	r2, #4
 8009e64:	3501      	adds	r5, #1
 8009e66:	42ae      	cmp	r6, r5
 8009e68:	bf38      	it	cc
 8009e6a:	2200      	movcc	r2, #0
 8009e6c:	18a3      	adds	r3, r4, r2
 8009e6e:	50a7      	str	r7, [r4, r2]
 8009e70:	b107      	cbz	r7, 8009e74 <rshift+0x68>
 8009e72:	3304      	adds	r3, #4
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	eba3 0204 	sub.w	r2, r3, r4
 8009e7a:	bf08      	it	eq
 8009e7c:	2300      	moveq	r3, #0
 8009e7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e82:	6102      	str	r2, [r0, #16]
 8009e84:	bf08      	it	eq
 8009e86:	6143      	streq	r3, [r0, #20]
 8009e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e8c:	f8dc c000 	ldr.w	ip, [ip]
 8009e90:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e94:	ea4c 0707 	orr.w	r7, ip, r7
 8009e98:	f849 7b04 	str.w	r7, [r9], #4
 8009e9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ea0:	40cf      	lsrs	r7, r1
 8009ea2:	e7d9      	b.n	8009e58 <rshift+0x4c>
 8009ea4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ea8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eac:	e7c2      	b.n	8009e34 <rshift+0x28>
 8009eae:	4623      	mov	r3, r4
 8009eb0:	e7e0      	b.n	8009e74 <rshift+0x68>

08009eb2 <__hexdig_fun>:
 8009eb2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d802      	bhi.n	8009ec0 <__hexdig_fun+0xe>
 8009eba:	3820      	subs	r0, #32
 8009ebc:	b2c0      	uxtb	r0, r0
 8009ebe:	4770      	bx	lr
 8009ec0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d801      	bhi.n	8009ecc <__hexdig_fun+0x1a>
 8009ec8:	3847      	subs	r0, #71	@ 0x47
 8009eca:	e7f7      	b.n	8009ebc <__hexdig_fun+0xa>
 8009ecc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ed0:	2b05      	cmp	r3, #5
 8009ed2:	d801      	bhi.n	8009ed8 <__hexdig_fun+0x26>
 8009ed4:	3827      	subs	r0, #39	@ 0x27
 8009ed6:	e7f1      	b.n	8009ebc <__hexdig_fun+0xa>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	4770      	bx	lr

08009edc <__gethex>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	468a      	mov	sl, r1
 8009ee2:	4690      	mov	r8, r2
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	9302      	str	r3, [sp, #8]
 8009ee8:	680b      	ldr	r3, [r1, #0]
 8009eea:	9001      	str	r0, [sp, #4]
 8009eec:	1c9c      	adds	r4, r3, #2
 8009eee:	46a1      	mov	r9, r4
 8009ef0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ef4:	2830      	cmp	r0, #48	@ 0x30
 8009ef6:	d0fa      	beq.n	8009eee <__gethex+0x12>
 8009ef8:	eba9 0303 	sub.w	r3, r9, r3
 8009efc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f00:	f7ff ffd7 	bl	8009eb2 <__hexdig_fun>
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d168      	bne.n	8009fdc <__gethex+0x100>
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	4648      	mov	r0, r9
 8009f0e:	499f      	ldr	r1, [pc, #636]	@ (800a18c <__gethex+0x2b0>)
 8009f10:	f7ff fe9a 	bl	8009c48 <strncmp>
 8009f14:	4607      	mov	r7, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d167      	bne.n	8009fea <__gethex+0x10e>
 8009f1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f1e:	4626      	mov	r6, r4
 8009f20:	f7ff ffc7 	bl	8009eb2 <__hexdig_fun>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d062      	beq.n	8009fee <__gethex+0x112>
 8009f28:	4623      	mov	r3, r4
 8009f2a:	7818      	ldrb	r0, [r3, #0]
 8009f2c:	4699      	mov	r9, r3
 8009f2e:	2830      	cmp	r0, #48	@ 0x30
 8009f30:	f103 0301 	add.w	r3, r3, #1
 8009f34:	d0f9      	beq.n	8009f2a <__gethex+0x4e>
 8009f36:	f7ff ffbc 	bl	8009eb2 <__hexdig_fun>
 8009f3a:	fab0 f580 	clz	r5, r0
 8009f3e:	f04f 0b01 	mov.w	fp, #1
 8009f42:	096d      	lsrs	r5, r5, #5
 8009f44:	464a      	mov	r2, r9
 8009f46:	4616      	mov	r6, r2
 8009f48:	7830      	ldrb	r0, [r6, #0]
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	f7ff ffb1 	bl	8009eb2 <__hexdig_fun>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d1f8      	bne.n	8009f46 <__gethex+0x6a>
 8009f54:	2201      	movs	r2, #1
 8009f56:	4630      	mov	r0, r6
 8009f58:	498c      	ldr	r1, [pc, #560]	@ (800a18c <__gethex+0x2b0>)
 8009f5a:	f7ff fe75 	bl	8009c48 <strncmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d13f      	bne.n	8009fe2 <__gethex+0x106>
 8009f62:	b944      	cbnz	r4, 8009f76 <__gethex+0x9a>
 8009f64:	1c74      	adds	r4, r6, #1
 8009f66:	4622      	mov	r2, r4
 8009f68:	4616      	mov	r6, r2
 8009f6a:	7830      	ldrb	r0, [r6, #0]
 8009f6c:	3201      	adds	r2, #1
 8009f6e:	f7ff ffa0 	bl	8009eb2 <__hexdig_fun>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d1f8      	bne.n	8009f68 <__gethex+0x8c>
 8009f76:	1ba4      	subs	r4, r4, r6
 8009f78:	00a7      	lsls	r7, r4, #2
 8009f7a:	7833      	ldrb	r3, [r6, #0]
 8009f7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f80:	2b50      	cmp	r3, #80	@ 0x50
 8009f82:	d13e      	bne.n	800a002 <__gethex+0x126>
 8009f84:	7873      	ldrb	r3, [r6, #1]
 8009f86:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f88:	d033      	beq.n	8009ff2 <__gethex+0x116>
 8009f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f8c:	d034      	beq.n	8009ff8 <__gethex+0x11c>
 8009f8e:	2400      	movs	r4, #0
 8009f90:	1c71      	adds	r1, r6, #1
 8009f92:	7808      	ldrb	r0, [r1, #0]
 8009f94:	f7ff ff8d 	bl	8009eb2 <__hexdig_fun>
 8009f98:	1e43      	subs	r3, r0, #1
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b18      	cmp	r3, #24
 8009f9e:	d830      	bhi.n	800a002 <__gethex+0x126>
 8009fa0:	f1a0 0210 	sub.w	r2, r0, #16
 8009fa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fa8:	f7ff ff83 	bl	8009eb2 <__hexdig_fun>
 8009fac:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fb0:	fa5f fc8c 	uxtb.w	ip, ip
 8009fb4:	f1bc 0f18 	cmp.w	ip, #24
 8009fb8:	f04f 030a 	mov.w	r3, #10
 8009fbc:	d91e      	bls.n	8009ffc <__gethex+0x120>
 8009fbe:	b104      	cbz	r4, 8009fc2 <__gethex+0xe6>
 8009fc0:	4252      	negs	r2, r2
 8009fc2:	4417      	add	r7, r2
 8009fc4:	f8ca 1000 	str.w	r1, [sl]
 8009fc8:	b1ed      	cbz	r5, 800a006 <__gethex+0x12a>
 8009fca:	f1bb 0f00 	cmp.w	fp, #0
 8009fce:	bf0c      	ite	eq
 8009fd0:	2506      	moveq	r5, #6
 8009fd2:	2500      	movne	r5, #0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	b005      	add	sp, #20
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	2500      	movs	r5, #0
 8009fde:	462c      	mov	r4, r5
 8009fe0:	e7b0      	b.n	8009f44 <__gethex+0x68>
 8009fe2:	2c00      	cmp	r4, #0
 8009fe4:	d1c7      	bne.n	8009f76 <__gethex+0x9a>
 8009fe6:	4627      	mov	r7, r4
 8009fe8:	e7c7      	b.n	8009f7a <__gethex+0x9e>
 8009fea:	464e      	mov	r6, r9
 8009fec:	462f      	mov	r7, r5
 8009fee:	2501      	movs	r5, #1
 8009ff0:	e7c3      	b.n	8009f7a <__gethex+0x9e>
 8009ff2:	2400      	movs	r4, #0
 8009ff4:	1cb1      	adds	r1, r6, #2
 8009ff6:	e7cc      	b.n	8009f92 <__gethex+0xb6>
 8009ff8:	2401      	movs	r4, #1
 8009ffa:	e7fb      	b.n	8009ff4 <__gethex+0x118>
 8009ffc:	fb03 0002 	mla	r0, r3, r2, r0
 800a000:	e7ce      	b.n	8009fa0 <__gethex+0xc4>
 800a002:	4631      	mov	r1, r6
 800a004:	e7de      	b.n	8009fc4 <__gethex+0xe8>
 800a006:	4629      	mov	r1, r5
 800a008:	eba6 0309 	sub.w	r3, r6, r9
 800a00c:	3b01      	subs	r3, #1
 800a00e:	2b07      	cmp	r3, #7
 800a010:	dc0a      	bgt.n	800a028 <__gethex+0x14c>
 800a012:	9801      	ldr	r0, [sp, #4]
 800a014:	f000 faf4 	bl	800a600 <_Balloc>
 800a018:	4604      	mov	r4, r0
 800a01a:	b940      	cbnz	r0, 800a02e <__gethex+0x152>
 800a01c:	4602      	mov	r2, r0
 800a01e:	21e4      	movs	r1, #228	@ 0xe4
 800a020:	4b5b      	ldr	r3, [pc, #364]	@ (800a190 <__gethex+0x2b4>)
 800a022:	485c      	ldr	r0, [pc, #368]	@ (800a194 <__gethex+0x2b8>)
 800a024:	f001 fb60 	bl	800b6e8 <__assert_func>
 800a028:	3101      	adds	r1, #1
 800a02a:	105b      	asrs	r3, r3, #1
 800a02c:	e7ef      	b.n	800a00e <__gethex+0x132>
 800a02e:	2300      	movs	r3, #0
 800a030:	f100 0a14 	add.w	sl, r0, #20
 800a034:	4655      	mov	r5, sl
 800a036:	469b      	mov	fp, r3
 800a038:	45b1      	cmp	r9, r6
 800a03a:	d337      	bcc.n	800a0ac <__gethex+0x1d0>
 800a03c:	f845 bb04 	str.w	fp, [r5], #4
 800a040:	eba5 050a 	sub.w	r5, r5, sl
 800a044:	10ad      	asrs	r5, r5, #2
 800a046:	6125      	str	r5, [r4, #16]
 800a048:	4658      	mov	r0, fp
 800a04a:	f000 fbcb 	bl	800a7e4 <__hi0bits>
 800a04e:	016d      	lsls	r5, r5, #5
 800a050:	f8d8 6000 	ldr.w	r6, [r8]
 800a054:	1a2d      	subs	r5, r5, r0
 800a056:	42b5      	cmp	r5, r6
 800a058:	dd54      	ble.n	800a104 <__gethex+0x228>
 800a05a:	1bad      	subs	r5, r5, r6
 800a05c:	4629      	mov	r1, r5
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 ff4d 	bl	800aefe <__any_on>
 800a064:	4681      	mov	r9, r0
 800a066:	b178      	cbz	r0, 800a088 <__gethex+0x1ac>
 800a068:	f04f 0901 	mov.w	r9, #1
 800a06c:	1e6b      	subs	r3, r5, #1
 800a06e:	1159      	asrs	r1, r3, #5
 800a070:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a074:	f003 021f 	and.w	r2, r3, #31
 800a078:	fa09 f202 	lsl.w	r2, r9, r2
 800a07c:	420a      	tst	r2, r1
 800a07e:	d003      	beq.n	800a088 <__gethex+0x1ac>
 800a080:	454b      	cmp	r3, r9
 800a082:	dc36      	bgt.n	800a0f2 <__gethex+0x216>
 800a084:	f04f 0902 	mov.w	r9, #2
 800a088:	4629      	mov	r1, r5
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff febe 	bl	8009e0c <rshift>
 800a090:	442f      	add	r7, r5
 800a092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a096:	42bb      	cmp	r3, r7
 800a098:	da42      	bge.n	800a120 <__gethex+0x244>
 800a09a:	4621      	mov	r1, r4
 800a09c:	9801      	ldr	r0, [sp, #4]
 800a09e:	f000 faef 	bl	800a680 <_Bfree>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a6:	25a3      	movs	r5, #163	@ 0xa3
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	e793      	b.n	8009fd4 <__gethex+0xf8>
 800a0ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0b2:	d012      	beq.n	800a0da <__gethex+0x1fe>
 800a0b4:	2b20      	cmp	r3, #32
 800a0b6:	d104      	bne.n	800a0c2 <__gethex+0x1e6>
 800a0b8:	f845 bb04 	str.w	fp, [r5], #4
 800a0bc:	f04f 0b00 	mov.w	fp, #0
 800a0c0:	465b      	mov	r3, fp
 800a0c2:	7830      	ldrb	r0, [r6, #0]
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	f7ff fef4 	bl	8009eb2 <__hexdig_fun>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	f000 000f 	and.w	r0, r0, #15
 800a0d0:	4098      	lsls	r0, r3
 800a0d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	e7ae      	b.n	800a038 <__gethex+0x15c>
 800a0da:	45b1      	cmp	r9, r6
 800a0dc:	d8ea      	bhi.n	800a0b4 <__gethex+0x1d8>
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	492a      	ldr	r1, [pc, #168]	@ (800a18c <__gethex+0x2b0>)
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	f7ff fdaf 	bl	8009c48 <strncmp>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1e1      	bne.n	800a0b4 <__gethex+0x1d8>
 800a0f0:	e7a2      	b.n	800a038 <__gethex+0x15c>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	1ea9      	subs	r1, r5, #2
 800a0f6:	f000 ff02 	bl	800aefe <__any_on>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0c2      	beq.n	800a084 <__gethex+0x1a8>
 800a0fe:	f04f 0903 	mov.w	r9, #3
 800a102:	e7c1      	b.n	800a088 <__gethex+0x1ac>
 800a104:	da09      	bge.n	800a11a <__gethex+0x23e>
 800a106:	1b75      	subs	r5, r6, r5
 800a108:	4621      	mov	r1, r4
 800a10a:	462a      	mov	r2, r5
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	f000 fcc7 	bl	800aaa0 <__lshift>
 800a112:	4604      	mov	r4, r0
 800a114:	1b7f      	subs	r7, r7, r5
 800a116:	f100 0a14 	add.w	sl, r0, #20
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	e7b8      	b.n	800a092 <__gethex+0x1b6>
 800a120:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a124:	42bd      	cmp	r5, r7
 800a126:	dd6f      	ble.n	800a208 <__gethex+0x32c>
 800a128:	1bed      	subs	r5, r5, r7
 800a12a:	42ae      	cmp	r6, r5
 800a12c:	dc34      	bgt.n	800a198 <__gethex+0x2bc>
 800a12e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d022      	beq.n	800a17c <__gethex+0x2a0>
 800a136:	2b03      	cmp	r3, #3
 800a138:	d024      	beq.n	800a184 <__gethex+0x2a8>
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d115      	bne.n	800a16a <__gethex+0x28e>
 800a13e:	42ae      	cmp	r6, r5
 800a140:	d113      	bne.n	800a16a <__gethex+0x28e>
 800a142:	2e01      	cmp	r6, #1
 800a144:	d10b      	bne.n	800a15e <__gethex+0x282>
 800a146:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a14a:	9a02      	ldr	r2, [sp, #8]
 800a14c:	2562      	movs	r5, #98	@ 0x62
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	2301      	movs	r3, #1
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	f8ca 3000 	str.w	r3, [sl]
 800a158:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a15a:	601c      	str	r4, [r3, #0]
 800a15c:	e73a      	b.n	8009fd4 <__gethex+0xf8>
 800a15e:	4620      	mov	r0, r4
 800a160:	1e71      	subs	r1, r6, #1
 800a162:	f000 fecc 	bl	800aefe <__any_on>
 800a166:	2800      	cmp	r0, #0
 800a168:	d1ed      	bne.n	800a146 <__gethex+0x26a>
 800a16a:	4621      	mov	r1, r4
 800a16c:	9801      	ldr	r0, [sp, #4]
 800a16e:	f000 fa87 	bl	800a680 <_Bfree>
 800a172:	2300      	movs	r3, #0
 800a174:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a176:	2550      	movs	r5, #80	@ 0x50
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e72b      	b.n	8009fd4 <__gethex+0xf8>
 800a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f3      	bne.n	800a16a <__gethex+0x28e>
 800a182:	e7e0      	b.n	800a146 <__gethex+0x26a>
 800a184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1dd      	bne.n	800a146 <__gethex+0x26a>
 800a18a:	e7ee      	b.n	800a16a <__gethex+0x28e>
 800a18c:	0800c052 	.word	0x0800c052
 800a190:	0800c068 	.word	0x0800c068
 800a194:	0800c079 	.word	0x0800c079
 800a198:	1e6f      	subs	r7, r5, #1
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	d130      	bne.n	800a202 <__gethex+0x326>
 800a1a0:	b127      	cbz	r7, 800a1ac <__gethex+0x2d0>
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 feaa 	bl	800aefe <__any_on>
 800a1aa:	4681      	mov	r9, r0
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	1b76      	subs	r6, r6, r5
 800a1b2:	2502      	movs	r5, #2
 800a1b4:	117a      	asrs	r2, r7, #5
 800a1b6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1ba:	f007 071f 	and.w	r7, r7, #31
 800a1be:	40bb      	lsls	r3, r7
 800a1c0:	4213      	tst	r3, r2
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	bf18      	it	ne
 800a1c6:	f049 0902 	orrne.w	r9, r9, #2
 800a1ca:	f7ff fe1f 	bl	8009e0c <rshift>
 800a1ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d047      	beq.n	800a268 <__gethex+0x38c>
 800a1d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d015      	beq.n	800a20c <__gethex+0x330>
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d017      	beq.n	800a214 <__gethex+0x338>
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d109      	bne.n	800a1fc <__gethex+0x320>
 800a1e8:	f019 0f02 	tst.w	r9, #2
 800a1ec:	d006      	beq.n	800a1fc <__gethex+0x320>
 800a1ee:	f8da 3000 	ldr.w	r3, [sl]
 800a1f2:	ea49 0903 	orr.w	r9, r9, r3
 800a1f6:	f019 0f01 	tst.w	r9, #1
 800a1fa:	d10e      	bne.n	800a21a <__gethex+0x33e>
 800a1fc:	f045 0510 	orr.w	r5, r5, #16
 800a200:	e032      	b.n	800a268 <__gethex+0x38c>
 800a202:	f04f 0901 	mov.w	r9, #1
 800a206:	e7d1      	b.n	800a1ac <__gethex+0x2d0>
 800a208:	2501      	movs	r5, #1
 800a20a:	e7e2      	b.n	800a1d2 <__gethex+0x2f6>
 800a20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20e:	f1c3 0301 	rsb	r3, r3, #1
 800a212:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0f0      	beq.n	800a1fc <__gethex+0x320>
 800a21a:	f04f 0c00 	mov.w	ip, #0
 800a21e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a222:	f104 0314 	add.w	r3, r4, #20
 800a226:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a22a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a22e:	4618      	mov	r0, r3
 800a230:	f853 2b04 	ldr.w	r2, [r3], #4
 800a234:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a238:	d01b      	beq.n	800a272 <__gethex+0x396>
 800a23a:	3201      	adds	r2, #1
 800a23c:	6002      	str	r2, [r0, #0]
 800a23e:	2d02      	cmp	r5, #2
 800a240:	f104 0314 	add.w	r3, r4, #20
 800a244:	d13c      	bne.n	800a2c0 <__gethex+0x3e4>
 800a246:	f8d8 2000 	ldr.w	r2, [r8]
 800a24a:	3a01      	subs	r2, #1
 800a24c:	42b2      	cmp	r2, r6
 800a24e:	d109      	bne.n	800a264 <__gethex+0x388>
 800a250:	2201      	movs	r2, #1
 800a252:	1171      	asrs	r1, r6, #5
 800a254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a258:	f006 061f 	and.w	r6, r6, #31
 800a25c:	fa02 f606 	lsl.w	r6, r2, r6
 800a260:	421e      	tst	r6, r3
 800a262:	d13a      	bne.n	800a2da <__gethex+0x3fe>
 800a264:	f045 0520 	orr.w	r5, r5, #32
 800a268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a26a:	601c      	str	r4, [r3, #0]
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	601f      	str	r7, [r3, #0]
 800a270:	e6b0      	b.n	8009fd4 <__gethex+0xf8>
 800a272:	4299      	cmp	r1, r3
 800a274:	f843 cc04 	str.w	ip, [r3, #-4]
 800a278:	d8d9      	bhi.n	800a22e <__gethex+0x352>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	459b      	cmp	fp, r3
 800a27e:	db17      	blt.n	800a2b0 <__gethex+0x3d4>
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	9801      	ldr	r0, [sp, #4]
 800a284:	3101      	adds	r1, #1
 800a286:	f000 f9bb 	bl	800a600 <_Balloc>
 800a28a:	4681      	mov	r9, r0
 800a28c:	b918      	cbnz	r0, 800a296 <__gethex+0x3ba>
 800a28e:	4602      	mov	r2, r0
 800a290:	2184      	movs	r1, #132	@ 0x84
 800a292:	4b19      	ldr	r3, [pc, #100]	@ (800a2f8 <__gethex+0x41c>)
 800a294:	e6c5      	b.n	800a022 <__gethex+0x146>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	f104 010c 	add.w	r1, r4, #12
 800a29c:	3202      	adds	r2, #2
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7ff fd56 	bl	8009d52 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	9801      	ldr	r0, [sp, #4]
 800a2aa:	f000 f9e9 	bl	800a680 <_Bfree>
 800a2ae:	464c      	mov	r4, r9
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	6122      	str	r2, [r4, #16]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2bc:	615a      	str	r2, [r3, #20]
 800a2be:	e7be      	b.n	800a23e <__gethex+0x362>
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	455a      	cmp	r2, fp
 800a2c4:	dd0b      	ble.n	800a2de <__gethex+0x402>
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7ff fd9f 	bl	8009e0c <rshift>
 800a2ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2d2:	3701      	adds	r7, #1
 800a2d4:	42bb      	cmp	r3, r7
 800a2d6:	f6ff aee0 	blt.w	800a09a <__gethex+0x1be>
 800a2da:	2501      	movs	r5, #1
 800a2dc:	e7c2      	b.n	800a264 <__gethex+0x388>
 800a2de:	f016 061f 	ands.w	r6, r6, #31
 800a2e2:	d0fa      	beq.n	800a2da <__gethex+0x3fe>
 800a2e4:	4453      	add	r3, sl
 800a2e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a2ea:	f000 fa7b 	bl	800a7e4 <__hi0bits>
 800a2ee:	f1c6 0620 	rsb	r6, r6, #32
 800a2f2:	42b0      	cmp	r0, r6
 800a2f4:	dbe7      	blt.n	800a2c6 <__gethex+0x3ea>
 800a2f6:	e7f0      	b.n	800a2da <__gethex+0x3fe>
 800a2f8:	0800c068 	.word	0x0800c068

0800a2fc <L_shift>:
 800a2fc:	f1c2 0208 	rsb	r2, r2, #8
 800a300:	0092      	lsls	r2, r2, #2
 800a302:	b570      	push	{r4, r5, r6, lr}
 800a304:	f1c2 0620 	rsb	r6, r2, #32
 800a308:	6843      	ldr	r3, [r0, #4]
 800a30a:	6804      	ldr	r4, [r0, #0]
 800a30c:	fa03 f506 	lsl.w	r5, r3, r6
 800a310:	432c      	orrs	r4, r5
 800a312:	40d3      	lsrs	r3, r2
 800a314:	6004      	str	r4, [r0, #0]
 800a316:	f840 3f04 	str.w	r3, [r0, #4]!
 800a31a:	4288      	cmp	r0, r1
 800a31c:	d3f4      	bcc.n	800a308 <L_shift+0xc>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}

0800a320 <__match>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	6803      	ldr	r3, [r0, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a32a:	b914      	cbnz	r4, 800a332 <__match+0x12>
 800a32c:	6003      	str	r3, [r0, #0]
 800a32e:	2001      	movs	r0, #1
 800a330:	bd30      	pop	{r4, r5, pc}
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a33a:	2d19      	cmp	r5, #25
 800a33c:	bf98      	it	ls
 800a33e:	3220      	addls	r2, #32
 800a340:	42a2      	cmp	r2, r4
 800a342:	d0f0      	beq.n	800a326 <__match+0x6>
 800a344:	2000      	movs	r0, #0
 800a346:	e7f3      	b.n	800a330 <__match+0x10>

0800a348 <__hexnan>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	2500      	movs	r5, #0
 800a34e:	680b      	ldr	r3, [r1, #0]
 800a350:	4682      	mov	sl, r0
 800a352:	115e      	asrs	r6, r3, #5
 800a354:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a358:	f013 031f 	ands.w	r3, r3, #31
 800a35c:	bf18      	it	ne
 800a35e:	3604      	addne	r6, #4
 800a360:	1f37      	subs	r7, r6, #4
 800a362:	4690      	mov	r8, r2
 800a364:	46b9      	mov	r9, r7
 800a366:	463c      	mov	r4, r7
 800a368:	46ab      	mov	fp, r5
 800a36a:	b087      	sub	sp, #28
 800a36c:	6801      	ldr	r1, [r0, #0]
 800a36e:	9301      	str	r3, [sp, #4]
 800a370:	f846 5c04 	str.w	r5, [r6, #-4]
 800a374:	9502      	str	r5, [sp, #8]
 800a376:	784a      	ldrb	r2, [r1, #1]
 800a378:	1c4b      	adds	r3, r1, #1
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	b342      	cbz	r2, 800a3d0 <__hexnan+0x88>
 800a37e:	4610      	mov	r0, r2
 800a380:	9105      	str	r1, [sp, #20]
 800a382:	9204      	str	r2, [sp, #16]
 800a384:	f7ff fd95 	bl	8009eb2 <__hexdig_fun>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d151      	bne.n	800a430 <__hexnan+0xe8>
 800a38c:	9a04      	ldr	r2, [sp, #16]
 800a38e:	9905      	ldr	r1, [sp, #20]
 800a390:	2a20      	cmp	r2, #32
 800a392:	d818      	bhi.n	800a3c6 <__hexnan+0x7e>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	459b      	cmp	fp, r3
 800a398:	dd13      	ble.n	800a3c2 <__hexnan+0x7a>
 800a39a:	454c      	cmp	r4, r9
 800a39c:	d206      	bcs.n	800a3ac <__hexnan+0x64>
 800a39e:	2d07      	cmp	r5, #7
 800a3a0:	dc04      	bgt.n	800a3ac <__hexnan+0x64>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff ffa8 	bl	800a2fc <L_shift>
 800a3ac:	4544      	cmp	r4, r8
 800a3ae:	d952      	bls.n	800a456 <__hexnan+0x10e>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ba:	461d      	mov	r5, r3
 800a3bc:	464c      	mov	r4, r9
 800a3be:	f8cd b008 	str.w	fp, [sp, #8]
 800a3c2:	9903      	ldr	r1, [sp, #12]
 800a3c4:	e7d7      	b.n	800a376 <__hexnan+0x2e>
 800a3c6:	2a29      	cmp	r2, #41	@ 0x29
 800a3c8:	d157      	bne.n	800a47a <__hexnan+0x132>
 800a3ca:	3102      	adds	r1, #2
 800a3cc:	f8ca 1000 	str.w	r1, [sl]
 800a3d0:	f1bb 0f00 	cmp.w	fp, #0
 800a3d4:	d051      	beq.n	800a47a <__hexnan+0x132>
 800a3d6:	454c      	cmp	r4, r9
 800a3d8:	d206      	bcs.n	800a3e8 <__hexnan+0xa0>
 800a3da:	2d07      	cmp	r5, #7
 800a3dc:	dc04      	bgt.n	800a3e8 <__hexnan+0xa0>
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff ff8a 	bl	800a2fc <L_shift>
 800a3e8:	4544      	cmp	r4, r8
 800a3ea:	d936      	bls.n	800a45a <__hexnan+0x112>
 800a3ec:	4623      	mov	r3, r4
 800a3ee:	f1a8 0204 	sub.w	r2, r8, #4
 800a3f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3f6:	429f      	cmp	r7, r3
 800a3f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3fc:	d2f9      	bcs.n	800a3f2 <__hexnan+0xaa>
 800a3fe:	1b3b      	subs	r3, r7, r4
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	3304      	adds	r3, #4
 800a406:	3401      	adds	r4, #1
 800a408:	3e03      	subs	r6, #3
 800a40a:	42b4      	cmp	r4, r6
 800a40c:	bf88      	it	hi
 800a40e:	2304      	movhi	r3, #4
 800a410:	2200      	movs	r2, #0
 800a412:	4443      	add	r3, r8
 800a414:	f843 2b04 	str.w	r2, [r3], #4
 800a418:	429f      	cmp	r7, r3
 800a41a:	d2fb      	bcs.n	800a414 <__hexnan+0xcc>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	b91b      	cbnz	r3, 800a428 <__hexnan+0xe0>
 800a420:	4547      	cmp	r7, r8
 800a422:	d128      	bne.n	800a476 <__hexnan+0x12e>
 800a424:	2301      	movs	r3, #1
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	2005      	movs	r0, #5
 800a42a:	b007      	add	sp, #28
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	3501      	adds	r5, #1
 800a432:	2d08      	cmp	r5, #8
 800a434:	f10b 0b01 	add.w	fp, fp, #1
 800a438:	dd06      	ble.n	800a448 <__hexnan+0x100>
 800a43a:	4544      	cmp	r4, r8
 800a43c:	d9c1      	bls.n	800a3c2 <__hexnan+0x7a>
 800a43e:	2300      	movs	r3, #0
 800a440:	2501      	movs	r5, #1
 800a442:	f844 3c04 	str.w	r3, [r4, #-4]
 800a446:	3c04      	subs	r4, #4
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	f000 000f 	and.w	r0, r0, #15
 800a44e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	e7b5      	b.n	800a3c2 <__hexnan+0x7a>
 800a456:	2508      	movs	r5, #8
 800a458:	e7b3      	b.n	800a3c2 <__hexnan+0x7a>
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0dd      	beq.n	800a41c <__hexnan+0xd4>
 800a460:	f04f 32ff 	mov.w	r2, #4294967295
 800a464:	f1c3 0320 	rsb	r3, r3, #32
 800a468:	40da      	lsrs	r2, r3
 800a46a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a46e:	4013      	ands	r3, r2
 800a470:	f846 3c04 	str.w	r3, [r6, #-4]
 800a474:	e7d2      	b.n	800a41c <__hexnan+0xd4>
 800a476:	3f04      	subs	r7, #4
 800a478:	e7d0      	b.n	800a41c <__hexnan+0xd4>
 800a47a:	2004      	movs	r0, #4
 800a47c:	e7d5      	b.n	800a42a <__hexnan+0xe2>
	...

0800a480 <sbrk_aligned>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	4e0f      	ldr	r6, [pc, #60]	@ (800a4c0 <sbrk_aligned+0x40>)
 800a484:	460c      	mov	r4, r1
 800a486:	6831      	ldr	r1, [r6, #0]
 800a488:	4605      	mov	r5, r0
 800a48a:	b911      	cbnz	r1, 800a492 <sbrk_aligned+0x12>
 800a48c:	f001 f90e 	bl	800b6ac <_sbrk_r>
 800a490:	6030      	str	r0, [r6, #0]
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f001 f909 	bl	800b6ac <_sbrk_r>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d103      	bne.n	800a4a6 <sbrk_aligned+0x26>
 800a49e:	f04f 34ff 	mov.w	r4, #4294967295
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
 800a4a6:	1cc4      	adds	r4, r0, #3
 800a4a8:	f024 0403 	bic.w	r4, r4, #3
 800a4ac:	42a0      	cmp	r0, r4
 800a4ae:	d0f8      	beq.n	800a4a2 <sbrk_aligned+0x22>
 800a4b0:	1a21      	subs	r1, r4, r0
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	f001 f8fa 	bl	800b6ac <_sbrk_r>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d1f2      	bne.n	800a4a2 <sbrk_aligned+0x22>
 800a4bc:	e7ef      	b.n	800a49e <sbrk_aligned+0x1e>
 800a4be:	bf00      	nop
 800a4c0:	200016ec 	.word	0x200016ec

0800a4c4 <_malloc_r>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	1ccd      	adds	r5, r1, #3
 800a4ca:	f025 0503 	bic.w	r5, r5, #3
 800a4ce:	3508      	adds	r5, #8
 800a4d0:	2d0c      	cmp	r5, #12
 800a4d2:	bf38      	it	cc
 800a4d4:	250c      	movcc	r5, #12
 800a4d6:	2d00      	cmp	r5, #0
 800a4d8:	4606      	mov	r6, r0
 800a4da:	db01      	blt.n	800a4e0 <_malloc_r+0x1c>
 800a4dc:	42a9      	cmp	r1, r5
 800a4de:	d904      	bls.n	800a4ea <_malloc_r+0x26>
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	6033      	str	r3, [r6, #0]
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5c0 <_malloc_r+0xfc>
 800a4ee:	f000 f87b 	bl	800a5e8 <__malloc_lock>
 800a4f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f6:	461c      	mov	r4, r3
 800a4f8:	bb44      	cbnz	r4, 800a54c <_malloc_r+0x88>
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f7ff ffbf 	bl	800a480 <sbrk_aligned>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	4604      	mov	r4, r0
 800a506:	d158      	bne.n	800a5ba <_malloc_r+0xf6>
 800a508:	f8d8 4000 	ldr.w	r4, [r8]
 800a50c:	4627      	mov	r7, r4
 800a50e:	2f00      	cmp	r7, #0
 800a510:	d143      	bne.n	800a59a <_malloc_r+0xd6>
 800a512:	2c00      	cmp	r4, #0
 800a514:	d04b      	beq.n	800a5ae <_malloc_r+0xea>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	4639      	mov	r1, r7
 800a51a:	4630      	mov	r0, r6
 800a51c:	eb04 0903 	add.w	r9, r4, r3
 800a520:	f001 f8c4 	bl	800b6ac <_sbrk_r>
 800a524:	4581      	cmp	r9, r0
 800a526:	d142      	bne.n	800a5ae <_malloc_r+0xea>
 800a528:	6821      	ldr	r1, [r4, #0]
 800a52a:	4630      	mov	r0, r6
 800a52c:	1a6d      	subs	r5, r5, r1
 800a52e:	4629      	mov	r1, r5
 800a530:	f7ff ffa6 	bl	800a480 <sbrk_aligned>
 800a534:	3001      	adds	r0, #1
 800a536:	d03a      	beq.n	800a5ae <_malloc_r+0xea>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	442b      	add	r3, r5
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	f8d8 3000 	ldr.w	r3, [r8]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	bb62      	cbnz	r2, 800a5a0 <_malloc_r+0xdc>
 800a546:	f8c8 7000 	str.w	r7, [r8]
 800a54a:	e00f      	b.n	800a56c <_malloc_r+0xa8>
 800a54c:	6822      	ldr	r2, [r4, #0]
 800a54e:	1b52      	subs	r2, r2, r5
 800a550:	d420      	bmi.n	800a594 <_malloc_r+0xd0>
 800a552:	2a0b      	cmp	r2, #11
 800a554:	d917      	bls.n	800a586 <_malloc_r+0xc2>
 800a556:	1961      	adds	r1, r4, r5
 800a558:	42a3      	cmp	r3, r4
 800a55a:	6025      	str	r5, [r4, #0]
 800a55c:	bf18      	it	ne
 800a55e:	6059      	strne	r1, [r3, #4]
 800a560:	6863      	ldr	r3, [r4, #4]
 800a562:	bf08      	it	eq
 800a564:	f8c8 1000 	streq.w	r1, [r8]
 800a568:	5162      	str	r2, [r4, r5]
 800a56a:	604b      	str	r3, [r1, #4]
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 f841 	bl	800a5f4 <__malloc_unlock>
 800a572:	f104 000b 	add.w	r0, r4, #11
 800a576:	1d23      	adds	r3, r4, #4
 800a578:	f020 0007 	bic.w	r0, r0, #7
 800a57c:	1ac2      	subs	r2, r0, r3
 800a57e:	bf1c      	itt	ne
 800a580:	1a1b      	subne	r3, r3, r0
 800a582:	50a3      	strne	r3, [r4, r2]
 800a584:	e7af      	b.n	800a4e6 <_malloc_r+0x22>
 800a586:	6862      	ldr	r2, [r4, #4]
 800a588:	42a3      	cmp	r3, r4
 800a58a:	bf0c      	ite	eq
 800a58c:	f8c8 2000 	streq.w	r2, [r8]
 800a590:	605a      	strne	r2, [r3, #4]
 800a592:	e7eb      	b.n	800a56c <_malloc_r+0xa8>
 800a594:	4623      	mov	r3, r4
 800a596:	6864      	ldr	r4, [r4, #4]
 800a598:	e7ae      	b.n	800a4f8 <_malloc_r+0x34>
 800a59a:	463c      	mov	r4, r7
 800a59c:	687f      	ldr	r7, [r7, #4]
 800a59e:	e7b6      	b.n	800a50e <_malloc_r+0x4a>
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d1fb      	bne.n	800a5a0 <_malloc_r+0xdc>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	6053      	str	r3, [r2, #4]
 800a5ac:	e7de      	b.n	800a56c <_malloc_r+0xa8>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	6033      	str	r3, [r6, #0]
 800a5b4:	f000 f81e 	bl	800a5f4 <__malloc_unlock>
 800a5b8:	e794      	b.n	800a4e4 <_malloc_r+0x20>
 800a5ba:	6005      	str	r5, [r0, #0]
 800a5bc:	e7d6      	b.n	800a56c <_malloc_r+0xa8>
 800a5be:	bf00      	nop
 800a5c0:	200016f0 	.word	0x200016f0

0800a5c4 <__ascii_mbtowc>:
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	b901      	cbnz	r1, 800a5ca <__ascii_mbtowc+0x6>
 800a5c8:	a901      	add	r1, sp, #4
 800a5ca:	b142      	cbz	r2, 800a5de <__ascii_mbtowc+0x1a>
 800a5cc:	b14b      	cbz	r3, 800a5e2 <__ascii_mbtowc+0x1e>
 800a5ce:	7813      	ldrb	r3, [r2, #0]
 800a5d0:	600b      	str	r3, [r1, #0]
 800a5d2:	7812      	ldrb	r2, [r2, #0]
 800a5d4:	1e10      	subs	r0, r2, #0
 800a5d6:	bf18      	it	ne
 800a5d8:	2001      	movne	r0, #1
 800a5da:	b002      	add	sp, #8
 800a5dc:	4770      	bx	lr
 800a5de:	4610      	mov	r0, r2
 800a5e0:	e7fb      	b.n	800a5da <__ascii_mbtowc+0x16>
 800a5e2:	f06f 0001 	mvn.w	r0, #1
 800a5e6:	e7f8      	b.n	800a5da <__ascii_mbtowc+0x16>

0800a5e8 <__malloc_lock>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	@ (800a5f0 <__malloc_lock+0x8>)
 800a5ea:	f7ff bbb0 	b.w	8009d4e <__retarget_lock_acquire_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	200016e8 	.word	0x200016e8

0800a5f4 <__malloc_unlock>:
 800a5f4:	4801      	ldr	r0, [pc, #4]	@ (800a5fc <__malloc_unlock+0x8>)
 800a5f6:	f7ff bbab 	b.w	8009d50 <__retarget_lock_release_recursive>
 800a5fa:	bf00      	nop
 800a5fc:	200016e8 	.word	0x200016e8

0800a600 <_Balloc>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	69c6      	ldr	r6, [r0, #28]
 800a604:	4604      	mov	r4, r0
 800a606:	460d      	mov	r5, r1
 800a608:	b976      	cbnz	r6, 800a628 <_Balloc+0x28>
 800a60a:	2010      	movs	r0, #16
 800a60c:	f001 f89e 	bl	800b74c <malloc>
 800a610:	4602      	mov	r2, r0
 800a612:	61e0      	str	r0, [r4, #28]
 800a614:	b920      	cbnz	r0, 800a620 <_Balloc+0x20>
 800a616:	216b      	movs	r1, #107	@ 0x6b
 800a618:	4b17      	ldr	r3, [pc, #92]	@ (800a678 <_Balloc+0x78>)
 800a61a:	4818      	ldr	r0, [pc, #96]	@ (800a67c <_Balloc+0x7c>)
 800a61c:	f001 f864 	bl	800b6e8 <__assert_func>
 800a620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a624:	6006      	str	r6, [r0, #0]
 800a626:	60c6      	str	r6, [r0, #12]
 800a628:	69e6      	ldr	r6, [r4, #28]
 800a62a:	68f3      	ldr	r3, [r6, #12]
 800a62c:	b183      	cbz	r3, 800a650 <_Balloc+0x50>
 800a62e:	69e3      	ldr	r3, [r4, #28]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a636:	b9b8      	cbnz	r0, 800a668 <_Balloc+0x68>
 800a638:	2101      	movs	r1, #1
 800a63a:	fa01 f605 	lsl.w	r6, r1, r5
 800a63e:	1d72      	adds	r2, r6, #5
 800a640:	4620      	mov	r0, r4
 800a642:	0092      	lsls	r2, r2, #2
 800a644:	f001 f86e 	bl	800b724 <_calloc_r>
 800a648:	b160      	cbz	r0, 800a664 <_Balloc+0x64>
 800a64a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a64e:	e00e      	b.n	800a66e <_Balloc+0x6e>
 800a650:	2221      	movs	r2, #33	@ 0x21
 800a652:	2104      	movs	r1, #4
 800a654:	4620      	mov	r0, r4
 800a656:	f001 f865 	bl	800b724 <_calloc_r>
 800a65a:	69e3      	ldr	r3, [r4, #28]
 800a65c:	60f0      	str	r0, [r6, #12]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d1e4      	bne.n	800a62e <_Balloc+0x2e>
 800a664:	2000      	movs	r0, #0
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	6802      	ldr	r2, [r0, #0]
 800a66a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a66e:	2300      	movs	r3, #0
 800a670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a674:	e7f7      	b.n	800a666 <_Balloc+0x66>
 800a676:	bf00      	nop
 800a678:	0800c0d9 	.word	0x0800c0d9
 800a67c:	0800c0f0 	.word	0x0800c0f0

0800a680 <_Bfree>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	69c6      	ldr	r6, [r0, #28]
 800a684:	4605      	mov	r5, r0
 800a686:	460c      	mov	r4, r1
 800a688:	b976      	cbnz	r6, 800a6a8 <_Bfree+0x28>
 800a68a:	2010      	movs	r0, #16
 800a68c:	f001 f85e 	bl	800b74c <malloc>
 800a690:	4602      	mov	r2, r0
 800a692:	61e8      	str	r0, [r5, #28]
 800a694:	b920      	cbnz	r0, 800a6a0 <_Bfree+0x20>
 800a696:	218f      	movs	r1, #143	@ 0x8f
 800a698:	4b08      	ldr	r3, [pc, #32]	@ (800a6bc <_Bfree+0x3c>)
 800a69a:	4809      	ldr	r0, [pc, #36]	@ (800a6c0 <_Bfree+0x40>)
 800a69c:	f001 f824 	bl	800b6e8 <__assert_func>
 800a6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6a4:	6006      	str	r6, [r0, #0]
 800a6a6:	60c6      	str	r6, [r0, #12]
 800a6a8:	b13c      	cbz	r4, 800a6ba <_Bfree+0x3a>
 800a6aa:	69eb      	ldr	r3, [r5, #28]
 800a6ac:	6862      	ldr	r2, [r4, #4]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6b4:	6021      	str	r1, [r4, #0]
 800a6b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
 800a6bc:	0800c0d9 	.word	0x0800c0d9
 800a6c0:	0800c0f0 	.word	0x0800c0f0

0800a6c4 <__multadd>:
 800a6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	461e      	mov	r6, r3
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	690d      	ldr	r5, [r1, #16]
 800a6d2:	f101 0c14 	add.w	ip, r1, #20
 800a6d6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6da:	3001      	adds	r0, #1
 800a6dc:	b299      	uxth	r1, r3
 800a6de:	fb02 6101 	mla	r1, r2, r1, r6
 800a6e2:	0c1e      	lsrs	r6, r3, #16
 800a6e4:	0c0b      	lsrs	r3, r1, #16
 800a6e6:	fb02 3306 	mla	r3, r2, r6, r3
 800a6ea:	b289      	uxth	r1, r1
 800a6ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6f0:	4285      	cmp	r5, r0
 800a6f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6fa:	dcec      	bgt.n	800a6d6 <__multadd+0x12>
 800a6fc:	b30e      	cbz	r6, 800a742 <__multadd+0x7e>
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	42ab      	cmp	r3, r5
 800a702:	dc19      	bgt.n	800a738 <__multadd+0x74>
 800a704:	6861      	ldr	r1, [r4, #4]
 800a706:	4638      	mov	r0, r7
 800a708:	3101      	adds	r1, #1
 800a70a:	f7ff ff79 	bl	800a600 <_Balloc>
 800a70e:	4680      	mov	r8, r0
 800a710:	b928      	cbnz	r0, 800a71e <__multadd+0x5a>
 800a712:	4602      	mov	r2, r0
 800a714:	21ba      	movs	r1, #186	@ 0xba
 800a716:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <__multadd+0x84>)
 800a718:	480c      	ldr	r0, [pc, #48]	@ (800a74c <__multadd+0x88>)
 800a71a:	f000 ffe5 	bl	800b6e8 <__assert_func>
 800a71e:	6922      	ldr	r2, [r4, #16]
 800a720:	f104 010c 	add.w	r1, r4, #12
 800a724:	3202      	adds	r2, #2
 800a726:	0092      	lsls	r2, r2, #2
 800a728:	300c      	adds	r0, #12
 800a72a:	f7ff fb12 	bl	8009d52 <memcpy>
 800a72e:	4621      	mov	r1, r4
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ffa5 	bl	800a680 <_Bfree>
 800a736:	4644      	mov	r4, r8
 800a738:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a73c:	3501      	adds	r5, #1
 800a73e:	615e      	str	r6, [r3, #20]
 800a740:	6125      	str	r5, [r4, #16]
 800a742:	4620      	mov	r0, r4
 800a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a748:	0800c068 	.word	0x0800c068
 800a74c:	0800c0f0 	.word	0x0800c0f0

0800a750 <__s2b>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4615      	mov	r5, r2
 800a756:	2209      	movs	r2, #9
 800a758:	461f      	mov	r7, r3
 800a75a:	3308      	adds	r3, #8
 800a75c:	460c      	mov	r4, r1
 800a75e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a762:	4606      	mov	r6, r0
 800a764:	2201      	movs	r2, #1
 800a766:	2100      	movs	r1, #0
 800a768:	429a      	cmp	r2, r3
 800a76a:	db09      	blt.n	800a780 <__s2b+0x30>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f7ff ff47 	bl	800a600 <_Balloc>
 800a772:	b940      	cbnz	r0, 800a786 <__s2b+0x36>
 800a774:	4602      	mov	r2, r0
 800a776:	21d3      	movs	r1, #211	@ 0xd3
 800a778:	4b18      	ldr	r3, [pc, #96]	@ (800a7dc <__s2b+0x8c>)
 800a77a:	4819      	ldr	r0, [pc, #100]	@ (800a7e0 <__s2b+0x90>)
 800a77c:	f000 ffb4 	bl	800b6e8 <__assert_func>
 800a780:	0052      	lsls	r2, r2, #1
 800a782:	3101      	adds	r1, #1
 800a784:	e7f0      	b.n	800a768 <__s2b+0x18>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	2d09      	cmp	r5, #9
 800a78a:	6143      	str	r3, [r0, #20]
 800a78c:	f04f 0301 	mov.w	r3, #1
 800a790:	6103      	str	r3, [r0, #16]
 800a792:	dd16      	ble.n	800a7c2 <__s2b+0x72>
 800a794:	f104 0909 	add.w	r9, r4, #9
 800a798:	46c8      	mov	r8, r9
 800a79a:	442c      	add	r4, r5
 800a79c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	220a      	movs	r2, #10
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	3b30      	subs	r3, #48	@ 0x30
 800a7a8:	f7ff ff8c 	bl	800a6c4 <__multadd>
 800a7ac:	45a0      	cmp	r8, r4
 800a7ae:	d1f5      	bne.n	800a79c <__s2b+0x4c>
 800a7b0:	f1a5 0408 	sub.w	r4, r5, #8
 800a7b4:	444c      	add	r4, r9
 800a7b6:	1b2d      	subs	r5, r5, r4
 800a7b8:	1963      	adds	r3, r4, r5
 800a7ba:	42bb      	cmp	r3, r7
 800a7bc:	db04      	blt.n	800a7c8 <__s2b+0x78>
 800a7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	2509      	movs	r5, #9
 800a7c4:	340a      	adds	r4, #10
 800a7c6:	e7f6      	b.n	800a7b6 <__s2b+0x66>
 800a7c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7cc:	4601      	mov	r1, r0
 800a7ce:	220a      	movs	r2, #10
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	3b30      	subs	r3, #48	@ 0x30
 800a7d4:	f7ff ff76 	bl	800a6c4 <__multadd>
 800a7d8:	e7ee      	b.n	800a7b8 <__s2b+0x68>
 800a7da:	bf00      	nop
 800a7dc:	0800c068 	.word	0x0800c068
 800a7e0:	0800c0f0 	.word	0x0800c0f0

0800a7e4 <__hi0bits>:
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7ea:	bf3a      	itte	cc
 800a7ec:	0403      	lslcc	r3, r0, #16
 800a7ee:	2010      	movcc	r0, #16
 800a7f0:	2000      	movcs	r0, #0
 800a7f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7f6:	bf3c      	itt	cc
 800a7f8:	021b      	lslcc	r3, r3, #8
 800a7fa:	3008      	addcc	r0, #8
 800a7fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a800:	bf3c      	itt	cc
 800a802:	011b      	lslcc	r3, r3, #4
 800a804:	3004      	addcc	r0, #4
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a80a:	bf3c      	itt	cc
 800a80c:	009b      	lslcc	r3, r3, #2
 800a80e:	3002      	addcc	r0, #2
 800a810:	2b00      	cmp	r3, #0
 800a812:	db05      	blt.n	800a820 <__hi0bits+0x3c>
 800a814:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a818:	f100 0001 	add.w	r0, r0, #1
 800a81c:	bf08      	it	eq
 800a81e:	2020      	moveq	r0, #32
 800a820:	4770      	bx	lr

0800a822 <__lo0bits>:
 800a822:	6803      	ldr	r3, [r0, #0]
 800a824:	4602      	mov	r2, r0
 800a826:	f013 0007 	ands.w	r0, r3, #7
 800a82a:	d00b      	beq.n	800a844 <__lo0bits+0x22>
 800a82c:	07d9      	lsls	r1, r3, #31
 800a82e:	d421      	bmi.n	800a874 <__lo0bits+0x52>
 800a830:	0798      	lsls	r0, r3, #30
 800a832:	bf49      	itett	mi
 800a834:	085b      	lsrmi	r3, r3, #1
 800a836:	089b      	lsrpl	r3, r3, #2
 800a838:	2001      	movmi	r0, #1
 800a83a:	6013      	strmi	r3, [r2, #0]
 800a83c:	bf5c      	itt	pl
 800a83e:	2002      	movpl	r0, #2
 800a840:	6013      	strpl	r3, [r2, #0]
 800a842:	4770      	bx	lr
 800a844:	b299      	uxth	r1, r3
 800a846:	b909      	cbnz	r1, 800a84c <__lo0bits+0x2a>
 800a848:	2010      	movs	r0, #16
 800a84a:	0c1b      	lsrs	r3, r3, #16
 800a84c:	b2d9      	uxtb	r1, r3
 800a84e:	b909      	cbnz	r1, 800a854 <__lo0bits+0x32>
 800a850:	3008      	adds	r0, #8
 800a852:	0a1b      	lsrs	r3, r3, #8
 800a854:	0719      	lsls	r1, r3, #28
 800a856:	bf04      	itt	eq
 800a858:	091b      	lsreq	r3, r3, #4
 800a85a:	3004      	addeq	r0, #4
 800a85c:	0799      	lsls	r1, r3, #30
 800a85e:	bf04      	itt	eq
 800a860:	089b      	lsreq	r3, r3, #2
 800a862:	3002      	addeq	r0, #2
 800a864:	07d9      	lsls	r1, r3, #31
 800a866:	d403      	bmi.n	800a870 <__lo0bits+0x4e>
 800a868:	085b      	lsrs	r3, r3, #1
 800a86a:	f100 0001 	add.w	r0, r0, #1
 800a86e:	d003      	beq.n	800a878 <__lo0bits+0x56>
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	4770      	bx	lr
 800a874:	2000      	movs	r0, #0
 800a876:	4770      	bx	lr
 800a878:	2020      	movs	r0, #32
 800a87a:	4770      	bx	lr

0800a87c <__i2b>:
 800a87c:	b510      	push	{r4, lr}
 800a87e:	460c      	mov	r4, r1
 800a880:	2101      	movs	r1, #1
 800a882:	f7ff febd 	bl	800a600 <_Balloc>
 800a886:	4602      	mov	r2, r0
 800a888:	b928      	cbnz	r0, 800a896 <__i2b+0x1a>
 800a88a:	f240 1145 	movw	r1, #325	@ 0x145
 800a88e:	4b04      	ldr	r3, [pc, #16]	@ (800a8a0 <__i2b+0x24>)
 800a890:	4804      	ldr	r0, [pc, #16]	@ (800a8a4 <__i2b+0x28>)
 800a892:	f000 ff29 	bl	800b6e8 <__assert_func>
 800a896:	2301      	movs	r3, #1
 800a898:	6144      	str	r4, [r0, #20]
 800a89a:	6103      	str	r3, [r0, #16]
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800c068 	.word	0x0800c068
 800a8a4:	0800c0f0 	.word	0x0800c0f0

0800a8a8 <__multiply>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	4617      	mov	r7, r2
 800a8ae:	690a      	ldr	r2, [r1, #16]
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4689      	mov	r9, r1
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	bfa2      	ittt	ge
 800a8b8:	463b      	movge	r3, r7
 800a8ba:	460f      	movge	r7, r1
 800a8bc:	4699      	movge	r9, r3
 800a8be:	693d      	ldr	r5, [r7, #16]
 800a8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	eb05 060a 	add.w	r6, r5, sl
 800a8cc:	42b3      	cmp	r3, r6
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	bfb8      	it	lt
 800a8d2:	3101      	addlt	r1, #1
 800a8d4:	f7ff fe94 	bl	800a600 <_Balloc>
 800a8d8:	b930      	cbnz	r0, 800a8e8 <__multiply+0x40>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8e0:	4b40      	ldr	r3, [pc, #256]	@ (800a9e4 <__multiply+0x13c>)
 800a8e2:	4841      	ldr	r0, [pc, #260]	@ (800a9e8 <__multiply+0x140>)
 800a8e4:	f000 ff00 	bl	800b6e8 <__assert_func>
 800a8e8:	f100 0414 	add.w	r4, r0, #20
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a8f4:	4573      	cmp	r3, lr
 800a8f6:	d320      	bcc.n	800a93a <__multiply+0x92>
 800a8f8:	f107 0814 	add.w	r8, r7, #20
 800a8fc:	f109 0114 	add.w	r1, r9, #20
 800a900:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a904:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a908:	9302      	str	r3, [sp, #8]
 800a90a:	1beb      	subs	r3, r5, r7
 800a90c:	3b15      	subs	r3, #21
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	3304      	adds	r3, #4
 800a914:	3715      	adds	r7, #21
 800a916:	42bd      	cmp	r5, r7
 800a918:	bf38      	it	cc
 800a91a:	2304      	movcc	r3, #4
 800a91c:	9301      	str	r3, [sp, #4]
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	9103      	str	r1, [sp, #12]
 800a922:	428b      	cmp	r3, r1
 800a924:	d80c      	bhi.n	800a940 <__multiply+0x98>
 800a926:	2e00      	cmp	r6, #0
 800a928:	dd03      	ble.n	800a932 <__multiply+0x8a>
 800a92a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d055      	beq.n	800a9de <__multiply+0x136>
 800a932:	6106      	str	r6, [r0, #16]
 800a934:	b005      	add	sp, #20
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	f843 2b04 	str.w	r2, [r3], #4
 800a93e:	e7d9      	b.n	800a8f4 <__multiply+0x4c>
 800a940:	f8b1 a000 	ldrh.w	sl, [r1]
 800a944:	f1ba 0f00 	cmp.w	sl, #0
 800a948:	d01f      	beq.n	800a98a <__multiply+0xe2>
 800a94a:	46c4      	mov	ip, r8
 800a94c:	46a1      	mov	r9, r4
 800a94e:	2700      	movs	r7, #0
 800a950:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a954:	f8d9 3000 	ldr.w	r3, [r9]
 800a958:	fa1f fb82 	uxth.w	fp, r2
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	fb0a 330b 	mla	r3, sl, fp, r3
 800a962:	443b      	add	r3, r7
 800a964:	f8d9 7000 	ldr.w	r7, [r9]
 800a968:	0c12      	lsrs	r2, r2, #16
 800a96a:	0c3f      	lsrs	r7, r7, #16
 800a96c:	fb0a 7202 	mla	r2, sl, r2, r7
 800a970:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a974:	b29b      	uxth	r3, r3
 800a976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a97a:	4565      	cmp	r5, ip
 800a97c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a980:	f849 3b04 	str.w	r3, [r9], #4
 800a984:	d8e4      	bhi.n	800a950 <__multiply+0xa8>
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	50e7      	str	r7, [r4, r3]
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	3104      	adds	r1, #4
 800a98e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a992:	f1b9 0f00 	cmp.w	r9, #0
 800a996:	d020      	beq.n	800a9da <__multiply+0x132>
 800a998:	4647      	mov	r7, r8
 800a99a:	46a4      	mov	ip, r4
 800a99c:	f04f 0a00 	mov.w	sl, #0
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	f8b7 b000 	ldrh.w	fp, [r7]
 800a9a6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a9b0:	4452      	add	r2, sl
 800a9b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a9ba:	f857 3b04 	ldr.w	r3, [r7], #4
 800a9be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9c2:	f8bc 3000 	ldrh.w	r3, [ip]
 800a9c6:	42bd      	cmp	r5, r7
 800a9c8:	fb09 330a 	mla	r3, r9, sl, r3
 800a9cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d4:	d8e5      	bhi.n	800a9a2 <__multiply+0xfa>
 800a9d6:	9a01      	ldr	r2, [sp, #4]
 800a9d8:	50a3      	str	r3, [r4, r2]
 800a9da:	3404      	adds	r4, #4
 800a9dc:	e79f      	b.n	800a91e <__multiply+0x76>
 800a9de:	3e01      	subs	r6, #1
 800a9e0:	e7a1      	b.n	800a926 <__multiply+0x7e>
 800a9e2:	bf00      	nop
 800a9e4:	0800c068 	.word	0x0800c068
 800a9e8:	0800c0f0 	.word	0x0800c0f0

0800a9ec <__pow5mult>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	4615      	mov	r5, r2
 800a9f2:	f012 0203 	ands.w	r2, r2, #3
 800a9f6:	4607      	mov	r7, r0
 800a9f8:	460e      	mov	r6, r1
 800a9fa:	d007      	beq.n	800aa0c <__pow5mult+0x20>
 800a9fc:	4c25      	ldr	r4, [pc, #148]	@ (800aa94 <__pow5mult+0xa8>)
 800a9fe:	3a01      	subs	r2, #1
 800aa00:	2300      	movs	r3, #0
 800aa02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa06:	f7ff fe5d 	bl	800a6c4 <__multadd>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	10ad      	asrs	r5, r5, #2
 800aa0e:	d03d      	beq.n	800aa8c <__pow5mult+0xa0>
 800aa10:	69fc      	ldr	r4, [r7, #28]
 800aa12:	b97c      	cbnz	r4, 800aa34 <__pow5mult+0x48>
 800aa14:	2010      	movs	r0, #16
 800aa16:	f000 fe99 	bl	800b74c <malloc>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	61f8      	str	r0, [r7, #28]
 800aa1e:	b928      	cbnz	r0, 800aa2c <__pow5mult+0x40>
 800aa20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa24:	4b1c      	ldr	r3, [pc, #112]	@ (800aa98 <__pow5mult+0xac>)
 800aa26:	481d      	ldr	r0, [pc, #116]	@ (800aa9c <__pow5mult+0xb0>)
 800aa28:	f000 fe5e 	bl	800b6e8 <__assert_func>
 800aa2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa30:	6004      	str	r4, [r0, #0]
 800aa32:	60c4      	str	r4, [r0, #12]
 800aa34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa3c:	b94c      	cbnz	r4, 800aa52 <__pow5mult+0x66>
 800aa3e:	f240 2171 	movw	r1, #625	@ 0x271
 800aa42:	4638      	mov	r0, r7
 800aa44:	f7ff ff1a 	bl	800a87c <__i2b>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	f04f 0900 	mov.w	r9, #0
 800aa56:	07eb      	lsls	r3, r5, #31
 800aa58:	d50a      	bpl.n	800aa70 <__pow5mult+0x84>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4622      	mov	r2, r4
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7ff ff22 	bl	800a8a8 <__multiply>
 800aa64:	4680      	mov	r8, r0
 800aa66:	4631      	mov	r1, r6
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff fe09 	bl	800a680 <_Bfree>
 800aa6e:	4646      	mov	r6, r8
 800aa70:	106d      	asrs	r5, r5, #1
 800aa72:	d00b      	beq.n	800aa8c <__pow5mult+0xa0>
 800aa74:	6820      	ldr	r0, [r4, #0]
 800aa76:	b938      	cbnz	r0, 800aa88 <__pow5mult+0x9c>
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff ff13 	bl	800a8a8 <__multiply>
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	f8c0 9000 	str.w	r9, [r0]
 800aa88:	4604      	mov	r4, r0
 800aa8a:	e7e4      	b.n	800aa56 <__pow5mult+0x6a>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	bf00      	nop
 800aa94:	0800c208 	.word	0x0800c208
 800aa98:	0800c0d9 	.word	0x0800c0d9
 800aa9c:	0800c0f0 	.word	0x0800c0f0

0800aaa0 <__lshift>:
 800aaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	4691      	mov	r9, r2
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	6849      	ldr	r1, [r1, #4]
 800aaae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aab2:	68a3      	ldr	r3, [r4, #8]
 800aab4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aab8:	f108 0601 	add.w	r6, r8, #1
 800aabc:	42b3      	cmp	r3, r6
 800aabe:	db0b      	blt.n	800aad8 <__lshift+0x38>
 800aac0:	4638      	mov	r0, r7
 800aac2:	f7ff fd9d 	bl	800a600 <_Balloc>
 800aac6:	4605      	mov	r5, r0
 800aac8:	b948      	cbnz	r0, 800aade <__lshift+0x3e>
 800aaca:	4602      	mov	r2, r0
 800aacc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aad0:	4b27      	ldr	r3, [pc, #156]	@ (800ab70 <__lshift+0xd0>)
 800aad2:	4828      	ldr	r0, [pc, #160]	@ (800ab74 <__lshift+0xd4>)
 800aad4:	f000 fe08 	bl	800b6e8 <__assert_func>
 800aad8:	3101      	adds	r1, #1
 800aada:	005b      	lsls	r3, r3, #1
 800aadc:	e7ee      	b.n	800aabc <__lshift+0x1c>
 800aade:	2300      	movs	r3, #0
 800aae0:	f100 0114 	add.w	r1, r0, #20
 800aae4:	f100 0210 	add.w	r2, r0, #16
 800aae8:	4618      	mov	r0, r3
 800aaea:	4553      	cmp	r3, sl
 800aaec:	db33      	blt.n	800ab56 <__lshift+0xb6>
 800aaee:	6920      	ldr	r0, [r4, #16]
 800aaf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaf4:	f104 0314 	add.w	r3, r4, #20
 800aaf8:	f019 091f 	ands.w	r9, r9, #31
 800aafc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab04:	d02b      	beq.n	800ab5e <__lshift+0xbe>
 800ab06:	468a      	mov	sl, r1
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab0e:	6818      	ldr	r0, [r3, #0]
 800ab10:	fa00 f009 	lsl.w	r0, r0, r9
 800ab14:	4310      	orrs	r0, r2
 800ab16:	f84a 0b04 	str.w	r0, [sl], #4
 800ab1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1e:	459c      	cmp	ip, r3
 800ab20:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab24:	d8f3      	bhi.n	800ab0e <__lshift+0x6e>
 800ab26:	ebac 0304 	sub.w	r3, ip, r4
 800ab2a:	3b15      	subs	r3, #21
 800ab2c:	f023 0303 	bic.w	r3, r3, #3
 800ab30:	3304      	adds	r3, #4
 800ab32:	f104 0015 	add.w	r0, r4, #21
 800ab36:	4560      	cmp	r0, ip
 800ab38:	bf88      	it	hi
 800ab3a:	2304      	movhi	r3, #4
 800ab3c:	50ca      	str	r2, [r1, r3]
 800ab3e:	b10a      	cbz	r2, 800ab44 <__lshift+0xa4>
 800ab40:	f108 0602 	add.w	r6, r8, #2
 800ab44:	3e01      	subs	r6, #1
 800ab46:	4638      	mov	r0, r7
 800ab48:	4621      	mov	r1, r4
 800ab4a:	612e      	str	r6, [r5, #16]
 800ab4c:	f7ff fd98 	bl	800a680 <_Bfree>
 800ab50:	4628      	mov	r0, r5
 800ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab56:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	e7c5      	b.n	800aaea <__lshift+0x4a>
 800ab5e:	3904      	subs	r1, #4
 800ab60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab64:	459c      	cmp	ip, r3
 800ab66:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab6a:	d8f9      	bhi.n	800ab60 <__lshift+0xc0>
 800ab6c:	e7ea      	b.n	800ab44 <__lshift+0xa4>
 800ab6e:	bf00      	nop
 800ab70:	0800c068 	.word	0x0800c068
 800ab74:	0800c0f0 	.word	0x0800c0f0

0800ab78 <__mcmp>:
 800ab78:	4603      	mov	r3, r0
 800ab7a:	690a      	ldr	r2, [r1, #16]
 800ab7c:	6900      	ldr	r0, [r0, #16]
 800ab7e:	b530      	push	{r4, r5, lr}
 800ab80:	1a80      	subs	r0, r0, r2
 800ab82:	d10e      	bne.n	800aba2 <__mcmp+0x2a>
 800ab84:	3314      	adds	r3, #20
 800ab86:	3114      	adds	r1, #20
 800ab88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab98:	4295      	cmp	r5, r2
 800ab9a:	d003      	beq.n	800aba4 <__mcmp+0x2c>
 800ab9c:	d205      	bcs.n	800abaa <__mcmp+0x32>
 800ab9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aba2:	bd30      	pop	{r4, r5, pc}
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	d3f3      	bcc.n	800ab90 <__mcmp+0x18>
 800aba8:	e7fb      	b.n	800aba2 <__mcmp+0x2a>
 800abaa:	2001      	movs	r0, #1
 800abac:	e7f9      	b.n	800aba2 <__mcmp+0x2a>
	...

0800abb0 <__mdiff>:
 800abb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	4689      	mov	r9, r1
 800abb6:	4606      	mov	r6, r0
 800abb8:	4611      	mov	r1, r2
 800abba:	4648      	mov	r0, r9
 800abbc:	4614      	mov	r4, r2
 800abbe:	f7ff ffdb 	bl	800ab78 <__mcmp>
 800abc2:	1e05      	subs	r5, r0, #0
 800abc4:	d112      	bne.n	800abec <__mdiff+0x3c>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff fd19 	bl	800a600 <_Balloc>
 800abce:	4602      	mov	r2, r0
 800abd0:	b928      	cbnz	r0, 800abde <__mdiff+0x2e>
 800abd2:	f240 2137 	movw	r1, #567	@ 0x237
 800abd6:	4b3e      	ldr	r3, [pc, #248]	@ (800acd0 <__mdiff+0x120>)
 800abd8:	483e      	ldr	r0, [pc, #248]	@ (800acd4 <__mdiff+0x124>)
 800abda:	f000 fd85 	bl	800b6e8 <__assert_func>
 800abde:	2301      	movs	r3, #1
 800abe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abe4:	4610      	mov	r0, r2
 800abe6:	b003      	add	sp, #12
 800abe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abec:	bfbc      	itt	lt
 800abee:	464b      	movlt	r3, r9
 800abf0:	46a1      	movlt	r9, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800abf8:	bfba      	itte	lt
 800abfa:	461c      	movlt	r4, r3
 800abfc:	2501      	movlt	r5, #1
 800abfe:	2500      	movge	r5, #0
 800ac00:	f7ff fcfe 	bl	800a600 <_Balloc>
 800ac04:	4602      	mov	r2, r0
 800ac06:	b918      	cbnz	r0, 800ac10 <__mdiff+0x60>
 800ac08:	f240 2145 	movw	r1, #581	@ 0x245
 800ac0c:	4b30      	ldr	r3, [pc, #192]	@ (800acd0 <__mdiff+0x120>)
 800ac0e:	e7e3      	b.n	800abd8 <__mdiff+0x28>
 800ac10:	f100 0b14 	add.w	fp, r0, #20
 800ac14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac18:	f109 0310 	add.w	r3, r9, #16
 800ac1c:	60c5      	str	r5, [r0, #12]
 800ac1e:	f04f 0c00 	mov.w	ip, #0
 800ac22:	f109 0514 	add.w	r5, r9, #20
 800ac26:	46d9      	mov	r9, fp
 800ac28:	6926      	ldr	r6, [r4, #16]
 800ac2a:	f104 0e14 	add.w	lr, r4, #20
 800ac2e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	9b01      	ldr	r3, [sp, #4]
 800ac3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac42:	b281      	uxth	r1, r0
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	fa1f f38a 	uxth.w	r3, sl
 800ac4a:	1a5b      	subs	r3, r3, r1
 800ac4c:	0c00      	lsrs	r0, r0, #16
 800ac4e:	4463      	add	r3, ip
 800ac50:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac54:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac5e:	4576      	cmp	r6, lr
 800ac60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac64:	f849 3b04 	str.w	r3, [r9], #4
 800ac68:	d8e6      	bhi.n	800ac38 <__mdiff+0x88>
 800ac6a:	1b33      	subs	r3, r6, r4
 800ac6c:	3b15      	subs	r3, #21
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	3415      	adds	r4, #21
 800ac74:	3304      	adds	r3, #4
 800ac76:	42a6      	cmp	r6, r4
 800ac78:	bf38      	it	cc
 800ac7a:	2304      	movcc	r3, #4
 800ac7c:	441d      	add	r5, r3
 800ac7e:	445b      	add	r3, fp
 800ac80:	461e      	mov	r6, r3
 800ac82:	462c      	mov	r4, r5
 800ac84:	4544      	cmp	r4, r8
 800ac86:	d30e      	bcc.n	800aca6 <__mdiff+0xf6>
 800ac88:	f108 0103 	add.w	r1, r8, #3
 800ac8c:	1b49      	subs	r1, r1, r5
 800ac8e:	f021 0103 	bic.w	r1, r1, #3
 800ac92:	3d03      	subs	r5, #3
 800ac94:	45a8      	cmp	r8, r5
 800ac96:	bf38      	it	cc
 800ac98:	2100      	movcc	r1, #0
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aca0:	b199      	cbz	r1, 800acca <__mdiff+0x11a>
 800aca2:	6117      	str	r7, [r2, #16]
 800aca4:	e79e      	b.n	800abe4 <__mdiff+0x34>
 800aca6:	46e6      	mov	lr, ip
 800aca8:	f854 1b04 	ldr.w	r1, [r4], #4
 800acac:	fa1f fc81 	uxth.w	ip, r1
 800acb0:	44f4      	add	ip, lr
 800acb2:	0c08      	lsrs	r0, r1, #16
 800acb4:	4471      	add	r1, lr
 800acb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acba:	b289      	uxth	r1, r1
 800acbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc4:	f846 1b04 	str.w	r1, [r6], #4
 800acc8:	e7dc      	b.n	800ac84 <__mdiff+0xd4>
 800acca:	3f01      	subs	r7, #1
 800accc:	e7e6      	b.n	800ac9c <__mdiff+0xec>
 800acce:	bf00      	nop
 800acd0:	0800c068 	.word	0x0800c068
 800acd4:	0800c0f0 	.word	0x0800c0f0

0800acd8 <__ulp>:
 800acd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad14 <__ulp+0x3c>)
 800acda:	400b      	ands	r3, r1
 800acdc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dc08      	bgt.n	800acf6 <__ulp+0x1e>
 800ace4:	425b      	negs	r3, r3
 800ace6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800acea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acee:	da04      	bge.n	800acfa <__ulp+0x22>
 800acf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800acf4:	4113      	asrs	r3, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	e008      	b.n	800ad0c <__ulp+0x34>
 800acfa:	f1a2 0314 	sub.w	r3, r2, #20
 800acfe:	2b1e      	cmp	r3, #30
 800ad00:	bfd6      	itet	le
 800ad02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ad06:	2201      	movgt	r2, #1
 800ad08:	40da      	lsrle	r2, r3
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	7ff00000 	.word	0x7ff00000

0800ad18 <__b2d>:
 800ad18:	6902      	ldr	r2, [r0, #16]
 800ad1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1c:	f100 0614 	add.w	r6, r0, #20
 800ad20:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ad24:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800ad28:	4f1e      	ldr	r7, [pc, #120]	@ (800ada4 <__b2d+0x8c>)
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7ff fd5a 	bl	800a7e4 <__hi0bits>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f1c0 0020 	rsb	r0, r0, #32
 800ad36:	2b0a      	cmp	r3, #10
 800ad38:	f1a2 0504 	sub.w	r5, r2, #4
 800ad3c:	6008      	str	r0, [r1, #0]
 800ad3e:	dc12      	bgt.n	800ad66 <__b2d+0x4e>
 800ad40:	42ae      	cmp	r6, r5
 800ad42:	bf2c      	ite	cs
 800ad44:	2200      	movcs	r2, #0
 800ad46:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ad4a:	f1c3 0c0b 	rsb	ip, r3, #11
 800ad4e:	3315      	adds	r3, #21
 800ad50:	fa24 fe0c 	lsr.w	lr, r4, ip
 800ad54:	fa04 f303 	lsl.w	r3, r4, r3
 800ad58:	fa22 f20c 	lsr.w	r2, r2, ip
 800ad5c:	ea4e 0107 	orr.w	r1, lr, r7
 800ad60:	431a      	orrs	r2, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad66:	42ae      	cmp	r6, r5
 800ad68:	bf36      	itet	cc
 800ad6a:	f1a2 0508 	subcc.w	r5, r2, #8
 800ad6e:	2200      	movcs	r2, #0
 800ad70:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800ad74:	3b0b      	subs	r3, #11
 800ad76:	d012      	beq.n	800ad9e <__b2d+0x86>
 800ad78:	f1c3 0720 	rsb	r7, r3, #32
 800ad7c:	fa22 f107 	lsr.w	r1, r2, r7
 800ad80:	409c      	lsls	r4, r3
 800ad82:	430c      	orrs	r4, r1
 800ad84:	42b5      	cmp	r5, r6
 800ad86:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800ad8a:	bf94      	ite	ls
 800ad8c:	2400      	movls	r4, #0
 800ad8e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800ad92:	409a      	lsls	r2, r3
 800ad94:	40fc      	lsrs	r4, r7
 800ad96:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ad9a:	4322      	orrs	r2, r4
 800ad9c:	e7e1      	b.n	800ad62 <__b2d+0x4a>
 800ad9e:	ea44 0107 	orr.w	r1, r4, r7
 800ada2:	e7de      	b.n	800ad62 <__b2d+0x4a>
 800ada4:	3ff00000 	.word	0x3ff00000

0800ada8 <__d2b>:
 800ada8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800adac:	2101      	movs	r1, #1
 800adae:	4690      	mov	r8, r2
 800adb0:	4699      	mov	r9, r3
 800adb2:	9e08      	ldr	r6, [sp, #32]
 800adb4:	f7ff fc24 	bl	800a600 <_Balloc>
 800adb8:	4604      	mov	r4, r0
 800adba:	b930      	cbnz	r0, 800adca <__d2b+0x22>
 800adbc:	4602      	mov	r2, r0
 800adbe:	f240 310f 	movw	r1, #783	@ 0x30f
 800adc2:	4b23      	ldr	r3, [pc, #140]	@ (800ae50 <__d2b+0xa8>)
 800adc4:	4823      	ldr	r0, [pc, #140]	@ (800ae54 <__d2b+0xac>)
 800adc6:	f000 fc8f 	bl	800b6e8 <__assert_func>
 800adca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800add2:	b10d      	cbz	r5, 800add8 <__d2b+0x30>
 800add4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	f1b8 0300 	subs.w	r3, r8, #0
 800adde:	d024      	beq.n	800ae2a <__d2b+0x82>
 800ade0:	4668      	mov	r0, sp
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	f7ff fd1d 	bl	800a822 <__lo0bits>
 800ade8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adec:	b1d8      	cbz	r0, 800ae26 <__d2b+0x7e>
 800adee:	f1c0 0320 	rsb	r3, r0, #32
 800adf2:	fa02 f303 	lsl.w	r3, r2, r3
 800adf6:	430b      	orrs	r3, r1
 800adf8:	40c2      	lsrs	r2, r0
 800adfa:	6163      	str	r3, [r4, #20]
 800adfc:	9201      	str	r2, [sp, #4]
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bf0c      	ite	eq
 800ae04:	2201      	moveq	r2, #1
 800ae06:	2202      	movne	r2, #2
 800ae08:	61a3      	str	r3, [r4, #24]
 800ae0a:	6122      	str	r2, [r4, #16]
 800ae0c:	b1ad      	cbz	r5, 800ae3a <__d2b+0x92>
 800ae0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae12:	4405      	add	r5, r0
 800ae14:	6035      	str	r5, [r6, #0]
 800ae16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	6018      	str	r0, [r3, #0]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	b002      	add	sp, #8
 800ae22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ae26:	6161      	str	r1, [r4, #20]
 800ae28:	e7e9      	b.n	800adfe <__d2b+0x56>
 800ae2a:	a801      	add	r0, sp, #4
 800ae2c:	f7ff fcf9 	bl	800a822 <__lo0bits>
 800ae30:	9b01      	ldr	r3, [sp, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	6163      	str	r3, [r4, #20]
 800ae36:	3020      	adds	r0, #32
 800ae38:	e7e7      	b.n	800ae0a <__d2b+0x62>
 800ae3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae42:	6030      	str	r0, [r6, #0]
 800ae44:	6918      	ldr	r0, [r3, #16]
 800ae46:	f7ff fccd 	bl	800a7e4 <__hi0bits>
 800ae4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae4e:	e7e4      	b.n	800ae1a <__d2b+0x72>
 800ae50:	0800c068 	.word	0x0800c068
 800ae54:	0800c0f0 	.word	0x0800c0f0

0800ae58 <__ratio>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	b085      	sub	sp, #20
 800ae5e:	e9cd 1000 	strd	r1, r0, [sp]
 800ae62:	a902      	add	r1, sp, #8
 800ae64:	f7ff ff58 	bl	800ad18 <__b2d>
 800ae68:	468b      	mov	fp, r1
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	9800      	ldr	r0, [sp, #0]
 800ae70:	a903      	add	r1, sp, #12
 800ae72:	f7ff ff51 	bl	800ad18 <__b2d>
 800ae76:	460d      	mov	r5, r1
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	4689      	mov	r9, r1
 800ae7c:	6919      	ldr	r1, [r3, #16]
 800ae7e:	9b00      	ldr	r3, [sp, #0]
 800ae80:	4604      	mov	r4, r0
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	4630      	mov	r0, r6
 800ae86:	1ac9      	subs	r1, r1, r3
 800ae88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfcd      	iteet	gt
 800ae96:	463a      	movgt	r2, r7
 800ae98:	462a      	movle	r2, r5
 800ae9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aea2:	bfd8      	it	le
 800aea4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aea8:	464b      	mov	r3, r9
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4659      	mov	r1, fp
 800aeae:	f7f5 fc3d 	bl	800072c <__aeabi_ddiv>
 800aeb2:	b005      	add	sp, #20
 800aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aeb8 <__copybits>:
 800aeb8:	3901      	subs	r1, #1
 800aeba:	b570      	push	{r4, r5, r6, lr}
 800aebc:	1149      	asrs	r1, r1, #5
 800aebe:	6914      	ldr	r4, [r2, #16]
 800aec0:	3101      	adds	r1, #1
 800aec2:	f102 0314 	add.w	r3, r2, #20
 800aec6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aeca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aece:	1f05      	subs	r5, r0, #4
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d30c      	bcc.n	800aeee <__copybits+0x36>
 800aed4:	1aa3      	subs	r3, r4, r2
 800aed6:	3b11      	subs	r3, #17
 800aed8:	f023 0303 	bic.w	r3, r3, #3
 800aedc:	3211      	adds	r2, #17
 800aede:	42a2      	cmp	r2, r4
 800aee0:	bf88      	it	hi
 800aee2:	2300      	movhi	r3, #0
 800aee4:	4418      	add	r0, r3
 800aee6:	2300      	movs	r3, #0
 800aee8:	4288      	cmp	r0, r1
 800aeea:	d305      	bcc.n	800aef8 <__copybits+0x40>
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	f853 6b04 	ldr.w	r6, [r3], #4
 800aef2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aef6:	e7eb      	b.n	800aed0 <__copybits+0x18>
 800aef8:	f840 3b04 	str.w	r3, [r0], #4
 800aefc:	e7f4      	b.n	800aee8 <__copybits+0x30>

0800aefe <__any_on>:
 800aefe:	f100 0214 	add.w	r2, r0, #20
 800af02:	6900      	ldr	r0, [r0, #16]
 800af04:	114b      	asrs	r3, r1, #5
 800af06:	4298      	cmp	r0, r3
 800af08:	b510      	push	{r4, lr}
 800af0a:	db11      	blt.n	800af30 <__any_on+0x32>
 800af0c:	dd0a      	ble.n	800af24 <__any_on+0x26>
 800af0e:	f011 011f 	ands.w	r1, r1, #31
 800af12:	d007      	beq.n	800af24 <__any_on+0x26>
 800af14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af18:	fa24 f001 	lsr.w	r0, r4, r1
 800af1c:	fa00 f101 	lsl.w	r1, r0, r1
 800af20:	428c      	cmp	r4, r1
 800af22:	d10b      	bne.n	800af3c <__any_on+0x3e>
 800af24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af28:	4293      	cmp	r3, r2
 800af2a:	d803      	bhi.n	800af34 <__any_on+0x36>
 800af2c:	2000      	movs	r0, #0
 800af2e:	bd10      	pop	{r4, pc}
 800af30:	4603      	mov	r3, r0
 800af32:	e7f7      	b.n	800af24 <__any_on+0x26>
 800af34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af38:	2900      	cmp	r1, #0
 800af3a:	d0f5      	beq.n	800af28 <__any_on+0x2a>
 800af3c:	2001      	movs	r0, #1
 800af3e:	e7f6      	b.n	800af2e <__any_on+0x30>

0800af40 <__ascii_wctomb>:
 800af40:	4603      	mov	r3, r0
 800af42:	4608      	mov	r0, r1
 800af44:	b141      	cbz	r1, 800af58 <__ascii_wctomb+0x18>
 800af46:	2aff      	cmp	r2, #255	@ 0xff
 800af48:	d904      	bls.n	800af54 <__ascii_wctomb+0x14>
 800af4a:	228a      	movs	r2, #138	@ 0x8a
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	4770      	bx	lr
 800af54:	2001      	movs	r0, #1
 800af56:	700a      	strb	r2, [r1, #0]
 800af58:	4770      	bx	lr

0800af5a <__ssputs_r>:
 800af5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af5e:	461f      	mov	r7, r3
 800af60:	688e      	ldr	r6, [r1, #8]
 800af62:	4682      	mov	sl, r0
 800af64:	42be      	cmp	r6, r7
 800af66:	460c      	mov	r4, r1
 800af68:	4690      	mov	r8, r2
 800af6a:	680b      	ldr	r3, [r1, #0]
 800af6c:	d82d      	bhi.n	800afca <__ssputs_r+0x70>
 800af6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af72:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af76:	d026      	beq.n	800afc6 <__ssputs_r+0x6c>
 800af78:	6965      	ldr	r5, [r4, #20]
 800af7a:	6909      	ldr	r1, [r1, #16]
 800af7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af80:	eba3 0901 	sub.w	r9, r3, r1
 800af84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af88:	1c7b      	adds	r3, r7, #1
 800af8a:	444b      	add	r3, r9
 800af8c:	106d      	asrs	r5, r5, #1
 800af8e:	429d      	cmp	r5, r3
 800af90:	bf38      	it	cc
 800af92:	461d      	movcc	r5, r3
 800af94:	0553      	lsls	r3, r2, #21
 800af96:	d527      	bpl.n	800afe8 <__ssputs_r+0x8e>
 800af98:	4629      	mov	r1, r5
 800af9a:	f7ff fa93 	bl	800a4c4 <_malloc_r>
 800af9e:	4606      	mov	r6, r0
 800afa0:	b360      	cbz	r0, 800affc <__ssputs_r+0xa2>
 800afa2:	464a      	mov	r2, r9
 800afa4:	6921      	ldr	r1, [r4, #16]
 800afa6:	f7fe fed4 	bl	8009d52 <memcpy>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800afb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	6126      	str	r6, [r4, #16]
 800afb8:	444e      	add	r6, r9
 800afba:	6026      	str	r6, [r4, #0]
 800afbc:	463e      	mov	r6, r7
 800afbe:	6165      	str	r5, [r4, #20]
 800afc0:	eba5 0509 	sub.w	r5, r5, r9
 800afc4:	60a5      	str	r5, [r4, #8]
 800afc6:	42be      	cmp	r6, r7
 800afc8:	d900      	bls.n	800afcc <__ssputs_r+0x72>
 800afca:	463e      	mov	r6, r7
 800afcc:	4632      	mov	r2, r6
 800afce:	4641      	mov	r1, r8
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	f000 fb51 	bl	800b678 <memmove>
 800afd6:	2000      	movs	r0, #0
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	1b9b      	subs	r3, r3, r6
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	6823      	ldr	r3, [r4, #0]
 800afe0:	4433      	add	r3, r6
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe8:	462a      	mov	r2, r5
 800afea:	f000 fbb7 	bl	800b75c <_realloc_r>
 800afee:	4606      	mov	r6, r0
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d1e0      	bne.n	800afb6 <__ssputs_r+0x5c>
 800aff4:	4650      	mov	r0, sl
 800aff6:	6921      	ldr	r1, [r4, #16]
 800aff8:	f7fe fec0 	bl	8009d7c <_free_r>
 800affc:	230c      	movs	r3, #12
 800affe:	f8ca 3000 	str.w	r3, [sl]
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	e7e9      	b.n	800afe4 <__ssputs_r+0x8a>

0800b010 <_svfiprintf_r>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	4698      	mov	r8, r3
 800b016:	898b      	ldrh	r3, [r1, #12]
 800b018:	4607      	mov	r7, r0
 800b01a:	061b      	lsls	r3, r3, #24
 800b01c:	460d      	mov	r5, r1
 800b01e:	4614      	mov	r4, r2
 800b020:	b09d      	sub	sp, #116	@ 0x74
 800b022:	d510      	bpl.n	800b046 <_svfiprintf_r+0x36>
 800b024:	690b      	ldr	r3, [r1, #16]
 800b026:	b973      	cbnz	r3, 800b046 <_svfiprintf_r+0x36>
 800b028:	2140      	movs	r1, #64	@ 0x40
 800b02a:	f7ff fa4b 	bl	800a4c4 <_malloc_r>
 800b02e:	6028      	str	r0, [r5, #0]
 800b030:	6128      	str	r0, [r5, #16]
 800b032:	b930      	cbnz	r0, 800b042 <_svfiprintf_r+0x32>
 800b034:	230c      	movs	r3, #12
 800b036:	603b      	str	r3, [r7, #0]
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	b01d      	add	sp, #116	@ 0x74
 800b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b042:	2340      	movs	r3, #64	@ 0x40
 800b044:	616b      	str	r3, [r5, #20]
 800b046:	2300      	movs	r3, #0
 800b048:	9309      	str	r3, [sp, #36]	@ 0x24
 800b04a:	2320      	movs	r3, #32
 800b04c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b050:	2330      	movs	r3, #48	@ 0x30
 800b052:	f04f 0901 	mov.w	r9, #1
 800b056:	f8cd 800c 	str.w	r8, [sp, #12]
 800b05a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b1f4 <_svfiprintf_r+0x1e4>
 800b05e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b062:	4623      	mov	r3, r4
 800b064:	469a      	mov	sl, r3
 800b066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b06a:	b10a      	cbz	r2, 800b070 <_svfiprintf_r+0x60>
 800b06c:	2a25      	cmp	r2, #37	@ 0x25
 800b06e:	d1f9      	bne.n	800b064 <_svfiprintf_r+0x54>
 800b070:	ebba 0b04 	subs.w	fp, sl, r4
 800b074:	d00b      	beq.n	800b08e <_svfiprintf_r+0x7e>
 800b076:	465b      	mov	r3, fp
 800b078:	4622      	mov	r2, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	4638      	mov	r0, r7
 800b07e:	f7ff ff6c 	bl	800af5a <__ssputs_r>
 800b082:	3001      	adds	r0, #1
 800b084:	f000 80a7 	beq.w	800b1d6 <_svfiprintf_r+0x1c6>
 800b088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b08a:	445a      	add	r2, fp
 800b08c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b08e:	f89a 3000 	ldrb.w	r3, [sl]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 809f 	beq.w	800b1d6 <_svfiprintf_r+0x1c6>
 800b098:	2300      	movs	r3, #0
 800b09a:	f04f 32ff 	mov.w	r2, #4294967295
 800b09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0a2:	f10a 0a01 	add.w	sl, sl, #1
 800b0a6:	9304      	str	r3, [sp, #16]
 800b0a8:	9307      	str	r3, [sp, #28]
 800b0aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0b0:	4654      	mov	r4, sl
 800b0b2:	2205      	movs	r2, #5
 800b0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b8:	484e      	ldr	r0, [pc, #312]	@ (800b1f4 <_svfiprintf_r+0x1e4>)
 800b0ba:	f000 fb07 	bl	800b6cc <memchr>
 800b0be:	9a04      	ldr	r2, [sp, #16]
 800b0c0:	b9d8      	cbnz	r0, 800b0fa <_svfiprintf_r+0xea>
 800b0c2:	06d0      	lsls	r0, r2, #27
 800b0c4:	bf44      	itt	mi
 800b0c6:	2320      	movmi	r3, #32
 800b0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0cc:	0711      	lsls	r1, r2, #28
 800b0ce:	bf44      	itt	mi
 800b0d0:	232b      	movmi	r3, #43	@ 0x2b
 800b0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0dc:	d015      	beq.n	800b10a <_svfiprintf_r+0xfa>
 800b0de:	4654      	mov	r4, sl
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	f04f 0c0a 	mov.w	ip, #10
 800b0e6:	9a07      	ldr	r2, [sp, #28]
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ee:	3b30      	subs	r3, #48	@ 0x30
 800b0f0:	2b09      	cmp	r3, #9
 800b0f2:	d94b      	bls.n	800b18c <_svfiprintf_r+0x17c>
 800b0f4:	b1b0      	cbz	r0, 800b124 <_svfiprintf_r+0x114>
 800b0f6:	9207      	str	r2, [sp, #28]
 800b0f8:	e014      	b.n	800b124 <_svfiprintf_r+0x114>
 800b0fa:	eba0 0308 	sub.w	r3, r0, r8
 800b0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b102:	4313      	orrs	r3, r2
 800b104:	46a2      	mov	sl, r4
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	e7d2      	b.n	800b0b0 <_svfiprintf_r+0xa0>
 800b10a:	9b03      	ldr	r3, [sp, #12]
 800b10c:	1d19      	adds	r1, r3, #4
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	9103      	str	r1, [sp, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfbb      	ittet	lt
 800b116:	425b      	neglt	r3, r3
 800b118:	f042 0202 	orrlt.w	r2, r2, #2
 800b11c:	9307      	strge	r3, [sp, #28]
 800b11e:	9307      	strlt	r3, [sp, #28]
 800b120:	bfb8      	it	lt
 800b122:	9204      	strlt	r2, [sp, #16]
 800b124:	7823      	ldrb	r3, [r4, #0]
 800b126:	2b2e      	cmp	r3, #46	@ 0x2e
 800b128:	d10a      	bne.n	800b140 <_svfiprintf_r+0x130>
 800b12a:	7863      	ldrb	r3, [r4, #1]
 800b12c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b12e:	d132      	bne.n	800b196 <_svfiprintf_r+0x186>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	3402      	adds	r4, #2
 800b134:	1d1a      	adds	r2, r3, #4
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	9203      	str	r2, [sp, #12]
 800b13a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b13e:	9305      	str	r3, [sp, #20]
 800b140:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b1f8 <_svfiprintf_r+0x1e8>
 800b144:	2203      	movs	r2, #3
 800b146:	4650      	mov	r0, sl
 800b148:	7821      	ldrb	r1, [r4, #0]
 800b14a:	f000 fabf 	bl	800b6cc <memchr>
 800b14e:	b138      	cbz	r0, 800b160 <_svfiprintf_r+0x150>
 800b150:	2240      	movs	r2, #64	@ 0x40
 800b152:	9b04      	ldr	r3, [sp, #16]
 800b154:	eba0 000a 	sub.w	r0, r0, sl
 800b158:	4082      	lsls	r2, r0
 800b15a:	4313      	orrs	r3, r2
 800b15c:	3401      	adds	r4, #1
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b164:	2206      	movs	r2, #6
 800b166:	4825      	ldr	r0, [pc, #148]	@ (800b1fc <_svfiprintf_r+0x1ec>)
 800b168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b16c:	f000 faae 	bl	800b6cc <memchr>
 800b170:	2800      	cmp	r0, #0
 800b172:	d036      	beq.n	800b1e2 <_svfiprintf_r+0x1d2>
 800b174:	4b22      	ldr	r3, [pc, #136]	@ (800b200 <_svfiprintf_r+0x1f0>)
 800b176:	bb1b      	cbnz	r3, 800b1c0 <_svfiprintf_r+0x1b0>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	3307      	adds	r3, #7
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	3308      	adds	r3, #8
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b186:	4433      	add	r3, r6
 800b188:	9309      	str	r3, [sp, #36]	@ 0x24
 800b18a:	e76a      	b.n	800b062 <_svfiprintf_r+0x52>
 800b18c:	460c      	mov	r4, r1
 800b18e:	2001      	movs	r0, #1
 800b190:	fb0c 3202 	mla	r2, ip, r2, r3
 800b194:	e7a8      	b.n	800b0e8 <_svfiprintf_r+0xd8>
 800b196:	2300      	movs	r3, #0
 800b198:	f04f 0c0a 	mov.w	ip, #10
 800b19c:	4619      	mov	r1, r3
 800b19e:	3401      	adds	r4, #1
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a8:	3a30      	subs	r2, #48	@ 0x30
 800b1aa:	2a09      	cmp	r2, #9
 800b1ac:	d903      	bls.n	800b1b6 <_svfiprintf_r+0x1a6>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0c6      	beq.n	800b140 <_svfiprintf_r+0x130>
 800b1b2:	9105      	str	r1, [sp, #20]
 800b1b4:	e7c4      	b.n	800b140 <_svfiprintf_r+0x130>
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1be:	e7f0      	b.n	800b1a2 <_svfiprintf_r+0x192>
 800b1c0:	ab03      	add	r3, sp, #12
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	4638      	mov	r0, r7
 800b1c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b204 <_svfiprintf_r+0x1f4>)
 800b1ca:	a904      	add	r1, sp, #16
 800b1cc:	f3af 8000 	nop.w
 800b1d0:	1c42      	adds	r2, r0, #1
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	d1d6      	bne.n	800b184 <_svfiprintf_r+0x174>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	065b      	lsls	r3, r3, #25
 800b1da:	f53f af2d 	bmi.w	800b038 <_svfiprintf_r+0x28>
 800b1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1e0:	e72c      	b.n	800b03c <_svfiprintf_r+0x2c>
 800b1e2:	ab03      	add	r3, sp, #12
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	462a      	mov	r2, r5
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	4b06      	ldr	r3, [pc, #24]	@ (800b204 <_svfiprintf_r+0x1f4>)
 800b1ec:	a904      	add	r1, sp, #16
 800b1ee:	f000 f87d 	bl	800b2ec <_printf_i>
 800b1f2:	e7ed      	b.n	800b1d0 <_svfiprintf_r+0x1c0>
 800b1f4:	0800c149 	.word	0x0800c149
 800b1f8:	0800c14f 	.word	0x0800c14f
 800b1fc:	0800c153 	.word	0x0800c153
 800b200:	00000000 	.word	0x00000000
 800b204:	0800af5b 	.word	0x0800af5b

0800b208 <_printf_common>:
 800b208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b20c:	4616      	mov	r6, r2
 800b20e:	4698      	mov	r8, r3
 800b210:	688a      	ldr	r2, [r1, #8]
 800b212:	690b      	ldr	r3, [r1, #16]
 800b214:	4607      	mov	r7, r0
 800b216:	4293      	cmp	r3, r2
 800b218:	bfb8      	it	lt
 800b21a:	4613      	movlt	r3, r2
 800b21c:	6033      	str	r3, [r6, #0]
 800b21e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b222:	460c      	mov	r4, r1
 800b224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b228:	b10a      	cbz	r2, 800b22e <_printf_common+0x26>
 800b22a:	3301      	adds	r3, #1
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	0699      	lsls	r1, r3, #26
 800b232:	bf42      	ittt	mi
 800b234:	6833      	ldrmi	r3, [r6, #0]
 800b236:	3302      	addmi	r3, #2
 800b238:	6033      	strmi	r3, [r6, #0]
 800b23a:	6825      	ldr	r5, [r4, #0]
 800b23c:	f015 0506 	ands.w	r5, r5, #6
 800b240:	d106      	bne.n	800b250 <_printf_common+0x48>
 800b242:	f104 0a19 	add.w	sl, r4, #25
 800b246:	68e3      	ldr	r3, [r4, #12]
 800b248:	6832      	ldr	r2, [r6, #0]
 800b24a:	1a9b      	subs	r3, r3, r2
 800b24c:	42ab      	cmp	r3, r5
 800b24e:	dc2b      	bgt.n	800b2a8 <_printf_common+0xa0>
 800b250:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b254:	6822      	ldr	r2, [r4, #0]
 800b256:	3b00      	subs	r3, #0
 800b258:	bf18      	it	ne
 800b25a:	2301      	movne	r3, #1
 800b25c:	0692      	lsls	r2, r2, #26
 800b25e:	d430      	bmi.n	800b2c2 <_printf_common+0xba>
 800b260:	4641      	mov	r1, r8
 800b262:	4638      	mov	r0, r7
 800b264:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b268:	47c8      	blx	r9
 800b26a:	3001      	adds	r0, #1
 800b26c:	d023      	beq.n	800b2b6 <_printf_common+0xae>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	f003 0306 	and.w	r3, r3, #6
 800b276:	2b04      	cmp	r3, #4
 800b278:	bf14      	ite	ne
 800b27a:	2500      	movne	r5, #0
 800b27c:	6833      	ldreq	r3, [r6, #0]
 800b27e:	f04f 0600 	mov.w	r6, #0
 800b282:	bf08      	it	eq
 800b284:	68e5      	ldreq	r5, [r4, #12]
 800b286:	f104 041a 	add.w	r4, r4, #26
 800b28a:	bf08      	it	eq
 800b28c:	1aed      	subeq	r5, r5, r3
 800b28e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b292:	bf08      	it	eq
 800b294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b298:	4293      	cmp	r3, r2
 800b29a:	bfc4      	itt	gt
 800b29c:	1a9b      	subgt	r3, r3, r2
 800b29e:	18ed      	addgt	r5, r5, r3
 800b2a0:	42b5      	cmp	r5, r6
 800b2a2:	d11a      	bne.n	800b2da <_printf_common+0xd2>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e008      	b.n	800b2ba <_printf_common+0xb2>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	47c8      	blx	r9
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	d103      	bne.n	800b2be <_printf_common+0xb6>
 800b2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2be:	3501      	adds	r5, #1
 800b2c0:	e7c1      	b.n	800b246 <_printf_common+0x3e>
 800b2c2:	2030      	movs	r0, #48	@ 0x30
 800b2c4:	18e1      	adds	r1, r4, r3
 800b2c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2d0:	4422      	add	r2, r4
 800b2d2:	3302      	adds	r3, #2
 800b2d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2d8:	e7c2      	b.n	800b260 <_printf_common+0x58>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4641      	mov	r1, r8
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	47c8      	blx	r9
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d0e6      	beq.n	800b2b6 <_printf_common+0xae>
 800b2e8:	3601      	adds	r6, #1
 800b2ea:	e7d9      	b.n	800b2a0 <_printf_common+0x98>

0800b2ec <_printf_i>:
 800b2ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	7e0f      	ldrb	r7, [r1, #24]
 800b2f2:	4691      	mov	r9, r2
 800b2f4:	2f78      	cmp	r7, #120	@ 0x78
 800b2f6:	4680      	mov	r8, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	469a      	mov	sl, r3
 800b2fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b302:	d807      	bhi.n	800b314 <_printf_i+0x28>
 800b304:	2f62      	cmp	r7, #98	@ 0x62
 800b306:	d80a      	bhi.n	800b31e <_printf_i+0x32>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	f000 80d1 	beq.w	800b4b0 <_printf_i+0x1c4>
 800b30e:	2f58      	cmp	r7, #88	@ 0x58
 800b310:	f000 80b8 	beq.w	800b484 <_printf_i+0x198>
 800b314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b318:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b31c:	e03a      	b.n	800b394 <_printf_i+0xa8>
 800b31e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b322:	2b15      	cmp	r3, #21
 800b324:	d8f6      	bhi.n	800b314 <_printf_i+0x28>
 800b326:	a101      	add	r1, pc, #4	@ (adr r1, 800b32c <_printf_i+0x40>)
 800b328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b399 	.word	0x0800b399
 800b334:	0800b315 	.word	0x0800b315
 800b338:	0800b315 	.word	0x0800b315
 800b33c:	0800b315 	.word	0x0800b315
 800b340:	0800b315 	.word	0x0800b315
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b315 	.word	0x0800b315
 800b34c:	0800b315 	.word	0x0800b315
 800b350:	0800b315 	.word	0x0800b315
 800b354:	0800b315 	.word	0x0800b315
 800b358:	0800b497 	.word	0x0800b497
 800b35c:	0800b3c3 	.word	0x0800b3c3
 800b360:	0800b451 	.word	0x0800b451
 800b364:	0800b315 	.word	0x0800b315
 800b368:	0800b315 	.word	0x0800b315
 800b36c:	0800b4b9 	.word	0x0800b4b9
 800b370:	0800b315 	.word	0x0800b315
 800b374:	0800b3c3 	.word	0x0800b3c3
 800b378:	0800b315 	.word	0x0800b315
 800b37c:	0800b315 	.word	0x0800b315
 800b380:	0800b459 	.word	0x0800b459
 800b384:	6833      	ldr	r3, [r6, #0]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6032      	str	r2, [r6, #0]
 800b38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b390:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b394:	2301      	movs	r3, #1
 800b396:	e09c      	b.n	800b4d2 <_printf_i+0x1e6>
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	6820      	ldr	r0, [r4, #0]
 800b39c:	1d19      	adds	r1, r3, #4
 800b39e:	6031      	str	r1, [r6, #0]
 800b3a0:	0606      	lsls	r6, r0, #24
 800b3a2:	d501      	bpl.n	800b3a8 <_printf_i+0xbc>
 800b3a4:	681d      	ldr	r5, [r3, #0]
 800b3a6:	e003      	b.n	800b3b0 <_printf_i+0xc4>
 800b3a8:	0645      	lsls	r5, r0, #25
 800b3aa:	d5fb      	bpl.n	800b3a4 <_printf_i+0xb8>
 800b3ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3b0:	2d00      	cmp	r5, #0
 800b3b2:	da03      	bge.n	800b3bc <_printf_i+0xd0>
 800b3b4:	232d      	movs	r3, #45	@ 0x2d
 800b3b6:	426d      	negs	r5, r5
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3bc:	230a      	movs	r3, #10
 800b3be:	4858      	ldr	r0, [pc, #352]	@ (800b520 <_printf_i+0x234>)
 800b3c0:	e011      	b.n	800b3e6 <_printf_i+0xfa>
 800b3c2:	6821      	ldr	r1, [r4, #0]
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	0608      	lsls	r0, r1, #24
 800b3c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3cc:	d402      	bmi.n	800b3d4 <_printf_i+0xe8>
 800b3ce:	0649      	lsls	r1, r1, #25
 800b3d0:	bf48      	it	mi
 800b3d2:	b2ad      	uxthmi	r5, r5
 800b3d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3d6:	6033      	str	r3, [r6, #0]
 800b3d8:	bf14      	ite	ne
 800b3da:	230a      	movne	r3, #10
 800b3dc:	2308      	moveq	r3, #8
 800b3de:	4850      	ldr	r0, [pc, #320]	@ (800b520 <_printf_i+0x234>)
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3e6:	6866      	ldr	r6, [r4, #4]
 800b3e8:	2e00      	cmp	r6, #0
 800b3ea:	60a6      	str	r6, [r4, #8]
 800b3ec:	db05      	blt.n	800b3fa <_printf_i+0x10e>
 800b3ee:	6821      	ldr	r1, [r4, #0]
 800b3f0:	432e      	orrs	r6, r5
 800b3f2:	f021 0104 	bic.w	r1, r1, #4
 800b3f6:	6021      	str	r1, [r4, #0]
 800b3f8:	d04b      	beq.n	800b492 <_printf_i+0x1a6>
 800b3fa:	4616      	mov	r6, r2
 800b3fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b400:	fb03 5711 	mls	r7, r3, r1, r5
 800b404:	5dc7      	ldrb	r7, [r0, r7]
 800b406:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b40a:	462f      	mov	r7, r5
 800b40c:	42bb      	cmp	r3, r7
 800b40e:	460d      	mov	r5, r1
 800b410:	d9f4      	bls.n	800b3fc <_printf_i+0x110>
 800b412:	2b08      	cmp	r3, #8
 800b414:	d10b      	bne.n	800b42e <_printf_i+0x142>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	07df      	lsls	r7, r3, #31
 800b41a:	d508      	bpl.n	800b42e <_printf_i+0x142>
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	6861      	ldr	r1, [r4, #4]
 800b420:	4299      	cmp	r1, r3
 800b422:	bfde      	ittt	le
 800b424:	2330      	movle	r3, #48	@ 0x30
 800b426:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b42a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b42e:	1b92      	subs	r2, r2, r6
 800b430:	6122      	str	r2, [r4, #16]
 800b432:	464b      	mov	r3, r9
 800b434:	4621      	mov	r1, r4
 800b436:	4640      	mov	r0, r8
 800b438:	f8cd a000 	str.w	sl, [sp]
 800b43c:	aa03      	add	r2, sp, #12
 800b43e:	f7ff fee3 	bl	800b208 <_printf_common>
 800b442:	3001      	adds	r0, #1
 800b444:	d14a      	bne.n	800b4dc <_printf_i+0x1f0>
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	b004      	add	sp, #16
 800b44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	f043 0320 	orr.w	r3, r3, #32
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	2778      	movs	r7, #120	@ 0x78
 800b45a:	4832      	ldr	r0, [pc, #200]	@ (800b524 <_printf_i+0x238>)
 800b45c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	6831      	ldr	r1, [r6, #0]
 800b464:	061f      	lsls	r7, r3, #24
 800b466:	f851 5b04 	ldr.w	r5, [r1], #4
 800b46a:	d402      	bmi.n	800b472 <_printf_i+0x186>
 800b46c:	065f      	lsls	r7, r3, #25
 800b46e:	bf48      	it	mi
 800b470:	b2ad      	uxthmi	r5, r5
 800b472:	6031      	str	r1, [r6, #0]
 800b474:	07d9      	lsls	r1, r3, #31
 800b476:	bf44      	itt	mi
 800b478:	f043 0320 	orrmi.w	r3, r3, #32
 800b47c:	6023      	strmi	r3, [r4, #0]
 800b47e:	b11d      	cbz	r5, 800b488 <_printf_i+0x19c>
 800b480:	2310      	movs	r3, #16
 800b482:	e7ad      	b.n	800b3e0 <_printf_i+0xf4>
 800b484:	4826      	ldr	r0, [pc, #152]	@ (800b520 <_printf_i+0x234>)
 800b486:	e7e9      	b.n	800b45c <_printf_i+0x170>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	f023 0320 	bic.w	r3, r3, #32
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	e7f6      	b.n	800b480 <_printf_i+0x194>
 800b492:	4616      	mov	r6, r2
 800b494:	e7bd      	b.n	800b412 <_printf_i+0x126>
 800b496:	6833      	ldr	r3, [r6, #0]
 800b498:	6825      	ldr	r5, [r4, #0]
 800b49a:	1d18      	adds	r0, r3, #4
 800b49c:	6961      	ldr	r1, [r4, #20]
 800b49e:	6030      	str	r0, [r6, #0]
 800b4a0:	062e      	lsls	r6, r5, #24
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	d501      	bpl.n	800b4aa <_printf_i+0x1be>
 800b4a6:	6019      	str	r1, [r3, #0]
 800b4a8:	e002      	b.n	800b4b0 <_printf_i+0x1c4>
 800b4aa:	0668      	lsls	r0, r5, #25
 800b4ac:	d5fb      	bpl.n	800b4a6 <_printf_i+0x1ba>
 800b4ae:	8019      	strh	r1, [r3, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4616      	mov	r6, r2
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	e7bc      	b.n	800b432 <_printf_i+0x146>
 800b4b8:	6833      	ldr	r3, [r6, #0]
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	6032      	str	r2, [r6, #0]
 800b4c0:	681e      	ldr	r6, [r3, #0]
 800b4c2:	6862      	ldr	r2, [r4, #4]
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f000 f901 	bl	800b6cc <memchr>
 800b4ca:	b108      	cbz	r0, 800b4d0 <_printf_i+0x1e4>
 800b4cc:	1b80      	subs	r0, r0, r6
 800b4ce:	6060      	str	r0, [r4, #4]
 800b4d0:	6863      	ldr	r3, [r4, #4]
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4da:	e7aa      	b.n	800b432 <_printf_i+0x146>
 800b4dc:	4632      	mov	r2, r6
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	47d0      	blx	sl
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d0ad      	beq.n	800b446 <_printf_i+0x15a>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	079b      	lsls	r3, r3, #30
 800b4ee:	d413      	bmi.n	800b518 <_printf_i+0x22c>
 800b4f0:	68e0      	ldr	r0, [r4, #12]
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	4298      	cmp	r0, r3
 800b4f6:	bfb8      	it	lt
 800b4f8:	4618      	movlt	r0, r3
 800b4fa:	e7a6      	b.n	800b44a <_printf_i+0x15e>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4632      	mov	r2, r6
 800b500:	4649      	mov	r1, r9
 800b502:	4640      	mov	r0, r8
 800b504:	47d0      	blx	sl
 800b506:	3001      	adds	r0, #1
 800b508:	d09d      	beq.n	800b446 <_printf_i+0x15a>
 800b50a:	3501      	adds	r5, #1
 800b50c:	68e3      	ldr	r3, [r4, #12]
 800b50e:	9903      	ldr	r1, [sp, #12]
 800b510:	1a5b      	subs	r3, r3, r1
 800b512:	42ab      	cmp	r3, r5
 800b514:	dcf2      	bgt.n	800b4fc <_printf_i+0x210>
 800b516:	e7eb      	b.n	800b4f0 <_printf_i+0x204>
 800b518:	2500      	movs	r5, #0
 800b51a:	f104 0619 	add.w	r6, r4, #25
 800b51e:	e7f5      	b.n	800b50c <_printf_i+0x220>
 800b520:	0800c15a 	.word	0x0800c15a
 800b524:	0800c16b 	.word	0x0800c16b

0800b528 <__sflush_r>:
 800b528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	0716      	lsls	r6, r2, #28
 800b530:	4605      	mov	r5, r0
 800b532:	460c      	mov	r4, r1
 800b534:	d454      	bmi.n	800b5e0 <__sflush_r+0xb8>
 800b536:	684b      	ldr	r3, [r1, #4]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	dc02      	bgt.n	800b542 <__sflush_r+0x1a>
 800b53c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dd48      	ble.n	800b5d4 <__sflush_r+0xac>
 800b542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b544:	2e00      	cmp	r6, #0
 800b546:	d045      	beq.n	800b5d4 <__sflush_r+0xac>
 800b548:	2300      	movs	r3, #0
 800b54a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b54e:	682f      	ldr	r7, [r5, #0]
 800b550:	6a21      	ldr	r1, [r4, #32]
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	d030      	beq.n	800b5b8 <__sflush_r+0x90>
 800b556:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	0759      	lsls	r1, r3, #29
 800b55c:	d505      	bpl.n	800b56a <__sflush_r+0x42>
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	1ad2      	subs	r2, r2, r3
 800b562:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b564:	b10b      	cbz	r3, 800b56a <__sflush_r+0x42>
 800b566:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b568:	1ad2      	subs	r2, r2, r3
 800b56a:	2300      	movs	r3, #0
 800b56c:	4628      	mov	r0, r5
 800b56e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b570:	6a21      	ldr	r1, [r4, #32]
 800b572:	47b0      	blx	r6
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	d106      	bne.n	800b588 <__sflush_r+0x60>
 800b57a:	6829      	ldr	r1, [r5, #0]
 800b57c:	291d      	cmp	r1, #29
 800b57e:	d82b      	bhi.n	800b5d8 <__sflush_r+0xb0>
 800b580:	4a28      	ldr	r2, [pc, #160]	@ (800b624 <__sflush_r+0xfc>)
 800b582:	40ca      	lsrs	r2, r1
 800b584:	07d6      	lsls	r6, r2, #31
 800b586:	d527      	bpl.n	800b5d8 <__sflush_r+0xb0>
 800b588:	2200      	movs	r2, #0
 800b58a:	6062      	str	r2, [r4, #4]
 800b58c:	6922      	ldr	r2, [r4, #16]
 800b58e:	04d9      	lsls	r1, r3, #19
 800b590:	6022      	str	r2, [r4, #0]
 800b592:	d504      	bpl.n	800b59e <__sflush_r+0x76>
 800b594:	1c42      	adds	r2, r0, #1
 800b596:	d101      	bne.n	800b59c <__sflush_r+0x74>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b903      	cbnz	r3, 800b59e <__sflush_r+0x76>
 800b59c:	6560      	str	r0, [r4, #84]	@ 0x54
 800b59e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5a0:	602f      	str	r7, [r5, #0]
 800b5a2:	b1b9      	cbz	r1, 800b5d4 <__sflush_r+0xac>
 800b5a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	d002      	beq.n	800b5b2 <__sflush_r+0x8a>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7fe fbe5 	bl	8009d7c <_free_r>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5b6:	e00d      	b.n	800b5d4 <__sflush_r+0xac>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	47b0      	blx	r6
 800b5be:	4602      	mov	r2, r0
 800b5c0:	1c50      	adds	r0, r2, #1
 800b5c2:	d1c9      	bne.n	800b558 <__sflush_r+0x30>
 800b5c4:	682b      	ldr	r3, [r5, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d0c6      	beq.n	800b558 <__sflush_r+0x30>
 800b5ca:	2b1d      	cmp	r3, #29
 800b5cc:	d001      	beq.n	800b5d2 <__sflush_r+0xaa>
 800b5ce:	2b16      	cmp	r3, #22
 800b5d0:	d11d      	bne.n	800b60e <__sflush_r+0xe6>
 800b5d2:	602f      	str	r7, [r5, #0]
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	e021      	b.n	800b61c <__sflush_r+0xf4>
 800b5d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5dc:	b21b      	sxth	r3, r3
 800b5de:	e01a      	b.n	800b616 <__sflush_r+0xee>
 800b5e0:	690f      	ldr	r7, [r1, #16]
 800b5e2:	2f00      	cmp	r7, #0
 800b5e4:	d0f6      	beq.n	800b5d4 <__sflush_r+0xac>
 800b5e6:	0793      	lsls	r3, r2, #30
 800b5e8:	bf18      	it	ne
 800b5ea:	2300      	movne	r3, #0
 800b5ec:	680e      	ldr	r6, [r1, #0]
 800b5ee:	bf08      	it	eq
 800b5f0:	694b      	ldreq	r3, [r1, #20]
 800b5f2:	1bf6      	subs	r6, r6, r7
 800b5f4:	600f      	str	r7, [r1, #0]
 800b5f6:	608b      	str	r3, [r1, #8]
 800b5f8:	2e00      	cmp	r6, #0
 800b5fa:	ddeb      	ble.n	800b5d4 <__sflush_r+0xac>
 800b5fc:	4633      	mov	r3, r6
 800b5fe:	463a      	mov	r2, r7
 800b600:	4628      	mov	r0, r5
 800b602:	6a21      	ldr	r1, [r4, #32]
 800b604:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b608:	47e0      	blx	ip
 800b60a:	2800      	cmp	r0, #0
 800b60c:	dc07      	bgt.n	800b61e <__sflush_r+0xf6>
 800b60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b616:	f04f 30ff 	mov.w	r0, #4294967295
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61e:	4407      	add	r7, r0
 800b620:	1a36      	subs	r6, r6, r0
 800b622:	e7e9      	b.n	800b5f8 <__sflush_r+0xd0>
 800b624:	20400001 	.word	0x20400001

0800b628 <_fflush_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	690b      	ldr	r3, [r1, #16]
 800b62c:	4605      	mov	r5, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	b913      	cbnz	r3, 800b638 <_fflush_r+0x10>
 800b632:	2500      	movs	r5, #0
 800b634:	4628      	mov	r0, r5
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	b118      	cbz	r0, 800b642 <_fflush_r+0x1a>
 800b63a:	6a03      	ldr	r3, [r0, #32]
 800b63c:	b90b      	cbnz	r3, 800b642 <_fflush_r+0x1a>
 800b63e:	f7fe fa53 	bl	8009ae8 <__sinit>
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0f3      	beq.n	800b632 <_fflush_r+0xa>
 800b64a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b64c:	07d0      	lsls	r0, r2, #31
 800b64e:	d404      	bmi.n	800b65a <_fflush_r+0x32>
 800b650:	0599      	lsls	r1, r3, #22
 800b652:	d402      	bmi.n	800b65a <_fflush_r+0x32>
 800b654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b656:	f7fe fb7a 	bl	8009d4e <__retarget_lock_acquire_recursive>
 800b65a:	4628      	mov	r0, r5
 800b65c:	4621      	mov	r1, r4
 800b65e:	f7ff ff63 	bl	800b528 <__sflush_r>
 800b662:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b664:	4605      	mov	r5, r0
 800b666:	07da      	lsls	r2, r3, #31
 800b668:	d4e4      	bmi.n	800b634 <_fflush_r+0xc>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	059b      	lsls	r3, r3, #22
 800b66e:	d4e1      	bmi.n	800b634 <_fflush_r+0xc>
 800b670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b672:	f7fe fb6d 	bl	8009d50 <__retarget_lock_release_recursive>
 800b676:	e7dd      	b.n	800b634 <_fflush_r+0xc>

0800b678 <memmove>:
 800b678:	4288      	cmp	r0, r1
 800b67a:	b510      	push	{r4, lr}
 800b67c:	eb01 0402 	add.w	r4, r1, r2
 800b680:	d902      	bls.n	800b688 <memmove+0x10>
 800b682:	4284      	cmp	r4, r0
 800b684:	4623      	mov	r3, r4
 800b686:	d807      	bhi.n	800b698 <memmove+0x20>
 800b688:	1e43      	subs	r3, r0, #1
 800b68a:	42a1      	cmp	r1, r4
 800b68c:	d008      	beq.n	800b6a0 <memmove+0x28>
 800b68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b696:	e7f8      	b.n	800b68a <memmove+0x12>
 800b698:	4601      	mov	r1, r0
 800b69a:	4402      	add	r2, r0
 800b69c:	428a      	cmp	r2, r1
 800b69e:	d100      	bne.n	800b6a2 <memmove+0x2a>
 800b6a0:	bd10      	pop	{r4, pc}
 800b6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6aa:	e7f7      	b.n	800b69c <memmove+0x24>

0800b6ac <_sbrk_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4d05      	ldr	r5, [pc, #20]	@ (800b6c8 <_sbrk_r+0x1c>)
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	602b      	str	r3, [r5, #0]
 800b6b8:	f7f6 fa12 	bl	8001ae0 <_sbrk>
 800b6bc:	1c43      	adds	r3, r0, #1
 800b6be:	d102      	bne.n	800b6c6 <_sbrk_r+0x1a>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	b103      	cbz	r3, 800b6c6 <_sbrk_r+0x1a>
 800b6c4:	6023      	str	r3, [r4, #0]
 800b6c6:	bd38      	pop	{r3, r4, r5, pc}
 800b6c8:	200016e4 	.word	0x200016e4

0800b6cc <memchr>:
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	b510      	push	{r4, lr}
 800b6d0:	b2c9      	uxtb	r1, r1
 800b6d2:	4402      	add	r2, r0
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	d101      	bne.n	800b6de <memchr+0x12>
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e003      	b.n	800b6e6 <memchr+0x1a>
 800b6de:	7804      	ldrb	r4, [r0, #0]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	428c      	cmp	r4, r1
 800b6e4:	d1f6      	bne.n	800b6d4 <memchr+0x8>
 800b6e6:	bd10      	pop	{r4, pc}

0800b6e8 <__assert_func>:
 800b6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ea:	4614      	mov	r4, r2
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	4b09      	ldr	r3, [pc, #36]	@ (800b714 <__assert_func+0x2c>)
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68d8      	ldr	r0, [r3, #12]
 800b6f6:	b14c      	cbz	r4, 800b70c <__assert_func+0x24>
 800b6f8:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <__assert_func+0x30>)
 800b6fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6fe:	9100      	str	r1, [sp, #0]
 800b700:	462b      	mov	r3, r5
 800b702:	4906      	ldr	r1, [pc, #24]	@ (800b71c <__assert_func+0x34>)
 800b704:	f000 f858 	bl	800b7b8 <fiprintf>
 800b708:	f000 f868 	bl	800b7dc <abort>
 800b70c:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <__assert_func+0x38>)
 800b70e:	461c      	mov	r4, r3
 800b710:	e7f3      	b.n	800b6fa <__assert_func+0x12>
 800b712:	bf00      	nop
 800b714:	200002f8 	.word	0x200002f8
 800b718:	0800c17c 	.word	0x0800c17c
 800b71c:	0800c189 	.word	0x0800c189
 800b720:	0800c1b7 	.word	0x0800c1b7

0800b724 <_calloc_r>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	fba1 5402 	umull	r5, r4, r1, r2
 800b72a:	b934      	cbnz	r4, 800b73a <_calloc_r+0x16>
 800b72c:	4629      	mov	r1, r5
 800b72e:	f7fe fec9 	bl	800a4c4 <_malloc_r>
 800b732:	4606      	mov	r6, r0
 800b734:	b928      	cbnz	r0, 800b742 <_calloc_r+0x1e>
 800b736:	4630      	mov	r0, r6
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	220c      	movs	r2, #12
 800b73c:	2600      	movs	r6, #0
 800b73e:	6002      	str	r2, [r0, #0]
 800b740:	e7f9      	b.n	800b736 <_calloc_r+0x12>
 800b742:	462a      	mov	r2, r5
 800b744:	4621      	mov	r1, r4
 800b746:	f7fe fa6a 	bl	8009c1e <memset>
 800b74a:	e7f4      	b.n	800b736 <_calloc_r+0x12>

0800b74c <malloc>:
 800b74c:	4b02      	ldr	r3, [pc, #8]	@ (800b758 <malloc+0xc>)
 800b74e:	4601      	mov	r1, r0
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	f7fe beb7 	b.w	800a4c4 <_malloc_r>
 800b756:	bf00      	nop
 800b758:	200002f8 	.word	0x200002f8

0800b75c <_realloc_r>:
 800b75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b760:	4607      	mov	r7, r0
 800b762:	4614      	mov	r4, r2
 800b764:	460d      	mov	r5, r1
 800b766:	b921      	cbnz	r1, 800b772 <_realloc_r+0x16>
 800b768:	4611      	mov	r1, r2
 800b76a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b76e:	f7fe bea9 	b.w	800a4c4 <_malloc_r>
 800b772:	b92a      	cbnz	r2, 800b780 <_realloc_r+0x24>
 800b774:	f7fe fb02 	bl	8009d7c <_free_r>
 800b778:	4625      	mov	r5, r4
 800b77a:	4628      	mov	r0, r5
 800b77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b780:	f000 f833 	bl	800b7ea <_malloc_usable_size_r>
 800b784:	4284      	cmp	r4, r0
 800b786:	4606      	mov	r6, r0
 800b788:	d802      	bhi.n	800b790 <_realloc_r+0x34>
 800b78a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b78e:	d8f4      	bhi.n	800b77a <_realloc_r+0x1e>
 800b790:	4621      	mov	r1, r4
 800b792:	4638      	mov	r0, r7
 800b794:	f7fe fe96 	bl	800a4c4 <_malloc_r>
 800b798:	4680      	mov	r8, r0
 800b79a:	b908      	cbnz	r0, 800b7a0 <_realloc_r+0x44>
 800b79c:	4645      	mov	r5, r8
 800b79e:	e7ec      	b.n	800b77a <_realloc_r+0x1e>
 800b7a0:	42b4      	cmp	r4, r6
 800b7a2:	4622      	mov	r2, r4
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	bf28      	it	cs
 800b7a8:	4632      	movcs	r2, r6
 800b7aa:	f7fe fad2 	bl	8009d52 <memcpy>
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7fe fae3 	bl	8009d7c <_free_r>
 800b7b6:	e7f1      	b.n	800b79c <_realloc_r+0x40>

0800b7b8 <fiprintf>:
 800b7b8:	b40e      	push	{r1, r2, r3}
 800b7ba:	b503      	push	{r0, r1, lr}
 800b7bc:	4601      	mov	r1, r0
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	4805      	ldr	r0, [pc, #20]	@ (800b7d8 <fiprintf+0x20>)
 800b7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c6:	6800      	ldr	r0, [r0, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	f000 f83d 	bl	800b848 <_vfiprintf_r>
 800b7ce:	b002      	add	sp, #8
 800b7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d4:	b003      	add	sp, #12
 800b7d6:	4770      	bx	lr
 800b7d8:	200002f8 	.word	0x200002f8

0800b7dc <abort>:
 800b7dc:	2006      	movs	r0, #6
 800b7de:	b508      	push	{r3, lr}
 800b7e0:	f000 fa06 	bl	800bbf0 <raise>
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	f7f6 f906 	bl	80019f6 <_exit>

0800b7ea <_malloc_usable_size_r>:
 800b7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7ee:	1f18      	subs	r0, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfbc      	itt	lt
 800b7f4:	580b      	ldrlt	r3, [r1, r0]
 800b7f6:	18c0      	addlt	r0, r0, r3
 800b7f8:	4770      	bx	lr

0800b7fa <__sfputc_r>:
 800b7fa:	6893      	ldr	r3, [r2, #8]
 800b7fc:	b410      	push	{r4}
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	6093      	str	r3, [r2, #8]
 800b804:	da07      	bge.n	800b816 <__sfputc_r+0x1c>
 800b806:	6994      	ldr	r4, [r2, #24]
 800b808:	42a3      	cmp	r3, r4
 800b80a:	db01      	blt.n	800b810 <__sfputc_r+0x16>
 800b80c:	290a      	cmp	r1, #10
 800b80e:	d102      	bne.n	800b816 <__sfputc_r+0x1c>
 800b810:	bc10      	pop	{r4}
 800b812:	f000 b931 	b.w	800ba78 <__swbuf_r>
 800b816:	6813      	ldr	r3, [r2, #0]
 800b818:	1c58      	adds	r0, r3, #1
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	7019      	strb	r1, [r3, #0]
 800b81e:	4608      	mov	r0, r1
 800b820:	bc10      	pop	{r4}
 800b822:	4770      	bx	lr

0800b824 <__sfputs_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	4606      	mov	r6, r0
 800b828:	460f      	mov	r7, r1
 800b82a:	4614      	mov	r4, r2
 800b82c:	18d5      	adds	r5, r2, r3
 800b82e:	42ac      	cmp	r4, r5
 800b830:	d101      	bne.n	800b836 <__sfputs_r+0x12>
 800b832:	2000      	movs	r0, #0
 800b834:	e007      	b.n	800b846 <__sfputs_r+0x22>
 800b836:	463a      	mov	r2, r7
 800b838:	4630      	mov	r0, r6
 800b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83e:	f7ff ffdc 	bl	800b7fa <__sfputc_r>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d1f3      	bne.n	800b82e <__sfputs_r+0xa>
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b848 <_vfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	460d      	mov	r5, r1
 800b84e:	4614      	mov	r4, r2
 800b850:	4698      	mov	r8, r3
 800b852:	4606      	mov	r6, r0
 800b854:	b09d      	sub	sp, #116	@ 0x74
 800b856:	b118      	cbz	r0, 800b860 <_vfiprintf_r+0x18>
 800b858:	6a03      	ldr	r3, [r0, #32]
 800b85a:	b90b      	cbnz	r3, 800b860 <_vfiprintf_r+0x18>
 800b85c:	f7fe f944 	bl	8009ae8 <__sinit>
 800b860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d405      	bmi.n	800b872 <_vfiprintf_r+0x2a>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_vfiprintf_r+0x2a>
 800b86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b86e:	f7fe fa6e 	bl	8009d4e <__retarget_lock_acquire_recursive>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d501      	bpl.n	800b87c <_vfiprintf_r+0x34>
 800b878:	692b      	ldr	r3, [r5, #16]
 800b87a:	b99b      	cbnz	r3, 800b8a4 <_vfiprintf_r+0x5c>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 f938 	bl	800baf4 <__swsetup_r>
 800b884:	b170      	cbz	r0, 800b8a4 <_vfiprintf_r+0x5c>
 800b886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b888:	07dc      	lsls	r4, r3, #31
 800b88a:	d504      	bpl.n	800b896 <_vfiprintf_r+0x4e>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295
 800b890:	b01d      	add	sp, #116	@ 0x74
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	89ab      	ldrh	r3, [r5, #12]
 800b898:	0598      	lsls	r0, r3, #22
 800b89a:	d4f7      	bmi.n	800b88c <_vfiprintf_r+0x44>
 800b89c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b89e:	f7fe fa57 	bl	8009d50 <__retarget_lock_release_recursive>
 800b8a2:	e7f3      	b.n	800b88c <_vfiprintf_r+0x44>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8a8:	2320      	movs	r3, #32
 800b8aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8ae:	2330      	movs	r3, #48	@ 0x30
 800b8b0:	f04f 0901 	mov.w	r9, #1
 800b8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ba64 <_vfiprintf_r+0x21c>
 800b8bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8c0:	4623      	mov	r3, r4
 800b8c2:	469a      	mov	sl, r3
 800b8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c8:	b10a      	cbz	r2, 800b8ce <_vfiprintf_r+0x86>
 800b8ca:	2a25      	cmp	r2, #37	@ 0x25
 800b8cc:	d1f9      	bne.n	800b8c2 <_vfiprintf_r+0x7a>
 800b8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d2:	d00b      	beq.n	800b8ec <_vfiprintf_r+0xa4>
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7ff ffa2 	bl	800b824 <__sfputs_r>
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f000 80a7 	beq.w	800ba34 <_vfiprintf_r+0x1ec>
 800b8e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8e8:	445a      	add	r2, fp
 800b8ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 809f 	beq.w	800ba34 <_vfiprintf_r+0x1ec>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b900:	f10a 0a01 	add.w	sl, sl, #1
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	9307      	str	r3, [sp, #28]
 800b908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b90c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b90e:	4654      	mov	r4, sl
 800b910:	2205      	movs	r2, #5
 800b912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b916:	4853      	ldr	r0, [pc, #332]	@ (800ba64 <_vfiprintf_r+0x21c>)
 800b918:	f7ff fed8 	bl	800b6cc <memchr>
 800b91c:	9a04      	ldr	r2, [sp, #16]
 800b91e:	b9d8      	cbnz	r0, 800b958 <_vfiprintf_r+0x110>
 800b920:	06d1      	lsls	r1, r2, #27
 800b922:	bf44      	itt	mi
 800b924:	2320      	movmi	r3, #32
 800b926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b92a:	0713      	lsls	r3, r2, #28
 800b92c:	bf44      	itt	mi
 800b92e:	232b      	movmi	r3, #43	@ 0x2b
 800b930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b934:	f89a 3000 	ldrb.w	r3, [sl]
 800b938:	2b2a      	cmp	r3, #42	@ 0x2a
 800b93a:	d015      	beq.n	800b968 <_vfiprintf_r+0x120>
 800b93c:	4654      	mov	r4, sl
 800b93e:	2000      	movs	r0, #0
 800b940:	f04f 0c0a 	mov.w	ip, #10
 800b944:	9a07      	ldr	r2, [sp, #28]
 800b946:	4621      	mov	r1, r4
 800b948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b94c:	3b30      	subs	r3, #48	@ 0x30
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d94b      	bls.n	800b9ea <_vfiprintf_r+0x1a2>
 800b952:	b1b0      	cbz	r0, 800b982 <_vfiprintf_r+0x13a>
 800b954:	9207      	str	r2, [sp, #28]
 800b956:	e014      	b.n	800b982 <_vfiprintf_r+0x13a>
 800b958:	eba0 0308 	sub.w	r3, r0, r8
 800b95c:	fa09 f303 	lsl.w	r3, r9, r3
 800b960:	4313      	orrs	r3, r2
 800b962:	46a2      	mov	sl, r4
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	e7d2      	b.n	800b90e <_vfiprintf_r+0xc6>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	1d19      	adds	r1, r3, #4
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	9103      	str	r1, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	bfbb      	ittet	lt
 800b974:	425b      	neglt	r3, r3
 800b976:	f042 0202 	orrlt.w	r2, r2, #2
 800b97a:	9307      	strge	r3, [sp, #28]
 800b97c:	9307      	strlt	r3, [sp, #28]
 800b97e:	bfb8      	it	lt
 800b980:	9204      	strlt	r2, [sp, #16]
 800b982:	7823      	ldrb	r3, [r4, #0]
 800b984:	2b2e      	cmp	r3, #46	@ 0x2e
 800b986:	d10a      	bne.n	800b99e <_vfiprintf_r+0x156>
 800b988:	7863      	ldrb	r3, [r4, #1]
 800b98a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b98c:	d132      	bne.n	800b9f4 <_vfiprintf_r+0x1ac>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	3402      	adds	r4, #2
 800b992:	1d1a      	adds	r2, r3, #4
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	9203      	str	r2, [sp, #12]
 800b998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b99c:	9305      	str	r3, [sp, #20]
 800b99e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ba68 <_vfiprintf_r+0x220>
 800b9a2:	2203      	movs	r2, #3
 800b9a4:	4650      	mov	r0, sl
 800b9a6:	7821      	ldrb	r1, [r4, #0]
 800b9a8:	f7ff fe90 	bl	800b6cc <memchr>
 800b9ac:	b138      	cbz	r0, 800b9be <_vfiprintf_r+0x176>
 800b9ae:	2240      	movs	r2, #64	@ 0x40
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	eba0 000a 	sub.w	r0, r0, sl
 800b9b6:	4082      	lsls	r2, r0
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	3401      	adds	r4, #1
 800b9bc:	9304      	str	r3, [sp, #16]
 800b9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c2:	2206      	movs	r2, #6
 800b9c4:	4829      	ldr	r0, [pc, #164]	@ (800ba6c <_vfiprintf_r+0x224>)
 800b9c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9ca:	f7ff fe7f 	bl	800b6cc <memchr>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d03f      	beq.n	800ba52 <_vfiprintf_r+0x20a>
 800b9d2:	4b27      	ldr	r3, [pc, #156]	@ (800ba70 <_vfiprintf_r+0x228>)
 800b9d4:	bb1b      	cbnz	r3, 800ba1e <_vfiprintf_r+0x1d6>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	3307      	adds	r3, #7
 800b9da:	f023 0307 	bic.w	r3, r3, #7
 800b9de:	3308      	adds	r3, #8
 800b9e0:	9303      	str	r3, [sp, #12]
 800b9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e4:	443b      	add	r3, r7
 800b9e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9e8:	e76a      	b.n	800b8c0 <_vfiprintf_r+0x78>
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f2:	e7a8      	b.n	800b946 <_vfiprintf_r+0xfe>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f04f 0c0a 	mov.w	ip, #10
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	3401      	adds	r4, #1
 800b9fe:	9305      	str	r3, [sp, #20]
 800ba00:	4620      	mov	r0, r4
 800ba02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba06:	3a30      	subs	r2, #48	@ 0x30
 800ba08:	2a09      	cmp	r2, #9
 800ba0a:	d903      	bls.n	800ba14 <_vfiprintf_r+0x1cc>
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0c6      	beq.n	800b99e <_vfiprintf_r+0x156>
 800ba10:	9105      	str	r1, [sp, #20]
 800ba12:	e7c4      	b.n	800b99e <_vfiprintf_r+0x156>
 800ba14:	4604      	mov	r4, r0
 800ba16:	2301      	movs	r3, #1
 800ba18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba1c:	e7f0      	b.n	800ba00 <_vfiprintf_r+0x1b8>
 800ba1e:	ab03      	add	r3, sp, #12
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	462a      	mov	r2, r5
 800ba24:	4630      	mov	r0, r6
 800ba26:	4b13      	ldr	r3, [pc, #76]	@ (800ba74 <_vfiprintf_r+0x22c>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	f3af 8000 	nop.w
 800ba2e:	4607      	mov	r7, r0
 800ba30:	1c78      	adds	r0, r7, #1
 800ba32:	d1d6      	bne.n	800b9e2 <_vfiprintf_r+0x19a>
 800ba34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba36:	07d9      	lsls	r1, r3, #31
 800ba38:	d405      	bmi.n	800ba46 <_vfiprintf_r+0x1fe>
 800ba3a:	89ab      	ldrh	r3, [r5, #12]
 800ba3c:	059a      	lsls	r2, r3, #22
 800ba3e:	d402      	bmi.n	800ba46 <_vfiprintf_r+0x1fe>
 800ba40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba42:	f7fe f985 	bl	8009d50 <__retarget_lock_release_recursive>
 800ba46:	89ab      	ldrh	r3, [r5, #12]
 800ba48:	065b      	lsls	r3, r3, #25
 800ba4a:	f53f af1f 	bmi.w	800b88c <_vfiprintf_r+0x44>
 800ba4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba50:	e71e      	b.n	800b890 <_vfiprintf_r+0x48>
 800ba52:	ab03      	add	r3, sp, #12
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	462a      	mov	r2, r5
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4b06      	ldr	r3, [pc, #24]	@ (800ba74 <_vfiprintf_r+0x22c>)
 800ba5c:	a904      	add	r1, sp, #16
 800ba5e:	f7ff fc45 	bl	800b2ec <_printf_i>
 800ba62:	e7e4      	b.n	800ba2e <_vfiprintf_r+0x1e6>
 800ba64:	0800c149 	.word	0x0800c149
 800ba68:	0800c14f 	.word	0x0800c14f
 800ba6c:	0800c153 	.word	0x0800c153
 800ba70:	00000000 	.word	0x00000000
 800ba74:	0800b825 	.word	0x0800b825

0800ba78 <__swbuf_r>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	460e      	mov	r6, r1
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	4605      	mov	r5, r0
 800ba80:	b118      	cbz	r0, 800ba8a <__swbuf_r+0x12>
 800ba82:	6a03      	ldr	r3, [r0, #32]
 800ba84:	b90b      	cbnz	r3, 800ba8a <__swbuf_r+0x12>
 800ba86:	f7fe f82f 	bl	8009ae8 <__sinit>
 800ba8a:	69a3      	ldr	r3, [r4, #24]
 800ba8c:	60a3      	str	r3, [r4, #8]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	071a      	lsls	r2, r3, #28
 800ba92:	d501      	bpl.n	800ba98 <__swbuf_r+0x20>
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	b943      	cbnz	r3, 800baaa <__swbuf_r+0x32>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 f82a 	bl	800baf4 <__swsetup_r>
 800baa0:	b118      	cbz	r0, 800baaa <__swbuf_r+0x32>
 800baa2:	f04f 37ff 	mov.w	r7, #4294967295
 800baa6:	4638      	mov	r0, r7
 800baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	6922      	ldr	r2, [r4, #16]
 800baae:	b2f6      	uxtb	r6, r6
 800bab0:	1a98      	subs	r0, r3, r2
 800bab2:	6963      	ldr	r3, [r4, #20]
 800bab4:	4637      	mov	r7, r6
 800bab6:	4283      	cmp	r3, r0
 800bab8:	dc05      	bgt.n	800bac6 <__swbuf_r+0x4e>
 800baba:	4621      	mov	r1, r4
 800babc:	4628      	mov	r0, r5
 800babe:	f7ff fdb3 	bl	800b628 <_fflush_r>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d1ed      	bne.n	800baa2 <__swbuf_r+0x2a>
 800bac6:	68a3      	ldr	r3, [r4, #8]
 800bac8:	3b01      	subs	r3, #1
 800baca:	60a3      	str	r3, [r4, #8]
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	6022      	str	r2, [r4, #0]
 800bad2:	701e      	strb	r6, [r3, #0]
 800bad4:	6962      	ldr	r2, [r4, #20]
 800bad6:	1c43      	adds	r3, r0, #1
 800bad8:	429a      	cmp	r2, r3
 800bada:	d004      	beq.n	800bae6 <__swbuf_r+0x6e>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	07db      	lsls	r3, r3, #31
 800bae0:	d5e1      	bpl.n	800baa6 <__swbuf_r+0x2e>
 800bae2:	2e0a      	cmp	r6, #10
 800bae4:	d1df      	bne.n	800baa6 <__swbuf_r+0x2e>
 800bae6:	4621      	mov	r1, r4
 800bae8:	4628      	mov	r0, r5
 800baea:	f7ff fd9d 	bl	800b628 <_fflush_r>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d0d9      	beq.n	800baa6 <__swbuf_r+0x2e>
 800baf2:	e7d6      	b.n	800baa2 <__swbuf_r+0x2a>

0800baf4 <__swsetup_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4b29      	ldr	r3, [pc, #164]	@ (800bb9c <__swsetup_r+0xa8>)
 800baf8:	4605      	mov	r5, r0
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	460c      	mov	r4, r1
 800bafe:	b118      	cbz	r0, 800bb08 <__swsetup_r+0x14>
 800bb00:	6a03      	ldr	r3, [r0, #32]
 800bb02:	b90b      	cbnz	r3, 800bb08 <__swsetup_r+0x14>
 800bb04:	f7fd fff0 	bl	8009ae8 <__sinit>
 800bb08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb0c:	0719      	lsls	r1, r3, #28
 800bb0e:	d422      	bmi.n	800bb56 <__swsetup_r+0x62>
 800bb10:	06da      	lsls	r2, r3, #27
 800bb12:	d407      	bmi.n	800bb24 <__swsetup_r+0x30>
 800bb14:	2209      	movs	r2, #9
 800bb16:	602a      	str	r2, [r5, #0]
 800bb18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	e033      	b.n	800bb8c <__swsetup_r+0x98>
 800bb24:	0758      	lsls	r0, r3, #29
 800bb26:	d512      	bpl.n	800bb4e <__swsetup_r+0x5a>
 800bb28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb2a:	b141      	cbz	r1, 800bb3e <__swsetup_r+0x4a>
 800bb2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d002      	beq.n	800bb3a <__swsetup_r+0x46>
 800bb34:	4628      	mov	r0, r5
 800bb36:	f7fe f921 	bl	8009d7c <_free_r>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	2300      	movs	r3, #0
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f043 0308 	orr.w	r3, r3, #8
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	b94b      	cbnz	r3, 800bb6e <__swsetup_r+0x7a>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb64:	d003      	beq.n	800bb6e <__swsetup_r+0x7a>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f000 f882 	bl	800bc72 <__smakebuf_r>
 800bb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb72:	f013 0201 	ands.w	r2, r3, #1
 800bb76:	d00a      	beq.n	800bb8e <__swsetup_r+0x9a>
 800bb78:	2200      	movs	r2, #0
 800bb7a:	60a2      	str	r2, [r4, #8]
 800bb7c:	6962      	ldr	r2, [r4, #20]
 800bb7e:	4252      	negs	r2, r2
 800bb80:	61a2      	str	r2, [r4, #24]
 800bb82:	6922      	ldr	r2, [r4, #16]
 800bb84:	b942      	cbnz	r2, 800bb98 <__swsetup_r+0xa4>
 800bb86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb8a:	d1c5      	bne.n	800bb18 <__swsetup_r+0x24>
 800bb8c:	bd38      	pop	{r3, r4, r5, pc}
 800bb8e:	0799      	lsls	r1, r3, #30
 800bb90:	bf58      	it	pl
 800bb92:	6962      	ldrpl	r2, [r4, #20]
 800bb94:	60a2      	str	r2, [r4, #8]
 800bb96:	e7f4      	b.n	800bb82 <__swsetup_r+0x8e>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7f7      	b.n	800bb8c <__swsetup_r+0x98>
 800bb9c:	200002f8 	.word	0x200002f8

0800bba0 <_raise_r>:
 800bba0:	291f      	cmp	r1, #31
 800bba2:	b538      	push	{r3, r4, r5, lr}
 800bba4:	4605      	mov	r5, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	d904      	bls.n	800bbb4 <_raise_r+0x14>
 800bbaa:	2316      	movs	r3, #22
 800bbac:	6003      	str	r3, [r0, #0]
 800bbae:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbb6:	b112      	cbz	r2, 800bbbe <_raise_r+0x1e>
 800bbb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbbc:	b94b      	cbnz	r3, 800bbd2 <_raise_r+0x32>
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f000 f830 	bl	800bc24 <_getpid_r>
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	4628      	mov	r0, r5
 800bbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbce:	f000 b817 	b.w	800bc00 <_kill_r>
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d00a      	beq.n	800bbec <_raise_r+0x4c>
 800bbd6:	1c59      	adds	r1, r3, #1
 800bbd8:	d103      	bne.n	800bbe2 <_raise_r+0x42>
 800bbda:	2316      	movs	r3, #22
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	2001      	movs	r0, #1
 800bbe0:	e7e7      	b.n	800bbb2 <_raise_r+0x12>
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbea:	4798      	blx	r3
 800bbec:	2000      	movs	r0, #0
 800bbee:	e7e0      	b.n	800bbb2 <_raise_r+0x12>

0800bbf0 <raise>:
 800bbf0:	4b02      	ldr	r3, [pc, #8]	@ (800bbfc <raise+0xc>)
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	f7ff bfd3 	b.w	800bba0 <_raise_r>
 800bbfa:	bf00      	nop
 800bbfc:	200002f8 	.word	0x200002f8

0800bc00 <_kill_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	2300      	movs	r3, #0
 800bc04:	4d06      	ldr	r5, [pc, #24]	@ (800bc20 <_kill_r+0x20>)
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f5 fee2 	bl	80019d6 <_kill>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_kill_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_kill_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	200016e4 	.word	0x200016e4

0800bc24 <_getpid_r>:
 800bc24:	f7f5 bed0 	b.w	80019c8 <_getpid>

0800bc28 <__swhatbuf_r>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc30:	4615      	mov	r5, r2
 800bc32:	2900      	cmp	r1, #0
 800bc34:	461e      	mov	r6, r3
 800bc36:	b096      	sub	sp, #88	@ 0x58
 800bc38:	da0c      	bge.n	800bc54 <__swhatbuf_r+0x2c>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc42:	bf14      	ite	ne
 800bc44:	2340      	movne	r3, #64	@ 0x40
 800bc46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	6031      	str	r1, [r6, #0]
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	b016      	add	sp, #88	@ 0x58
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	466a      	mov	r2, sp
 800bc56:	f000 f849 	bl	800bcec <_fstat_r>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	dbed      	blt.n	800bc3a <__swhatbuf_r+0x12>
 800bc5e:	9901      	ldr	r1, [sp, #4]
 800bc60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc68:	4259      	negs	r1, r3
 800bc6a:	4159      	adcs	r1, r3
 800bc6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc70:	e7eb      	b.n	800bc4a <__swhatbuf_r+0x22>

0800bc72 <__smakebuf_r>:
 800bc72:	898b      	ldrh	r3, [r1, #12]
 800bc74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc76:	079d      	lsls	r5, r3, #30
 800bc78:	4606      	mov	r6, r0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	d507      	bpl.n	800bc8e <__smakebuf_r+0x1c>
 800bc7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	2301      	movs	r3, #1
 800bc88:	6163      	str	r3, [r4, #20]
 800bc8a:	b003      	add	sp, #12
 800bc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc8e:	466a      	mov	r2, sp
 800bc90:	ab01      	add	r3, sp, #4
 800bc92:	f7ff ffc9 	bl	800bc28 <__swhatbuf_r>
 800bc96:	9f00      	ldr	r7, [sp, #0]
 800bc98:	4605      	mov	r5, r0
 800bc9a:	4639      	mov	r1, r7
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f7fe fc11 	bl	800a4c4 <_malloc_r>
 800bca2:	b948      	cbnz	r0, 800bcb8 <__smakebuf_r+0x46>
 800bca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bca8:	059a      	lsls	r2, r3, #22
 800bcaa:	d4ee      	bmi.n	800bc8a <__smakebuf_r+0x18>
 800bcac:	f023 0303 	bic.w	r3, r3, #3
 800bcb0:	f043 0302 	orr.w	r3, r3, #2
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e7e2      	b.n	800bc7e <__smakebuf_r+0xc>
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	6020      	str	r0, [r4, #0]
 800bcc8:	b15b      	cbz	r3, 800bce2 <__smakebuf_r+0x70>
 800bcca:	4630      	mov	r0, r6
 800bccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd0:	f000 f81e 	bl	800bd10 <_isatty_r>
 800bcd4:	b128      	cbz	r0, 800bce2 <__smakebuf_r+0x70>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f023 0303 	bic.w	r3, r3, #3
 800bcdc:	f043 0301 	orr.w	r3, r3, #1
 800bce0:	81a3      	strh	r3, [r4, #12]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	431d      	orrs	r5, r3
 800bce6:	81a5      	strh	r5, [r4, #12]
 800bce8:	e7cf      	b.n	800bc8a <__smakebuf_r+0x18>
	...

0800bcec <_fstat_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4d06      	ldr	r5, [pc, #24]	@ (800bd0c <_fstat_r+0x20>)
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	f7f5 fecb 	bl	8001a94 <_fstat>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d102      	bne.n	800bd08 <_fstat_r+0x1c>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b103      	cbz	r3, 800bd08 <_fstat_r+0x1c>
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200016e4 	.word	0x200016e4

0800bd10 <_isatty_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	2300      	movs	r3, #0
 800bd14:	4d05      	ldr	r5, [pc, #20]	@ (800bd2c <_isatty_r+0x1c>)
 800bd16:	4604      	mov	r4, r0
 800bd18:	4608      	mov	r0, r1
 800bd1a:	602b      	str	r3, [r5, #0]
 800bd1c:	f7f5 fec9 	bl	8001ab2 <_isatty>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_isatty_r+0x1a>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_isatty_r+0x1a>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	200016e4 	.word	0x200016e4

0800bd30 <_init>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	bf00      	nop
 800bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd36:	bc08      	pop	{r3}
 800bd38:	469e      	mov	lr, r3
 800bd3a:	4770      	bx	lr

0800bd3c <_fini>:
 800bd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3e:	bf00      	nop
 800bd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd42:	bc08      	pop	{r3}
 800bd44:	469e      	mov	lr, r3
 800bd46:	4770      	bx	lr
