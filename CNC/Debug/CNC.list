
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800b898  0800b898  0000c898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bddc  0800bddc  0000d344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bddc  0800bddc  0000cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde4  0800bde4  0000d344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bde8  0800bde8  0000cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800bdec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a8  20000344  0800c130  0000d344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016ec  0800c130  0000d6ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8ea  00000000  00000000  0000d36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcd  00000000  00000000  0001ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  0001e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a628  00000000  00000000  0001eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8a6  00000000  00000000  000394cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089340  00000000  00000000  00048d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d20b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  000d20f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d61a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b880 	.word	0x0800b880

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800b880 	.word	0x0800b880

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fcmpun>:
 8000b3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b48:	d102      	bne.n	8000b50 <__aeabi_fcmpun+0x14>
 8000b4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b4e:	d108      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b54:	d102      	bne.n	8000b5c <__aeabi_fcmpun+0x20>
 8000b56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_fcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff59 	bl	8000a5c <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff4a 	bl	8000a5c <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  HAL_Init();
 8000bda:	f000 fd89 	bl	80016f0 <HAL_Init>
  SystemClock_Config();
 8000bde:	f000 f81d 	bl	8000c1c <SystemClock_Config>
  MX_GPIO_Init();
 8000be2:	f000 f877 	bl	8000cd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();  // Inicia USB CDC
 8000be6:	f007 f9c1 	bl	8007f6c <MX_USB_DEVICE_Init>

  // Inicialización similar al setup() de Arduino
  setup();
 8000bea:	f000 fbf1 	bl	80013d0 <setup>

  // Envío inicial
  uint8_t mensaje[] = "G-code listo\r\n";
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <main+0x44>)
 8000bf0:	463c      	mov	r4, r7
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	c407      	stmia	r4!, {r0, r1, r2}
 8000bf6:	8023      	strh	r3, [r4, #0]
 8000bf8:	3402      	adds	r4, #2
 8000bfa:	0c1b      	lsrs	r3, r3, #16
 8000bfc:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(mensaje, sizeof(mensaje) - 1);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	210e      	movs	r1, #14
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 faa4 	bl	8008150 <CDC_Transmit_FS>

  while (1)
  {
    // Equivalente al loop() de Arduino
    loop();
 8000c08:	f000 fb9a 	bl	8001340 <loop>
    
    // Pequeña pausa para evitar saturar el procesador
    HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f000 fdd1 	bl	80017b4 <HAL_Delay>
    loop();
 8000c12:	bf00      	nop
 8000c14:	e7f8      	b.n	8000c08 <main+0x34>
 8000c16:	bf00      	nop
 8000c18:	0800b898 	.word	0x0800b898

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b094      	sub	sp, #80	@ 0x50
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2228      	movs	r2, #40	@ 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f008 fd9f 	bl	800976e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c68:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fde4 	bl	8003840 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c7e:	f000 fbdb 	bl	8001438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 f850 	bl	8003d44 <HAL_RCC_ClockConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000caa:	f000 fbc5 	bl	8001438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cb6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 f99e 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cc6:	f000 fbb7 	bl	8001438 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3750      	adds	r7, #80	@ 0x50
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d30:	2200      	movs	r2, #0
 8000d32:	f240 31d9 	movw	r1, #985	@ 0x3d9
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d38:	f001 f809 	bl	8001d4e <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000d42:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d44:	f001 f803 	bl	8001d4e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 8000d48:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8000d4c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4812      	ldr	r0, [pc, #72]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d62:	f000 fe59 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d66:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d7c:	f000 fe4c 	bl	8001a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d80:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d9a:	f000 fe3d 	bl	8001a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010800 	.word	0x40010800

08000db4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <delay_us+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <delay_us+0x44>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9a      	lsrs	r2, r3, #18
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	60fb      	str	r3, [r7, #12]
    uint32_t start = DWT->CYCCNT;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dfc <delay_us+0x48>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8000dd6:	bf00      	nop
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <delay_us+0x48>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d8f8      	bhi.n	8000dd8 <delay_us+0x24>
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	e0001000 	.word	0xe0001000

08000e00 <X_stepOnce>:

void X_stepOnce(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <X_stepOnce+0x24>)
 8000e0a:	f000 ffa0 	bl	8001d4e <HAL_GPIO_WritePin>
    delay_us(2);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff ffd0 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	@ 0x40
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <X_stepOnce+0x24>)
 8000e1a:	f000 ff98 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40010c00 	.word	0x40010c00

08000e28 <Y_stepOnce>:

void Y_stepOnce(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e34:	f000 ff8b 	bl	8001d4e <HAL_GPIO_WritePin>
    delay_us(2);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff ffbb 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e44:	4802      	ldr	r0, [pc, #8]	@ (8000e50 <Y_stepOnce+0x28>)
 8000e46:	f000 ff82 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <Z_stepOnce>:

void Z_stepOnce(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e5e:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e60:	f000 ff75 	bl	8001d4e <HAL_GPIO_WritePin>
    delay_us(2);
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff ffa5 	bl	8000db4 <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <Z_stepOnce+0x28>)
 8000e72:	f000 ff6c 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010800 	.word	0x40010800

08000e80 <X_move>:

void X_move(int32_t steps, bool dir) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <X_move+0x88>)
 8000e94:	f000 ff5b 	bl	8001d4e <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00a      	beq.n	8000eb4 <X_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4819      	ldr	r0, [pc, #100]	@ (8000f08 <X_move+0x88>)
 8000ea4:	f000 ff53 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4816      	ldr	r0, [pc, #88]	@ (8000f08 <X_move+0x88>)
 8000eae:	f000 ff4e 	bl	8001d4e <HAL_GPIO_WritePin>
 8000eb2:	e009      	b.n	8000ec8 <X_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <X_move+0x88>)
 8000eba:	f000 ff48 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <X_move+0x88>)
 8000ec4:	f000 ff43 	bl	8001d4e <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	e009      	b.n	8000ee2 <X_move+0x62>
        X_stepOnce();
 8000ece:	f7ff ff97 	bl	8000e00 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8000ed2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff6c 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf1      	blt.n	8000ece <X_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2101      	movs	r1, #1
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <X_move+0x88>)
 8000ef0:	f000 ff2d 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <X_move+0x88>)
 8000efa:	f000 ff28 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <Y_move>:

void Y_move(int32_t steps, bool dir) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2108      	movs	r1, #8
 8000f1e:	481d      	ldr	r0, [pc, #116]	@ (8000f94 <Y_move+0x88>)
 8000f20:	f000 ff15 	bl	8001d4e <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <Y_move+0x34>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <Y_move+0x88>)
 8000f30:	f000 ff0d 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2102      	movs	r1, #2
 8000f38:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <Y_move+0x88>)
 8000f3a:	f000 ff08 	bl	8001d4e <HAL_GPIO_WritePin>
 8000f3e:	e009      	b.n	8000f54 <Y_move+0x48>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2101      	movs	r1, #1
 8000f44:	4813      	ldr	r0, [pc, #76]	@ (8000f94 <Y_move+0x88>)
 8000f46:	f000 ff02 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <Y_move+0x88>)
 8000f50:	f000 fefd 	bl	8001d4e <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e009      	b.n	8000f6e <Y_move+0x62>
        Y_stepOnce();
 8000f5a:	f7ff ff65 	bl	8000e28 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8000f5e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff26 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbf1      	blt.n	8000f5a <Y_move+0x4e>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <Y_move+0x88>)
 8000f7c:	f000 fee7 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <Y_move+0x88>)
 8000f86:	f000 fee2 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <Z_move>:

void Z_move(int32_t steps, bool dir) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
    // Configura dirección
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	481c      	ldr	r0, [pc, #112]	@ (8001020 <Z_move+0x88>)
 8000fae:	f000 fece 	bl	8001d4e <HAL_GPIO_WritePin>

    // Enciende el LED correspondiente al sentido
    if (dir) {
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00a      	beq.n	8000fce <Z_move+0x36>
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4819      	ldr	r0, [pc, #100]	@ (8001024 <Z_move+0x8c>)
 8000fbe:	f000 fec6 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4817      	ldr	r0, [pc, #92]	@ (8001024 <Z_move+0x8c>)
 8000fc8:	f000 fec1 	bl	8001d4e <HAL_GPIO_WritePin>
 8000fcc:	e009      	b.n	8000fe2 <Z_move+0x4a>
    } else {
        HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4814      	ldr	r0, [pc, #80]	@ (8001024 <Z_move+0x8c>)
 8000fd4:	f000 febb 	bl	8001d4e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4811      	ldr	r0, [pc, #68]	@ (8001024 <Z_move+0x8c>)
 8000fde:	f000 feb6 	bl	8001d4e <HAL_GPIO_WritePin>
    }

    // Ejecuta los pasos
    for (int32_t i = 0; i < steps; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e009      	b.n	8000ffc <Z_move+0x64>
        Z_stepOnce();
 8000fe8:	f7ff ff34 	bl	8000e54 <Z_stepOnce>
        delay_us(STEP_DELAY_US);
 8000fec:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fedf 	bl	8000db4 <delay_us>
    for (int32_t i = 0; i < steps; i++) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbf1      	blt.n	8000fe8 <Z_move+0x50>
    }

    // Apaga ambos LEDs al terminar
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2101      	movs	r1, #1
 8001008:	4806      	ldr	r0, [pc, #24]	@ (8001024 <Z_move+0x8c>)
 800100a:	f000 fea0 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2102      	movs	r1, #2
 8001012:	4804      	ldr	r0, [pc, #16]	@ (8001024 <Z_move+0x8c>)
 8001014:	f000 fe9b 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00

08001028 <extractParameter>:
void readUSBCommands(void) {
    // Esta función se implementará con callback de USB CDC
    // Por ahora vacía, se procesará en el callback
}

float extractParameter(const char* command, char param) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
    char* ptr = strchr(command, param);
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f008 fba0 	bl	800977e <strchr>
 800103e:	60f8      	str	r0, [r7, #12]
    if (ptr) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00c      	beq.n	8001060 <extractParameter+0x38>
        return atof(ptr + 1);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f007 fc5e 	bl	800890c <atof>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd20 	bl	8000a9c <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	e000      	b.n	8001062 <extractParameter+0x3a>
    }
    return NAN; // Not a Number
 8001060:	4b02      	ldr	r3, [pc, #8]	@ (800106c <extractParameter+0x44>)
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	7fc00000 	.word	0x7fc00000

08001070 <moveAxes>:

void moveAxes(float x, float y, float z) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b098      	sub	sp, #96	@ 0x60
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    // Convertir a pasos
    int32_t xSteps = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int32_t ySteps = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
    int32_t zSteps = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	657b      	str	r3, [r7, #84]	@ 0x54
    bool xDir = true;
 8001088:	2301      	movs	r3, #1
 800108a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    bool yDir = true;
 800108e:	2301      	movs	r3, #1
 8001090:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    bool zDir = true;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    
    if (!isnan(x)) {
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fd4d 	bl	8000b3c <__aeabi_fcmpun>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d121      	bne.n	80010ec <moveAxes+0x7c>
        // Calcular pasos relativos para el eje X
        int32_t targetX = x * (STEPS_PER_REV / 360.0); // Convertir a pasos
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff f9bd 	bl	8000428 <__aeabi_f2d>
 80010ae:	a370      	add	r3, pc, #448	@ (adr r3, 8001270 <moveAxes+0x200>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fa10 	bl	80004d8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fca4 	bl	8000a0c <__aeabi_d2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        xSteps = targetX - currentX;
 80010c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001278 <moveAxes+0x208>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
        xDir = (xSteps >= 0);
 80010d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010d4:	43db      	mvns	r3, r3
 80010d6:	0fdb      	lsrs	r3, r3, #31
 80010d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        xSteps = abs(xSteps);
 80010dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bfb8      	it	lt
 80010e2:	425b      	neglt	r3, r3
 80010e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        currentX = targetX; // Actualizar posición actual
 80010e6:	4a64      	ldr	r2, [pc, #400]	@ (8001278 <moveAxes+0x208>)
 80010e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ea:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(y)) {
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff fd24 	bl	8000b3c <__aeabi_fcmpun>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d121      	bne.n	800113e <moveAxes+0xce>
        // Calcular pasos relativos para el eje Y
        int32_t targetY = y * (STEPS_PER_REV / 360.0); // Convertir a pasos
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f7ff f994 	bl	8000428 <__aeabi_f2d>
 8001100:	a35b      	add	r3, pc, #364	@ (adr r3, 8001270 <moveAxes+0x200>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff f9e7 	bl	80004d8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fc7b 	bl	8000a0c <__aeabi_d2iz>
 8001116:	4603      	mov	r3, r0
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
        ySteps = targetY - currentY;
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <moveAxes+0x20c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	65bb      	str	r3, [r7, #88]	@ 0x58
        yDir = (ySteps >= 0);
 8001124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001126:	43db      	mvns	r3, r3
 8001128:	0fdb      	lsrs	r3, r3, #31
 800112a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        ySteps = abs(ySteps);
 800112e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001130:	2b00      	cmp	r3, #0
 8001132:	bfb8      	it	lt
 8001134:	425b      	neglt	r3, r3
 8001136:	65bb      	str	r3, [r7, #88]	@ 0x58
        currentY = targetY; // Actualizar posición actual
 8001138:	4a50      	ldr	r2, [pc, #320]	@ (800127c <moveAxes+0x20c>)
 800113a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800113c:	6013      	str	r3, [r2, #0]
    }
    
    if (!isnan(z)) {
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fcfb 	bl	8000b3c <__aeabi_fcmpun>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d121      	bne.n	8001190 <moveAxes+0x120>
        // Calcular pasos relativos para el eje Z
        int32_t targetZ = z * (STEPS_PER_REV / 360.0); // Convertir a pasos
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f96b 	bl	8000428 <__aeabi_f2d>
 8001152:	a347      	add	r3, pc, #284	@ (adr r3, 8001270 <moveAxes+0x200>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff f9be 	bl	80004d8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc52 	bl	8000a0c <__aeabi_d2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
        zSteps = targetZ - currentZ;
 800116c:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <moveAxes+0x210>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	657b      	str	r3, [r7, #84]	@ 0x54
        zDir = (zSteps >= 0);
 8001176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001178:	43db      	mvns	r3, r3
 800117a:	0fdb      	lsrs	r3, r3, #31
 800117c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
        zSteps = abs(zSteps);
 8001180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	657b      	str	r3, [r7, #84]	@ 0x54
        currentZ = targetZ; // Actualizar posición actual
 800118a:	4a3d      	ldr	r2, [pc, #244]	@ (8001280 <moveAxes+0x210>)
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	6013      	str	r3, [r2, #0]
    }
    
    // Mover los motores
    if (xSteps > 0) {
 8001190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd1f      	ble.n	80011d6 <moveAxes+0x166>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo X: %ld pasos, dir: %s\r\n", xSteps, xDir ? "horario" : "antihorario");
 8001196:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <moveAxes+0x132>
 800119e:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <moveAxes+0x214>)
 80011a0:	e000      	b.n	80011a4 <moveAxes+0x134>
 80011a2:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <moveAxes+0x218>)
 80011a4:	f107 0010 	add.w	r0, r7, #16
 80011a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80011aa:	4938      	ldr	r1, [pc, #224]	@ (800128c <moveAxes+0x21c>)
 80011ac:	f008 fa7a 	bl	80096a4 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7fe ffcb 	bl	8000150 <strlen>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29a      	uxth	r2, r3
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 ffc3 	bl	8008150 <CDC_Transmit_FS>
        X_move(xSteps, xDir);
 80011ca:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80011ce:	4619      	mov	r1, r3
 80011d0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80011d2:	f7ff fe55 	bl	8000e80 <X_move>
    }
    
    if (ySteps > 0) {
 80011d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd1f      	ble.n	800121c <moveAxes+0x1ac>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Y: %ld pasos, dir: %s\r\n", ySteps, yDir ? "horario" : "antihorario");
 80011dc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <moveAxes+0x178>
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <moveAxes+0x214>)
 80011e6:	e000      	b.n	80011ea <moveAxes+0x17a>
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <moveAxes+0x218>)
 80011ea:	f107 0010 	add.w	r0, r7, #16
 80011ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80011f0:	4927      	ldr	r1, [pc, #156]	@ (8001290 <moveAxes+0x220>)
 80011f2:	f008 fa57 	bl	80096a4 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7fe ffa8 	bl	8000150 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f006 ffa0 	bl	8008150 <CDC_Transmit_FS>
        Y_move(ySteps, yDir);
 8001210:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001214:	4619      	mov	r1, r3
 8001216:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001218:	f7ff fe78 	bl	8000f0c <Y_move>
    }
    
    if (zSteps > 0) {
 800121c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121e:	2b00      	cmp	r3, #0
 8001220:	dd1f      	ble.n	8001262 <moveAxes+0x1f2>
        // Enviar información por USB CDC
        char msg[50];
        sprintf(msg, "Moviendo Z: %ld pasos, dir: %s\r\n", zSteps, zDir ? "horario" : "antihorario");
 8001222:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <moveAxes+0x1be>
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <moveAxes+0x214>)
 800122c:	e000      	b.n	8001230 <moveAxes+0x1c0>
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <moveAxes+0x218>)
 8001230:	f107 0010 	add.w	r0, r7, #16
 8001234:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001236:	4917      	ldr	r1, [pc, #92]	@ (8001294 <moveAxes+0x224>)
 8001238:	f008 fa34 	bl	80096a4 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f7fe ff85 	bl	8000150 <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f006 ff7d 	bl	8008150 <CDC_Transmit_FS>
        Z_move(zSteps, zDir);
 8001256:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800125a:	4619      	mov	r1, r3
 800125c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800125e:	f7ff fe9b 	bl	8000f98 <Z_move>
    }
}
 8001262:	bf00      	nop
 8001264:	3760      	adds	r7, #96	@ 0x60
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	8e38e38e 	.word	0x8e38e38e
 8001274:	401638e3 	.word	0x401638e3
 8001278:	20000360 	.word	0x20000360
 800127c:	20000364 	.word	0x20000364
 8001280:	20000368 	.word	0x20000368
 8001284:	0800b8a8 	.word	0x0800b8a8
 8001288:	0800b8b0 	.word	0x0800b8b0
 800128c:	0800b8bc 	.word	0x0800b8bc
 8001290:	0800b8e0 	.word	0x0800b8e0
 8001294:	0800b904 	.word	0x0800b904

08001298 <processGcode>:

void processGcode(const char* command) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b09e      	sub	sp, #120	@ 0x78
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    // Enviar comando procesado
    char msg[100];
    sprintf(msg, "Procesando: %s\r\n", command);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	4921      	ldr	r1, [pc, #132]	@ (800132c <processGcode+0x94>)
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 f9fb 	bl	80096a4 <siprintf>
    CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff4c 	bl	8000150 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 ff44 	bl	8008150 <CDC_Transmit_FS>
    
    // Procesar comando G0 o G1
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 80012c8:	2202      	movs	r2, #2
 80012ca:	4919      	ldr	r1, [pc, #100]	@ (8001330 <processGcode+0x98>)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f008 fa63 	bl	8009798 <strncmp>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <processGcode+0x50>
 80012d8:	2202      	movs	r2, #2
 80012da:	4916      	ldr	r1, [pc, #88]	@ (8001334 <processGcode+0x9c>)
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f008 fa5b 	bl	8009798 <strncmp>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d118      	bne.n	800131a <processGcode+0x82>
        // Procesar movimiento
        float xPos = extractParameter(command, 'X');
 80012e8:	2158      	movs	r1, #88	@ 0x58
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fe9c 	bl	8001028 <extractParameter>
 80012f0:	6778      	str	r0, [r7, #116]	@ 0x74
        float yPos = extractParameter(command, 'Y');
 80012f2:	2159      	movs	r1, #89	@ 0x59
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe97 	bl	8001028 <extractParameter>
 80012fa:	6738      	str	r0, [r7, #112]	@ 0x70
        float zPos = extractParameter(command, 'Z');
 80012fc:	215a      	movs	r1, #90	@ 0x5a
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fe92 	bl	8001028 <extractParameter>
 8001304:	66f8      	str	r0, [r7, #108]	@ 0x6c
        
        // Mover los ejes
        moveAxes(xPos, yPos, zPos);
 8001306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001308:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800130a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800130c:	f7ff feb0 	bl	8001070 <moveAxes>
        
        CDC_Transmit_FS((uint8_t*)"OK\r\n", 4);
 8001310:	2104      	movs	r1, #4
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <processGcode+0xa0>)
 8001314:	f006 ff1c 	bl	8008150 <CDC_Transmit_FS>
    if (strncmp(command, "G0", 2) == 0 || strncmp(command, "G1", 2) == 0) {
 8001318:	e004      	b.n	8001324 <processGcode+0x8c>
    } else {
        CDC_Transmit_FS((uint8_t*)"Comando no reconocido\r\n", 23);
 800131a:	2117      	movs	r1, #23
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <processGcode+0xa4>)
 800131e:	f006 ff17 	bl	8008150 <CDC_Transmit_FS>
    }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	3778      	adds	r7, #120	@ 0x78
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0800b928 	.word	0x0800b928
 8001330:	0800b93c 	.word	0x0800b93c
 8001334:	0800b940 	.word	0x0800b940
 8001338:	0800b944 	.word	0x0800b944
 800133c:	0800b94c 	.word	0x0800b94c

08001340 <loop>:

void loop(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    // Verificar fines de carrera
    if (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET) {
 8001344:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001348:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <loop+0x74>)
 800134a:	f000 fce9 	bl	8001d20 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <loop+0x1c>
        CDC_Transmit_FS((uint8_t*)"Fin de carrera X activado\r\n", 27);
 8001354:	211b      	movs	r1, #27
 8001356:	4818      	ldr	r0, [pc, #96]	@ (80013b8 <loop+0x78>)
 8001358:	f006 fefa 	bl	8008150 <CDC_Transmit_FS>
    }
    if (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET) {
 800135c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001360:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <loop+0x74>)
 8001362:	f000 fcdd 	bl	8001d20 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d103      	bne.n	8001374 <loop+0x34>
        CDC_Transmit_FS((uint8_t*)"Fin de carrera Y activado\r\n", 27);
 800136c:	211b      	movs	r1, #27
 800136e:	4813      	ldr	r0, [pc, #76]	@ (80013bc <loop+0x7c>)
 8001370:	f006 feee 	bl	8008150 <CDC_Transmit_FS>
    }
    if (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET) {
 8001374:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001378:	480e      	ldr	r0, [pc, #56]	@ (80013b4 <loop+0x74>)
 800137a:	f000 fcd1 	bl	8001d20 <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <loop+0x4c>
        CDC_Transmit_FS((uint8_t*)"Fin de carrera Z activado\r\n", 27);
 8001384:	211b      	movs	r1, #27
 8001386:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <loop+0x80>)
 8001388:	f006 fee2 	bl	8008150 <CDC_Transmit_FS>
    }

    // Procesar comandos USB CDC
    if (usbCommandComplete) {
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <loop+0x84>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00d      	beq.n	80013b0 <loop+0x70>
        processGcode(usbBuffer);
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <loop+0x88>)
 8001396:	f7ff ff7f 	bl	8001298 <processGcode>
        usbBufferIndex = 0;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <loop+0x8c>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
        usbCommandComplete = false;
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <loop+0x84>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 80013a6:	2264      	movs	r2, #100	@ 0x64
 80013a8:	2100      	movs	r1, #0
 80013aa:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <loop+0x88>)
 80013ac:	f008 f9df 	bl	800976e <memset>
    }
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	0800b964 	.word	0x0800b964
 80013bc:	0800b980 	.word	0x0800b980
 80013c0:	0800b99c 	.word	0x0800b99c
 80013c4:	200003d4 	.word	0x200003d4
 80013c8:	2000036c 	.word	0x2000036c
 80013cc:	200003d0 	.word	0x200003d0

080013d0 <setup>:

void setup(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    // Activar DWT para microsegundos
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <setup+0x58>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <setup+0x58>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <setup+0x5c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a11      	ldr	r2, [pc, #68]	@ (800142c <setup+0x5c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]
    
    // Habilitar drivers de motores (EN pins en LOW)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Habilita driver X
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <setup+0x60>)
 80013f4:	f000 fcab 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Y
 80013f8:	2200      	movs	r2, #0
 80013fa:	2110      	movs	r1, #16
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <setup+0x60>)
 80013fe:	f000 fca6 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Habilita driver Z
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001408:	480a      	ldr	r0, [pc, #40]	@ (8001434 <setup+0x64>)
 800140a:	f000 fca0 	bl	8001d4e <HAL_GPIO_WritePin>

    // Asegurar que LEDs estén apagados al inicio
    HAL_GPIO_WritePin(GPIOB, LED_HORARIO, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2101      	movs	r1, #1
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <setup+0x60>)
 8001414:	f000 fc9b 	bl	8001d4e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ANTIHORARIO, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2102      	movs	r1, #2
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <setup+0x60>)
 800141e:	f000 fc96 	bl	8001d4e <HAL_GPIO_WritePin>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000edf0 	.word	0xe000edf0
 800142c:	e0001000 	.word	0xe0001000
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40010800 	.word	0x40010800

08001438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143c:	b672      	cpsid	i
}
 800143e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <Error_Handler+0x8>

08001444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <HAL_MspInit+0x5c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6193      	str	r3, [r2, #24]
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_MspInit+0x5c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <HAL_MspInit+0x5c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146c:	61d3      	str	r3, [r2, #28]
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <HAL_MspInit+0x5c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_MspInit+0x60>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <HAL_MspInit+0x60>)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f940 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001506:	f000 fd56 	bl	8001fb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200010a8 	.word	0x200010a8

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <_kill>:

int _kill(int pid, int sig)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152c:	f008 f98c 	bl	8009848 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	2216      	movs	r2, #22
 8001534:	601a      	str	r2, [r3, #0]
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_exit>:

void _exit (int status)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffe7 	bl	8001522 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e009      	b.n	80015b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf1      	blt.n	80015a4 <_write+0x12>
  }
  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f0:	605a      	str	r2, [r3, #4]
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f008 f8f4 	bl	8009848 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20005000 	.word	0x20005000
 800168c:	00000400 	.word	0x00000400
 8001690:	200003d8 	.word	0x200003d8
 8001694:	200016f0 	.word	0x200016f0

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff fff8 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016aa:	490c      	ldr	r1, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016ac:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016c0:	4c09      	ldr	r4, [pc, #36]	@ (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f008 f8c1 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7ff fa7f 	bl	8000bd4 <main>
  bx lr
 80016d6:	4770      	bx	lr
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80016e0:	0800bdec 	.word	0x0800bdec
  ldr r2, =_sbss
 80016e4:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 80016e8:	200016ec 	.word	0x200016ec

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_Init+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_Init+0x28>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f947 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	200f      	movs	r0, #15
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fe9a 	bl	8001444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f95f 	bl	80019fe <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f927 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	20000008 	.word	0x20000008
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_IncTick+0x1c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x20>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_IncTick+0x20>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000008 	.word	0x20000008
 800179c:	200003dc 	.word	0x200003dc

080017a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <HAL_GetTick+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	200003dc 	.word	0x200003dc

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fff0 	bl	80017a0 <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffe0 	bl	80017a0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4906      	ldr	r1, [pc, #24]	@ (8001894 <__NVIC_EnableIRQ+0x34>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff90 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff2d 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff42 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff90 	bl	80018ec <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5f 	bl	8001898 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff35 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa2 	bl	8001950 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b08b      	sub	sp, #44	@ 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e169      	b.n	8001d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8158 	bne.w	8001cfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d05e      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a54:	4a98      	ldr	r2, [pc, #608]	@ (8001cb8 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d875      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a5a:	4a98      	ldr	r2, [pc, #608]	@ (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d058      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a60:	4a96      	ldr	r2, [pc, #600]	@ (8001cbc <HAL_GPIO_Init+0x2a4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d86f      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a66:	4a96      	ldr	r2, [pc, #600]	@ (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d052      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a6c:	4a94      	ldr	r2, [pc, #592]	@ (8001cc0 <HAL_GPIO_Init+0x2a8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d869      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a72:	4a94      	ldr	r2, [pc, #592]	@ (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04c      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a78:	4a92      	ldr	r2, [pc, #584]	@ (8001cc4 <HAL_GPIO_Init+0x2ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d863      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a7e:	4a92      	ldr	r2, [pc, #584]	@ (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d046      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
 8001a84:	4a90      	ldr	r2, [pc, #576]	@ (8001cc8 <HAL_GPIO_Init+0x2b0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d85d      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d82a      	bhi.n	8001ae4 <HAL_GPIO_Init+0xcc>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d859      	bhi.n	8001b46 <HAL_GPIO_Init+0x12e>
 8001a92:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_GPIO_Init+0x80>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001aed 	.word	0x08001aed
 8001aa0:	08001aff 	.word	0x08001aff
 8001aa4:	08001b41 	.word	0x08001b41
 8001aa8:	08001b47 	.word	0x08001b47
 8001aac:	08001b47 	.word	0x08001b47
 8001ab0:	08001b47 	.word	0x08001b47
 8001ab4:	08001b47 	.word	0x08001b47
 8001ab8:	08001b47 	.word	0x08001b47
 8001abc:	08001b47 	.word	0x08001b47
 8001ac0:	08001b47 	.word	0x08001b47
 8001ac4:	08001b47 	.word	0x08001b47
 8001ac8:	08001b47 	.word	0x08001b47
 8001acc:	08001b47 	.word	0x08001b47
 8001ad0:	08001b47 	.word	0x08001b47
 8001ad4:	08001b47 	.word	0x08001b47
 8001ad8:	08001b47 	.word	0x08001b47
 8001adc:	08001af5 	.word	0x08001af5
 8001ae0:	08001b09 	.word	0x08001b09
 8001ae4:	4a79      	ldr	r2, [pc, #484]	@ (8001ccc <HAL_GPIO_Init+0x2b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aea:	e02c      	b.n	8001b46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e029      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	3304      	adds	r3, #4
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e024      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	3308      	adds	r3, #8
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e01f      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e01a      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e013      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	611a      	str	r2, [r3, #16]
          break;
 8001b32:	e009      	b.n	8001b48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	615a      	str	r2, [r3, #20]
          break;
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e000      	b.n	8001b48 <HAL_GPIO_Init+0x130>
          break;
 8001b46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	d801      	bhi.n	8001b52 <HAL_GPIO_Init+0x13a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_Init+0x13e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3304      	adds	r3, #4
 8001b56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2bff      	cmp	r3, #255	@ 0xff
 8001b5c:	d802      	bhi.n	8001b64 <HAL_GPIO_Init+0x14c>
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x152>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	3b08      	subs	r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	210f      	movs	r1, #15
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	fa01 f303 	lsl.w	r3, r1, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	6a39      	ldr	r1, [r7, #32]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80b1 	beq.w	8001cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b98:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb0:	4a48      	ldr	r2, [pc, #288]	@ (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a40      	ldr	r2, [pc, #256]	@ (8001cd8 <HAL_GPIO_Init+0x2c0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d013      	beq.n	8001c04 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a3f      	ldr	r2, [pc, #252]	@ (8001cdc <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ce0 <HAL_GPIO_Init+0x2c8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d007      	beq.n	8001bfc <HAL_GPIO_Init+0x1e4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce4 <HAL_GPIO_Init+0x2cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d101      	bne.n	8001bf8 <HAL_GPIO_Init+0x1e0>
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1ee>
 8001c04:	2300      	movs	r3, #0
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c16:	492f      	ldr	r1, [pc, #188]	@ (8001cd4 <HAL_GPIO_Init+0x2bc>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	492c      	ldr	r1, [pc, #176]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4928      	ldr	r1, [pc, #160]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	4922      	ldr	r1, [pc, #136]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	491e      	ldr	r1, [pc, #120]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c80:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4918      	ldr	r1, [pc, #96]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4914      	ldr	r1, [pc, #80]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d021      	beq.n	8001cec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	490e      	ldr	r1, [pc, #56]	@ (8001ce8 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e021      	b.n	8001cfa <HAL_GPIO_Init+0x2e2>
 8001cb6:	bf00      	nop
 8001cb8:	10320000 	.word	0x10320000
 8001cbc:	10310000 	.word	0x10310000
 8001cc0:	10220000 	.word	0x10220000
 8001cc4:	10210000 	.word	0x10210000
 8001cc8:	10120000 	.word	0x10120000
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_GPIO_Init+0x304>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4909      	ldr	r1, [pc, #36]	@ (8001d1c <HAL_GPIO_Init+0x304>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f47f ae8e 	bne.w	8001a2c <HAL_GPIO_Init+0x14>
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	372c      	adds	r7, #44	@ 0x2c
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	041a      	lsls	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	611a      	str	r2, [r3, #16]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0e8      	b.n	8001f62 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f006 fb07 	bl	80083b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f002 f9f6 	bl	80041ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dcc:	f002 f9cc 	bl	8004168 <USB_CoreInit>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0bf      	b.n	8001f62 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 f9fa 	bl	80041e2 <USB_SetCurrentMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0b0      	b.n	8001f62 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e03e      	b.n	8001e84 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	440b      	add	r3, r1
 8001e14:	3311      	adds	r3, #17
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	3310      	adds	r3, #16
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3313      	adds	r3, #19
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3320      	adds	r3, #32
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3324      	adds	r3, #36	@ 0x24
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	791b      	ldrb	r3, [r3, #4]
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3bb      	bcc.n	8001e06 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e044      	b.n	8001f1e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d3b5      	bcc.n	8001e94 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f32:	f002 f962 	bl	80041fa <USB_DevInit>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e00c      	b.n	8001f62 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 fbe1 	bl	8006722 <USB_DevDisconnect>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_PCD_Start+0x16>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e016      	b.n	8001fae <HAL_PCD_Start+0x44>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 f8f8 	bl	8004182 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f92:	2101      	movs	r1, #1
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f006 fc82 	bl	800889e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fbb5 	bl	800670e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b088      	sub	sp, #32
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fbb7 	bl	8006736 <USB_ReadInterrupts>
 8001fc8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fb1a 	bl	800260e <PCD_EP_ISR_Handler>

    return;
 8001fda:	e119      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d013      	beq.n	800200e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f006 fa55 	bl	80084ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002004:	2100      	movs	r1, #0
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f905 	bl	8002216 <HAL_PCD_SetAddress>

    return;
 800200c:	e100      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00c      	beq.n	8002032 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002030:	e0ee      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00c      	beq.n	8002056 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800204e:	b292      	uxth	r2, r2
 8002050:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002054:	e0dc      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d027      	beq.n	80020b0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	b292      	uxth	r2, r2
 8002074:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0208 	bic.w	r2, r2, #8
 800208a:	b292      	uxth	r2, r2
 800208c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f006 fa45 	bl	8008520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020a8:	b292      	uxth	r2, r2
 80020aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020ae:	e0af      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8083 	beq.w	80021c2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
 80020c0:	e010      	b.n	80020e4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	7ffb      	ldrb	r3, [r7, #31]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	b292      	uxth	r2, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	3320      	adds	r3, #32
 80020d8:	443b      	add	r3, r7
 80020da:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	3301      	adds	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
 80020e4:	7ffb      	ldrb	r3, [r7, #31]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d9eb      	bls.n	80020c2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	b292      	uxth	r2, r2
 80020fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	b292      	uxth	r2, r2
 8002116:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800211a:	bf00      	nop
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002124:	b29b      	uxth	r3, r3
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f6      	beq.n	800211c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002140:	b292      	uxth	r2, r2
 8002142:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	77fb      	strb	r3, [r7, #31]
 800214a:	e00f      	b.n	800216c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4611      	mov	r1, r2
 8002154:	7ffa      	ldrb	r2, [r7, #31]
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	440a      	add	r2, r1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	3320      	adds	r3, #32
 800215e:	443b      	add	r3, r7
 8002160:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002164:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002166:	7ffb      	ldrb	r3, [r7, #31]
 8002168:	3301      	adds	r3, #1
 800216a:	77fb      	strb	r3, [r7, #31]
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	2b07      	cmp	r3, #7
 8002170:	d9ec      	bls.n	800214c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0208 	orr.w	r2, r2, #8
 8002184:	b292      	uxth	r2, r2
 8002186:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002192:	b29a      	uxth	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800219c:	b292      	uxth	r2, r2
 800219e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0204 	orr.w	r2, r2, #4
 80021b4:	b292      	uxth	r2, r2
 80021b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f006 f996 	bl	80084ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021c0:	e026      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00f      	beq.n	80021ec <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021de:	b292      	uxth	r2, r2
 80021e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f006 f954 	bl	8008492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021ea:	e011      	b.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002208:	b292      	uxth	r2, r2
 800220a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800220e:	bf00      	nop
  }
}
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_PCD_SetAddress+0x1a>
 800222c:	2302      	movs	r3, #2
 800222e:	e012      	b.n	8002256 <HAL_PCD_SetAddress+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fa4e 	bl	80066e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	4608      	mov	r0, r1
 8002268:	4611      	mov	r1, r2
 800226a:	461a      	mov	r2, r3
 800226c:	4603      	mov	r3, r0
 800226e:	70fb      	strb	r3, [r7, #3]
 8002270:	460b      	mov	r3, r1
 8002272:	803b      	strh	r3, [r7, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da0e      	bge.n	80022a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 0207 	and.w	r2, r3, #7
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	3310      	adds	r3, #16
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
 80022a0:	e00e      	b.n	80022c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 0207 	and.w	r2, r3, #7
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022cc:	883a      	ldrh	r2, [r7, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	78ba      	ldrb	r2, [r7, #2]
 80022d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022d8:	78bb      	ldrb	r3, [r7, #2]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d102      	bne.n	80022e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_Open+0x94>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e00e      	b.n	8002310 <HAL_PCD_EP_Open+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f001 ff97 	bl	8004234 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800230e:	7afb      	ldrb	r3, [r7, #11]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da0e      	bge.n	800234a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 0207 	and.w	r2, r3, #7
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	3310      	adds	r3, #16
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	705a      	strb	r2, [r3, #1]
 8002348:	e00e      	b.n	8002368 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 0207 	and.w	r2, r3, #7
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_PCD_EP_Close+0x6a>
 800237e:	2302      	movs	r3, #2
 8002380:	e00e      	b.n	80023a0 <HAL_PCD_EP_Close+0x88>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fb0f 	bl	80049b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f003 0207 	and.w	r2, r3, #7
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fcc6 	bl	8004d8c <USB_EPStartXfer>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002416:	78fb      	ldrb	r3, [r7, #3]
 8002418:	f003 0207 	and.w	r2, r3, #7
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800242c:	681b      	ldr	r3, [r3, #0]
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	460b      	mov	r3, r1
 8002446:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	3310      	adds	r3, #16
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2201      	movs	r2, #1
 8002482:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	b2da      	uxtb	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	4618      	mov	r0, r3
 8002498:	f002 fc78 	bl	8004d8c <USB_EPStartXfer>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	7912      	ldrb	r2, [r2, #4]
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e04c      	b.n	800255e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da0e      	bge.n	80024ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 0207 	and.w	r2, r3, #7
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	3310      	adds	r3, #16
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	705a      	strb	r2, [r3, #1]
 80024e8:	e00c      	b.n	8002504 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_PCD_EP_SetStall+0x7e>
 8002520:	2302      	movs	r3, #2
 8002522:	e01c      	b.n	800255e <HAL_PCD_EP_SetStall+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f003 ffdb 	bl	80064ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f004 f900 	bl	8006754 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	7912      	ldrb	r2, [r2, #4]
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e040      	b.n	8002606 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002588:	2b00      	cmp	r3, #0
 800258a:	da0e      	bge.n	80025aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 0207 	and.w	r2, r3, #7
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	3310      	adds	r3, #16
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2201      	movs	r2, #1
 80025a6:	705a      	strb	r2, [r3, #1]
 80025a8:	e00e      	b.n	80025c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	f003 0207 	and.w	r2, r3, #7
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_PCD_EP_ClrStall+0x82>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e00e      	b.n	8002606 <HAL_PCD_EP_ClrStall+0xa0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 ffc9 	bl	800658e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b096      	sub	sp, #88	@ 0x58
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002616:	e3bb      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002620:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002624:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002632:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8175 	bne.w	8002926 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d14e      	bne.n	80026e6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002668:	b29b      	uxth	r3, r3
 800266a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3310      	adds	r3, #16
 8002670:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	3302      	adds	r3, #2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800269a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800269c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800269e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	441a      	add	r2, r3
 80026a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026ac:	2100      	movs	r1, #0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f005 fed5 	bl	800845e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7b5b      	ldrb	r3, [r3, #13]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8368 	beq.w	8002d90 <PCD_EP_ISR_Handler+0x782>
 80026c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 8363 	bne.w	8002d90 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7b5b      	ldrb	r3, [r3, #13]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	735a      	strb	r2, [r3, #13]
 80026e4:	e354      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ec:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002700:	2b00      	cmp	r3, #0
 8002702:	d034      	beq.n	800276e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	3306      	adds	r3, #6
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800273a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800273e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002740:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002742:	b29b      	uxth	r3, r3
 8002744:	f004 f857 	bl	80067f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29a      	uxth	r2, r3
 8002750:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002754:	4013      	ands	r3, r2
 8002756:	823b      	strh	r3, [r7, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	8a3a      	ldrh	r2, [r7, #16]
 800275e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002762:	b292      	uxth	r2, r2
 8002764:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f005 fe4c 	bl	8008404 <HAL_PCD_SetupStageCallback>
 800276c:	e310      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800276e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002772:	2b00      	cmp	r3, #0
 8002774:	f280 830c 	bge.w	8002d90 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29a      	uxth	r2, r3
 8002780:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002784:	4013      	ands	r3, r2
 8002786:	83fb      	strh	r3, [r7, #30]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	8bfa      	ldrh	r2, [r7, #30]
 800278e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002792:	b292      	uxth	r2, r2
 8002794:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4413      	add	r3, r2
 80027aa:	3306      	adds	r3, #6
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <PCD_EP_ISR_Handler+0x1f0>
 80027ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d8:	6959      	ldr	r1, [r3, #20]
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f004 f807 	bl	80067f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	441a      	add	r2, r3
 80027f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027f6:	2100      	movs	r1, #0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f005 fe15 	bl	8008428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002808:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800280c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 82bd 	bne.w	8002d90 <PCD_EP_ISR_Handler+0x782>
 8002816:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800281a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800281e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002822:	f000 82b5 	beq.w	8002d90 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002850:	b29a      	uxth	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	801a      	strh	r2, [r3, #0]
 8002856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b3e      	cmp	r3, #62	@ 0x3e
 800285c:	d91d      	bls.n	800289a <PCD_EP_ISR_Handler+0x28c>
 800285e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <PCD_EP_ISR_Handler+0x26a>
 8002872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002874:	3b01      	subs	r3, #1
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29a      	uxth	r2, r3
 800287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002880:	b29b      	uxth	r3, r3
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	b29b      	uxth	r3, r3
 8002886:	4313      	orrs	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002892:	b29a      	uxth	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e026      	b.n	80028e8 <PCD_EP_ISR_Handler+0x2da>
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <PCD_EP_ISR_Handler+0x2aa>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	801a      	strh	r2, [r3, #0]
 80028b6:	e017      	b.n	80028e8 <PCD_EP_ISR_Handler+0x2da>
 80028b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <PCD_EP_ISR_Handler+0x2c4>
 80028cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ce:	3301      	adds	r3, #1
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	b29b      	uxth	r3, r3
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4313      	orrs	r3, r2
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f8:	827b      	strh	r3, [r7, #18]
 80028fa:	8a7b      	ldrh	r3, [r7, #18]
 80028fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002900:	827b      	strh	r3, [r7, #18]
 8002902:	8a7b      	ldrh	r3, [r7, #18]
 8002904:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002908:	827b      	strh	r3, [r7, #18]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	8a7b      	ldrh	r3, [r7, #18]
 8002910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002920:	b29b      	uxth	r3, r3
 8002922:	8013      	strh	r3, [r2, #0]
 8002924:	e234      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800293a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800293e:	2b00      	cmp	r3, #0
 8002940:	f280 80fc 	bge.w	8002b3c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29a      	uxth	r2, r3
 8002956:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800295a:	4013      	ands	r3, r2
 800295c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002972:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002976:	b292      	uxth	r2, r2
 8002978:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800297a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002992:	7b1b      	ldrb	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d125      	bne.n	80029e4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	3306      	adds	r3, #6
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80029c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 8092 	beq.w	8002af2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	88da      	ldrh	r2, [r3, #6]
 80029da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029de:	f003 ff0a 	bl	80067f6 <USB_ReadPMA>
 80029e2:	e086      	b.n	8002af2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e6:	78db      	ldrb	r3, [r3, #3]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d10a      	bne.n	8002a02 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029f0:	461a      	mov	r2, r3
 80029f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9d9 	bl	8002dac <HAL_PCD_EP_DB_Receive>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002a00:	e077      	b.n	8002af2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d024      	beq.n	8002aaa <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	3302      	adds	r3, #2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a88:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002a8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02e      	beq.n	8002af2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9a:	6959      	ldr	r1, [r3, #20]
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9e:	891a      	ldrh	r2, [r3, #8]
 8002aa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aa4:	f003 fea7 	bl	80067f6 <USB_ReadPMA>
 8002aa8:	e023      	b.n	8002af2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	3306      	adds	r3, #6
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002ad6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae4:	6959      	ldr	r1, [r3, #20]
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	895a      	ldrh	r2, [r3, #10]
 8002aea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002aee:	f003 fe82 	bl	80067f6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002afa:	441a      	add	r2, r3
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b08:	441a      	add	r2, r3
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <PCD_EP_ISR_Handler+0x514>
 8002b16:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d206      	bcs.n	8002b30 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	4619      	mov	r1, r3
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f005 fc7d 	bl	8008428 <HAL_PCD_DataOutStageCallback>
 8002b2e:	e005      	b.n	8002b3c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 f928 	bl	8004d8c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8123 	beq.w	8002d90 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b4a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	3310      	adds	r3, #16
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b78:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9c:	78db      	ldrb	r3, [r3, #3]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	f040 80a2 	bne.w	8002ce8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bac:	7b1b      	ldrb	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8093 	beq.w	8002cda <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d046      	beq.n	8002c4e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d126      	bne.n	8002c16 <PCD_EP_ISR_Handler+0x608>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	4413      	add	r3, r2
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	011a      	lsls	r2, r3, #4
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	4413      	add	r3, r2
 8002bea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bee:	623b      	str	r3, [r7, #32]
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	801a      	strh	r2, [r3, #0]
 8002c14:	e061      	b.n	8002cda <PCD_EP_ISR_Handler+0x6cc>
 8002c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d15d      	bne.n	8002cda <PCD_EP_ISR_Handler+0x6cc>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c32:	4413      	add	r3, r2
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	011a      	lsls	r2, r3, #4
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	4413      	add	r3, r2
 8002c40:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	e045      	b.n	8002cda <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c56:	785b      	ldrb	r3, [r3, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d126      	bne.n	8002caa <PCD_EP_ISR_Handler+0x69c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	4413      	add	r3, r2
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	011a      	lsls	r2, r3, #4
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	801a      	strh	r2, [r3, #0]
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	e017      	b.n	8002cda <PCD_EP_ISR_Handler+0x6cc>
 8002caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d113      	bne.n	8002cda <PCD_EP_ISR_Handler+0x6cc>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	011a      	lsls	r2, r3, #4
 8002cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ccc:	4413      	add	r3, r2
 8002cce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f005 fbbc 	bl	800845e <HAL_PCD_DataInStageCallback>
 8002ce6:	e053      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ce8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d146      	bne.n	8002d82 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d907      	bls.n	8002d3c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d34:	1ad2      	subs	r2, r2, r3
 8002d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e002      	b.n	8002d42 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 fb84 	bl	800845e <HAL_PCD_DataInStageCallback>
 8002d56:	e01b      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d60:	441a      	add	r2, r3
 8002d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d6e:	441a      	add	r2, r3
 8002d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 f806 	bl	8004d8c <USB_EPStartXfer>
 8002d80:	e006      	b.n	8002d90 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d86:	461a      	mov	r2, r3
 8002d88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f91b 	bl	8002fc6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f6ff ac3b 	blt.w	8002618 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3758      	adds	r7, #88	@ 0x58
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d07e      	beq.n	8002ec2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	8b7b      	ldrh	r3, [r7, #26]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d306      	bcc.n	8002e06 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	699a      	ldr	r2, [r3, #24]
 8002dfc:	8b7b      	ldrh	r3, [r7, #26]
 8002dfe:	1ad2      	subs	r2, r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	619a      	str	r2, [r3, #24]
 8002e04:	e002      	b.n	8002e0c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d123      	bne.n	8002e5c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	833b      	strh	r3, [r7, #24]
 8002e30:	8b3b      	ldrh	r3, [r7, #24]
 8002e32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e36:	833b      	strh	r3, [r7, #24]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	8b3b      	ldrh	r3, [r7, #24]
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01f      	beq.n	8002ea6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e80:	82fb      	strh	r3, [r7, #22]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	8afb      	ldrh	r3, [r7, #22]
 8002e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8087 	beq.w	8002fbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6959      	ldr	r1, [r3, #20]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	891a      	ldrh	r2, [r3, #8]
 8002eba:	8b7b      	ldrh	r3, [r7, #26]
 8002ebc:	f003 fc9b 	bl	80067f6 <USB_ReadPMA>
 8002ec0:	e07c      	b.n	8002fbc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3306      	adds	r3, #6
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	8b7b      	ldrh	r3, [r7, #26]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d306      	bcc.n	8002f04 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	8b7b      	ldrh	r3, [r7, #26]
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	619a      	str	r2, [r3, #24]
 8002f02:	e002      	b.n	8002f0a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d123      	bne.n	8002f5a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2c:	83fb      	strh	r3, [r7, #30]
 8002f2e:	8bfb      	ldrh	r3, [r7, #30]
 8002f30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f34:	83fb      	strh	r3, [r7, #30]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	8bfb      	ldrh	r3, [r7, #30]
 8002f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11f      	bne.n	8002fa4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	83bb      	strh	r3, [r7, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	8bbb      	ldrh	r3, [r7, #28]
 8002f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fa4:	8b7b      	ldrh	r3, [r7, #26]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6959      	ldr	r1, [r3, #20]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	895a      	ldrh	r2, [r3, #10]
 8002fb6:	8b7b      	ldrh	r3, [r7, #26]
 8002fb8:	f003 fc1d 	bl	80067f6 <USB_ReadPMA>
    }
  }

  return count;
 8002fbc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b0a4      	sub	sp, #144	@ 0x90
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 81dd 	beq.w	800339a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003008:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003014:	429a      	cmp	r2, r3
 8003016:	d907      	bls.n	8003028 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003020:	1ad2      	subs	r2, r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	619a      	str	r2, [r3, #24]
 8003026:	e002      	b.n	800302e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 80b9 	bne.w	80031aa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d126      	bne.n	800308e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800304e:	b29b      	uxth	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	4413      	add	r3, r2
 8003056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003060:	4413      	add	r3, r2
 8003062:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003072:	b29a      	uxth	r2, r3
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29a      	uxth	r2, r3
 8003088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e01a      	b.n	80030c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d116      	bne.n	80030c4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030aa:	4413      	add	r3, r2
 80030ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	011a      	lsls	r2, r3, #4
 80030b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b6:	4413      	add	r3, r2
 80030b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d126      	bne.n	8003120 <HAL_PCD_EP_DB_Transmit+0x15a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	011a      	lsls	r2, r3, #4
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003104:	b29a      	uxth	r2, r3
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	801a      	strh	r2, [r3, #0]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003118:	b29a      	uxth	r2, r3
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	e017      	b.n	8003150 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d113      	bne.n	8003150 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003130:	b29b      	uxth	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	4413      	add	r3, r2
 8003138:	627b      	str	r3, [r7, #36]	@ 0x24
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	011a      	lsls	r2, r3, #4
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	4413      	add	r3, r2
 8003144:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f005 f981 	bl	800845e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 82fc 	beq.w	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	82fb      	strh	r3, [r7, #22]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	8afb      	ldrh	r3, [r7, #22]
 8003194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800319c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	8013      	strh	r3, [r2, #0]
 80031a8:	e2da      	b.n	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d021      	beq.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80031e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 82ae 	bne.w	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800320c:	441a      	add	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800321a:	441a      	add	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d30b      	bcc.n	8003244 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800323c:	1ad2      	subs	r2, r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	621a      	str	r2, [r3, #32]
 8003242:	e017      	b.n	8003274 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d108      	bne.n	800325e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800324c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800325c:	e00a      	b.n	8003274 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d165      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x382>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800328a:	b29b      	uxth	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003290:	4413      	add	r3, r2
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	011a      	lsls	r2, r3, #4
 800329a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329c:	4413      	add	r3, r2
 800329e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80032ba:	d91d      	bls.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x332>
 80032bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c0:	095b      	lsrs	r3, r3, #5
 80032c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x310>
 80032d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032d2:	3b01      	subs	r3, #1
 80032d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032de:	b29b      	uxth	r3, r3
 80032e0:	029b      	lsls	r3, r3, #10
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e044      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80032f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_PCD_EP_DB_Transmit+0x350>
 8003300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800330e:	b29a      	uxth	r2, r3
 8003310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	e035      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800331e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_PCD_EP_DB_Transmit+0x36a>
 800332a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332c:	3301      	adds	r3, #1
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29a      	uxth	r2, r3
 8003336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003338:	b29b      	uxth	r3, r3
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	b29b      	uxth	r3, r3
 800333e:	4313      	orrs	r3, r2
 8003340:	b29a      	uxth	r2, r3
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	e01c      	b.n	8003382 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d118      	bne.n	8003382 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003364:	4413      	add	r3, r2
 8003366:	647b      	str	r3, [r7, #68]	@ 0x44
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	011a      	lsls	r2, r3, #4
 800336e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003370:	4413      	add	r3, r2
 8003372:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003376:	643b      	str	r3, [r7, #64]	@ 0x40
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800337c:	b29a      	uxth	r2, r3
 800337e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003380:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6959      	ldr	r1, [r3, #20]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	891a      	ldrh	r2, [r3, #8]
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003392:	b29b      	uxth	r3, r3
 8003394:	f003 f9e9 	bl	800676a <USB_WritePMA>
 8003398:	e1e2      	b.n	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	3306      	adds	r3, #6
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d307      	bcc.n	80033e2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033da:	1ad2      	subs	r2, r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	619a      	str	r2, [r3, #24]
 80033e0:	e002      	b.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 80c0 	bne.w	8003572 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d126      	bne.n	8003448 <HAL_PCD_EP_DB_Transmit+0x482>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800340e:	4413      	add	r3, r2
 8003410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800341a:	4413      	add	r3, r2
 800341c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800342c:	b29a      	uxth	r2, r3
 800342e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003430:	801a      	strh	r2, [r3, #0]
 8003432:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800343c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003440:	b29a      	uxth	r2, r3
 8003442:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	e01a      	b.n	800347e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d116      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	667b      	str	r3, [r7, #100]	@ 0x64
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800345e:	b29b      	uxth	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003464:	4413      	add	r3, r2
 8003466:	667b      	str	r3, [r7, #100]	@ 0x64
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	011a      	lsls	r2, r3, #4
 800346e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003470:	4413      	add	r3, r2
 8003472:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003476:	663b      	str	r3, [r7, #96]	@ 0x60
 8003478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347a:	2200      	movs	r2, #0
 800347c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	677b      	str	r3, [r7, #116]	@ 0x74
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d12b      	bne.n	80034e4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034a0:	4413      	add	r3, r2
 80034a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	011a      	lsls	r2, r3, #4
 80034aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034da:	b29a      	uxth	r2, r3
 80034dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	e017      	b.n	8003514 <HAL_PCD_EP_DB_Transmit+0x54e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d113      	bne.n	8003514 <HAL_PCD_EP_DB_Transmit+0x54e>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fa:	4413      	add	r3, r2
 80034fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	011a      	lsls	r2, r3, #4
 8003504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003506:	4413      	add	r3, r2
 8003508:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800350c:	673b      	str	r3, [r7, #112]	@ 0x70
 800350e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003510:	2200      	movs	r2, #0
 8003512:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f004 ff9f 	bl	800845e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 811a 	bne.w	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800355c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003560:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003564:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
 8003570:	e0f6      	b.n	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d121      	bne.n	80035c0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003596:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	f040 80ca 	bne.w	8003760 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035d4:	441a      	add	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80035e2:	441a      	add	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d30b      	bcc.n	800360c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003604:	1ad2      	subs	r2, r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	621a      	str	r2, [r3, #32]
 800360a:	e017      	b.n	800363c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d108      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003614:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003618:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003624:	e00a      	b.n	800363c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2200      	movs	r2, #0
 8003632:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	657b      	str	r3, [r7, #84]	@ 0x54
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d165      	bne.n	8003716 <HAL_PCD_EP_DB_Transmit+0x750>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800365e:	4413      	add	r3, r2
 8003660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	011a      	lsls	r2, r3, #4
 8003668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366a:	4413      	add	r3, r2
 800366c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367c:	b29a      	uxth	r2, r3
 800367e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003686:	2b3e      	cmp	r3, #62	@ 0x3e
 8003688:	d91d      	bls.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x700>
 800368a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x6de>
 800369e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a0:	3b01      	subs	r3, #1
 80036a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	4313      	orrs	r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e041      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x784>
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80036ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e032      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x784>
 80036e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_PCD_EP_DB_Transmit+0x738>
 80036f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036fa:	3301      	adds	r3, #1
 80036fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29a      	uxth	r2, r3
 8003704:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003706:	b29b      	uxth	r3, r3
 8003708:	029b      	lsls	r3, r3, #10
 800370a:	b29b      	uxth	r3, r3
 800370c:	4313      	orrs	r3, r2
 800370e:	b29a      	uxth	r2, r3
 8003710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	e019      	b.n	800374a <HAL_PCD_EP_DB_Transmit+0x784>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	785b      	ldrb	r3, [r3, #1]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d115      	bne.n	800374a <HAL_PCD_EP_DB_Transmit+0x784>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	4413      	add	r3, r2
 800372e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	011a      	lsls	r2, r3, #4
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	4413      	add	r3, r2
 800373a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800373e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003744:	b29a      	uxth	r2, r3
 8003746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003748:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6959      	ldr	r1, [r3, #20]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	895a      	ldrh	r2, [r3, #10]
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800375a:	b29b      	uxth	r3, r3
 800375c:	f003 f805 	bl	800676a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377a:	82bb      	strh	r3, [r7, #20]
 800377c:	8abb      	ldrh	r3, [r7, #20]
 800377e:	f083 0310 	eor.w	r3, r3, #16
 8003782:	82bb      	strh	r3, [r7, #20]
 8003784:	8abb      	ldrh	r3, [r7, #20]
 8003786:	f083 0320 	eor.w	r3, r3, #32
 800378a:	82bb      	strh	r3, [r7, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	8abb      	ldrh	r3, [r7, #20]
 800379c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3790      	adds	r7, #144	@ 0x90
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	817b      	strh	r3, [r7, #10]
 80037c8:	4613      	mov	r3, r2
 80037ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037cc:	897b      	ldrh	r3, [r7, #10]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	3310      	adds	r3, #16
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e009      	b.n	8003804 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f0:	897a      	ldrh	r2, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	b29a      	uxth	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	80da      	strh	r2, [r3, #6]
 8003818:	e00b      	b.n	8003832 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2201      	movs	r2, #1
 800381e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	b29a      	uxth	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	b29a      	uxth	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	371c      	adds	r7, #28
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
	...

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e272      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003860:	4b92      	ldr	r3, [pc, #584]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00c      	beq.n	8003886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d112      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
 8003878:	4b8c      	ldr	r3, [pc, #560]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d10b      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06c      	beq.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e24c      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x76>
 80038a8:	4b80      	ldr	r3, [pc, #512]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a7f      	ldr	r2, [pc, #508]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e02e      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b7b      	ldr	r3, [pc, #492]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7a      	ldr	r2, [pc, #488]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b78      	ldr	r3, [pc, #480]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a77      	ldr	r2, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xbc>
 80038e2:	4b72      	ldr	r3, [pc, #456]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a71      	ldr	r2, [pc, #452]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6a      	ldr	r2, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b68      	ldr	r3, [pc, #416]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a67      	ldr	r2, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fd ff40 	bl	80017a0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fd ff3c 	bl	80017a0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	@ 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e200      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b5d      	ldr	r3, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xe4>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd ff2c 	bl	80017a0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fd ff28 	bl	80017a0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1ec      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b53      	ldr	r3, [pc, #332]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x10c>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003986:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
 8003992:	4b46      	ldr	r3, [pc, #280]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b43      	ldr	r3, [pc, #268]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1c0      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4939      	ldr	r1, [pc, #228]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b36      	ldr	r3, [pc, #216]	@ (8003ab0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fd fee1 	bl	80017a0 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fd fedd 	bl	80017a0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2d      	ldr	r3, [pc, #180]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b2a      	ldr	r3, [pc, #168]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4927      	ldr	r1, [pc, #156]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b26      	ldr	r3, [pc, #152]	@ (8003ab0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fec0 	bl	80017a0 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fd febc 	bl	80017a0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e180      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03a      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b17      	ldr	r3, [pc, #92]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fea0 	bl	80017a0 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fd fe9c 	bl	80017a0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e160      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f000 fa9c 	bl	8003fc0 <RCC_Delay>
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fd fe86 	bl	80017a0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fd fe82 	bl	80017a0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d908      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e146      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000
 8003ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	4b92      	ldr	r3, [pc, #584]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e9      	bne.n	8003a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a6 	beq.w	8003c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b88      	ldr	r3, [pc, #544]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a87      	ldr	r2, [pc, #540]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b85      	ldr	r3, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b82      	ldr	r3, [pc, #520]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fd fe43 	bl	80017a0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fd fe3f 	bl	80017a0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	@ 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e103      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b75      	ldr	r3, [pc, #468]	@ (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b44:	4b6f      	ldr	r3, [pc, #444]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e02d      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a69      	ldr	r2, [pc, #420]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	4b67      	ldr	r3, [pc, #412]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	e01c      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x356>
 8003b7c:	4b61      	ldr	r3, [pc, #388]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	4b5e      	ldr	r3, [pc, #376]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e00b      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a57      	ldr	r2, [pc, #348]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd fdf3 	bl	80017a0 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fd fdef 	bl	80017a0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0b1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ee      	beq.n	8003bbe <HAL_RCC_OscConfig+0x37e>
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fd fddd 	bl	80017a0 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fd fdd9 	bl	80017a0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e09b      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	4b40      	ldr	r3, [pc, #256]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b3c      	ldr	r3, [pc, #240]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	4b36      	ldr	r3, [pc, #216]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d061      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d146      	bne.n	8003cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b33      	ldr	r3, [pc, #204]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd fdad 	bl	80017a0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fd fda9 	bl	80017a0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e06d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	4b29      	ldr	r3, [pc, #164]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c72:	4b24      	ldr	r3, [pc, #144]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	430b      	orrs	r3, r1
 8003c96:	491b      	ldr	r1, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fd fd7d 	bl	80017a0 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fd fd79 	bl	80017a0 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
 8003cc8:	e035      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd fd66 	bl	80017a0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd fd62 	bl	80017a0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e026      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x498>
 8003cf6:	e01e      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e019      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <HAL_RCC_OscConfig+0x500>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4965      	ldr	r1, [pc, #404]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a58      	ldr	r2, [pc, #352]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e34:	f7fd fcb4 	bl	80017a0 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fd fcb0 	bl	80017a0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4922      	ldr	r1, [pc, #136]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1cc>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fd fc12 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	0800ba00 	.word	0x0800ba00
 8003f10:	20000000 	.word	0x20000000
 8003f14:	20000004 	.word	0x20000004

08003f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x30>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d003      	beq.n	8003f4e <HAL_RCC_GetSysClockFreq+0x36>
 8003f46:	e027      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	613b      	str	r3, [r7, #16]
      break;
 8003f4c:	e027      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a17      	ldr	r2, [pc, #92]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f66:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x94>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0c5b      	lsrs	r3, r3, #17
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	4a11      	ldr	r2, [pc, #68]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	fb03 f202 	mul.w	r2, r3, r2
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e004      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	613b      	str	r3, [r7, #16]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f9a:	613b      	str	r3, [r7, #16]
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	693b      	ldr	r3, [r7, #16]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	007a1200 	.word	0x007a1200
 8003fb4:	0800ba10 	.word	0x0800ba10
 8003fb8:	0800ba20 	.word	0x0800ba20
 8003fbc:	003d0900 	.word	0x003d0900

08003fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff4 <RCC_Delay+0x34>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff8 <RCC_Delay+0x38>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0a5b      	lsrs	r3, r3, #9
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fdc:	bf00      	nop
  }
  while (Delay --);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	60fa      	str	r2, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f9      	bne.n	8003fdc <RCC_Delay+0x1c>
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	10624dd3 	.word	0x10624dd3

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d07d      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004018:	2300      	movs	r3, #0
 800401a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401c:	4b4f      	ldr	r3, [pc, #316]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004028:	4b4c      	ldr	r3, [pc, #304]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4a4b      	ldr	r2, [pc, #300]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004032:	61d3      	str	r3, [r2, #28]
 8004034:	4b49      	ldr	r3, [pc, #292]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004040:	2301      	movs	r3, #1
 8004042:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b46      	ldr	r3, [pc, #280]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d118      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004050:	4b43      	ldr	r3, [pc, #268]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a42      	ldr	r2, [pc, #264]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405c:	f7fd fba0 	bl	80017a0 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	e008      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004064:	f7fd fb9c 	bl	80017a0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e06d      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b3a      	ldr	r3, [pc, #232]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004082:	4b36      	ldr	r3, [pc, #216]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02e      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d027      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a0:	4b2e      	ldr	r3, [pc, #184]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040aa:	4b2e      	ldr	r3, [pc, #184]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040b6:	4a29      	ldr	r2, [pc, #164]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7fd fb6b 	bl	80017a0 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	e00a      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd fb67 	bl	80017a0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d901      	bls.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e036      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ee      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f0:	4b1a      	ldr	r3, [pc, #104]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4917      	ldr	r1, [pc, #92]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b14      	ldr	r3, [pc, #80]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	4a13      	ldr	r2, [pc, #76]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004112:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004120:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	490b      	ldr	r1, [pc, #44]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413e:	4b07      	ldr	r3, [pc, #28]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4904      	ldr	r1, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
 8004164:	42420440 	.word	0x42420440

08004168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4638      	mov	r0, r7
 8004172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004192:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004196:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041b6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80041ba:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	4638      	mov	r0, r7
 8004204:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004234:	b480      	push	{r7}
 8004236:	b09d      	sub	sp, #116	@ 0x74
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	78db      	ldrb	r3, [r3, #3]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d81f      	bhi.n	80042a6 <USB_ActivateEndpoint+0x72>
 8004266:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <USB_ActivateEndpoint+0x38>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004299 	.word	0x08004299
 8004274:	080042af 	.word	0x080042af
 8004278:	0800428b 	.word	0x0800428b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800427c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004280:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004284:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004288:	e012      	b.n	80042b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800428a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800428e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004292:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004296:	e00b      	b.n	80042b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004298:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800429c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80042a4:	e004      	b.n	80042b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80042ac:	e000      	b.n	80042b0 <USB_ActivateEndpoint+0x7c>
      break;
 80042ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	7812      	ldrb	r2, [r2, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	441a      	add	r2, r3
 80042fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800430a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800430e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004312:	b29b      	uxth	r3, r3
 8004314:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	7b1b      	ldrb	r3, [r3, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8178 	bne.w	8004610 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	785b      	ldrb	r3, [r3, #1]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8084 	beq.w	8004432 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	011a      	lsls	r2, r3, #4
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	88db      	ldrh	r3, [r3, #6]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	b29b      	uxth	r3, r3
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	827b      	strh	r3, [r7, #18]
 800436c:	8a7b      	ldrh	r3, [r7, #18]
 800436e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01b      	beq.n	80043ae <USB_ActivateEndpoint+0x17a>
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438c:	823b      	strh	r3, [r7, #16]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8a3b      	ldrh	r3, [r7, #16]
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	78db      	ldrb	r3, [r3, #3]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d020      	beq.n	80043f8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043cc:	81bb      	strh	r3, [r7, #12]
 80043ce:	89bb      	ldrh	r3, [r7, #12]
 80043d0:	f083 0320 	eor.w	r3, r3, #32
 80043d4:	81bb      	strh	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	89bb      	ldrh	r3, [r7, #12]
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]
 80043f6:	e2d5      	b.n	80049a4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800440a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440e:	81fb      	strh	r3, [r7, #14]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	89fb      	ldrh	r3, [r7, #14]
 800441c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800442c:	b29b      	uxth	r3, r3
 800442e:	8013      	strh	r3, [r2, #0]
 8004430:	e2b8      	b.n	80049a4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	633b      	str	r3, [r7, #48]	@ 0x30
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004442:	4413      	add	r3, r2
 8004444:	633b      	str	r3, [r7, #48]	@ 0x30
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444e:	4413      	add	r3, r2
 8004450:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	88db      	ldrh	r3, [r3, #6]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	b29b      	uxth	r3, r3
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004464:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004470:	b29b      	uxth	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	4413      	add	r3, r2
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	011a      	lsls	r2, r3, #4
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	4413      	add	r3, r2
 8004484:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004494:	b29a      	uxth	r2, r3
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b3e      	cmp	r3, #62	@ 0x3e
 80044a0:	d91d      	bls.n	80044de <USB_ActivateEndpoint+0x2aa>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <USB_ActivateEndpoint+0x288>
 80044b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044b8:	3b01      	subs	r3, #1
 80044ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	029b      	lsls	r3, r3, #10
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4313      	orrs	r3, r2
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e026      	b.n	800452c <USB_ActivateEndpoint+0x2f8>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <USB_ActivateEndpoint+0x2c8>
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e017      	b.n	800452c <USB_ActivateEndpoint+0x2f8>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <USB_ActivateEndpoint+0x2e2>
 8004510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004512:	3301      	adds	r3, #1
 8004514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800451e:	b29b      	uxth	r3, r3
 8004520:	029b      	lsls	r3, r3, #10
 8004522:	b29b      	uxth	r3, r3
 8004524:	4313      	orrs	r3, r2
 8004526:	b29a      	uxth	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	847b      	strh	r3, [r7, #34]	@ 0x22
 800453a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800453c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <USB_ActivateEndpoint+0x348>
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455a:	843b      	strh	r3, [r7, #32]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8c3b      	ldrh	r3, [r7, #32]
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d124      	bne.n	80045ce <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459a:	83bb      	strh	r3, [r7, #28]
 800459c:	8bbb      	ldrh	r3, [r7, #28]
 800459e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80045a2:	83bb      	strh	r3, [r7, #28]
 80045a4:	8bbb      	ldrh	r3, [r7, #28]
 80045a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045aa:	83bb      	strh	r3, [r7, #28]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8bbb      	ldrh	r3, [r7, #28]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
 80045cc:	e1ea      	b.n	80049a4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e4:	83fb      	strh	r3, [r7, #30]
 80045e6:	8bfb      	ldrh	r3, [r7, #30]
 80045e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045ec:	83fb      	strh	r3, [r7, #30]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8bfb      	ldrh	r3, [r7, #30]
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]
 800460e:	e1c9      	b.n	80049a4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	78db      	ldrb	r3, [r3, #3]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d11e      	bne.n	8004656 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004648:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800464c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]
 8004654:	e01d      	b.n	8004692 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800467e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800468a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468e:	b29b      	uxth	r3, r3
 8004690:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a2:	4413      	add	r3, r2
 80046a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	011a      	lsls	r2, r3, #4
 80046ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	891b      	ldrh	r3, [r3, #8]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d6:	4413      	add	r3, r2
 80046d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	011a      	lsls	r2, r3, #4
 80046e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80046e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	895b      	ldrh	r3, [r3, #10]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 8093 	bne.w	800482a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <USB_ActivateEndpoint+0x524>
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	441a      	add	r2, r3
 8004742:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004766:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <USB_ActivateEndpoint+0x574>
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004786:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800479c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047c2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80047ce:	873b      	strh	r3, [r7, #56]	@ 0x38
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80047dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004806:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	441a      	add	r2, r3
 8004812:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800481c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]
 8004828:	e0bc      	b.n	80049a4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800483a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800483e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <USB_ActivateEndpoint+0x64e>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004876:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800487a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004892:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01d      	beq.n	80048da <USB_ActivateEndpoint+0x6a6>
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	78db      	ldrb	r3, [r3, #3]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d024      	beq.n	800492c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80048fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004900:	f083 0320 	eor.w	r3, r3, #32
 8004904:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]
 800492a:	e01d      	b.n	8004968 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004942:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80049a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3774      	adds	r7, #116	@ 0x74
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop

080049b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08d      	sub	sp, #52	@ 0x34
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	7b1b      	ldrb	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 808e 	bne.w	8004ae4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d044      	beq.n	8004a5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	81bb      	strh	r3, [r7, #12]
 80049de:	89bb      	ldrh	r3, [r7, #12]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <USB_DeactivateEndpoint+0x6c>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	817b      	strh	r3, [r7, #10]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a36:	813b      	strh	r3, [r7, #8]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	893b      	ldrh	r3, [r7, #8]
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
 8004a58:	e192      	b.n	8004d80 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	827b      	strh	r3, [r7, #18]
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d01b      	beq.n	8004aaa <USB_DeactivateEndpoint+0xf6>
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a88:	823b      	strh	r3, [r7, #16]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	8a3b      	ldrh	r3, [r7, #16]
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac0:	81fb      	strh	r3, [r7, #14]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]
 8004ae2:	e14d      	b.n	8004d80 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f040 80a5 	bne.w	8004c38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	843b      	strh	r3, [r7, #32]
 8004afc:	8c3b      	ldrh	r3, [r7, #32]
 8004afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01b      	beq.n	8004b3e <USB_DeactivateEndpoint+0x18a>
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1c:	83fb      	strh	r3, [r7, #30]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	441a      	add	r2, r3
 8004b28:	8bfb      	ldrh	r3, [r7, #30]
 8004b2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	83bb      	strh	r3, [r7, #28]
 8004b4c:	8bbb      	ldrh	r3, [r7, #28]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01b      	beq.n	8004b8e <USB_DeactivateEndpoint+0x1da>
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6c:	837b      	strh	r3, [r7, #26]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba4:	833b      	strh	r3, [r7, #24]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8b3b      	ldrh	r3, [r7, #24]
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bdc:	82fb      	strh	r3, [r7, #22]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	441a      	add	r2, r3
 8004be8:	8afb      	ldrh	r3, [r7, #22]
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c14:	82bb      	strh	r3, [r7, #20]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	8abb      	ldrh	r3, [r7, #20]
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
 8004c36:	e0a3      	b.n	8004d80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004c46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <USB_DeactivateEndpoint+0x2d4>
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004c96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <USB_DeactivateEndpoint+0x324>
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004cc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d26:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3734      	adds	r7, #52	@ 0x34
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b0c2      	sub	sp, #264	@ 0x108
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9a:	6018      	str	r0, [r3, #0]
 8004d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	f040 86b7 	bne.w	8005b26 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d908      	bls.n	8004de6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004de4:	e007      	b.n	8004df6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	7b1b      	ldrb	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d13a      	bne.n	8004e7c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6959      	ldr	r1, [r3, #20]
 8004e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	88da      	ldrh	r2, [r3, #6]
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004e28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f001 fc9c 	bl	800676a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	011a      	lsls	r2, r3, #4
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	f000 be1f 	b.w	8005aba <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	78db      	ldrb	r3, [r3, #3]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f040 8462 	bne.w	8005752 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f240 83df 	bls.w	800566a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	441a      	add	r2, r3
 8004ef0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004ef4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004efc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f18:	1ad2      	subs	r2, r2, r3
 8004f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 81c7 	beq.w	80052dc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d177      	bne.n	800505a <USB_EPStartXfer+0x2ce>
 8004f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	4413      	add	r3, r2
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	011a      	lsls	r2, r3, #4
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fba:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fbc:	d921      	bls.n	8005002 <USB_EPStartXfer+0x276>
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <USB_EPStartXfer+0x252>
 8004fd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	029b      	lsls	r3, r3, #10
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e050      	b.n	80050a4 <USB_EPStartXfer+0x318>
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <USB_EPStartXfer+0x294>
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005018:	b29a      	uxth	r2, r3
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e041      	b.n	80050a4 <USB_EPStartXfer+0x318>
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800502a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <USB_EPStartXfer+0x2b4>
 8005036:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800503a:	3301      	adds	r3, #1
 800503c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29a      	uxth	r2, r3
 8005046:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29b      	uxth	r3, r3
 8005050:	4313      	orrs	r3, r2
 8005052:	b29a      	uxth	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e024      	b.n	80050a4 <USB_EPStartXfer+0x318>
 800505a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d11c      	bne.n	80050a4 <USB_EPStartXfer+0x318>
 800506a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005078:	b29b      	uxth	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	4413      	add	r3, r2
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
 8005082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	011a      	lsls	r2, r3, #4
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	4413      	add	r3, r2
 8005094:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800509a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	895b      	ldrh	r3, [r3, #10]
 80050b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6959      	ldr	r1, [r3, #20]
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80050ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80050ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80050d2:	6800      	ldr	r0, [r0, #0]
 80050d4:	f001 fb49 	bl	800676a <USB_WritePMA>
            ep->xfer_buff += len;
 80050d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	441a      	add	r2, r3
 80050ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	429a      	cmp	r2, r3
 8005110:	d90f      	bls.n	8005132 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	1ad2      	subs	r2, r2, r3
 8005124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	621a      	str	r2, [r3, #32]
 8005130:	e00e      	b.n	8005150 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2200      	movs	r2, #0
 800514e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d177      	bne.n	8005250 <USB_EPStartXfer+0x4c4>
 8005160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800517a:	b29b      	uxth	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	4413      	add	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80051b2:	d921      	bls.n	80051f8 <USB_EPStartXfer+0x46c>
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d104      	bne.n	80051d4 <USB_EPStartXfer+0x448>
 80051ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ce:	3b01      	subs	r3, #1
 80051d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051de:	b29b      	uxth	r3, r3
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e056      	b.n	80052a6 <USB_EPStartXfer+0x51a>
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <USB_EPStartXfer+0x48a>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520e:	b29a      	uxth	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e047      	b.n	80052a6 <USB_EPStartXfer+0x51a>
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <USB_EPStartXfer+0x4aa>
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005230:	3301      	adds	r3, #1
 8005232:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29b      	uxth	r3, r3
 8005246:	4313      	orrs	r3, r2
 8005248:	b29a      	uxth	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e02a      	b.n	80052a6 <USB_EPStartXfer+0x51a>
 8005250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d122      	bne.n	80052a6 <USB_EPStartXfer+0x51a>
 8005260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	4413      	add	r3, r2
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	011a      	lsls	r2, r3, #4
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	4413      	add	r3, r2
 8005296:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	891b      	ldrh	r3, [r3, #8]
 80052b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6959      	ldr	r1, [r3, #20]
 80052c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052d4:	6800      	ldr	r0, [r0, #0]
 80052d6:	f001 fa48 	bl	800676a <USB_WritePMA>
 80052da:	e3ee      	b.n	8005aba <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d177      	bne.n	80053dc <USB_EPStartXfer+0x650>
 80052ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530c:	4413      	add	r3, r2
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005320:	4413      	add	r3, r2
 8005322:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005326:	647b      	str	r3, [r7, #68]	@ 0x44
 8005328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005332:	b29a      	uxth	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533c:	2b3e      	cmp	r3, #62	@ 0x3e
 800533e:	d921      	bls.n	8005384 <USB_EPStartXfer+0x5f8>
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005344:	095b      	lsrs	r3, r3, #5
 8005346:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800534a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <USB_EPStartXfer+0x5d4>
 8005356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800535a:	3b01      	subs	r3, #1
 800535c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29a      	uxth	r2, r3
 8005366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800536a:	b29b      	uxth	r3, r3
 800536c:	029b      	lsls	r3, r3, #10
 800536e:	b29b      	uxth	r3, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537c:	b29a      	uxth	r2, r3
 800537e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e056      	b.n	8005432 <USB_EPStartXfer+0x6a6>
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <USB_EPStartXfer+0x616>
 800538c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539a:	b29a      	uxth	r2, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	e047      	b.n	8005432 <USB_EPStartXfer+0x6a6>
 80053a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <USB_EPStartXfer+0x636>
 80053b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053bc:	3301      	adds	r3, #1
 80053be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e02a      	b.n	8005432 <USB_EPStartXfer+0x6a6>
 80053dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d122      	bne.n	8005432 <USB_EPStartXfer+0x6a6>
 80053ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005406:	b29b      	uxth	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540c:	4413      	add	r3, r2
 800540e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005420:	4413      	add	r3, r2
 8005422:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	b29a      	uxth	r2, r3
 800542e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	891b      	ldrh	r3, [r3, #8]
 800543e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6959      	ldr	r1, [r3, #20]
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005452:	b29b      	uxth	r3, r3
 8005454:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005458:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800545c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005460:	6800      	ldr	r0, [r0, #0]
 8005462:	f001 f982 	bl	800676a <USB_WritePMA>
            ep->xfer_buff += len;
 8005466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695a      	ldr	r2, [r3, #20]
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	441a      	add	r2, r3
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	429a      	cmp	r2, r3
 800549e:	d90f      	bls.n	80054c0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80054a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	621a      	str	r2, [r3, #32]
 80054be:	e00e      	b.n	80054de <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80054d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d177      	bne.n	80055ea <USB_EPStartXfer+0x85e>
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800551a:	4413      	add	r3, r2
 800551c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800551e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	011a      	lsls	r2, r3, #4
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	4413      	add	r3, r2
 8005530:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005534:	637b      	str	r3, [r7, #52]	@ 0x34
 8005536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005540:	b29a      	uxth	r2, r3
 8005542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554a:	2b3e      	cmp	r3, #62	@ 0x3e
 800554c:	d921      	bls.n	8005592 <USB_EPStartXfer+0x806>
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <USB_EPStartXfer+0x7e2>
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	3b01      	subs	r3, #1
 800556a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800556e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005578:	b29b      	uxth	r3, r3
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	801a      	strh	r2, [r3, #0]
 8005590:	e050      	b.n	8005634 <USB_EPStartXfer+0x8a8>
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <USB_EPStartXfer+0x824>
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e041      	b.n	8005634 <USB_EPStartXfer+0x8a8>
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <USB_EPStartXfer+0x844>
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ca:	3301      	adds	r3, #1
 80055cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	b29b      	uxth	r3, r3
 80055dc:	029b      	lsls	r3, r3, #10
 80055de:	b29b      	uxth	r3, r3
 80055e0:	4313      	orrs	r3, r2
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	e024      	b.n	8005634 <USB_EPStartXfer+0x8a8>
 80055ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d11c      	bne.n	8005634 <USB_EPStartXfer+0x8a8>
 80055fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560e:	4413      	add	r3, r2
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
 8005612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	011a      	lsls	r2, r3, #4
 8005620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005622:	4413      	add	r3, r2
 8005624:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800562e:	b29a      	uxth	r2, r3
 8005630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	895b      	ldrh	r3, [r3, #10]
 8005640:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6959      	ldr	r1, [r3, #20]
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005654:	b29b      	uxth	r3, r3
 8005656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800565a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800565e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	f001 f881 	bl	800676a <USB_WritePMA>
 8005668:	e227      	b.n	8005aba <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800566a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800567a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800569c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80056a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f6:	4413      	add	r3, r2
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	011a      	lsls	r2, r3, #4
 8005708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570a:	4413      	add	r3, r2
 800570c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005710:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005716:	b29a      	uxth	r2, r3
 8005718:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800571a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	891b      	ldrh	r3, [r3, #8]
 8005728:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6959      	ldr	r1, [r3, #20]
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	b29b      	uxth	r3, r3
 800573e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005742:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005746:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	f001 f80d 	bl	800676a <USB_WritePMA>
 8005750:	e1b3      	b.n	8005aba <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80c6 	beq.w	8005924 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d177      	bne.n	80058a4 <USB_EPStartXfer+0xb18>
 80057b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057d4:	4413      	add	r3, r2
 80057d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	011a      	lsls	r2, r3, #4
 80057e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057e8:	4413      	add	r3, r2
 80057ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80057f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005804:	2b3e      	cmp	r3, #62	@ 0x3e
 8005806:	d921      	bls.n	800584c <USB_EPStartXfer+0xac0>
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <USB_EPStartXfer+0xa9c>
 800581e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005822:	3b01      	subs	r3, #1
 8005824:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005832:	b29b      	uxth	r3, r3
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	b29b      	uxth	r3, r3
 8005838:	4313      	orrs	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e050      	b.n	80058ee <USB_EPStartXfer+0xb62>
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <USB_EPStartXfer+0xade>
 8005854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005862:	b29a      	uxth	r2, r3
 8005864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e041      	b.n	80058ee <USB_EPStartXfer+0xb62>
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <USB_EPStartXfer+0xafe>
 8005880:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005884:	3301      	adds	r3, #1
 8005886:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800588a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29a      	uxth	r2, r3
 800589e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	e024      	b.n	80058ee <USB_EPStartXfer+0xb62>
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d11c      	bne.n	80058ee <USB_EPStartXfer+0xb62>
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058c8:	4413      	add	r3, r2
 80058ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80058cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	011a      	lsls	r2, r3, #4
 80058da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058dc:	4413      	add	r3, r2
 80058de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	895b      	ldrh	r3, [r3, #10]
 80058fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6959      	ldr	r1, [r3, #20]
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	b29b      	uxth	r3, r3
 8005910:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005914:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005918:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800591c:	6800      	ldr	r0, [r0, #0]
 800591e:	f000 ff24 	bl	800676a <USB_WritePMA>
 8005922:	e0ca      	b.n	8005aba <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d177      	bne.n	8005a24 <USB_EPStartXfer+0xc98>
 8005934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	461a      	mov	r2, r3
 8005952:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005954:	4413      	add	r3, r2
 8005956:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	011a      	lsls	r2, r3, #4
 8005966:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005968:	4413      	add	r3, r2
 800596a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800596e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005984:	2b3e      	cmp	r3, #62	@ 0x3e
 8005986:	d921      	bls.n	80059cc <USB_EPStartXfer+0xc40>
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <USB_EPStartXfer+0xc1c>
 800599e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059a2:	3b01      	subs	r3, #1
 80059a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4313      	orrs	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c8:	801a      	strh	r2, [r3, #0]
 80059ca:	e05c      	b.n	8005a86 <USB_EPStartXfer+0xcfa>
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <USB_EPStartXfer+0xc5e>
 80059d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e04d      	b.n	8005a86 <USB_EPStartXfer+0xcfa>
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <USB_EPStartXfer+0xc7e>
 8005a00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a04:	3301      	adds	r3, #1
 8005a06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e030      	b.n	8005a86 <USB_EPStartXfer+0xcfa>
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d128      	bne.n	8005a86 <USB_EPStartXfer+0xcfa>
 8005a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a58:	4413      	add	r3, r2
 8005a5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a70:	4413      	add	r3, r2
 8005a72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a84:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	891b      	ldrh	r3, [r3, #8]
 8005a92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6959      	ldr	r1, [r3, #20]
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005aac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ab0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ab4:	6800      	ldr	r0, [r0, #0]
 8005ab6:	f000 fe58 	bl	800676a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005adc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae0:	817b      	strh	r3, [r7, #10]
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	f083 0310 	eor.w	r3, r3, #16
 8005ae8:	817b      	strh	r3, [r7, #10]
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	f083 0320 	eor.w	r3, r3, #32
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	897b      	ldrh	r3, [r7, #10]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
 8005b22:	f000 bcde 	b.w	80064e2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	7b1b      	ldrb	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 80bb 	bne.w	8005cae <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d917      	bls.n	8005b84 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	619a      	str	r2, [r3, #24]
 8005b82:	e00e      	b.n	8005ba2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005be4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c02:	d924      	bls.n	8005c4e <USB_EPStartXfer+0xec2>
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <USB_EPStartXfer+0xe98>
 8005c1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4313      	orrs	r3, r2
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	f000 bc10 	b.w	800646e <USB_EPStartXfer+0x16e2>
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10c      	bne.n	8005c70 <USB_EPStartXfer+0xee4>
 8005c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	e3fe      	b.n	800646e <USB_EPStartXfer+0x16e2>
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <USB_EPStartXfer+0xf04>
 8005c86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	029b      	lsls	r3, r3, #10
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e3df      	b.n	800646e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	f040 8218 	bne.w	80060f0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 809d 	bne.w	8005e0c <USB_EPStartXfer+0x1080>
 8005cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	011a      	lsls	r2, r3, #4
 8005d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3a:	d92b      	bls.n	8005d94 <USB_EPStartXfer+0x1008>
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <USB_EPStartXfer+0xfe0>
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e070      	b.n	8005e76 <USB_EPStartXfer+0x10ea>
 8005d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10c      	bne.n	8005dbe <USB_EPStartXfer+0x1032>
 8005da4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dba:	801a      	strh	r2, [r3, #0]
 8005dbc:	e05b      	b.n	8005e76 <USB_EPStartXfer+0x10ea>
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <USB_EPStartXfer+0x1062>
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de8:	3301      	adds	r3, #1
 8005dea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e034      	b.n	8005e76 <USB_EPStartXfer+0x10ea>
 8005e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d12c      	bne.n	8005e76 <USB_EPStartXfer+0x10ea>
 8005e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e40:	4413      	add	r3, r2
 8005e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	011a      	lsls	r2, r3, #4
 8005e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 809d 	bne.w	8005fd0 <USB_EPStartXfer+0x1244>
 8005e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eba:	4413      	add	r3, r2
 8005ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	011a      	lsls	r2, r3, #4
 8005ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005efe:	d92b      	bls.n	8005f58 <USB_EPStartXfer+0x11cc>
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <USB_EPStartXfer+0x11a4>
 8005f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	e069      	b.n	800602c <USB_EPStartXfer+0x12a0>
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10c      	bne.n	8005f82 <USB_EPStartXfer+0x11f6>
 8005f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e054      	b.n	800602c <USB_EPStartXfer+0x12a0>
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <USB_EPStartXfer+0x1226>
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fac:	3301      	adds	r3, #1
 8005fae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e02d      	b.n	800602c <USB_EPStartXfer+0x12a0>
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d125      	bne.n	800602c <USB_EPStartXfer+0x12a0>
 8005fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800600e:	4413      	add	r3, r2
 8006010:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006014:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800602a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800602c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8218 	beq.w	800646e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800603e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800605e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006062:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <USB_EPStartXfer+0x12ea>
 800606a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006076:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800607a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 81f5 	bne.w	800646e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006084:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 81ee 	bne.w	800646e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e1be      	b.n	800646e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	f040 81b4 	bne.w	800646a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	429a      	cmp	r2, r3
 800611c:	d917      	bls.n	800614e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800611e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613e:	1ad2      	subs	r2, r2, r3
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	619a      	str	r2, [r3, #24]
 800614c:	e00e      	b.n	800616c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800615e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2200      	movs	r2, #0
 800616a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 8085 	bne.w	8006288 <USB_EPStartXfer+0x14fc>
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800618c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800619a:	b29b      	uxth	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061a2:	4413      	add	r3, r2
 80061a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80061c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80061de:	d923      	bls.n	8006228 <USB_EPStartXfer+0x149c>
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d104      	bne.n	8006200 <USB_EPStartXfer+0x1474>
 80061f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061fa:	3b01      	subs	r3, #1
 80061fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006200:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800620c:	b29b      	uxth	r3, r3
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	b29b      	uxth	r3, r3
 8006212:	4313      	orrs	r3, r2
 8006214:	b29b      	uxth	r3, r3
 8006216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621e:	b29a      	uxth	r2, r3
 8006220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e060      	b.n	80062ea <USB_EPStartXfer+0x155e>
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10c      	bne.n	800624a <USB_EPStartXfer+0x14be>
 8006230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e04f      	b.n	80062ea <USB_EPStartXfer+0x155e>
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <USB_EPStartXfer+0x14de>
 8006260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006264:	3301      	adds	r3, #1
 8006266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800626a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006276:	b29b      	uxth	r3, r3
 8006278:	029b      	lsls	r3, r3, #10
 800627a:	b29b      	uxth	r3, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	e030      	b.n	80062ea <USB_EPStartXfer+0x155e>
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d128      	bne.n	80062ea <USB_EPStartXfer+0x155e>
 8006298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062bc:	4413      	add	r3, r2
 80062be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	011a      	lsls	r2, r3, #4
 80062d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062d4:	4413      	add	r3, r2
 80062d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8085 	bne.w	8006414 <USB_EPStartXfer+0x1688>
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800632e:	4413      	add	r3, r2
 8006330:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	011a      	lsls	r2, r3, #4
 8006342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006346:	4413      	add	r3, r2
 8006348:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800634c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	2b3e      	cmp	r3, #62	@ 0x3e
 800636a:	d923      	bls.n	80063b4 <USB_EPStartXfer+0x1628>
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <USB_EPStartXfer+0x1600>
 8006382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006386:	3b01      	subs	r3, #1
 8006388:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800638c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29a      	uxth	r2, r3
 8006394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	4313      	orrs	r3, r2
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e05c      	b.n	800646e <USB_EPStartXfer+0x16e2>
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <USB_EPStartXfer+0x164a>
 80063bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e04b      	b.n	800646e <USB_EPStartXfer+0x16e2>
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <USB_EPStartXfer+0x166a>
 80063ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063f0:	3301      	adds	r3, #1
 80063f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29b      	uxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	e02c      	b.n	800646e <USB_EPStartXfer+0x16e2>
 8006414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d124      	bne.n	800646e <USB_EPStartXfer+0x16e2>
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800643a:	4413      	add	r3, r2
 800643c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	011a      	lsls	r2, r3, #4
 800644e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006452:	4413      	add	r3, r2
 8006454:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006458:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e001      	b.n	800646e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e03a      	b.n	80064e4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800646e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006494:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800649c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80064ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80064b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80064ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	b29b      	uxth	r3, r3
 80064e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d020      	beq.n	8006542 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006516:	81bb      	strh	r3, [r7, #12]
 8006518:	89bb      	ldrh	r3, [r7, #12]
 800651a:	f083 0310 	eor.w	r3, r3, #16
 800651e:	81bb      	strh	r3, [r7, #12]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	89bb      	ldrh	r3, [r7, #12]
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
 8006540:	e01f      	b.n	8006582 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006558:	81fb      	strh	r3, [r7, #14]
 800655a:	89fb      	ldrh	r3, [r7, #14]
 800655c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006560:	81fb      	strh	r3, [r7, #14]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	89fb      	ldrh	r3, [r7, #14]
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800658e:	b480      	push	{r7}
 8006590:	b087      	sub	sp, #28
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	7b1b      	ldrb	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 809d 	bne.w	80066dc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d04c      	beq.n	8006644 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	823b      	strh	r3, [r7, #16]
 80065b8:	8a3b      	ldrh	r3, [r7, #16]
 80065ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d01b      	beq.n	80065fa <USB_EPClearStall+0x6c>
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	81fb      	strh	r3, [r7, #14]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	78db      	ldrb	r3, [r3, #3]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d06c      	beq.n	80066dc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006618:	81bb      	strh	r3, [r7, #12]
 800661a:	89bb      	ldrh	r3, [r7, #12]
 800661c:	f083 0320 	eor.w	r3, r3, #32
 8006620:	81bb      	strh	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	89bb      	ldrh	r3, [r7, #12]
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800663a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
 8006642:	e04b      	b.n	80066dc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	82fb      	strh	r3, [r7, #22]
 8006652:	8afb      	ldrh	r3, [r7, #22]
 8006654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <USB_EPClearStall+0x106>
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006672:	82bb      	strh	r3, [r7, #20]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	441a      	add	r2, r3
 800667e:	8abb      	ldrh	r3, [r7, #20]
 8006680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800668c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006690:	b29b      	uxth	r3, r3
 8006692:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	827b      	strh	r3, [r7, #18]
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80066b2:	827b      	strh	r3, [r7, #18]
 80066b4:	8a7b      	ldrh	r3, [r7, #18]
 80066b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80066ba:	827b      	strh	r3, [r7, #18]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	441a      	add	r2, r3
 80066c6:	8a7b      	ldrh	r3, [r7, #18]
 80066c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d8:	b29b      	uxth	r3, r3
 80066da:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2280      	movs	r2, #128	@ 0x80
 80066fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr

08006722 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006744:	b29b      	uxth	r3, r3
 8006746:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006748:	68fb      	ldr	r3, [r7, #12]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr

0800676a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800676a:	b480      	push	{r7}
 800676c:	b08b      	sub	sp, #44	@ 0x2c
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	4611      	mov	r1, r2
 8006776:	461a      	mov	r2, r3
 8006778:	460b      	mov	r3, r1
 800677a:	80fb      	strh	r3, [r7, #6]
 800677c:	4613      	mov	r3, r2
 800677e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006780:	88bb      	ldrh	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	005a      	lsls	r2, r3, #1
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800679c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a2:	e01f      	b.n	80067e4 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	b21a      	sxth	r2, r3
 80067b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b21b      	sxth	r3, r3
 80067be:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	8a7a      	ldrh	r2, [r7, #18]
 80067c4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	3302      	adds	r3, #2
 80067ca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	3302      	adds	r3, #2
 80067d0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	3b01      	subs	r3, #1
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1dc      	bne.n	80067a4 <USB_WritePMA+0x3a>
  }
}
 80067ea:	bf00      	nop
 80067ec:	bf00      	nop
 80067ee:	372c      	adds	r7, #44	@ 0x2c
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bc80      	pop	{r7}
 80067f4:	4770      	bx	lr

080067f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b08b      	sub	sp, #44	@ 0x2c
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	4611      	mov	r1, r2
 8006802:	461a      	mov	r2, r3
 8006804:	460b      	mov	r3, r1
 8006806:	80fb      	strh	r3, [r7, #6]
 8006808:	4613      	mov	r3, r2
 800680a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800680c:	88bb      	ldrh	r3, [r7, #4]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800681c:	88fb      	ldrh	r3, [r7, #6]
 800681e:	005a      	lsls	r2, r3, #1
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006828:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
 800682e:	e01b      	b.n	8006868 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	881b      	ldrh	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	3302      	adds	r3, #2
 800683c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3301      	adds	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	b2da      	uxtb	r2, r3
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3301      	adds	r3, #1
 800685a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3302      	adds	r3, #2
 8006860:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	3b01      	subs	r3, #1
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e0      	bne.n	8006830 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	701a      	strb	r2, [r3, #0]
  }
}
 800688a:	bf00      	nop
 800688c:	372c      	adds	r7, #44	@ 0x2c
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7c1b      	ldrb	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d115      	bne.n	80068d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068b0:	2202      	movs	r2, #2
 80068b2:	2181      	movs	r1, #129	@ 0x81
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 feb6 	bl	8008626 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068c4:	2202      	movs	r2, #2
 80068c6:	2101      	movs	r1, #1
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 feac 	bl	8008626 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80068d6:	e012      	b.n	80068fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068d8:	2340      	movs	r3, #64	@ 0x40
 80068da:	2202      	movs	r2, #2
 80068dc:	2181      	movs	r1, #129	@ 0x81
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fea1 	bl	8008626 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068ea:	2340      	movs	r3, #64	@ 0x40
 80068ec:	2202      	movs	r2, #2
 80068ee:	2101      	movs	r1, #1
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fe98 	bl	8008626 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068fe:	2308      	movs	r3, #8
 8006900:	2203      	movs	r2, #3
 8006902:	2182      	movs	r1, #130	@ 0x82
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fe8e 	bl	8008626 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006910:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006914:	f001 ffae 	bl	8008874 <USBD_static_malloc>
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
 800692e:	e026      	b.n	800697e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006936:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7c1b      	ldrb	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006964:	2101      	movs	r1, #1
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 ff4d 	bl	8008806 <USBD_LL_PrepareReceive>
 800696c:	e007      	b.n	800697e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006974:	2340      	movs	r3, #64	@ 0x40
 8006976:	2101      	movs	r1, #1
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 ff44 	bl	8008806 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006998:	2181      	movs	r1, #129	@ 0x81
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fe69 	bl	8008672 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069a6:	2101      	movs	r1, #1
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 fe62 	bl	8008672 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069b6:	2182      	movs	r1, #130	@ 0x82
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fe5a 	bl	8008672 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 ff54 	bl	800888c <USBD_static_free>
    pdev->pClassData = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a06:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d039      	beq.n	8006a94 <USBD_CDC_Setup+0x9e>
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d17f      	bne.n	8006b24 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	88db      	ldrh	r3, [r3, #6]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d029      	beq.n	8006a80 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b25b      	sxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da11      	bge.n	8006a5a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	88d2      	ldrh	r2, [r2, #6]
 8006a48:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a4a:	6939      	ldr	r1, [r7, #16]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	88db      	ldrh	r3, [r3, #6]
 8006a50:	461a      	mov	r2, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fa06 	bl	8007e64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a58:	e06b      	b.n	8006b32 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785a      	ldrb	r2, [r3, #1]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a70:	6939      	ldr	r1, [r7, #16]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	88db      	ldrh	r3, [r3, #6]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fa21 	bl	8007ec0 <USBD_CtlPrepareRx>
      break;
 8006a7e:	e058      	b.n	8006b32 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	7850      	ldrb	r0, [r2, #1]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	4798      	blx	r3
      break;
 8006a92:	e04e      	b.n	8006b32 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b0b      	cmp	r3, #11
 8006a9a:	d02e      	beq.n	8006afa <USBD_CDC_Setup+0x104>
 8006a9c:	2b0b      	cmp	r3, #11
 8006a9e:	dc38      	bgt.n	8006b12 <USBD_CDC_Setup+0x11c>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <USBD_CDC_Setup+0xb4>
 8006aa4:	2b0a      	cmp	r3, #10
 8006aa6:	d014      	beq.n	8006ad2 <USBD_CDC_Setup+0xdc>
 8006aa8:	e033      	b.n	8006b12 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d107      	bne.n	8006ac4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ab4:	f107 030c 	add.w	r3, r7, #12
 8006ab8:	2202      	movs	r2, #2
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f9d1 	bl	8007e64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ac2:	e02e      	b.n	8006b22 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f962 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
          break;
 8006ad0:	e027      	b.n	8006b22 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d107      	bne.n	8006aec <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006adc:	f107 030f 	add.w	r3, r7, #15
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f9bd 	bl	8007e64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006aea:	e01a      	b.n	8006b22 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 f94e 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	75fb      	strb	r3, [r7, #23]
          break;
 8006af8:	e013      	b.n	8006b22 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d00d      	beq.n	8006b20 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f942 	bl	8007d90 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b10:	e006      	b.n	8006b20 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f93b 	bl	8007d90 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b1e:	e000      	b.n	8006b22 <USBD_CDC_Setup+0x12c>
          break;
 8006b20:	bf00      	nop
      }
      break;
 8006b22:	e006      	b.n	8006b32 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f932 	bl	8007d90 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b30:	bf00      	nop
  }

  return ret;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b4e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006b56:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03a      	beq.n	8006bd8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	331c      	adds	r3, #28
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d029      	beq.n	8006bcc <USBD_CDC_DataIn+0x90>
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	331c      	adds	r3, #28
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	78f9      	ldrb	r1, [r7, #3]
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4403      	add	r3, r0
 8006b98:	3320      	adds	r3, #32
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ba0:	fb01 f303 	mul.w	r3, r1, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d110      	bne.n	8006bcc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	331c      	adds	r3, #28
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bbe:	78f9      	ldrb	r1, [r7, #3]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fdfb 	bl	80087c0 <USBD_LL_Transmit>
 8006bca:	e003      	b.n	8006bd4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	e000      	b.n	8006bda <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006bd8:	2302      	movs	r3, #2
  }
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf6:	78fb      	ldrb	r3, [r7, #3]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fe26 	bl	800884c <USBD_LL_GetRxDataSize>
 8006c00:	4602      	mov	r2, r0
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00d      	beq.n	8006c2e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006c26:	4611      	mov	r1, r2
 8006c28:	4798      	blx	r3

    return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c2e:	2302      	movs	r3, #2
  }
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c46:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d014      	beq.n	8006c7c <USBD_CDC_EP0_RxReady+0x44>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c58:	2bff      	cmp	r3, #255	@ 0xff
 8006c5a:	d00f      	beq.n	8006c7c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c6a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	22ff      	movs	r2, #255	@ 0xff
 8006c78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2243      	movs	r2, #67	@ 0x43
 8006c94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c96:	4b03      	ldr	r3, [pc, #12]	@ (8006ca4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000094 	.word	0x20000094

08006ca8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2243      	movs	r2, #67	@ 0x43
 8006cb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	@ (8006cc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000050 	.word	0x20000050

08006cc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2243      	movs	r2, #67	@ 0x43
 8006cd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006cd6:	4b03      	ldr	r3, [pc, #12]	@ (8006ce4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200000d8 	.word	0x200000d8

08006ce8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006cf6:	4b03      	ldr	r3, [pc, #12]	@ (8006d04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	2000000c 	.word	0x2000000c

08006d08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d12:	2302      	movs	r3, #2
 8006d14:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d76:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d01c      	beq.n	8006de0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d115      	bne.n	8006ddc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2181      	movs	r1, #129	@ 0x81
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fcf4 	bl	80087c0 <USBD_LL_Transmit>

      return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e002      	b.n	8006de2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d017      	beq.n	8006e34 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7c1b      	ldrb	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e16:	2101      	movs	r1, #1
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fcf4 	bl	8008806 <USBD_LL_PrepareReceive>
 8006e1e:	e007      	b.n	8006e30 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e26:	2340      	movs	r3, #64	@ 0x40
 8006e28:	2101      	movs	r1, #1
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fceb 	bl	8008806 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	e01a      	b.n	8006e8c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	79fa      	ldrb	r2, [r7, #7]
 8006e82:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 fb59 	bl	800853c <USBD_LL_Init>

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d006      	beq.n	8006eb6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e001      	b.n	8006eba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bc80      	pop	{r7}
 8006ec4:	4770      	bx	lr

08006ec6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fb8e 	bl	80085f0 <USBD_LL_Start>

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr

08006ef2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006efe:	2302      	movs	r3, #2
 8006f00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00c      	beq.n	8006f26 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	4611      	mov	r1, r2
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fed8 	bl	8007d1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d016      	beq.n	8006fc0 <USBD_LL_SetupStage+0x6a>
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d81c      	bhi.n	8006fd0 <USBD_LL_SetupStage+0x7a>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <USBD_LL_SetupStage+0x4a>
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d008      	beq.n	8006fb0 <USBD_LL_SetupStage+0x5a>
 8006f9e:	e017      	b.n	8006fd0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9cb 	bl	8007344 <USBD_StdDevReq>
      break;
 8006fae:	e01a      	b.n	8006fe6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fa2d 	bl	8007418 <USBD_StdItfReq>
      break;
 8006fbe:	e012      	b.n	8006fe6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa6d 	bl	80074a8 <USBD_StdEPReq>
      break;
 8006fce:	e00a      	b.n	8006fe6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006fd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 fb66 	bl	80086b0 <USBD_LL_StallEP>
      break;
 8006fe4:	bf00      	nop
  }

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d14b      	bne.n	800709c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800700a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007012:	2b03      	cmp	r3, #3
 8007014:	d134      	bne.n	8007080 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	429a      	cmp	r2, r3
 8007020:	d919      	bls.n	8007056 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007038:	429a      	cmp	r2, r3
 800703a:	d203      	bcs.n	8007044 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007040:	b29b      	uxth	r3, r3
 8007042:	e002      	b.n	800704a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007048:	b29b      	uxth	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 ff54 	bl	8007efc <USBD_CtlContinueRx>
 8007054:	e038      	b.n	80070c8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007068:	2b03      	cmp	r3, #3
 800706a:	d105      	bne.n	8007078 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 ff51 	bl	8007f20 <USBD_CtlSendStatus>
 800707e:	e023      	b.n	80070c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007086:	2b05      	cmp	r3, #5
 8007088:	d11e      	bne.n	80070c8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007092:	2100      	movs	r1, #0
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 fb0b 	bl	80086b0 <USBD_LL_StallEP>
 800709a:	e015      	b.n	80070c8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d108      	bne.n	80070c4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	7afa      	ldrb	r2, [r7, #11]
 80070bc:	4611      	mov	r1, r2
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	4798      	blx	r3
 80070c2:	e001      	b.n	80070c8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070c4:	2302      	movs	r3, #2
 80070c6:	e000      	b.n	80070ca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b086      	sub	sp, #24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	460b      	mov	r3, r1
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d17f      	bne.n	80071e6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3314      	adds	r3, #20
 80070ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d15c      	bne.n	80071b0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d915      	bls.n	800712e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	1ad2      	subs	r2, r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	b29b      	uxth	r3, r3
 8007116:	461a      	mov	r2, r3
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 febe 	bl	8007e9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007120:	2300      	movs	r3, #0
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 fb6d 	bl	8008806 <USBD_LL_PrepareReceive>
 800712c:	e04e      	b.n	80071cc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	6912      	ldr	r2, [r2, #16]
 8007136:	fbb3 f1f2 	udiv	r1, r3, r2
 800713a:	fb01 f202 	mul.w	r2, r1, r2
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11c      	bne.n	800717e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800714c:	429a      	cmp	r2, r3
 800714e:	d316      	bcc.n	800717e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800715a:	429a      	cmp	r2, r3
 800715c:	d20f      	bcs.n	800717e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fe9a 	bl	8007e9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007170:	2300      	movs	r3, #0
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fb45 	bl	8008806 <USBD_LL_PrepareReceive>
 800717c:	e026      	b.n	80071cc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007190:	2b03      	cmp	r3, #3
 8007192:	d105      	bne.n	80071a0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071a0:	2180      	movs	r1, #128	@ 0x80
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f001 fa84 	bl	80086b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f000 fecc 	bl	8007f46 <USBD_CtlReceiveStatus>
 80071ae:	e00d      	b.n	80071cc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d004      	beq.n	80071c4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071c4:	2180      	movs	r1, #128	@ 0x80
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f001 fa72 	bl	80086b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d11d      	bne.n	8007212 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fe81 	bl	8006ede <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071e4:	e015      	b.n	8007212 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d108      	bne.n	800720e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	7afa      	ldrb	r2, [r7, #11]
 8007206:	4611      	mov	r1, r2
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	4798      	blx	r3
 800720c:	e001      	b.n	8007212 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	e000      	b.n	8007214 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007224:	2340      	movs	r3, #64	@ 0x40
 8007226:	2200      	movs	r2, #0
 8007228:	2100      	movs	r1, #0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 f9fb 	bl	8008626 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2240      	movs	r2, #64	@ 0x40
 800723c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007240:	2340      	movs	r3, #64	@ 0x40
 8007242:	2200      	movs	r2, #0
 8007244:	2180      	movs	r1, #128	@ 0x80
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f9ed 	bl	8008626 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2240      	movs	r2, #64	@ 0x40
 8007256:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	4611      	mov	r1, r2
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
  }

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	78fa      	ldrb	r2, [r7, #3]
 80072ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2204      	movs	r2, #4
 80072d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d105      	bne.n	8007302 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800731c:	2b03      	cmp	r3, #3
 800731e:	d10b      	bne.n	8007338 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d005      	beq.n	800736a <USBD_StdDevReq+0x26>
 800735e:	2b40      	cmp	r3, #64	@ 0x40
 8007360:	d84f      	bhi.n	8007402 <USBD_StdDevReq+0xbe>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d009      	beq.n	800737a <USBD_StdDevReq+0x36>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d14b      	bne.n	8007402 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      break;
 8007378:	e048      	b.n	800740c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b09      	cmp	r3, #9
 8007380:	d839      	bhi.n	80073f6 <USBD_StdDevReq+0xb2>
 8007382:	a201      	add	r2, pc, #4	@ (adr r2, 8007388 <USBD_StdDevReq+0x44>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	080073d9 	.word	0x080073d9
 800738c:	080073ed 	.word	0x080073ed
 8007390:	080073f7 	.word	0x080073f7
 8007394:	080073e3 	.word	0x080073e3
 8007398:	080073f7 	.word	0x080073f7
 800739c:	080073bb 	.word	0x080073bb
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073f7 	.word	0x080073f7
 80073a8:	080073cf 	.word	0x080073cf
 80073ac:	080073c5 	.word	0x080073c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9dc 	bl	8007770 <USBD_GetDescriptor>
          break;
 80073b8:	e022      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb3f 	bl	8007a40 <USBD_SetAddress>
          break;
 80073c2:	e01d      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fb7e 	bl	8007ac8 <USBD_SetConfig>
          break;
 80073cc:	e018      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc07 	bl	8007be4 <USBD_GetConfig>
          break;
 80073d6:	e013      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fc37 	bl	8007c4e <USBD_GetStatus>
          break;
 80073e0:	e00e      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc65 	bl	8007cb4 <USBD_SetFeature>
          break;
 80073ea:	e009      	b.n	8007400 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc74 	bl	8007cdc <USBD_ClrFeature>
          break;
 80073f4:	e004      	b.n	8007400 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fcc9 	bl	8007d90 <USBD_CtlError>
          break;
 80073fe:	bf00      	nop
      }
      break;
 8007400:	e004      	b.n	800740c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fcc3 	bl	8007d90 <USBD_CtlError>
      break;
 800740a:	bf00      	nop
  }

  return ret;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop

08007418 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800742e:	2b40      	cmp	r3, #64	@ 0x40
 8007430:	d005      	beq.n	800743e <USBD_StdItfReq+0x26>
 8007432:	2b40      	cmp	r3, #64	@ 0x40
 8007434:	d82e      	bhi.n	8007494 <USBD_StdItfReq+0x7c>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <USBD_StdItfReq+0x26>
 800743a:	2b20      	cmp	r3, #32
 800743c:	d12a      	bne.n	8007494 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007444:	3b01      	subs	r3, #1
 8007446:	2b02      	cmp	r3, #2
 8007448:	d81d      	bhi.n	8007486 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	889b      	ldrh	r3, [r3, #4]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d813      	bhi.n	800747c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
 8007462:	4603      	mov	r3, r0
 8007464:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	88db      	ldrh	r3, [r3, #6]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d110      	bne.n	8007490 <USBD_StdItfReq+0x78>
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10d      	bne.n	8007490 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fd53 	bl	8007f20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800747a:	e009      	b.n	8007490 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fc86 	bl	8007d90 <USBD_CtlError>
          break;
 8007484:	e004      	b.n	8007490 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc81 	bl	8007d90 <USBD_CtlError>
          break;
 800748e:	e000      	b.n	8007492 <USBD_StdItfReq+0x7a>
          break;
 8007490:	bf00      	nop
      }
      break;
 8007492:	e004      	b.n	800749e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fc7a 	bl	8007d90 <USBD_CtlError>
      break;
 800749c:	bf00      	nop
  }

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	889b      	ldrh	r3, [r3, #4]
 80074ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d007      	beq.n	80074d8 <USBD_StdEPReq+0x30>
 80074c8:	2b40      	cmp	r3, #64	@ 0x40
 80074ca:	f200 8146 	bhi.w	800775a <USBD_StdEPReq+0x2b2>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <USBD_StdEPReq+0x40>
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	f040 8141 	bne.w	800775a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
      break;
 80074e6:	e13d      	b.n	8007764 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d10a      	bne.n	800750a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	e12d      	b.n	8007766 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b03      	cmp	r3, #3
 8007510:	d007      	beq.n	8007522 <USBD_StdEPReq+0x7a>
 8007512:	2b03      	cmp	r3, #3
 8007514:	f300 811b 	bgt.w	800774e <USBD_StdEPReq+0x2a6>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d072      	beq.n	8007602 <USBD_StdEPReq+0x15a>
 800751c:	2b01      	cmp	r3, #1
 800751e:	d03a      	beq.n	8007596 <USBD_StdEPReq+0xee>
 8007520:	e115      	b.n	800774e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007528:	2b02      	cmp	r3, #2
 800752a:	d002      	beq.n	8007532 <USBD_StdEPReq+0x8a>
 800752c:	2b03      	cmp	r3, #3
 800752e:	d015      	beq.n	800755c <USBD_StdEPReq+0xb4>
 8007530:	e02b      	b.n	800758a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <USBD_StdEPReq+0xaa>
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b80      	cmp	r3, #128	@ 0x80
 800753c:	d009      	beq.n	8007552 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 f8b4 	bl	80086b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007548:	2180      	movs	r1, #128	@ 0x80
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 f8b0 	bl	80086b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007550:	e020      	b.n	8007594 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fc1b 	bl	8007d90 <USBD_CtlError>
              break;
 800755a:	e01b      	b.n	8007594 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10e      	bne.n	8007582 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <USBD_StdEPReq+0xda>
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b80      	cmp	r3, #128	@ 0x80
 800756e:	d008      	beq.n	8007582 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	88db      	ldrh	r3, [r3, #6]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 f897 	bl	80086b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fccc 	bl	8007f20 <USBD_CtlSendStatus>

              break;
 8007588:	e004      	b.n	8007594 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fbff 	bl	8007d90 <USBD_CtlError>
              break;
 8007592:	bf00      	nop
          }
          break;
 8007594:	e0e0      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800759c:	2b02      	cmp	r3, #2
 800759e:	d002      	beq.n	80075a6 <USBD_StdEPReq+0xfe>
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d015      	beq.n	80075d0 <USBD_StdEPReq+0x128>
 80075a4:	e026      	b.n	80075f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00c      	beq.n	80075c6 <USBD_StdEPReq+0x11e>
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b80      	cmp	r3, #128	@ 0x80
 80075b0:	d009      	beq.n	80075c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 f87a 	bl	80086b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f876 	bl	80086b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c4:	e01c      	b.n	8007600 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fbe1 	bl	8007d90 <USBD_CtlError>
              break;
 80075ce:	e017      	b.n	8007600 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d112      	bne.n	80075fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f881 	bl	80086ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc97 	bl	8007f20 <USBD_CtlSendStatus>
              }
              break;
 80075f2:	e004      	b.n	80075fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fbca 	bl	8007d90 <USBD_CtlError>
              break;
 80075fc:	e000      	b.n	8007600 <USBD_StdEPReq+0x158>
              break;
 80075fe:	bf00      	nop
          }
          break;
 8007600:	e0aa      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007608:	2b02      	cmp	r3, #2
 800760a:	d002      	beq.n	8007612 <USBD_StdEPReq+0x16a>
 800760c:	2b03      	cmp	r3, #3
 800760e:	d032      	beq.n	8007676 <USBD_StdEPReq+0x1ce>
 8007610:	e097      	b.n	8007742 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <USBD_StdEPReq+0x180>
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b80      	cmp	r3, #128	@ 0x80
 800761c:	d004      	beq.n	8007628 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fbb5 	bl	8007d90 <USBD_CtlError>
                break;
 8007626:	e091      	b.n	800774c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	da0b      	bge.n	8007648 <USBD_StdEPReq+0x1a0>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	3310      	adds	r3, #16
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	e00b      	b.n	8007660 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	3304      	adds	r3, #4
 8007660:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2202      	movs	r2, #2
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbf8 	bl	8007e64 <USBD_CtlSendData>
              break;
 8007674:	e06a      	b.n	800774c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da11      	bge.n	80076a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	f003 020f 	and.w	r2, r3, #15
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	3318      	adds	r3, #24
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d117      	bne.n	80076c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb78 	bl	8007d90 <USBD_CtlError>
                  break;
 80076a0:	e054      	b.n	800774c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	f003 020f 	and.w	r2, r3, #15
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d104      	bne.n	80076c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb65 	bl	8007d90 <USBD_CtlError>
                  break;
 80076c6:	e041      	b.n	800774c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	da0b      	bge.n	80076e8 <USBD_StdEPReq+0x240>
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	3310      	adds	r3, #16
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	e00b      	b.n	8007700 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	3304      	adds	r3, #4
 8007700:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <USBD_StdEPReq+0x266>
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b80      	cmp	r3, #128	@ 0x80
 800770c:	d103      	bne.n	8007716 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e00e      	b.n	8007734 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f806 	bl	800872c <USBD_LL_IsStallEP>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e002      	b.n	8007734 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2202      	movs	r2, #2
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb92 	bl	8007e64 <USBD_CtlSendData>
              break;
 8007740:	e004      	b.n	800774c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb23 	bl	8007d90 <USBD_CtlError>
              break;
 800774a:	bf00      	nop
          }
          break;
 800774c:	e004      	b.n	8007758 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb1d 	bl	8007d90 <USBD_CtlError>
          break;
 8007756:	bf00      	nop
      }
      break;
 8007758:	e004      	b.n	8007764 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb17 	bl	8007d90 <USBD_CtlError>
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	2b06      	cmp	r3, #6
 8007792:	f200 8128 	bhi.w	80079e6 <USBD_GetDescriptor+0x276>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <USBD_GetDescriptor+0x2c>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	08007811 	.word	0x08007811
 80077a8:	080079e7 	.word	0x080079e7
 80077ac:	080079e7 	.word	0x080079e7
 80077b0:	08007987 	.word	0x08007987
 80077b4:	080079b3 	.word	0x080079b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
      break;
 80077ce:	e112      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7c1b      	ldrb	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10d      	bne.n	80077f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e0:	f107 0208 	add.w	r2, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	2202      	movs	r2, #2
 80077f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077f2:	e100      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	4610      	mov	r0, r2
 8007802:	4798      	blx	r3
 8007804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3301      	adds	r3, #1
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
      break;
 800780e:	e0f2      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b05      	cmp	r3, #5
 8007818:	f200 80ac 	bhi.w	8007974 <USBD_GetDescriptor+0x204>
 800781c:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <USBD_GetDescriptor+0xb4>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	0800783d 	.word	0x0800783d
 8007828:	08007871 	.word	0x08007871
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078d9 	.word	0x080078d9
 8007834:	0800790d 	.word	0x0800790d
 8007838:	08007941 	.word	0x08007941
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e091      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa94 	bl	8007d90 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e089      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e077      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa7a 	bl	8007d90 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e06f      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	7c12      	ldrb	r2, [r2, #16]
 80078bc:	f107 0108 	add.w	r1, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c6:	e05d      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa60 	bl	8007d90 <USBD_CtlError>
            err++;
 80078d0:	7afb      	ldrb	r3, [r7, #11]
 80078d2:	3301      	adds	r3, #1
 80078d4:	72fb      	strb	r3, [r7, #11]
          break;
 80078d6:	e055      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7c12      	ldrb	r2, [r2, #16]
 80078f0:	f107 0108 	add.w	r1, r7, #8
 80078f4:	4610      	mov	r0, r2
 80078f6:	4798      	blx	r3
 80078f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fa:	e043      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa46 	bl	8007d90 <USBD_CtlError>
            err++;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	3301      	adds	r3, #1
 8007908:	72fb      	strb	r3, [r7, #11]
          break;
 800790a:	e03b      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00b      	beq.n	8007930 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792e:	e029      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa2c 	bl	8007d90 <USBD_CtlError>
            err++;
 8007938:	7afb      	ldrb	r3, [r7, #11]
 800793a:	3301      	adds	r3, #1
 800793c:	72fb      	strb	r3, [r7, #11]
          break;
 800793e:	e021      	b.n	8007984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007962:	e00f      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa12 	bl	8007d90 <USBD_CtlError>
            err++;
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	3301      	adds	r3, #1
 8007970:	72fb      	strb	r3, [r7, #11]
          break;
 8007972:	e007      	b.n	8007984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa0a 	bl	8007d90 <USBD_CtlError>
          err++;
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	3301      	adds	r3, #1
 8007980:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007982:	e038      	b.n	80079f6 <USBD_GetDescriptor+0x286>
 8007984:	e037      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7c1b      	ldrb	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007996:	f107 0208 	add.w	r2, r7, #8
 800799a:	4610      	mov	r0, r2
 800799c:	4798      	blx	r3
 800799e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a0:	e029      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f9f3 	bl	8007d90 <USBD_CtlError>
        err++;
 80079aa:	7afb      	ldrb	r3, [r7, #11]
 80079ac:	3301      	adds	r3, #1
 80079ae:	72fb      	strb	r3, [r7, #11]
      break;
 80079b0:	e021      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7c1b      	ldrb	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c2:	f107 0208 	add.w	r2, r7, #8
 80079c6:	4610      	mov	r0, r2
 80079c8:	4798      	blx	r3
 80079ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	2207      	movs	r2, #7
 80079d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d4:	e00f      	b.n	80079f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f9d9 	bl	8007d90 <USBD_CtlError>
        err++;
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	3301      	adds	r3, #1
 80079e2:	72fb      	strb	r3, [r7, #11]
      break;
 80079e4:	e007      	b.n	80079f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f9d1 	bl	8007d90 <USBD_CtlError>
      err++;
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	3301      	adds	r3, #1
 80079f2:	72fb      	strb	r3, [r7, #11]
      break;
 80079f4:	bf00      	nop
  }

  if (err != 0U)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11c      	bne.n	8007a36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079fc:	893b      	ldrh	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00d      	beq.n	8007a26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88da      	ldrh	r2, [r3, #6]
 8007a0e:	893b      	ldrh	r3, [r7, #8]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bf28      	it	cs
 8007a14:	4613      	movcs	r3, r2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1a:	893b      	ldrh	r3, [r7, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	68f9      	ldr	r1, [r7, #12]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa1f 	bl	8007e64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	88db      	ldrh	r3, [r3, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa76 	bl	8007f20 <USBD_CtlSendStatus>
 8007a34:	e000      	b.n	8007a38 <USBD_GetDescriptor+0x2c8>
    return;
 8007a36:	bf00      	nop
    }
  }
}
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d130      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	88db      	ldrh	r3, [r3, #6]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d12c      	bne.n	8007ab4 <USBD_SetAddress+0x74>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a60:	d828      	bhi.n	8007ab4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	885b      	ldrh	r3, [r3, #2]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d104      	bne.n	8007a82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f988 	bl	8007d90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	e01d      	b.n	8007abe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fe77 	bl	8008782 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa43 	bl	8007f20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa8:	e009      	b.n	8007abe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	e004      	b.n	8007abe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f96a 	bl	8007d90 <USBD_CtlError>
  }
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	4b41      	ldr	r3, [pc, #260]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007ada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007adc:	4b40      	ldr	r3, [pc, #256]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d904      	bls.n	8007aee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f952 	bl	8007d90 <USBD_CtlError>
 8007aec:	e075      	b.n	8007bda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d002      	beq.n	8007afe <USBD_SetConfig+0x36>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d023      	beq.n	8007b44 <USBD_SetConfig+0x7c>
 8007afc:	e062      	b.n	8007bc4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007afe:	4b38      	ldr	r3, [pc, #224]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01a      	beq.n	8007b3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b06:	4b36      	ldr	r3, [pc, #216]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2203      	movs	r2, #3
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b18:	4b31      	ldr	r3, [pc, #196]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f9e7 	bl	8006ef2 <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d104      	bne.n	8007b34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f92f 	bl	8007d90 <USBD_CtlError>
            return;
 8007b32:	e052      	b.n	8007bda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9f3 	bl	8007f20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b3a:	e04e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9ef 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007b42:	e04a      	b.n	8007bda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b44:	4b26      	ldr	r3, [pc, #152]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d112      	bne.n	8007b72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007b54:	4b22      	ldr	r3, [pc, #136]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b5e:	4b20      	ldr	r3, [pc, #128]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f9e3 	bl	8006f30 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9d8 	bl	8007f20 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b70:	e033      	b.n	8007bda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b72:	4b1b      	ldr	r3, [pc, #108]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d01d      	beq.n	8007bbc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff f9d1 	bl	8006f30 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b8e:	4b14      	ldr	r3, [pc, #80]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b98:	4b11      	ldr	r3, [pc, #68]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f9a7 	bl	8006ef2 <USBD_SetClassConfig>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d104      	bne.n	8007bb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8ef 	bl	8007d90 <USBD_CtlError>
            return;
 8007bb2:	e012      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9b3 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007bba:	e00e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9af 	bl	8007f20 <USBD_CtlSendStatus>
        break;
 8007bc2:	e00a      	b.n	8007bda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8e2 	bl	8007d90 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bcc:	4b04      	ldr	r3, [pc, #16]	@ (8007be0 <USBD_SetConfig+0x118>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f9ac 	bl	8006f30 <USBD_ClrClassConfig>
        break;
 8007bd8:	bf00      	nop
    }
  }
}
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200003e0 	.word	0x200003e0

08007be4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d004      	beq.n	8007c00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8c9 	bl	8007d90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bfe:	e022      	b.n	8007c46 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	dc02      	bgt.n	8007c10 <USBD_GetConfig+0x2c>
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dc03      	bgt.n	8007c16 <USBD_GetConfig+0x32>
 8007c0e:	e015      	b.n	8007c3c <USBD_GetConfig+0x58>
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d00b      	beq.n	8007c2c <USBD_GetConfig+0x48>
 8007c14:	e012      	b.n	8007c3c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	2201      	movs	r2, #1
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f91d 	bl	8007e64 <USBD_CtlSendData>
        break;
 8007c2a:	e00c      	b.n	8007c46 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	2201      	movs	r2, #1
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f915 	bl	8007e64 <USBD_CtlSendData>
        break;
 8007c3a:	e004      	b.n	8007c46 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8a6 	bl	8007d90 <USBD_CtlError>
        break;
 8007c44:	bf00      	nop
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d81e      	bhi.n	8007ca2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	88db      	ldrh	r3, [r3, #6]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d004      	beq.n	8007c76 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f88e 	bl	8007d90 <USBD_CtlError>
        break;
 8007c74:	e01a      	b.n	8007cac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f043 0202 	orr.w	r2, r3, #2
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	330c      	adds	r3, #12
 8007c96:	2202      	movs	r2, #2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8e2 	bl	8007e64 <USBD_CtlSendData>
      break;
 8007ca0:	e004      	b.n	8007cac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f873 	bl	8007d90 <USBD_CtlError>
      break;
 8007caa:	bf00      	nop
  }
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d106      	bne.n	8007cd4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f926 	bl	8007f20 <USBD_CtlSendStatus>
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d80b      	bhi.n	8007d0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	885b      	ldrh	r3, [r3, #2]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10c      	bne.n	8007d14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f90c 	bl	8007f20 <USBD_CtlSendStatus>
      }
      break;
 8007d08:	e004      	b.n	8007d14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f83f 	bl	8007d90 <USBD_CtlError>
      break;
 8007d12:	e000      	b.n	8007d16 <USBD_ClrFeature+0x3a>
      break;
 8007d14:	bf00      	nop
  }
}
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	785a      	ldrb	r2, [r3, #1]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	3303      	adds	r3, #3
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	3304      	adds	r3, #4
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	3305      	adds	r3, #5
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3306      	adds	r3, #6
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3307      	adds	r3, #7
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	80da      	strh	r2, [r3, #6]

}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d9a:	2180      	movs	r1, #128	@ 0x80
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fc87 	bl	80086b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc83 	bl	80086b0 <USBD_LL_StallEP>
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b086      	sub	sp, #24
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d032      	beq.n	8007e2e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f834 	bl	8007e36 <USBD_GetLen>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	75fa      	strb	r2, [r7, #23]
 8007de2:	461a      	mov	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4413      	add	r3, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	75fa      	strb	r2, [r7, #23]
 8007df4:	461a      	mov	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007dfe:	e012      	b.n	8007e26 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	60fa      	str	r2, [r7, #12]
 8007e06:	7dfa      	ldrb	r2, [r7, #23]
 8007e08:	1c51      	adds	r1, r2, #1
 8007e0a:	75f9      	strb	r1, [r7, #23]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	440a      	add	r2, r1
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	75fa      	strb	r2, [r7, #23]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4413      	add	r3, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e8      	bne.n	8007e00 <USBD_GetString+0x4e>
    }
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3718      	adds	r7, #24
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e42:	e005      	b.n	8007e50 <USBD_GetLen+0x1a>
  {
    len++;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	3301      	adds	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f5      	bne.n	8007e44 <USBD_GetLen+0xe>
  }

  return len;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e7a:	88fa      	ldrh	r2, [r7, #6]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fc97 	bl	80087c0 <USBD_LL_Transmit>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 fc85 	bl	80087c0 <USBD_LL_Transmit>

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	2100      	movs	r1, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fc8a 	bl	8008806 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fc78 	bl	8008806 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f30:	2300      	movs	r3, #0
 8007f32:	2200      	movs	r2, #0
 8007f34:	2100      	movs	r1, #0
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fc42 	bl	80087c0 <USBD_LL_Transmit>

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2205      	movs	r2, #5
 8007f52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f56:	2300      	movs	r3, #0
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fc52 	bl	8008806 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4912      	ldr	r1, [pc, #72]	@ (8007fbc <MX_USB_DEVICE_Init+0x50>)
 8007f74:	4812      	ldr	r0, [pc, #72]	@ (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f76:	f7fe ff62 	bl	8006e3e <USBD_Init>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f80:	f7f9 fa5a 	bl	8001438 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f84:	490f      	ldr	r1, [pc, #60]	@ (8007fc4 <MX_USB_DEVICE_Init+0x58>)
 8007f86:	480e      	ldr	r0, [pc, #56]	@ (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f88:	f7fe ff84 	bl	8006e94 <USBD_RegisterClass>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f92:	f7f9 fa51 	bl	8001438 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f96:	490c      	ldr	r1, [pc, #48]	@ (8007fc8 <MX_USB_DEVICE_Init+0x5c>)
 8007f98:	4809      	ldr	r0, [pc, #36]	@ (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007f9a:	f7fe feb5 	bl	8006d08 <USBD_CDC_RegisterInterface>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fa4:	f7f9 fa48 	bl	8001438 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fa8:	4805      	ldr	r0, [pc, #20]	@ (8007fc0 <MX_USB_DEVICE_Init+0x54>)
 8007faa:	f7fe ff8c 	bl	8006ec6 <USBD_Start>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fb4:	f7f9 fa40 	bl	8001438 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fb8:	bf00      	nop
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	2000012c 	.word	0x2000012c
 8007fc0:	200003e4 	.word	0x200003e4
 8007fc4:	20000018 	.word	0x20000018
 8007fc8:	2000011c 	.word	0x2000011c

08007fcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4905      	ldr	r1, [pc, #20]	@ (8007fe8 <CDC_Init_FS+0x1c>)
 8007fd4:	4805      	ldr	r0, [pc, #20]	@ (8007fec <CDC_Init_FS+0x20>)
 8007fd6:	f7fe fead 	bl	8006d34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fda:	4905      	ldr	r1, [pc, #20]	@ (8007ff0 <CDC_Init_FS+0x24>)
 8007fdc:	4803      	ldr	r0, [pc, #12]	@ (8007fec <CDC_Init_FS+0x20>)
 8007fde:	f7fe fec2 	bl	8006d66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fe2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000aa8 	.word	0x20000aa8
 8007fec:	200003e4 	.word	0x200003e4
 8007ff0:	200006a8 	.word	0x200006a8

08007ff4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ff8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
	...

08008004 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	6039      	str	r1, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
 8008010:	4613      	mov	r3, r2
 8008012:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	2b23      	cmp	r3, #35	@ 0x23
 8008018:	d84a      	bhi.n	80080b0 <CDC_Control_FS+0xac>
 800801a:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <CDC_Control_FS+0x1c>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	080080b1 	.word	0x080080b1
 8008024:	080080b1 	.word	0x080080b1
 8008028:	080080b1 	.word	0x080080b1
 800802c:	080080b1 	.word	0x080080b1
 8008030:	080080b1 	.word	0x080080b1
 8008034:	080080b1 	.word	0x080080b1
 8008038:	080080b1 	.word	0x080080b1
 800803c:	080080b1 	.word	0x080080b1
 8008040:	080080b1 	.word	0x080080b1
 8008044:	080080b1 	.word	0x080080b1
 8008048:	080080b1 	.word	0x080080b1
 800804c:	080080b1 	.word	0x080080b1
 8008050:	080080b1 	.word	0x080080b1
 8008054:	080080b1 	.word	0x080080b1
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080b1 	.word	0x080080b1
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080080b1 	.word	0x080080b1
 8008068:	080080b1 	.word	0x080080b1
 800806c:	080080b1 	.word	0x080080b1
 8008070:	080080b1 	.word	0x080080b1
 8008074:	080080b1 	.word	0x080080b1
 8008078:	080080b1 	.word	0x080080b1
 800807c:	080080b1 	.word	0x080080b1
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080b1 	.word	0x080080b1
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b1 	.word	0x080080b1
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080b1 	.word	0x080080b1
 80080a8:	080080b1 	.word	0x080080b1
 80080ac:	080080b1 	.word	0x080080b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080b0:	bf00      	nop
  }

  return (USBD_OK);
 80080b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e025      	b.n	800811c <CDC_Receive_FS+0x5c>
    char receivedChar = Buf[i];
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	72fb      	strb	r3, [r7, #11]
    
    if (receivedChar == '\n') {
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b0a      	cmp	r3, #10
 80080de:	d10b      	bne.n	80080f8 <CDC_Receive_FS+0x38>
      usbBuffer[usbBufferIndex] = '\0';
 80080e0:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <CDC_Receive_FS+0x80>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a17      	ldr	r2, [pc, #92]	@ (8008144 <CDC_Receive_FS+0x84>)
 80080e6:	2100      	movs	r1, #0
 80080e8:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;
 80080ea:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <CDC_Receive_FS+0x88>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	701a      	strb	r2, [r3, #0]
      usbBufferIndex = 0;
 80080f0:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <CDC_Receive_FS+0x80>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
      break;
 80080f6:	e016      	b.n	8008126 <CDC_Receive_FS+0x66>
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	2b0d      	cmp	r3, #13
 80080fc:	d00b      	beq.n	8008116 <CDC_Receive_FS+0x56>
 80080fe:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <CDC_Receive_FS+0x80>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b62      	cmp	r3, #98	@ 0x62
 8008104:	d807      	bhi.n	8008116 <CDC_Receive_FS+0x56>
      usbBuffer[usbBufferIndex++] = receivedChar;
 8008106:	4b0e      	ldr	r3, [pc, #56]	@ (8008140 <CDC_Receive_FS+0x80>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	490c      	ldr	r1, [pc, #48]	@ (8008140 <CDC_Receive_FS+0x80>)
 800810e:	600a      	str	r2, [r1, #0]
 8008110:	490c      	ldr	r1, [pc, #48]	@ (8008144 <CDC_Receive_FS+0x84>)
 8008112:	7afa      	ldrb	r2, [r7, #11]
 8008114:	54ca      	strb	r2, [r1, r3]
  for (uint32_t i = 0; i < *Len; i++) {
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	429a      	cmp	r2, r3
 8008124:	d3d4      	bcc.n	80080d0 <CDC_Receive_FS+0x10>
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4808      	ldr	r0, [pc, #32]	@ (800814c <CDC_Receive_FS+0x8c>)
 800812a:	f7fe fe1c 	bl	8006d66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800812e:	4807      	ldr	r0, [pc, #28]	@ (800814c <CDC_Receive_FS+0x8c>)
 8008130:	f7fe fe5b 	bl	8006dea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008134:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200003d0 	.word	0x200003d0
 8008144:	2000036c 	.word	0x2000036c
 8008148:	200003d4 	.word	0x200003d4
 800814c:	200003e4 	.word	0x200003e4

08008150 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008160:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <CDC_Transmit_FS+0x48>)
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008166:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008172:	2301      	movs	r3, #1
 8008174:	e00b      	b.n	800818e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008176:	887b      	ldrh	r3, [r7, #2]
 8008178:	461a      	mov	r2, r3
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4806      	ldr	r0, [pc, #24]	@ (8008198 <CDC_Transmit_FS+0x48>)
 800817e:	f7fe fdd9 	bl	8006d34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008182:	4805      	ldr	r0, [pc, #20]	@ (8008198 <CDC_Transmit_FS+0x48>)
 8008184:	f7fe fe02 	bl	8006d8c <USBD_CDC_TransmitPacket>
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800818c:	7bfb      	ldrb	r3, [r7, #15]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200003e4 	.word	0x200003e4

0800819c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2212      	movs	r2, #18
 80081ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081ae:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000148 	.word	0x20000148

080081c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2204      	movs	r2, #4
 80081d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081d2:	4b03      	ldr	r3, [pc, #12]	@ (80081e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	2000015c 	.word	0x2000015c

080081e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d105      	bne.n	8008202 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4907      	ldr	r1, [pc, #28]	@ (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
 80081fa:	4808      	ldr	r0, [pc, #32]	@ (800821c <USBD_FS_ProductStrDescriptor+0x38>)
 80081fc:	f7ff fdd9 	bl	8007db2 <USBD_GetString>
 8008200:	e004      	b.n	800820c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	4904      	ldr	r1, [pc, #16]	@ (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
 8008206:	4805      	ldr	r0, [pc, #20]	@ (800821c <USBD_FS_ProductStrDescriptor+0x38>)
 8008208:	f7ff fdd3 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800820c:	4b02      	ldr	r3, [pc, #8]	@ (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000ea8 	.word	0x20000ea8
 800821c:	0800b9b8 	.word	0x0800b9b8

08008220 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	4904      	ldr	r1, [pc, #16]	@ (8008240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008230:	4804      	ldr	r0, [pc, #16]	@ (8008244 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008232:	f7ff fdbe 	bl	8007db2 <USBD_GetString>
  return USBD_StrDesc;
 8008236:	4b02      	ldr	r3, [pc, #8]	@ (8008240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000ea8 	.word	0x20000ea8
 8008244:	0800b9d0 	.word	0x0800b9d0

08008248 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	6039      	str	r1, [r7, #0]
 8008252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	221a      	movs	r2, #26
 8008258:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800825a:	f000 f843 	bl	80082e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800825e:	4b02      	ldr	r3, [pc, #8]	@ (8008268 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000160 	.word	0x20000160

0800826c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4907      	ldr	r1, [pc, #28]	@ (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008282:	4808      	ldr	r0, [pc, #32]	@ (80082a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008284:	f7ff fd95 	bl	8007db2 <USBD_GetString>
 8008288:	e004      	b.n	8008294 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4904      	ldr	r1, [pc, #16]	@ (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800828e:	4805      	ldr	r0, [pc, #20]	@ (80082a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008290:	f7ff fd8f 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008294:	4b02      	ldr	r3, [pc, #8]	@ (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000ea8 	.word	0x20000ea8
 80082a4:	0800b9e4 	.word	0x0800b9e4

080082a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4907      	ldr	r1, [pc, #28]	@ (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082be:	4808      	ldr	r0, [pc, #32]	@ (80082e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082c0:	f7ff fd77 	bl	8007db2 <USBD_GetString>
 80082c4:	e004      	b.n	80082d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	4904      	ldr	r1, [pc, #16]	@ (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ca:	4805      	ldr	r0, [pc, #20]	@ (80082e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082cc:	f7ff fd71 	bl	8007db2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	@ (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	20000ea8 	.word	0x20000ea8
 80082e0:	0800b9f0 	.word	0x0800b9f0

080082e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008328 <Get_SerialNum+0x44>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082f0:	4b0e      	ldr	r3, [pc, #56]	@ (800832c <Get_SerialNum+0x48>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008330 <Get_SerialNum+0x4c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800830a:	2208      	movs	r2, #8
 800830c:	4909      	ldr	r1, [pc, #36]	@ (8008334 <Get_SerialNum+0x50>)
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f814 	bl	800833c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008314:	2204      	movs	r2, #4
 8008316:	4908      	ldr	r1, [pc, #32]	@ (8008338 <Get_SerialNum+0x54>)
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f000 f80f 	bl	800833c <IntToUnicode>
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	1ffff7e8 	.word	0x1ffff7e8
 800832c:	1ffff7ec 	.word	0x1ffff7ec
 8008330:	1ffff7f0 	.word	0x1ffff7f0
 8008334:	20000162 	.word	0x20000162
 8008338:	20000172 	.word	0x20000172

0800833c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]
 8008352:	e027      	b.n	80083a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0f1b      	lsrs	r3, r3, #28
 8008358:	2b09      	cmp	r3, #9
 800835a:	d80b      	bhi.n	8008374 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	0f1b      	lsrs	r3, r3, #28
 8008360:	b2da      	uxtb	r2, r3
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4619      	mov	r1, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	440b      	add	r3, r1
 800836c:	3230      	adds	r2, #48	@ 0x30
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	e00a      	b.n	800838a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	b2da      	uxtb	r2, r3
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4619      	mov	r1, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	440b      	add	r3, r1
 8008384:	3237      	adds	r2, #55	@ 0x37
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	3301      	adds	r3, #1
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4413      	add	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	3301      	adds	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]
 80083a4:	7dfa      	ldrb	r2, [r7, #23]
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d3d3      	bcc.n	8008354 <IntToUnicode+0x18>
  }
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <HAL_PCD_MspInit+0x44>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d113      	bne.n	80083f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <HAL_PCD_MspInit+0x48>)
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008400 <HAL_PCD_MspInit+0x48>)
 80083d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083d4:	61d3      	str	r3, [r2, #28]
 80083d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <HAL_PCD_MspInit+0x48>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80083e2:	2200      	movs	r2, #0
 80083e4:	2100      	movs	r1, #0
 80083e6:	2014      	movs	r0, #20
 80083e8:	f7f9 fadf 	bl	80019aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80083ec:	2014      	movs	r0, #20
 80083ee:	f7f9 faf8 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	40005c00 	.word	0x40005c00
 8008400:	40021000 	.word	0x40021000

08008404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7fe fd9b 	bl	8006f56 <USBD_LL_SetupStage>
}
 8008420:	bf00      	nop
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	4613      	mov	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	440b      	add	r3, r1
 8008448:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	4619      	mov	r1, r3
 8008452:	f7fe fdcd 	bl	8006ff0 <USBD_LL_DataOutStage>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008470:	78fa      	ldrb	r2, [r7, #3]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	440b      	add	r3, r1
 800847e:	3324      	adds	r3, #36	@ 0x24
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	4619      	mov	r1, r3
 8008486:	f7fe fe24 	bl	80070d2 <USBD_LL_DataInStage>
}
 800848a:	bf00      	nop
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b082      	sub	sp, #8
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe ff34 	bl	800730e <USBD_LL_SOF>
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	799b      	ldrb	r3, [r3, #6]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d001      	beq.n	80084c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084c2:	f7f8 ffb9 	bl	8001438 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084cc:	7bfa      	ldrb	r2, [r7, #15]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fee4 	bl	800729e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fe fe9d 	bl	800721c <USBD_LL_Reset>
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fede 	bl	80072bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7a9b      	ldrb	r3, [r3, #10]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008508:	4b04      	ldr	r3, [pc, #16]	@ (800851c <HAL_PCD_SuspendCallback+0x30>)
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	4a03      	ldr	r2, [pc, #12]	@ (800851c <HAL_PCD_SuspendCallback+0x30>)
 800850e:	f043 0306 	orr.w	r3, r3, #6
 8008512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	e000ed00 	.word	0xe000ed00

08008520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fed8 	bl	80072e4 <USBD_LL_Resume>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008544:	4a28      	ldr	r2, [pc, #160]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a26      	ldr	r2, [pc, #152]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008550:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008554:	4b24      	ldr	r3, [pc, #144]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008556:	4a25      	ldr	r2, [pc, #148]	@ (80085ec <USBD_LL_Init+0xb0>)
 8008558:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800855a:	4b23      	ldr	r3, [pc, #140]	@ (80085e8 <USBD_LL_Init+0xac>)
 800855c:	2208      	movs	r2, #8
 800855e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008560:	4b21      	ldr	r3, [pc, #132]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008562:	2202      	movs	r2, #2
 8008564:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008566:	4b20      	ldr	r3, [pc, #128]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008568:	2200      	movs	r2, #0
 800856a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800856c:	4b1e      	ldr	r3, [pc, #120]	@ (80085e8 <USBD_LL_Init+0xac>)
 800856e:	2200      	movs	r2, #0
 8008570:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008572:	4b1d      	ldr	r3, [pc, #116]	@ (80085e8 <USBD_LL_Init+0xac>)
 8008574:	2200      	movs	r2, #0
 8008576:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008578:	481b      	ldr	r0, [pc, #108]	@ (80085e8 <USBD_LL_Init+0xac>)
 800857a:	f7f9 fc00 	bl	8001d7e <HAL_PCD_Init>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008584:	f7f8 ff58 	bl	8001438 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800858e:	2318      	movs	r3, #24
 8008590:	2200      	movs	r2, #0
 8008592:	2100      	movs	r1, #0
 8008594:	f7fb f911 	bl	80037ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800859e:	2358      	movs	r3, #88	@ 0x58
 80085a0:	2200      	movs	r2, #0
 80085a2:	2180      	movs	r1, #128	@ 0x80
 80085a4:	f7fb f909 	bl	80037ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085ae:	23c0      	movs	r3, #192	@ 0xc0
 80085b0:	2200      	movs	r2, #0
 80085b2:	2181      	movs	r1, #129	@ 0x81
 80085b4:	f7fb f901 	bl	80037ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80085c2:	2200      	movs	r2, #0
 80085c4:	2101      	movs	r1, #1
 80085c6:	f7fb f8f8 	bl	80037ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085d4:	2200      	movs	r2, #0
 80085d6:	2182      	movs	r1, #130	@ 0x82
 80085d8:	f7fb f8ef 	bl	80037ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200010a8 	.word	0x200010a8
 80085ec:	40005c00 	.word	0x40005c00

080085f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008606:	4618      	mov	r0, r3
 8008608:	f7f9 fcaf 	bl	8001f6a <HAL_PCD_Start>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f94e 	bl	80088b4 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	4603      	mov	r3, r0
 8008636:	70fb      	strb	r3, [r7, #3]
 8008638:	460b      	mov	r3, r1
 800863a:	70bb      	strb	r3, [r7, #2]
 800863c:	4613      	mov	r3, r2
 800863e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800864e:	78bb      	ldrb	r3, [r7, #2]
 8008650:	883a      	ldrh	r2, [r7, #0]
 8008652:	78f9      	ldrb	r1, [r7, #3]
 8008654:	f7f9 fe03 	bl	800225e <HAL_PCD_EP_Open>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f928 	bl	80088b4 <USBD_Get_USB_Status>
 8008664:	4603      	mov	r3, r0
 8008666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008668:	7bbb      	ldrb	r3, [r7, #14]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	460b      	mov	r3, r1
 800867c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	4611      	mov	r1, r2
 8008690:	4618      	mov	r0, r3
 8008692:	f7f9 fe41 	bl	8002318 <HAL_PCD_EP_Close>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4618      	mov	r0, r3
 800869e:	f000 f909 	bl	80088b4 <USBD_Get_USB_Status>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f9 fee9 	bl	80024a6 <HAL_PCD_EP_SetStall>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f8ea 	bl	80088b4 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f7f9 ff2a 	bl	8002566 <HAL_PCD_EP_ClrStall>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f8cb 	bl	80088b4 <USBD_Get_USB_Status>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008722:	7bbb      	ldrb	r3, [r7, #14]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800873e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008744:	2b00      	cmp	r3, #0
 8008746:	da0b      	bge.n	8008760 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	440b      	add	r3, r1
 800875a:	3312      	adds	r3, #18
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	e00b      	b.n	8008778 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	440b      	add	r3, r1
 8008772:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008776:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7f9 fd38 	bl	8002216 <HAL_PCD_SetAddress>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f881 	bl	80088b4 <USBD_Get_USB_Status>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	461a      	mov	r2, r3
 80087cc:	460b      	mov	r3, r1
 80087ce:	72fb      	strb	r3, [r7, #11]
 80087d0:	4613      	mov	r3, r2
 80087d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80087e2:	893b      	ldrh	r3, [r7, #8]
 80087e4:	7af9      	ldrb	r1, [r7, #11]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	f7f9 fe26 	bl	8002438 <HAL_PCD_EP_Transmit>
 80087ec:	4603      	mov	r3, r0
 80087ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f85e 	bl	80088b4 <USBD_Get_USB_Status>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b086      	sub	sp, #24
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	607a      	str	r2, [r7, #4]
 8008810:	461a      	mov	r2, r3
 8008812:	460b      	mov	r3, r1
 8008814:	72fb      	strb	r3, [r7, #11]
 8008816:	4613      	mov	r3, r2
 8008818:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008828:	893b      	ldrh	r3, [r7, #8]
 800882a:	7af9      	ldrb	r1, [r7, #11]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f7f9 fdbb 	bl	80023a8 <HAL_PCD_EP_Receive>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	4618      	mov	r0, r3
 800883a:	f000 f83b 	bl	80088b4 <USBD_Get_USB_Status>
 800883e:	4603      	mov	r3, r0
 8008840:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008842:	7dbb      	ldrb	r3, [r7, #22]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	4611      	mov	r1, r2
 8008862:	4618      	mov	r0, r3
 8008864:	f7f9 fdd1 	bl	800240a <HAL_PCD_EP_GetRxCount>
 8008868:	4603      	mov	r3, r0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <USBD_static_malloc+0x14>)
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr
 8008888:	20001380 	.word	0x20001380

0800888c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]

}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088aa:	bf00      	nop
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr

080088b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d817      	bhi.n	80088f8 <USBD_Get_USB_Status+0x44>
 80088c8:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <USBD_Get_USB_Status+0x1c>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	080088e1 	.word	0x080088e1
 80088d4:	080088e7 	.word	0x080088e7
 80088d8:	080088ed 	.word	0x080088ed
 80088dc:	080088f3 	.word	0x080088f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e00b      	b.n	80088fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088e6:	2302      	movs	r3, #2
 80088e8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ea:	e008      	b.n	80088fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
    break;
 80088f0:	e005      	b.n	80088fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	73fb      	strb	r3, [r7, #15]
    break;
 80088f6:	e002      	b.n	80088fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088f8:	2302      	movs	r3, #2
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	bf00      	nop
  }
  return usb_status;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <atof>:
 800890c:	2100      	movs	r1, #0
 800890e:	f000 bdfb 	b.w	8009508 <strtod>

08008912 <sulp>:
 8008912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	460f      	mov	r7, r1
 8008918:	4690      	mov	r8, r2
 800891a:	f001 ff85 	bl	800a828 <__ulp>
 800891e:	4604      	mov	r4, r0
 8008920:	460d      	mov	r5, r1
 8008922:	f1b8 0f00 	cmp.w	r8, #0
 8008926:	d011      	beq.n	800894c <sulp+0x3a>
 8008928:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800892c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008930:	2b00      	cmp	r3, #0
 8008932:	dd0b      	ble.n	800894c <sulp+0x3a>
 8008934:	2400      	movs	r4, #0
 8008936:	051b      	lsls	r3, r3, #20
 8008938:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800893c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008940:	4622      	mov	r2, r4
 8008942:	462b      	mov	r3, r5
 8008944:	f7f7 fdc8 	bl	80004d8 <__aeabi_dmul>
 8008948:	4604      	mov	r4, r0
 800894a:	460d      	mov	r5, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008954:	0000      	movs	r0, r0
	...

08008958 <_strtod_l>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	b09f      	sub	sp, #124	@ 0x7c
 800895e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008960:	2200      	movs	r2, #0
 8008962:	460c      	mov	r4, r1
 8008964:	921a      	str	r2, [sp, #104]	@ 0x68
 8008966:	f04f 0a00 	mov.w	sl, #0
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	460a      	mov	r2, r1
 8008970:	9005      	str	r0, [sp, #20]
 8008972:	9219      	str	r2, [sp, #100]	@ 0x64
 8008974:	7811      	ldrb	r1, [r2, #0]
 8008976:	292b      	cmp	r1, #43	@ 0x2b
 8008978:	d048      	beq.n	8008a0c <_strtod_l+0xb4>
 800897a:	d836      	bhi.n	80089ea <_strtod_l+0x92>
 800897c:	290d      	cmp	r1, #13
 800897e:	d830      	bhi.n	80089e2 <_strtod_l+0x8a>
 8008980:	2908      	cmp	r1, #8
 8008982:	d830      	bhi.n	80089e6 <_strtod_l+0x8e>
 8008984:	2900      	cmp	r1, #0
 8008986:	d039      	beq.n	80089fc <_strtod_l+0xa4>
 8008988:	2200      	movs	r2, #0
 800898a:	920e      	str	r2, [sp, #56]	@ 0x38
 800898c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800898e:	782a      	ldrb	r2, [r5, #0]
 8008990:	2a30      	cmp	r2, #48	@ 0x30
 8008992:	f040 80b0 	bne.w	8008af6 <_strtod_l+0x19e>
 8008996:	786a      	ldrb	r2, [r5, #1]
 8008998:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800899c:	2a58      	cmp	r2, #88	@ 0x58
 800899e:	d16c      	bne.n	8008a7a <_strtod_l+0x122>
 80089a0:	9302      	str	r3, [sp, #8]
 80089a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089a4:	4a8f      	ldr	r2, [pc, #572]	@ (8008be4 <_strtod_l+0x28c>)
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	ab1a      	add	r3, sp, #104	@ 0x68
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089b0:	a919      	add	r1, sp, #100	@ 0x64
 80089b2:	f001 f83b 	bl	8009a2c <__gethex>
 80089b6:	f010 060f 	ands.w	r6, r0, #15
 80089ba:	4604      	mov	r4, r0
 80089bc:	d005      	beq.n	80089ca <_strtod_l+0x72>
 80089be:	2e06      	cmp	r6, #6
 80089c0:	d126      	bne.n	8008a10 <_strtod_l+0xb8>
 80089c2:	2300      	movs	r3, #0
 80089c4:	3501      	adds	r5, #1
 80089c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80089c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80089ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8582 	bne.w	80094d6 <_strtod_l+0xb7e>
 80089d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089d4:	b1bb      	cbz	r3, 8008a06 <_strtod_l+0xae>
 80089d6:	4650      	mov	r0, sl
 80089d8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80089dc:	b01f      	add	sp, #124	@ 0x7c
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	2920      	cmp	r1, #32
 80089e4:	d1d0      	bne.n	8008988 <_strtod_l+0x30>
 80089e6:	3201      	adds	r2, #1
 80089e8:	e7c3      	b.n	8008972 <_strtod_l+0x1a>
 80089ea:	292d      	cmp	r1, #45	@ 0x2d
 80089ec:	d1cc      	bne.n	8008988 <_strtod_l+0x30>
 80089ee:	2101      	movs	r1, #1
 80089f0:	910e      	str	r1, [sp, #56]	@ 0x38
 80089f2:	1c51      	adds	r1, r2, #1
 80089f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80089f6:	7852      	ldrb	r2, [r2, #1]
 80089f8:	2a00      	cmp	r2, #0
 80089fa:	d1c7      	bne.n	800898c <_strtod_l+0x34>
 80089fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089fe:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 8566 	bne.w	80094d2 <_strtod_l+0xb7a>
 8008a06:	4650      	mov	r0, sl
 8008a08:	4659      	mov	r1, fp
 8008a0a:	e7e7      	b.n	80089dc <_strtod_l+0x84>
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	e7ef      	b.n	80089f0 <_strtod_l+0x98>
 8008a10:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a12:	b13a      	cbz	r2, 8008a24 <_strtod_l+0xcc>
 8008a14:	2135      	movs	r1, #53	@ 0x35
 8008a16:	a81c      	add	r0, sp, #112	@ 0x70
 8008a18:	f001 fff6 	bl	800aa08 <__copybits>
 8008a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a1e:	9805      	ldr	r0, [sp, #20]
 8008a20:	f001 fbd6 	bl	800a1d0 <_Bfree>
 8008a24:	3e01      	subs	r6, #1
 8008a26:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a28:	2e04      	cmp	r6, #4
 8008a2a:	d806      	bhi.n	8008a3a <_strtod_l+0xe2>
 8008a2c:	e8df f006 	tbb	[pc, r6]
 8008a30:	201d0314 	.word	0x201d0314
 8008a34:	14          	.byte	0x14
 8008a35:	00          	.byte	0x00
 8008a36:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a3a:	05e1      	lsls	r1, r4, #23
 8008a3c:	bf48      	it	mi
 8008a3e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a42:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a46:	0d1b      	lsrs	r3, r3, #20
 8008a48:	051b      	lsls	r3, r3, #20
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1bd      	bne.n	80089ca <_strtod_l+0x72>
 8008a4e:	f000 fefb 	bl	8009848 <__errno>
 8008a52:	2322      	movs	r3, #34	@ 0x22
 8008a54:	6003      	str	r3, [r0, #0]
 8008a56:	e7b8      	b.n	80089ca <_strtod_l+0x72>
 8008a58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a64:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a68:	e7e7      	b.n	8008a3a <_strtod_l+0xe2>
 8008a6a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008be8 <_strtod_l+0x290>
 8008a6e:	e7e4      	b.n	8008a3a <_strtod_l+0xe2>
 8008a70:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a74:	f04f 3aff 	mov.w	sl, #4294967295
 8008a78:	e7df      	b.n	8008a3a <_strtod_l+0xe2>
 8008a7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	2b30      	cmp	r3, #48	@ 0x30
 8008a84:	d0f9      	beq.n	8008a7a <_strtod_l+0x122>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d09f      	beq.n	80089ca <_strtod_l+0x72>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	2700      	movs	r7, #0
 8008a8e:	220a      	movs	r2, #10
 8008a90:	46b9      	mov	r9, r7
 8008a92:	9308      	str	r3, [sp, #32]
 8008a94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a96:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008a98:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a9a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a9c:	7805      	ldrb	r5, [r0, #0]
 8008a9e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008aa2:	b2d9      	uxtb	r1, r3
 8008aa4:	2909      	cmp	r1, #9
 8008aa6:	d928      	bls.n	8008afa <_strtod_l+0x1a2>
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4950      	ldr	r1, [pc, #320]	@ (8008bec <_strtod_l+0x294>)
 8008aac:	f000 fe74 	bl	8009798 <strncmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d032      	beq.n	8008b1a <_strtod_l+0x1c2>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4603      	mov	r3, r0
 8008aba:	464d      	mov	r5, r9
 8008abc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008abe:	2a65      	cmp	r2, #101	@ 0x65
 8008ac0:	d001      	beq.n	8008ac6 <_strtod_l+0x16e>
 8008ac2:	2a45      	cmp	r2, #69	@ 0x45
 8008ac4:	d114      	bne.n	8008af0 <_strtod_l+0x198>
 8008ac6:	b91d      	cbnz	r5, 8008ad0 <_strtod_l+0x178>
 8008ac8:	9a08      	ldr	r2, [sp, #32]
 8008aca:	4302      	orrs	r2, r0
 8008acc:	d096      	beq.n	80089fc <_strtod_l+0xa4>
 8008ace:	2500      	movs	r5, #0
 8008ad0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ad2:	1c62      	adds	r2, r4, #1
 8008ad4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ad6:	7862      	ldrb	r2, [r4, #1]
 8008ad8:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ada:	d07a      	beq.n	8008bd2 <_strtod_l+0x27a>
 8008adc:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ade:	d07e      	beq.n	8008bde <_strtod_l+0x286>
 8008ae0:	f04f 0c00 	mov.w	ip, #0
 8008ae4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ae8:	2909      	cmp	r1, #9
 8008aea:	f240 8085 	bls.w	8008bf8 <_strtod_l+0x2a0>
 8008aee:	9419      	str	r4, [sp, #100]	@ 0x64
 8008af0:	f04f 0800 	mov.w	r8, #0
 8008af4:	e0a5      	b.n	8008c42 <_strtod_l+0x2ea>
 8008af6:	2300      	movs	r3, #0
 8008af8:	e7c8      	b.n	8008a8c <_strtod_l+0x134>
 8008afa:	f1b9 0f08 	cmp.w	r9, #8
 8008afe:	bfd8      	it	le
 8008b00:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008b02:	f100 0001 	add.w	r0, r0, #1
 8008b06:	bfd6      	itet	le
 8008b08:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b0c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008b10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008b12:	f109 0901 	add.w	r9, r9, #1
 8008b16:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b18:	e7bf      	b.n	8008a9a <_strtod_l+0x142>
 8008b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b20:	785a      	ldrb	r2, [r3, #1]
 8008b22:	f1b9 0f00 	cmp.w	r9, #0
 8008b26:	d03b      	beq.n	8008ba0 <_strtod_l+0x248>
 8008b28:	464d      	mov	r5, r9
 8008b2a:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b2c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	d912      	bls.n	8008b5a <_strtod_l+0x202>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e7c2      	b.n	8008abe <_strtod_l+0x166>
 8008b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b40:	785a      	ldrb	r2, [r3, #1]
 8008b42:	2a30      	cmp	r2, #48	@ 0x30
 8008b44:	d0f8      	beq.n	8008b38 <_strtod_l+0x1e0>
 8008b46:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	f200 84c8 	bhi.w	80094e0 <_strtod_l+0xb88>
 8008b50:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b52:	2000      	movs	r0, #0
 8008b54:	4605      	mov	r5, r0
 8008b56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b58:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b5a:	3a30      	subs	r2, #48	@ 0x30
 8008b5c:	f100 0301 	add.w	r3, r0, #1
 8008b60:	d018      	beq.n	8008b94 <_strtod_l+0x23c>
 8008b62:	462e      	mov	r6, r5
 8008b64:	f04f 0e0a 	mov.w	lr, #10
 8008b68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b6a:	4419      	add	r1, r3
 8008b6c:	910a      	str	r1, [sp, #40]	@ 0x28
 8008b6e:	1c71      	adds	r1, r6, #1
 8008b70:	eba1 0c05 	sub.w	ip, r1, r5
 8008b74:	4563      	cmp	r3, ip
 8008b76:	dc15      	bgt.n	8008ba4 <_strtod_l+0x24c>
 8008b78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008b7c:	182b      	adds	r3, r5, r0
 8008b7e:	2b08      	cmp	r3, #8
 8008b80:	f105 0501 	add.w	r5, r5, #1
 8008b84:	4405      	add	r5, r0
 8008b86:	dc1a      	bgt.n	8008bbe <_strtod_l+0x266>
 8008b88:	230a      	movs	r3, #10
 8008b8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b8c:	fb03 2301 	mla	r3, r3, r1, r2
 8008b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b92:	2300      	movs	r3, #0
 8008b94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b96:	4618      	mov	r0, r3
 8008b98:	1c51      	adds	r1, r2, #1
 8008b9a:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b9c:	7852      	ldrb	r2, [r2, #1]
 8008b9e:	e7c5      	b.n	8008b2c <_strtod_l+0x1d4>
 8008ba0:	4648      	mov	r0, r9
 8008ba2:	e7ce      	b.n	8008b42 <_strtod_l+0x1ea>
 8008ba4:	2e08      	cmp	r6, #8
 8008ba6:	dc05      	bgt.n	8008bb4 <_strtod_l+0x25c>
 8008ba8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008baa:	fb0e f606 	mul.w	r6, lr, r6
 8008bae:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008bb0:	460e      	mov	r6, r1
 8008bb2:	e7dc      	b.n	8008b6e <_strtod_l+0x216>
 8008bb4:	2910      	cmp	r1, #16
 8008bb6:	bfd8      	it	le
 8008bb8:	fb0e f707 	mulle.w	r7, lr, r7
 8008bbc:	e7f8      	b.n	8008bb0 <_strtod_l+0x258>
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	bfdc      	itt	le
 8008bc2:	230a      	movle	r3, #10
 8008bc4:	fb03 2707 	mlale	r7, r3, r7, r2
 8008bc8:	e7e3      	b.n	8008b92 <_strtod_l+0x23a>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e77a      	b.n	8008ac8 <_strtod_l+0x170>
 8008bd2:	f04f 0c00 	mov.w	ip, #0
 8008bd6:	1ca2      	adds	r2, r4, #2
 8008bd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bda:	78a2      	ldrb	r2, [r4, #2]
 8008bdc:	e782      	b.n	8008ae4 <_strtod_l+0x18c>
 8008bde:	f04f 0c01 	mov.w	ip, #1
 8008be2:	e7f8      	b.n	8008bd6 <_strtod_l+0x27e>
 8008be4:	0800bb9c 	.word	0x0800bb9c
 8008be8:	7ff00000 	.word	0x7ff00000
 8008bec:	0800ba22 	.word	0x0800ba22
 8008bf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bf2:	1c51      	adds	r1, r2, #1
 8008bf4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bf6:	7852      	ldrb	r2, [r2, #1]
 8008bf8:	2a30      	cmp	r2, #48	@ 0x30
 8008bfa:	d0f9      	beq.n	8008bf0 <_strtod_l+0x298>
 8008bfc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c00:	2908      	cmp	r1, #8
 8008c02:	f63f af75 	bhi.w	8008af0 <_strtod_l+0x198>
 8008c06:	f04f 080a 	mov.w	r8, #10
 8008c0a:	3a30      	subs	r2, #48	@ 0x30
 8008c0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c10:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c14:	1c56      	adds	r6, r2, #1
 8008c16:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c18:	7852      	ldrb	r2, [r2, #1]
 8008c1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c1e:	f1be 0f09 	cmp.w	lr, #9
 8008c22:	d939      	bls.n	8008c98 <_strtod_l+0x340>
 8008c24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c26:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c2a:	1a76      	subs	r6, r6, r1
 8008c2c:	2e08      	cmp	r6, #8
 8008c2e:	dc03      	bgt.n	8008c38 <_strtod_l+0x2e0>
 8008c30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c32:	4588      	cmp	r8, r1
 8008c34:	bfa8      	it	ge
 8008c36:	4688      	movge	r8, r1
 8008c38:	f1bc 0f00 	cmp.w	ip, #0
 8008c3c:	d001      	beq.n	8008c42 <_strtod_l+0x2ea>
 8008c3e:	f1c8 0800 	rsb	r8, r8, #0
 8008c42:	2d00      	cmp	r5, #0
 8008c44:	d14e      	bne.n	8008ce4 <_strtod_l+0x38c>
 8008c46:	9908      	ldr	r1, [sp, #32]
 8008c48:	4308      	orrs	r0, r1
 8008c4a:	f47f aebe 	bne.w	80089ca <_strtod_l+0x72>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f47f aed4 	bne.w	80089fc <_strtod_l+0xa4>
 8008c54:	2a69      	cmp	r2, #105	@ 0x69
 8008c56:	d028      	beq.n	8008caa <_strtod_l+0x352>
 8008c58:	dc25      	bgt.n	8008ca6 <_strtod_l+0x34e>
 8008c5a:	2a49      	cmp	r2, #73	@ 0x49
 8008c5c:	d025      	beq.n	8008caa <_strtod_l+0x352>
 8008c5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c60:	f47f aecc 	bne.w	80089fc <_strtod_l+0xa4>
 8008c64:	4999      	ldr	r1, [pc, #612]	@ (8008ecc <_strtod_l+0x574>)
 8008c66:	a819      	add	r0, sp, #100	@ 0x64
 8008c68:	f001 f902 	bl	8009e70 <__match>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f43f aec5 	beq.w	80089fc <_strtod_l+0xa4>
 8008c72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	2b28      	cmp	r3, #40	@ 0x28
 8008c78:	d12e      	bne.n	8008cd8 <_strtod_l+0x380>
 8008c7a:	4995      	ldr	r1, [pc, #596]	@ (8008ed0 <_strtod_l+0x578>)
 8008c7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c7e:	a819      	add	r0, sp, #100	@ 0x64
 8008c80:	f001 f90a 	bl	8009e98 <__hexnan>
 8008c84:	2805      	cmp	r0, #5
 8008c86:	d127      	bne.n	8008cd8 <_strtod_l+0x380>
 8008c88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c96:	e698      	b.n	80089ca <_strtod_l+0x72>
 8008c98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c9a:	fb08 2101 	mla	r1, r8, r1, r2
 8008c9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ca4:	e7b5      	b.n	8008c12 <_strtod_l+0x2ba>
 8008ca6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008ca8:	e7da      	b.n	8008c60 <_strtod_l+0x308>
 8008caa:	498a      	ldr	r1, [pc, #552]	@ (8008ed4 <_strtod_l+0x57c>)
 8008cac:	a819      	add	r0, sp, #100	@ 0x64
 8008cae:	f001 f8df 	bl	8009e70 <__match>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f43f aea2 	beq.w	80089fc <_strtod_l+0xa4>
 8008cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cba:	4987      	ldr	r1, [pc, #540]	@ (8008ed8 <_strtod_l+0x580>)
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	a819      	add	r0, sp, #100	@ 0x64
 8008cc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cc2:	f001 f8d5 	bl	8009e70 <__match>
 8008cc6:	b910      	cbnz	r0, 8008cce <_strtod_l+0x376>
 8008cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cca:	3301      	adds	r3, #1
 8008ccc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cce:	f04f 0a00 	mov.w	sl, #0
 8008cd2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008edc <_strtod_l+0x584>
 8008cd6:	e678      	b.n	80089ca <_strtod_l+0x72>
 8008cd8:	4881      	ldr	r0, [pc, #516]	@ (8008ee0 <_strtod_l+0x588>)
 8008cda:	f000 fdf1 	bl	80098c0 <nan>
 8008cde:	4682      	mov	sl, r0
 8008ce0:	468b      	mov	fp, r1
 8008ce2:	e672      	b.n	80089ca <_strtod_l+0x72>
 8008ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce6:	f1b9 0f00 	cmp.w	r9, #0
 8008cea:	bf08      	it	eq
 8008cec:	46a9      	moveq	r9, r5
 8008cee:	eba8 0303 	sub.w	r3, r8, r3
 8008cf2:	2d10      	cmp	r5, #16
 8008cf4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008cf6:	462c      	mov	r4, r5
 8008cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfa:	bfa8      	it	ge
 8008cfc:	2410      	movge	r4, #16
 8008cfe:	f7f7 fb71 	bl	80003e4 <__aeabi_ui2d>
 8008d02:	2d09      	cmp	r5, #9
 8008d04:	4682      	mov	sl, r0
 8008d06:	468b      	mov	fp, r1
 8008d08:	dc11      	bgt.n	8008d2e <_strtod_l+0x3d6>
 8008d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f43f ae5c 	beq.w	80089ca <_strtod_l+0x72>
 8008d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d14:	dd76      	ble.n	8008e04 <_strtod_l+0x4ac>
 8008d16:	2b16      	cmp	r3, #22
 8008d18:	dc5d      	bgt.n	8008dd6 <_strtod_l+0x47e>
 8008d1a:	4972      	ldr	r1, [pc, #456]	@ (8008ee4 <_strtod_l+0x58c>)
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d22:	465b      	mov	r3, fp
 8008d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d28:	f7f7 fbd6 	bl	80004d8 <__aeabi_dmul>
 8008d2c:	e7d7      	b.n	8008cde <_strtod_l+0x386>
 8008d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ee4 <_strtod_l+0x58c>)
 8008d30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d38:	f7f7 fbce 	bl	80004d8 <__aeabi_dmul>
 8008d3c:	4682      	mov	sl, r0
 8008d3e:	4638      	mov	r0, r7
 8008d40:	468b      	mov	fp, r1
 8008d42:	f7f7 fb4f 	bl	80003e4 <__aeabi_ui2d>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	f7f7 fa0d 	bl	800016c <__adddf3>
 8008d52:	2d0f      	cmp	r5, #15
 8008d54:	4682      	mov	sl, r0
 8008d56:	468b      	mov	fp, r1
 8008d58:	ddd7      	ble.n	8008d0a <_strtod_l+0x3b2>
 8008d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5c:	1b2c      	subs	r4, r5, r4
 8008d5e:	441c      	add	r4, r3
 8008d60:	2c00      	cmp	r4, #0
 8008d62:	f340 8093 	ble.w	8008e8c <_strtod_l+0x534>
 8008d66:	f014 030f 	ands.w	r3, r4, #15
 8008d6a:	d00a      	beq.n	8008d82 <_strtod_l+0x42a>
 8008d6c:	495d      	ldr	r1, [pc, #372]	@ (8008ee4 <_strtod_l+0x58c>)
 8008d6e:	4652      	mov	r2, sl
 8008d70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d78:	465b      	mov	r3, fp
 8008d7a:	f7f7 fbad 	bl	80004d8 <__aeabi_dmul>
 8008d7e:	4682      	mov	sl, r0
 8008d80:	468b      	mov	fp, r1
 8008d82:	f034 040f 	bics.w	r4, r4, #15
 8008d86:	d073      	beq.n	8008e70 <_strtod_l+0x518>
 8008d88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d8c:	dd49      	ble.n	8008e22 <_strtod_l+0x4ca>
 8008d8e:	2400      	movs	r4, #0
 8008d90:	46a0      	mov	r8, r4
 8008d92:	46a1      	mov	r9, r4
 8008d94:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d96:	2322      	movs	r3, #34	@ 0x22
 8008d98:	f04f 0a00 	mov.w	sl, #0
 8008d9c:	9a05      	ldr	r2, [sp, #20]
 8008d9e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008edc <_strtod_l+0x584>
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f43f ae0f 	beq.w	80089ca <_strtod_l+0x72>
 8008dac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dae:	9805      	ldr	r0, [sp, #20]
 8008db0:	f001 fa0e 	bl	800a1d0 <_Bfree>
 8008db4:	4649      	mov	r1, r9
 8008db6:	9805      	ldr	r0, [sp, #20]
 8008db8:	f001 fa0a 	bl	800a1d0 <_Bfree>
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	9805      	ldr	r0, [sp, #20]
 8008dc0:	f001 fa06 	bl	800a1d0 <_Bfree>
 8008dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dc6:	9805      	ldr	r0, [sp, #20]
 8008dc8:	f001 fa02 	bl	800a1d0 <_Bfree>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	9805      	ldr	r0, [sp, #20]
 8008dd0:	f001 f9fe 	bl	800a1d0 <_Bfree>
 8008dd4:	e5f9      	b.n	80089ca <_strtod_l+0x72>
 8008dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	dbbc      	blt.n	8008d5a <_strtod_l+0x402>
 8008de0:	4c40      	ldr	r4, [pc, #256]	@ (8008ee4 <_strtod_l+0x58c>)
 8008de2:	f1c5 050f 	rsb	r5, r5, #15
 8008de6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dea:	4652      	mov	r2, sl
 8008dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df0:	465b      	mov	r3, fp
 8008df2:	f7f7 fb71 	bl	80004d8 <__aeabi_dmul>
 8008df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df8:	1b5d      	subs	r5, r3, r5
 8008dfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e02:	e791      	b.n	8008d28 <_strtod_l+0x3d0>
 8008e04:	3316      	adds	r3, #22
 8008e06:	dba8      	blt.n	8008d5a <_strtod_l+0x402>
 8008e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	eba3 0808 	sub.w	r8, r3, r8
 8008e10:	4b34      	ldr	r3, [pc, #208]	@ (8008ee4 <_strtod_l+0x58c>)
 8008e12:	4659      	mov	r1, fp
 8008e14:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e18:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e1c:	f7f7 fc86 	bl	800072c <__aeabi_ddiv>
 8008e20:	e75d      	b.n	8008cde <_strtod_l+0x386>
 8008e22:	2300      	movs	r3, #0
 8008e24:	4650      	mov	r0, sl
 8008e26:	4659      	mov	r1, fp
 8008e28:	461e      	mov	r6, r3
 8008e2a:	4f2f      	ldr	r7, [pc, #188]	@ (8008ee8 <_strtod_l+0x590>)
 8008e2c:	1124      	asrs	r4, r4, #4
 8008e2e:	2c01      	cmp	r4, #1
 8008e30:	dc21      	bgt.n	8008e76 <_strtod_l+0x51e>
 8008e32:	b10b      	cbz	r3, 8008e38 <_strtod_l+0x4e0>
 8008e34:	4682      	mov	sl, r0
 8008e36:	468b      	mov	fp, r1
 8008e38:	492b      	ldr	r1, [pc, #172]	@ (8008ee8 <_strtod_l+0x590>)
 8008e3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e42:	4652      	mov	r2, sl
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	465b      	mov	r3, fp
 8008e4a:	f7f7 fb45 	bl	80004d8 <__aeabi_dmul>
 8008e4e:	4b23      	ldr	r3, [pc, #140]	@ (8008edc <_strtod_l+0x584>)
 8008e50:	460a      	mov	r2, r1
 8008e52:	400b      	ands	r3, r1
 8008e54:	4925      	ldr	r1, [pc, #148]	@ (8008eec <_strtod_l+0x594>)
 8008e56:	4682      	mov	sl, r0
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	d898      	bhi.n	8008d8e <_strtod_l+0x436>
 8008e5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e60:	428b      	cmp	r3, r1
 8008e62:	bf86      	itte	hi
 8008e64:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e68:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008ef0 <_strtod_l+0x598>
 8008e6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e70:	2300      	movs	r3, #0
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	e076      	b.n	8008f64 <_strtod_l+0x60c>
 8008e76:	07e2      	lsls	r2, r4, #31
 8008e78:	d504      	bpl.n	8008e84 <_strtod_l+0x52c>
 8008e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7e:	f7f7 fb2b 	bl	80004d8 <__aeabi_dmul>
 8008e82:	2301      	movs	r3, #1
 8008e84:	3601      	adds	r6, #1
 8008e86:	1064      	asrs	r4, r4, #1
 8008e88:	3708      	adds	r7, #8
 8008e8a:	e7d0      	b.n	8008e2e <_strtod_l+0x4d6>
 8008e8c:	d0f0      	beq.n	8008e70 <_strtod_l+0x518>
 8008e8e:	4264      	negs	r4, r4
 8008e90:	f014 020f 	ands.w	r2, r4, #15
 8008e94:	d00a      	beq.n	8008eac <_strtod_l+0x554>
 8008e96:	4b13      	ldr	r3, [pc, #76]	@ (8008ee4 <_strtod_l+0x58c>)
 8008e98:	4650      	mov	r0, sl
 8008e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e9e:	4659      	mov	r1, fp
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fc42 	bl	800072c <__aeabi_ddiv>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	1124      	asrs	r4, r4, #4
 8008eae:	d0df      	beq.n	8008e70 <_strtod_l+0x518>
 8008eb0:	2c1f      	cmp	r4, #31
 8008eb2:	dd1f      	ble.n	8008ef4 <_strtod_l+0x59c>
 8008eb4:	2400      	movs	r4, #0
 8008eb6:	46a0      	mov	r8, r4
 8008eb8:	46a1      	mov	r9, r4
 8008eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ebc:	2322      	movs	r3, #34	@ 0x22
 8008ebe:	9a05      	ldr	r2, [sp, #20]
 8008ec0:	f04f 0a00 	mov.w	sl, #0
 8008ec4:	f04f 0b00 	mov.w	fp, #0
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	e76b      	b.n	8008da4 <_strtod_l+0x44c>
 8008ecc:	0800ba2d 	.word	0x0800ba2d
 8008ed0:	0800bb88 	.word	0x0800bb88
 8008ed4:	0800ba24 	.word	0x0800ba24
 8008ed8:	0800ba27 	.word	0x0800ba27
 8008edc:	7ff00000 	.word	0x7ff00000
 8008ee0:	0800bb87 	.word	0x0800bb87
 8008ee4:	0800bc10 	.word	0x0800bc10
 8008ee8:	0800bbe8 	.word	0x0800bbe8
 8008eec:	7ca00000 	.word	0x7ca00000
 8008ef0:	7fefffff 	.word	0x7fefffff
 8008ef4:	f014 0310 	ands.w	r3, r4, #16
 8008ef8:	bf18      	it	ne
 8008efa:	236a      	movne	r3, #106	@ 0x6a
 8008efc:	4650      	mov	r0, sl
 8008efe:	9308      	str	r3, [sp, #32]
 8008f00:	4659      	mov	r1, fp
 8008f02:	2300      	movs	r3, #0
 8008f04:	4e77      	ldr	r6, [pc, #476]	@ (80090e4 <_strtod_l+0x78c>)
 8008f06:	07e7      	lsls	r7, r4, #31
 8008f08:	d504      	bpl.n	8008f14 <_strtod_l+0x5bc>
 8008f0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f0e:	f7f7 fae3 	bl	80004d8 <__aeabi_dmul>
 8008f12:	2301      	movs	r3, #1
 8008f14:	1064      	asrs	r4, r4, #1
 8008f16:	f106 0608 	add.w	r6, r6, #8
 8008f1a:	d1f4      	bne.n	8008f06 <_strtod_l+0x5ae>
 8008f1c:	b10b      	cbz	r3, 8008f22 <_strtod_l+0x5ca>
 8008f1e:	4682      	mov	sl, r0
 8008f20:	468b      	mov	fp, r1
 8008f22:	9b08      	ldr	r3, [sp, #32]
 8008f24:	b1b3      	cbz	r3, 8008f54 <_strtod_l+0x5fc>
 8008f26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	4659      	mov	r1, fp
 8008f32:	dd0f      	ble.n	8008f54 <_strtod_l+0x5fc>
 8008f34:	2b1f      	cmp	r3, #31
 8008f36:	dd58      	ble.n	8008fea <_strtod_l+0x692>
 8008f38:	2b34      	cmp	r3, #52	@ 0x34
 8008f3a:	bfd8      	it	le
 8008f3c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f40:	f04f 0a00 	mov.w	sl, #0
 8008f44:	bfcf      	iteee	gt
 8008f46:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f4a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f4e:	4093      	lslle	r3, r2
 8008f50:	ea03 0b01 	andle.w	fp, r3, r1
 8008f54:	2200      	movs	r2, #0
 8008f56:	2300      	movs	r3, #0
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	f7f7 fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d1a7      	bne.n	8008eb4 <_strtod_l+0x55c>
 8008f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f66:	464a      	mov	r2, r9
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	9805      	ldr	r0, [sp, #20]
 8008f70:	f001 f996 	bl	800a2a0 <__s2b>
 8008f74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f43f af09 	beq.w	8008d8e <_strtod_l+0x436>
 8008f7c:	2400      	movs	r4, #0
 8008f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f82:	2a00      	cmp	r2, #0
 8008f84:	eba3 0308 	sub.w	r3, r3, r8
 8008f88:	bfa8      	it	ge
 8008f8a:	2300      	movge	r3, #0
 8008f8c:	46a0      	mov	r8, r4
 8008f8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f90:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f94:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f98:	9805      	ldr	r0, [sp, #20]
 8008f9a:	6859      	ldr	r1, [r3, #4]
 8008f9c:	f001 f8d8 	bl	800a150 <_Balloc>
 8008fa0:	4681      	mov	r9, r0
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f43f aef7 	beq.w	8008d96 <_strtod_l+0x43e>
 8008fa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008faa:	300c      	adds	r0, #12
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	f103 010c 	add.w	r1, r3, #12
 8008fb2:	3202      	adds	r2, #2
 8008fb4:	0092      	lsls	r2, r2, #2
 8008fb6:	f000 fc74 	bl	80098a2 <memcpy>
 8008fba:	ab1c      	add	r3, sp, #112	@ 0x70
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	9805      	ldr	r0, [sp, #20]
 8008fc8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fcc:	f001 fc94 	bl	800a8f8 <__d2b>
 8008fd0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	f43f aedf 	beq.w	8008d96 <_strtod_l+0x43e>
 8008fd8:	2101      	movs	r1, #1
 8008fda:	9805      	ldr	r0, [sp, #20]
 8008fdc:	f001 f9f6 	bl	800a3cc <__i2b>
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	b948      	cbnz	r0, 8008ff8 <_strtod_l+0x6a0>
 8008fe4:	f04f 0800 	mov.w	r8, #0
 8008fe8:	e6d5      	b.n	8008d96 <_strtod_l+0x43e>
 8008fea:	f04f 32ff 	mov.w	r2, #4294967295
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	ea03 0a0a 	and.w	sl, r3, sl
 8008ff6:	e7ad      	b.n	8008f54 <_strtod_l+0x5fc>
 8008ff8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008ffa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	bfab      	itete	ge
 8009000:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009002:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009004:	18ef      	addge	r7, r5, r3
 8009006:	1b5e      	sublt	r6, r3, r5
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	bfa8      	it	ge
 800900c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800900e:	eba5 0503 	sub.w	r5, r5, r3
 8009012:	4415      	add	r5, r2
 8009014:	4b34      	ldr	r3, [pc, #208]	@ (80090e8 <_strtod_l+0x790>)
 8009016:	f105 35ff 	add.w	r5, r5, #4294967295
 800901a:	bfb8      	it	lt
 800901c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800901e:	429d      	cmp	r5, r3
 8009020:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009024:	da50      	bge.n	80090c8 <_strtod_l+0x770>
 8009026:	1b5b      	subs	r3, r3, r5
 8009028:	2b1f      	cmp	r3, #31
 800902a:	f04f 0101 	mov.w	r1, #1
 800902e:	eba2 0203 	sub.w	r2, r2, r3
 8009032:	dc3d      	bgt.n	80090b0 <_strtod_l+0x758>
 8009034:	fa01 f303 	lsl.w	r3, r1, r3
 8009038:	9313      	str	r3, [sp, #76]	@ 0x4c
 800903a:	2300      	movs	r3, #0
 800903c:	9310      	str	r3, [sp, #64]	@ 0x40
 800903e:	18bd      	adds	r5, r7, r2
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	42af      	cmp	r7, r5
 8009044:	4416      	add	r6, r2
 8009046:	441e      	add	r6, r3
 8009048:	463b      	mov	r3, r7
 800904a:	bfa8      	it	ge
 800904c:	462b      	movge	r3, r5
 800904e:	42b3      	cmp	r3, r6
 8009050:	bfa8      	it	ge
 8009052:	4633      	movge	r3, r6
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfc2      	ittt	gt
 8009058:	1aed      	subgt	r5, r5, r3
 800905a:	1af6      	subgt	r6, r6, r3
 800905c:	1aff      	subgt	r7, r7, r3
 800905e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009060:	2b00      	cmp	r3, #0
 8009062:	dd16      	ble.n	8009092 <_strtod_l+0x73a>
 8009064:	4641      	mov	r1, r8
 8009066:	461a      	mov	r2, r3
 8009068:	9805      	ldr	r0, [sp, #20]
 800906a:	f001 fa67 	bl	800a53c <__pow5mult>
 800906e:	4680      	mov	r8, r0
 8009070:	2800      	cmp	r0, #0
 8009072:	d0b7      	beq.n	8008fe4 <_strtod_l+0x68c>
 8009074:	4601      	mov	r1, r0
 8009076:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009078:	9805      	ldr	r0, [sp, #20]
 800907a:	f001 f9bd 	bl	800a3f8 <__multiply>
 800907e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009080:	2800      	cmp	r0, #0
 8009082:	f43f ae88 	beq.w	8008d96 <_strtod_l+0x43e>
 8009086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009088:	9805      	ldr	r0, [sp, #20]
 800908a:	f001 f8a1 	bl	800a1d0 <_Bfree>
 800908e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009090:	931a      	str	r3, [sp, #104]	@ 0x68
 8009092:	2d00      	cmp	r5, #0
 8009094:	dc1d      	bgt.n	80090d2 <_strtod_l+0x77a>
 8009096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009098:	2b00      	cmp	r3, #0
 800909a:	dd27      	ble.n	80090ec <_strtod_l+0x794>
 800909c:	4649      	mov	r1, r9
 800909e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090a0:	9805      	ldr	r0, [sp, #20]
 80090a2:	f001 fa4b 	bl	800a53c <__pow5mult>
 80090a6:	4681      	mov	r9, r0
 80090a8:	bb00      	cbnz	r0, 80090ec <_strtod_l+0x794>
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	e672      	b.n	8008d96 <_strtod_l+0x43e>
 80090b0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090b4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090b8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090bc:	35e2      	adds	r5, #226	@ 0xe2
 80090be:	fa01 f305 	lsl.w	r3, r1, r5
 80090c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80090c4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090c6:	e7ba      	b.n	800903e <_strtod_l+0x6e6>
 80090c8:	2300      	movs	r3, #0
 80090ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80090cc:	2301      	movs	r3, #1
 80090ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090d0:	e7b5      	b.n	800903e <_strtod_l+0x6e6>
 80090d2:	462a      	mov	r2, r5
 80090d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090d6:	9805      	ldr	r0, [sp, #20]
 80090d8:	f001 fa8a 	bl	800a5f0 <__lshift>
 80090dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80090de:	2800      	cmp	r0, #0
 80090e0:	d1d9      	bne.n	8009096 <_strtod_l+0x73e>
 80090e2:	e658      	b.n	8008d96 <_strtod_l+0x43e>
 80090e4:	0800bbb0 	.word	0x0800bbb0
 80090e8:	fffffc02 	.word	0xfffffc02
 80090ec:	2e00      	cmp	r6, #0
 80090ee:	dd07      	ble.n	8009100 <_strtod_l+0x7a8>
 80090f0:	4649      	mov	r1, r9
 80090f2:	4632      	mov	r2, r6
 80090f4:	9805      	ldr	r0, [sp, #20]
 80090f6:	f001 fa7b 	bl	800a5f0 <__lshift>
 80090fa:	4681      	mov	r9, r0
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d0d4      	beq.n	80090aa <_strtod_l+0x752>
 8009100:	2f00      	cmp	r7, #0
 8009102:	dd08      	ble.n	8009116 <_strtod_l+0x7be>
 8009104:	4641      	mov	r1, r8
 8009106:	463a      	mov	r2, r7
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	f001 fa71 	bl	800a5f0 <__lshift>
 800910e:	4680      	mov	r8, r0
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f ae40 	beq.w	8008d96 <_strtod_l+0x43e>
 8009116:	464a      	mov	r2, r9
 8009118:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	f001 faf0 	bl	800a700 <__mdiff>
 8009120:	4604      	mov	r4, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f ae37 	beq.w	8008d96 <_strtod_l+0x43e>
 8009128:	68c3      	ldr	r3, [r0, #12]
 800912a:	4641      	mov	r1, r8
 800912c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800912e:	2300      	movs	r3, #0
 8009130:	60c3      	str	r3, [r0, #12]
 8009132:	f001 fac9 	bl	800a6c8 <__mcmp>
 8009136:	2800      	cmp	r0, #0
 8009138:	da3d      	bge.n	80091b6 <_strtod_l+0x85e>
 800913a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800913c:	ea53 030a 	orrs.w	r3, r3, sl
 8009140:	d163      	bne.n	800920a <_strtod_l+0x8b2>
 8009142:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009146:	2b00      	cmp	r3, #0
 8009148:	d15f      	bne.n	800920a <_strtod_l+0x8b2>
 800914a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800914e:	0d1b      	lsrs	r3, r3, #20
 8009150:	051b      	lsls	r3, r3, #20
 8009152:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009156:	d958      	bls.n	800920a <_strtod_l+0x8b2>
 8009158:	6963      	ldr	r3, [r4, #20]
 800915a:	b913      	cbnz	r3, 8009162 <_strtod_l+0x80a>
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	2b01      	cmp	r3, #1
 8009160:	dd53      	ble.n	800920a <_strtod_l+0x8b2>
 8009162:	4621      	mov	r1, r4
 8009164:	2201      	movs	r2, #1
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	f001 fa42 	bl	800a5f0 <__lshift>
 800916c:	4641      	mov	r1, r8
 800916e:	4604      	mov	r4, r0
 8009170:	f001 faaa 	bl	800a6c8 <__mcmp>
 8009174:	2800      	cmp	r0, #0
 8009176:	dd48      	ble.n	800920a <_strtod_l+0x8b2>
 8009178:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800917c:	9a08      	ldr	r2, [sp, #32]
 800917e:	0d1b      	lsrs	r3, r3, #20
 8009180:	051b      	lsls	r3, r3, #20
 8009182:	2a00      	cmp	r2, #0
 8009184:	d062      	beq.n	800924c <_strtod_l+0x8f4>
 8009186:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800918a:	d85f      	bhi.n	800924c <_strtod_l+0x8f4>
 800918c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009190:	f67f ae94 	bls.w	8008ebc <_strtod_l+0x564>
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	4ba3      	ldr	r3, [pc, #652]	@ (8009428 <_strtod_l+0xad0>)
 800919a:	2200      	movs	r2, #0
 800919c:	f7f7 f99c 	bl	80004d8 <__aeabi_dmul>
 80091a0:	4ba2      	ldr	r3, [pc, #648]	@ (800942c <_strtod_l+0xad4>)
 80091a2:	4682      	mov	sl, r0
 80091a4:	400b      	ands	r3, r1
 80091a6:	468b      	mov	fp, r1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f47f adff 	bne.w	8008dac <_strtod_l+0x454>
 80091ae:	2322      	movs	r3, #34	@ 0x22
 80091b0:	9a05      	ldr	r2, [sp, #20]
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e5fa      	b.n	8008dac <_strtod_l+0x454>
 80091b6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80091ba:	d165      	bne.n	8009288 <_strtod_l+0x930>
 80091bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091c2:	b35a      	cbz	r2, 800921c <_strtod_l+0x8c4>
 80091c4:	4a9a      	ldr	r2, [pc, #616]	@ (8009430 <_strtod_l+0xad8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d12b      	bne.n	8009222 <_strtod_l+0x8ca>
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	4651      	mov	r1, sl
 80091ce:	b303      	cbz	r3, 8009212 <_strtod_l+0x8ba>
 80091d0:	465a      	mov	r2, fp
 80091d2:	4b96      	ldr	r3, [pc, #600]	@ (800942c <_strtod_l+0xad4>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	d81b      	bhi.n	8009218 <_strtod_l+0x8c0>
 80091e0:	0d1b      	lsrs	r3, r3, #20
 80091e2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d119      	bne.n	8009222 <_strtod_l+0x8ca>
 80091ee:	4b91      	ldr	r3, [pc, #580]	@ (8009434 <_strtod_l+0xadc>)
 80091f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d102      	bne.n	80091fc <_strtod_l+0x8a4>
 80091f6:	3101      	adds	r1, #1
 80091f8:	f43f adcd 	beq.w	8008d96 <_strtod_l+0x43e>
 80091fc:	f04f 0a00 	mov.w	sl, #0
 8009200:	4b8a      	ldr	r3, [pc, #552]	@ (800942c <_strtod_l+0xad4>)
 8009202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009204:	401a      	ands	r2, r3
 8009206:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1c1      	bne.n	8009194 <_strtod_l+0x83c>
 8009210:	e5cc      	b.n	8008dac <_strtod_l+0x454>
 8009212:	f04f 33ff 	mov.w	r3, #4294967295
 8009216:	e7e8      	b.n	80091ea <_strtod_l+0x892>
 8009218:	4613      	mov	r3, r2
 800921a:	e7e6      	b.n	80091ea <_strtod_l+0x892>
 800921c:	ea53 030a 	orrs.w	r3, r3, sl
 8009220:	d0aa      	beq.n	8009178 <_strtod_l+0x820>
 8009222:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009224:	b1db      	cbz	r3, 800925e <_strtod_l+0x906>
 8009226:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009228:	4213      	tst	r3, r2
 800922a:	d0ee      	beq.n	800920a <_strtod_l+0x8b2>
 800922c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800922e:	4650      	mov	r0, sl
 8009230:	4659      	mov	r1, fp
 8009232:	9a08      	ldr	r2, [sp, #32]
 8009234:	b1bb      	cbz	r3, 8009266 <_strtod_l+0x90e>
 8009236:	f7ff fb6c 	bl	8008912 <sulp>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009242:	f7f6 ff93 	bl	800016c <__adddf3>
 8009246:	4682      	mov	sl, r0
 8009248:	468b      	mov	fp, r1
 800924a:	e7de      	b.n	800920a <_strtod_l+0x8b2>
 800924c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009250:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009254:	f04f 3aff 	mov.w	sl, #4294967295
 8009258:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800925c:	e7d5      	b.n	800920a <_strtod_l+0x8b2>
 800925e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009260:	ea13 0f0a 	tst.w	r3, sl
 8009264:	e7e1      	b.n	800922a <_strtod_l+0x8d2>
 8009266:	f7ff fb54 	bl	8008912 <sulp>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009272:	f7f6 ff79 	bl	8000168 <__aeabi_dsub>
 8009276:	2200      	movs	r2, #0
 8009278:	2300      	movs	r3, #0
 800927a:	4682      	mov	sl, r0
 800927c:	468b      	mov	fp, r1
 800927e:	f7f7 fb93 	bl	80009a8 <__aeabi_dcmpeq>
 8009282:	2800      	cmp	r0, #0
 8009284:	d0c1      	beq.n	800920a <_strtod_l+0x8b2>
 8009286:	e619      	b.n	8008ebc <_strtod_l+0x564>
 8009288:	4641      	mov	r1, r8
 800928a:	4620      	mov	r0, r4
 800928c:	f001 fb8c 	bl	800a9a8 <__ratio>
 8009290:	2200      	movs	r2, #0
 8009292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	f7f7 fb99 	bl	80009d0 <__aeabi_dcmple>
 800929e:	2800      	cmp	r0, #0
 80092a0:	d06d      	beq.n	800937e <_strtod_l+0xa26>
 80092a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d178      	bne.n	800939a <_strtod_l+0xa42>
 80092a8:	f1ba 0f00 	cmp.w	sl, #0
 80092ac:	d156      	bne.n	800935c <_strtod_l+0xa04>
 80092ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d158      	bne.n	800936a <_strtod_l+0xa12>
 80092b8:	2200      	movs	r2, #0
 80092ba:	4630      	mov	r0, r6
 80092bc:	4639      	mov	r1, r7
 80092be:	4b5e      	ldr	r3, [pc, #376]	@ (8009438 <_strtod_l+0xae0>)
 80092c0:	f7f7 fb7c 	bl	80009bc <__aeabi_dcmplt>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d157      	bne.n	8009378 <_strtod_l+0xa20>
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	2200      	movs	r2, #0
 80092ce:	4b5b      	ldr	r3, [pc, #364]	@ (800943c <_strtod_l+0xae4>)
 80092d0:	f7f7 f902 	bl	80004d8 <__aeabi_dmul>
 80092d4:	4606      	mov	r6, r0
 80092d6:	460f      	mov	r7, r1
 80092d8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092dc:	9606      	str	r6, [sp, #24]
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e4:	4d51      	ldr	r5, [pc, #324]	@ (800942c <_strtod_l+0xad4>)
 80092e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ec:	401d      	ands	r5, r3
 80092ee:	4b54      	ldr	r3, [pc, #336]	@ (8009440 <_strtod_l+0xae8>)
 80092f0:	429d      	cmp	r5, r3
 80092f2:	f040 80ab 	bne.w	800944c <_strtod_l+0xaf4>
 80092f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f8:	4650      	mov	r0, sl
 80092fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092fe:	4659      	mov	r1, fp
 8009300:	f001 fa92 	bl	800a828 <__ulp>
 8009304:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009308:	f7f7 f8e6 	bl	80004d8 <__aeabi_dmul>
 800930c:	4652      	mov	r2, sl
 800930e:	465b      	mov	r3, fp
 8009310:	f7f6 ff2c 	bl	800016c <__adddf3>
 8009314:	460b      	mov	r3, r1
 8009316:	4945      	ldr	r1, [pc, #276]	@ (800942c <_strtod_l+0xad4>)
 8009318:	4a4a      	ldr	r2, [pc, #296]	@ (8009444 <_strtod_l+0xaec>)
 800931a:	4019      	ands	r1, r3
 800931c:	4291      	cmp	r1, r2
 800931e:	4682      	mov	sl, r0
 8009320:	d942      	bls.n	80093a8 <_strtod_l+0xa50>
 8009322:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009324:	4b43      	ldr	r3, [pc, #268]	@ (8009434 <_strtod_l+0xadc>)
 8009326:	429a      	cmp	r2, r3
 8009328:	d103      	bne.n	8009332 <_strtod_l+0x9da>
 800932a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800932c:	3301      	adds	r3, #1
 800932e:	f43f ad32 	beq.w	8008d96 <_strtod_l+0x43e>
 8009332:	f04f 3aff 	mov.w	sl, #4294967295
 8009336:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009434 <_strtod_l+0xadc>
 800933a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800933c:	9805      	ldr	r0, [sp, #20]
 800933e:	f000 ff47 	bl	800a1d0 <_Bfree>
 8009342:	4649      	mov	r1, r9
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	f000 ff43 	bl	800a1d0 <_Bfree>
 800934a:	4641      	mov	r1, r8
 800934c:	9805      	ldr	r0, [sp, #20]
 800934e:	f000 ff3f 	bl	800a1d0 <_Bfree>
 8009352:	4621      	mov	r1, r4
 8009354:	9805      	ldr	r0, [sp, #20]
 8009356:	f000 ff3b 	bl	800a1d0 <_Bfree>
 800935a:	e61c      	b.n	8008f96 <_strtod_l+0x63e>
 800935c:	f1ba 0f01 	cmp.w	sl, #1
 8009360:	d103      	bne.n	800936a <_strtod_l+0xa12>
 8009362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009364:	2b00      	cmp	r3, #0
 8009366:	f43f ada9 	beq.w	8008ebc <_strtod_l+0x564>
 800936a:	2200      	movs	r2, #0
 800936c:	4b36      	ldr	r3, [pc, #216]	@ (8009448 <_strtod_l+0xaf0>)
 800936e:	2600      	movs	r6, #0
 8009370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009374:	4f30      	ldr	r7, [pc, #192]	@ (8009438 <_strtod_l+0xae0>)
 8009376:	e7b3      	b.n	80092e0 <_strtod_l+0x988>
 8009378:	2600      	movs	r6, #0
 800937a:	4f30      	ldr	r7, [pc, #192]	@ (800943c <_strtod_l+0xae4>)
 800937c:	e7ac      	b.n	80092d8 <_strtod_l+0x980>
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	4b2e      	ldr	r3, [pc, #184]	@ (800943c <_strtod_l+0xae4>)
 8009384:	2200      	movs	r2, #0
 8009386:	f7f7 f8a7 	bl	80004d8 <__aeabi_dmul>
 800938a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	2b00      	cmp	r3, #0
 8009392:	d0a1      	beq.n	80092d8 <_strtod_l+0x980>
 8009394:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009398:	e7a2      	b.n	80092e0 <_strtod_l+0x988>
 800939a:	2200      	movs	r2, #0
 800939c:	4b26      	ldr	r3, [pc, #152]	@ (8009438 <_strtod_l+0xae0>)
 800939e:	4616      	mov	r6, r2
 80093a0:	461f      	mov	r7, r3
 80093a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093a6:	e79b      	b.n	80092e0 <_strtod_l+0x988>
 80093a8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093ac:	9b08      	ldr	r3, [sp, #32]
 80093ae:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1c1      	bne.n	800933a <_strtod_l+0x9e2>
 80093b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ba:	0d1b      	lsrs	r3, r3, #20
 80093bc:	051b      	lsls	r3, r3, #20
 80093be:	429d      	cmp	r5, r3
 80093c0:	d1bb      	bne.n	800933a <_strtod_l+0x9e2>
 80093c2:	4630      	mov	r0, r6
 80093c4:	4639      	mov	r1, r7
 80093c6:	f7f7 fbcf 	bl	8000b68 <__aeabi_d2lz>
 80093ca:	f7f7 f857 	bl	800047c <__aeabi_l2d>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4630      	mov	r0, r6
 80093d4:	4639      	mov	r1, r7
 80093d6:	f7f6 fec7 	bl	8000168 <__aeabi_dsub>
 80093da:	460b      	mov	r3, r1
 80093dc:	4602      	mov	r2, r0
 80093de:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e8:	ea46 060a 	orr.w	r6, r6, sl
 80093ec:	431e      	orrs	r6, r3
 80093ee:	d06a      	beq.n	80094c6 <_strtod_l+0xb6e>
 80093f0:	a309      	add	r3, pc, #36	@ (adr r3, 8009418 <_strtod_l+0xac0>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f7 fae1 	bl	80009bc <__aeabi_dcmplt>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	f47f acd6 	bne.w	8008dac <_strtod_l+0x454>
 8009400:	a307      	add	r3, pc, #28	@ (adr r3, 8009420 <_strtod_l+0xac8>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940a:	f7f7 faf5 	bl	80009f8 <__aeabi_dcmpgt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d093      	beq.n	800933a <_strtod_l+0x9e2>
 8009412:	e4cb      	b.n	8008dac <_strtod_l+0x454>
 8009414:	f3af 8000 	nop.w
 8009418:	94a03595 	.word	0x94a03595
 800941c:	3fdfffff 	.word	0x3fdfffff
 8009420:	35afe535 	.word	0x35afe535
 8009424:	3fe00000 	.word	0x3fe00000
 8009428:	39500000 	.word	0x39500000
 800942c:	7ff00000 	.word	0x7ff00000
 8009430:	000fffff 	.word	0x000fffff
 8009434:	7fefffff 	.word	0x7fefffff
 8009438:	3ff00000 	.word	0x3ff00000
 800943c:	3fe00000 	.word	0x3fe00000
 8009440:	7fe00000 	.word	0x7fe00000
 8009444:	7c9fffff 	.word	0x7c9fffff
 8009448:	bff00000 	.word	0xbff00000
 800944c:	9b08      	ldr	r3, [sp, #32]
 800944e:	b323      	cbz	r3, 800949a <_strtod_l+0xb42>
 8009450:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009454:	d821      	bhi.n	800949a <_strtod_l+0xb42>
 8009456:	a328      	add	r3, pc, #160	@ (adr r3, 80094f8 <_strtod_l+0xba0>)
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	4630      	mov	r0, r6
 800945e:	4639      	mov	r1, r7
 8009460:	f7f7 fab6 	bl	80009d0 <__aeabi_dcmple>
 8009464:	b1a0      	cbz	r0, 8009490 <_strtod_l+0xb38>
 8009466:	4639      	mov	r1, r7
 8009468:	4630      	mov	r0, r6
 800946a:	f7f7 faf7 	bl	8000a5c <__aeabi_d2uiz>
 800946e:	2801      	cmp	r0, #1
 8009470:	bf38      	it	cc
 8009472:	2001      	movcc	r0, #1
 8009474:	f7f6 ffb6 	bl	80003e4 <__aeabi_ui2d>
 8009478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	b9fb      	cbnz	r3, 80094c0 <_strtod_l+0xb68>
 8009480:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009484:	9014      	str	r0, [sp, #80]	@ 0x50
 8009486:	9315      	str	r3, [sp, #84]	@ 0x54
 8009488:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800948c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009490:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009492:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009496:	1b5b      	subs	r3, r3, r5
 8009498:	9311      	str	r3, [sp, #68]	@ 0x44
 800949a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800949e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094a2:	f001 f9c1 	bl	800a828 <__ulp>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4650      	mov	r0, sl
 80094ac:	4659      	mov	r1, fp
 80094ae:	f7f7 f813 	bl	80004d8 <__aeabi_dmul>
 80094b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094b6:	f7f6 fe59 	bl	800016c <__adddf3>
 80094ba:	4682      	mov	sl, r0
 80094bc:	468b      	mov	fp, r1
 80094be:	e775      	b.n	80093ac <_strtod_l+0xa54>
 80094c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094c4:	e7e0      	b.n	8009488 <_strtod_l+0xb30>
 80094c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009500 <_strtod_l+0xba8>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f7f7 fa76 	bl	80009bc <__aeabi_dcmplt>
 80094d0:	e79d      	b.n	800940e <_strtod_l+0xab6>
 80094d2:	2300      	movs	r3, #0
 80094d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80094d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f7ff ba79 	b.w	80089d2 <_strtod_l+0x7a>
 80094e0:	2a65      	cmp	r2, #101	@ 0x65
 80094e2:	f43f ab72 	beq.w	8008bca <_strtod_l+0x272>
 80094e6:	2a45      	cmp	r2, #69	@ 0x45
 80094e8:	f43f ab6f 	beq.w	8008bca <_strtod_l+0x272>
 80094ec:	2301      	movs	r3, #1
 80094ee:	f7ff bbaa 	b.w	8008c46 <_strtod_l+0x2ee>
 80094f2:	bf00      	nop
 80094f4:	f3af 8000 	nop.w
 80094f8:	ffc00000 	.word	0xffc00000
 80094fc:	41dfffff 	.word	0x41dfffff
 8009500:	94a03595 	.word	0x94a03595
 8009504:	3fcfffff 	.word	0x3fcfffff

08009508 <strtod>:
 8009508:	460a      	mov	r2, r1
 800950a:	4601      	mov	r1, r0
 800950c:	4802      	ldr	r0, [pc, #8]	@ (8009518 <strtod+0x10>)
 800950e:	4b03      	ldr	r3, [pc, #12]	@ (800951c <strtod+0x14>)
 8009510:	6800      	ldr	r0, [r0, #0]
 8009512:	f7ff ba21 	b.w	8008958 <_strtod_l>
 8009516:	bf00      	nop
 8009518:	200002f4 	.word	0x200002f4
 800951c:	20000188 	.word	0x20000188

08009520 <std>:
 8009520:	2300      	movs	r3, #0
 8009522:	b510      	push	{r4, lr}
 8009524:	4604      	mov	r4, r0
 8009526:	e9c0 3300 	strd	r3, r3, [r0]
 800952a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952e:	6083      	str	r3, [r0, #8]
 8009530:	8181      	strh	r1, [r0, #12]
 8009532:	6643      	str	r3, [r0, #100]	@ 0x64
 8009534:	81c2      	strh	r2, [r0, #14]
 8009536:	6183      	str	r3, [r0, #24]
 8009538:	4619      	mov	r1, r3
 800953a:	2208      	movs	r2, #8
 800953c:	305c      	adds	r0, #92	@ 0x5c
 800953e:	f000 f916 	bl	800976e <memset>
 8009542:	4b0d      	ldr	r3, [pc, #52]	@ (8009578 <std+0x58>)
 8009544:	6224      	str	r4, [r4, #32]
 8009546:	6263      	str	r3, [r4, #36]	@ 0x24
 8009548:	4b0c      	ldr	r3, [pc, #48]	@ (800957c <std+0x5c>)
 800954a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800954c:	4b0c      	ldr	r3, [pc, #48]	@ (8009580 <std+0x60>)
 800954e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009550:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <std+0x64>)
 8009552:	6323      	str	r3, [r4, #48]	@ 0x30
 8009554:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <std+0x68>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d006      	beq.n	8009568 <std+0x48>
 800955a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800955e:	4294      	cmp	r4, r2
 8009560:	d002      	beq.n	8009568 <std+0x48>
 8009562:	33d0      	adds	r3, #208	@ 0xd0
 8009564:	429c      	cmp	r4, r3
 8009566:	d105      	bne.n	8009574 <std+0x54>
 8009568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009570:	f000 b994 	b.w	800989c <__retarget_lock_init_recursive>
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	080096e9 	.word	0x080096e9
 800957c:	0800970b 	.word	0x0800970b
 8009580:	08009743 	.word	0x08009743
 8009584:	08009767 	.word	0x08009767
 8009588:	200015a0 	.word	0x200015a0

0800958c <stdio_exit_handler>:
 800958c:	4a02      	ldr	r2, [pc, #8]	@ (8009598 <stdio_exit_handler+0xc>)
 800958e:	4903      	ldr	r1, [pc, #12]	@ (800959c <stdio_exit_handler+0x10>)
 8009590:	4803      	ldr	r0, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x14>)
 8009592:	f000 b869 	b.w	8009668 <_fwalk_sglue>
 8009596:	bf00      	nop
 8009598:	2000017c 	.word	0x2000017c
 800959c:	0800b179 	.word	0x0800b179
 80095a0:	200002f8 	.word	0x200002f8

080095a4 <cleanup_stdio>:
 80095a4:	6841      	ldr	r1, [r0, #4]
 80095a6:	4b0c      	ldr	r3, [pc, #48]	@ (80095d8 <cleanup_stdio+0x34>)
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4299      	cmp	r1, r3
 80095ac:	4604      	mov	r4, r0
 80095ae:	d001      	beq.n	80095b4 <cleanup_stdio+0x10>
 80095b0:	f001 fde2 	bl	800b178 <_fflush_r>
 80095b4:	68a1      	ldr	r1, [r4, #8]
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <cleanup_stdio+0x38>)
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <cleanup_stdio+0x1e>
 80095bc:	4620      	mov	r0, r4
 80095be:	f001 fddb 	bl	800b178 <_fflush_r>
 80095c2:	68e1      	ldr	r1, [r4, #12]
 80095c4:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <cleanup_stdio+0x3c>)
 80095c6:	4299      	cmp	r1, r3
 80095c8:	d004      	beq.n	80095d4 <cleanup_stdio+0x30>
 80095ca:	4620      	mov	r0, r4
 80095cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d0:	f001 bdd2 	b.w	800b178 <_fflush_r>
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	bf00      	nop
 80095d8:	200015a0 	.word	0x200015a0
 80095dc:	20001608 	.word	0x20001608
 80095e0:	20001670 	.word	0x20001670

080095e4 <global_stdio_init.part.0>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <global_stdio_init.part.0+0x30>)
 80095e8:	4c0b      	ldr	r4, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x34>)
 80095ea:	4a0c      	ldr	r2, [pc, #48]	@ (800961c <global_stdio_init.part.0+0x38>)
 80095ec:	4620      	mov	r0, r4
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	2104      	movs	r1, #4
 80095f2:	2200      	movs	r2, #0
 80095f4:	f7ff ff94 	bl	8009520 <std>
 80095f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095fc:	2201      	movs	r2, #1
 80095fe:	2109      	movs	r1, #9
 8009600:	f7ff ff8e 	bl	8009520 <std>
 8009604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009608:	2202      	movs	r2, #2
 800960a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800960e:	2112      	movs	r1, #18
 8009610:	f7ff bf86 	b.w	8009520 <std>
 8009614:	200016d8 	.word	0x200016d8
 8009618:	200015a0 	.word	0x200015a0
 800961c:	0800958d 	.word	0x0800958d

08009620 <__sfp_lock_acquire>:
 8009620:	4801      	ldr	r0, [pc, #4]	@ (8009628 <__sfp_lock_acquire+0x8>)
 8009622:	f000 b93c 	b.w	800989e <__retarget_lock_acquire_recursive>
 8009626:	bf00      	nop
 8009628:	200016e1 	.word	0x200016e1

0800962c <__sfp_lock_release>:
 800962c:	4801      	ldr	r0, [pc, #4]	@ (8009634 <__sfp_lock_release+0x8>)
 800962e:	f000 b937 	b.w	80098a0 <__retarget_lock_release_recursive>
 8009632:	bf00      	nop
 8009634:	200016e1 	.word	0x200016e1

08009638 <__sinit>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4604      	mov	r4, r0
 800963c:	f7ff fff0 	bl	8009620 <__sfp_lock_acquire>
 8009640:	6a23      	ldr	r3, [r4, #32]
 8009642:	b11b      	cbz	r3, 800964c <__sinit+0x14>
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f7ff bff0 	b.w	800962c <__sfp_lock_release>
 800964c:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <__sinit+0x28>)
 800964e:	6223      	str	r3, [r4, #32]
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x2c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1f5      	bne.n	8009644 <__sinit+0xc>
 8009658:	f7ff ffc4 	bl	80095e4 <global_stdio_init.part.0>
 800965c:	e7f2      	b.n	8009644 <__sinit+0xc>
 800965e:	bf00      	nop
 8009660:	080095a5 	.word	0x080095a5
 8009664:	200016d8 	.word	0x200016d8

08009668 <_fwalk_sglue>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4607      	mov	r7, r0
 800966e:	4688      	mov	r8, r1
 8009670:	4614      	mov	r4, r2
 8009672:	2600      	movs	r6, #0
 8009674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009678:	f1b9 0901 	subs.w	r9, r9, #1
 800967c:	d505      	bpl.n	800968a <_fwalk_sglue+0x22>
 800967e:	6824      	ldr	r4, [r4, #0]
 8009680:	2c00      	cmp	r4, #0
 8009682:	d1f7      	bne.n	8009674 <_fwalk_sglue+0xc>
 8009684:	4630      	mov	r0, r6
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d907      	bls.n	80096a0 <_fwalk_sglue+0x38>
 8009690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009694:	3301      	adds	r3, #1
 8009696:	d003      	beq.n	80096a0 <_fwalk_sglue+0x38>
 8009698:	4629      	mov	r1, r5
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	4306      	orrs	r6, r0
 80096a0:	3568      	adds	r5, #104	@ 0x68
 80096a2:	e7e9      	b.n	8009678 <_fwalk_sglue+0x10>

080096a4 <siprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096aa:	b510      	push	{r4, lr}
 80096ac:	2400      	movs	r4, #0
 80096ae:	b09d      	sub	sp, #116	@ 0x74
 80096b0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80096b2:	9002      	str	r0, [sp, #8]
 80096b4:	9006      	str	r0, [sp, #24]
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	9104      	str	r1, [sp, #16]
 80096ba:	4809      	ldr	r0, [pc, #36]	@ (80096e0 <siprintf+0x3c>)
 80096bc:	4909      	ldr	r1, [pc, #36]	@ (80096e4 <siprintf+0x40>)
 80096be:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c2:	9105      	str	r1, [sp, #20]
 80096c4:	6800      	ldr	r0, [r0, #0]
 80096c6:	a902      	add	r1, sp, #8
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096cc:	f001 fa48 	bl	800ab60 <_svfiprintf_r>
 80096d0:	9b02      	ldr	r3, [sp, #8]
 80096d2:	701c      	strb	r4, [r3, #0]
 80096d4:	b01d      	add	sp, #116	@ 0x74
 80096d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096da:	b003      	add	sp, #12
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	200002f4 	.word	0x200002f4
 80096e4:	ffff0208 	.word	0xffff0208

080096e8 <__sread>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f886 	bl	8009800 <_read_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	bfab      	itete	ge
 80096f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096fa:	89a3      	ldrhlt	r3, [r4, #12]
 80096fc:	181b      	addge	r3, r3, r0
 80096fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009702:	bfac      	ite	ge
 8009704:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009706:	81a3      	strhlt	r3, [r4, #12]
 8009708:	bd10      	pop	{r4, pc}

0800970a <__swrite>:
 800970a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800970e:	461f      	mov	r7, r3
 8009710:	898b      	ldrh	r3, [r1, #12]
 8009712:	4605      	mov	r5, r0
 8009714:	05db      	lsls	r3, r3, #23
 8009716:	460c      	mov	r4, r1
 8009718:	4616      	mov	r6, r2
 800971a:	d505      	bpl.n	8009728 <__swrite+0x1e>
 800971c:	2302      	movs	r3, #2
 800971e:	2200      	movs	r2, #0
 8009720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009724:	f000 f85a 	bl	80097dc <_lseek_r>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	4632      	mov	r2, r6
 800972c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009730:	81a3      	strh	r3, [r4, #12]
 8009732:	4628      	mov	r0, r5
 8009734:	463b      	mov	r3, r7
 8009736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800973a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800973e:	f000 b871 	b.w	8009824 <_write_r>

08009742 <__sseek>:
 8009742:	b510      	push	{r4, lr}
 8009744:	460c      	mov	r4, r1
 8009746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974a:	f000 f847 	bl	80097dc <_lseek_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	bf15      	itete	ne
 8009754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800975a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800975e:	81a3      	strheq	r3, [r4, #12]
 8009760:	bf18      	it	ne
 8009762:	81a3      	strhne	r3, [r4, #12]
 8009764:	bd10      	pop	{r4, pc}

08009766 <__sclose>:
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 b827 	b.w	80097bc <_close_r>

0800976e <memset>:
 800976e:	4603      	mov	r3, r0
 8009770:	4402      	add	r2, r0
 8009772:	4293      	cmp	r3, r2
 8009774:	d100      	bne.n	8009778 <memset+0xa>
 8009776:	4770      	bx	lr
 8009778:	f803 1b01 	strb.w	r1, [r3], #1
 800977c:	e7f9      	b.n	8009772 <memset+0x4>

0800977e <strchr>:
 800977e:	4603      	mov	r3, r0
 8009780:	b2c9      	uxtb	r1, r1
 8009782:	4618      	mov	r0, r3
 8009784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009788:	b112      	cbz	r2, 8009790 <strchr+0x12>
 800978a:	428a      	cmp	r2, r1
 800978c:	d1f9      	bne.n	8009782 <strchr+0x4>
 800978e:	4770      	bx	lr
 8009790:	2900      	cmp	r1, #0
 8009792:	bf18      	it	ne
 8009794:	2000      	movne	r0, #0
 8009796:	4770      	bx	lr

08009798 <strncmp>:
 8009798:	b510      	push	{r4, lr}
 800979a:	b16a      	cbz	r2, 80097b8 <strncmp+0x20>
 800979c:	3901      	subs	r1, #1
 800979e:	1884      	adds	r4, r0, r2
 80097a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d103      	bne.n	80097b4 <strncmp+0x1c>
 80097ac:	42a0      	cmp	r0, r4
 80097ae:	d001      	beq.n	80097b4 <strncmp+0x1c>
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	d1f5      	bne.n	80097a0 <strncmp+0x8>
 80097b4:	1ad0      	subs	r0, r2, r3
 80097b6:	bd10      	pop	{r4, pc}
 80097b8:	4610      	mov	r0, r2
 80097ba:	e7fc      	b.n	80097b6 <strncmp+0x1e>

080097bc <_close_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	2300      	movs	r3, #0
 80097c0:	4d05      	ldr	r5, [pc, #20]	@ (80097d8 <_close_r+0x1c>)
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7f7 feff 	bl	80015ca <_close>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_close_r+0x1a>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_close_r+0x1a>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	200016dc 	.word	0x200016dc

080097dc <_lseek_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	2200      	movs	r2, #0
 80097e6:	4d05      	ldr	r5, [pc, #20]	@ (80097fc <_lseek_r+0x20>)
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f7f7 ff11 	bl	8001612 <_lseek>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_lseek_r+0x1e>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_lseek_r+0x1e>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200016dc 	.word	0x200016dc

08009800 <_read_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	4611      	mov	r1, r2
 8009808:	2200      	movs	r2, #0
 800980a:	4d05      	ldr	r5, [pc, #20]	@ (8009820 <_read_r+0x20>)
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	f7f7 fea2 	bl	8001558 <_read>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_read_r+0x1e>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_read_r+0x1e>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	200016dc 	.word	0x200016dc

08009824 <_write_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	4611      	mov	r1, r2
 800982c:	2200      	movs	r2, #0
 800982e:	4d05      	ldr	r5, [pc, #20]	@ (8009844 <_write_r+0x20>)
 8009830:	602a      	str	r2, [r5, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	f7f7 fead 	bl	8001592 <_write>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_write_r+0x1e>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_write_r+0x1e>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	200016dc 	.word	0x200016dc

08009848 <__errno>:
 8009848:	4b01      	ldr	r3, [pc, #4]	@ (8009850 <__errno+0x8>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	200002f4 	.word	0x200002f4

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	2600      	movs	r6, #0
 8009858:	4d0c      	ldr	r5, [pc, #48]	@ (800988c <__libc_init_array+0x38>)
 800985a:	4c0d      	ldr	r4, [pc, #52]	@ (8009890 <__libc_init_array+0x3c>)
 800985c:	1b64      	subs	r4, r4, r5
 800985e:	10a4      	asrs	r4, r4, #2
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	f002 f80c 	bl	800b880 <_init>
 8009868:	2600      	movs	r6, #0
 800986a:	4d0a      	ldr	r5, [pc, #40]	@ (8009894 <__libc_init_array+0x40>)
 800986c:	4c0a      	ldr	r4, [pc, #40]	@ (8009898 <__libc_init_array+0x44>)
 800986e:	1b64      	subs	r4, r4, r5
 8009870:	10a4      	asrs	r4, r4, #2
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800bde4 	.word	0x0800bde4
 8009890:	0800bde4 	.word	0x0800bde4
 8009894:	0800bde4 	.word	0x0800bde4
 8009898:	0800bde8 	.word	0x0800bde8

0800989c <__retarget_lock_init_recursive>:
 800989c:	4770      	bx	lr

0800989e <__retarget_lock_acquire_recursive>:
 800989e:	4770      	bx	lr

080098a0 <__retarget_lock_release_recursive>:
 80098a0:	4770      	bx	lr

080098a2 <memcpy>:
 80098a2:	440a      	add	r2, r1
 80098a4:	4291      	cmp	r1, r2
 80098a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80098aa:	d100      	bne.n	80098ae <memcpy+0xc>
 80098ac:	4770      	bx	lr
 80098ae:	b510      	push	{r4, lr}
 80098b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b4:	4291      	cmp	r1, r2
 80098b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ba:	d1f9      	bne.n	80098b0 <memcpy+0xe>
 80098bc:	bd10      	pop	{r4, pc}
	...

080098c0 <nan>:
 80098c0:	2000      	movs	r0, #0
 80098c2:	4901      	ldr	r1, [pc, #4]	@ (80098c8 <nan+0x8>)
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	7ff80000 	.word	0x7ff80000

080098cc <_free_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4605      	mov	r5, r0
 80098d0:	2900      	cmp	r1, #0
 80098d2:	d040      	beq.n	8009956 <_free_r+0x8a>
 80098d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d8:	1f0c      	subs	r4, r1, #4
 80098da:	2b00      	cmp	r3, #0
 80098dc:	bfb8      	it	lt
 80098de:	18e4      	addlt	r4, r4, r3
 80098e0:	f000 fc2a 	bl	800a138 <__malloc_lock>
 80098e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009958 <_free_r+0x8c>)
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	b933      	cbnz	r3, 80098f8 <_free_r+0x2c>
 80098ea:	6063      	str	r3, [r4, #4]
 80098ec:	6014      	str	r4, [r2, #0]
 80098ee:	4628      	mov	r0, r5
 80098f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f4:	f000 bc26 	b.w	800a144 <__malloc_unlock>
 80098f8:	42a3      	cmp	r3, r4
 80098fa:	d908      	bls.n	800990e <_free_r+0x42>
 80098fc:	6820      	ldr	r0, [r4, #0]
 80098fe:	1821      	adds	r1, r4, r0
 8009900:	428b      	cmp	r3, r1
 8009902:	bf01      	itttt	eq
 8009904:	6819      	ldreq	r1, [r3, #0]
 8009906:	685b      	ldreq	r3, [r3, #4]
 8009908:	1809      	addeq	r1, r1, r0
 800990a:	6021      	streq	r1, [r4, #0]
 800990c:	e7ed      	b.n	80098ea <_free_r+0x1e>
 800990e:	461a      	mov	r2, r3
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b10b      	cbz	r3, 8009918 <_free_r+0x4c>
 8009914:	42a3      	cmp	r3, r4
 8009916:	d9fa      	bls.n	800990e <_free_r+0x42>
 8009918:	6811      	ldr	r1, [r2, #0]
 800991a:	1850      	adds	r0, r2, r1
 800991c:	42a0      	cmp	r0, r4
 800991e:	d10b      	bne.n	8009938 <_free_r+0x6c>
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	4401      	add	r1, r0
 8009924:	1850      	adds	r0, r2, r1
 8009926:	4283      	cmp	r3, r0
 8009928:	6011      	str	r1, [r2, #0]
 800992a:	d1e0      	bne.n	80098ee <_free_r+0x22>
 800992c:	6818      	ldr	r0, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4408      	add	r0, r1
 8009932:	6010      	str	r0, [r2, #0]
 8009934:	6053      	str	r3, [r2, #4]
 8009936:	e7da      	b.n	80098ee <_free_r+0x22>
 8009938:	d902      	bls.n	8009940 <_free_r+0x74>
 800993a:	230c      	movs	r3, #12
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	e7d6      	b.n	80098ee <_free_r+0x22>
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	1821      	adds	r1, r4, r0
 8009944:	428b      	cmp	r3, r1
 8009946:	bf01      	itttt	eq
 8009948:	6819      	ldreq	r1, [r3, #0]
 800994a:	685b      	ldreq	r3, [r3, #4]
 800994c:	1809      	addeq	r1, r1, r0
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6063      	str	r3, [r4, #4]
 8009952:	6054      	str	r4, [r2, #4]
 8009954:	e7cb      	b.n	80098ee <_free_r+0x22>
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	200016e8 	.word	0x200016e8

0800995c <rshift>:
 800995c:	6903      	ldr	r3, [r0, #16]
 800995e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009962:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009966:	f100 0414 	add.w	r4, r0, #20
 800996a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800996e:	dd46      	ble.n	80099fe <rshift+0xa2>
 8009970:	f011 011f 	ands.w	r1, r1, #31
 8009974:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009978:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800997c:	d10c      	bne.n	8009998 <rshift+0x3c>
 800997e:	4629      	mov	r1, r5
 8009980:	f100 0710 	add.w	r7, r0, #16
 8009984:	42b1      	cmp	r1, r6
 8009986:	d335      	bcc.n	80099f4 <rshift+0x98>
 8009988:	1a9b      	subs	r3, r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	1eea      	subs	r2, r5, #3
 800998e:	4296      	cmp	r6, r2
 8009990:	bf38      	it	cc
 8009992:	2300      	movcc	r3, #0
 8009994:	4423      	add	r3, r4
 8009996:	e015      	b.n	80099c4 <rshift+0x68>
 8009998:	46a1      	mov	r9, r4
 800999a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800999e:	f1c1 0820 	rsb	r8, r1, #32
 80099a2:	40cf      	lsrs	r7, r1
 80099a4:	f105 0e04 	add.w	lr, r5, #4
 80099a8:	4576      	cmp	r6, lr
 80099aa:	46f4      	mov	ip, lr
 80099ac:	d816      	bhi.n	80099dc <rshift+0x80>
 80099ae:	1a9a      	subs	r2, r3, r2
 80099b0:	0092      	lsls	r2, r2, #2
 80099b2:	3a04      	subs	r2, #4
 80099b4:	3501      	adds	r5, #1
 80099b6:	42ae      	cmp	r6, r5
 80099b8:	bf38      	it	cc
 80099ba:	2200      	movcc	r2, #0
 80099bc:	18a3      	adds	r3, r4, r2
 80099be:	50a7      	str	r7, [r4, r2]
 80099c0:	b107      	cbz	r7, 80099c4 <rshift+0x68>
 80099c2:	3304      	adds	r3, #4
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	eba3 0204 	sub.w	r2, r3, r4
 80099ca:	bf08      	it	eq
 80099cc:	2300      	moveq	r3, #0
 80099ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099d2:	6102      	str	r2, [r0, #16]
 80099d4:	bf08      	it	eq
 80099d6:	6143      	streq	r3, [r0, #20]
 80099d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099dc:	f8dc c000 	ldr.w	ip, [ip]
 80099e0:	fa0c fc08 	lsl.w	ip, ip, r8
 80099e4:	ea4c 0707 	orr.w	r7, ip, r7
 80099e8:	f849 7b04 	str.w	r7, [r9], #4
 80099ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099f0:	40cf      	lsrs	r7, r1
 80099f2:	e7d9      	b.n	80099a8 <rshift+0x4c>
 80099f4:	f851 cb04 	ldr.w	ip, [r1], #4
 80099f8:	f847 cf04 	str.w	ip, [r7, #4]!
 80099fc:	e7c2      	b.n	8009984 <rshift+0x28>
 80099fe:	4623      	mov	r3, r4
 8009a00:	e7e0      	b.n	80099c4 <rshift+0x68>

08009a02 <__hexdig_fun>:
 8009a02:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d802      	bhi.n	8009a10 <__hexdig_fun+0xe>
 8009a0a:	3820      	subs	r0, #32
 8009a0c:	b2c0      	uxtb	r0, r0
 8009a0e:	4770      	bx	lr
 8009a10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a14:	2b05      	cmp	r3, #5
 8009a16:	d801      	bhi.n	8009a1c <__hexdig_fun+0x1a>
 8009a18:	3847      	subs	r0, #71	@ 0x47
 8009a1a:	e7f7      	b.n	8009a0c <__hexdig_fun+0xa>
 8009a1c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a20:	2b05      	cmp	r3, #5
 8009a22:	d801      	bhi.n	8009a28 <__hexdig_fun+0x26>
 8009a24:	3827      	subs	r0, #39	@ 0x27
 8009a26:	e7f1      	b.n	8009a0c <__hexdig_fun+0xa>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	4770      	bx	lr

08009a2c <__gethex>:
 8009a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a30:	468a      	mov	sl, r1
 8009a32:	4690      	mov	r8, r2
 8009a34:	b085      	sub	sp, #20
 8009a36:	9302      	str	r3, [sp, #8]
 8009a38:	680b      	ldr	r3, [r1, #0]
 8009a3a:	9001      	str	r0, [sp, #4]
 8009a3c:	1c9c      	adds	r4, r3, #2
 8009a3e:	46a1      	mov	r9, r4
 8009a40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009a44:	2830      	cmp	r0, #48	@ 0x30
 8009a46:	d0fa      	beq.n	8009a3e <__gethex+0x12>
 8009a48:	eba9 0303 	sub.w	r3, r9, r3
 8009a4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009a50:	f7ff ffd7 	bl	8009a02 <__hexdig_fun>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d168      	bne.n	8009b2c <__gethex+0x100>
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	4648      	mov	r0, r9
 8009a5e:	499f      	ldr	r1, [pc, #636]	@ (8009cdc <__gethex+0x2b0>)
 8009a60:	f7ff fe9a 	bl	8009798 <strncmp>
 8009a64:	4607      	mov	r7, r0
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d167      	bne.n	8009b3a <__gethex+0x10e>
 8009a6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009a6e:	4626      	mov	r6, r4
 8009a70:	f7ff ffc7 	bl	8009a02 <__hexdig_fun>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d062      	beq.n	8009b3e <__gethex+0x112>
 8009a78:	4623      	mov	r3, r4
 8009a7a:	7818      	ldrb	r0, [r3, #0]
 8009a7c:	4699      	mov	r9, r3
 8009a7e:	2830      	cmp	r0, #48	@ 0x30
 8009a80:	f103 0301 	add.w	r3, r3, #1
 8009a84:	d0f9      	beq.n	8009a7a <__gethex+0x4e>
 8009a86:	f7ff ffbc 	bl	8009a02 <__hexdig_fun>
 8009a8a:	fab0 f580 	clz	r5, r0
 8009a8e:	f04f 0b01 	mov.w	fp, #1
 8009a92:	096d      	lsrs	r5, r5, #5
 8009a94:	464a      	mov	r2, r9
 8009a96:	4616      	mov	r6, r2
 8009a98:	7830      	ldrb	r0, [r6, #0]
 8009a9a:	3201      	adds	r2, #1
 8009a9c:	f7ff ffb1 	bl	8009a02 <__hexdig_fun>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d1f8      	bne.n	8009a96 <__gethex+0x6a>
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	498c      	ldr	r1, [pc, #560]	@ (8009cdc <__gethex+0x2b0>)
 8009aaa:	f7ff fe75 	bl	8009798 <strncmp>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d13f      	bne.n	8009b32 <__gethex+0x106>
 8009ab2:	b944      	cbnz	r4, 8009ac6 <__gethex+0x9a>
 8009ab4:	1c74      	adds	r4, r6, #1
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4616      	mov	r6, r2
 8009aba:	7830      	ldrb	r0, [r6, #0]
 8009abc:	3201      	adds	r2, #1
 8009abe:	f7ff ffa0 	bl	8009a02 <__hexdig_fun>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d1f8      	bne.n	8009ab8 <__gethex+0x8c>
 8009ac6:	1ba4      	subs	r4, r4, r6
 8009ac8:	00a7      	lsls	r7, r4, #2
 8009aca:	7833      	ldrb	r3, [r6, #0]
 8009acc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009ad0:	2b50      	cmp	r3, #80	@ 0x50
 8009ad2:	d13e      	bne.n	8009b52 <__gethex+0x126>
 8009ad4:	7873      	ldrb	r3, [r6, #1]
 8009ad6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009ad8:	d033      	beq.n	8009b42 <__gethex+0x116>
 8009ada:	2b2d      	cmp	r3, #45	@ 0x2d
 8009adc:	d034      	beq.n	8009b48 <__gethex+0x11c>
 8009ade:	2400      	movs	r4, #0
 8009ae0:	1c71      	adds	r1, r6, #1
 8009ae2:	7808      	ldrb	r0, [r1, #0]
 8009ae4:	f7ff ff8d 	bl	8009a02 <__hexdig_fun>
 8009ae8:	1e43      	subs	r3, r0, #1
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b18      	cmp	r3, #24
 8009aee:	d830      	bhi.n	8009b52 <__gethex+0x126>
 8009af0:	f1a0 0210 	sub.w	r2, r0, #16
 8009af4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009af8:	f7ff ff83 	bl	8009a02 <__hexdig_fun>
 8009afc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b00:	fa5f fc8c 	uxtb.w	ip, ip
 8009b04:	f1bc 0f18 	cmp.w	ip, #24
 8009b08:	f04f 030a 	mov.w	r3, #10
 8009b0c:	d91e      	bls.n	8009b4c <__gethex+0x120>
 8009b0e:	b104      	cbz	r4, 8009b12 <__gethex+0xe6>
 8009b10:	4252      	negs	r2, r2
 8009b12:	4417      	add	r7, r2
 8009b14:	f8ca 1000 	str.w	r1, [sl]
 8009b18:	b1ed      	cbz	r5, 8009b56 <__gethex+0x12a>
 8009b1a:	f1bb 0f00 	cmp.w	fp, #0
 8009b1e:	bf0c      	ite	eq
 8009b20:	2506      	moveq	r5, #6
 8009b22:	2500      	movne	r5, #0
 8009b24:	4628      	mov	r0, r5
 8009b26:	b005      	add	sp, #20
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	2500      	movs	r5, #0
 8009b2e:	462c      	mov	r4, r5
 8009b30:	e7b0      	b.n	8009a94 <__gethex+0x68>
 8009b32:	2c00      	cmp	r4, #0
 8009b34:	d1c7      	bne.n	8009ac6 <__gethex+0x9a>
 8009b36:	4627      	mov	r7, r4
 8009b38:	e7c7      	b.n	8009aca <__gethex+0x9e>
 8009b3a:	464e      	mov	r6, r9
 8009b3c:	462f      	mov	r7, r5
 8009b3e:	2501      	movs	r5, #1
 8009b40:	e7c3      	b.n	8009aca <__gethex+0x9e>
 8009b42:	2400      	movs	r4, #0
 8009b44:	1cb1      	adds	r1, r6, #2
 8009b46:	e7cc      	b.n	8009ae2 <__gethex+0xb6>
 8009b48:	2401      	movs	r4, #1
 8009b4a:	e7fb      	b.n	8009b44 <__gethex+0x118>
 8009b4c:	fb03 0002 	mla	r0, r3, r2, r0
 8009b50:	e7ce      	b.n	8009af0 <__gethex+0xc4>
 8009b52:	4631      	mov	r1, r6
 8009b54:	e7de      	b.n	8009b14 <__gethex+0xe8>
 8009b56:	4629      	mov	r1, r5
 8009b58:	eba6 0309 	sub.w	r3, r6, r9
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	2b07      	cmp	r3, #7
 8009b60:	dc0a      	bgt.n	8009b78 <__gethex+0x14c>
 8009b62:	9801      	ldr	r0, [sp, #4]
 8009b64:	f000 faf4 	bl	800a150 <_Balloc>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	b940      	cbnz	r0, 8009b7e <__gethex+0x152>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	21e4      	movs	r1, #228	@ 0xe4
 8009b70:	4b5b      	ldr	r3, [pc, #364]	@ (8009ce0 <__gethex+0x2b4>)
 8009b72:	485c      	ldr	r0, [pc, #368]	@ (8009ce4 <__gethex+0x2b8>)
 8009b74:	f001 fb60 	bl	800b238 <__assert_func>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	105b      	asrs	r3, r3, #1
 8009b7c:	e7ef      	b.n	8009b5e <__gethex+0x132>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f100 0a14 	add.w	sl, r0, #20
 8009b84:	4655      	mov	r5, sl
 8009b86:	469b      	mov	fp, r3
 8009b88:	45b1      	cmp	r9, r6
 8009b8a:	d337      	bcc.n	8009bfc <__gethex+0x1d0>
 8009b8c:	f845 bb04 	str.w	fp, [r5], #4
 8009b90:	eba5 050a 	sub.w	r5, r5, sl
 8009b94:	10ad      	asrs	r5, r5, #2
 8009b96:	6125      	str	r5, [r4, #16]
 8009b98:	4658      	mov	r0, fp
 8009b9a:	f000 fbcb 	bl	800a334 <__hi0bits>
 8009b9e:	016d      	lsls	r5, r5, #5
 8009ba0:	f8d8 6000 	ldr.w	r6, [r8]
 8009ba4:	1a2d      	subs	r5, r5, r0
 8009ba6:	42b5      	cmp	r5, r6
 8009ba8:	dd54      	ble.n	8009c54 <__gethex+0x228>
 8009baa:	1bad      	subs	r5, r5, r6
 8009bac:	4629      	mov	r1, r5
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 ff4d 	bl	800aa4e <__any_on>
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	b178      	cbz	r0, 8009bd8 <__gethex+0x1ac>
 8009bb8:	f04f 0901 	mov.w	r9, #1
 8009bbc:	1e6b      	subs	r3, r5, #1
 8009bbe:	1159      	asrs	r1, r3, #5
 8009bc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009bc4:	f003 021f 	and.w	r2, r3, #31
 8009bc8:	fa09 f202 	lsl.w	r2, r9, r2
 8009bcc:	420a      	tst	r2, r1
 8009bce:	d003      	beq.n	8009bd8 <__gethex+0x1ac>
 8009bd0:	454b      	cmp	r3, r9
 8009bd2:	dc36      	bgt.n	8009c42 <__gethex+0x216>
 8009bd4:	f04f 0902 	mov.w	r9, #2
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f7ff febe 	bl	800995c <rshift>
 8009be0:	442f      	add	r7, r5
 8009be2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009be6:	42bb      	cmp	r3, r7
 8009be8:	da42      	bge.n	8009c70 <__gethex+0x244>
 8009bea:	4621      	mov	r1, r4
 8009bec:	9801      	ldr	r0, [sp, #4]
 8009bee:	f000 faef 	bl	800a1d0 <_Bfree>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bf6:	25a3      	movs	r5, #163	@ 0xa3
 8009bf8:	6013      	str	r3, [r2, #0]
 8009bfa:	e793      	b.n	8009b24 <__gethex+0xf8>
 8009bfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c00:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c02:	d012      	beq.n	8009c2a <__gethex+0x1fe>
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d104      	bne.n	8009c12 <__gethex+0x1e6>
 8009c08:	f845 bb04 	str.w	fp, [r5], #4
 8009c0c:	f04f 0b00 	mov.w	fp, #0
 8009c10:	465b      	mov	r3, fp
 8009c12:	7830      	ldrb	r0, [r6, #0]
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	f7ff fef4 	bl	8009a02 <__hexdig_fun>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	f000 000f 	and.w	r0, r0, #15
 8009c20:	4098      	lsls	r0, r3
 8009c22:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c26:	3304      	adds	r3, #4
 8009c28:	e7ae      	b.n	8009b88 <__gethex+0x15c>
 8009c2a:	45b1      	cmp	r9, r6
 8009c2c:	d8ea      	bhi.n	8009c04 <__gethex+0x1d8>
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4630      	mov	r0, r6
 8009c32:	492a      	ldr	r1, [pc, #168]	@ (8009cdc <__gethex+0x2b0>)
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	f7ff fdaf 	bl	8009798 <strncmp>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1e1      	bne.n	8009c04 <__gethex+0x1d8>
 8009c40:	e7a2      	b.n	8009b88 <__gethex+0x15c>
 8009c42:	4620      	mov	r0, r4
 8009c44:	1ea9      	subs	r1, r5, #2
 8009c46:	f000 ff02 	bl	800aa4e <__any_on>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d0c2      	beq.n	8009bd4 <__gethex+0x1a8>
 8009c4e:	f04f 0903 	mov.w	r9, #3
 8009c52:	e7c1      	b.n	8009bd8 <__gethex+0x1ac>
 8009c54:	da09      	bge.n	8009c6a <__gethex+0x23e>
 8009c56:	1b75      	subs	r5, r6, r5
 8009c58:	4621      	mov	r1, r4
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	9801      	ldr	r0, [sp, #4]
 8009c5e:	f000 fcc7 	bl	800a5f0 <__lshift>
 8009c62:	4604      	mov	r4, r0
 8009c64:	1b7f      	subs	r7, r7, r5
 8009c66:	f100 0a14 	add.w	sl, r0, #20
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	e7b8      	b.n	8009be2 <__gethex+0x1b6>
 8009c70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c74:	42bd      	cmp	r5, r7
 8009c76:	dd6f      	ble.n	8009d58 <__gethex+0x32c>
 8009c78:	1bed      	subs	r5, r5, r7
 8009c7a:	42ae      	cmp	r6, r5
 8009c7c:	dc34      	bgt.n	8009ce8 <__gethex+0x2bc>
 8009c7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d022      	beq.n	8009ccc <__gethex+0x2a0>
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d024      	beq.n	8009cd4 <__gethex+0x2a8>
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d115      	bne.n	8009cba <__gethex+0x28e>
 8009c8e:	42ae      	cmp	r6, r5
 8009c90:	d113      	bne.n	8009cba <__gethex+0x28e>
 8009c92:	2e01      	cmp	r6, #1
 8009c94:	d10b      	bne.n	8009cae <__gethex+0x282>
 8009c96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c9a:	9a02      	ldr	r2, [sp, #8]
 8009c9c:	2562      	movs	r5, #98	@ 0x62
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	f8ca 3000 	str.w	r3, [sl]
 8009ca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009caa:	601c      	str	r4, [r3, #0]
 8009cac:	e73a      	b.n	8009b24 <__gethex+0xf8>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	1e71      	subs	r1, r6, #1
 8009cb2:	f000 fecc 	bl	800aa4e <__any_on>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d1ed      	bne.n	8009c96 <__gethex+0x26a>
 8009cba:	4621      	mov	r1, r4
 8009cbc:	9801      	ldr	r0, [sp, #4]
 8009cbe:	f000 fa87 	bl	800a1d0 <_Bfree>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cc6:	2550      	movs	r5, #80	@ 0x50
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	e72b      	b.n	8009b24 <__gethex+0xf8>
 8009ccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1f3      	bne.n	8009cba <__gethex+0x28e>
 8009cd2:	e7e0      	b.n	8009c96 <__gethex+0x26a>
 8009cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1dd      	bne.n	8009c96 <__gethex+0x26a>
 8009cda:	e7ee      	b.n	8009cba <__gethex+0x28e>
 8009cdc:	0800ba22 	.word	0x0800ba22
 8009ce0:	0800ba38 	.word	0x0800ba38
 8009ce4:	0800ba49 	.word	0x0800ba49
 8009ce8:	1e6f      	subs	r7, r5, #1
 8009cea:	f1b9 0f00 	cmp.w	r9, #0
 8009cee:	d130      	bne.n	8009d52 <__gethex+0x326>
 8009cf0:	b127      	cbz	r7, 8009cfc <__gethex+0x2d0>
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 feaa 	bl	800aa4e <__any_on>
 8009cfa:	4681      	mov	r9, r0
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4629      	mov	r1, r5
 8009d00:	1b76      	subs	r6, r6, r5
 8009d02:	2502      	movs	r5, #2
 8009d04:	117a      	asrs	r2, r7, #5
 8009d06:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d0a:	f007 071f 	and.w	r7, r7, #31
 8009d0e:	40bb      	lsls	r3, r7
 8009d10:	4213      	tst	r3, r2
 8009d12:	4620      	mov	r0, r4
 8009d14:	bf18      	it	ne
 8009d16:	f049 0902 	orrne.w	r9, r9, #2
 8009d1a:	f7ff fe1f 	bl	800995c <rshift>
 8009d1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d22:	f1b9 0f00 	cmp.w	r9, #0
 8009d26:	d047      	beq.n	8009db8 <__gethex+0x38c>
 8009d28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d015      	beq.n	8009d5c <__gethex+0x330>
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d017      	beq.n	8009d64 <__gethex+0x338>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d109      	bne.n	8009d4c <__gethex+0x320>
 8009d38:	f019 0f02 	tst.w	r9, #2
 8009d3c:	d006      	beq.n	8009d4c <__gethex+0x320>
 8009d3e:	f8da 3000 	ldr.w	r3, [sl]
 8009d42:	ea49 0903 	orr.w	r9, r9, r3
 8009d46:	f019 0f01 	tst.w	r9, #1
 8009d4a:	d10e      	bne.n	8009d6a <__gethex+0x33e>
 8009d4c:	f045 0510 	orr.w	r5, r5, #16
 8009d50:	e032      	b.n	8009db8 <__gethex+0x38c>
 8009d52:	f04f 0901 	mov.w	r9, #1
 8009d56:	e7d1      	b.n	8009cfc <__gethex+0x2d0>
 8009d58:	2501      	movs	r5, #1
 8009d5a:	e7e2      	b.n	8009d22 <__gethex+0x2f6>
 8009d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d5e:	f1c3 0301 	rsb	r3, r3, #1
 8009d62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0f0      	beq.n	8009d4c <__gethex+0x320>
 8009d6a:	f04f 0c00 	mov.w	ip, #0
 8009d6e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d72:	f104 0314 	add.w	r3, r4, #20
 8009d76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d88:	d01b      	beq.n	8009dc2 <__gethex+0x396>
 8009d8a:	3201      	adds	r2, #1
 8009d8c:	6002      	str	r2, [r0, #0]
 8009d8e:	2d02      	cmp	r5, #2
 8009d90:	f104 0314 	add.w	r3, r4, #20
 8009d94:	d13c      	bne.n	8009e10 <__gethex+0x3e4>
 8009d96:	f8d8 2000 	ldr.w	r2, [r8]
 8009d9a:	3a01      	subs	r2, #1
 8009d9c:	42b2      	cmp	r2, r6
 8009d9e:	d109      	bne.n	8009db4 <__gethex+0x388>
 8009da0:	2201      	movs	r2, #1
 8009da2:	1171      	asrs	r1, r6, #5
 8009da4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009da8:	f006 061f 	and.w	r6, r6, #31
 8009dac:	fa02 f606 	lsl.w	r6, r2, r6
 8009db0:	421e      	tst	r6, r3
 8009db2:	d13a      	bne.n	8009e2a <__gethex+0x3fe>
 8009db4:	f045 0520 	orr.w	r5, r5, #32
 8009db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dba:	601c      	str	r4, [r3, #0]
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	601f      	str	r7, [r3, #0]
 8009dc0:	e6b0      	b.n	8009b24 <__gethex+0xf8>
 8009dc2:	4299      	cmp	r1, r3
 8009dc4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009dc8:	d8d9      	bhi.n	8009d7e <__gethex+0x352>
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	459b      	cmp	fp, r3
 8009dce:	db17      	blt.n	8009e00 <__gethex+0x3d4>
 8009dd0:	6861      	ldr	r1, [r4, #4]
 8009dd2:	9801      	ldr	r0, [sp, #4]
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	f000 f9bb 	bl	800a150 <_Balloc>
 8009dda:	4681      	mov	r9, r0
 8009ddc:	b918      	cbnz	r0, 8009de6 <__gethex+0x3ba>
 8009dde:	4602      	mov	r2, r0
 8009de0:	2184      	movs	r1, #132	@ 0x84
 8009de2:	4b19      	ldr	r3, [pc, #100]	@ (8009e48 <__gethex+0x41c>)
 8009de4:	e6c5      	b.n	8009b72 <__gethex+0x146>
 8009de6:	6922      	ldr	r2, [r4, #16]
 8009de8:	f104 010c 	add.w	r1, r4, #12
 8009dec:	3202      	adds	r2, #2
 8009dee:	0092      	lsls	r2, r2, #2
 8009df0:	300c      	adds	r0, #12
 8009df2:	f7ff fd56 	bl	80098a2 <memcpy>
 8009df6:	4621      	mov	r1, r4
 8009df8:	9801      	ldr	r0, [sp, #4]
 8009dfa:	f000 f9e9 	bl	800a1d0 <_Bfree>
 8009dfe:	464c      	mov	r4, r9
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	6122      	str	r2, [r4, #16]
 8009e06:	2201      	movs	r2, #1
 8009e08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e0c:	615a      	str	r2, [r3, #20]
 8009e0e:	e7be      	b.n	8009d8e <__gethex+0x362>
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	455a      	cmp	r2, fp
 8009e14:	dd0b      	ble.n	8009e2e <__gethex+0x402>
 8009e16:	2101      	movs	r1, #1
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f7ff fd9f 	bl	800995c <rshift>
 8009e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e22:	3701      	adds	r7, #1
 8009e24:	42bb      	cmp	r3, r7
 8009e26:	f6ff aee0 	blt.w	8009bea <__gethex+0x1be>
 8009e2a:	2501      	movs	r5, #1
 8009e2c:	e7c2      	b.n	8009db4 <__gethex+0x388>
 8009e2e:	f016 061f 	ands.w	r6, r6, #31
 8009e32:	d0fa      	beq.n	8009e2a <__gethex+0x3fe>
 8009e34:	4453      	add	r3, sl
 8009e36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e3a:	f000 fa7b 	bl	800a334 <__hi0bits>
 8009e3e:	f1c6 0620 	rsb	r6, r6, #32
 8009e42:	42b0      	cmp	r0, r6
 8009e44:	dbe7      	blt.n	8009e16 <__gethex+0x3ea>
 8009e46:	e7f0      	b.n	8009e2a <__gethex+0x3fe>
 8009e48:	0800ba38 	.word	0x0800ba38

08009e4c <L_shift>:
 8009e4c:	f1c2 0208 	rsb	r2, r2, #8
 8009e50:	0092      	lsls	r2, r2, #2
 8009e52:	b570      	push	{r4, r5, r6, lr}
 8009e54:	f1c2 0620 	rsb	r6, r2, #32
 8009e58:	6843      	ldr	r3, [r0, #4]
 8009e5a:	6804      	ldr	r4, [r0, #0]
 8009e5c:	fa03 f506 	lsl.w	r5, r3, r6
 8009e60:	432c      	orrs	r4, r5
 8009e62:	40d3      	lsrs	r3, r2
 8009e64:	6004      	str	r4, [r0, #0]
 8009e66:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e6a:	4288      	cmp	r0, r1
 8009e6c:	d3f4      	bcc.n	8009e58 <L_shift+0xc>
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}

08009e70 <__match>:
 8009e70:	b530      	push	{r4, r5, lr}
 8009e72:	6803      	ldr	r3, [r0, #0]
 8009e74:	3301      	adds	r3, #1
 8009e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e7a:	b914      	cbnz	r4, 8009e82 <__match+0x12>
 8009e7c:	6003      	str	r3, [r0, #0]
 8009e7e:	2001      	movs	r0, #1
 8009e80:	bd30      	pop	{r4, r5, pc}
 8009e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009e8a:	2d19      	cmp	r5, #25
 8009e8c:	bf98      	it	ls
 8009e8e:	3220      	addls	r2, #32
 8009e90:	42a2      	cmp	r2, r4
 8009e92:	d0f0      	beq.n	8009e76 <__match+0x6>
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7f3      	b.n	8009e80 <__match+0x10>

08009e98 <__hexnan>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	680b      	ldr	r3, [r1, #0]
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	115e      	asrs	r6, r3, #5
 8009ea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ea8:	f013 031f 	ands.w	r3, r3, #31
 8009eac:	bf18      	it	ne
 8009eae:	3604      	addne	r6, #4
 8009eb0:	1f37      	subs	r7, r6, #4
 8009eb2:	4690      	mov	r8, r2
 8009eb4:	46b9      	mov	r9, r7
 8009eb6:	463c      	mov	r4, r7
 8009eb8:	46ab      	mov	fp, r5
 8009eba:	b087      	sub	sp, #28
 8009ebc:	6801      	ldr	r1, [r0, #0]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ec4:	9502      	str	r5, [sp, #8]
 8009ec6:	784a      	ldrb	r2, [r1, #1]
 8009ec8:	1c4b      	adds	r3, r1, #1
 8009eca:	9303      	str	r3, [sp, #12]
 8009ecc:	b342      	cbz	r2, 8009f20 <__hexnan+0x88>
 8009ece:	4610      	mov	r0, r2
 8009ed0:	9105      	str	r1, [sp, #20]
 8009ed2:	9204      	str	r2, [sp, #16]
 8009ed4:	f7ff fd95 	bl	8009a02 <__hexdig_fun>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d151      	bne.n	8009f80 <__hexnan+0xe8>
 8009edc:	9a04      	ldr	r2, [sp, #16]
 8009ede:	9905      	ldr	r1, [sp, #20]
 8009ee0:	2a20      	cmp	r2, #32
 8009ee2:	d818      	bhi.n	8009f16 <__hexnan+0x7e>
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	459b      	cmp	fp, r3
 8009ee8:	dd13      	ble.n	8009f12 <__hexnan+0x7a>
 8009eea:	454c      	cmp	r4, r9
 8009eec:	d206      	bcs.n	8009efc <__hexnan+0x64>
 8009eee:	2d07      	cmp	r5, #7
 8009ef0:	dc04      	bgt.n	8009efc <__hexnan+0x64>
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f7ff ffa8 	bl	8009e4c <L_shift>
 8009efc:	4544      	cmp	r4, r8
 8009efe:	d952      	bls.n	8009fa6 <__hexnan+0x10e>
 8009f00:	2300      	movs	r3, #0
 8009f02:	f1a4 0904 	sub.w	r9, r4, #4
 8009f06:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f0a:	461d      	mov	r5, r3
 8009f0c:	464c      	mov	r4, r9
 8009f0e:	f8cd b008 	str.w	fp, [sp, #8]
 8009f12:	9903      	ldr	r1, [sp, #12]
 8009f14:	e7d7      	b.n	8009ec6 <__hexnan+0x2e>
 8009f16:	2a29      	cmp	r2, #41	@ 0x29
 8009f18:	d157      	bne.n	8009fca <__hexnan+0x132>
 8009f1a:	3102      	adds	r1, #2
 8009f1c:	f8ca 1000 	str.w	r1, [sl]
 8009f20:	f1bb 0f00 	cmp.w	fp, #0
 8009f24:	d051      	beq.n	8009fca <__hexnan+0x132>
 8009f26:	454c      	cmp	r4, r9
 8009f28:	d206      	bcs.n	8009f38 <__hexnan+0xa0>
 8009f2a:	2d07      	cmp	r5, #7
 8009f2c:	dc04      	bgt.n	8009f38 <__hexnan+0xa0>
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4649      	mov	r1, r9
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7ff ff8a 	bl	8009e4c <L_shift>
 8009f38:	4544      	cmp	r4, r8
 8009f3a:	d936      	bls.n	8009faa <__hexnan+0x112>
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	f1a8 0204 	sub.w	r2, r8, #4
 8009f42:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f46:	429f      	cmp	r7, r3
 8009f48:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f4c:	d2f9      	bcs.n	8009f42 <__hexnan+0xaa>
 8009f4e:	1b3b      	subs	r3, r7, r4
 8009f50:	f023 0303 	bic.w	r3, r3, #3
 8009f54:	3304      	adds	r3, #4
 8009f56:	3401      	adds	r4, #1
 8009f58:	3e03      	subs	r6, #3
 8009f5a:	42b4      	cmp	r4, r6
 8009f5c:	bf88      	it	hi
 8009f5e:	2304      	movhi	r3, #4
 8009f60:	2200      	movs	r2, #0
 8009f62:	4443      	add	r3, r8
 8009f64:	f843 2b04 	str.w	r2, [r3], #4
 8009f68:	429f      	cmp	r7, r3
 8009f6a:	d2fb      	bcs.n	8009f64 <__hexnan+0xcc>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	b91b      	cbnz	r3, 8009f78 <__hexnan+0xe0>
 8009f70:	4547      	cmp	r7, r8
 8009f72:	d128      	bne.n	8009fc6 <__hexnan+0x12e>
 8009f74:	2301      	movs	r3, #1
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	2005      	movs	r0, #5
 8009f7a:	b007      	add	sp, #28
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	3501      	adds	r5, #1
 8009f82:	2d08      	cmp	r5, #8
 8009f84:	f10b 0b01 	add.w	fp, fp, #1
 8009f88:	dd06      	ble.n	8009f98 <__hexnan+0x100>
 8009f8a:	4544      	cmp	r4, r8
 8009f8c:	d9c1      	bls.n	8009f12 <__hexnan+0x7a>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2501      	movs	r5, #1
 8009f92:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f96:	3c04      	subs	r4, #4
 8009f98:	6822      	ldr	r2, [r4, #0]
 8009f9a:	f000 000f 	and.w	r0, r0, #15
 8009f9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fa2:	6020      	str	r0, [r4, #0]
 8009fa4:	e7b5      	b.n	8009f12 <__hexnan+0x7a>
 8009fa6:	2508      	movs	r5, #8
 8009fa8:	e7b3      	b.n	8009f12 <__hexnan+0x7a>
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0dd      	beq.n	8009f6c <__hexnan+0xd4>
 8009fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb4:	f1c3 0320 	rsb	r3, r3, #32
 8009fb8:	40da      	lsrs	r2, r3
 8009fba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009fc4:	e7d2      	b.n	8009f6c <__hexnan+0xd4>
 8009fc6:	3f04      	subs	r7, #4
 8009fc8:	e7d0      	b.n	8009f6c <__hexnan+0xd4>
 8009fca:	2004      	movs	r0, #4
 8009fcc:	e7d5      	b.n	8009f7a <__hexnan+0xe2>
	...

08009fd0 <sbrk_aligned>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	4e0f      	ldr	r6, [pc, #60]	@ (800a010 <sbrk_aligned+0x40>)
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	6831      	ldr	r1, [r6, #0]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	b911      	cbnz	r1, 8009fe2 <sbrk_aligned+0x12>
 8009fdc:	f001 f90e 	bl	800b1fc <_sbrk_r>
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f001 f909 	bl	800b1fc <_sbrk_r>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d103      	bne.n	8009ff6 <sbrk_aligned+0x26>
 8009fee:	f04f 34ff 	mov.w	r4, #4294967295
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	1cc4      	adds	r4, r0, #3
 8009ff8:	f024 0403 	bic.w	r4, r4, #3
 8009ffc:	42a0      	cmp	r0, r4
 8009ffe:	d0f8      	beq.n	8009ff2 <sbrk_aligned+0x22>
 800a000:	1a21      	subs	r1, r4, r0
 800a002:	4628      	mov	r0, r5
 800a004:	f001 f8fa 	bl	800b1fc <_sbrk_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	d1f2      	bne.n	8009ff2 <sbrk_aligned+0x22>
 800a00c:	e7ef      	b.n	8009fee <sbrk_aligned+0x1e>
 800a00e:	bf00      	nop
 800a010:	200016e4 	.word	0x200016e4

0800a014 <_malloc_r>:
 800a014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a018:	1ccd      	adds	r5, r1, #3
 800a01a:	f025 0503 	bic.w	r5, r5, #3
 800a01e:	3508      	adds	r5, #8
 800a020:	2d0c      	cmp	r5, #12
 800a022:	bf38      	it	cc
 800a024:	250c      	movcc	r5, #12
 800a026:	2d00      	cmp	r5, #0
 800a028:	4606      	mov	r6, r0
 800a02a:	db01      	blt.n	800a030 <_malloc_r+0x1c>
 800a02c:	42a9      	cmp	r1, r5
 800a02e:	d904      	bls.n	800a03a <_malloc_r+0x26>
 800a030:	230c      	movs	r3, #12
 800a032:	6033      	str	r3, [r6, #0]
 800a034:	2000      	movs	r0, #0
 800a036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a03a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a110 <_malloc_r+0xfc>
 800a03e:	f000 f87b 	bl	800a138 <__malloc_lock>
 800a042:	f8d8 3000 	ldr.w	r3, [r8]
 800a046:	461c      	mov	r4, r3
 800a048:	bb44      	cbnz	r4, 800a09c <_malloc_r+0x88>
 800a04a:	4629      	mov	r1, r5
 800a04c:	4630      	mov	r0, r6
 800a04e:	f7ff ffbf 	bl	8009fd0 <sbrk_aligned>
 800a052:	1c43      	adds	r3, r0, #1
 800a054:	4604      	mov	r4, r0
 800a056:	d158      	bne.n	800a10a <_malloc_r+0xf6>
 800a058:	f8d8 4000 	ldr.w	r4, [r8]
 800a05c:	4627      	mov	r7, r4
 800a05e:	2f00      	cmp	r7, #0
 800a060:	d143      	bne.n	800a0ea <_malloc_r+0xd6>
 800a062:	2c00      	cmp	r4, #0
 800a064:	d04b      	beq.n	800a0fe <_malloc_r+0xea>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	4639      	mov	r1, r7
 800a06a:	4630      	mov	r0, r6
 800a06c:	eb04 0903 	add.w	r9, r4, r3
 800a070:	f001 f8c4 	bl	800b1fc <_sbrk_r>
 800a074:	4581      	cmp	r9, r0
 800a076:	d142      	bne.n	800a0fe <_malloc_r+0xea>
 800a078:	6821      	ldr	r1, [r4, #0]
 800a07a:	4630      	mov	r0, r6
 800a07c:	1a6d      	subs	r5, r5, r1
 800a07e:	4629      	mov	r1, r5
 800a080:	f7ff ffa6 	bl	8009fd0 <sbrk_aligned>
 800a084:	3001      	adds	r0, #1
 800a086:	d03a      	beq.n	800a0fe <_malloc_r+0xea>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	442b      	add	r3, r5
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	f8d8 3000 	ldr.w	r3, [r8]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	bb62      	cbnz	r2, 800a0f0 <_malloc_r+0xdc>
 800a096:	f8c8 7000 	str.w	r7, [r8]
 800a09a:	e00f      	b.n	800a0bc <_malloc_r+0xa8>
 800a09c:	6822      	ldr	r2, [r4, #0]
 800a09e:	1b52      	subs	r2, r2, r5
 800a0a0:	d420      	bmi.n	800a0e4 <_malloc_r+0xd0>
 800a0a2:	2a0b      	cmp	r2, #11
 800a0a4:	d917      	bls.n	800a0d6 <_malloc_r+0xc2>
 800a0a6:	1961      	adds	r1, r4, r5
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	6025      	str	r5, [r4, #0]
 800a0ac:	bf18      	it	ne
 800a0ae:	6059      	strne	r1, [r3, #4]
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	bf08      	it	eq
 800a0b4:	f8c8 1000 	streq.w	r1, [r8]
 800a0b8:	5162      	str	r2, [r4, r5]
 800a0ba:	604b      	str	r3, [r1, #4]
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f841 	bl	800a144 <__malloc_unlock>
 800a0c2:	f104 000b 	add.w	r0, r4, #11
 800a0c6:	1d23      	adds	r3, r4, #4
 800a0c8:	f020 0007 	bic.w	r0, r0, #7
 800a0cc:	1ac2      	subs	r2, r0, r3
 800a0ce:	bf1c      	itt	ne
 800a0d0:	1a1b      	subne	r3, r3, r0
 800a0d2:	50a3      	strne	r3, [r4, r2]
 800a0d4:	e7af      	b.n	800a036 <_malloc_r+0x22>
 800a0d6:	6862      	ldr	r2, [r4, #4]
 800a0d8:	42a3      	cmp	r3, r4
 800a0da:	bf0c      	ite	eq
 800a0dc:	f8c8 2000 	streq.w	r2, [r8]
 800a0e0:	605a      	strne	r2, [r3, #4]
 800a0e2:	e7eb      	b.n	800a0bc <_malloc_r+0xa8>
 800a0e4:	4623      	mov	r3, r4
 800a0e6:	6864      	ldr	r4, [r4, #4]
 800a0e8:	e7ae      	b.n	800a048 <_malloc_r+0x34>
 800a0ea:	463c      	mov	r4, r7
 800a0ec:	687f      	ldr	r7, [r7, #4]
 800a0ee:	e7b6      	b.n	800a05e <_malloc_r+0x4a>
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d1fb      	bne.n	800a0f0 <_malloc_r+0xdc>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	6053      	str	r3, [r2, #4]
 800a0fc:	e7de      	b.n	800a0bc <_malloc_r+0xa8>
 800a0fe:	230c      	movs	r3, #12
 800a100:	4630      	mov	r0, r6
 800a102:	6033      	str	r3, [r6, #0]
 800a104:	f000 f81e 	bl	800a144 <__malloc_unlock>
 800a108:	e794      	b.n	800a034 <_malloc_r+0x20>
 800a10a:	6005      	str	r5, [r0, #0]
 800a10c:	e7d6      	b.n	800a0bc <_malloc_r+0xa8>
 800a10e:	bf00      	nop
 800a110:	200016e8 	.word	0x200016e8

0800a114 <__ascii_mbtowc>:
 800a114:	b082      	sub	sp, #8
 800a116:	b901      	cbnz	r1, 800a11a <__ascii_mbtowc+0x6>
 800a118:	a901      	add	r1, sp, #4
 800a11a:	b142      	cbz	r2, 800a12e <__ascii_mbtowc+0x1a>
 800a11c:	b14b      	cbz	r3, 800a132 <__ascii_mbtowc+0x1e>
 800a11e:	7813      	ldrb	r3, [r2, #0]
 800a120:	600b      	str	r3, [r1, #0]
 800a122:	7812      	ldrb	r2, [r2, #0]
 800a124:	1e10      	subs	r0, r2, #0
 800a126:	bf18      	it	ne
 800a128:	2001      	movne	r0, #1
 800a12a:	b002      	add	sp, #8
 800a12c:	4770      	bx	lr
 800a12e:	4610      	mov	r0, r2
 800a130:	e7fb      	b.n	800a12a <__ascii_mbtowc+0x16>
 800a132:	f06f 0001 	mvn.w	r0, #1
 800a136:	e7f8      	b.n	800a12a <__ascii_mbtowc+0x16>

0800a138 <__malloc_lock>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__malloc_lock+0x8>)
 800a13a:	f7ff bbb0 	b.w	800989e <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	200016e0 	.word	0x200016e0

0800a144 <__malloc_unlock>:
 800a144:	4801      	ldr	r0, [pc, #4]	@ (800a14c <__malloc_unlock+0x8>)
 800a146:	f7ff bbab 	b.w	80098a0 <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	200016e0 	.word	0x200016e0

0800a150 <_Balloc>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	69c6      	ldr	r6, [r0, #28]
 800a154:	4604      	mov	r4, r0
 800a156:	460d      	mov	r5, r1
 800a158:	b976      	cbnz	r6, 800a178 <_Balloc+0x28>
 800a15a:	2010      	movs	r0, #16
 800a15c:	f001 f89e 	bl	800b29c <malloc>
 800a160:	4602      	mov	r2, r0
 800a162:	61e0      	str	r0, [r4, #28]
 800a164:	b920      	cbnz	r0, 800a170 <_Balloc+0x20>
 800a166:	216b      	movs	r1, #107	@ 0x6b
 800a168:	4b17      	ldr	r3, [pc, #92]	@ (800a1c8 <_Balloc+0x78>)
 800a16a:	4818      	ldr	r0, [pc, #96]	@ (800a1cc <_Balloc+0x7c>)
 800a16c:	f001 f864 	bl	800b238 <__assert_func>
 800a170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a174:	6006      	str	r6, [r0, #0]
 800a176:	60c6      	str	r6, [r0, #12]
 800a178:	69e6      	ldr	r6, [r4, #28]
 800a17a:	68f3      	ldr	r3, [r6, #12]
 800a17c:	b183      	cbz	r3, 800a1a0 <_Balloc+0x50>
 800a17e:	69e3      	ldr	r3, [r4, #28]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a186:	b9b8      	cbnz	r0, 800a1b8 <_Balloc+0x68>
 800a188:	2101      	movs	r1, #1
 800a18a:	fa01 f605 	lsl.w	r6, r1, r5
 800a18e:	1d72      	adds	r2, r6, #5
 800a190:	4620      	mov	r0, r4
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	f001 f86e 	bl	800b274 <_calloc_r>
 800a198:	b160      	cbz	r0, 800a1b4 <_Balloc+0x64>
 800a19a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a19e:	e00e      	b.n	800a1be <_Balloc+0x6e>
 800a1a0:	2221      	movs	r2, #33	@ 0x21
 800a1a2:	2104      	movs	r1, #4
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f001 f865 	bl	800b274 <_calloc_r>
 800a1aa:	69e3      	ldr	r3, [r4, #28]
 800a1ac:	60f0      	str	r0, [r6, #12]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e4      	bne.n	800a17e <_Balloc+0x2e>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	6802      	ldr	r2, [r0, #0]
 800a1ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1c4:	e7f7      	b.n	800a1b6 <_Balloc+0x66>
 800a1c6:	bf00      	nop
 800a1c8:	0800baa9 	.word	0x0800baa9
 800a1cc:	0800bac0 	.word	0x0800bac0

0800a1d0 <_Bfree>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	69c6      	ldr	r6, [r0, #28]
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	b976      	cbnz	r6, 800a1f8 <_Bfree+0x28>
 800a1da:	2010      	movs	r0, #16
 800a1dc:	f001 f85e 	bl	800b29c <malloc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	61e8      	str	r0, [r5, #28]
 800a1e4:	b920      	cbnz	r0, 800a1f0 <_Bfree+0x20>
 800a1e6:	218f      	movs	r1, #143	@ 0x8f
 800a1e8:	4b08      	ldr	r3, [pc, #32]	@ (800a20c <_Bfree+0x3c>)
 800a1ea:	4809      	ldr	r0, [pc, #36]	@ (800a210 <_Bfree+0x40>)
 800a1ec:	f001 f824 	bl	800b238 <__assert_func>
 800a1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1f4:	6006      	str	r6, [r0, #0]
 800a1f6:	60c6      	str	r6, [r0, #12]
 800a1f8:	b13c      	cbz	r4, 800a20a <_Bfree+0x3a>
 800a1fa:	69eb      	ldr	r3, [r5, #28]
 800a1fc:	6862      	ldr	r2, [r4, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a204:	6021      	str	r1, [r4, #0]
 800a206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	0800baa9 	.word	0x0800baa9
 800a210:	0800bac0 	.word	0x0800bac0

0800a214 <__multadd>:
 800a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a218:	4607      	mov	r7, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	461e      	mov	r6, r3
 800a21e:	2000      	movs	r0, #0
 800a220:	690d      	ldr	r5, [r1, #16]
 800a222:	f101 0c14 	add.w	ip, r1, #20
 800a226:	f8dc 3000 	ldr.w	r3, [ip]
 800a22a:	3001      	adds	r0, #1
 800a22c:	b299      	uxth	r1, r3
 800a22e:	fb02 6101 	mla	r1, r2, r1, r6
 800a232:	0c1e      	lsrs	r6, r3, #16
 800a234:	0c0b      	lsrs	r3, r1, #16
 800a236:	fb02 3306 	mla	r3, r2, r6, r3
 800a23a:	b289      	uxth	r1, r1
 800a23c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a240:	4285      	cmp	r5, r0
 800a242:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a246:	f84c 1b04 	str.w	r1, [ip], #4
 800a24a:	dcec      	bgt.n	800a226 <__multadd+0x12>
 800a24c:	b30e      	cbz	r6, 800a292 <__multadd+0x7e>
 800a24e:	68a3      	ldr	r3, [r4, #8]
 800a250:	42ab      	cmp	r3, r5
 800a252:	dc19      	bgt.n	800a288 <__multadd+0x74>
 800a254:	6861      	ldr	r1, [r4, #4]
 800a256:	4638      	mov	r0, r7
 800a258:	3101      	adds	r1, #1
 800a25a:	f7ff ff79 	bl	800a150 <_Balloc>
 800a25e:	4680      	mov	r8, r0
 800a260:	b928      	cbnz	r0, 800a26e <__multadd+0x5a>
 800a262:	4602      	mov	r2, r0
 800a264:	21ba      	movs	r1, #186	@ 0xba
 800a266:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <__multadd+0x84>)
 800a268:	480c      	ldr	r0, [pc, #48]	@ (800a29c <__multadd+0x88>)
 800a26a:	f000 ffe5 	bl	800b238 <__assert_func>
 800a26e:	6922      	ldr	r2, [r4, #16]
 800a270:	f104 010c 	add.w	r1, r4, #12
 800a274:	3202      	adds	r2, #2
 800a276:	0092      	lsls	r2, r2, #2
 800a278:	300c      	adds	r0, #12
 800a27a:	f7ff fb12 	bl	80098a2 <memcpy>
 800a27e:	4621      	mov	r1, r4
 800a280:	4638      	mov	r0, r7
 800a282:	f7ff ffa5 	bl	800a1d0 <_Bfree>
 800a286:	4644      	mov	r4, r8
 800a288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a28c:	3501      	adds	r5, #1
 800a28e:	615e      	str	r6, [r3, #20]
 800a290:	6125      	str	r5, [r4, #16]
 800a292:	4620      	mov	r0, r4
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	0800ba38 	.word	0x0800ba38
 800a29c:	0800bac0 	.word	0x0800bac0

0800a2a0 <__s2b>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	4615      	mov	r5, r2
 800a2a6:	2209      	movs	r2, #9
 800a2a8:	461f      	mov	r7, r3
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	db09      	blt.n	800a2d0 <__s2b+0x30>
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff ff47 	bl	800a150 <_Balloc>
 800a2c2:	b940      	cbnz	r0, 800a2d6 <__s2b+0x36>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	21d3      	movs	r1, #211	@ 0xd3
 800a2c8:	4b18      	ldr	r3, [pc, #96]	@ (800a32c <__s2b+0x8c>)
 800a2ca:	4819      	ldr	r0, [pc, #100]	@ (800a330 <__s2b+0x90>)
 800a2cc:	f000 ffb4 	bl	800b238 <__assert_func>
 800a2d0:	0052      	lsls	r2, r2, #1
 800a2d2:	3101      	adds	r1, #1
 800a2d4:	e7f0      	b.n	800a2b8 <__s2b+0x18>
 800a2d6:	9b08      	ldr	r3, [sp, #32]
 800a2d8:	2d09      	cmp	r5, #9
 800a2da:	6143      	str	r3, [r0, #20]
 800a2dc:	f04f 0301 	mov.w	r3, #1
 800a2e0:	6103      	str	r3, [r0, #16]
 800a2e2:	dd16      	ble.n	800a312 <__s2b+0x72>
 800a2e4:	f104 0909 	add.w	r9, r4, #9
 800a2e8:	46c8      	mov	r8, r9
 800a2ea:	442c      	add	r4, r5
 800a2ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	220a      	movs	r2, #10
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	3b30      	subs	r3, #48	@ 0x30
 800a2f8:	f7ff ff8c 	bl	800a214 <__multadd>
 800a2fc:	45a0      	cmp	r8, r4
 800a2fe:	d1f5      	bne.n	800a2ec <__s2b+0x4c>
 800a300:	f1a5 0408 	sub.w	r4, r5, #8
 800a304:	444c      	add	r4, r9
 800a306:	1b2d      	subs	r5, r5, r4
 800a308:	1963      	adds	r3, r4, r5
 800a30a:	42bb      	cmp	r3, r7
 800a30c:	db04      	blt.n	800a318 <__s2b+0x78>
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a312:	2509      	movs	r5, #9
 800a314:	340a      	adds	r4, #10
 800a316:	e7f6      	b.n	800a306 <__s2b+0x66>
 800a318:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a31c:	4601      	mov	r1, r0
 800a31e:	220a      	movs	r2, #10
 800a320:	4630      	mov	r0, r6
 800a322:	3b30      	subs	r3, #48	@ 0x30
 800a324:	f7ff ff76 	bl	800a214 <__multadd>
 800a328:	e7ee      	b.n	800a308 <__s2b+0x68>
 800a32a:	bf00      	nop
 800a32c:	0800ba38 	.word	0x0800ba38
 800a330:	0800bac0 	.word	0x0800bac0

0800a334 <__hi0bits>:
 800a334:	4603      	mov	r3, r0
 800a336:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a33a:	bf3a      	itte	cc
 800a33c:	0403      	lslcc	r3, r0, #16
 800a33e:	2010      	movcc	r0, #16
 800a340:	2000      	movcs	r0, #0
 800a342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a346:	bf3c      	itt	cc
 800a348:	021b      	lslcc	r3, r3, #8
 800a34a:	3008      	addcc	r0, #8
 800a34c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a350:	bf3c      	itt	cc
 800a352:	011b      	lslcc	r3, r3, #4
 800a354:	3004      	addcc	r0, #4
 800a356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a35a:	bf3c      	itt	cc
 800a35c:	009b      	lslcc	r3, r3, #2
 800a35e:	3002      	addcc	r0, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	db05      	blt.n	800a370 <__hi0bits+0x3c>
 800a364:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a368:	f100 0001 	add.w	r0, r0, #1
 800a36c:	bf08      	it	eq
 800a36e:	2020      	moveq	r0, #32
 800a370:	4770      	bx	lr

0800a372 <__lo0bits>:
 800a372:	6803      	ldr	r3, [r0, #0]
 800a374:	4602      	mov	r2, r0
 800a376:	f013 0007 	ands.w	r0, r3, #7
 800a37a:	d00b      	beq.n	800a394 <__lo0bits+0x22>
 800a37c:	07d9      	lsls	r1, r3, #31
 800a37e:	d421      	bmi.n	800a3c4 <__lo0bits+0x52>
 800a380:	0798      	lsls	r0, r3, #30
 800a382:	bf49      	itett	mi
 800a384:	085b      	lsrmi	r3, r3, #1
 800a386:	089b      	lsrpl	r3, r3, #2
 800a388:	2001      	movmi	r0, #1
 800a38a:	6013      	strmi	r3, [r2, #0]
 800a38c:	bf5c      	itt	pl
 800a38e:	2002      	movpl	r0, #2
 800a390:	6013      	strpl	r3, [r2, #0]
 800a392:	4770      	bx	lr
 800a394:	b299      	uxth	r1, r3
 800a396:	b909      	cbnz	r1, 800a39c <__lo0bits+0x2a>
 800a398:	2010      	movs	r0, #16
 800a39a:	0c1b      	lsrs	r3, r3, #16
 800a39c:	b2d9      	uxtb	r1, r3
 800a39e:	b909      	cbnz	r1, 800a3a4 <__lo0bits+0x32>
 800a3a0:	3008      	adds	r0, #8
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	0719      	lsls	r1, r3, #28
 800a3a6:	bf04      	itt	eq
 800a3a8:	091b      	lsreq	r3, r3, #4
 800a3aa:	3004      	addeq	r0, #4
 800a3ac:	0799      	lsls	r1, r3, #30
 800a3ae:	bf04      	itt	eq
 800a3b0:	089b      	lsreq	r3, r3, #2
 800a3b2:	3002      	addeq	r0, #2
 800a3b4:	07d9      	lsls	r1, r3, #31
 800a3b6:	d403      	bmi.n	800a3c0 <__lo0bits+0x4e>
 800a3b8:	085b      	lsrs	r3, r3, #1
 800a3ba:	f100 0001 	add.w	r0, r0, #1
 800a3be:	d003      	beq.n	800a3c8 <__lo0bits+0x56>
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	4770      	bx	lr
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	4770      	bx	lr
 800a3c8:	2020      	movs	r0, #32
 800a3ca:	4770      	bx	lr

0800a3cc <__i2b>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	f7ff febd 	bl	800a150 <_Balloc>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <__i2b+0x1a>
 800a3da:	f240 1145 	movw	r1, #325	@ 0x145
 800a3de:	4b04      	ldr	r3, [pc, #16]	@ (800a3f0 <__i2b+0x24>)
 800a3e0:	4804      	ldr	r0, [pc, #16]	@ (800a3f4 <__i2b+0x28>)
 800a3e2:	f000 ff29 	bl	800b238 <__assert_func>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	6144      	str	r4, [r0, #20]
 800a3ea:	6103      	str	r3, [r0, #16]
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0800ba38 	.word	0x0800ba38
 800a3f4:	0800bac0 	.word	0x0800bac0

0800a3f8 <__multiply>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	4617      	mov	r7, r2
 800a3fe:	690a      	ldr	r2, [r1, #16]
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	4689      	mov	r9, r1
 800a404:	429a      	cmp	r2, r3
 800a406:	bfa2      	ittt	ge
 800a408:	463b      	movge	r3, r7
 800a40a:	460f      	movge	r7, r1
 800a40c:	4699      	movge	r9, r3
 800a40e:	693d      	ldr	r5, [r7, #16]
 800a410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	eb05 060a 	add.w	r6, r5, sl
 800a41c:	42b3      	cmp	r3, r6
 800a41e:	b085      	sub	sp, #20
 800a420:	bfb8      	it	lt
 800a422:	3101      	addlt	r1, #1
 800a424:	f7ff fe94 	bl	800a150 <_Balloc>
 800a428:	b930      	cbnz	r0, 800a438 <__multiply+0x40>
 800a42a:	4602      	mov	r2, r0
 800a42c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a430:	4b40      	ldr	r3, [pc, #256]	@ (800a534 <__multiply+0x13c>)
 800a432:	4841      	ldr	r0, [pc, #260]	@ (800a538 <__multiply+0x140>)
 800a434:	f000 ff00 	bl	800b238 <__assert_func>
 800a438:	f100 0414 	add.w	r4, r0, #20
 800a43c:	4623      	mov	r3, r4
 800a43e:	2200      	movs	r2, #0
 800a440:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a444:	4573      	cmp	r3, lr
 800a446:	d320      	bcc.n	800a48a <__multiply+0x92>
 800a448:	f107 0814 	add.w	r8, r7, #20
 800a44c:	f109 0114 	add.w	r1, r9, #20
 800a450:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a454:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a458:	9302      	str	r3, [sp, #8]
 800a45a:	1beb      	subs	r3, r5, r7
 800a45c:	3b15      	subs	r3, #21
 800a45e:	f023 0303 	bic.w	r3, r3, #3
 800a462:	3304      	adds	r3, #4
 800a464:	3715      	adds	r7, #21
 800a466:	42bd      	cmp	r5, r7
 800a468:	bf38      	it	cc
 800a46a:	2304      	movcc	r3, #4
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	9b02      	ldr	r3, [sp, #8]
 800a470:	9103      	str	r1, [sp, #12]
 800a472:	428b      	cmp	r3, r1
 800a474:	d80c      	bhi.n	800a490 <__multiply+0x98>
 800a476:	2e00      	cmp	r6, #0
 800a478:	dd03      	ble.n	800a482 <__multiply+0x8a>
 800a47a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d055      	beq.n	800a52e <__multiply+0x136>
 800a482:	6106      	str	r6, [r0, #16]
 800a484:	b005      	add	sp, #20
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	f843 2b04 	str.w	r2, [r3], #4
 800a48e:	e7d9      	b.n	800a444 <__multiply+0x4c>
 800a490:	f8b1 a000 	ldrh.w	sl, [r1]
 800a494:	f1ba 0f00 	cmp.w	sl, #0
 800a498:	d01f      	beq.n	800a4da <__multiply+0xe2>
 800a49a:	46c4      	mov	ip, r8
 800a49c:	46a1      	mov	r9, r4
 800a49e:	2700      	movs	r7, #0
 800a4a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4a4:	f8d9 3000 	ldr.w	r3, [r9]
 800a4a8:	fa1f fb82 	uxth.w	fp, r2
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4b2:	443b      	add	r3, r7
 800a4b4:	f8d9 7000 	ldr.w	r7, [r9]
 800a4b8:	0c12      	lsrs	r2, r2, #16
 800a4ba:	0c3f      	lsrs	r7, r7, #16
 800a4bc:	fb0a 7202 	mla	r2, sl, r2, r7
 800a4c0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ca:	4565      	cmp	r5, ip
 800a4cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a4d0:	f849 3b04 	str.w	r3, [r9], #4
 800a4d4:	d8e4      	bhi.n	800a4a0 <__multiply+0xa8>
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	50e7      	str	r7, [r4, r3]
 800a4da:	9b03      	ldr	r3, [sp, #12]
 800a4dc:	3104      	adds	r1, #4
 800a4de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4e2:	f1b9 0f00 	cmp.w	r9, #0
 800a4e6:	d020      	beq.n	800a52a <__multiply+0x132>
 800a4e8:	4647      	mov	r7, r8
 800a4ea:	46a4      	mov	ip, r4
 800a4ec:	f04f 0a00 	mov.w	sl, #0
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4f6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a500:	4452      	add	r2, sl
 800a502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a506:	f84c 3b04 	str.w	r3, [ip], #4
 800a50a:	f857 3b04 	ldr.w	r3, [r7], #4
 800a50e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a512:	f8bc 3000 	ldrh.w	r3, [ip]
 800a516:	42bd      	cmp	r5, r7
 800a518:	fb09 330a 	mla	r3, r9, sl, r3
 800a51c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a524:	d8e5      	bhi.n	800a4f2 <__multiply+0xfa>
 800a526:	9a01      	ldr	r2, [sp, #4]
 800a528:	50a3      	str	r3, [r4, r2]
 800a52a:	3404      	adds	r4, #4
 800a52c:	e79f      	b.n	800a46e <__multiply+0x76>
 800a52e:	3e01      	subs	r6, #1
 800a530:	e7a1      	b.n	800a476 <__multiply+0x7e>
 800a532:	bf00      	nop
 800a534:	0800ba38 	.word	0x0800ba38
 800a538:	0800bac0 	.word	0x0800bac0

0800a53c <__pow5mult>:
 800a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a540:	4615      	mov	r5, r2
 800a542:	f012 0203 	ands.w	r2, r2, #3
 800a546:	4607      	mov	r7, r0
 800a548:	460e      	mov	r6, r1
 800a54a:	d007      	beq.n	800a55c <__pow5mult+0x20>
 800a54c:	4c25      	ldr	r4, [pc, #148]	@ (800a5e4 <__pow5mult+0xa8>)
 800a54e:	3a01      	subs	r2, #1
 800a550:	2300      	movs	r3, #0
 800a552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a556:	f7ff fe5d 	bl	800a214 <__multadd>
 800a55a:	4606      	mov	r6, r0
 800a55c:	10ad      	asrs	r5, r5, #2
 800a55e:	d03d      	beq.n	800a5dc <__pow5mult+0xa0>
 800a560:	69fc      	ldr	r4, [r7, #28]
 800a562:	b97c      	cbnz	r4, 800a584 <__pow5mult+0x48>
 800a564:	2010      	movs	r0, #16
 800a566:	f000 fe99 	bl	800b29c <malloc>
 800a56a:	4602      	mov	r2, r0
 800a56c:	61f8      	str	r0, [r7, #28]
 800a56e:	b928      	cbnz	r0, 800a57c <__pow5mult+0x40>
 800a570:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a574:	4b1c      	ldr	r3, [pc, #112]	@ (800a5e8 <__pow5mult+0xac>)
 800a576:	481d      	ldr	r0, [pc, #116]	@ (800a5ec <__pow5mult+0xb0>)
 800a578:	f000 fe5e 	bl	800b238 <__assert_func>
 800a57c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a580:	6004      	str	r4, [r0, #0]
 800a582:	60c4      	str	r4, [r0, #12]
 800a584:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a58c:	b94c      	cbnz	r4, 800a5a2 <__pow5mult+0x66>
 800a58e:	f240 2171 	movw	r1, #625	@ 0x271
 800a592:	4638      	mov	r0, r7
 800a594:	f7ff ff1a 	bl	800a3cc <__i2b>
 800a598:	2300      	movs	r3, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5a0:	6003      	str	r3, [r0, #0]
 800a5a2:	f04f 0900 	mov.w	r9, #0
 800a5a6:	07eb      	lsls	r3, r5, #31
 800a5a8:	d50a      	bpl.n	800a5c0 <__pow5mult+0x84>
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	f7ff ff22 	bl	800a3f8 <__multiply>
 800a5b4:	4680      	mov	r8, r0
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	f7ff fe09 	bl	800a1d0 <_Bfree>
 800a5be:	4646      	mov	r6, r8
 800a5c0:	106d      	asrs	r5, r5, #1
 800a5c2:	d00b      	beq.n	800a5dc <__pow5mult+0xa0>
 800a5c4:	6820      	ldr	r0, [r4, #0]
 800a5c6:	b938      	cbnz	r0, 800a5d8 <__pow5mult+0x9c>
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f7ff ff13 	bl	800a3f8 <__multiply>
 800a5d2:	6020      	str	r0, [r4, #0]
 800a5d4:	f8c0 9000 	str.w	r9, [r0]
 800a5d8:	4604      	mov	r4, r0
 800a5da:	e7e4      	b.n	800a5a6 <__pow5mult+0x6a>
 800a5dc:	4630      	mov	r0, r6
 800a5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0800bbd8 	.word	0x0800bbd8
 800a5e8:	0800baa9 	.word	0x0800baa9
 800a5ec:	0800bac0 	.word	0x0800bac0

0800a5f0 <__lshift>:
 800a5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	4691      	mov	r9, r2
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6849      	ldr	r1, [r1, #4]
 800a5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a608:	f108 0601 	add.w	r6, r8, #1
 800a60c:	42b3      	cmp	r3, r6
 800a60e:	db0b      	blt.n	800a628 <__lshift+0x38>
 800a610:	4638      	mov	r0, r7
 800a612:	f7ff fd9d 	bl	800a150 <_Balloc>
 800a616:	4605      	mov	r5, r0
 800a618:	b948      	cbnz	r0, 800a62e <__lshift+0x3e>
 800a61a:	4602      	mov	r2, r0
 800a61c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a620:	4b27      	ldr	r3, [pc, #156]	@ (800a6c0 <__lshift+0xd0>)
 800a622:	4828      	ldr	r0, [pc, #160]	@ (800a6c4 <__lshift+0xd4>)
 800a624:	f000 fe08 	bl	800b238 <__assert_func>
 800a628:	3101      	adds	r1, #1
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	e7ee      	b.n	800a60c <__lshift+0x1c>
 800a62e:	2300      	movs	r3, #0
 800a630:	f100 0114 	add.w	r1, r0, #20
 800a634:	f100 0210 	add.w	r2, r0, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	4553      	cmp	r3, sl
 800a63c:	db33      	blt.n	800a6a6 <__lshift+0xb6>
 800a63e:	6920      	ldr	r0, [r4, #16]
 800a640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a644:	f104 0314 	add.w	r3, r4, #20
 800a648:	f019 091f 	ands.w	r9, r9, #31
 800a64c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a654:	d02b      	beq.n	800a6ae <__lshift+0xbe>
 800a656:	468a      	mov	sl, r1
 800a658:	2200      	movs	r2, #0
 800a65a:	f1c9 0e20 	rsb	lr, r9, #32
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	fa00 f009 	lsl.w	r0, r0, r9
 800a664:	4310      	orrs	r0, r2
 800a666:	f84a 0b04 	str.w	r0, [sl], #4
 800a66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66e:	459c      	cmp	ip, r3
 800a670:	fa22 f20e 	lsr.w	r2, r2, lr
 800a674:	d8f3      	bhi.n	800a65e <__lshift+0x6e>
 800a676:	ebac 0304 	sub.w	r3, ip, r4
 800a67a:	3b15      	subs	r3, #21
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	3304      	adds	r3, #4
 800a682:	f104 0015 	add.w	r0, r4, #21
 800a686:	4560      	cmp	r0, ip
 800a688:	bf88      	it	hi
 800a68a:	2304      	movhi	r3, #4
 800a68c:	50ca      	str	r2, [r1, r3]
 800a68e:	b10a      	cbz	r2, 800a694 <__lshift+0xa4>
 800a690:	f108 0602 	add.w	r6, r8, #2
 800a694:	3e01      	subs	r6, #1
 800a696:	4638      	mov	r0, r7
 800a698:	4621      	mov	r1, r4
 800a69a:	612e      	str	r6, [r5, #16]
 800a69c:	f7ff fd98 	bl	800a1d0 <_Bfree>
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	e7c5      	b.n	800a63a <__lshift+0x4a>
 800a6ae:	3904      	subs	r1, #4
 800a6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b4:	459c      	cmp	ip, r3
 800a6b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6ba:	d8f9      	bhi.n	800a6b0 <__lshift+0xc0>
 800a6bc:	e7ea      	b.n	800a694 <__lshift+0xa4>
 800a6be:	bf00      	nop
 800a6c0:	0800ba38 	.word	0x0800ba38
 800a6c4:	0800bac0 	.word	0x0800bac0

0800a6c8 <__mcmp>:
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	690a      	ldr	r2, [r1, #16]
 800a6cc:	6900      	ldr	r0, [r0, #16]
 800a6ce:	b530      	push	{r4, r5, lr}
 800a6d0:	1a80      	subs	r0, r0, r2
 800a6d2:	d10e      	bne.n	800a6f2 <__mcmp+0x2a>
 800a6d4:	3314      	adds	r3, #20
 800a6d6:	3114      	adds	r1, #20
 800a6d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6e8:	4295      	cmp	r5, r2
 800a6ea:	d003      	beq.n	800a6f4 <__mcmp+0x2c>
 800a6ec:	d205      	bcs.n	800a6fa <__mcmp+0x32>
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f2:	bd30      	pop	{r4, r5, pc}
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	d3f3      	bcc.n	800a6e0 <__mcmp+0x18>
 800a6f8:	e7fb      	b.n	800a6f2 <__mcmp+0x2a>
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	e7f9      	b.n	800a6f2 <__mcmp+0x2a>
	...

0800a700 <__mdiff>:
 800a700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a704:	4689      	mov	r9, r1
 800a706:	4606      	mov	r6, r0
 800a708:	4611      	mov	r1, r2
 800a70a:	4648      	mov	r0, r9
 800a70c:	4614      	mov	r4, r2
 800a70e:	f7ff ffdb 	bl	800a6c8 <__mcmp>
 800a712:	1e05      	subs	r5, r0, #0
 800a714:	d112      	bne.n	800a73c <__mdiff+0x3c>
 800a716:	4629      	mov	r1, r5
 800a718:	4630      	mov	r0, r6
 800a71a:	f7ff fd19 	bl	800a150 <_Balloc>
 800a71e:	4602      	mov	r2, r0
 800a720:	b928      	cbnz	r0, 800a72e <__mdiff+0x2e>
 800a722:	f240 2137 	movw	r1, #567	@ 0x237
 800a726:	4b3e      	ldr	r3, [pc, #248]	@ (800a820 <__mdiff+0x120>)
 800a728:	483e      	ldr	r0, [pc, #248]	@ (800a824 <__mdiff+0x124>)
 800a72a:	f000 fd85 	bl	800b238 <__assert_func>
 800a72e:	2301      	movs	r3, #1
 800a730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a734:	4610      	mov	r0, r2
 800a736:	b003      	add	sp, #12
 800a738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	bfbc      	itt	lt
 800a73e:	464b      	movlt	r3, r9
 800a740:	46a1      	movlt	r9, r4
 800a742:	4630      	mov	r0, r6
 800a744:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a748:	bfba      	itte	lt
 800a74a:	461c      	movlt	r4, r3
 800a74c:	2501      	movlt	r5, #1
 800a74e:	2500      	movge	r5, #0
 800a750:	f7ff fcfe 	bl	800a150 <_Balloc>
 800a754:	4602      	mov	r2, r0
 800a756:	b918      	cbnz	r0, 800a760 <__mdiff+0x60>
 800a758:	f240 2145 	movw	r1, #581	@ 0x245
 800a75c:	4b30      	ldr	r3, [pc, #192]	@ (800a820 <__mdiff+0x120>)
 800a75e:	e7e3      	b.n	800a728 <__mdiff+0x28>
 800a760:	f100 0b14 	add.w	fp, r0, #20
 800a764:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a768:	f109 0310 	add.w	r3, r9, #16
 800a76c:	60c5      	str	r5, [r0, #12]
 800a76e:	f04f 0c00 	mov.w	ip, #0
 800a772:	f109 0514 	add.w	r5, r9, #20
 800a776:	46d9      	mov	r9, fp
 800a778:	6926      	ldr	r6, [r4, #16]
 800a77a:	f104 0e14 	add.w	lr, r4, #20
 800a77e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a782:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a786:	9301      	str	r3, [sp, #4]
 800a788:	9b01      	ldr	r3, [sp, #4]
 800a78a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a78e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a792:	b281      	uxth	r1, r0
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	fa1f f38a 	uxth.w	r3, sl
 800a79a:	1a5b      	subs	r3, r3, r1
 800a79c:	0c00      	lsrs	r0, r0, #16
 800a79e:	4463      	add	r3, ip
 800a7a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7ae:	4576      	cmp	r6, lr
 800a7b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7b4:	f849 3b04 	str.w	r3, [r9], #4
 800a7b8:	d8e6      	bhi.n	800a788 <__mdiff+0x88>
 800a7ba:	1b33      	subs	r3, r6, r4
 800a7bc:	3b15      	subs	r3, #21
 800a7be:	f023 0303 	bic.w	r3, r3, #3
 800a7c2:	3415      	adds	r4, #21
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	bf38      	it	cc
 800a7ca:	2304      	movcc	r3, #4
 800a7cc:	441d      	add	r5, r3
 800a7ce:	445b      	add	r3, fp
 800a7d0:	461e      	mov	r6, r3
 800a7d2:	462c      	mov	r4, r5
 800a7d4:	4544      	cmp	r4, r8
 800a7d6:	d30e      	bcc.n	800a7f6 <__mdiff+0xf6>
 800a7d8:	f108 0103 	add.w	r1, r8, #3
 800a7dc:	1b49      	subs	r1, r1, r5
 800a7de:	f021 0103 	bic.w	r1, r1, #3
 800a7e2:	3d03      	subs	r5, #3
 800a7e4:	45a8      	cmp	r8, r5
 800a7e6:	bf38      	it	cc
 800a7e8:	2100      	movcc	r1, #0
 800a7ea:	440b      	add	r3, r1
 800a7ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7f0:	b199      	cbz	r1, 800a81a <__mdiff+0x11a>
 800a7f2:	6117      	str	r7, [r2, #16]
 800a7f4:	e79e      	b.n	800a734 <__mdiff+0x34>
 800a7f6:	46e6      	mov	lr, ip
 800a7f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7fc:	fa1f fc81 	uxth.w	ip, r1
 800a800:	44f4      	add	ip, lr
 800a802:	0c08      	lsrs	r0, r1, #16
 800a804:	4471      	add	r1, lr
 800a806:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a80a:	b289      	uxth	r1, r1
 800a80c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a810:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a814:	f846 1b04 	str.w	r1, [r6], #4
 800a818:	e7dc      	b.n	800a7d4 <__mdiff+0xd4>
 800a81a:	3f01      	subs	r7, #1
 800a81c:	e7e6      	b.n	800a7ec <__mdiff+0xec>
 800a81e:	bf00      	nop
 800a820:	0800ba38 	.word	0x0800ba38
 800a824:	0800bac0 	.word	0x0800bac0

0800a828 <__ulp>:
 800a828:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <__ulp+0x3c>)
 800a82a:	400b      	ands	r3, r1
 800a82c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc08      	bgt.n	800a846 <__ulp+0x1e>
 800a834:	425b      	negs	r3, r3
 800a836:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a83a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a83e:	da04      	bge.n	800a84a <__ulp+0x22>
 800a840:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a844:	4113      	asrs	r3, r2
 800a846:	2200      	movs	r2, #0
 800a848:	e008      	b.n	800a85c <__ulp+0x34>
 800a84a:	f1a2 0314 	sub.w	r3, r2, #20
 800a84e:	2b1e      	cmp	r3, #30
 800a850:	bfd6      	itet	le
 800a852:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a856:	2201      	movgt	r2, #1
 800a858:	40da      	lsrle	r2, r3
 800a85a:	2300      	movs	r3, #0
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	7ff00000 	.word	0x7ff00000

0800a868 <__b2d>:
 800a868:	6902      	ldr	r2, [r0, #16]
 800a86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86c:	f100 0614 	add.w	r6, r0, #20
 800a870:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a874:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a878:	4f1e      	ldr	r7, [pc, #120]	@ (800a8f4 <__b2d+0x8c>)
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff fd5a 	bl	800a334 <__hi0bits>
 800a880:	4603      	mov	r3, r0
 800a882:	f1c0 0020 	rsb	r0, r0, #32
 800a886:	2b0a      	cmp	r3, #10
 800a888:	f1a2 0504 	sub.w	r5, r2, #4
 800a88c:	6008      	str	r0, [r1, #0]
 800a88e:	dc12      	bgt.n	800a8b6 <__b2d+0x4e>
 800a890:	42ae      	cmp	r6, r5
 800a892:	bf2c      	ite	cs
 800a894:	2200      	movcs	r2, #0
 800a896:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a89a:	f1c3 0c0b 	rsb	ip, r3, #11
 800a89e:	3315      	adds	r3, #21
 800a8a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a8a4:	fa04 f303 	lsl.w	r3, r4, r3
 800a8a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800a8ac:	ea4e 0107 	orr.w	r1, lr, r7
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b6:	42ae      	cmp	r6, r5
 800a8b8:	bf36      	itet	cc
 800a8ba:	f1a2 0508 	subcc.w	r5, r2, #8
 800a8be:	2200      	movcs	r2, #0
 800a8c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a8c4:	3b0b      	subs	r3, #11
 800a8c6:	d012      	beq.n	800a8ee <__b2d+0x86>
 800a8c8:	f1c3 0720 	rsb	r7, r3, #32
 800a8cc:	fa22 f107 	lsr.w	r1, r2, r7
 800a8d0:	409c      	lsls	r4, r3
 800a8d2:	430c      	orrs	r4, r1
 800a8d4:	42b5      	cmp	r5, r6
 800a8d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a8da:	bf94      	ite	ls
 800a8dc:	2400      	movls	r4, #0
 800a8de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a8e2:	409a      	lsls	r2, r3
 800a8e4:	40fc      	lsrs	r4, r7
 800a8e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a8ea:	4322      	orrs	r2, r4
 800a8ec:	e7e1      	b.n	800a8b2 <__b2d+0x4a>
 800a8ee:	ea44 0107 	orr.w	r1, r4, r7
 800a8f2:	e7de      	b.n	800a8b2 <__b2d+0x4a>
 800a8f4:	3ff00000 	.word	0x3ff00000

0800a8f8 <__d2b>:
 800a8f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	4690      	mov	r8, r2
 800a900:	4699      	mov	r9, r3
 800a902:	9e08      	ldr	r6, [sp, #32]
 800a904:	f7ff fc24 	bl	800a150 <_Balloc>
 800a908:	4604      	mov	r4, r0
 800a90a:	b930      	cbnz	r0, 800a91a <__d2b+0x22>
 800a90c:	4602      	mov	r2, r0
 800a90e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a912:	4b23      	ldr	r3, [pc, #140]	@ (800a9a0 <__d2b+0xa8>)
 800a914:	4823      	ldr	r0, [pc, #140]	@ (800a9a4 <__d2b+0xac>)
 800a916:	f000 fc8f 	bl	800b238 <__assert_func>
 800a91a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a91e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a922:	b10d      	cbz	r5, 800a928 <__d2b+0x30>
 800a924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	f1b8 0300 	subs.w	r3, r8, #0
 800a92e:	d024      	beq.n	800a97a <__d2b+0x82>
 800a930:	4668      	mov	r0, sp
 800a932:	9300      	str	r3, [sp, #0]
 800a934:	f7ff fd1d 	bl	800a372 <__lo0bits>
 800a938:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a93c:	b1d8      	cbz	r0, 800a976 <__d2b+0x7e>
 800a93e:	f1c0 0320 	rsb	r3, r0, #32
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	430b      	orrs	r3, r1
 800a948:	40c2      	lsrs	r2, r0
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	9201      	str	r2, [sp, #4]
 800a94e:	9b01      	ldr	r3, [sp, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	bf0c      	ite	eq
 800a954:	2201      	moveq	r2, #1
 800a956:	2202      	movne	r2, #2
 800a958:	61a3      	str	r3, [r4, #24]
 800a95a:	6122      	str	r2, [r4, #16]
 800a95c:	b1ad      	cbz	r5, 800a98a <__d2b+0x92>
 800a95e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a962:	4405      	add	r5, r0
 800a964:	6035      	str	r5, [r6, #0]
 800a966:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a96c:	6018      	str	r0, [r3, #0]
 800a96e:	4620      	mov	r0, r4
 800a970:	b002      	add	sp, #8
 800a972:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a976:	6161      	str	r1, [r4, #20]
 800a978:	e7e9      	b.n	800a94e <__d2b+0x56>
 800a97a:	a801      	add	r0, sp, #4
 800a97c:	f7ff fcf9 	bl	800a372 <__lo0bits>
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	6163      	str	r3, [r4, #20]
 800a986:	3020      	adds	r0, #32
 800a988:	e7e7      	b.n	800a95a <__d2b+0x62>
 800a98a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a98e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a992:	6030      	str	r0, [r6, #0]
 800a994:	6918      	ldr	r0, [r3, #16]
 800a996:	f7ff fccd 	bl	800a334 <__hi0bits>
 800a99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a99e:	e7e4      	b.n	800a96a <__d2b+0x72>
 800a9a0:	0800ba38 	.word	0x0800ba38
 800a9a4:	0800bac0 	.word	0x0800bac0

0800a9a8 <__ratio>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	e9cd 1000 	strd	r1, r0, [sp]
 800a9b2:	a902      	add	r1, sp, #8
 800a9b4:	f7ff ff58 	bl	800a868 <__b2d>
 800a9b8:	468b      	mov	fp, r1
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460f      	mov	r7, r1
 800a9be:	9800      	ldr	r0, [sp, #0]
 800a9c0:	a903      	add	r1, sp, #12
 800a9c2:	f7ff ff51 	bl	800a868 <__b2d>
 800a9c6:	460d      	mov	r5, r1
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	4689      	mov	r9, r1
 800a9cc:	6919      	ldr	r1, [r3, #16]
 800a9ce:	9b00      	ldr	r3, [sp, #0]
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	1ac9      	subs	r1, r1, r3
 800a9d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	bfcd      	iteet	gt
 800a9e6:	463a      	movgt	r2, r7
 800a9e8:	462a      	movle	r2, r5
 800a9ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a9f2:	bfd8      	it	le
 800a9f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	f7f5 fe95 	bl	800072c <__aeabi_ddiv>
 800aa02:	b005      	add	sp, #20
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa08 <__copybits>:
 800aa08:	3901      	subs	r1, #1
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	1149      	asrs	r1, r1, #5
 800aa0e:	6914      	ldr	r4, [r2, #16]
 800aa10:	3101      	adds	r1, #1
 800aa12:	f102 0314 	add.w	r3, r2, #20
 800aa16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa1e:	1f05      	subs	r5, r0, #4
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d30c      	bcc.n	800aa3e <__copybits+0x36>
 800aa24:	1aa3      	subs	r3, r4, r2
 800aa26:	3b11      	subs	r3, #17
 800aa28:	f023 0303 	bic.w	r3, r3, #3
 800aa2c:	3211      	adds	r2, #17
 800aa2e:	42a2      	cmp	r2, r4
 800aa30:	bf88      	it	hi
 800aa32:	2300      	movhi	r3, #0
 800aa34:	4418      	add	r0, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	4288      	cmp	r0, r1
 800aa3a:	d305      	bcc.n	800aa48 <__copybits+0x40>
 800aa3c:	bd70      	pop	{r4, r5, r6, pc}
 800aa3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa42:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa46:	e7eb      	b.n	800aa20 <__copybits+0x18>
 800aa48:	f840 3b04 	str.w	r3, [r0], #4
 800aa4c:	e7f4      	b.n	800aa38 <__copybits+0x30>

0800aa4e <__any_on>:
 800aa4e:	f100 0214 	add.w	r2, r0, #20
 800aa52:	6900      	ldr	r0, [r0, #16]
 800aa54:	114b      	asrs	r3, r1, #5
 800aa56:	4298      	cmp	r0, r3
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	db11      	blt.n	800aa80 <__any_on+0x32>
 800aa5c:	dd0a      	ble.n	800aa74 <__any_on+0x26>
 800aa5e:	f011 011f 	ands.w	r1, r1, #31
 800aa62:	d007      	beq.n	800aa74 <__any_on+0x26>
 800aa64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa68:	fa24 f001 	lsr.w	r0, r4, r1
 800aa6c:	fa00 f101 	lsl.w	r1, r0, r1
 800aa70:	428c      	cmp	r4, r1
 800aa72:	d10b      	bne.n	800aa8c <__any_on+0x3e>
 800aa74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d803      	bhi.n	800aa84 <__any_on+0x36>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	bd10      	pop	{r4, pc}
 800aa80:	4603      	mov	r3, r0
 800aa82:	e7f7      	b.n	800aa74 <__any_on+0x26>
 800aa84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa88:	2900      	cmp	r1, #0
 800aa8a:	d0f5      	beq.n	800aa78 <__any_on+0x2a>
 800aa8c:	2001      	movs	r0, #1
 800aa8e:	e7f6      	b.n	800aa7e <__any_on+0x30>

0800aa90 <__ascii_wctomb>:
 800aa90:	4603      	mov	r3, r0
 800aa92:	4608      	mov	r0, r1
 800aa94:	b141      	cbz	r1, 800aaa8 <__ascii_wctomb+0x18>
 800aa96:	2aff      	cmp	r2, #255	@ 0xff
 800aa98:	d904      	bls.n	800aaa4 <__ascii_wctomb+0x14>
 800aa9a:	228a      	movs	r2, #138	@ 0x8a
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	4770      	bx	lr
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	700a      	strb	r2, [r1, #0]
 800aaa8:	4770      	bx	lr

0800aaaa <__ssputs_r>:
 800aaaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaae:	461f      	mov	r7, r3
 800aab0:	688e      	ldr	r6, [r1, #8]
 800aab2:	4682      	mov	sl, r0
 800aab4:	42be      	cmp	r6, r7
 800aab6:	460c      	mov	r4, r1
 800aab8:	4690      	mov	r8, r2
 800aaba:	680b      	ldr	r3, [r1, #0]
 800aabc:	d82d      	bhi.n	800ab1a <__ssputs_r+0x70>
 800aabe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aac6:	d026      	beq.n	800ab16 <__ssputs_r+0x6c>
 800aac8:	6965      	ldr	r5, [r4, #20]
 800aaca:	6909      	ldr	r1, [r1, #16]
 800aacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aad0:	eba3 0901 	sub.w	r9, r3, r1
 800aad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aad8:	1c7b      	adds	r3, r7, #1
 800aada:	444b      	add	r3, r9
 800aadc:	106d      	asrs	r5, r5, #1
 800aade:	429d      	cmp	r5, r3
 800aae0:	bf38      	it	cc
 800aae2:	461d      	movcc	r5, r3
 800aae4:	0553      	lsls	r3, r2, #21
 800aae6:	d527      	bpl.n	800ab38 <__ssputs_r+0x8e>
 800aae8:	4629      	mov	r1, r5
 800aaea:	f7ff fa93 	bl	800a014 <_malloc_r>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	b360      	cbz	r0, 800ab4c <__ssputs_r+0xa2>
 800aaf2:	464a      	mov	r2, r9
 800aaf4:	6921      	ldr	r1, [r4, #16]
 800aaf6:	f7fe fed4 	bl	80098a2 <memcpy>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	6126      	str	r6, [r4, #16]
 800ab08:	444e      	add	r6, r9
 800ab0a:	6026      	str	r6, [r4, #0]
 800ab0c:	463e      	mov	r6, r7
 800ab0e:	6165      	str	r5, [r4, #20]
 800ab10:	eba5 0509 	sub.w	r5, r5, r9
 800ab14:	60a5      	str	r5, [r4, #8]
 800ab16:	42be      	cmp	r6, r7
 800ab18:	d900      	bls.n	800ab1c <__ssputs_r+0x72>
 800ab1a:	463e      	mov	r6, r7
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	4641      	mov	r1, r8
 800ab20:	6820      	ldr	r0, [r4, #0]
 800ab22:	f000 fb51 	bl	800b1c8 <memmove>
 800ab26:	2000      	movs	r0, #0
 800ab28:	68a3      	ldr	r3, [r4, #8]
 800ab2a:	1b9b      	subs	r3, r3, r6
 800ab2c:	60a3      	str	r3, [r4, #8]
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	4433      	add	r3, r6
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab38:	462a      	mov	r2, r5
 800ab3a:	f000 fbb7 	bl	800b2ac <_realloc_r>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d1e0      	bne.n	800ab06 <__ssputs_r+0x5c>
 800ab44:	4650      	mov	r0, sl
 800ab46:	6921      	ldr	r1, [r4, #16]
 800ab48:	f7fe fec0 	bl	80098cc <_free_r>
 800ab4c:	230c      	movs	r3, #12
 800ab4e:	f8ca 3000 	str.w	r3, [sl]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	81a3      	strh	r3, [r4, #12]
 800ab5e:	e7e9      	b.n	800ab34 <__ssputs_r+0x8a>

0800ab60 <_svfiprintf_r>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4698      	mov	r8, r3
 800ab66:	898b      	ldrh	r3, [r1, #12]
 800ab68:	4607      	mov	r7, r0
 800ab6a:	061b      	lsls	r3, r3, #24
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	4614      	mov	r4, r2
 800ab70:	b09d      	sub	sp, #116	@ 0x74
 800ab72:	d510      	bpl.n	800ab96 <_svfiprintf_r+0x36>
 800ab74:	690b      	ldr	r3, [r1, #16]
 800ab76:	b973      	cbnz	r3, 800ab96 <_svfiprintf_r+0x36>
 800ab78:	2140      	movs	r1, #64	@ 0x40
 800ab7a:	f7ff fa4b 	bl	800a014 <_malloc_r>
 800ab7e:	6028      	str	r0, [r5, #0]
 800ab80:	6128      	str	r0, [r5, #16]
 800ab82:	b930      	cbnz	r0, 800ab92 <_svfiprintf_r+0x32>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	b01d      	add	sp, #116	@ 0x74
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	2340      	movs	r3, #64	@ 0x40
 800ab94:	616b      	str	r3, [r5, #20]
 800ab96:	2300      	movs	r3, #0
 800ab98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab9a:	2320      	movs	r3, #32
 800ab9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba0:	2330      	movs	r3, #48	@ 0x30
 800aba2:	f04f 0901 	mov.w	r9, #1
 800aba6:	f8cd 800c 	str.w	r8, [sp, #12]
 800abaa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ad44 <_svfiprintf_r+0x1e4>
 800abae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abb2:	4623      	mov	r3, r4
 800abb4:	469a      	mov	sl, r3
 800abb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abba:	b10a      	cbz	r2, 800abc0 <_svfiprintf_r+0x60>
 800abbc:	2a25      	cmp	r2, #37	@ 0x25
 800abbe:	d1f9      	bne.n	800abb4 <_svfiprintf_r+0x54>
 800abc0:	ebba 0b04 	subs.w	fp, sl, r4
 800abc4:	d00b      	beq.n	800abde <_svfiprintf_r+0x7e>
 800abc6:	465b      	mov	r3, fp
 800abc8:	4622      	mov	r2, r4
 800abca:	4629      	mov	r1, r5
 800abcc:	4638      	mov	r0, r7
 800abce:	f7ff ff6c 	bl	800aaaa <__ssputs_r>
 800abd2:	3001      	adds	r0, #1
 800abd4:	f000 80a7 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abda:	445a      	add	r2, fp
 800abdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800abde:	f89a 3000 	ldrb.w	r3, [sl]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 809f 	beq.w	800ad26 <_svfiprintf_r+0x1c6>
 800abe8:	2300      	movs	r3, #0
 800abea:	f04f 32ff 	mov.w	r2, #4294967295
 800abee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abf2:	f10a 0a01 	add.w	sl, sl, #1
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	9307      	str	r3, [sp, #28]
 800abfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abfe:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac00:	4654      	mov	r4, sl
 800ac02:	2205      	movs	r2, #5
 800ac04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac08:	484e      	ldr	r0, [pc, #312]	@ (800ad44 <_svfiprintf_r+0x1e4>)
 800ac0a:	f000 fb07 	bl	800b21c <memchr>
 800ac0e:	9a04      	ldr	r2, [sp, #16]
 800ac10:	b9d8      	cbnz	r0, 800ac4a <_svfiprintf_r+0xea>
 800ac12:	06d0      	lsls	r0, r2, #27
 800ac14:	bf44      	itt	mi
 800ac16:	2320      	movmi	r3, #32
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac1c:	0711      	lsls	r1, r2, #28
 800ac1e:	bf44      	itt	mi
 800ac20:	232b      	movmi	r3, #43	@ 0x2b
 800ac22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac26:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2c:	d015      	beq.n	800ac5a <_svfiprintf_r+0xfa>
 800ac2e:	4654      	mov	r4, sl
 800ac30:	2000      	movs	r0, #0
 800ac32:	f04f 0c0a 	mov.w	ip, #10
 800ac36:	9a07      	ldr	r2, [sp, #28]
 800ac38:	4621      	mov	r1, r4
 800ac3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3e:	3b30      	subs	r3, #48	@ 0x30
 800ac40:	2b09      	cmp	r3, #9
 800ac42:	d94b      	bls.n	800acdc <_svfiprintf_r+0x17c>
 800ac44:	b1b0      	cbz	r0, 800ac74 <_svfiprintf_r+0x114>
 800ac46:	9207      	str	r2, [sp, #28]
 800ac48:	e014      	b.n	800ac74 <_svfiprintf_r+0x114>
 800ac4a:	eba0 0308 	sub.w	r3, r0, r8
 800ac4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ac52:	4313      	orrs	r3, r2
 800ac54:	46a2      	mov	sl, r4
 800ac56:	9304      	str	r3, [sp, #16]
 800ac58:	e7d2      	b.n	800ac00 <_svfiprintf_r+0xa0>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	1d19      	adds	r1, r3, #4
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	9103      	str	r1, [sp, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	bfbb      	ittet	lt
 800ac66:	425b      	neglt	r3, r3
 800ac68:	f042 0202 	orrlt.w	r2, r2, #2
 800ac6c:	9307      	strge	r3, [sp, #28]
 800ac6e:	9307      	strlt	r3, [sp, #28]
 800ac70:	bfb8      	it	lt
 800ac72:	9204      	strlt	r2, [sp, #16]
 800ac74:	7823      	ldrb	r3, [r4, #0]
 800ac76:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac78:	d10a      	bne.n	800ac90 <_svfiprintf_r+0x130>
 800ac7a:	7863      	ldrb	r3, [r4, #1]
 800ac7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac7e:	d132      	bne.n	800ace6 <_svfiprintf_r+0x186>
 800ac80:	9b03      	ldr	r3, [sp, #12]
 800ac82:	3402      	adds	r4, #2
 800ac84:	1d1a      	adds	r2, r3, #4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	9203      	str	r2, [sp, #12]
 800ac8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac8e:	9305      	str	r3, [sp, #20]
 800ac90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ad48 <_svfiprintf_r+0x1e8>
 800ac94:	2203      	movs	r2, #3
 800ac96:	4650      	mov	r0, sl
 800ac98:	7821      	ldrb	r1, [r4, #0]
 800ac9a:	f000 fabf 	bl	800b21c <memchr>
 800ac9e:	b138      	cbz	r0, 800acb0 <_svfiprintf_r+0x150>
 800aca0:	2240      	movs	r2, #64	@ 0x40
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	eba0 000a 	sub.w	r0, r0, sl
 800aca8:	4082      	lsls	r2, r0
 800acaa:	4313      	orrs	r3, r2
 800acac:	3401      	adds	r4, #1
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb4:	2206      	movs	r2, #6
 800acb6:	4825      	ldr	r0, [pc, #148]	@ (800ad4c <_svfiprintf_r+0x1ec>)
 800acb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acbc:	f000 faae 	bl	800b21c <memchr>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d036      	beq.n	800ad32 <_svfiprintf_r+0x1d2>
 800acc4:	4b22      	ldr	r3, [pc, #136]	@ (800ad50 <_svfiprintf_r+0x1f0>)
 800acc6:	bb1b      	cbnz	r3, 800ad10 <_svfiprintf_r+0x1b0>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	3307      	adds	r3, #7
 800accc:	f023 0307 	bic.w	r3, r3, #7
 800acd0:	3308      	adds	r3, #8
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd6:	4433      	add	r3, r6
 800acd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800acda:	e76a      	b.n	800abb2 <_svfiprintf_r+0x52>
 800acdc:	460c      	mov	r4, r1
 800acde:	2001      	movs	r0, #1
 800ace0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ace4:	e7a8      	b.n	800ac38 <_svfiprintf_r+0xd8>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4619      	mov	r1, r3
 800acee:	3401      	adds	r4, #1
 800acf0:	9305      	str	r3, [sp, #20]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf8:	3a30      	subs	r2, #48	@ 0x30
 800acfa:	2a09      	cmp	r2, #9
 800acfc:	d903      	bls.n	800ad06 <_svfiprintf_r+0x1a6>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c6      	beq.n	800ac90 <_svfiprintf_r+0x130>
 800ad02:	9105      	str	r1, [sp, #20]
 800ad04:	e7c4      	b.n	800ac90 <_svfiprintf_r+0x130>
 800ad06:	4604      	mov	r4, r0
 800ad08:	2301      	movs	r3, #1
 800ad0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad0e:	e7f0      	b.n	800acf2 <_svfiprintf_r+0x192>
 800ad10:	ab03      	add	r3, sp, #12
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	462a      	mov	r2, r5
 800ad16:	4638      	mov	r0, r7
 800ad18:	4b0e      	ldr	r3, [pc, #56]	@ (800ad54 <_svfiprintf_r+0x1f4>)
 800ad1a:	a904      	add	r1, sp, #16
 800ad1c:	f3af 8000 	nop.w
 800ad20:	1c42      	adds	r2, r0, #1
 800ad22:	4606      	mov	r6, r0
 800ad24:	d1d6      	bne.n	800acd4 <_svfiprintf_r+0x174>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	065b      	lsls	r3, r3, #25
 800ad2a:	f53f af2d 	bmi.w	800ab88 <_svfiprintf_r+0x28>
 800ad2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad30:	e72c      	b.n	800ab8c <_svfiprintf_r+0x2c>
 800ad32:	ab03      	add	r3, sp, #12
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	462a      	mov	r2, r5
 800ad38:	4638      	mov	r0, r7
 800ad3a:	4b06      	ldr	r3, [pc, #24]	@ (800ad54 <_svfiprintf_r+0x1f4>)
 800ad3c:	a904      	add	r1, sp, #16
 800ad3e:	f000 f87d 	bl	800ae3c <_printf_i>
 800ad42:	e7ed      	b.n	800ad20 <_svfiprintf_r+0x1c0>
 800ad44:	0800bb19 	.word	0x0800bb19
 800ad48:	0800bb1f 	.word	0x0800bb1f
 800ad4c:	0800bb23 	.word	0x0800bb23
 800ad50:	00000000 	.word	0x00000000
 800ad54:	0800aaab 	.word	0x0800aaab

0800ad58 <_printf_common>:
 800ad58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5c:	4616      	mov	r6, r2
 800ad5e:	4698      	mov	r8, r3
 800ad60:	688a      	ldr	r2, [r1, #8]
 800ad62:	690b      	ldr	r3, [r1, #16]
 800ad64:	4607      	mov	r7, r0
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bfb8      	it	lt
 800ad6a:	4613      	movlt	r3, r2
 800ad6c:	6033      	str	r3, [r6, #0]
 800ad6e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad72:	460c      	mov	r4, r1
 800ad74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad78:	b10a      	cbz	r2, 800ad7e <_printf_common+0x26>
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	6033      	str	r3, [r6, #0]
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	0699      	lsls	r1, r3, #26
 800ad82:	bf42      	ittt	mi
 800ad84:	6833      	ldrmi	r3, [r6, #0]
 800ad86:	3302      	addmi	r3, #2
 800ad88:	6033      	strmi	r3, [r6, #0]
 800ad8a:	6825      	ldr	r5, [r4, #0]
 800ad8c:	f015 0506 	ands.w	r5, r5, #6
 800ad90:	d106      	bne.n	800ada0 <_printf_common+0x48>
 800ad92:	f104 0a19 	add.w	sl, r4, #25
 800ad96:	68e3      	ldr	r3, [r4, #12]
 800ad98:	6832      	ldr	r2, [r6, #0]
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	42ab      	cmp	r3, r5
 800ad9e:	dc2b      	bgt.n	800adf8 <_printf_common+0xa0>
 800ada0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ada4:	6822      	ldr	r2, [r4, #0]
 800ada6:	3b00      	subs	r3, #0
 800ada8:	bf18      	it	ne
 800adaa:	2301      	movne	r3, #1
 800adac:	0692      	lsls	r2, r2, #26
 800adae:	d430      	bmi.n	800ae12 <_printf_common+0xba>
 800adb0:	4641      	mov	r1, r8
 800adb2:	4638      	mov	r0, r7
 800adb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adb8:	47c8      	blx	r9
 800adba:	3001      	adds	r0, #1
 800adbc:	d023      	beq.n	800ae06 <_printf_common+0xae>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	6922      	ldr	r2, [r4, #16]
 800adc2:	f003 0306 	and.w	r3, r3, #6
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	bf14      	ite	ne
 800adca:	2500      	movne	r5, #0
 800adcc:	6833      	ldreq	r3, [r6, #0]
 800adce:	f04f 0600 	mov.w	r6, #0
 800add2:	bf08      	it	eq
 800add4:	68e5      	ldreq	r5, [r4, #12]
 800add6:	f104 041a 	add.w	r4, r4, #26
 800adda:	bf08      	it	eq
 800addc:	1aed      	subeq	r5, r5, r3
 800adde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ade2:	bf08      	it	eq
 800ade4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ade8:	4293      	cmp	r3, r2
 800adea:	bfc4      	itt	gt
 800adec:	1a9b      	subgt	r3, r3, r2
 800adee:	18ed      	addgt	r5, r5, r3
 800adf0:	42b5      	cmp	r5, r6
 800adf2:	d11a      	bne.n	800ae2a <_printf_common+0xd2>
 800adf4:	2000      	movs	r0, #0
 800adf6:	e008      	b.n	800ae0a <_printf_common+0xb2>
 800adf8:	2301      	movs	r3, #1
 800adfa:	4652      	mov	r2, sl
 800adfc:	4641      	mov	r1, r8
 800adfe:	4638      	mov	r0, r7
 800ae00:	47c8      	blx	r9
 800ae02:	3001      	adds	r0, #1
 800ae04:	d103      	bne.n	800ae0e <_printf_common+0xb6>
 800ae06:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0e:	3501      	adds	r5, #1
 800ae10:	e7c1      	b.n	800ad96 <_printf_common+0x3e>
 800ae12:	2030      	movs	r0, #48	@ 0x30
 800ae14:	18e1      	adds	r1, r4, r3
 800ae16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae20:	4422      	add	r2, r4
 800ae22:	3302      	adds	r3, #2
 800ae24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae28:	e7c2      	b.n	800adb0 <_printf_common+0x58>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4641      	mov	r1, r8
 800ae30:	4638      	mov	r0, r7
 800ae32:	47c8      	blx	r9
 800ae34:	3001      	adds	r0, #1
 800ae36:	d0e6      	beq.n	800ae06 <_printf_common+0xae>
 800ae38:	3601      	adds	r6, #1
 800ae3a:	e7d9      	b.n	800adf0 <_printf_common+0x98>

0800ae3c <_printf_i>:
 800ae3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	7e0f      	ldrb	r7, [r1, #24]
 800ae42:	4691      	mov	r9, r2
 800ae44:	2f78      	cmp	r7, #120	@ 0x78
 800ae46:	4680      	mov	r8, r0
 800ae48:	460c      	mov	r4, r1
 800ae4a:	469a      	mov	sl, r3
 800ae4c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae52:	d807      	bhi.n	800ae64 <_printf_i+0x28>
 800ae54:	2f62      	cmp	r7, #98	@ 0x62
 800ae56:	d80a      	bhi.n	800ae6e <_printf_i+0x32>
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	f000 80d1 	beq.w	800b000 <_printf_i+0x1c4>
 800ae5e:	2f58      	cmp	r7, #88	@ 0x58
 800ae60:	f000 80b8 	beq.w	800afd4 <_printf_i+0x198>
 800ae64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae6c:	e03a      	b.n	800aee4 <_printf_i+0xa8>
 800ae6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae72:	2b15      	cmp	r3, #21
 800ae74:	d8f6      	bhi.n	800ae64 <_printf_i+0x28>
 800ae76:	a101      	add	r1, pc, #4	@ (adr r1, 800ae7c <_printf_i+0x40>)
 800ae78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae7c:	0800aed5 	.word	0x0800aed5
 800ae80:	0800aee9 	.word	0x0800aee9
 800ae84:	0800ae65 	.word	0x0800ae65
 800ae88:	0800ae65 	.word	0x0800ae65
 800ae8c:	0800ae65 	.word	0x0800ae65
 800ae90:	0800ae65 	.word	0x0800ae65
 800ae94:	0800aee9 	.word	0x0800aee9
 800ae98:	0800ae65 	.word	0x0800ae65
 800ae9c:	0800ae65 	.word	0x0800ae65
 800aea0:	0800ae65 	.word	0x0800ae65
 800aea4:	0800ae65 	.word	0x0800ae65
 800aea8:	0800afe7 	.word	0x0800afe7
 800aeac:	0800af13 	.word	0x0800af13
 800aeb0:	0800afa1 	.word	0x0800afa1
 800aeb4:	0800ae65 	.word	0x0800ae65
 800aeb8:	0800ae65 	.word	0x0800ae65
 800aebc:	0800b009 	.word	0x0800b009
 800aec0:	0800ae65 	.word	0x0800ae65
 800aec4:	0800af13 	.word	0x0800af13
 800aec8:	0800ae65 	.word	0x0800ae65
 800aecc:	0800ae65 	.word	0x0800ae65
 800aed0:	0800afa9 	.word	0x0800afa9
 800aed4:	6833      	ldr	r3, [r6, #0]
 800aed6:	1d1a      	adds	r2, r3, #4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6032      	str	r2, [r6, #0]
 800aedc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aee0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aee4:	2301      	movs	r3, #1
 800aee6:	e09c      	b.n	800b022 <_printf_i+0x1e6>
 800aee8:	6833      	ldr	r3, [r6, #0]
 800aeea:	6820      	ldr	r0, [r4, #0]
 800aeec:	1d19      	adds	r1, r3, #4
 800aeee:	6031      	str	r1, [r6, #0]
 800aef0:	0606      	lsls	r6, r0, #24
 800aef2:	d501      	bpl.n	800aef8 <_printf_i+0xbc>
 800aef4:	681d      	ldr	r5, [r3, #0]
 800aef6:	e003      	b.n	800af00 <_printf_i+0xc4>
 800aef8:	0645      	lsls	r5, r0, #25
 800aefa:	d5fb      	bpl.n	800aef4 <_printf_i+0xb8>
 800aefc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af00:	2d00      	cmp	r5, #0
 800af02:	da03      	bge.n	800af0c <_printf_i+0xd0>
 800af04:	232d      	movs	r3, #45	@ 0x2d
 800af06:	426d      	negs	r5, r5
 800af08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af0c:	230a      	movs	r3, #10
 800af0e:	4858      	ldr	r0, [pc, #352]	@ (800b070 <_printf_i+0x234>)
 800af10:	e011      	b.n	800af36 <_printf_i+0xfa>
 800af12:	6821      	ldr	r1, [r4, #0]
 800af14:	6833      	ldr	r3, [r6, #0]
 800af16:	0608      	lsls	r0, r1, #24
 800af18:	f853 5b04 	ldr.w	r5, [r3], #4
 800af1c:	d402      	bmi.n	800af24 <_printf_i+0xe8>
 800af1e:	0649      	lsls	r1, r1, #25
 800af20:	bf48      	it	mi
 800af22:	b2ad      	uxthmi	r5, r5
 800af24:	2f6f      	cmp	r7, #111	@ 0x6f
 800af26:	6033      	str	r3, [r6, #0]
 800af28:	bf14      	ite	ne
 800af2a:	230a      	movne	r3, #10
 800af2c:	2308      	moveq	r3, #8
 800af2e:	4850      	ldr	r0, [pc, #320]	@ (800b070 <_printf_i+0x234>)
 800af30:	2100      	movs	r1, #0
 800af32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af36:	6866      	ldr	r6, [r4, #4]
 800af38:	2e00      	cmp	r6, #0
 800af3a:	60a6      	str	r6, [r4, #8]
 800af3c:	db05      	blt.n	800af4a <_printf_i+0x10e>
 800af3e:	6821      	ldr	r1, [r4, #0]
 800af40:	432e      	orrs	r6, r5
 800af42:	f021 0104 	bic.w	r1, r1, #4
 800af46:	6021      	str	r1, [r4, #0]
 800af48:	d04b      	beq.n	800afe2 <_printf_i+0x1a6>
 800af4a:	4616      	mov	r6, r2
 800af4c:	fbb5 f1f3 	udiv	r1, r5, r3
 800af50:	fb03 5711 	mls	r7, r3, r1, r5
 800af54:	5dc7      	ldrb	r7, [r0, r7]
 800af56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af5a:	462f      	mov	r7, r5
 800af5c:	42bb      	cmp	r3, r7
 800af5e:	460d      	mov	r5, r1
 800af60:	d9f4      	bls.n	800af4c <_printf_i+0x110>
 800af62:	2b08      	cmp	r3, #8
 800af64:	d10b      	bne.n	800af7e <_printf_i+0x142>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	07df      	lsls	r7, r3, #31
 800af6a:	d508      	bpl.n	800af7e <_printf_i+0x142>
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	6861      	ldr	r1, [r4, #4]
 800af70:	4299      	cmp	r1, r3
 800af72:	bfde      	ittt	le
 800af74:	2330      	movle	r3, #48	@ 0x30
 800af76:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af7e:	1b92      	subs	r2, r2, r6
 800af80:	6122      	str	r2, [r4, #16]
 800af82:	464b      	mov	r3, r9
 800af84:	4621      	mov	r1, r4
 800af86:	4640      	mov	r0, r8
 800af88:	f8cd a000 	str.w	sl, [sp]
 800af8c:	aa03      	add	r2, sp, #12
 800af8e:	f7ff fee3 	bl	800ad58 <_printf_common>
 800af92:	3001      	adds	r0, #1
 800af94:	d14a      	bne.n	800b02c <_printf_i+0x1f0>
 800af96:	f04f 30ff 	mov.w	r0, #4294967295
 800af9a:	b004      	add	sp, #16
 800af9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	f043 0320 	orr.w	r3, r3, #32
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	2778      	movs	r7, #120	@ 0x78
 800afaa:	4832      	ldr	r0, [pc, #200]	@ (800b074 <_printf_i+0x238>)
 800afac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	6831      	ldr	r1, [r6, #0]
 800afb4:	061f      	lsls	r7, r3, #24
 800afb6:	f851 5b04 	ldr.w	r5, [r1], #4
 800afba:	d402      	bmi.n	800afc2 <_printf_i+0x186>
 800afbc:	065f      	lsls	r7, r3, #25
 800afbe:	bf48      	it	mi
 800afc0:	b2ad      	uxthmi	r5, r5
 800afc2:	6031      	str	r1, [r6, #0]
 800afc4:	07d9      	lsls	r1, r3, #31
 800afc6:	bf44      	itt	mi
 800afc8:	f043 0320 	orrmi.w	r3, r3, #32
 800afcc:	6023      	strmi	r3, [r4, #0]
 800afce:	b11d      	cbz	r5, 800afd8 <_printf_i+0x19c>
 800afd0:	2310      	movs	r3, #16
 800afd2:	e7ad      	b.n	800af30 <_printf_i+0xf4>
 800afd4:	4826      	ldr	r0, [pc, #152]	@ (800b070 <_printf_i+0x234>)
 800afd6:	e7e9      	b.n	800afac <_printf_i+0x170>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	f023 0320 	bic.w	r3, r3, #32
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	e7f6      	b.n	800afd0 <_printf_i+0x194>
 800afe2:	4616      	mov	r6, r2
 800afe4:	e7bd      	b.n	800af62 <_printf_i+0x126>
 800afe6:	6833      	ldr	r3, [r6, #0]
 800afe8:	6825      	ldr	r5, [r4, #0]
 800afea:	1d18      	adds	r0, r3, #4
 800afec:	6961      	ldr	r1, [r4, #20]
 800afee:	6030      	str	r0, [r6, #0]
 800aff0:	062e      	lsls	r6, r5, #24
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	d501      	bpl.n	800affa <_printf_i+0x1be>
 800aff6:	6019      	str	r1, [r3, #0]
 800aff8:	e002      	b.n	800b000 <_printf_i+0x1c4>
 800affa:	0668      	lsls	r0, r5, #25
 800affc:	d5fb      	bpl.n	800aff6 <_printf_i+0x1ba>
 800affe:	8019      	strh	r1, [r3, #0]
 800b000:	2300      	movs	r3, #0
 800b002:	4616      	mov	r6, r2
 800b004:	6123      	str	r3, [r4, #16]
 800b006:	e7bc      	b.n	800af82 <_printf_i+0x146>
 800b008:	6833      	ldr	r3, [r6, #0]
 800b00a:	2100      	movs	r1, #0
 800b00c:	1d1a      	adds	r2, r3, #4
 800b00e:	6032      	str	r2, [r6, #0]
 800b010:	681e      	ldr	r6, [r3, #0]
 800b012:	6862      	ldr	r2, [r4, #4]
 800b014:	4630      	mov	r0, r6
 800b016:	f000 f901 	bl	800b21c <memchr>
 800b01a:	b108      	cbz	r0, 800b020 <_printf_i+0x1e4>
 800b01c:	1b80      	subs	r0, r0, r6
 800b01e:	6060      	str	r0, [r4, #4]
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	6123      	str	r3, [r4, #16]
 800b024:	2300      	movs	r3, #0
 800b026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b02a:	e7aa      	b.n	800af82 <_printf_i+0x146>
 800b02c:	4632      	mov	r2, r6
 800b02e:	4649      	mov	r1, r9
 800b030:	4640      	mov	r0, r8
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	47d0      	blx	sl
 800b036:	3001      	adds	r0, #1
 800b038:	d0ad      	beq.n	800af96 <_printf_i+0x15a>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	079b      	lsls	r3, r3, #30
 800b03e:	d413      	bmi.n	800b068 <_printf_i+0x22c>
 800b040:	68e0      	ldr	r0, [r4, #12]
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	4298      	cmp	r0, r3
 800b046:	bfb8      	it	lt
 800b048:	4618      	movlt	r0, r3
 800b04a:	e7a6      	b.n	800af9a <_printf_i+0x15e>
 800b04c:	2301      	movs	r3, #1
 800b04e:	4632      	mov	r2, r6
 800b050:	4649      	mov	r1, r9
 800b052:	4640      	mov	r0, r8
 800b054:	47d0      	blx	sl
 800b056:	3001      	adds	r0, #1
 800b058:	d09d      	beq.n	800af96 <_printf_i+0x15a>
 800b05a:	3501      	adds	r5, #1
 800b05c:	68e3      	ldr	r3, [r4, #12]
 800b05e:	9903      	ldr	r1, [sp, #12]
 800b060:	1a5b      	subs	r3, r3, r1
 800b062:	42ab      	cmp	r3, r5
 800b064:	dcf2      	bgt.n	800b04c <_printf_i+0x210>
 800b066:	e7eb      	b.n	800b040 <_printf_i+0x204>
 800b068:	2500      	movs	r5, #0
 800b06a:	f104 0619 	add.w	r6, r4, #25
 800b06e:	e7f5      	b.n	800b05c <_printf_i+0x220>
 800b070:	0800bb2a 	.word	0x0800bb2a
 800b074:	0800bb3b 	.word	0x0800bb3b

0800b078 <__sflush_r>:
 800b078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	0716      	lsls	r6, r2, #28
 800b080:	4605      	mov	r5, r0
 800b082:	460c      	mov	r4, r1
 800b084:	d454      	bmi.n	800b130 <__sflush_r+0xb8>
 800b086:	684b      	ldr	r3, [r1, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dc02      	bgt.n	800b092 <__sflush_r+0x1a>
 800b08c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dd48      	ble.n	800b124 <__sflush_r+0xac>
 800b092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b094:	2e00      	cmp	r6, #0
 800b096:	d045      	beq.n	800b124 <__sflush_r+0xac>
 800b098:	2300      	movs	r3, #0
 800b09a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b09e:	682f      	ldr	r7, [r5, #0]
 800b0a0:	6a21      	ldr	r1, [r4, #32]
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	d030      	beq.n	800b108 <__sflush_r+0x90>
 800b0a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	0759      	lsls	r1, r3, #29
 800b0ac:	d505      	bpl.n	800b0ba <__sflush_r+0x42>
 800b0ae:	6863      	ldr	r3, [r4, #4]
 800b0b0:	1ad2      	subs	r2, r2, r3
 800b0b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0b4:	b10b      	cbz	r3, 800b0ba <__sflush_r+0x42>
 800b0b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0b8:	1ad2      	subs	r2, r2, r3
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0c0:	6a21      	ldr	r1, [r4, #32]
 800b0c2:	47b0      	blx	r6
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	d106      	bne.n	800b0d8 <__sflush_r+0x60>
 800b0ca:	6829      	ldr	r1, [r5, #0]
 800b0cc:	291d      	cmp	r1, #29
 800b0ce:	d82b      	bhi.n	800b128 <__sflush_r+0xb0>
 800b0d0:	4a28      	ldr	r2, [pc, #160]	@ (800b174 <__sflush_r+0xfc>)
 800b0d2:	40ca      	lsrs	r2, r1
 800b0d4:	07d6      	lsls	r6, r2, #31
 800b0d6:	d527      	bpl.n	800b128 <__sflush_r+0xb0>
 800b0d8:	2200      	movs	r2, #0
 800b0da:	6062      	str	r2, [r4, #4]
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	04d9      	lsls	r1, r3, #19
 800b0e0:	6022      	str	r2, [r4, #0]
 800b0e2:	d504      	bpl.n	800b0ee <__sflush_r+0x76>
 800b0e4:	1c42      	adds	r2, r0, #1
 800b0e6:	d101      	bne.n	800b0ec <__sflush_r+0x74>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	b903      	cbnz	r3, 800b0ee <__sflush_r+0x76>
 800b0ec:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f0:	602f      	str	r7, [r5, #0]
 800b0f2:	b1b9      	cbz	r1, 800b124 <__sflush_r+0xac>
 800b0f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d002      	beq.n	800b102 <__sflush_r+0x8a>
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7fe fbe5 	bl	80098cc <_free_r>
 800b102:	2300      	movs	r3, #0
 800b104:	6363      	str	r3, [r4, #52]	@ 0x34
 800b106:	e00d      	b.n	800b124 <__sflush_r+0xac>
 800b108:	2301      	movs	r3, #1
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b0      	blx	r6
 800b10e:	4602      	mov	r2, r0
 800b110:	1c50      	adds	r0, r2, #1
 800b112:	d1c9      	bne.n	800b0a8 <__sflush_r+0x30>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d0c6      	beq.n	800b0a8 <__sflush_r+0x30>
 800b11a:	2b1d      	cmp	r3, #29
 800b11c:	d001      	beq.n	800b122 <__sflush_r+0xaa>
 800b11e:	2b16      	cmp	r3, #22
 800b120:	d11d      	bne.n	800b15e <__sflush_r+0xe6>
 800b122:	602f      	str	r7, [r5, #0]
 800b124:	2000      	movs	r0, #0
 800b126:	e021      	b.n	800b16c <__sflush_r+0xf4>
 800b128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b12c:	b21b      	sxth	r3, r3
 800b12e:	e01a      	b.n	800b166 <__sflush_r+0xee>
 800b130:	690f      	ldr	r7, [r1, #16]
 800b132:	2f00      	cmp	r7, #0
 800b134:	d0f6      	beq.n	800b124 <__sflush_r+0xac>
 800b136:	0793      	lsls	r3, r2, #30
 800b138:	bf18      	it	ne
 800b13a:	2300      	movne	r3, #0
 800b13c:	680e      	ldr	r6, [r1, #0]
 800b13e:	bf08      	it	eq
 800b140:	694b      	ldreq	r3, [r1, #20]
 800b142:	1bf6      	subs	r6, r6, r7
 800b144:	600f      	str	r7, [r1, #0]
 800b146:	608b      	str	r3, [r1, #8]
 800b148:	2e00      	cmp	r6, #0
 800b14a:	ddeb      	ble.n	800b124 <__sflush_r+0xac>
 800b14c:	4633      	mov	r3, r6
 800b14e:	463a      	mov	r2, r7
 800b150:	4628      	mov	r0, r5
 800b152:	6a21      	ldr	r1, [r4, #32]
 800b154:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b158:	47e0      	blx	ip
 800b15a:	2800      	cmp	r0, #0
 800b15c:	dc07      	bgt.n	800b16e <__sflush_r+0xf6>
 800b15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b16e:	4407      	add	r7, r0
 800b170:	1a36      	subs	r6, r6, r0
 800b172:	e7e9      	b.n	800b148 <__sflush_r+0xd0>
 800b174:	20400001 	.word	0x20400001

0800b178 <_fflush_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	690b      	ldr	r3, [r1, #16]
 800b17c:	4605      	mov	r5, r0
 800b17e:	460c      	mov	r4, r1
 800b180:	b913      	cbnz	r3, 800b188 <_fflush_r+0x10>
 800b182:	2500      	movs	r5, #0
 800b184:	4628      	mov	r0, r5
 800b186:	bd38      	pop	{r3, r4, r5, pc}
 800b188:	b118      	cbz	r0, 800b192 <_fflush_r+0x1a>
 800b18a:	6a03      	ldr	r3, [r0, #32]
 800b18c:	b90b      	cbnz	r3, 800b192 <_fflush_r+0x1a>
 800b18e:	f7fe fa53 	bl	8009638 <__sinit>
 800b192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f3      	beq.n	800b182 <_fflush_r+0xa>
 800b19a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b19c:	07d0      	lsls	r0, r2, #31
 800b19e:	d404      	bmi.n	800b1aa <_fflush_r+0x32>
 800b1a0:	0599      	lsls	r1, r3, #22
 800b1a2:	d402      	bmi.n	800b1aa <_fflush_r+0x32>
 800b1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1a6:	f7fe fb7a 	bl	800989e <__retarget_lock_acquire_recursive>
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	f7ff ff63 	bl	800b078 <__sflush_r>
 800b1b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1b4:	4605      	mov	r5, r0
 800b1b6:	07da      	lsls	r2, r3, #31
 800b1b8:	d4e4      	bmi.n	800b184 <_fflush_r+0xc>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	059b      	lsls	r3, r3, #22
 800b1be:	d4e1      	bmi.n	800b184 <_fflush_r+0xc>
 800b1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1c2:	f7fe fb6d 	bl	80098a0 <__retarget_lock_release_recursive>
 800b1c6:	e7dd      	b.n	800b184 <_fflush_r+0xc>

0800b1c8 <memmove>:
 800b1c8:	4288      	cmp	r0, r1
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	eb01 0402 	add.w	r4, r1, r2
 800b1d0:	d902      	bls.n	800b1d8 <memmove+0x10>
 800b1d2:	4284      	cmp	r4, r0
 800b1d4:	4623      	mov	r3, r4
 800b1d6:	d807      	bhi.n	800b1e8 <memmove+0x20>
 800b1d8:	1e43      	subs	r3, r0, #1
 800b1da:	42a1      	cmp	r1, r4
 800b1dc:	d008      	beq.n	800b1f0 <memmove+0x28>
 800b1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1e6:	e7f8      	b.n	800b1da <memmove+0x12>
 800b1e8:	4601      	mov	r1, r0
 800b1ea:	4402      	add	r2, r0
 800b1ec:	428a      	cmp	r2, r1
 800b1ee:	d100      	bne.n	800b1f2 <memmove+0x2a>
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1fa:	e7f7      	b.n	800b1ec <memmove+0x24>

0800b1fc <_sbrk_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	2300      	movs	r3, #0
 800b200:	4d05      	ldr	r5, [pc, #20]	@ (800b218 <_sbrk_r+0x1c>)
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	602b      	str	r3, [r5, #0]
 800b208:	f7f6 fa10 	bl	800162c <_sbrk>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_sbrk_r+0x1a>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_sbrk_r+0x1a>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	200016dc 	.word	0x200016dc

0800b21c <memchr>:
 800b21c:	4603      	mov	r3, r0
 800b21e:	b510      	push	{r4, lr}
 800b220:	b2c9      	uxtb	r1, r1
 800b222:	4402      	add	r2, r0
 800b224:	4293      	cmp	r3, r2
 800b226:	4618      	mov	r0, r3
 800b228:	d101      	bne.n	800b22e <memchr+0x12>
 800b22a:	2000      	movs	r0, #0
 800b22c:	e003      	b.n	800b236 <memchr+0x1a>
 800b22e:	7804      	ldrb	r4, [r0, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	428c      	cmp	r4, r1
 800b234:	d1f6      	bne.n	800b224 <memchr+0x8>
 800b236:	bd10      	pop	{r4, pc}

0800b238 <__assert_func>:
 800b238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b23a:	4614      	mov	r4, r2
 800b23c:	461a      	mov	r2, r3
 800b23e:	4b09      	ldr	r3, [pc, #36]	@ (800b264 <__assert_func+0x2c>)
 800b240:	4605      	mov	r5, r0
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68d8      	ldr	r0, [r3, #12]
 800b246:	b14c      	cbz	r4, 800b25c <__assert_func+0x24>
 800b248:	4b07      	ldr	r3, [pc, #28]	@ (800b268 <__assert_func+0x30>)
 800b24a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b24e:	9100      	str	r1, [sp, #0]
 800b250:	462b      	mov	r3, r5
 800b252:	4906      	ldr	r1, [pc, #24]	@ (800b26c <__assert_func+0x34>)
 800b254:	f000 f858 	bl	800b308 <fiprintf>
 800b258:	f000 f868 	bl	800b32c <abort>
 800b25c:	4b04      	ldr	r3, [pc, #16]	@ (800b270 <__assert_func+0x38>)
 800b25e:	461c      	mov	r4, r3
 800b260:	e7f3      	b.n	800b24a <__assert_func+0x12>
 800b262:	bf00      	nop
 800b264:	200002f4 	.word	0x200002f4
 800b268:	0800bb4c 	.word	0x0800bb4c
 800b26c:	0800bb59 	.word	0x0800bb59
 800b270:	0800bb87 	.word	0x0800bb87

0800b274 <_calloc_r>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	fba1 5402 	umull	r5, r4, r1, r2
 800b27a:	b934      	cbnz	r4, 800b28a <_calloc_r+0x16>
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7fe fec9 	bl	800a014 <_malloc_r>
 800b282:	4606      	mov	r6, r0
 800b284:	b928      	cbnz	r0, 800b292 <_calloc_r+0x1e>
 800b286:	4630      	mov	r0, r6
 800b288:	bd70      	pop	{r4, r5, r6, pc}
 800b28a:	220c      	movs	r2, #12
 800b28c:	2600      	movs	r6, #0
 800b28e:	6002      	str	r2, [r0, #0]
 800b290:	e7f9      	b.n	800b286 <_calloc_r+0x12>
 800b292:	462a      	mov	r2, r5
 800b294:	4621      	mov	r1, r4
 800b296:	f7fe fa6a 	bl	800976e <memset>
 800b29a:	e7f4      	b.n	800b286 <_calloc_r+0x12>

0800b29c <malloc>:
 800b29c:	4b02      	ldr	r3, [pc, #8]	@ (800b2a8 <malloc+0xc>)
 800b29e:	4601      	mov	r1, r0
 800b2a0:	6818      	ldr	r0, [r3, #0]
 800b2a2:	f7fe beb7 	b.w	800a014 <_malloc_r>
 800b2a6:	bf00      	nop
 800b2a8:	200002f4 	.word	0x200002f4

0800b2ac <_realloc_r>:
 800b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	4607      	mov	r7, r0
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	460d      	mov	r5, r1
 800b2b6:	b921      	cbnz	r1, 800b2c2 <_realloc_r+0x16>
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	f7fe bea9 	b.w	800a014 <_malloc_r>
 800b2c2:	b92a      	cbnz	r2, 800b2d0 <_realloc_r+0x24>
 800b2c4:	f7fe fb02 	bl	80098cc <_free_r>
 800b2c8:	4625      	mov	r5, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	f000 f833 	bl	800b33a <_malloc_usable_size_r>
 800b2d4:	4284      	cmp	r4, r0
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	d802      	bhi.n	800b2e0 <_realloc_r+0x34>
 800b2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2de:	d8f4      	bhi.n	800b2ca <_realloc_r+0x1e>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7fe fe96 	bl	800a014 <_malloc_r>
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	b908      	cbnz	r0, 800b2f0 <_realloc_r+0x44>
 800b2ec:	4645      	mov	r5, r8
 800b2ee:	e7ec      	b.n	800b2ca <_realloc_r+0x1e>
 800b2f0:	42b4      	cmp	r4, r6
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	bf28      	it	cs
 800b2f8:	4632      	movcs	r2, r6
 800b2fa:	f7fe fad2 	bl	80098a2 <memcpy>
 800b2fe:	4629      	mov	r1, r5
 800b300:	4638      	mov	r0, r7
 800b302:	f7fe fae3 	bl	80098cc <_free_r>
 800b306:	e7f1      	b.n	800b2ec <_realloc_r+0x40>

0800b308 <fiprintf>:
 800b308:	b40e      	push	{r1, r2, r3}
 800b30a:	b503      	push	{r0, r1, lr}
 800b30c:	4601      	mov	r1, r0
 800b30e:	ab03      	add	r3, sp, #12
 800b310:	4805      	ldr	r0, [pc, #20]	@ (800b328 <fiprintf+0x20>)
 800b312:	f853 2b04 	ldr.w	r2, [r3], #4
 800b316:	6800      	ldr	r0, [r0, #0]
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	f000 f83d 	bl	800b398 <_vfiprintf_r>
 800b31e:	b002      	add	sp, #8
 800b320:	f85d eb04 	ldr.w	lr, [sp], #4
 800b324:	b003      	add	sp, #12
 800b326:	4770      	bx	lr
 800b328:	200002f4 	.word	0x200002f4

0800b32c <abort>:
 800b32c:	2006      	movs	r0, #6
 800b32e:	b508      	push	{r3, lr}
 800b330:	f000 fa06 	bl	800b740 <raise>
 800b334:	2001      	movs	r0, #1
 800b336:	f7f6 f904 	bl	8001542 <_exit>

0800b33a <_malloc_usable_size_r>:
 800b33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b33e:	1f18      	subs	r0, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfbc      	itt	lt
 800b344:	580b      	ldrlt	r3, [r1, r0]
 800b346:	18c0      	addlt	r0, r0, r3
 800b348:	4770      	bx	lr

0800b34a <__sfputc_r>:
 800b34a:	6893      	ldr	r3, [r2, #8]
 800b34c:	b410      	push	{r4}
 800b34e:	3b01      	subs	r3, #1
 800b350:	2b00      	cmp	r3, #0
 800b352:	6093      	str	r3, [r2, #8]
 800b354:	da07      	bge.n	800b366 <__sfputc_r+0x1c>
 800b356:	6994      	ldr	r4, [r2, #24]
 800b358:	42a3      	cmp	r3, r4
 800b35a:	db01      	blt.n	800b360 <__sfputc_r+0x16>
 800b35c:	290a      	cmp	r1, #10
 800b35e:	d102      	bne.n	800b366 <__sfputc_r+0x1c>
 800b360:	bc10      	pop	{r4}
 800b362:	f000 b931 	b.w	800b5c8 <__swbuf_r>
 800b366:	6813      	ldr	r3, [r2, #0]
 800b368:	1c58      	adds	r0, r3, #1
 800b36a:	6010      	str	r0, [r2, #0]
 800b36c:	7019      	strb	r1, [r3, #0]
 800b36e:	4608      	mov	r0, r1
 800b370:	bc10      	pop	{r4}
 800b372:	4770      	bx	lr

0800b374 <__sfputs_r>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	4606      	mov	r6, r0
 800b378:	460f      	mov	r7, r1
 800b37a:	4614      	mov	r4, r2
 800b37c:	18d5      	adds	r5, r2, r3
 800b37e:	42ac      	cmp	r4, r5
 800b380:	d101      	bne.n	800b386 <__sfputs_r+0x12>
 800b382:	2000      	movs	r0, #0
 800b384:	e007      	b.n	800b396 <__sfputs_r+0x22>
 800b386:	463a      	mov	r2, r7
 800b388:	4630      	mov	r0, r6
 800b38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38e:	f7ff ffdc 	bl	800b34a <__sfputc_r>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	d1f3      	bne.n	800b37e <__sfputs_r+0xa>
 800b396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b398 <_vfiprintf_r>:
 800b398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b39c:	460d      	mov	r5, r1
 800b39e:	4614      	mov	r4, r2
 800b3a0:	4698      	mov	r8, r3
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	b09d      	sub	sp, #116	@ 0x74
 800b3a6:	b118      	cbz	r0, 800b3b0 <_vfiprintf_r+0x18>
 800b3a8:	6a03      	ldr	r3, [r0, #32]
 800b3aa:	b90b      	cbnz	r3, 800b3b0 <_vfiprintf_r+0x18>
 800b3ac:	f7fe f944 	bl	8009638 <__sinit>
 800b3b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3b2:	07d9      	lsls	r1, r3, #31
 800b3b4:	d405      	bmi.n	800b3c2 <_vfiprintf_r+0x2a>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	059a      	lsls	r2, r3, #22
 800b3ba:	d402      	bmi.n	800b3c2 <_vfiprintf_r+0x2a>
 800b3bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3be:	f7fe fa6e 	bl	800989e <__retarget_lock_acquire_recursive>
 800b3c2:	89ab      	ldrh	r3, [r5, #12]
 800b3c4:	071b      	lsls	r3, r3, #28
 800b3c6:	d501      	bpl.n	800b3cc <_vfiprintf_r+0x34>
 800b3c8:	692b      	ldr	r3, [r5, #16]
 800b3ca:	b99b      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x5c>
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f000 f938 	bl	800b644 <__swsetup_r>
 800b3d4:	b170      	cbz	r0, 800b3f4 <_vfiprintf_r+0x5c>
 800b3d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3d8:	07dc      	lsls	r4, r3, #31
 800b3da:	d504      	bpl.n	800b3e6 <_vfiprintf_r+0x4e>
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	b01d      	add	sp, #116	@ 0x74
 800b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e6:	89ab      	ldrh	r3, [r5, #12]
 800b3e8:	0598      	lsls	r0, r3, #22
 800b3ea:	d4f7      	bmi.n	800b3dc <_vfiprintf_r+0x44>
 800b3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ee:	f7fe fa57 	bl	80098a0 <__retarget_lock_release_recursive>
 800b3f2:	e7f3      	b.n	800b3dc <_vfiprintf_r+0x44>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f8:	2320      	movs	r3, #32
 800b3fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3fe:	2330      	movs	r3, #48	@ 0x30
 800b400:	f04f 0901 	mov.w	r9, #1
 800b404:	f8cd 800c 	str.w	r8, [sp, #12]
 800b408:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b5b4 <_vfiprintf_r+0x21c>
 800b40c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b410:	4623      	mov	r3, r4
 800b412:	469a      	mov	sl, r3
 800b414:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b418:	b10a      	cbz	r2, 800b41e <_vfiprintf_r+0x86>
 800b41a:	2a25      	cmp	r2, #37	@ 0x25
 800b41c:	d1f9      	bne.n	800b412 <_vfiprintf_r+0x7a>
 800b41e:	ebba 0b04 	subs.w	fp, sl, r4
 800b422:	d00b      	beq.n	800b43c <_vfiprintf_r+0xa4>
 800b424:	465b      	mov	r3, fp
 800b426:	4622      	mov	r2, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	4630      	mov	r0, r6
 800b42c:	f7ff ffa2 	bl	800b374 <__sfputs_r>
 800b430:	3001      	adds	r0, #1
 800b432:	f000 80a7 	beq.w	800b584 <_vfiprintf_r+0x1ec>
 800b436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b438:	445a      	add	r2, fp
 800b43a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b43c:	f89a 3000 	ldrb.w	r3, [sl]
 800b440:	2b00      	cmp	r3, #0
 800b442:	f000 809f 	beq.w	800b584 <_vfiprintf_r+0x1ec>
 800b446:	2300      	movs	r3, #0
 800b448:	f04f 32ff 	mov.w	r2, #4294967295
 800b44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b450:	f10a 0a01 	add.w	sl, sl, #1
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	9307      	str	r3, [sp, #28]
 800b458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b45c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b45e:	4654      	mov	r4, sl
 800b460:	2205      	movs	r2, #5
 800b462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b466:	4853      	ldr	r0, [pc, #332]	@ (800b5b4 <_vfiprintf_r+0x21c>)
 800b468:	f7ff fed8 	bl	800b21c <memchr>
 800b46c:	9a04      	ldr	r2, [sp, #16]
 800b46e:	b9d8      	cbnz	r0, 800b4a8 <_vfiprintf_r+0x110>
 800b470:	06d1      	lsls	r1, r2, #27
 800b472:	bf44      	itt	mi
 800b474:	2320      	movmi	r3, #32
 800b476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b47a:	0713      	lsls	r3, r2, #28
 800b47c:	bf44      	itt	mi
 800b47e:	232b      	movmi	r3, #43	@ 0x2b
 800b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b484:	f89a 3000 	ldrb.w	r3, [sl]
 800b488:	2b2a      	cmp	r3, #42	@ 0x2a
 800b48a:	d015      	beq.n	800b4b8 <_vfiprintf_r+0x120>
 800b48c:	4654      	mov	r4, sl
 800b48e:	2000      	movs	r0, #0
 800b490:	f04f 0c0a 	mov.w	ip, #10
 800b494:	9a07      	ldr	r2, [sp, #28]
 800b496:	4621      	mov	r1, r4
 800b498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b49c:	3b30      	subs	r3, #48	@ 0x30
 800b49e:	2b09      	cmp	r3, #9
 800b4a0:	d94b      	bls.n	800b53a <_vfiprintf_r+0x1a2>
 800b4a2:	b1b0      	cbz	r0, 800b4d2 <_vfiprintf_r+0x13a>
 800b4a4:	9207      	str	r2, [sp, #28]
 800b4a6:	e014      	b.n	800b4d2 <_vfiprintf_r+0x13a>
 800b4a8:	eba0 0308 	sub.w	r3, r0, r8
 800b4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	46a2      	mov	sl, r4
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	e7d2      	b.n	800b45e <_vfiprintf_r+0xc6>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	1d19      	adds	r1, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9103      	str	r1, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfbb      	ittet	lt
 800b4c4:	425b      	neglt	r3, r3
 800b4c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ca:	9307      	strge	r3, [sp, #28]
 800b4cc:	9307      	strlt	r3, [sp, #28]
 800b4ce:	bfb8      	it	lt
 800b4d0:	9204      	strlt	r2, [sp, #16]
 800b4d2:	7823      	ldrb	r3, [r4, #0]
 800b4d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d6:	d10a      	bne.n	800b4ee <_vfiprintf_r+0x156>
 800b4d8:	7863      	ldrb	r3, [r4, #1]
 800b4da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4dc:	d132      	bne.n	800b544 <_vfiprintf_r+0x1ac>
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	3402      	adds	r4, #2
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	9203      	str	r2, [sp, #12]
 800b4e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4ec:	9305      	str	r3, [sp, #20]
 800b4ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b5b8 <_vfiprintf_r+0x220>
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	4650      	mov	r0, sl
 800b4f6:	7821      	ldrb	r1, [r4, #0]
 800b4f8:	f7ff fe90 	bl	800b21c <memchr>
 800b4fc:	b138      	cbz	r0, 800b50e <_vfiprintf_r+0x176>
 800b4fe:	2240      	movs	r2, #64	@ 0x40
 800b500:	9b04      	ldr	r3, [sp, #16]
 800b502:	eba0 000a 	sub.w	r0, r0, sl
 800b506:	4082      	lsls	r2, r0
 800b508:	4313      	orrs	r3, r2
 800b50a:	3401      	adds	r4, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b512:	2206      	movs	r2, #6
 800b514:	4829      	ldr	r0, [pc, #164]	@ (800b5bc <_vfiprintf_r+0x224>)
 800b516:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b51a:	f7ff fe7f 	bl	800b21c <memchr>
 800b51e:	2800      	cmp	r0, #0
 800b520:	d03f      	beq.n	800b5a2 <_vfiprintf_r+0x20a>
 800b522:	4b27      	ldr	r3, [pc, #156]	@ (800b5c0 <_vfiprintf_r+0x228>)
 800b524:	bb1b      	cbnz	r3, 800b56e <_vfiprintf_r+0x1d6>
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	3307      	adds	r3, #7
 800b52a:	f023 0307 	bic.w	r3, r3, #7
 800b52e:	3308      	adds	r3, #8
 800b530:	9303      	str	r3, [sp, #12]
 800b532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b534:	443b      	add	r3, r7
 800b536:	9309      	str	r3, [sp, #36]	@ 0x24
 800b538:	e76a      	b.n	800b410 <_vfiprintf_r+0x78>
 800b53a:	460c      	mov	r4, r1
 800b53c:	2001      	movs	r0, #1
 800b53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b542:	e7a8      	b.n	800b496 <_vfiprintf_r+0xfe>
 800b544:	2300      	movs	r3, #0
 800b546:	f04f 0c0a 	mov.w	ip, #10
 800b54a:	4619      	mov	r1, r3
 800b54c:	3401      	adds	r4, #1
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	4620      	mov	r0, r4
 800b552:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b556:	3a30      	subs	r2, #48	@ 0x30
 800b558:	2a09      	cmp	r2, #9
 800b55a:	d903      	bls.n	800b564 <_vfiprintf_r+0x1cc>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0c6      	beq.n	800b4ee <_vfiprintf_r+0x156>
 800b560:	9105      	str	r1, [sp, #20]
 800b562:	e7c4      	b.n	800b4ee <_vfiprintf_r+0x156>
 800b564:	4604      	mov	r4, r0
 800b566:	2301      	movs	r3, #1
 800b568:	fb0c 2101 	mla	r1, ip, r1, r2
 800b56c:	e7f0      	b.n	800b550 <_vfiprintf_r+0x1b8>
 800b56e:	ab03      	add	r3, sp, #12
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	462a      	mov	r2, r5
 800b574:	4630      	mov	r0, r6
 800b576:	4b13      	ldr	r3, [pc, #76]	@ (800b5c4 <_vfiprintf_r+0x22c>)
 800b578:	a904      	add	r1, sp, #16
 800b57a:	f3af 8000 	nop.w
 800b57e:	4607      	mov	r7, r0
 800b580:	1c78      	adds	r0, r7, #1
 800b582:	d1d6      	bne.n	800b532 <_vfiprintf_r+0x19a>
 800b584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b586:	07d9      	lsls	r1, r3, #31
 800b588:	d405      	bmi.n	800b596 <_vfiprintf_r+0x1fe>
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	059a      	lsls	r2, r3, #22
 800b58e:	d402      	bmi.n	800b596 <_vfiprintf_r+0x1fe>
 800b590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b592:	f7fe f985 	bl	80098a0 <__retarget_lock_release_recursive>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	065b      	lsls	r3, r3, #25
 800b59a:	f53f af1f 	bmi.w	800b3dc <_vfiprintf_r+0x44>
 800b59e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5a0:	e71e      	b.n	800b3e0 <_vfiprintf_r+0x48>
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <_vfiprintf_r+0x22c>)
 800b5ac:	a904      	add	r1, sp, #16
 800b5ae:	f7ff fc45 	bl	800ae3c <_printf_i>
 800b5b2:	e7e4      	b.n	800b57e <_vfiprintf_r+0x1e6>
 800b5b4:	0800bb19 	.word	0x0800bb19
 800b5b8:	0800bb1f 	.word	0x0800bb1f
 800b5bc:	0800bb23 	.word	0x0800bb23
 800b5c0:	00000000 	.word	0x00000000
 800b5c4:	0800b375 	.word	0x0800b375

0800b5c8 <__swbuf_r>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	460e      	mov	r6, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	b118      	cbz	r0, 800b5da <__swbuf_r+0x12>
 800b5d2:	6a03      	ldr	r3, [r0, #32]
 800b5d4:	b90b      	cbnz	r3, 800b5da <__swbuf_r+0x12>
 800b5d6:	f7fe f82f 	bl	8009638 <__sinit>
 800b5da:	69a3      	ldr	r3, [r4, #24]
 800b5dc:	60a3      	str	r3, [r4, #8]
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	071a      	lsls	r2, r3, #28
 800b5e2:	d501      	bpl.n	800b5e8 <__swbuf_r+0x20>
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	b943      	cbnz	r3, 800b5fa <__swbuf_r+0x32>
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f000 f82a 	bl	800b644 <__swsetup_r>
 800b5f0:	b118      	cbz	r0, 800b5fa <__swbuf_r+0x32>
 800b5f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	6922      	ldr	r2, [r4, #16]
 800b5fe:	b2f6      	uxtb	r6, r6
 800b600:	1a98      	subs	r0, r3, r2
 800b602:	6963      	ldr	r3, [r4, #20]
 800b604:	4637      	mov	r7, r6
 800b606:	4283      	cmp	r3, r0
 800b608:	dc05      	bgt.n	800b616 <__swbuf_r+0x4e>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4628      	mov	r0, r5
 800b60e:	f7ff fdb3 	bl	800b178 <_fflush_r>
 800b612:	2800      	cmp	r0, #0
 800b614:	d1ed      	bne.n	800b5f2 <__swbuf_r+0x2a>
 800b616:	68a3      	ldr	r3, [r4, #8]
 800b618:	3b01      	subs	r3, #1
 800b61a:	60a3      	str	r3, [r4, #8]
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	6022      	str	r2, [r4, #0]
 800b622:	701e      	strb	r6, [r3, #0]
 800b624:	6962      	ldr	r2, [r4, #20]
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	429a      	cmp	r2, r3
 800b62a:	d004      	beq.n	800b636 <__swbuf_r+0x6e>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	07db      	lsls	r3, r3, #31
 800b630:	d5e1      	bpl.n	800b5f6 <__swbuf_r+0x2e>
 800b632:	2e0a      	cmp	r6, #10
 800b634:	d1df      	bne.n	800b5f6 <__swbuf_r+0x2e>
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f7ff fd9d 	bl	800b178 <_fflush_r>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d0d9      	beq.n	800b5f6 <__swbuf_r+0x2e>
 800b642:	e7d6      	b.n	800b5f2 <__swbuf_r+0x2a>

0800b644 <__swsetup_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4b29      	ldr	r3, [pc, #164]	@ (800b6ec <__swsetup_r+0xa8>)
 800b648:	4605      	mov	r5, r0
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	460c      	mov	r4, r1
 800b64e:	b118      	cbz	r0, 800b658 <__swsetup_r+0x14>
 800b650:	6a03      	ldr	r3, [r0, #32]
 800b652:	b90b      	cbnz	r3, 800b658 <__swsetup_r+0x14>
 800b654:	f7fd fff0 	bl	8009638 <__sinit>
 800b658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65c:	0719      	lsls	r1, r3, #28
 800b65e:	d422      	bmi.n	800b6a6 <__swsetup_r+0x62>
 800b660:	06da      	lsls	r2, r3, #27
 800b662:	d407      	bmi.n	800b674 <__swsetup_r+0x30>
 800b664:	2209      	movs	r2, #9
 800b666:	602a      	str	r2, [r5, #0]
 800b668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	e033      	b.n	800b6dc <__swsetup_r+0x98>
 800b674:	0758      	lsls	r0, r3, #29
 800b676:	d512      	bpl.n	800b69e <__swsetup_r+0x5a>
 800b678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b67a:	b141      	cbz	r1, 800b68e <__swsetup_r+0x4a>
 800b67c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b680:	4299      	cmp	r1, r3
 800b682:	d002      	beq.n	800b68a <__swsetup_r+0x46>
 800b684:	4628      	mov	r0, r5
 800b686:	f7fe f921 	bl	80098cc <_free_r>
 800b68a:	2300      	movs	r3, #0
 800b68c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	2300      	movs	r3, #0
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f043 0308 	orr.w	r3, r3, #8
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	b94b      	cbnz	r3, 800b6be <__swsetup_r+0x7a>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b4:	d003      	beq.n	800b6be <__swsetup_r+0x7a>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f000 f882 	bl	800b7c2 <__smakebuf_r>
 800b6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c2:	f013 0201 	ands.w	r2, r3, #1
 800b6c6:	d00a      	beq.n	800b6de <__swsetup_r+0x9a>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	60a2      	str	r2, [r4, #8]
 800b6cc:	6962      	ldr	r2, [r4, #20]
 800b6ce:	4252      	negs	r2, r2
 800b6d0:	61a2      	str	r2, [r4, #24]
 800b6d2:	6922      	ldr	r2, [r4, #16]
 800b6d4:	b942      	cbnz	r2, 800b6e8 <__swsetup_r+0xa4>
 800b6d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6da:	d1c5      	bne.n	800b668 <__swsetup_r+0x24>
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
 800b6de:	0799      	lsls	r1, r3, #30
 800b6e0:	bf58      	it	pl
 800b6e2:	6962      	ldrpl	r2, [r4, #20]
 800b6e4:	60a2      	str	r2, [r4, #8]
 800b6e6:	e7f4      	b.n	800b6d2 <__swsetup_r+0x8e>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e7f7      	b.n	800b6dc <__swsetup_r+0x98>
 800b6ec:	200002f4 	.word	0x200002f4

0800b6f0 <_raise_r>:
 800b6f0:	291f      	cmp	r1, #31
 800b6f2:	b538      	push	{r3, r4, r5, lr}
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	d904      	bls.n	800b704 <_raise_r+0x14>
 800b6fa:	2316      	movs	r3, #22
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b706:	b112      	cbz	r2, 800b70e <_raise_r+0x1e>
 800b708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b70c:	b94b      	cbnz	r3, 800b722 <_raise_r+0x32>
 800b70e:	4628      	mov	r0, r5
 800b710:	f000 f830 	bl	800b774 <_getpid_r>
 800b714:	4622      	mov	r2, r4
 800b716:	4601      	mov	r1, r0
 800b718:	4628      	mov	r0, r5
 800b71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b71e:	f000 b817 	b.w	800b750 <_kill_r>
 800b722:	2b01      	cmp	r3, #1
 800b724:	d00a      	beq.n	800b73c <_raise_r+0x4c>
 800b726:	1c59      	adds	r1, r3, #1
 800b728:	d103      	bne.n	800b732 <_raise_r+0x42>
 800b72a:	2316      	movs	r3, #22
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	2001      	movs	r0, #1
 800b730:	e7e7      	b.n	800b702 <_raise_r+0x12>
 800b732:	2100      	movs	r1, #0
 800b734:	4620      	mov	r0, r4
 800b736:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b73a:	4798      	blx	r3
 800b73c:	2000      	movs	r0, #0
 800b73e:	e7e0      	b.n	800b702 <_raise_r+0x12>

0800b740 <raise>:
 800b740:	4b02      	ldr	r3, [pc, #8]	@ (800b74c <raise+0xc>)
 800b742:	4601      	mov	r1, r0
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	f7ff bfd3 	b.w	800b6f0 <_raise_r>
 800b74a:	bf00      	nop
 800b74c:	200002f4 	.word	0x200002f4

0800b750 <_kill_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	2300      	movs	r3, #0
 800b754:	4d06      	ldr	r5, [pc, #24]	@ (800b770 <_kill_r+0x20>)
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	4611      	mov	r1, r2
 800b75c:	602b      	str	r3, [r5, #0]
 800b75e:	f7f5 fee0 	bl	8001522 <_kill>
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	d102      	bne.n	800b76c <_kill_r+0x1c>
 800b766:	682b      	ldr	r3, [r5, #0]
 800b768:	b103      	cbz	r3, 800b76c <_kill_r+0x1c>
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	bd38      	pop	{r3, r4, r5, pc}
 800b76e:	bf00      	nop
 800b770:	200016dc 	.word	0x200016dc

0800b774 <_getpid_r>:
 800b774:	f7f5 bece 	b.w	8001514 <_getpid>

0800b778 <__swhatbuf_r>:
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	460c      	mov	r4, r1
 800b77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b780:	4615      	mov	r5, r2
 800b782:	2900      	cmp	r1, #0
 800b784:	461e      	mov	r6, r3
 800b786:	b096      	sub	sp, #88	@ 0x58
 800b788:	da0c      	bge.n	800b7a4 <__swhatbuf_r+0x2c>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	2100      	movs	r1, #0
 800b78e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b792:	bf14      	ite	ne
 800b794:	2340      	movne	r3, #64	@ 0x40
 800b796:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b79a:	2000      	movs	r0, #0
 800b79c:	6031      	str	r1, [r6, #0]
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	b016      	add	sp, #88	@ 0x58
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	466a      	mov	r2, sp
 800b7a6:	f000 f849 	bl	800b83c <_fstat_r>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	dbed      	blt.n	800b78a <__swhatbuf_r+0x12>
 800b7ae:	9901      	ldr	r1, [sp, #4]
 800b7b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7b8:	4259      	negs	r1, r3
 800b7ba:	4159      	adcs	r1, r3
 800b7bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7c0:	e7eb      	b.n	800b79a <__swhatbuf_r+0x22>

0800b7c2 <__smakebuf_r>:
 800b7c2:	898b      	ldrh	r3, [r1, #12]
 800b7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c6:	079d      	lsls	r5, r3, #30
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	d507      	bpl.n	800b7de <__smakebuf_r+0x1c>
 800b7ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	6123      	str	r3, [r4, #16]
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	6163      	str	r3, [r4, #20]
 800b7da:	b003      	add	sp, #12
 800b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7de:	466a      	mov	r2, sp
 800b7e0:	ab01      	add	r3, sp, #4
 800b7e2:	f7ff ffc9 	bl	800b778 <__swhatbuf_r>
 800b7e6:	9f00      	ldr	r7, [sp, #0]
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	f7fe fc11 	bl	800a014 <_malloc_r>
 800b7f2:	b948      	cbnz	r0, 800b808 <__smakebuf_r+0x46>
 800b7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f8:	059a      	lsls	r2, r3, #22
 800b7fa:	d4ee      	bmi.n	800b7da <__smakebuf_r+0x18>
 800b7fc:	f023 0303 	bic.w	r3, r3, #3
 800b800:	f043 0302 	orr.w	r3, r3, #2
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	e7e2      	b.n	800b7ce <__smakebuf_r+0xc>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	6020      	str	r0, [r4, #0]
 800b818:	b15b      	cbz	r3, 800b832 <__smakebuf_r+0x70>
 800b81a:	4630      	mov	r0, r6
 800b81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b820:	f000 f81e 	bl	800b860 <_isatty_r>
 800b824:	b128      	cbz	r0, 800b832 <__smakebuf_r+0x70>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	f043 0301 	orr.w	r3, r3, #1
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	431d      	orrs	r5, r3
 800b836:	81a5      	strh	r5, [r4, #12]
 800b838:	e7cf      	b.n	800b7da <__smakebuf_r+0x18>
	...

0800b83c <_fstat_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	2300      	movs	r3, #0
 800b840:	4d06      	ldr	r5, [pc, #24]	@ (800b85c <_fstat_r+0x20>)
 800b842:	4604      	mov	r4, r0
 800b844:	4608      	mov	r0, r1
 800b846:	4611      	mov	r1, r2
 800b848:	602b      	str	r3, [r5, #0]
 800b84a:	f7f5 fec9 	bl	80015e0 <_fstat>
 800b84e:	1c43      	adds	r3, r0, #1
 800b850:	d102      	bne.n	800b858 <_fstat_r+0x1c>
 800b852:	682b      	ldr	r3, [r5, #0]
 800b854:	b103      	cbz	r3, 800b858 <_fstat_r+0x1c>
 800b856:	6023      	str	r3, [r4, #0]
 800b858:	bd38      	pop	{r3, r4, r5, pc}
 800b85a:	bf00      	nop
 800b85c:	200016dc 	.word	0x200016dc

0800b860 <_isatty_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	2300      	movs	r3, #0
 800b864:	4d05      	ldr	r5, [pc, #20]	@ (800b87c <_isatty_r+0x1c>)
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f5 fec7 	bl	80015fe <_isatty>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_isatty_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_isatty_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	200016dc 	.word	0x200016dc

0800b880 <_init>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	bf00      	nop
 800b884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b886:	bc08      	pop	{r3}
 800b888:	469e      	mov	lr, r3
 800b88a:	4770      	bx	lr

0800b88c <_fini>:
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	bf00      	nop
 800b890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b892:	bc08      	pop	{r3}
 800b894:	469e      	mov	lr, r3
 800b896:	4770      	bx	lr
