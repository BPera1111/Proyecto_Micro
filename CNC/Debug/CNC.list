
CNC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001860  0800bf98  0800bf98  0000cf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7f8  0800d7f8  0000f354  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d7f8  0800d7f8  0000e7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d800  0800d800  0000f354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d800  0800d800  0000e800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d804  0800d804  0000e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000354  20000000  0800d808  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004634  20000354  0800db5c  0000f354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004988  0800db5c  0000f988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae51  00000000  00000000  0000f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004849  00000000  00000000  0002a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000abaa  00000000  00000000  0002ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001221  00000000  00000000  0003a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b6f7  00000000  00000000  0003b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198fa  00000000  00000000  00056dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b037  00000000  00000000  000706d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb709  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000418c  00000000  00000000  000fb74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000ff8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bf80 	.word	0x0800bf80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	0800bf80 	.word	0x0800bf80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f7ff fbf3 	bl	80009bc <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x1c>
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f8ea 	bl	80003e4 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffa2 	bl	8000168 <__aeabi_dsub>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000

08001234 <gc_init>:
  * @brief  Inicializa el parser G-code con valores por defecto
  * @retval None
  */
void gc_init(void) {
    // Inicializar estado modal por defecto
    memset(&gc_state_modal, 0, sizeof(gc_modal_t));
 8001234:	2200      	movs	r2, #0
 8001236:	4b02      	ldr	r3, [pc, #8]	@ (8001240 <gc_init+0xc>)
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	721a      	strb	r2, [r3, #8]
    gc_state_modal.distance = 0;                    // G90 (absoluto) por defecto
    gc_state_modal.feed_rate = 0;                   // G94 por defecto
    gc_state_modal.spindle = 0;                     // M5 (spindle off) por defecto
    gc_state_modal.coolant = 0;                     // M9 (coolant off) por defecto
    gc_state_modal.program_flow = 0;                // Normal execution
}
 800123e:	4770      	bx	lr
 8001240:	20000370 	.word	0x20000370

08001244 <gc_clear_block>:
  * @brief  Limpia el bloque actual y copia el estado modal
  * @retval None
  */
void gc_clear_block(void) {
    // Limpiar bloque actual y copiar estado modal
    memset(&gc_block, 0, sizeof(gc_block_t));
 8001244:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <gc_clear_block+0x38>)
 8001246:	222c      	movs	r2, #44	@ 0x2c
 8001248:	4618      	mov	r0, r3
 800124a:	2100      	movs	r1, #0
void gc_clear_block(void) {
 800124c:	b510      	push	{r4, lr}
    memset(&gc_block, 0, sizeof(gc_block_t));
 800124e:	f007 f820 	bl	8008292 <memset>
    memcpy(&gc_block.modal, &gc_state_modal, sizeof(gc_modal_t));
 8001252:	f1a0 0308 	sub.w	r3, r0, #8
 8001256:	461a      	mov	r2, r3
 8001258:	4c09      	ldr	r4, [pc, #36]	@ (8001280 <gc_clear_block+0x3c>)
 800125a:	6861      	ldr	r1, [r4, #4]
 800125c:	6820      	ldr	r0, [r4, #0]
 800125e:	c203      	stmia	r2!, {r0, r1}
 8001260:	7a21      	ldrb	r1, [r4, #8]
 8001262:	7011      	strb	r1, [r2, #0]
    gc_block.values.x = NAN;
    gc_block.values.y = NAN;
    gc_block.values.z = NAN;
    gc_block.values.f = NAN;
    gc_block.values.s = NAN;
    gc_block.values.n = -1;
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
    gc_block.values.x = NAN;
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <gc_clear_block+0x40>)
    gc_block.values.n = -1;
 800126a:	6259      	str	r1, [r3, #36]	@ 0x24
    gc_block.values.x = NAN;
 800126c:	60da      	str	r2, [r3, #12]
    gc_block.values.y = NAN;
 800126e:	611a      	str	r2, [r3, #16]
    gc_block.values.z = NAN;
 8001270:	615a      	str	r2, [r3, #20]
    gc_block.values.f = NAN;
 8001272:	619a      	str	r2, [r3, #24]
    gc_block.values.s = NAN;
 8001274:	61da      	str	r2, [r3, #28]
    gc_block.values.p = 0;
    gc_block.values.l = 0;
    gc_block.values.r = NAN;
 8001276:	621a      	str	r2, [r3, #32]
    gc_block.values.y_defined = false;
    gc_block.values.z_defined = false;
    gc_block.values.f_defined = false;
    gc_block.values.s_defined = false;
    gc_block.values.r_defined = false;
}
 8001278:	bd10      	pop	{r4, pc}
 800127a:	bf00      	nop
 800127c:	20000384 	.word	0x20000384
 8001280:	20000370 	.word	0x20000370
 8001284:	7fc00000 	.word	0x7fc00000

08001288 <read_float>:
  * @param  line: Línea de texto
  * @param  char_counter: Contador de caracteres (se modifica)
  * @param  float_ptr: Puntero donde guardar el resultado
  * @retval true si se leyó correctamente, false en caso contrario
  */
bool read_float(char *line, uint8_t *char_counter, float *float_ptr) {
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	4615      	mov	r5, r2
    char *ptr = line + *char_counter;
 800128c:	780b      	ldrb	r3, [r1, #0]
 800128e:	18c4      	adds	r4, r0, r3
    unsigned char c;
    
    // Saltar espacios
    while ((c = *ptr) == ' ' || c == '\t') { 
 8001290:	7823      	ldrb	r3, [r4, #0]
 8001292:	4620      	mov	r0, r4
 8001294:	2b20      	cmp	r3, #32
 8001296:	f104 0401 	add.w	r4, r4, #1
 800129a:	d005      	beq.n	80012a8 <read_float+0x20>
 800129c:	2b09      	cmp	r3, #9
 800129e:	d003      	beq.n	80012a8 <read_float+0x20>
        ptr++; 
        (*char_counter)++;
    }
    
    if (c == 0) return false;  // Fin de línea
 80012a0:	b933      	cbnz	r3, 80012b0 <read_float+0x28>
 80012a2:	2400      	movs	r4, #0
    
    if (!found_digit) return false;
    
    *float_ptr = atof(start);
    return true;
}
 80012a4:	4620      	mov	r0, r4
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (*char_counter)++;
 80012a8:	780b      	ldrb	r3, [r1, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	700b      	strb	r3, [r1, #0]
 80012ae:	e7ef      	b.n	8001290 <read_float+0x8>
    if (c == '+' || c == '-') { 
 80012b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80012b2:	d001      	beq.n	80012b8 <read_float+0x30>
 80012b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80012b6:	d117      	bne.n	80012e8 <read_float+0x60>
        (*char_counter)++;
 80012b8:	780a      	ldrb	r2, [r1, #0]
        ptr++; 
 80012ba:	1c43      	adds	r3, r0, #1
        (*char_counter)++;
 80012bc:	3201      	adds	r2, #1
 80012be:	700a      	strb	r2, [r1, #0]
            found_decimal = true;
 80012c0:	2400      	movs	r4, #0
 80012c2:	4626      	mov	r6, r4
 80012c4:	3b01      	subs	r3, #1
    while ((c = *ptr) != 0) {
 80012c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80012ca:	b12a      	cbz	r2, 80012d8 <read_float+0x50>
        if (c >= '0' && c <= '9') {
 80012cc:	f1a2 0730 	sub.w	r7, r2, #48	@ 0x30
 80012d0:	2f09      	cmp	r7, #9
 80012d2:	d912      	bls.n	80012fa <read_float+0x72>
        } else if (c == '.' && !found_decimal) {
 80012d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80012d6:	d009      	beq.n	80012ec <read_float+0x64>
    if (!found_digit) return false;
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d0e2      	beq.n	80012a2 <read_float+0x1a>
    *float_ptr = atof(start);
 80012dc:	f006 f874 	bl	80073c8 <atof>
 80012e0:	f7ff fbf2 	bl	8000ac8 <__aeabi_d2f>
 80012e4:	6028      	str	r0, [r5, #0]
    return true;
 80012e6:	e7dd      	b.n	80012a4 <read_float+0x1c>
 80012e8:	4603      	mov	r3, r0
 80012ea:	e7e9      	b.n	80012c0 <read_float+0x38>
        } else if (c == '.' && !found_decimal) {
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d1f3      	bne.n	80012d8 <read_float+0x50>
            found_decimal = true;
 80012f0:	2601      	movs	r6, #1
        (*char_counter)++;
 80012f2:	780a      	ldrb	r2, [r1, #0]
 80012f4:	3201      	adds	r2, #1
 80012f6:	700a      	strb	r2, [r1, #0]
 80012f8:	e7e5      	b.n	80012c6 <read_float+0x3e>
            found_digit = true;
 80012fa:	2401      	movs	r4, #1
 80012fc:	e7f9      	b.n	80012f2 <read_float+0x6a>
	...

08001300 <gc_parse_line>:
/**
  * @brief  Parsea una línea G-code completa
  * @param  line: Línea de texto a parsear
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_parse_line(char *line) {
 8001300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t char_counter = 0;
 8001302:	2500      	movs	r5, #0
uint8_t gc_parse_line(char *line) {
 8001304:	4606      	mov	r6, r0
    uint8_t char_counter = 0;
 8001306:	f88d 5003 	strb.w	r5, [sp, #3]
    uint8_t int_value = 0;
    uint16_t command_words = 0;   // Tracking de comandos para detectar conflictos
    uint8_t word_bit = 0;
    
    // Limpiar bloque y copiar estado modal
    gc_clear_block();
 800130a:	f7ff ff9b 	bl	8001244 <gc_clear_block>
    
    // Procesar cada palabra en la línea
    while (line[char_counter] != 0) {
 800130e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001312:	5cf4      	ldrb	r4, [r6, r3]
 8001314:	b914      	cbnz	r4, 800131c <gc_parse_line+0x1c>
 8001316:	e072      	b.n	80013fe <gc_parse_line+0xfe>
        // Saltar espacios
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
            char_counter++;
 8001318:	3301      	adds	r3, #1
 800131a:	b2db      	uxtb	r3, r3
        while (line[char_counter] == ' ' || line[char_counter] == '\t') {
 800131c:	5cf4      	ldrb	r4, [r6, r3]
 800131e:	2c20      	cmp	r4, #32
 8001320:	d0fa      	beq.n	8001318 <gc_parse_line+0x18>
 8001322:	2c09      	cmp	r4, #9
 8001324:	d0f8      	beq.n	8001318 <gc_parse_line+0x18>
        }
        
        // Obtener letra del comando
        letter = line[char_counter];
        if (letter == 0) break;  // Fin de línea
 8001326:	2c00      	cmp	r4, #0
 8001328:	d069      	beq.n	80013fe <gc_parse_line+0xfe>
        
        // Convertir a mayúscula
        if (letter >= 'a' && letter <= 'z') {
 800132a:	f1a4 0261 	sub.w	r2, r4, #97	@ 0x61
 800132e:	2a19      	cmp	r2, #25
            letter -= 32;
 8001330:	bf98      	it	ls
 8001332:	3c20      	subls	r4, #32
        }
        
        char_counter++;
 8001334:	f103 0301 	add.w	r3, r3, #1
        
        // Leer valor después de la letra
        if (!read_float(line, &char_counter, &value)) {
 8001338:	4630      	mov	r0, r6
 800133a:	aa01      	add	r2, sp, #4
 800133c:	f10d 0103 	add.w	r1, sp, #3
            letter -= 32;
 8001340:	bf98      	it	ls
 8001342:	b2e4      	uxtbls	r4, r4
        char_counter++;
 8001344:	f88d 3003 	strb.w	r3, [sp, #3]
        if (!read_float(line, &char_counter, &value)) {
 8001348:	f7ff ff9e 	bl	8001288 <read_float>
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 80ec 	beq.w	800152a <gc_parse_line+0x22a>
            return STATUS_BAD_NUMBER_FORMAT;
        }
        
        // Convertir a entero para comandos G y M
        int_value = truncf(value);
 8001352:	9f01      	ldr	r7, [sp, #4]
        
        // Procesar según la letra del comando
        switch (letter) {
 8001354:	3c46      	subs	r4, #70	@ 0x46
        int_value = truncf(value);
 8001356:	4638      	mov	r0, r7
 8001358:	f009 fa72 	bl	800a840 <truncf>
 800135c:	f7ff ff14 	bl	8001188 <__aeabi_f2uiz>
 8001360:	b2c3      	uxtb	r3, r0
        switch (letter) {
 8001362:	2c14      	cmp	r4, #20
 8001364:	d819      	bhi.n	800139a <gc_parse_line+0x9a>
 8001366:	e8df f004 	tbb	[pc, r4]
 800136a:	0bbb      	.short	0x0bbb
 800136c:	18181818 	.word	0x18181818
 8001370:	18cf5dd6 	.word	0x18cf5dd6
 8001374:	c9da18d2 	.word	0xc9da18d2
 8001378:	18181818 	.word	0x18181818
 800137c:	afa9      	.short	0xafa9
 800137e:	b5          	.byte	0xb5
 800137f:	00          	.byte	0x00
            case 'G':
                // Validar rango de comandos G
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 8001380:	2b63      	cmp	r3, #99	@ 0x63
 8001382:	d80a      	bhi.n	800139a <gc_parse_line+0x9a>
                
                switch (int_value) {
 8001384:	2b1c      	cmp	r3, #28
 8001386:	d042      	beq.n	800140e <gc_parse_line+0x10e>
 8001388:	d813      	bhi.n	80013b2 <gc_parse_line+0xb2>
 800138a:	2b13      	cmp	r3, #19
 800138c:	d807      	bhi.n	800139e <gc_parse_line+0x9e>
 800138e:	2b10      	cmp	r3, #16
 8001390:	d838      	bhi.n	8001404 <gc_parse_line+0x104>
 8001392:	2b03      	cmp	r3, #3
 8001394:	d92b      	bls.n	80013ee <gc_parse_line+0xee>
 8001396:	2b04      	cmp	r3, #4
 8001398:	d039      	beq.n	800140e <gc_parse_line+0x10e>
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 800139a:	2414      	movs	r4, #20
 800139c:	e02f      	b.n	80013fe <gc_parse_line+0xfe>
                switch (int_value) {
 800139e:	f1a3 0214 	sub.w	r2, r3, #20
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d8f9      	bhi.n	800139a <gc_parse_line+0x9a>
                        word_bit = MODAL_GROUP_G2;
                        gc_block.modal.plane_select = int_value - 17;
                        break;
                    case 20: case 21:
                        word_bit = MODAL_GROUP_G6;
                        gc_block.modal.units = 21 - int_value;  // G21=0(mm), G20=1(inch)
 80013a6:	4a62      	ldr	r2, [pc, #392]	@ (8001530 <gc_parse_line+0x230>)
 80013a8:	f1c3 0315 	rsb	r3, r3, #21
 80013ac:	70d3      	strb	r3, [r2, #3]
                        word_bit = MODAL_GROUP_G6;
 80013ae:	2306      	movs	r3, #6
                        break;
 80013b0:	e020      	b.n	80013f4 <gc_parse_line+0xf4>
                switch (int_value) {
 80013b2:	2b5c      	cmp	r3, #92	@ 0x5c
 80013b4:	d02b      	beq.n	800140e <gc_parse_line+0x10e>
 80013b6:	d810      	bhi.n	80013da <gc_parse_line+0xda>
 80013b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80013ba:	d806      	bhi.n	80013ca <gc_parse_line+0xca>
 80013bc:	2b35      	cmp	r3, #53	@ 0x35
 80013be:	d9ec      	bls.n	800139a <gc_parse_line+0x9a>
                        word_bit = MODAL_GROUP_G5;
                        gc_block.modal.feed_rate = 94 - int_value;
                        break;
                    case 54: case 55: case 56: case 57: case 58: case 59:
                        word_bit = MODAL_GROUP_G12;
                        gc_block.modal.coord_select = int_value - 54;
 80013c0:	4a5b      	ldr	r2, [pc, #364]	@ (8001530 <gc_parse_line+0x230>)
 80013c2:	3b36      	subs	r3, #54	@ 0x36
 80013c4:	7053      	strb	r3, [r2, #1]
                        word_bit = MODAL_GROUP_G12;
 80013c6:	2309      	movs	r3, #9
                        break;
 80013c8:	e014      	b.n	80013f4 <gc_parse_line+0xf4>
 80013ca:	3b5a      	subs	r3, #90	@ 0x5a
 80013cc:	b2db      	uxtb	r3, r3
                switch (int_value) {
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d8e3      	bhi.n	800139a <gc_parse_line+0x9a>
                        gc_block.modal.distance = int_value - 90;  // G90=0(abs), G91=1(inc)
 80013d2:	4a57      	ldr	r2, [pc, #348]	@ (8001530 <gc_parse_line+0x230>)
 80013d4:	7113      	strb	r3, [r2, #4]
                        word_bit = MODAL_GROUP_G3;
 80013d6:	2303      	movs	r3, #3
                        break;
 80013d8:	e00c      	b.n	80013f4 <gc_parse_line+0xf4>
                switch (int_value) {
 80013da:	f1a3 025d 	sub.w	r2, r3, #93	@ 0x5d
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d8db      	bhi.n	800139a <gc_parse_line+0x9a>
                        gc_block.modal.feed_rate = 94 - int_value;
 80013e2:	4a53      	ldr	r2, [pc, #332]	@ (8001530 <gc_parse_line+0x230>)
 80013e4:	f1c3 035e 	rsb	r3, r3, #94	@ 0x5e
 80013e8:	7153      	strb	r3, [r2, #5]
                        word_bit = MODAL_GROUP_G5;
 80013ea:	2305      	movs	r3, #5
                        break;
 80013ec:	e002      	b.n	80013f4 <gc_parse_line+0xf4>
                        gc_block.modal.motion = int_value;
 80013ee:	4a50      	ldr	r2, [pc, #320]	@ (8001530 <gc_parse_line+0x230>)
 80013f0:	7013      	strb	r3, [r2, #0]
                        word_bit = MODAL_GROUP_G1;
 80013f2:	2301      	movs	r3, #1
                    default:
                        return STATUS_GCODE_UNSUPPORTED_COMMAND;
                }
                
                // Verificar violación de grupo modal
                if (bit_istrue(command_words, bit(word_bit))) {
 80013f4:	fa45 f203 	asr.w	r2, r5, r3
 80013f8:	07d2      	lsls	r2, r2, #31
 80013fa:	d50d      	bpl.n	8001418 <gc_parse_line+0x118>
                    return STATUS_GCODE_MODAL_GROUP_VIOLATION;
 80013fc:	2415      	movs	r4, #21
                return STATUS_GCODE_UNSUPPORTED_COMMAND;
        }
    }
    
    return STATUS_OK;  // Parsing exitoso
}
 80013fe:	4620      	mov	r0, r4
 8001400:	b003      	add	sp, #12
 8001402:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        gc_block.modal.plane_select = int_value - 17;
 8001404:	4a4a      	ldr	r2, [pc, #296]	@ (8001530 <gc_parse_line+0x230>)
 8001406:	3b11      	subs	r3, #17
 8001408:	7093      	strb	r3, [r2, #2]
                        word_bit = MODAL_GROUP_G2;
 800140a:	2302      	movs	r3, #2
                        break;
 800140c:	e7f2      	b.n	80013f4 <gc_parse_line+0xf4>
                        gc_block.non_modal_command = 28;  // G28 - Home
 800140e:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <gc_parse_line+0x230>)
 8001410:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
                        word_bit = MODAL_GROUP_G0;
 8001414:	2300      	movs	r3, #0
 8001416:	e7ed      	b.n	80013f4 <gc_parse_line+0xf4>
                command_words |= bit(word_bit);
 8001418:	2201      	movs	r2, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
                command_words |= bit(word_bit);
 800141e:	432b      	orrs	r3, r5
 8001420:	b29d      	uxth	r5, r3
                break;
 8001422:	e774      	b.n	800130e <gc_parse_line+0xe>
                if (int_value > 99) return STATUS_GCODE_UNSUPPORTED_COMMAND;
 8001424:	2b63      	cmp	r3, #99	@ 0x63
 8001426:	d8b8      	bhi.n	800139a <gc_parse_line+0x9a>
                switch (int_value) {
 8001428:	2b12      	cmp	r3, #18
 800142a:	d82b      	bhi.n	8001484 <gc_parse_line+0x184>
 800142c:	2b12      	cmp	r3, #18
 800142e:	d8b4      	bhi.n	800139a <gc_parse_line+0x9a>
 8001430:	a201      	add	r2, pc, #4	@ (adr r2, 8001438 <gc_parse_line+0x138>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	08001499 	.word	0x08001499
 800143c:	08001499 	.word	0x08001499
 8001440:	08001499 	.word	0x08001499
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014ad 	.word	0x080014ad
 800144c:	080014ad 	.word	0x080014ad
 8001450:	0800139b 	.word	0x0800139b
 8001454:	080014b5 	.word	0x080014b5
 8001458:	080014b5 	.word	0x080014b5
 800145c:	080014b5 	.word	0x080014b5
 8001460:	0800139b 	.word	0x0800139b
 8001464:	0800139b 	.word	0x0800139b
 8001468:	0800139b 	.word	0x0800139b
 800146c:	0800139b 	.word	0x0800139b
 8001470:	0800139b 	.word	0x0800139b
 8001474:	0800139b 	.word	0x0800139b
 8001478:	0800139b 	.word	0x0800139b
 800147c:	0800148f 	.word	0x0800148f
 8001480:	0800148d 	.word	0x0800148d
 8001484:	2b1e      	cmp	r3, #30
 8001486:	d007      	beq.n	8001498 <gc_parse_line+0x198>
 8001488:	2b54      	cmp	r3, #84	@ 0x54
 800148a:	d186      	bne.n	800139a <gc_parse_line+0x9a>
 800148c:	2312      	movs	r3, #18
                        gc_block.non_modal_command = 18;
 800148e:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <gc_parse_line+0x230>)
 8001490:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
                        word_bit = MODAL_GROUP_G0;  // Comando no modal
 8001494:	2200      	movs	r2, #0
 8001496:	e002      	b.n	800149e <gc_parse_line+0x19e>
                        gc_block.modal.program_flow = int_value;
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <gc_parse_line+0x230>)
 800149a:	7213      	strb	r3, [r2, #8]
                        word_bit = MODAL_GROUP_M4;
 800149c:	220b      	movs	r2, #11
                if (bit_istrue(command_words, bit(word_bit))) {
 800149e:	fa45 f302 	asr.w	r3, r5, r2
 80014a2:	07db      	lsls	r3, r3, #31
 80014a4:	d4aa      	bmi.n	80013fc <gc_parse_line+0xfc>
                command_words |= bit(word_bit);
 80014a6:	2301      	movs	r3, #1
 80014a8:	4093      	lsls	r3, r2
 80014aa:	e7b8      	b.n	800141e <gc_parse_line+0x11e>
                        gc_block.modal.spindle = int_value;
 80014ac:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <gc_parse_line+0x230>)
 80014ae:	7193      	strb	r3, [r2, #6]
                        word_bit = MODAL_GROUP_M7;
 80014b0:	220c      	movs	r2, #12
                        break;
 80014b2:	e7f4      	b.n	800149e <gc_parse_line+0x19e>
                        gc_block.modal.coolant = int_value;
 80014b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <gc_parse_line+0x230>)
 80014b6:	71d3      	strb	r3, [r2, #7]
                        word_bit = MODAL_GROUP_M8;
 80014b8:	220d      	movs	r2, #13
                        break;
 80014ba:	e7f0      	b.n	800149e <gc_parse_line+0x19e>
                gc_block.values.x_defined = true;
 80014bc:	2201      	movs	r2, #1
                gc_block.values.x = value;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <gc_parse_line+0x230>)
 80014c0:	60df      	str	r7, [r3, #12]
                gc_block.values.x_defined = true;
 80014c2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
                break;
 80014c6:	e722      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.y_defined = true;
 80014c8:	2201      	movs	r2, #1
                gc_block.values.y = value;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <gc_parse_line+0x230>)
 80014cc:	611f      	str	r7, [r3, #16]
                gc_block.values.y_defined = true;
 80014ce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
                break;
 80014d2:	e71c      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.z_defined = true;
 80014d4:	2201      	movs	r2, #1
                gc_block.values.z = value;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <gc_parse_line+0x230>)
 80014d8:	615f      	str	r7, [r3, #20]
                gc_block.values.z_defined = true;
 80014da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
                break;
 80014de:	e716      	b.n	800130e <gc_parse_line+0xe>
                gc_block.values.f_defined = true;
 80014e0:	2201      	movs	r2, #1
                gc_block.values.f = value;
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <gc_parse_line+0x230>)
 80014e4:	619f      	str	r7, [r3, #24]
                gc_block.values.f_defined = true;
 80014e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 80014ea:	2100      	movs	r1, #0
 80014ec:	4638      	mov	r0, r7
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_fcmplt>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	f43f af0b 	beq.w	800130e <gc_parse_line+0xe>
 80014f8:	2404      	movs	r4, #4
 80014fa:	e780      	b.n	80013fe <gc_parse_line+0xfe>
                gc_block.values.s_defined = true;
 80014fc:	2201      	movs	r2, #1
                gc_block.values.s = value;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <gc_parse_line+0x230>)
 8001500:	61df      	str	r7, [r3, #28]
                gc_block.values.s_defined = true;
 8001502:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001506:	e7f0      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.n = int_value;
 8001508:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <gc_parse_line+0x230>)
 800150a:	6253      	str	r3, [r2, #36]	@ 0x24
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800150c:	e7ed      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.p = int_value;
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <gc_parse_line+0x230>)
 8001510:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001514:	e7e9      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.l = int_value;
 8001516:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <gc_parse_line+0x230>)
 8001518:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 800151c:	e7e5      	b.n	80014ea <gc_parse_line+0x1ea>
                gc_block.values.r_defined = true;
 800151e:	2201      	movs	r2, #1
                gc_block.values.r = value;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <gc_parse_line+0x230>)
 8001522:	621f      	str	r7, [r3, #32]
                gc_block.values.r_defined = true;
 8001524:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
                if (value < 0.0) return STATUS_NEGATIVE_VALUE;
 8001528:	e7df      	b.n	80014ea <gc_parse_line+0x1ea>
            return STATUS_BAD_NUMBER_FORMAT;
 800152a:	2402      	movs	r4, #2
 800152c:	e767      	b.n	80013fe <gc_parse_line+0xfe>
 800152e:	bf00      	nop
 8001530:	2000037c 	.word	0x2000037c

08001534 <gc_execute_block>:

/**
  * @brief  Ejecuta los comandos parseados en el bloque actual
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_block(void) {
 8001534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char msg[100];
    
    // Primero ejecutar comandos no modales
    switch (gc_block.non_modal_command) {
 8001538:	4c77      	ldr	r4, [pc, #476]	@ (8001718 <gc_execute_block+0x1e4>)
uint8_t gc_execute_block(void) {
 800153a:	b09e      	sub	sp, #120	@ 0x78
    switch (gc_block.non_modal_command) {
 800153c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8001540:	2b12      	cmp	r3, #18
 8001542:	d079      	beq.n	8001638 <gc_execute_block+0x104>
 8001544:	d80d      	bhi.n	8001562 <gc_execute_block+0x2e>
 8001546:	2b04      	cmp	r3, #4
 8001548:	d058      	beq.n	80015fc <gc_execute_block+0xc8>
 800154a:	2b11      	cmp	r3, #17
 800154c:	d06d      	beq.n	800162a <gc_execute_block+0xf6>
            disableSteppers();
            break;
    }
    
    // Ejecutar comandos de movimiento
    switch (gc_block.modal.motion) {
 800154e:	7823      	ldrb	r3, [r4, #0]
 8001550:	2b03      	cmp	r3, #3
 8001552:	f200 8088 	bhi.w	8001666 <gc_execute_block+0x132>
 8001556:	e8df f013 	tbh	[pc, r3, lsl #1]
 800155a:	0076      	.short	0x0076
 800155c:	00be00a7 	.word	0x00be00a7
 8001560:	00ca      	.short	0x00ca
    switch (gc_block.non_modal_command) {
 8001562:	2b1c      	cmp	r3, #28
 8001564:	d05a      	beq.n	800161c <gc_execute_block+0xe8>
 8001566:	2b5c      	cmp	r3, #92	@ 0x5c
 8001568:	d1f1      	bne.n	800154e <gc_execute_block+0x1a>
            if (gc_block.values.x_defined) {
 800156a:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800156e:	4e6b      	ldr	r6, [pc, #428]	@ (800171c <gc_execute_block+0x1e8>)
 8001570:	b133      	cbz	r3, 8001580 <gc_execute_block+0x4c>
                currentX = gc_block.values.x * STEPS_PER_MM_X;
 8001572:	496b      	ldr	r1, [pc, #428]	@ (8001720 <gc_execute_block+0x1ec>)
 8001574:	68e0      	ldr	r0, [r4, #12]
 8001576:	f7ff fc05 	bl	8000d84 <__aeabi_fmul>
 800157a:	f7ff fddf 	bl	800113c <__aeabi_f2iz>
 800157e:	6030      	str	r0, [r6, #0]
            if (gc_block.values.y_defined) {
 8001580:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8001584:	4d67      	ldr	r5, [pc, #412]	@ (8001724 <gc_execute_block+0x1f0>)
 8001586:	b133      	cbz	r3, 8001596 <gc_execute_block+0x62>
                currentY = gc_block.values.y * STEPS_PER_MM_Y;
 8001588:	4965      	ldr	r1, [pc, #404]	@ (8001720 <gc_execute_block+0x1ec>)
 800158a:	6920      	ldr	r0, [r4, #16]
 800158c:	f7ff fbfa 	bl	8000d84 <__aeabi_fmul>
 8001590:	f7ff fdd4 	bl	800113c <__aeabi_f2iz>
 8001594:	6028      	str	r0, [r5, #0]
            if (gc_block.values.z_defined) {
 8001596:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800159a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001728 <gc_execute_block+0x1f4>
 800159e:	b13b      	cbz	r3, 80015b0 <gc_execute_block+0x7c>
                currentZ = gc_block.values.z * STEPS_PER_MM_Z;
 80015a0:	4962      	ldr	r1, [pc, #392]	@ (800172c <gc_execute_block+0x1f8>)
 80015a2:	6960      	ldr	r0, [r4, #20]
 80015a4:	f7ff fbee 	bl	8000d84 <__aeabi_fmul>
 80015a8:	f7ff fdc8 	bl	800113c <__aeabi_f2iz>
 80015ac:	f8c8 0000 	str.w	r0, [r8]
                   currentX/(float)STEPS_PER_MM_X, 
 80015b0:	6830      	ldr	r0, [r6, #0]
 80015b2:	f7ff fb93 	bl	8000cdc <__aeabi_i2f>
 80015b6:	495a      	ldr	r1, [pc, #360]	@ (8001720 <gc_execute_block+0x1ec>)
 80015b8:	f7ff fc98 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015bc:	f7fe ff34 	bl	8000428 <__aeabi_f2d>
 80015c0:	4606      	mov	r6, r0
                   currentZ/(float)STEPS_PER_MM_Z);
 80015c2:	f8d8 0000 	ldr.w	r0, [r8]
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015c6:	460f      	mov	r7, r1
                   currentZ/(float)STEPS_PER_MM_Z);
 80015c8:	f7ff fb88 	bl	8000cdc <__aeabi_i2f>
 80015cc:	4957      	ldr	r1, [pc, #348]	@ (800172c <gc_execute_block+0x1f8>)
 80015ce:	f7ff fc8d 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015d2:	f7fe ff29 	bl	8000428 <__aeabi_f2d>
 80015d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
                   currentY/(float)STEPS_PER_MM_Y, 
 80015da:	6828      	ldr	r0, [r5, #0]
 80015dc:	f7ff fb7e 	bl	8000cdc <__aeabi_i2f>
 80015e0:	494f      	ldr	r1, [pc, #316]	@ (8001720 <gc_execute_block+0x1ec>)
 80015e2:	f7ff fc83 	bl	8000eec <__aeabi_fdiv>
            sprintf(msg, "Posición establecida: X%.2f Y%.2f Z%.2f\r\n",
 80015e6:	f7fe ff1f 	bl	8000428 <__aeabi_f2d>
 80015ea:	4632      	mov	r2, r6
 80015ec:	e9cd 0100 	strd	r0, r1, [sp]
 80015f0:	463b      	mov	r3, r7
 80015f2:	494f      	ldr	r1, [pc, #316]	@ (8001730 <gc_execute_block+0x1fc>)
 80015f4:	a805      	add	r0, sp, #20
 80015f6:	f006 fde7 	bl	80081c8 <siprintf>
 80015fa:	e007      	b.n	800160c <gc_execute_block+0xd8>
            if (gc_block.values.p > 0) {
 80015fc:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8001600:	2a00      	cmp	r2, #0
 8001602:	d0a4      	beq.n	800154e <gc_execute_block+0x1a>
                sprintf(msg, "Pausa de %d ms completada\r\n", gc_block.values.p);
 8001604:	494b      	ldr	r1, [pc, #300]	@ (8001734 <gc_execute_block+0x200>)
 8001606:	a805      	add	r0, sp, #20
 8001608:	f006 fdde 	bl	80081c8 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 800160c:	a805      	add	r0, sp, #20
 800160e:	f7fe fd9f 	bl	8000150 <strlen>
 8001612:	b281      	uxth	r1, r0
 8001614:	a805      	add	r0, sp, #20
 8001616:	f005 fcb3 	bl	8006f80 <CDC_Transmit_FS>
            break;
 800161a:	e798      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Ejecutando homing...\r\n", 22);
 800161c:	2116      	movs	r1, #22
 800161e:	4846      	ldr	r0, [pc, #280]	@ (8001738 <gc_execute_block+0x204>)
 8001620:	f005 fcae 	bl	8006f80 <CDC_Transmit_FS>
            performHoming();
 8001624:	f000 fb94 	bl	8001d50 <performHoming>
            break;
 8001628:	e791      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores habilitados (M17)\r\n", 27);
 800162a:	211b      	movs	r1, #27
 800162c:	4843      	ldr	r0, [pc, #268]	@ (800173c <gc_execute_block+0x208>)
 800162e:	f005 fca7 	bl	8006f80 <CDC_Transmit_FS>
            enableSteppers();
 8001632:	f001 fd01 	bl	8003038 <enableSteppers>
            break;
 8001636:	e78a      	b.n	800154e <gc_execute_block+0x1a>
            CDC_Transmit_FS((uint8_t*)"Motores deshabilitados\r\n", 24);
 8001638:	2118      	movs	r1, #24
 800163a:	4841      	ldr	r0, [pc, #260]	@ (8001740 <gc_execute_block+0x20c>)
 800163c:	f005 fca0 	bl	8006f80 <CDC_Transmit_FS>
            disableSteppers();
 8001640:	f001 fd14 	bl	800306c <disableSteppers>
            break;
 8001644:	e783      	b.n	800154e <gc_execute_block+0x1a>
        case MOTION_MODE_SEEK:    // G0 - Movimiento rápido
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 8001646:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8001648:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800164c:	b902      	cbnz	r2, 8001650 <gc_execute_block+0x11c>
 800164e:	b153      	cbz	r3, 8001666 <gc_execute_block+0x132>
                moveAxesRapidCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z,
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800165c:	6962      	ldr	r2, [r4, #20]
 800165e:	6921      	ldr	r1, [r4, #16]
 8001660:	68e0      	ldr	r0, [r4, #12]
 8001662:	f000 f959 	bl	8001918 <moveAxesRapidCallback>
            }
            break;
    }
    
    // Ejecutar comandos M
    switch (gc_block.modal.spindle) {
 8001666:	79a3      	ldrb	r3, [r4, #6]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d048      	beq.n	80016fe <gc_execute_block+0x1ca>
 800166c:	2b05      	cmp	r3, #5
 800166e:	d049      	beq.n	8001704 <gc_execute_block+0x1d0>
 8001670:	2b03      	cmp	r3, #3
 8001672:	d103      	bne.n	800167c <gc_execute_block+0x148>
        case 3:  // M3 - Spindle CW
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CW)\r\n", 23);
 8001674:	2117      	movs	r1, #23
 8001676:	4833      	ldr	r0, [pc, #204]	@ (8001744 <gc_execute_block+0x210>)
            break;
        case 4:  // M4 - Spindle CCW  
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
            break;
        case 5:  // M5 - Spindle off
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001678:	f005 fc82 	bl	8006f80 <CDC_Transmit_FS>
            break;
    }
    
    switch (gc_block.modal.coolant) {
 800167c:	79e3      	ldrb	r3, [r4, #7]
 800167e:	2b08      	cmp	r3, #8
 8001680:	d043      	beq.n	800170a <gc_execute_block+0x1d6>
 8001682:	2b09      	cmp	r3, #9
 8001684:	d044      	beq.n	8001710 <gc_execute_block+0x1dc>
 8001686:	2b07      	cmp	r3, #7
 8001688:	d103      	bne.n	8001692 <gc_execute_block+0x15e>
        case 7:  // M7 - Mist coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante niebla activado\r\n", 30);
 800168a:	211e      	movs	r1, #30
 800168c:	482e      	ldr	r0, [pc, #184]	@ (8001748 <gc_execute_block+0x214>)
            break;
        case 8:  // M8 - Flood coolant
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
            break;
        case 9:  // M9 - Coolant off
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 800168e:	f005 fc77 	bl	8006f80 <CDC_Transmit_FS>
            break;
    }
    
    // Actualizar estado modal persistente
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 8001692:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <gc_execute_block+0x218>)
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <gc_execute_block+0x1e4>)
 8001696:	cb03      	ldmia	r3!, {r0, r1}
 8001698:	6010      	str	r0, [r2, #0]
    
    return STATUS_OK;
}
 800169a:	2000      	movs	r0, #0
    memcpy(&gc_state_modal, &gc_block.modal, sizeof(gc_modal_t));
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	6051      	str	r1, [r2, #4]
 80016a0:	7213      	strb	r3, [r2, #8]
}
 80016a2:	b01e      	add	sp, #120	@ 0x78
 80016a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.z_defined) {
 80016ae:	b90a      	cbnz	r2, 80016b4 <gc_execute_block+0x180>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0d8      	beq.n	8001666 <gc_execute_block+0x132>
                moveAxesLinearCallback(gc_block.values.x, gc_block.values.y, gc_block.values.z, gc_block.values.f,
 80016b4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80016b8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80016bc:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	69a3      	ldr	r3, [r4, #24]
 80016ca:	6962      	ldr	r2, [r4, #20]
 80016cc:	6921      	ldr	r1, [r4, #16]
 80016ce:	68e0      	ldr	r0, [r4, #12]
 80016d0:	f000 f99a 	bl	8001a08 <moveAxesLinearCallback>
 80016d4:	e7c7      	b.n	8001666 <gc_execute_block+0x132>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 80016d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016d8:	b913      	cbnz	r3, 80016e0 <gc_execute_block+0x1ac>
 80016da:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80016de:	b133      	cbz	r3, 80016ee <gc_execute_block+0x1ba>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 1);  // 1 para sentido horario
 80016e0:	2301      	movs	r3, #1
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 80016e2:	6a22      	ldr	r2, [r4, #32]
 80016e4:	6921      	ldr	r1, [r4, #16]
 80016e6:	68e0      	ldr	r0, [r4, #12]
 80016e8:	f000 f95e 	bl	80019a8 <moveAxesArcCallback>
                break;
 80016ec:	e7bb      	b.n	8001666 <gc_execute_block+0x132>
            if (gc_block.values.x_defined || gc_block.values.y_defined || gc_block.values.r_defined) {
 80016ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80016f0:	b91b      	cbnz	r3, 80016fa <gc_execute_block+0x1c6>
 80016f2:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0b5      	beq.n	8001666 <gc_execute_block+0x132>
                moveAxesArcCallback(gc_block.values.x, gc_block.values.y, gc_block.values.r, 0);  // 0 para sentido antihorario
 80016fa:	2300      	movs	r3, #0
 80016fc:	e7f1      	b.n	80016e2 <gc_execute_block+0x1ae>
            CDC_Transmit_FS((uint8_t*)"Spindle activado (CCW)\r\n", 24);
 80016fe:	2118      	movs	r1, #24
 8001700:	4813      	ldr	r0, [pc, #76]	@ (8001750 <gc_execute_block+0x21c>)
 8001702:	e7b9      	b.n	8001678 <gc_execute_block+0x144>
            CDC_Transmit_FS((uint8_t*)"Spindle desactivado\r\n", 21);
 8001704:	2115      	movs	r1, #21
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <gc_execute_block+0x220>)
 8001708:	e7b6      	b.n	8001678 <gc_execute_block+0x144>
            CDC_Transmit_FS((uint8_t*)"Refrigerante inundación activado\r\n", 34);
 800170a:	2122      	movs	r1, #34	@ 0x22
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <gc_execute_block+0x224>)
 800170e:	e7be      	b.n	800168e <gc_execute_block+0x15a>
            CDC_Transmit_FS((uint8_t*)"Refrigerante desactivado\r\n", 26);
 8001710:	211a      	movs	r1, #26
 8001712:	4812      	ldr	r0, [pc, #72]	@ (800175c <gc_execute_block+0x228>)
 8001714:	e7bb      	b.n	800168e <gc_execute_block+0x15a>
 8001716:	bf00      	nop
 8001718:	2000037c 	.word	0x2000037c
 800171c:	20002374 	.word	0x20002374
 8001720:	429e0000 	.word	0x429e0000
 8001724:	20002370 	.word	0x20002370
 8001728:	2000236c 	.word	0x2000236c
 800172c:	4575a000 	.word	0x4575a000
 8001730:	0800bfcb 	.word	0x0800bfcb
 8001734:	0800bf98 	.word	0x0800bf98
 8001738:	0800bfb4 	.word	0x0800bfb4
 800173c:	0800bff6 	.word	0x0800bff6
 8001740:	0800c012 	.word	0x0800c012
 8001744:	0800c02b 	.word	0x0800c02b
 8001748:	0800c072 	.word	0x0800c072
 800174c:	20000370 	.word	0x20000370
 8001750:	0800c043 	.word	0x0800c043
 8001754:	0800c05c 	.word	0x0800c05c
 8001758:	0800c091 	.word	0x0800c091
 800175c:	0800c0b5 	.word	0x0800c0b5

08001760 <gc_execute_line>:
/**
  * @brief  Función principal para ejecutar una línea G-code completa
  * @param  line: Línea de G-code a ejecutar
  * @retval Código de estado (STATUS_OK si es exitoso)
  */
uint8_t gc_execute_line(char *line) {
 8001760:	b508      	push	{r3, lr}
 8001762:	1e42      	subs	r2, r0, #1
    uint8_t status_code;
    
    // Convertir línea a mayúsculas y limpiar
    for (int i = 0; line[i] != 0; i++) {
 8001764:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001768:	b933      	cbnz	r3, 8001778 <gc_execute_line+0x18>
            line[i] -= 32;  // Convertir a mayúscula
        }
    }
    
    // Parsear la línea
    status_code = gc_parse_line(line);
 800176a:	f7ff fdc9 	bl	8001300 <gc_parse_line>
    if (status_code != STATUS_OK) {
 800176e:	b950      	cbnz	r0, 8001786 <gc_execute_line+0x26>
    if (status_code != STATUS_OK) {
        return status_code;
    }
    
    return STATUS_OK;
}
 8001770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    status_code = gc_execute_block();
 8001774:	f7ff bede 	b.w	8001534 <gc_execute_block>
        if (line[i] >= 'a' && line[i] <= 'z') {
 8001778:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 800177c:	2919      	cmp	r1, #25
            line[i] -= 32;  // Convertir a mayúscula
 800177e:	bf9c      	itt	ls
 8001780:	3b20      	subls	r3, #32
 8001782:	7013      	strbls	r3, [r2, #0]
    for (int i = 0; line[i] != 0; i++) {
 8001784:	e7ee      	b.n	8001764 <gc_execute_line+0x4>
}
 8001786:	bd08      	pop	{r3, pc}

08001788 <report_status_message>:
/**
  * @brief  Envía mensaje de estado según el código de error
  * @param  status_code: Código de estado a reportar
  * @retval None
  */
void report_status_message(uint8_t status_code) {
 8001788:	b500      	push	{lr}
 800178a:	4602      	mov	r2, r0
 800178c:	b089      	sub	sp, #36	@ 0x24
    switch (status_code) {
 800178e:	281c      	cmp	r0, #28
 8001790:	d83e      	bhi.n	8001810 <report_status_message+0x88>
 8001792:	e8df f000 	tbb	[pc, r0]
 8001796:	160f      	.short	0x160f
 8001798:	3d1f1c19 	.word	0x3d1f1c19
 800179c:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a0:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a4:	3d3d3d3d 	.word	0x3d3d3d3d
 80017a8:	25223d3d 	.word	0x25223d3d
 80017ac:	312e2b28 	.word	0x312e2b28
 80017b0:	3734      	.short	0x3734
 80017b2:	3a          	.byte	0x3a
 80017b3:	00          	.byte	0x00
        case STATUS_OK:
            CDC_Transmit_FS((uint8_t*)"ok\r\n", 4);
 80017b4:	2104      	movs	r1, #4
 80017b6:	481d      	ldr	r0, [pc, #116]	@ (800182c <report_status_message+0xa4>)
                sprintf(msg, "error:%d\r\n", status_code);
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
            }
            break;
    }
}
 80017b8:	b009      	add	sp, #36	@ 0x24
 80017ba:	f85d eb04 	ldr.w	lr, [sp], #4
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 80017be:	f005 bbdf 	b.w	8006f80 <CDC_Transmit_FS>
            CDC_Transmit_FS((uint8_t*)"error:1 (Expected command letter)\r\n", 36);
 80017c2:	2124      	movs	r1, #36	@ 0x24
 80017c4:	481a      	ldr	r0, [pc, #104]	@ (8001830 <report_status_message+0xa8>)
 80017c6:	e7f7      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:2 (Bad number format)\r\n", 30);
 80017c8:	211e      	movs	r1, #30
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <report_status_message+0xac>)
 80017cc:	e7f4      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:3 (Invalid statement)\r\n", 30);
 80017ce:	211e      	movs	r1, #30
 80017d0:	4819      	ldr	r0, [pc, #100]	@ (8001838 <report_status_message+0xb0>)
 80017d2:	e7f1      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:4 (Negative value)\r\n", 27);
 80017d4:	211b      	movs	r1, #27
 80017d6:	4819      	ldr	r0, [pc, #100]	@ (800183c <report_status_message+0xb4>)
 80017d8:	e7ee      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:20 (Unsupported command)\r\n", 33);
 80017da:	2121      	movs	r1, #33	@ 0x21
 80017dc:	4818      	ldr	r0, [pc, #96]	@ (8001840 <report_status_message+0xb8>)
 80017de:	e7eb      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:21 (Modal group violation)\r\n", 35);
 80017e0:	2123      	movs	r1, #35	@ 0x23
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <report_status_message+0xbc>)
 80017e4:	e7e8      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:22 (Undefined feed rate)\r\n", 33);
 80017e6:	2121      	movs	r1, #33	@ 0x21
 80017e8:	4817      	ldr	r0, [pc, #92]	@ (8001848 <report_status_message+0xc0>)
 80017ea:	e7e5      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:23 (Command value not integer)\r\n", 39);
 80017ec:	2127      	movs	r1, #39	@ 0x27
 80017ee:	4817      	ldr	r0, [pc, #92]	@ (800184c <report_status_message+0xc4>)
 80017f0:	e7e2      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:24 (Axis command conflict)\r\n", 35);
 80017f2:	2123      	movs	r1, #35	@ 0x23
 80017f4:	4816      	ldr	r0, [pc, #88]	@ (8001850 <report_status_message+0xc8>)
 80017f6:	e7df      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:25 (Word repeated)\r\n", 27);
 80017f8:	211b      	movs	r1, #27
 80017fa:	4816      	ldr	r0, [pc, #88]	@ (8001854 <report_status_message+0xcc>)
 80017fc:	e7dc      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:26 (No axis words)\r\n", 27);
 80017fe:	211b      	movs	r1, #27
 8001800:	4815      	ldr	r0, [pc, #84]	@ (8001858 <report_status_message+0xd0>)
 8001802:	e7d9      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:27 (Invalid line number)\r\n", 33);
 8001804:	2121      	movs	r1, #33	@ 0x21
 8001806:	4815      	ldr	r0, [pc, #84]	@ (800185c <report_status_message+0xd4>)
 8001808:	e7d6      	b.n	80017b8 <report_status_message+0x30>
            CDC_Transmit_FS((uint8_t*)"error:28 (Value word missing)\r\n", 32);
 800180a:	2120      	movs	r1, #32
 800180c:	4814      	ldr	r0, [pc, #80]	@ (8001860 <report_status_message+0xd8>)
 800180e:	e7d3      	b.n	80017b8 <report_status_message+0x30>
                sprintf(msg, "error:%d\r\n", status_code);
 8001810:	4914      	ldr	r1, [pc, #80]	@ (8001864 <report_status_message+0xdc>)
 8001812:	4668      	mov	r0, sp
 8001814:	f006 fcd8 	bl	80081c8 <siprintf>
                CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8001818:	4668      	mov	r0, sp
 800181a:	f7fe fc99 	bl	8000150 <strlen>
 800181e:	b281      	uxth	r1, r0
 8001820:	4668      	mov	r0, sp
 8001822:	f005 fbad 	bl	8006f80 <CDC_Transmit_FS>
}
 8001826:	b009      	add	sp, #36	@ 0x24
 8001828:	f85d fb04 	ldr.w	pc, [sp], #4
 800182c:	0800c0d0 	.word	0x0800c0d0
 8001830:	0800c0d5 	.word	0x0800c0d5
 8001834:	0800c0f9 	.word	0x0800c0f9
 8001838:	0800c117 	.word	0x0800c117
 800183c:	0800c135 	.word	0x0800c135
 8001840:	0800c150 	.word	0x0800c150
 8001844:	0800c171 	.word	0x0800c171
 8001848:	0800c194 	.word	0x0800c194
 800184c:	0800c1b5 	.word	0x0800c1b5
 8001850:	0800c1dc 	.word	0x0800c1dc
 8001854:	0800c1ff 	.word	0x0800c1ff
 8001858:	0800c21a 	.word	0x0800c21a
 800185c:	0800c235 	.word	0x0800c235
 8001860:	0800c256 	.word	0x0800c256
 8001864:	0800c276 	.word	0x0800c276

08001868 <isEndstopPressed.part.0>:

// Función para verificar si un final de carrera está presionado
bool isEndstopPressed(char axis) {
    switch(axis) {
        case 'X':
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 8001868:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
bool isEndstopPressed(char axis) {
 800186c:	b508      	push	{r3, lr}
            return (HAL_GPIO_ReadPin(GPIOB, X_MIN_PIN) == GPIO_PIN_RESET);
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <isEndstopPressed.part.0+0x14>)
 8001870:	f002 fea8 	bl	80045c4 <HAL_GPIO_ReadPin>
        case 'Z':
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
        default:
            return false;
    }
}
 8001874:	fab0 f080 	clz	r0, r0
 8001878:	0940      	lsrs	r0, r0, #5
 800187a:	bd08      	pop	{r3, pc}
 800187c:	40010c00 	.word	0x40010c00

08001880 <sendUSBText>:
void sendUSBText(const char* message) {
 8001880:	b510      	push	{r4, lr}
 8001882:	4604      	mov	r4, r0
    uint16_t len = strlen(message);
 8001884:	f7fe fc64 	bl	8000150 <strlen>
    CDC_Transmit_Queued((uint8_t*)message, len);
 8001888:	b281      	uxth	r1, r0
 800188a:	4620      	mov	r0, r4
}
 800188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CDC_Transmit_Queued((uint8_t*)message, len);
 8001890:	f005 bc02 	b.w	8007098 <CDC_Transmit_Queued>

08001894 <setup>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001894:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <setup+0x7c>)
void setup(void) {
 8001896:	b538      	push	{r3, r4, r5, lr}
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001898:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 800189c:	2503      	movs	r5, #3
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800189e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018a6:	f5a2 425d 	sub.w	r2, r2, #56576	@ 0xdd00
 80018aa:	6813      	ldr	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 80018ac:	4c19      	ldr	r4, [pc, #100]	@ (8001914 <setup+0x80>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]
    enableSteppers();
 80018b4:	f001 fbc0 	bl	8003038 <enableSteppers>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	4815      	ldr	r0, [pc, #84]	@ (8001914 <setup+0x80>)
 80018be:	f002 fe87 	bl	80045d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	4813      	ldr	r0, [pc, #76]	@ (8001914 <setup+0x80>)
 80018c8:	f002 fe82 	bl	80045d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	2102      	movs	r1, #2
 80018d0:	4620      	mov	r0, r4
 80018d2:	f002 fe7d 	bl	80045d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	4620      	mov	r0, r4
 80018da:	4611      	mov	r1, r2
 80018dc:	f002 fe78 	bl	80045d0 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 80018e0:	2096      	movs	r0, #150	@ 0x96
 80018e2:	f002 fd25 	bl	8004330 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2102      	movs	r1, #2
 80018ea:	4620      	mov	r0, r4
 80018ec:	f002 fe70 	bl	80045d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2101      	movs	r1, #1
 80018f4:	4620      	mov	r0, r4
 80018f6:	f002 fe6b 	bl	80045d0 <HAL_GPIO_WritePin>
        HAL_Delay(150);
 80018fa:	2096      	movs	r0, #150	@ 0x96
 80018fc:	f002 fd18 	bl	8004330 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8001900:	3d01      	subs	r5, #1
 8001902:	d1e3      	bne.n	80018cc <setup+0x38>
    gc_init();
 8001904:	f7ff fc96 	bl	8001234 <gc_init>
}
 8001908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    planner_init();
 800190c:	f002 bb90 	b.w	8004030 <planner_init>
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	40010c00 	.word	0x40010c00

08001918 <moveAxesRapidCallback>:
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8001918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800191c:	461f      	mov	r7, r3
    if (plannerEnabled) {
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <moveAxesRapidCallback+0x80>)
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8001920:	4604      	mov	r4, r0
    if (plannerEnabled) {
 8001922:	781b      	ldrb	r3, [r3, #0]
void moveAxesRapidCallback(float x, float y, float z, bool x_defined, bool y_defined, bool z_defined) {
 8001924:	460d      	mov	r5, r1
 8001926:	4616      	mov	r6, r2
 8001928:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 800192c:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8001930:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 800199c <moveAxesRapidCallback+0x84>
    if (plannerEnabled) {
 8001934:	b1cb      	cbz	r3, 800196a <moveAxesRapidCallback+0x52>
        planner_get_current_position(target);
 8001936:	a801      	add	r0, sp, #4
 8001938:	f002 fb66 	bl	8004008 <planner_get_current_position>
        if (x_defined) target[0] = x;
 800193c:	b107      	cbz	r7, 8001940 <moveAxesRapidCallback+0x28>
 800193e:	9401      	str	r4, [sp, #4]
        if (y_defined) target[1] = y;
 8001940:	f1ba 0f00 	cmp.w	sl, #0
 8001944:	d000      	beq.n	8001948 <moveAxesRapidCallback+0x30>
 8001946:	9502      	str	r5, [sp, #8]
        if (z_defined) target[2] = z;
 8001948:	f1b9 0f00 	cmp.w	r9, #0
 800194c:	d000      	beq.n	8001950 <moveAxesRapidCallback+0x38>
 800194e:	9603      	str	r6, [sp, #12]
        if (!planner_buffer_line(target, rapidRate, true)) {
 8001950:	2201      	movs	r2, #1
 8001952:	f8d8 1000 	ldr.w	r1, [r8]
 8001956:	a801      	add	r0, sp, #4
 8001958:	f002 faca 	bl	8003ef0 <planner_buffer_line>
 800195c:	b910      	cbnz	r0, 8001964 <moveAxesRapidCallback+0x4c>
            sendUSBText("error: buffer planner lleno\r\n");
 800195e:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <moveAxesRapidCallback+0x88>)
 8001960:	f7ff ff8e 	bl	8001880 <sendUSBText>
}
 8001964:	b004      	add	sp, #16
 8001966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        float target_x = x_defined ? x : NAN;
 800196a:	b907      	cbnz	r7, 800196e <moveAxesRapidCallback+0x56>
 800196c:	4c0d      	ldr	r4, [pc, #52]	@ (80019a4 <moveAxesRapidCallback+0x8c>)
        float target_y = y_defined ? y : NAN;
 800196e:	f1ba 0f00 	cmp.w	sl, #0
 8001972:	d100      	bne.n	8001976 <moveAxesRapidCallback+0x5e>
 8001974:	4d0b      	ldr	r5, [pc, #44]	@ (80019a4 <moveAxesRapidCallback+0x8c>)
        float target_z = z_defined ? z : NAN;
 8001976:	f1b9 0f00 	cmp.w	r9, #0
 800197a:	d100      	bne.n	800197e <moveAxesRapidCallback+0x66>
 800197c:	4e09      	ldr	r6, [pc, #36]	@ (80019a4 <moveAxesRapidCallback+0x8c>)
        moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 800197e:	2301      	movs	r3, #1
 8001980:	4632      	mov	r2, r6
 8001982:	4629      	mov	r1, r5
 8001984:	4620      	mov	r0, r4
 8001986:	930c      	str	r3, [sp, #48]	@ 0x30
 8001988:	f8d8 3000 	ldr.w	r3, [r8]
}
 800198c:	b004      	add	sp, #16
 800198e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        moveAxesWithFeedRate(target_x, target_y, target_z, rapidRate, true);
 8001992:	f001 bb85 	b.w	80030a0 <moveAxesWithFeedRate>
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	0800c281 	.word	0x0800c281
 80019a4:	7fc00000 	.word	0x7fc00000

080019a8 <moveAxesArcCallback>:
void moveAxesArcCallback(float x, float y, float r, bool clockwise) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (plannerEnabled) {
 80019aa:	f8df c050 	ldr.w	ip, [pc, #80]	@ 80019fc <moveAxesArcCallback+0x54>
void moveAxesArcCallback(float x, float y, float r, bool clockwise) {
 80019ae:	4607      	mov	r7, r0
    if (plannerEnabled) {
 80019b0:	f89c c000 	ldrb.w	ip, [ip]
void moveAxesArcCallback(float x, float y, float r, bool clockwise) {
 80019b4:	460e      	mov	r6, r1
 80019b6:	4615      	mov	r5, r2
 80019b8:	461c      	mov	r4, r3
 80019ba:	b089      	sub	sp, #36	@ 0x24
    if (plannerEnabled) {
 80019bc:	f1bc 0f00 	cmp.w	ip, #0
 80019c0:	d016      	beq.n	80019f0 <moveAxesArcCallback+0x48>
        planner_get_current_position(target);
 80019c2:	a805      	add	r0, sp, #20
 80019c4:	f002 fb20 	bl	8004008 <planner_get_current_position>
        float offset[2] = {r, 0}; // En modo R, solo se usa el primer elemento
 80019c8:	2300      	movs	r3, #0
 80019ca:	9304      	str	r3, [sp, #16]
        if (!planner_buffer_arc(target, offset, clockwise, true, currentFeedRate)) {
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <moveAxesArcCallback+0x58>)
 80019ce:	4622      	mov	r2, r4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	a903      	add	r1, sp, #12
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	a805      	add	r0, sp, #20
 80019d8:	2301      	movs	r3, #1
        target[0] = x;
 80019da:	9705      	str	r7, [sp, #20]
        target[1] = y;
 80019dc:	9606      	str	r6, [sp, #24]
        float offset[2] = {r, 0}; // En modo R, solo se usa el primer elemento
 80019de:	9503      	str	r5, [sp, #12]
        if (!planner_buffer_arc(target, offset, clockwise, true, currentFeedRate)) {
 80019e0:	f002 f8b6 	bl	8003b50 <planner_buffer_arc>
 80019e4:	b910      	cbnz	r0, 80019ec <moveAxesArcCallback+0x44>
            sendUSBText("error: buffer planner lleno o arco inválido\r\n");
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <moveAxesArcCallback+0x5c>)
 80019e8:	f7ff ff4a 	bl	8001880 <sendUSBText>
}
 80019ec:	b009      	add	sp, #36	@ 0x24
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f0:	b009      	add	sp, #36	@ 0x24
 80019f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        arc_move_r(x, y, r, clockwise);
 80019f6:	f001 bd4f 	b.w	8003498 <arc_move_r>
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	0800c29f 	.word	0x0800c29f

08001a08 <moveAxesLinearCallback>:
void moveAxesLinearCallback(float x, float y, float z, float feedRate, bool x_defined, bool y_defined, bool z_defined, bool f_defined) {
 8001a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	461f      	mov	r7, r3
 8001a10:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
 8001a18:	4616      	mov	r6, r2
 8001a1a:	f89d b038 	ldrb.w	fp, [sp, #56]	@ 0x38
 8001a1e:	f89d a03c 	ldrb.w	sl, [sp, #60]	@ 0x3c
 8001a22:	f89d 9040 	ldrb.w	r9, [sp, #64]	@ 0x40
 8001a26:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8001aa8 <moveAxesLinearCallback+0xa0>
    if (f_defined && feedRate > 0) {
 8001a2a:	b133      	cbz	r3, 8001a3a <moveAxesLinearCallback+0x32>
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4638      	mov	r0, r7
 8001a30:	f7ff fb64 	bl	80010fc <__aeabi_fcmpgt>
 8001a34:	b108      	cbz	r0, 8001a3a <moveAxesLinearCallback+0x32>
        currentFeedRate = feedRate;
 8001a36:	f8c8 7000 	str.w	r7, [r8]
    if (plannerEnabled) {
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <moveAxesLinearCallback+0xa4>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b1db      	cbz	r3, 8001a78 <moveAxesLinearCallback+0x70>
        planner_get_current_position(target);
 8001a40:	a801      	add	r0, sp, #4
 8001a42:	f002 fae1 	bl	8004008 <planner_get_current_position>
        if (x_defined) target[0] = x;
 8001a46:	f1bb 0f00 	cmp.w	fp, #0
 8001a4a:	d000      	beq.n	8001a4e <moveAxesLinearCallback+0x46>
 8001a4c:	9401      	str	r4, [sp, #4]
        if (y_defined) target[1] = y;
 8001a4e:	f1ba 0f00 	cmp.w	sl, #0
 8001a52:	d000      	beq.n	8001a56 <moveAxesLinearCallback+0x4e>
 8001a54:	9502      	str	r5, [sp, #8]
        if (z_defined) target[2] = z;
 8001a56:	f1b9 0f00 	cmp.w	r9, #0
 8001a5a:	d000      	beq.n	8001a5e <moveAxesLinearCallback+0x56>
 8001a5c:	9603      	str	r6, [sp, #12]
        if (!planner_buffer_line(target, currentFeedRate, false)) {
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8d8 1000 	ldr.w	r1, [r8]
 8001a64:	a801      	add	r0, sp, #4
 8001a66:	f002 fa43 	bl	8003ef0 <planner_buffer_line>
 8001a6a:	b910      	cbnz	r0, 8001a72 <moveAxesLinearCallback+0x6a>
            sendUSBText("error: buffer planner lleno\r\n");
 8001a6c:	4810      	ldr	r0, [pc, #64]	@ (8001ab0 <moveAxesLinearCallback+0xa8>)
 8001a6e:	f7ff ff07 	bl	8001880 <sendUSBText>
}
 8001a72:	b005      	add	sp, #20
 8001a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        float target_x = x_defined ? x : NAN;
 8001a78:	f1bb 0f00 	cmp.w	fp, #0
 8001a7c:	d100      	bne.n	8001a80 <moveAxesLinearCallback+0x78>
 8001a7e:	4c0d      	ldr	r4, [pc, #52]	@ (8001ab4 <moveAxesLinearCallback+0xac>)
        float target_y = y_defined ? y : NAN;
 8001a80:	f1ba 0f00 	cmp.w	sl, #0
 8001a84:	d100      	bne.n	8001a88 <moveAxesLinearCallback+0x80>
 8001a86:	4d0b      	ldr	r5, [pc, #44]	@ (8001ab4 <moveAxesLinearCallback+0xac>)
        float target_z = z_defined ? z : NAN;
 8001a88:	f1b9 0f00 	cmp.w	r9, #0
 8001a8c:	d100      	bne.n	8001a90 <moveAxesLinearCallback+0x88>
 8001a8e:	4e09      	ldr	r6, [pc, #36]	@ (8001ab4 <moveAxesLinearCallback+0xac>)
        moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001a90:	2300      	movs	r3, #0
 8001a92:	4632      	mov	r2, r6
 8001a94:	4629      	mov	r1, r5
 8001a96:	4620      	mov	r0, r4
 8001a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8001a9a:	f8d8 3000 	ldr.w	r3, [r8]
}
 8001a9e:	b005      	add	sp, #20
 8001aa0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        moveAxesWithFeedRate(target_x, target_y, target_z, currentFeedRate, false);
 8001aa4:	f001 bafc 	b.w	80030a0 <moveAxesWithFeedRate>
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	0800c281 	.word	0x0800c281
 8001ab4:	7fc00000 	.word	0x7fc00000

08001ab8 <showConfiguration>:
void showConfiguration(void) {
 8001ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001abc:	25c8      	movs	r5, #200	@ 0xc8
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001abe:	4c81      	ldr	r4, [pc, #516]	@ (8001cc4 <showConfiguration+0x20c>)
void showConfiguration(void) {
 8001ac0:	b085      	sub	sp, #20
    sendUSBText("=== CONFIGURACIÓN CNC ===\r\n");
 8001ac2:	4881      	ldr	r0, [pc, #516]	@ (8001cc8 <showConfiguration+0x210>)
 8001ac4:	f7ff fedc 	bl	8001880 <sendUSBText>
    sprintf(outputBuffer, "Steps per mm X: %d\r\n", STEPS_PER_MM_X);
 8001ac8:	224f      	movs	r2, #79	@ 0x4f
 8001aca:	4980      	ldr	r1, [pc, #512]	@ (8001ccc <showConfiguration+0x214>)
 8001acc:	4620      	mov	r0, r4
 8001ace:	f006 fb7b 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff fed4 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ad8:	462a      	mov	r2, r5
 8001ada:	2100      	movs	r1, #0
 8001adc:	4620      	mov	r0, r4
 8001ade:	f006 fbd8 	bl	8008292 <memset>
    sprintf(outputBuffer, "Steps per mm Y: %d\r\n", STEPS_PER_MM_Y);
 8001ae2:	224f      	movs	r2, #79	@ 0x4f
 8001ae4:	497a      	ldr	r1, [pc, #488]	@ (8001cd0 <showConfiguration+0x218>)
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f006 fb6e 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fec7 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001af2:	462a      	mov	r2, r5
 8001af4:	2100      	movs	r1, #0
 8001af6:	4620      	mov	r0, r4
 8001af8:	f006 fbcb 	bl	8008292 <memset>
    sprintf(outputBuffer, "Steps per mm Z: %d\r\n", STEPS_PER_MM_Z);
 8001afc:	f640 725a 	movw	r2, #3930	@ 0xf5a
 8001b00:	4974      	ldr	r1, [pc, #464]	@ (8001cd4 <showConfiguration+0x21c>)
 8001b02:	4620      	mov	r0, r4
 8001b04:	f006 fb60 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff feb9 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b0e:	462a      	mov	r2, r5
 8001b10:	2100      	movs	r1, #0
 8001b12:	4620      	mov	r0, r4
 8001b14:	f006 fbbd 	bl	8008292 <memset>
    sprintf(outputBuffer, "Step delay: %d us\r\n", STEP_DELAY_US);
 8001b18:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b1c:	496e      	ldr	r1, [pc, #440]	@ (8001cd8 <showConfiguration+0x220>)
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f006 fb52 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7ff feab 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f006 fbaf 	bl	8008292 <memset>
    int feed_int = (int)currentFeedRate;
 8001b34:	4b69      	ldr	r3, [pc, #420]	@ (8001cdc <showConfiguration+0x224>)
 8001b36:	681f      	ldr	r7, [r3, #0]
 8001b38:	4638      	mov	r0, r7
 8001b3a:	f7ff faff 	bl	800113c <__aeabi_f2iz>
 8001b3e:	4606      	mov	r6, r0
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001b40:	f7ff f8cc 	bl	8000cdc <__aeabi_i2f>
 8001b44:	4601      	mov	r1, r0
 8001b46:	4638      	mov	r0, r7
 8001b48:	f7ff f812 	bl	8000b70 <__aeabi_fsub>
 8001b4c:	4964      	ldr	r1, [pc, #400]	@ (8001ce0 <showConfiguration+0x228>)
 8001b4e:	f7ff f919 	bl	8000d84 <__aeabi_fmul>
 8001b52:	f7ff faf3 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001b56:	4632      	mov	r2, r6
    int feed_dec = (int)((currentFeedRate - feed_int) * 10);
 8001b58:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Feed rate actual: %d.%d mm/min\r\n", feed_int, feed_dec);
 8001b5a:	4962      	ldr	r1, [pc, #392]	@ (8001ce4 <showConfiguration+0x22c>)
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f006 fb33 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff fe8c 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001b68:	462a      	mov	r2, r5
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f006 fb90 	bl	8008292 <memset>
    int rapid_int = (int)rapidRate;
 8001b72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce8 <showConfiguration+0x230>)
 8001b74:	681f      	ldr	r7, [r3, #0]
 8001b76:	4638      	mov	r0, r7
 8001b78:	f7ff fae0 	bl	800113c <__aeabi_f2iz>
 8001b7c:	4606      	mov	r6, r0
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001b7e:	f7ff f8ad 	bl	8000cdc <__aeabi_i2f>
 8001b82:	4601      	mov	r1, r0
 8001b84:	4638      	mov	r0, r7
 8001b86:	f7fe fff3 	bl	8000b70 <__aeabi_fsub>
 8001b8a:	4955      	ldr	r1, [pc, #340]	@ (8001ce0 <showConfiguration+0x228>)
 8001b8c:	f7ff f8fa 	bl	8000d84 <__aeabi_fmul>
 8001b90:	f7ff fad4 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001b94:	4632      	mov	r2, r6
    int rapid_dec = (int)((rapidRate - rapid_int) * 10);
 8001b96:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad rápida (G0): %d.%d mm/min\r\n", rapid_int, rapid_dec);
 8001b98:	4954      	ldr	r1, [pc, #336]	@ (8001cec <showConfiguration+0x234>)
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f006 fb14 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff fe6d 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4620      	mov	r0, r4
 8001bac:	f006 fb71 	bl	8008292 <memset>
    int max_int = (int)maxFeedRate;
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <showConfiguration+0x238>)
 8001bb2:	681f      	ldr	r7, [r3, #0]
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f7ff fac1 	bl	800113c <__aeabi_f2iz>
 8001bba:	4606      	mov	r6, r0
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001bbc:	f7ff f88e 	bl	8000cdc <__aeabi_i2f>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	f7fe ffd4 	bl	8000b70 <__aeabi_fsub>
 8001bc8:	4945      	ldr	r1, [pc, #276]	@ (8001ce0 <showConfiguration+0x228>)
 8001bca:	f7ff f8db 	bl	8000d84 <__aeabi_fmul>
 8001bce:	f7ff fab5 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001bd2:	4632      	mov	r2, r6
    int max_dec = (int)((maxFeedRate - max_int) * 10);
 8001bd4:	4603      	mov	r3, r0
    sprintf(outputBuffer, "Velocidad máxima: %d.%d mm/min\r\n", max_int, max_dec);
 8001bd6:	4947      	ldr	r1, [pc, #284]	@ (8001cf4 <showConfiguration+0x23c>)
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f006 faf5 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff fe4e 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001be4:	462a      	mov	r2, r5
 8001be6:	2100      	movs	r1, #0
 8001be8:	4620      	mov	r0, r4
 8001bea:	f006 fb52 	bl	8008292 <memset>
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001bee:	4b42      	ldr	r3, [pc, #264]	@ (8001cf8 <showConfiguration+0x240>)
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	f7ff f873 	bl	8000cdc <__aeabi_i2f>
 8001bf6:	4941      	ldr	r1, [pc, #260]	@ (8001cfc <showConfiguration+0x244>)
 8001bf8:	f7ff f978 	bl	8000eec <__aeabi_fdiv>
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001bfc:	4b40      	ldr	r3, [pc, #256]	@ (8001d00 <showConfiguration+0x248>)
    float xPos = currentX / (float)STEPS_PER_MM_X;
 8001bfe:	4683      	mov	fp, r0
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f7ff f86b 	bl	8000cdc <__aeabi_i2f>
 8001c06:	493d      	ldr	r1, [pc, #244]	@ (8001cfc <showConfiguration+0x244>)
 8001c08:	f7ff f970 	bl	8000eec <__aeabi_fdiv>
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d04 <showConfiguration+0x24c>)
    float yPos = currentY / (float)STEPS_PER_MM_Y;
 8001c0e:	4680      	mov	r8, r0
    float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	f7ff f863 	bl	8000cdc <__aeabi_i2f>
 8001c16:	493c      	ldr	r1, [pc, #240]	@ (8001d08 <showConfiguration+0x250>)
 8001c18:	f7ff f968 	bl	8000eec <__aeabi_fdiv>
 8001c1c:	4682      	mov	sl, r0
    int x_int = (int)xPos;
 8001c1e:	4658      	mov	r0, fp
 8001c20:	f7ff fa8c 	bl	800113c <__aeabi_f2iz>
 8001c24:	4606      	mov	r6, r0
    int y_int = (int)yPos;
 8001c26:	4640      	mov	r0, r8
 8001c28:	f7ff fa88 	bl	800113c <__aeabi_f2iz>
 8001c2c:	4607      	mov	r7, r0
    int z_int = (int)zPos;
 8001c2e:	4650      	mov	r0, sl
 8001c30:	f7ff fa84 	bl	800113c <__aeabi_f2iz>
 8001c34:	4681      	mov	r9, r0
    int x_dec = (int)((xPos - x_int) * 100);
 8001c36:	4630      	mov	r0, r6
 8001c38:	f7ff f850 	bl	8000cdc <__aeabi_i2f>
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	4658      	mov	r0, fp
 8001c40:	f7fe ff96 	bl	8000b70 <__aeabi_fsub>
 8001c44:	4931      	ldr	r1, [pc, #196]	@ (8001d0c <showConfiguration+0x254>)
 8001c46:	f7ff f89d 	bl	8000d84 <__aeabi_fmul>
 8001c4a:	f7ff fa77 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001c4e:	ea80 7be0 	eor.w	fp, r0, r0, asr #31
 8001c52:	ebab 7be0 	sub.w	fp, fp, r0, asr #31
    int z_dec = (int)((zPos - z_int) * 100);
 8001c56:	4648      	mov	r0, r9
 8001c58:	f7ff f840 	bl	8000cdc <__aeabi_i2f>
 8001c5c:	4601      	mov	r1, r0
 8001c5e:	4650      	mov	r0, sl
 8001c60:	f7fe ff86 	bl	8000b70 <__aeabi_fsub>
 8001c64:	4929      	ldr	r1, [pc, #164]	@ (8001d0c <showConfiguration+0x254>)
 8001c66:	f7ff f88d 	bl	8000d84 <__aeabi_fmul>
 8001c6a:	f7ff fa67 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	bfb8      	it	lt
 8001c72:	4240      	neglt	r0, r0
 8001c74:	e9cd 9002 	strd	r9, r0, [sp, #8]
    int y_dec = (int)((yPos - y_int) * 100);
 8001c78:	4638      	mov	r0, r7
 8001c7a:	f7ff f82f 	bl	8000cdc <__aeabi_i2f>
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4640      	mov	r0, r8
 8001c82:	f7fe ff75 	bl	8000b70 <__aeabi_fsub>
 8001c86:	4921      	ldr	r1, [pc, #132]	@ (8001d0c <showConfiguration+0x254>)
 8001c88:	f7ff f87c 	bl	8000d84 <__aeabi_fmul>
 8001c8c:	f7ff fa56 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición actual: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8001c90:	2800      	cmp	r0, #0
 8001c92:	bfb8      	it	lt
 8001c94:	4240      	neglt	r0, r0
 8001c96:	465b      	mov	r3, fp
 8001c98:	4632      	mov	r2, r6
 8001c9a:	e9cd 7000 	strd	r7, r0, [sp]
 8001c9e:	491c      	ldr	r1, [pc, #112]	@ (8001d10 <showConfiguration+0x258>)
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f006 fa91 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff fdea 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001cac:	462a      	mov	r2, r5
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f006 faee 	bl	8008292 <memset>
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001cb6:	4817      	ldr	r0, [pc, #92]	@ (8001d14 <showConfiguration+0x25c>)
}
 8001cb8:	b005      	add	sp, #20
 8001cba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sendUSBText("=== FIN CONFIGURACIÓN ===\r\n");
 8001cbe:	f7ff bddf 	b.w	8001880 <sendUSBText>
 8001cc2:	bf00      	nop
 8001cc4:	20002378 	.word	0x20002378
 8001cc8:	0800c2ce 	.word	0x0800c2ce
 8001ccc:	0800c2eb 	.word	0x0800c2eb
 8001cd0:	0800c300 	.word	0x0800c300
 8001cd4:	0800c315 	.word	0x0800c315
 8001cd8:	0800c32a 	.word	0x0800c32a
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	41200000 	.word	0x41200000
 8001ce4:	0800c33e 	.word	0x0800c33e
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	0800c35f 	.word	0x0800c35f
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	0800c386 	.word	0x0800c386
 8001cf8:	20002374 	.word	0x20002374
 8001cfc:	429e0000 	.word	0x429e0000
 8001d00:	20002370 	.word	0x20002370
 8001d04:	2000236c 	.word	0x2000236c
 8001d08:	4575a000 	.word	0x4575a000
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	0800c3a8 	.word	0x0800c3a8
 8001d14:	0800c3da 	.word	0x0800c3da

08001d18 <isEndstopPressed>:
    switch(axis) {
 8001d18:	2859      	cmp	r0, #89	@ 0x59
bool isEndstopPressed(char axis) {
 8001d1a:	b508      	push	{r3, lr}
    switch(axis) {
 8001d1c:	d007      	beq.n	8001d2e <isEndstopPressed+0x16>
 8001d1e:	285a      	cmp	r0, #90	@ 0x5a
 8001d20:	d00e      	beq.n	8001d40 <isEndstopPressed+0x28>
 8001d22:	2858      	cmp	r0, #88	@ 0x58
 8001d24:	d10f      	bne.n	8001d46 <isEndstopPressed+0x2e>
}
 8001d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001d2a:	f7ff bd9d 	b.w	8001868 <isEndstopPressed.part.0>
            return (HAL_GPIO_ReadPin(GPIOB, Y_MIN_PIN) == GPIO_PIN_RESET);
 8001d2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <isEndstopPressed+0x34>)
 8001d34:	f002 fc46 	bl	80045c4 <HAL_GPIO_ReadPin>
 8001d38:	fab0 f080 	clz	r0, r0
 8001d3c:	0940      	lsrs	r0, r0, #5
}
 8001d3e:	bd08      	pop	{r3, pc}
            return (HAL_GPIO_ReadPin(GPIOB, Z_MIN_PIN) == GPIO_PIN_RESET);
 8001d40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d44:	e7f5      	b.n	8001d32 <isEndstopPressed+0x1a>
    switch(axis) {
 8001d46:	2000      	movs	r0, #0
 8001d48:	e7f9      	b.n	8001d3e <isEndstopPressed+0x26>
 8001d4a:	bf00      	nop
 8001d4c:	40010c00 	.word	0x40010c00

08001d50 <performHoming>:

// Función de homing para todos los ejes
void performHoming(void) {
 8001d50:	b530      	push	{r4, r5, lr}
    // char msg[80];
    // HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
    
    // Sincronizar planner antes de hacer homing
    if (plannerEnabled) {
 8001d52:	4d98      	ldr	r5, [pc, #608]	@ (8001fb4 <performHoming+0x264>)
void performHoming(void) {
 8001d54:	b085      	sub	sp, #20
    if (plannerEnabled) {
 8001d56:	782b      	ldrb	r3, [r5, #0]
 8001d58:	b10b      	cbz	r3, 8001d5e <performHoming+0xe>
        planner_synchronize();
 8001d5a:	f002 f947 	bl	8003fec <planner_synchronize>
    }
    
    // Enviar mensaje de inicio de homing
    sendUSBText("Iniciando secuencia de homingg...\r\n");
 8001d5e:	4896      	ldr	r0, [pc, #600]	@ (8001fb8 <performHoming+0x268>)
 8001d60:	f7ff fd8e 	bl	8001880 <sendUSBText>
    
    // FASE 1: Movimiento rápido hacia los finales de carrera
    sprintf(outputBuffer, "Fase 1: Buscando finales de carrera...\r\n");
 8001d64:	4995      	ldr	r1, [pc, #596]	@ (8001fbc <performHoming+0x26c>)
 8001d66:	4896      	ldr	r0, [pc, #600]	@ (8001fc0 <performHoming+0x270>)
 8001d68:	f006 fb33 	bl	80083d2 <strcpy>
    // sendUSBText((uint8_t*)msg);
    sendUSBText(outputBuffer);
 8001d6c:	4894      	ldr	r0, [pc, #592]	@ (8001fc0 <performHoming+0x270>)
 8001d6e:	f7ff fd87 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d72:	22c8      	movs	r2, #200	@ 0xc8
 8001d74:	2100      	movs	r1, #0
 8001d76:	4892      	ldr	r0, [pc, #584]	@ (8001fc0 <performHoming+0x270>)
 8001d78:	f006 fa8b 	bl	8008292 <memset>

    // Homing del eje X
    sprintf(outputBuffer, "Homing eje X...\r\n");
 8001d7c:	4991      	ldr	r1, [pc, #580]	@ (8001fc4 <performHoming+0x274>)
 8001d7e:	4890      	ldr	r0, [pc, #576]	@ (8001fc0 <performHoming+0x270>)
 8001d80:	f006 fb27 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 8001d84:	488e      	ldr	r0, [pc, #568]	@ (8001fc0 <performHoming+0x270>)
 8001d86:	f7ff fd7b 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001d8a:	22c8      	movs	r2, #200	@ 0xc8
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	488c      	ldr	r0, [pc, #560]	@ (8001fc0 <performHoming+0x270>)
 8001d90:	f006 fa7f 	bl	8008292 <memset>
    CDC_TxQueue_Process();
 8001d94:	f005 f94a 	bl	800702c <CDC_TxQueue_Process>

    // Mover hacia el final de carrera X (dirección negativa)
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	488a      	ldr	r0, [pc, #552]	@ (8001fc8 <performHoming+0x278>)
 8001d9e:	f002 fc17 	bl	80045d0 <HAL_GPIO_WritePin>
    switch(axis) {
 8001da2:	f7ff fd61 	bl	8001868 <isEndstopPressed.part.0>
    while (!isEndstopPressed('X')) {
 8001da6:	b378      	cbz	r0, 8001e08 <performHoming+0xb8>
        //delay_us(STEP_DELAY_US / 2); // Movimiento más rápido para búsqueda inicial
        // HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
    }
    
    // Retroceder un poco del final de carrera X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001da8:	2201      	movs	r2, #1
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	4886      	ldr	r0, [pc, #536]	@ (8001fc8 <performHoming+0x278>)
 8001dae:	f002 fc0f 	bl	80045d0 <HAL_GPIO_WritePin>
 8001db2:	249e      	movs	r4, #158	@ 0x9e
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 8001db4:	f001 f900 	bl	8002fb8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001db8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001dbc:	f001 f8b6 	bl	8002f2c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001dc0:	3c01      	subs	r4, #1
 8001dc2:	d1f7      	bne.n	8001db4 <performHoming+0x64>
    }
    
    // FASE 2: Movimiento lento de precisión para X
    HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	487f      	ldr	r0, [pc, #508]	@ (8001fc8 <performHoming+0x278>)
 8001dca:	f002 fc01 	bl	80045d0 <HAL_GPIO_WritePin>
 8001dce:	249e      	movs	r4, #158	@ 0x9e
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
        //if (!isEndstopPressed('X')); // Salir cuando se libere el endstop
        X_stepOnce();
 8001dd0:	f001 f8f2 	bl	8002fb8 <X_stepOnce>
        delay_us(STEP_DELAY_US * 3);
 8001dd4:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001dd8:	f001 f8a8 	bl	8002f2c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_X; i++) { // Retroceder 50 pasos
 8001ddc:	3c01      	subs	r4, #1
 8001dde:	d1f7      	bne.n	8001dd0 <performHoming+0x80>
    switch(axis) {
 8001de0:	f7ff fd42 	bl	8001868 <isEndstopPressed.part.0>
    }
    if (!isEndstopPressed('X')) {
 8001de4:	b9b8      	cbnz	r0, 8001e16 <performHoming+0xc6>
        sprintf(outputBuffer, "Error: Final de carrera X no presionado\r\n");
 8001de6:	4979      	ldr	r1, [pc, #484]	@ (8001fcc <performHoming+0x27c>)
        // if (!isEndstopPressed('Z'));
        Z_stepOnce();
        delay_us(STEP_DELAY_US/3); // Movimiento lento para precisión
    }
    if (!isEndstopPressed('Z')) {
        sprintf(outputBuffer, "Error: Final de carrera Z no presionado\r\n");
 8001de8:	4875      	ldr	r0, [pc, #468]	@ (8001fc0 <performHoming+0x270>)
 8001dea:	f006 faf2 	bl	80083d2 <strcpy>
        sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001dee:	4874      	ldr	r0, [pc, #464]	@ (8001fc0 <performHoming+0x270>)
 8001df0:	f7ff fd46 	bl	8001880 <sendUSBText>
 8001df4:	f005 f91a 	bl	800702c <CDC_TxQueue_Process>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001df8:	22c8      	movs	r2, #200	@ 0xc8
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	4870      	ldr	r0, [pc, #448]	@ (8001fc0 <performHoming+0x270>)
        planner_set_current_position(home_pos);
    }

    // Rehabilitar interrupciones
    // HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}
 8001dfe:	b005      	add	sp, #20
 8001e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e04:	f006 ba45 	b.w	8008292 <memset>
        X_stepOnce();
 8001e08:	f001 f8d6 	bl	8002fb8 <X_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e0c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e10:	f001 f88c 	bl	8002f2c <delay_us>
 8001e14:	e7c5      	b.n	8001da2 <performHoming+0x52>
    currentX = 0; // Establecer posición home
 8001e16:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd0 <performHoming+0x280>)
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001e18:	496e      	ldr	r1, [pc, #440]	@ (8001fd4 <performHoming+0x284>)
 8001e1a:	4869      	ldr	r0, [pc, #420]	@ (8001fc0 <performHoming+0x270>)
    currentX = 0; // Establecer posición home
 8001e1c:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje X en posición home\r\n");
 8001e1e:	f006 fad8 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e22:	4867      	ldr	r0, [pc, #412]	@ (8001fc0 <performHoming+0x270>)
 8001e24:	f7ff fd2c 	bl	8001880 <sendUSBText>
 8001e28:	f005 f900 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e2c:	22c8      	movs	r2, #200	@ 0xc8
 8001e2e:	4621      	mov	r1, r4
 8001e30:	4863      	ldr	r0, [pc, #396]	@ (8001fc0 <performHoming+0x270>)
 8001e32:	f006 fa2e 	bl	8008292 <memset>
    sprintf(outputBuffer, "Homing eje Y...\r\n");
 8001e36:	4968      	ldr	r1, [pc, #416]	@ (8001fd8 <performHoming+0x288>)
 8001e38:	4861      	ldr	r0, [pc, #388]	@ (8001fc0 <performHoming+0x270>)
 8001e3a:	f006 faca 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001e3e:	4860      	ldr	r0, [pc, #384]	@ (8001fc0 <performHoming+0x270>)
 8001e40:	f7ff fd1e 	bl	8001880 <sendUSBText>
 8001e44:	f005 f8f2 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001e48:	22c8      	movs	r2, #200	@ 0xc8
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	485c      	ldr	r0, [pc, #368]	@ (8001fc0 <performHoming+0x270>)
 8001e4e:	f006 fa20 	bl	8008292 <memset>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa
 8001e52:	4622      	mov	r2, r4
 8001e54:	2108      	movs	r1, #8
 8001e56:	485c      	ldr	r0, [pc, #368]	@ (8001fc8 <performHoming+0x278>)
 8001e58:	f002 fbba 	bl	80045d0 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Y')) {
 8001e5c:	2059      	movs	r0, #89	@ 0x59
 8001e5e:	f7ff ff5b 	bl	8001d18 <isEndstopPressed>
 8001e62:	b308      	cbz	r0, 8001ea8 <performHoming+0x158>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_SET); // Dirección positiva
 8001e64:	2201      	movs	r2, #1
 8001e66:	2108      	movs	r1, #8
 8001e68:	4857      	ldr	r0, [pc, #348]	@ (8001fc8 <performHoming+0x278>)
 8001e6a:	f002 fbb1 	bl	80045d0 <HAL_GPIO_WritePin>
 8001e6e:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001e70:	f001 f8b6 	bl	8002fe0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001e74:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001e78:	f001 f858 	bl	8002f2c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001e7c:	3c01      	subs	r4, #1
 8001e7e:	d1f7      	bne.n	8001e70 <performHoming+0x120>
    HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, GPIO_PIN_RESET); // Dirección negativa nuevamente
 8001e80:	4622      	mov	r2, r4
 8001e82:	2108      	movs	r1, #8
 8001e84:	4850      	ldr	r0, [pc, #320]	@ (8001fc8 <performHoming+0x278>)
 8001e86:	f002 fba3 	bl	80045d0 <HAL_GPIO_WritePin>
 8001e8a:	249e      	movs	r4, #158	@ 0x9e
        Y_stepOnce();
 8001e8c:	f001 f8a8 	bl	8002fe0 <Y_stepOnce>
        delay_us(STEP_DELAY_US * 3); // Movimiento lento para precisión
 8001e90:	f44f 6016 	mov.w	r0, #2400	@ 0x960
 8001e94:	f001 f84a 	bl	8002f2c <delay_us>
    for (int i = 0; i < 2*STEPS_PER_MM_Y; i++) { // Retroceder 50 pasos
 8001e98:	3c01      	subs	r4, #1
 8001e9a:	d1f7      	bne.n	8001e8c <performHoming+0x13c>
    if (!isEndstopPressed('Y')) {
 8001e9c:	2059      	movs	r0, #89	@ 0x59
 8001e9e:	f7ff ff3b 	bl	8001d18 <isEndstopPressed>
 8001ea2:	b940      	cbnz	r0, 8001eb6 <performHoming+0x166>
        sprintf(outputBuffer, "Error: Final de carrera Y no presionado\r\n");
 8001ea4:	494d      	ldr	r1, [pc, #308]	@ (8001fdc <performHoming+0x28c>)
 8001ea6:	e79f      	b.n	8001de8 <performHoming+0x98>
        Y_stepOnce();
 8001ea8:	f001 f89a 	bl	8002fe0 <Y_stepOnce>
        delay_us(STEP_DELAY_US);
 8001eac:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001eb0:	f001 f83c 	bl	8002f2c <delay_us>
 8001eb4:	e7d2      	b.n	8001e5c <performHoming+0x10c>
    currentY = 0; // Establecer posición home
 8001eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe0 <performHoming+0x290>)
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001eb8:	494a      	ldr	r1, [pc, #296]	@ (8001fe4 <performHoming+0x294>)
 8001eba:	4841      	ldr	r0, [pc, #260]	@ (8001fc0 <performHoming+0x270>)
    currentY = 0; // Establecer posición home
 8001ebc:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Y en posición home\r\n");
 8001ebe:	f006 fa88 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001ec2:	483f      	ldr	r0, [pc, #252]	@ (8001fc0 <performHoming+0x270>)
 8001ec4:	f7ff fcdc 	bl	8001880 <sendUSBText>
 8001ec8:	f005 f8b0 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ecc:	22c8      	movs	r2, #200	@ 0xc8
 8001ece:	4621      	mov	r1, r4
 8001ed0:	483b      	ldr	r0, [pc, #236]	@ (8001fc0 <performHoming+0x270>)
 8001ed2:	f006 f9de 	bl	8008292 <memset>
    sprintf(outputBuffer, "Homing eje Z...\r\n");
 8001ed6:	4944      	ldr	r1, [pc, #272]	@ (8001fe8 <performHoming+0x298>)
 8001ed8:	4839      	ldr	r0, [pc, #228]	@ (8001fc0 <performHoming+0x270>)
 8001eda:	f006 fa7a 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001ede:	4838      	ldr	r0, [pc, #224]	@ (8001fc0 <performHoming+0x270>)
 8001ee0:	f7ff fcce 	bl	8001880 <sendUSBText>
 8001ee4:	f005 f8a2 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001ee8:	22c8      	movs	r2, #200	@ 0xc8
 8001eea:	4621      	mov	r1, r4
 8001eec:	4834      	ldr	r0, [pc, #208]	@ (8001fc0 <performHoming+0x270>)
 8001eee:	f006 f9d0 	bl	8008292 <memset>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ef8:	483c      	ldr	r0, [pc, #240]	@ (8001fec <performHoming+0x29c>)
 8001efa:	f002 fb69 	bl	80045d0 <HAL_GPIO_WritePin>
    while (!isEndstopPressed('Z')) {
 8001efe:	205a      	movs	r0, #90	@ 0x5a
 8001f00:	f7ff ff0a 	bl	8001d18 <isEndstopPressed>
 8001f04:	b328      	cbz	r0, 8001f52 <performHoming+0x202>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_RESET); // Dirección positiva
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f0c:	4837      	ldr	r0, [pc, #220]	@ (8001fec <performHoming+0x29c>)
 8001f0e:	f002 fb5f 	bl	80045d0 <HAL_GPIO_WritePin>
 8001f12:	f640 745a 	movw	r4, #3930	@ 0xf5a
        Z_stepOnce();
 8001f16:	f001 f879 	bl	800300c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001f1a:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001f1e:	f001 f805 	bl	8002f2c <delay_us>
    for (int i = 0; i < 1*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001f22:	3c01      	subs	r4, #1
 8001f24:	d1f7      	bne.n	8001f16 <performHoming+0x1c6>
    HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, GPIO_PIN_SET); // Dirección negativa nuevamente
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f2c:	482f      	ldr	r0, [pc, #188]	@ (8001fec <performHoming+0x29c>)
 8001f2e:	f002 fb4f 	bl	80045d0 <HAL_GPIO_WritePin>
 8001f32:	f640 745a 	movw	r4, #3930	@ 0xf5a
        Z_stepOnce();
 8001f36:	f001 f869 	bl	800300c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3); // Movimiento lento para precisión
 8001f3a:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001f3e:	f000 fff5 	bl	8002f2c <delay_us>
    for (int i = 0; i < 1*STEPS_PER_MM_Z; i++) { // Retroceder 50 pasos
 8001f42:	3c01      	subs	r4, #1
 8001f44:	d1f7      	bne.n	8001f36 <performHoming+0x1e6>
    if (!isEndstopPressed('Z')) {
 8001f46:	205a      	movs	r0, #90	@ 0x5a
 8001f48:	f7ff fee6 	bl	8001d18 <isEndstopPressed>
 8001f4c:	b940      	cbnz	r0, 8001f60 <performHoming+0x210>
        sprintf(outputBuffer, "Error: Final de carrera Z no presionado\r\n");
 8001f4e:	4928      	ldr	r1, [pc, #160]	@ (8001ff0 <performHoming+0x2a0>)
 8001f50:	e74a      	b.n	8001de8 <performHoming+0x98>
        Z_stepOnce();
 8001f52:	f001 f85b 	bl	800300c <Z_stepOnce>
        delay_us(STEP_DELAY_US/3);
 8001f56:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 8001f5a:	f000 ffe7 	bl	8002f2c <delay_us>
 8001f5e:	e7ce      	b.n	8001efe <performHoming+0x1ae>
    currentZ = 0; // Establecer posición home
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <performHoming+0x2a4>)
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001f62:	4925      	ldr	r1, [pc, #148]	@ (8001ff8 <performHoming+0x2a8>)
 8001f64:	4816      	ldr	r0, [pc, #88]	@ (8001fc0 <performHoming+0x270>)
    currentZ = 0; // Establecer posición home
 8001f66:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Eje Z en posición home\r\n");
 8001f68:	f006 fa33 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001f6c:	4814      	ldr	r0, [pc, #80]	@ (8001fc0 <performHoming+0x270>)
 8001f6e:	f7ff fc87 	bl	8001880 <sendUSBText>
 8001f72:	f005 f85b 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001f76:	22c8      	movs	r2, #200	@ 0xc8
 8001f78:	4621      	mov	r1, r4
 8001f7a:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <performHoming+0x270>)
 8001f7c:	f006 f989 	bl	8008292 <memset>
    sprintf(outputBuffer, "Homing completado. Todos los ejes en posición home.\r\n");
 8001f80:	491e      	ldr	r1, [pc, #120]	@ (8001ffc <performHoming+0x2ac>)
 8001f82:	480f      	ldr	r0, [pc, #60]	@ (8001fc0 <performHoming+0x270>)
 8001f84:	f006 fa25 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);CDC_TxQueue_Process();
 8001f88:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <performHoming+0x270>)
 8001f8a:	f7ff fc79 	bl	8001880 <sendUSBText>
 8001f8e:	f005 f84d 	bl	800702c <CDC_TxQueue_Process>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8001f92:	22c8      	movs	r2, #200	@ 0xc8
 8001f94:	4621      	mov	r1, r4
 8001f96:	480a      	ldr	r0, [pc, #40]	@ (8001fc0 <performHoming+0x270>)
 8001f98:	f006 f97b 	bl	8008292 <memset>
    if (plannerEnabled) {
 8001f9c:	782b      	ldrb	r3, [r5, #0]
 8001f9e:	b133      	cbz	r3, 8001fae <performHoming+0x25e>
        float home_pos[3] = {0.0f, 0.0f, 0.0f};
 8001fa0:	2300      	movs	r3, #0
        planner_set_current_position(home_pos);
 8001fa2:	a801      	add	r0, sp, #4
        float home_pos[3] = {0.0f, 0.0f, 0.0f};
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	9303      	str	r3, [sp, #12]
        planner_set_current_position(home_pos);
 8001faa:	f002 f837 	bl	800401c <planner_set_current_position>
}
 8001fae:	b005      	add	sp, #20
 8001fb0:	bd30      	pop	{r4, r5, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	0800c3f7 	.word	0x0800c3f7
 8001fbc:	0800c41b 	.word	0x0800c41b
 8001fc0:	20002378 	.word	0x20002378
 8001fc4:	0800c444 	.word	0x0800c444
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	0800c456 	.word	0x0800c456
 8001fd0:	20002374 	.word	0x20002374
 8001fd4:	0800c480 	.word	0x0800c480
 8001fd8:	0800c49a 	.word	0x0800c49a
 8001fdc:	0800c4ac 	.word	0x0800c4ac
 8001fe0:	20002370 	.word	0x20002370
 8001fe4:	0800c4d6 	.word	0x0800c4d6
 8001fe8:	0800c4f0 	.word	0x0800c4f0
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	0800c502 	.word	0x0800c502
 8001ff4:	2000236c 	.word	0x2000236c
 8001ff8:	0800c52c 	.word	0x0800c52c
 8001ffc:	0800c546 	.word	0x0800c546

08002000 <startProgramStorage>:
/**
  * @brief  Inicia el modo de almacenamiento de programa
  * @retval None
  */
void startProgramStorage(void) {
    isStoringProgram = true;
 8002000:	2201      	movs	r2, #1
void startProgramStorage(void) {
 8002002:	b510      	push	{r4, lr}
    programLineCount = 0;
 8002004:	2400      	movs	r4, #0
    isStoringProgram = true;
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <startProgramStorage+0x3c>)
 8002008:	701a      	strb	r2, [r3, #0]
    programLineCount = 0;
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <startProgramStorage+0x40>)
 800200c:	601c      	str	r4, [r3, #0]
    isProgramLoaded = false;
 800200e:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <startProgramStorage+0x44>)
 8002010:	701c      	strb	r4, [r3, #0]
    
    // Limpiar buffer de programa
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002012:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <startProgramStorage+0x48>)
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8002014:	4618      	mov	r0, r3
 8002016:	2250      	movs	r2, #80	@ 0x50
 8002018:	2100      	movs	r1, #0
 800201a:	f006 f93a 	bl	8008292 <memset>
 800201e:	4603      	mov	r3, r0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002020:	3401      	adds	r4, #1
 8002022:	2c64      	cmp	r4, #100	@ 0x64
 8002024:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002028:	d1f4      	bne.n	8002014 <startProgramStorage+0x14>
    }
    
    sendUSBText("Modo almacenamiento activado. Envie comandos G-code.\r\n");
 800202a:	4808      	ldr	r0, [pc, #32]	@ (800204c <startProgramStorage+0x4c>)
 800202c:	f7ff fc28 	bl	8001880 <sendUSBText>
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
    //sendUSBText("ok\r\n");
}
 8002030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Termine con 'FIN' o 'PROGRAM_STOP'\r\n");
 8002034:	4806      	ldr	r0, [pc, #24]	@ (8002050 <startProgramStorage+0x50>)
 8002036:	f7ff bc23 	b.w	8001880 <sendUSBText>
 800203a:	bf00      	nop
 800203c:	200003b6 	.word	0x200003b6
 8002040:	200003bc 	.word	0x200003bc
 8002044:	200003b5 	.word	0x200003b5
 8002048:	200003c0 	.word	0x200003c0
 800204c:	0800c57d 	.word	0x0800c57d
 8002050:	0800c5b4 	.word	0x0800c5b4

08002054 <stopProgramStorage>:

/**
  * @brief  Detiene el modo de almacenamiento de programa
  * @retval None
  */
void stopProgramStorage(void) {
 8002054:	b510      	push	{r4, lr}
    isStoringProgram = false;
 8002056:	2400      	movs	r4, #0
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <stopProgramStorage+0x44>)
 800205a:	701c      	strb	r4, [r3, #0]
    
    if (programLineCount > 0) {
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <stopProgramStorage+0x48>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	42a2      	cmp	r2, r4
 8002062:	dd16      	ble.n	8002092 <stopProgramStorage+0x3e>
        isProgramLoaded = true;
 8002064:	2101      	movs	r1, #1
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <stopProgramStorage+0x4c>)
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 8002068:	480e      	ldr	r0, [pc, #56]	@ (80020a4 <stopProgramStorage+0x50>)
        isProgramLoaded = true;
 800206a:	7019      	strb	r1, [r3, #0]
        sprintf(outputBuffer, "Programa cargado: %d lineas almacenadas\r\n", programLineCount);
 800206c:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <stopProgramStorage+0x54>)
 800206e:	f006 f8ab 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
 8002072:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <stopProgramStorage+0x50>)
 8002074:	f7ff fc04 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002078:	22c8      	movs	r2, #200	@ 0xc8
 800207a:	4621      	mov	r1, r4
 800207c:	4809      	ldr	r0, [pc, #36]	@ (80020a4 <stopProgramStorage+0x50>)
 800207e:	f006 f908 	bl	8008292 <memset>
        sendUSBText("Use 'PROGRAM_RUN' para ejecutar o 'PROGRAM_INFO' para ver detalles\r\n");
 8002082:	480a      	ldr	r0, [pc, #40]	@ (80020ac <stopProgramStorage+0x58>)
    } else {
        sendUSBText("No se almacenaron lineas\r\n");
 8002084:	f7ff fbfc 	bl	8001880 <sendUSBText>
    }
    
    sendUSBText("ok\r\n");
}
 8002088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("ok\r\n");
 800208c:	4808      	ldr	r0, [pc, #32]	@ (80020b0 <stopProgramStorage+0x5c>)
 800208e:	f7ff bbf7 	b.w	8001880 <sendUSBText>
        sendUSBText("No se almacenaron lineas\r\n");
 8002092:	4808      	ldr	r0, [pc, #32]	@ (80020b4 <stopProgramStorage+0x60>)
 8002094:	e7f6      	b.n	8002084 <stopProgramStorage+0x30>
 8002096:	bf00      	nop
 8002098:	200003b6 	.word	0x200003b6
 800209c:	200003bc 	.word	0x200003bc
 80020a0:	200003b5 	.word	0x200003b5
 80020a4:	20002378 	.word	0x20002378
 80020a8:	0800c5d9 	.word	0x0800c5d9
 80020ac:	0800c603 	.word	0x0800c603
 80020b0:	0800c0d0 	.word	0x0800c0d0
 80020b4:	0800c648 	.word	0x0800c648

080020b8 <addLineToProgram>:
/**
  * @brief  Agrega una línea al programa almacenado
  * @param  line: Línea de G-code a agregar
  * @retval true si se agregó exitosamente, false si el buffer está lleno
  */
bool addLineToProgram(const char* line) {
 80020b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (programLineCount >= MAX_GCODE_LINES) {
 80020bc:	4e17      	ldr	r6, [pc, #92]	@ (800211c <addLineToProgram+0x64>)
 80020be:	6835      	ldr	r5, [r6, #0]
 80020c0:	2d63      	cmp	r5, #99	@ 0x63
 80020c2:	dc28      	bgt.n	8002116 <addLineToProgram+0x5e>
 80020c4:	4601      	mov	r1, r0
        return false; // Buffer lleno
    }
    
    // Copiar la línea, eliminando espacios al inicio y final
    const char* start = line;
    while (*start == ' ' || *start == '\t') start++; // Saltar espacios iniciales
 80020c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d0fa      	beq.n	80020c4 <addLineToProgram+0xc>
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	d0f8      	beq.n	80020c4 <addLineToProgram+0xc>
    
    if (strlen(start) == 0) {
 80020d2:	b19b      	cbz	r3, 80020fc <addLineToProgram+0x44>
        return true; // Línea vacía, no la almacenamos pero no es error
    }
    
    strncpy(gcodeProgram[programLineCount], start, MAX_LINE_LENGTH - 1);
 80020d4:	2450      	movs	r4, #80	@ 0x50
 80020d6:	436c      	muls	r4, r5
 80020d8:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8002120 <addLineToProgram+0x68>
 80020dc:	224f      	movs	r2, #79	@ 0x4f
 80020de:	eb04 0308 	add.w	r3, r4, r8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f006 f8ef 	bl	80082c6 <strncpy>
    gcodeProgram[programLineCount][MAX_LINE_LENGTH - 1] = '\0';
 80020e8:	2700      	movs	r7, #0
 80020ea:	f880 704f 	strb.w	r7, [r0, #79]	@ 0x4f
    
    // Eliminar \r\n del final si existen
    int len = strlen(gcodeProgram[programLineCount]);
 80020ee:	f7fe f82f 	bl	8000150 <strlen>
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 80020f2:	1823      	adds	r3, r4, r0
 80020f4:	4443      	add	r3, r8
 80020f6:	b920      	cbnz	r0, 8002102 <addLineToProgram+0x4a>
                       gcodeProgram[programLineCount][len-1] == '\n')) {
        gcodeProgram[programLineCount][len-1] = '\0';
        len--;
    }
    
    programLineCount++;
 80020f8:	3501      	adds	r5, #1
 80020fa:	6035      	str	r5, [r6, #0]
        return true; // Línea vacía, no la almacenamos pero no es error
 80020fc:	2001      	movs	r0, #1
    return true;
}
 80020fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (len > 0 && (gcodeProgram[programLineCount][len-1] == '\r' || 
 8002102:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8002106:	3801      	subs	r0, #1
 8002108:	2a0d      	cmp	r2, #13
 800210a:	d001      	beq.n	8002110 <addLineToProgram+0x58>
 800210c:	2a0a      	cmp	r2, #10
 800210e:	d1f3      	bne.n	80020f8 <addLineToProgram+0x40>
        gcodeProgram[programLineCount][len-1] = '\0';
 8002110:	f803 7d01 	strb.w	r7, [r3, #-1]!
        len--;
 8002114:	e7ef      	b.n	80020f6 <addLineToProgram+0x3e>
        return false; // Buffer lleno
 8002116:	2000      	movs	r0, #0
 8002118:	e7f1      	b.n	80020fe <addLineToProgram+0x46>
 800211a:	bf00      	nop
 800211c:	200003bc 	.word	0x200003bc
 8002120:	200003c0 	.word	0x200003c0

08002124 <clearProgram>:

/**
  * @brief  Limpia el programa almacenado
  * @retval None
  */
void clearProgram(void) {
 8002124:	b538      	push	{r3, r4, r5, lr}
    programLineCount = 0;
 8002126:	2400      	movs	r4, #0
 8002128:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <clearProgram+0x38>)
 800212a:	4d0d      	ldr	r5, [pc, #52]	@ (8002160 <clearProgram+0x3c>)
 800212c:	6014      	str	r4, [r2, #0]
    currentExecutingLine = 0;
 800212e:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <clearProgram+0x40>)
 8002130:	6014      	str	r4, [r2, #0]
    isProgramLoaded = false;
 8002132:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <clearProgram+0x44>)
 8002134:	7014      	strb	r4, [r2, #0]
    isProgramRunning = false;
 8002136:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <clearProgram+0x48>)
 8002138:	7014      	strb	r4, [r2, #0]
    isStoringProgram = false;
 800213a:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <clearProgram+0x4c>)
 800213c:	7014      	strb	r4, [r2, #0]
    
    // Limpiar buffer
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 800213e:	4628      	mov	r0, r5
 8002140:	2250      	movs	r2, #80	@ 0x50
 8002142:	2100      	movs	r1, #0
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 8002144:	3401      	adds	r4, #1
        memset(gcodeProgram[i], 0, MAX_LINE_LENGTH);
 8002146:	f006 f8a4 	bl	8008292 <memset>
    for (int i = 0; i < MAX_GCODE_LINES; i++) {
 800214a:	2c64      	cmp	r4, #100	@ 0x64
 800214c:	f105 0550 	add.w	r5, r5, #80	@ 0x50
 8002150:	d1f5      	bne.n	800213e <clearProgram+0x1a>
    }
    
    sendUSBText("Programa limpiado\r\n");
 8002152:	4808      	ldr	r0, [pc, #32]	@ (8002174 <clearProgram+0x50>)
    //sendUSBText("ok\r\n");
}
 8002154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sendUSBText("Programa limpiado\r\n");
 8002158:	f7ff bb92 	b.w	8001880 <sendUSBText>
 800215c:	200003bc 	.word	0x200003bc
 8002160:	200003c0 	.word	0x200003c0
 8002164:	200003b8 	.word	0x200003b8
 8002168:	200003b5 	.word	0x200003b5
 800216c:	200003b4 	.word	0x200003b4
 8002170:	200003b6 	.word	0x200003b6
 8002174:	0800c663 	.word	0x0800c663

08002178 <runProgram>:
/**
  * @brief  Ejecuta el programa completo almacenado usando el planner
  * @retval None
  */
void runProgram(void) {
    if (!isProgramLoaded || programLineCount == 0) {
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <runProgram+0x58>)
void runProgram(void) {
 800217a:	b510      	push	{r4, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b113      	cbz	r3, 8002186 <runProgram+0xe>
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <runProgram+0x5c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	b96a      	cbnz	r2, 80021a2 <runProgram+0x2a>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8002186:	4914      	ldr	r1, [pc, #80]	@ (80021d8 <runProgram+0x60>)
 8002188:	4814      	ldr	r0, [pc, #80]	@ (80021dc <runProgram+0x64>)
 800218a:	f006 f922 	bl	80083d2 <strcpy>
        sendUSBText(outputBuffer);
 800218e:	4813      	ldr	r0, [pc, #76]	@ (80021dc <runProgram+0x64>)
 8002190:	f7ff fb76 	bl	8001880 <sendUSBText>
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
}
 8002194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002198:	22c8      	movs	r2, #200	@ 0xc8
 800219a:	2100      	movs	r1, #0
 800219c:	480f      	ldr	r0, [pc, #60]	@ (80021dc <runProgram+0x64>)
 800219e:	f006 b878 	b.w	8008292 <memset>
    isProgramRunning = true;
 80021a2:	2101      	movs	r1, #1
    currentExecutingLine = 0;
 80021a4:	2400      	movs	r4, #0
    isProgramRunning = true;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <runProgram+0x68>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <runProgram+0x64>)
    isProgramRunning = true;
 80021aa:	7019      	strb	r1, [r3, #0]
    currentExecutingLine = 0;
 80021ac:	4b0d      	ldr	r3, [pc, #52]	@ (80021e4 <runProgram+0x6c>)
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021ae:	490e      	ldr	r1, [pc, #56]	@ (80021e8 <runProgram+0x70>)
    currentExecutingLine = 0;
 80021b0:	601c      	str	r4, [r3, #0]
    sprintf(outputBuffer, "Iniciando ejecucion del programa (%d lineas)\r\n", programLineCount);
 80021b2:	f006 f809 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80021b6:	4809      	ldr	r0, [pc, #36]	@ (80021dc <runProgram+0x64>)
 80021b8:	f7ff fb62 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80021bc:	4621      	mov	r1, r4
 80021be:	22c8      	movs	r2, #200	@ 0xc8
 80021c0:	4806      	ldr	r0, [pc, #24]	@ (80021dc <runProgram+0x64>)
 80021c2:	f006 f866 	bl	8008292 <memset>
}
 80021c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendUSBText("Programa en ejecucion. Use PROGRAM_PAUSE para pausar.\r\n");
 80021ca:	4808      	ldr	r0, [pc, #32]	@ (80021ec <runProgram+0x74>)
 80021cc:	f7ff bb58 	b.w	8001880 <sendUSBText>
 80021d0:	200003b5 	.word	0x200003b5
 80021d4:	200003bc 	.word	0x200003bc
 80021d8:	0800c677 	.word	0x0800c677
 80021dc:	20002378 	.word	0x20002378
 80021e0:	200003b4 	.word	0x200003b4
 80021e4:	200003b8 	.word	0x200003b8
 80021e8:	0800c698 	.word	0x0800c698
 80021ec:	0800c6c7 	.word	0x0800c6c7

080021f0 <runNextLine>:

/**
  * @brief  Ejecuta la siguiente línea del programa
  * @retval None
  */
void runNextLine(void) {
 80021f0:	b570      	push	{r4, r5, r6, lr}
    if (!isProgramLoaded || programLineCount == 0) {
 80021f2:	4b2f      	ldr	r3, [pc, #188]	@ (80022b0 <runNextLine+0xc0>)
void runNextLine(void) {
 80021f4:	b094      	sub	sp, #80	@ 0x50
    if (!isProgramLoaded || programLineCount == 0) {
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b113      	cbz	r3, 8002200 <runNextLine+0x10>
 80021fa:	4b2e      	ldr	r3, [pc, #184]	@ (80022b4 <runNextLine+0xc4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b973      	cbnz	r3, 800221e <runNextLine+0x2e>
        sprintf(outputBuffer, "error: No hay programa cargado\r\n");
 8002200:	492d      	ldr	r1, [pc, #180]	@ (80022b8 <runNextLine+0xc8>)
 8002202:	482e      	ldr	r0, [pc, #184]	@ (80022bc <runNextLine+0xcc>)
 8002204:	f006 f8e5 	bl	80083d2 <strcpy>
        sendUSBText(outputBuffer);
 8002208:	482c      	ldr	r0, [pc, #176]	@ (80022bc <runNextLine+0xcc>)
 800220a:	f7ff fb39 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800220e:	22c8      	movs	r2, #200	@ 0xc8
 8002210:	2100      	movs	r1, #0
 8002212:	482a      	ldr	r0, [pc, #168]	@ (80022bc <runNextLine+0xcc>)
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 8002214:	b014      	add	sp, #80	@ 0x50
 8002216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800221a:	f006 b83a 	b.w	8008292 <memset>
    if (currentExecutingLine >= programLineCount) {
 800221e:	4c28      	ldr	r4, [pc, #160]	@ (80022c0 <runNextLine+0xd0>)
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	4293      	cmp	r3, r2
 8002224:	dc10      	bgt.n	8002248 <runNextLine+0x58>
        sprintf(outputBuffer, "Programa completado\r\n");
 8002226:	4927      	ldr	r1, [pc, #156]	@ (80022c4 <runNextLine+0xd4>)
 8002228:	4824      	ldr	r0, [pc, #144]	@ (80022bc <runNextLine+0xcc>)
 800222a:	f006 f8d2 	bl	80083d2 <strcpy>
        sendUSBText(outputBuffer);
 800222e:	4823      	ldr	r0, [pc, #140]	@ (80022bc <runNextLine+0xcc>)
 8002230:	f7ff fb26 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002234:	22c8      	movs	r2, #200	@ 0xc8
 8002236:	2100      	movs	r1, #0
 8002238:	4820      	ldr	r0, [pc, #128]	@ (80022bc <runNextLine+0xcc>)
 800223a:	f006 f82a 	bl	8008292 <memset>
        isProgramRunning = false;
 800223e:	2200      	movs	r2, #0
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <runNextLine+0xd8>)
 8002242:	701a      	strb	r2, [r3, #0]
}
 8002244:	b014      	add	sp, #80	@ 0x50
 8002246:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002248:	2650      	movs	r6, #80	@ 0x50
 800224a:	4d20      	ldr	r5, [pc, #128]	@ (80022cc <runNextLine+0xdc>)
 800224c:	4920      	ldr	r1, [pc, #128]	@ (80022d0 <runNextLine+0xe0>)
 800224e:	fb06 5302 	mla	r3, r6, r2, r5
 8002252:	481a      	ldr	r0, [pc, #104]	@ (80022bc <runNextLine+0xcc>)
 8002254:	3201      	adds	r2, #1
 8002256:	f005 ffb7 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 800225a:	4818      	ldr	r0, [pc, #96]	@ (80022bc <runNextLine+0xcc>)
 800225c:	f7ff fb10 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002260:	22c8      	movs	r2, #200	@ 0xc8
 8002262:	2100      	movs	r1, #0
 8002264:	4815      	ldr	r0, [pc, #84]	@ (80022bc <runNextLine+0xcc>)
 8002266:	f006 f814 	bl	8008292 <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 800226a:	6821      	ldr	r1, [r4, #0]
 800226c:	224f      	movs	r2, #79	@ 0x4f
 800226e:	fb06 5101 	mla	r1, r6, r1, r5
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002272:	2500      	movs	r5, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002274:	4668      	mov	r0, sp
 8002276:	f006 f826 	bl	80082c6 <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 800227a:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 800227c:	f88d 504f 	strb.w	r5, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 8002280:	f7ff fa6e 	bl	8001760 <gc_execute_line>
        currentExecutingLine++;
 8002284:	6823      	ldr	r3, [r4, #0]
    if (status == STATUS_OK) {
 8002286:	4602      	mov	r2, r0
        currentExecutingLine++;
 8002288:	3301      	adds	r3, #1
    if (status == STATUS_OK) {
 800228a:	b908      	cbnz	r0, 8002290 <runNextLine+0xa0>
        currentExecutingLine++;
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	e7d9      	b.n	8002244 <runNextLine+0x54>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8002290:	4910      	ldr	r1, [pc, #64]	@ (80022d4 <runNextLine+0xe4>)
 8002292:	480a      	ldr	r0, [pc, #40]	@ (80022bc <runNextLine+0xcc>)
 8002294:	f005 ff98 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
 8002298:	4808      	ldr	r0, [pc, #32]	@ (80022bc <runNextLine+0xcc>)
 800229a:	f7ff faf1 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 800229e:	22c8      	movs	r2, #200	@ 0xc8
 80022a0:	4629      	mov	r1, r5
 80022a2:	4806      	ldr	r0, [pc, #24]	@ (80022bc <runNextLine+0xcc>)
 80022a4:	f005 fff5 	bl	8008292 <memset>
        isProgramRunning = false;
 80022a8:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <runNextLine+0xd8>)
 80022aa:	701d      	strb	r5, [r3, #0]
 80022ac:	e7ca      	b.n	8002244 <runNextLine+0x54>
 80022ae:	bf00      	nop
 80022b0:	200003b5 	.word	0x200003b5
 80022b4:	200003bc 	.word	0x200003bc
 80022b8:	0800c677 	.word	0x0800c677
 80022bc:	20002378 	.word	0x20002378
 80022c0:	200003b8 	.word	0x200003b8
 80022c4:	0800c6ff 	.word	0x0800c6ff
 80022c8:	200003b4 	.word	0x200003b4
 80022cc:	200003c0 	.word	0x200003c0
 80022d0:	0800c715 	.word	0x0800c715
 80022d4:	0800c72f 	.word	0x0800c72f

080022d8 <pauseProgram>:

/**
  * @brief  Pausa la ejecución del programa
  * @retval None
  */
void pauseProgram(void) {
 80022d8:	b570      	push	{r4, r5, r6, lr}
    isProgramRunning = false;
 80022da:	2500      	movs	r5, #0
    sprintf(outputBuffer, "Programa pausado\r\n");
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80022dc:	26c8      	movs	r6, #200	@ 0xc8
    sprintf(outputBuffer, "Programa pausado\r\n");
 80022de:	4c0e      	ldr	r4, [pc, #56]	@ (8002318 <pauseProgram+0x40>)
    isProgramRunning = false;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <pauseProgram+0x44>)
    sprintf(outputBuffer, "Programa pausado\r\n");
 80022e2:	490f      	ldr	r1, [pc, #60]	@ (8002320 <pauseProgram+0x48>)
 80022e4:	4620      	mov	r0, r4
    isProgramRunning = false;
 80022e6:	701d      	strb	r5, [r3, #0]
    sprintf(outputBuffer, "Programa pausado\r\n");
 80022e8:	f006 f873 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff fac7 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80022f2:	4632      	mov	r2, r6
 80022f4:	4629      	mov	r1, r5
 80022f6:	4620      	mov	r0, r4
 80022f8:	f005 ffcb 	bl	8008292 <memset>
    sprintf(outputBuffer, "ok\r\n");
 80022fc:	4909      	ldr	r1, [pc, #36]	@ (8002324 <pauseProgram+0x4c>)
 80022fe:	4620      	mov	r0, r4
 8002300:	f006 f867 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fabb 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800230a:	4632      	mov	r2, r6
 800230c:	4629      	mov	r1, r5
 800230e:	4620      	mov	r0, r4
}
 8002310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002314:	f005 bfbd 	b.w	8008292 <memset>
 8002318:	20002378 	.word	0x20002378
 800231c:	200003b4 	.word	0x200003b4
 8002320:	0800c74e 	.word	0x0800c74e
 8002324:	0800c0d0 	.word	0x0800c0d0

08002328 <showHelp>:

/**
  * @brief  Muestra la ayuda del sistema de programas G-code
  * @retval None
  */
void showHelp(void) {
 8002328:	b508      	push	{r3, lr}
    sendUSBText("\r\n=== AYUDA DEL SISTEMA CNC ===\r\n");
 800232a:	4835      	ldr	r0, [pc, #212]	@ (8002400 <showHelp+0xd8>)
 800232c:	f7ff faa8 	bl	8001880 <sendUSBText>
    sendUSBText("\r\nCOMANDOS DE PROGRAMA:\r\n");
 8002330:	4834      	ldr	r0, [pc, #208]	@ (8002404 <showHelp+0xdc>)
 8002332:	f7ff faa5 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_START  - Inicia modo almacenamiento de programa\r\n");
 8002336:	4834      	ldr	r0, [pc, #208]	@ (8002408 <showHelp+0xe0>)
 8002338:	f7ff faa2 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_STOP   - Detiene almacenamiento\r\n");
 800233c:	4833      	ldr	r0, [pc, #204]	@ (800240c <showHelp+0xe4>)
 800233e:	f7ff fa9f 	bl	8001880 <sendUSBText>
    sendUSBText("FIN            - Termina almacenamiento de programa\r\n");
 8002342:	4833      	ldr	r0, [pc, #204]	@ (8002410 <showHelp+0xe8>)
 8002344:	f7ff fa9c 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_RUN    - Ejecuta programa completo\r\n");
 8002348:	4832      	ldr	r0, [pc, #200]	@ (8002414 <showHelp+0xec>)
 800234a:	f7ff fa99 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_NEXT   - Ejecuta siguiente linea\r\n");
 800234e:	4832      	ldr	r0, [pc, #200]	@ (8002418 <showHelp+0xf0>)
 8002350:	f7ff fa96 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_PAUSE  - Pausa ejecucion\r\n");
 8002354:	4831      	ldr	r0, [pc, #196]	@ (800241c <showHelp+0xf4>)
 8002356:	f7ff fa93 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_STATUS - Estado del programa actual\r\n");
 800235a:	4831      	ldr	r0, [pc, #196]	@ (8002420 <showHelp+0xf8>)
 800235c:	f7ff fa90 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_INFO   - Muestra informacion del programa\r\n");
 8002360:	4830      	ldr	r0, [pc, #192]	@ (8002424 <showHelp+0xfc>)
 8002362:	f7ff fa8d 	bl	8001880 <sendUSBText>
    sendUSBText("PROGRAM_CLEAR  - Limpia programa almacenado\r\n");
 8002366:	4830      	ldr	r0, [pc, #192]	@ (8002428 <showHelp+0x100>)
 8002368:	f7ff fa8a 	bl	8001880 <sendUSBText>
    sendUSBText("QUEUE_STATUS   - Estado de cola de transmision USB\r\n");
 800236c:	482f      	ldr	r0, [pc, #188]	@ (800242c <showHelp+0x104>)
 800236e:	f7ff fa87 	bl	8001880 <sendUSBText>
    sendUSBText("PLANNER_STATUS - Estado del planner de movimientos\r\n");
 8002372:	482f      	ldr	r0, [pc, #188]	@ (8002430 <showHelp+0x108>)
 8002374:	f7ff fa84 	bl	8001880 <sendUSBText>
    sendUSBText("PLANNER_ENABLE - Habilita el planner lookahead\r\n");
 8002378:	482e      	ldr	r0, [pc, #184]	@ (8002434 <showHelp+0x10c>)
 800237a:	f7ff fa81 	bl	8001880 <sendUSBText>
    sendUSBText("PLANNER_DISABLE- Deshabilita el planner lookahead\r\n");
 800237e:	482e      	ldr	r0, [pc, #184]	@ (8002438 <showHelp+0x110>)
 8002380:	f7ff fa7e 	bl	8001880 <sendUSBText>
    sendUSBText("PLANNER_SYNC   - Sincroniza el planner (espera buffer vacio)\r\n");
 8002384:	482d      	ldr	r0, [pc, #180]	@ (800243c <showHelp+0x114>)
 8002386:	f7ff fa7b 	bl	8001880 <sendUSBText>
    sendUSBText("PLANNER_RESET  - Reinicia el planner\r\n");
 800238a:	482d      	ldr	r0, [pc, #180]	@ (8002440 <showHelp+0x118>)
 800238c:	f7ff fa78 	bl	8001880 <sendUSBText>
    
    sendUSBText("\r\nCOMANDOS G-CODE BASICOS:\r\n");
 8002390:	482c      	ldr	r0, [pc, #176]	@ (8002444 <showHelp+0x11c>)
 8002392:	f7ff fa75 	bl	8001880 <sendUSBText>
    sendUSBText("G0 X Y Z       - Movimiento rapido\r\n");
 8002396:	482c      	ldr	r0, [pc, #176]	@ (8002448 <showHelp+0x120>)
 8002398:	f7ff fa72 	bl	8001880 <sendUSBText>
    sendUSBText("G1 X Y Z F     - Movimiento lineal con feed rate\r\n");
 800239c:	482b      	ldr	r0, [pc, #172]	@ (800244c <showHelp+0x124>)
 800239e:	f7ff fa6f 	bl	8001880 <sendUSBText>
    sendUSBText("G28            - Homing (ir a origen)\r\n");
 80023a2:	482b      	ldr	r0, [pc, #172]	@ (8002450 <showHelp+0x128>)
 80023a4:	f7ff fa6c 	bl	8001880 <sendUSBText>
    sendUSBText("G92 X Y Z      - Establecer posicion actual\r\n");
 80023a8:	482a      	ldr	r0, [pc, #168]	@ (8002454 <showHelp+0x12c>)
 80023aa:	f7ff fa69 	bl	8001880 <sendUSBText>
    sendUSBText("M17            - Habilitar motores\r\n");
 80023ae:	482a      	ldr	r0, [pc, #168]	@ (8002458 <showHelp+0x130>)
 80023b0:	f7ff fa66 	bl	8001880 <sendUSBText>
    sendUSBText("M18 / M84      - Deshabilitar motores\r\n");
 80023b4:	4829      	ldr	r0, [pc, #164]	@ (800245c <showHelp+0x134>)
 80023b6:	f7ff fa63 	bl	8001880 <sendUSBText>
    sendUSBText("M114           - Reportar posicion actual\r\n");
 80023ba:	4829      	ldr	r0, [pc, #164]	@ (8002460 <showHelp+0x138>)
 80023bc:	f7ff fa60 	bl	8001880 <sendUSBText>
    sendUSBText("M503           - Mostrar configuracion\r\n");
 80023c0:	4828      	ldr	r0, [pc, #160]	@ (8002464 <showHelp+0x13c>)
 80023c2:	f7ff fa5d 	bl	8001880 <sendUSBText>
    
    sendUSBText("\r\nEJEMPLO DE USO:\r\n");
 80023c6:	4828      	ldr	r0, [pc, #160]	@ (8002468 <showHelp+0x140>)
 80023c8:	f7ff fa5a 	bl	8001880 <sendUSBText>
    sendUSBText("1. PROGRAM_START\r\n");
 80023cc:	4827      	ldr	r0, [pc, #156]	@ (800246c <showHelp+0x144>)
 80023ce:	f7ff fa57 	bl	8001880 <sendUSBText>
    sendUSBText("2. G28 (enviar)\r\n");
 80023d2:	4827      	ldr	r0, [pc, #156]	@ (8002470 <showHelp+0x148>)
 80023d4:	f7ff fa54 	bl	8001880 <sendUSBText>
    sendUSBText("3. G0 X10 Y10 (enviar)\r\n");
 80023d8:	4826      	ldr	r0, [pc, #152]	@ (8002474 <showHelp+0x14c>)
 80023da:	f7ff fa51 	bl	8001880 <sendUSBText>
    sendUSBText("4. G1 X20 Y20 F100 (enviar)\r\n");
 80023de:	4826      	ldr	r0, [pc, #152]	@ (8002478 <showHelp+0x150>)
 80023e0:	f7ff fa4e 	bl	8001880 <sendUSBText>
    sendUSBText("5. FIN\r\n");
 80023e4:	4825      	ldr	r0, [pc, #148]	@ (800247c <showHelp+0x154>)
 80023e6:	f7ff fa4b 	bl	8001880 <sendUSBText>
    sendUSBText("6. PROGRAM_RUN\r\n");
 80023ea:	4825      	ldr	r0, [pc, #148]	@ (8002480 <showHelp+0x158>)
 80023ec:	f7ff fa48 	bl	8001880 <sendUSBText>
    
    sendUSBText("\r\n=== FIN AYUDA ===\r\n");
 80023f0:	4824      	ldr	r0, [pc, #144]	@ (8002484 <showHelp+0x15c>)
 80023f2:	f7ff fa45 	bl	8001880 <sendUSBText>
    sendUSBText("ok\r\n");
}
 80023f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("ok\r\n");
 80023fa:	4823      	ldr	r0, [pc, #140]	@ (8002488 <showHelp+0x160>)
 80023fc:	f7ff ba40 	b.w	8001880 <sendUSBText>
 8002400:	0800c761 	.word	0x0800c761
 8002404:	0800c783 	.word	0x0800c783
 8002408:	0800c79d 	.word	0x0800c79d
 800240c:	0800c7d7 	.word	0x0800c7d7
 8002410:	0800c801 	.word	0x0800c801
 8002414:	0800c837 	.word	0x0800c837
 8002418:	0800c864 	.word	0x0800c864
 800241c:	0800c88f 	.word	0x0800c88f
 8002420:	0800c8b2 	.word	0x0800c8b2
 8002424:	0800c8e0 	.word	0x0800c8e0
 8002428:	0800c914 	.word	0x0800c914
 800242c:	0800c942 	.word	0x0800c942
 8002430:	0800c977 	.word	0x0800c977
 8002434:	0800c9ac 	.word	0x0800c9ac
 8002438:	0800c9dd 	.word	0x0800c9dd
 800243c:	0800ca11 	.word	0x0800ca11
 8002440:	0800ca50 	.word	0x0800ca50
 8002444:	0800ca77 	.word	0x0800ca77
 8002448:	0800ca94 	.word	0x0800ca94
 800244c:	0800cab9 	.word	0x0800cab9
 8002450:	0800caec 	.word	0x0800caec
 8002454:	0800cb14 	.word	0x0800cb14
 8002458:	0800cb42 	.word	0x0800cb42
 800245c:	0800cb67 	.word	0x0800cb67
 8002460:	0800cb8f 	.word	0x0800cb8f
 8002464:	0800cbbb 	.word	0x0800cbbb
 8002468:	0800cbe4 	.word	0x0800cbe4
 800246c:	0800cbf8 	.word	0x0800cbf8
 8002470:	0800cc0b 	.word	0x0800cc0b
 8002474:	0800cc1d 	.word	0x0800cc1d
 8002478:	0800cc36 	.word	0x0800cc36
 800247c:	0800cc54 	.word	0x0800cc54
 8002480:	0800cc5d 	.word	0x0800cc5d
 8002484:	0800cc6e 	.word	0x0800cc6e
 8002488:	0800c0d0 	.word	0x0800c0d0

0800248c <showQueueStatus>:

/**
  * @brief  Muestra el estado de la cola de transmisión USB CDC
  * @retval None
  */
void showQueueStatus(void) {
 800248c:	b508      	push	{r3, lr}

    sprintf(outputBuffer, "\r\n=== ESTADO COLA USB CDC ===\r\n");
 800248e:	4921      	ldr	r1, [pc, #132]	@ (8002514 <showQueueStatus+0x88>)
 8002490:	4821      	ldr	r0, [pc, #132]	@ (8002518 <showQueueStatus+0x8c>)
 8002492:	f005 ff9e 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 8002496:	4820      	ldr	r0, [pc, #128]	@ (8002518 <showQueueStatus+0x8c>)
 8002498:	f7ff f9f2 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800249c:	22c8      	movs	r2, #200	@ 0xc8
 800249e:	2100      	movs	r1, #0
 80024a0:	481d      	ldr	r0, [pc, #116]	@ (8002518 <showQueueStatus+0x8c>)
 80024a2:	f005 fef6 	bl	8008292 <memset>

    sprintf(outputBuffer, "Mensajes en cola: %d/%d\r\n", CDC_TxQueue_GetCount(), 10);
 80024a6:	f004 fdf9 	bl	800709c <CDC_TxQueue_GetCount>
 80024aa:	230a      	movs	r3, #10
 80024ac:	4602      	mov	r2, r0
 80024ae:	491b      	ldr	r1, [pc, #108]	@ (800251c <showQueueStatus+0x90>)
 80024b0:	4819      	ldr	r0, [pc, #100]	@ (8002518 <showQueueStatus+0x8c>)
 80024b2:	f005 fe89 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80024b6:	4818      	ldr	r0, [pc, #96]	@ (8002518 <showQueueStatus+0x8c>)
 80024b8:	f7ff f9e2 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024bc:	22c8      	movs	r2, #200	@ 0xc8
 80024be:	2100      	movs	r1, #0
 80024c0:	4815      	ldr	r0, [pc, #84]	@ (8002518 <showQueueStatus+0x8c>)
 80024c2:	f005 fee6 	bl	8008292 <memset>

    sprintf(outputBuffer, "Cola llena: %s\r\n", CDC_TxQueue_IsFull() ? "SI" : "NO");
 80024c6:	f004 fdef 	bl	80070a8 <CDC_TxQueue_IsFull>
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <showQueueStatus+0x94>)
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <showQueueStatus+0x98>)
 80024ce:	4916      	ldr	r1, [pc, #88]	@ (8002528 <showQueueStatus+0x9c>)
 80024d0:	2800      	cmp	r0, #0
 80024d2:	bf18      	it	ne
 80024d4:	461a      	movne	r2, r3
 80024d6:	4810      	ldr	r0, [pc, #64]	@ (8002518 <showQueueStatus+0x8c>)
 80024d8:	f005 fe76 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80024dc:	480e      	ldr	r0, [pc, #56]	@ (8002518 <showQueueStatus+0x8c>)
 80024de:	f7ff f9cf 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024e2:	22c8      	movs	r2, #200	@ 0xc8
 80024e4:	2100      	movs	r1, #0
 80024e6:	480c      	ldr	r0, [pc, #48]	@ (8002518 <showQueueStatus+0x8c>)
 80024e8:	f005 fed3 	bl	8008292 <memset>

    sprintf(outputBuffer, "Método transmisión: ");
 80024ec:	490f      	ldr	r1, [pc, #60]	@ (800252c <showQueueStatus+0xa0>)
 80024ee:	480a      	ldr	r0, [pc, #40]	@ (8002518 <showQueueStatus+0x8c>)
 80024f0:	f005 ff6f 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 80024f4:	4808      	ldr	r0, [pc, #32]	@ (8002518 <showQueueStatus+0x8c>)
 80024f6:	f7ff f9c3 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80024fa:	22c8      	movs	r2, #200	@ 0xc8
 80024fc:	2100      	movs	r1, #0
 80024fe:	4806      	ldr	r0, [pc, #24]	@ (8002518 <showQueueStatus+0x8c>)
 8002500:	f005 fec7 	bl	8008292 <memset>
            break;
        case USB_METHOD_RETRY:
            sendUSBText("REINTENTOS\r\n");
            break;
        case USB_METHOD_QUEUED:
            sendUSBText("COLA\r\n");
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <showQueueStatus+0xa4>)
 8002506:	f7ff f9bb 	bl	8001880 <sendUSBText>
            break;
    }
    
    sendUSBText("===========================\r\n");
}
 800250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendUSBText("===========================\r\n");
 800250e:	4809      	ldr	r0, [pc, #36]	@ (8002534 <showQueueStatus+0xa8>)
 8002510:	f7ff b9b6 	b.w	8001880 <sendUSBText>
 8002514:	0800cc8a 	.word	0x0800cc8a
 8002518:	20002378 	.word	0x20002378
 800251c:	0800ccaa 	.word	0x0800ccaa
 8002520:	0800cc84 	.word	0x0800cc84
 8002524:	0800cc87 	.word	0x0800cc87
 8002528:	0800ccc4 	.word	0x0800ccc4
 800252c:	0800ccd5 	.word	0x0800ccd5
 8002530:	0800ccec 	.word	0x0800ccec
 8002534:	0800ce31 	.word	0x0800ce31

08002538 <showPlannerStatus>:

/**
  * @brief  Muestra el estado del planner lookahead
  * @retval None
  */
void showPlannerStatus(void) {
 8002538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800253c:	b08b      	sub	sp, #44	@ 0x2c
    uint8_t buffer_usage;
    uint32_t blocks_processed;
    bool is_running;
    
    // Obtener estadísticas del planner
    planner_get_statistics(&buffer_usage, &blocks_processed, &is_running);
 800253e:	f10d 0217 	add.w	r2, sp, #23
 8002542:	a906      	add	r1, sp, #24
 8002544:	f10d 0016 	add.w	r0, sp, #22
 8002548:	f001 fd9c 	bl	8004084 <planner_get_statistics>
    
    sprintf(outputBuffer, "\r\n=== ESTADO PLANNER LOOKAHEAD ===\r\n");
 800254c:	4974      	ldr	r1, [pc, #464]	@ (8002720 <showPlannerStatus+0x1e8>)
 800254e:	4875      	ldr	r0, [pc, #468]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002550:	f005 ff3f 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 8002554:	4873      	ldr	r0, [pc, #460]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002556:	f7ff f993 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800255a:	22c8      	movs	r2, #200	@ 0xc8
 800255c:	2100      	movs	r1, #0
 800255e:	4871      	ldr	r0, [pc, #452]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002560:	f005 fe97 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "Estado: %s\r\n", plannerEnabled ? "HABILITADO" : "DESHABILITADO");
 8002564:	4b70      	ldr	r3, [pc, #448]	@ (8002728 <showPlannerStatus+0x1f0>)
 8002566:	4a71      	ldr	r2, [pc, #452]	@ (800272c <showPlannerStatus+0x1f4>)
 8002568:	7819      	ldrb	r1, [r3, #0]
 800256a:	4b71      	ldr	r3, [pc, #452]	@ (8002730 <showPlannerStatus+0x1f8>)
 800256c:	486d      	ldr	r0, [pc, #436]	@ (8002724 <showPlannerStatus+0x1ec>)
 800256e:	2900      	cmp	r1, #0
 8002570:	bf18      	it	ne
 8002572:	461a      	movne	r2, r3
 8002574:	496f      	ldr	r1, [pc, #444]	@ (8002734 <showPlannerStatus+0x1fc>)
 8002576:	f005 fe27 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 800257a:	486a      	ldr	r0, [pc, #424]	@ (8002724 <showPlannerStatus+0x1ec>)
 800257c:	f7ff f980 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002580:	22c8      	movs	r2, #200	@ 0xc8
 8002582:	2100      	movs	r1, #0
 8002584:	4867      	ldr	r0, [pc, #412]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002586:	f005 fe84 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "Ejecutándose: %s\r\n", is_running ? "SI" : "NO");
 800258a:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <showPlannerStatus+0x200>)
 800258c:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8002590:	4a6a      	ldr	r2, [pc, #424]	@ (800273c <showPlannerStatus+0x204>)
 8002592:	4864      	ldr	r0, [pc, #400]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002594:	2900      	cmp	r1, #0
 8002596:	bf18      	it	ne
 8002598:	461a      	movne	r2, r3
 800259a:	4969      	ldr	r1, [pc, #420]	@ (8002740 <showPlannerStatus+0x208>)
 800259c:	f005 fe14 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80025a0:	4860      	ldr	r0, [pc, #384]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025a2:	f7ff f96d 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025a6:	22c8      	movs	r2, #200	@ 0xc8
 80025a8:	2100      	movs	r1, #0
 80025aa:	485e      	ldr	r0, [pc, #376]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025ac:	f005 fe71 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "Buffer: %d/%d bloques (%d%% uso)\r\n", 
           planner_get_buffer_count(), PLANNER_BUFFER_SIZE, buffer_usage);
 80025b0:	f001 fd16 	bl	8003fe0 <planner_get_buffer_count>
    sprintf(outputBuffer, "Buffer: %d/%d bloques (%d%% uso)\r\n", 
 80025b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
           planner_get_buffer_count(), PLANNER_BUFFER_SIZE, buffer_usage);
 80025b8:	4602      	mov	r2, r0
    sprintf(outputBuffer, "Buffer: %d/%d bloques (%d%% uso)\r\n", 
 80025ba:	4962      	ldr	r1, [pc, #392]	@ (8002744 <showPlannerStatus+0x20c>)
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4859      	ldr	r0, [pc, #356]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025c0:	2308      	movs	r3, #8
 80025c2:	f005 fe01 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80025c6:	4857      	ldr	r0, [pc, #348]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025c8:	f7ff f95a 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025cc:	22c8      	movs	r2, #200	@ 0xc8
 80025ce:	2100      	movs	r1, #0
 80025d0:	4854      	ldr	r0, [pc, #336]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025d2:	f005 fe5e 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "Bloques procesados: %lu\r\n", blocks_processed);
 80025d6:	9a06      	ldr	r2, [sp, #24]
 80025d8:	495b      	ldr	r1, [pc, #364]	@ (8002748 <showPlannerStatus+0x210>)
 80025da:	4852      	ldr	r0, [pc, #328]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025dc:	f005 fdf4 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80025e0:	4850      	ldr	r0, [pc, #320]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025e2:	f7ff f94d 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80025e6:	22c8      	movs	r2, #200	@ 0xc8
 80025e8:	2100      	movs	r1, #0
 80025ea:	484e      	ldr	r0, [pc, #312]	@ (8002724 <showPlannerStatus+0x1ec>)
 80025ec:	f005 fe51 	bl	8008292 <memset>
    
    // Obtener posición actual del planner
    float planner_pos[3];
    planner_get_current_position(planner_pos);
 80025f0:	a807      	add	r0, sp, #28
 80025f2:	f001 fd09 	bl	8004008 <planner_get_current_position>
    
    int x_int = (int)planner_pos[0];
 80025f6:	9f07      	ldr	r7, [sp, #28]
 80025f8:	4638      	mov	r0, r7
 80025fa:	f7fe fd9f 	bl	800113c <__aeabi_f2iz>
    int x_dec = (int)((planner_pos[0] - x_int) * 100);
    int y_int = (int)planner_pos[1];
 80025fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
    int x_int = (int)planner_pos[0];
 8002602:	4604      	mov	r4, r0
    int y_int = (int)planner_pos[1];
 8002604:	4640      	mov	r0, r8
 8002606:	f7fe fd99 	bl	800113c <__aeabi_f2iz>
    int y_dec = (int)((planner_pos[1] - y_int) * 100);
    int z_int = (int)planner_pos[2];
 800260a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    int y_int = (int)planner_pos[1];
 800260e:	4605      	mov	r5, r0
    int z_int = (int)planner_pos[2];
 8002610:	4648      	mov	r0, r9
 8002612:	f7fe fd93 	bl	800113c <__aeabi_f2iz>
 8002616:	4606      	mov	r6, r0
    int x_dec = (int)((planner_pos[0] - x_int) * 100);
 8002618:	4620      	mov	r0, r4
 800261a:	f7fe fb5f 	bl	8000cdc <__aeabi_i2f>
 800261e:	4601      	mov	r1, r0
 8002620:	4638      	mov	r0, r7
 8002622:	f7fe faa5 	bl	8000b70 <__aeabi_fsub>
 8002626:	4949      	ldr	r1, [pc, #292]	@ (800274c <showPlannerStatus+0x214>)
 8002628:	f7fe fbac 	bl	8000d84 <__aeabi_fmul>
 800262c:	f7fe fd86 	bl	800113c <__aeabi_f2iz>
    int z_dec = (int)((planner_pos[2] - z_int) * 100);
    
    sprintf(outputBuffer, "Posición planner: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8002630:	ea80 77e0 	eor.w	r7, r0, r0, asr #31
 8002634:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
    int z_dec = (int)((planner_pos[2] - z_int) * 100);
 8002638:	4630      	mov	r0, r6
 800263a:	f7fe fb4f 	bl	8000cdc <__aeabi_i2f>
 800263e:	4601      	mov	r1, r0
 8002640:	4648      	mov	r0, r9
 8002642:	f7fe fa95 	bl	8000b70 <__aeabi_fsub>
 8002646:	4941      	ldr	r1, [pc, #260]	@ (800274c <showPlannerStatus+0x214>)
 8002648:	f7fe fb9c 	bl	8000d84 <__aeabi_fmul>
 800264c:	f7fe fd76 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición planner: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8002650:	2800      	cmp	r0, #0
 8002652:	bfb8      	it	lt
 8002654:	4240      	neglt	r0, r0
 8002656:	e9cd 6002 	strd	r6, r0, [sp, #8]
    int y_dec = (int)((planner_pos[1] - y_int) * 100);
 800265a:	4628      	mov	r0, r5
 800265c:	f7fe fb3e 	bl	8000cdc <__aeabi_i2f>
 8002660:	4601      	mov	r1, r0
 8002662:	4640      	mov	r0, r8
 8002664:	f7fe fa84 	bl	8000b70 <__aeabi_fsub>
 8002668:	4938      	ldr	r1, [pc, #224]	@ (800274c <showPlannerStatus+0x214>)
 800266a:	f7fe fb8b 	bl	8000d84 <__aeabi_fmul>
 800266e:	f7fe fd65 	bl	800113c <__aeabi_f2iz>
    sprintf(outputBuffer, "Posición planner: X%d.%02d Y%d.%02d Z%d.%02d mm\r\n",
 8002672:	2800      	cmp	r0, #0
 8002674:	bfb8      	it	lt
 8002676:	4240      	neglt	r0, r0
 8002678:	463b      	mov	r3, r7
 800267a:	4622      	mov	r2, r4
 800267c:	e9cd 5000 	strd	r5, r0, [sp]
 8002680:	4933      	ldr	r1, [pc, #204]	@ (8002750 <showPlannerStatus+0x218>)
 8002682:	4828      	ldr	r0, [pc, #160]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002684:	f005 fda0 	bl	80081c8 <siprintf>
           x_int, abs(x_dec), y_int, abs(y_dec), z_int, abs(z_dec));
    sendUSBText(outputBuffer);
 8002688:	4826      	ldr	r0, [pc, #152]	@ (8002724 <showPlannerStatus+0x1ec>)
 800268a:	f7ff f8f9 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800268e:	22c8      	movs	r2, #200	@ 0xc8
 8002690:	2100      	movs	r1, #0
 8002692:	4824      	ldr	r0, [pc, #144]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002694:	f005 fdfd 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "Configuración:\r\n");
 8002698:	492e      	ldr	r1, [pc, #184]	@ (8002754 <showPlannerStatus+0x21c>)
 800269a:	4822      	ldr	r0, [pc, #136]	@ (8002724 <showPlannerStatus+0x1ec>)
 800269c:	f005 fe99 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
 80026a0:	4820      	ldr	r0, [pc, #128]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026a2:	f7ff f8ed 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80026a6:	22c8      	movs	r2, #200	@ 0xc8
 80026a8:	2100      	movs	r1, #0
 80026aa:	481e      	ldr	r0, [pc, #120]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026ac:	f005 fdf1 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "  - Buffer size: %d bloques\r\n", PLANNER_BUFFER_SIZE);
 80026b0:	2208      	movs	r2, #8
 80026b2:	4929      	ldr	r1, [pc, #164]	@ (8002758 <showPlannerStatus+0x220>)
 80026b4:	481b      	ldr	r0, [pc, #108]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026b6:	f005 fd87 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80026ba:	481a      	ldr	r0, [pc, #104]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026bc:	f7ff f8e0 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80026c0:	22c8      	movs	r2, #200	@ 0xc8
 80026c2:	2100      	movs	r1, #0
 80026c4:	4817      	ldr	r0, [pc, #92]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026c6:	f005 fde4 	bl	8008292 <memset>
    
    sprintf(outputBuffer, "  - Junction deviation: %.2f mm\r\n", JUNCTION_DEVIATION);
 80026ca:	a313      	add	r3, pc, #76	@ (adr r3, 8002718 <showPlannerStatus+0x1e0>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4922      	ldr	r1, [pc, #136]	@ (800275c <showPlannerStatus+0x224>)
 80026d2:	4814      	ldr	r0, [pc, #80]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026d4:	f005 fd78 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80026d8:	4812      	ldr	r0, [pc, #72]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026da:	f7ff f8d1 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80026de:	22c8      	movs	r2, #200	@ 0xc8
 80026e0:	2100      	movs	r1, #0
 80026e2:	4810      	ldr	r0, [pc, #64]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026e4:	f005 fdd5 	bl	8008292 <memset>
    
    int acc_int = (int)ACCELERATION;
    int acc_dec = (int)((ACCELERATION - acc_int) * 10);
    sprintf(outputBuffer, "  - Aceleración: %d.%d mm/min²\r\n", acc_int, acc_dec);
 80026e8:	2300      	movs	r3, #0
 80026ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ee:	491c      	ldr	r1, [pc, #112]	@ (8002760 <showPlannerStatus+0x228>)
 80026f0:	480c      	ldr	r0, [pc, #48]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026f2:	f005 fd69 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80026f6:	480b      	ldr	r0, [pc, #44]	@ (8002724 <showPlannerStatus+0x1ec>)
 80026f8:	f7ff f8c2 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80026fc:	22c8      	movs	r2, #200	@ 0xc8
 80026fe:	2100      	movs	r1, #0
 8002700:	4808      	ldr	r0, [pc, #32]	@ (8002724 <showPlannerStatus+0x1ec>)
 8002702:	f005 fdc6 	bl	8008292 <memset>
    
    sendUSBText("================================\r\n");
 8002706:	4817      	ldr	r0, [pc, #92]	@ (8002764 <showPlannerStatus+0x22c>)
 8002708:	f7ff f8ba 	bl	8001880 <sendUSBText>
}
 800270c:	b00b      	add	sp, #44	@ 0x2c
 800270e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	a0000000 	.word	0xa0000000
 800271c:	3fb99999 	.word	0x3fb99999
 8002720:	0800cd01 	.word	0x0800cd01
 8002724:	20002378 	.word	0x20002378
 8002728:	20000000 	.word	0x20000000
 800272c:	0800ccf3 	.word	0x0800ccf3
 8002730:	0800ccf6 	.word	0x0800ccf6
 8002734:	0800cd26 	.word	0x0800cd26
 8002738:	0800cc84 	.word	0x0800cc84
 800273c:	0800cc87 	.word	0x0800cc87
 8002740:	0800cd33 	.word	0x0800cd33
 8002744:	0800cd47 	.word	0x0800cd47
 8002748:	0800cd6a 	.word	0x0800cd6a
 800274c:	42c80000 	.word	0x42c80000
 8002750:	0800cd84 	.word	0x0800cd84
 8002754:	0800cdb7 	.word	0x0800cdb7
 8002758:	0800cdc9 	.word	0x0800cdc9
 800275c:	0800cde7 	.word	0x0800cde7
 8002760:	0800ce09 	.word	0x0800ce09
 8002764:	0800ce2c 	.word	0x0800ce2c

08002768 <showProgramStatus>:

/**
  * @brief  Muestra el estado del programa en ejecución
  * @retval None
  */
void showProgramStatus(void) {
 8002768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    sprintf(outputBuffer, "\r\n=== ESTADO PROGRAMA G-CODE ===\r\n");
 800276a:	4941      	ldr	r1, [pc, #260]	@ (8002870 <showProgramStatus+0x108>)
 800276c:	4841      	ldr	r0, [pc, #260]	@ (8002874 <showProgramStatus+0x10c>)
 800276e:	f005 fe30 	bl	80083d2 <strcpy>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 8002772:	4c41      	ldr	r4, [pc, #260]	@ (8002878 <showProgramStatus+0x110>)
    sendUSBText(outputBuffer);
 8002774:	483f      	ldr	r0, [pc, #252]	@ (8002874 <showProgramStatus+0x10c>)
 8002776:	f7ff f883 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 800277a:	22c8      	movs	r2, #200	@ 0xc8
 800277c:	2100      	movs	r1, #0
 800277e:	483d      	ldr	r0, [pc, #244]	@ (8002874 <showProgramStatus+0x10c>)
 8002780:	f005 fd87 	bl	8008292 <memset>
    sprintf(outputBuffer, "Programa cargado: %s\r\n", isProgramLoaded ? "SI" : "NO");
 8002784:	4f3d      	ldr	r7, [pc, #244]	@ (800287c <showProgramStatus+0x114>)
 8002786:	7822      	ldrb	r2, [r4, #0]
 8002788:	4d3d      	ldr	r5, [pc, #244]	@ (8002880 <showProgramStatus+0x118>)
 800278a:	493e      	ldr	r1, [pc, #248]	@ (8002884 <showProgramStatus+0x11c>)
 800278c:	2a00      	cmp	r2, #0
 800278e:	bf0c      	ite	eq
 8002790:	463a      	moveq	r2, r7
 8002792:	462a      	movne	r2, r5
 8002794:	4837      	ldr	r0, [pc, #220]	@ (8002874 <showProgramStatus+0x10c>)
 8002796:	f005 fd17 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
    memset(outputBuffer, 0, sizeof(outputBuffer));
    
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 800279a:	4e3b      	ldr	r6, [pc, #236]	@ (8002888 <showProgramStatus+0x120>)
    sendUSBText(outputBuffer);
 800279c:	4835      	ldr	r0, [pc, #212]	@ (8002874 <showProgramStatus+0x10c>)
 800279e:	f7ff f86f 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80027a2:	22c8      	movs	r2, #200	@ 0xc8
 80027a4:	2100      	movs	r1, #0
 80027a6:	4833      	ldr	r0, [pc, #204]	@ (8002874 <showProgramStatus+0x10c>)
 80027a8:	f005 fd73 	bl	8008292 <memset>
    sprintf(outputBuffer, "Programa ejecutándose: %s\r\n", isProgramRunning ? "SI" : "NO");
 80027ac:	7832      	ldrb	r2, [r6, #0]
 80027ae:	4937      	ldr	r1, [pc, #220]	@ (800288c <showProgramStatus+0x124>)
 80027b0:	2a00      	cmp	r2, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	463a      	moveq	r2, r7
 80027b6:	462a      	movne	r2, r5
 80027b8:	482e      	ldr	r0, [pc, #184]	@ (8002874 <showProgramStatus+0x10c>)
 80027ba:	f005 fd05 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 80027be:	482d      	ldr	r0, [pc, #180]	@ (8002874 <showProgramStatus+0x10c>)
 80027c0:	f7ff f85e 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 80027c4:	22c8      	movs	r2, #200	@ 0xc8
 80027c6:	2100      	movs	r1, #0
 80027c8:	482a      	ldr	r0, [pc, #168]	@ (8002874 <showProgramStatus+0x10c>)
 80027ca:	f005 fd62 	bl	8008292 <memset>
    
    if (isProgramLoaded) {
 80027ce:	7823      	ldrb	r3, [r4, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d048      	beq.n	8002866 <showProgramStatus+0xfe>
        sprintf(outputBuffer, "Total de líneas: %d\r\n", programLineCount);
 80027d4:	4c2e      	ldr	r4, [pc, #184]	@ (8002890 <showProgramStatus+0x128>)
 80027d6:	492f      	ldr	r1, [pc, #188]	@ (8002894 <showProgramStatus+0x12c>)
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	4826      	ldr	r0, [pc, #152]	@ (8002874 <showProgramStatus+0x10c>)
 80027dc:	f005 fcf4 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 80027e0:	4d2d      	ldr	r5, [pc, #180]	@ (8002898 <showProgramStatus+0x130>)
        sendUSBText(outputBuffer);
 80027e2:	4824      	ldr	r0, [pc, #144]	@ (8002874 <showProgramStatus+0x10c>)
 80027e4:	f7ff f84c 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 80027e8:	22c8      	movs	r2, #200	@ 0xc8
 80027ea:	2100      	movs	r1, #0
 80027ec:	4821      	ldr	r0, [pc, #132]	@ (8002874 <showProgramStatus+0x10c>)
 80027ee:	f005 fd50 	bl	8008292 <memset>
        sprintf(outputBuffer, "Línea actual: %d\r\n", currentExecutingLine + 1);
 80027f2:	682a      	ldr	r2, [r5, #0]
 80027f4:	4929      	ldr	r1, [pc, #164]	@ (800289c <showProgramStatus+0x134>)
 80027f6:	3201      	adds	r2, #1
 80027f8:	481e      	ldr	r0, [pc, #120]	@ (8002874 <showProgramStatus+0x10c>)
 80027fa:	f005 fce5 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
 80027fe:	481d      	ldr	r0, [pc, #116]	@ (8002874 <showProgramStatus+0x10c>)
 8002800:	f7ff f83e 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002804:	22c8      	movs	r2, #200	@ 0xc8
 8002806:	2100      	movs	r1, #0
 8002808:	481a      	ldr	r0, [pc, #104]	@ (8002874 <showProgramStatus+0x10c>)
 800280a:	f005 fd42 	bl	8008292 <memset>
        
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 800280e:	6823      	ldr	r3, [r4, #0]
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002810:	4818      	ldr	r0, [pc, #96]	@ (8002874 <showProgramStatus+0x10c>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002812:	2b00      	cmp	r3, #0
 8002814:	bfc5      	ittet	gt
 8002816:	2164      	movgt	r1, #100	@ 0x64
 8002818:	682a      	ldrgt	r2, [r5, #0]
 800281a:	2200      	movle	r2, #0
 800281c:	434a      	mulgt	r2, r1
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 800281e:	4920      	ldr	r1, [pc, #128]	@ (80028a0 <showProgramStatus+0x138>)
        int progress = (programLineCount > 0) ? (currentExecutingLine * 100) / programLineCount : 0;
 8002820:	bfc8      	it	gt
 8002822:	fb92 f2f3 	sdivgt	r2, r2, r3
        sprintf(outputBuffer, "Progreso: %d%%\r\n", progress);
 8002826:	f005 fccf 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
 800282a:	4812      	ldr	r0, [pc, #72]	@ (8002874 <showProgramStatus+0x10c>)
 800282c:	f7ff f828 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002830:	22c8      	movs	r2, #200	@ 0xc8
 8002832:	2100      	movs	r1, #0
 8002834:	480f      	ldr	r0, [pc, #60]	@ (8002874 <showProgramStatus+0x10c>)
 8002836:	f005 fd2c 	bl	8008292 <memset>
        
        if (isProgramRunning && currentExecutingLine < programLineCount) {
 800283a:	7833      	ldrb	r3, [r6, #0]
 800283c:	b19b      	cbz	r3, 8002866 <showProgramStatus+0xfe>
 800283e:	682b      	ldr	r3, [r5, #0]
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	4293      	cmp	r3, r2
 8002844:	da0f      	bge.n	8002866 <showProgramStatus+0xfe>
            sprintf(outputBuffer, "Próxima línea: %s\r\n", gcodeProgram[currentExecutingLine]);
 8002846:	2150      	movs	r1, #80	@ 0x50
 8002848:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <showProgramStatus+0x13c>)
 800284a:	480a      	ldr	r0, [pc, #40]	@ (8002874 <showProgramStatus+0x10c>)
 800284c:	fb01 2203 	mla	r2, r1, r3, r2
 8002850:	4915      	ldr	r1, [pc, #84]	@ (80028a8 <showProgramStatus+0x140>)
 8002852:	f005 fcb9 	bl	80081c8 <siprintf>
            sendUSBText(outputBuffer);
 8002856:	4807      	ldr	r0, [pc, #28]	@ (8002874 <showProgramStatus+0x10c>)
 8002858:	f7ff f812 	bl	8001880 <sendUSBText>
            memset(outputBuffer, 0, sizeof(outputBuffer));
 800285c:	22c8      	movs	r2, #200	@ 0xc8
 800285e:	2100      	movs	r1, #0
 8002860:	4804      	ldr	r0, [pc, #16]	@ (8002874 <showProgramStatus+0x10c>)
 8002862:	f005 fd16 	bl	8008292 <memset>
        }
    }
    
    sendUSBText("=============================\r\n");
}
 8002866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendUSBText("=============================\r\n");
 800286a:	4810      	ldr	r0, [pc, #64]	@ (80028ac <showProgramStatus+0x144>)
 800286c:	f7ff b808 	b.w	8001880 <sendUSBText>
 8002870:	0800ce4f 	.word	0x0800ce4f
 8002874:	20002378 	.word	0x20002378
 8002878:	200003b5 	.word	0x200003b5
 800287c:	0800cc87 	.word	0x0800cc87
 8002880:	0800cc84 	.word	0x0800cc84
 8002884:	0800ce72 	.word	0x0800ce72
 8002888:	200003b4 	.word	0x200003b4
 800288c:	0800ce89 	.word	0x0800ce89
 8002890:	200003bc 	.word	0x200003bc
 8002894:	0800cea6 	.word	0x0800cea6
 8002898:	200003b8 	.word	0x200003b8
 800289c:	0800cebd 	.word	0x0800cebd
 80028a0:	0800ced1 	.word	0x0800ced1
 80028a4:	200003c0 	.word	0x200003c0
 80028a8:	0800cee2 	.word	0x0800cee2
 80028ac:	0800ce2f 	.word	0x0800ce2f

080028b0 <processGcode>:
void processGcode(const char* command) {
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80028b4:	220d      	movs	r2, #13
void processGcode(const char* command) {
 80028b6:	b0a0      	sub	sp, #128	@ 0x80
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80028b8:	49a0      	ldr	r1, [pc, #640]	@ (8002b3c <processGcode+0x28c>)
void processGcode(const char* command) {
 80028ba:	4604      	mov	r4, r0
    if (strncmp(command, "PROGRAM_START", 13) == 0) {
 80028bc:	f005 fcf1 	bl	80082a2 <strncmp>
 80028c0:	b920      	cbnz	r0, 80028cc <processGcode+0x1c>
}
 80028c2:	b020      	add	sp, #128	@ 0x80
 80028c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        startProgramStorage();
 80028c8:	f7ff bb9a 	b.w	8002000 <startProgramStorage>
    else if (strncmp(command, "PROGRAM_STOP", 12) == 0) {
 80028cc:	220c      	movs	r2, #12
 80028ce:	4620      	mov	r0, r4
 80028d0:	499b      	ldr	r1, [pc, #620]	@ (8002b40 <processGcode+0x290>)
 80028d2:	f005 fce6 	bl	80082a2 <strncmp>
 80028d6:	b920      	cbnz	r0, 80028e2 <processGcode+0x32>
}
 80028d8:	b020      	add	sp, #128	@ 0x80
 80028da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        stopProgramStorage();
 80028de:	f7ff bbb9 	b.w	8002054 <stopProgramStorage>
    else if (strncmp(command, "PROGRAM_RUN", 11) == 0) {
 80028e2:	220b      	movs	r2, #11
 80028e4:	4620      	mov	r0, r4
 80028e6:	4997      	ldr	r1, [pc, #604]	@ (8002b44 <processGcode+0x294>)
 80028e8:	f005 fcdb 	bl	80082a2 <strncmp>
 80028ec:	b920      	cbnz	r0, 80028f8 <processGcode+0x48>
}
 80028ee:	b020      	add	sp, #128	@ 0x80
 80028f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runProgram();
 80028f4:	f7ff bc40 	b.w	8002178 <runProgram>
    else if (strncmp(command, "PROGRAM_CLEAR", 13) == 0) {
 80028f8:	220d      	movs	r2, #13
 80028fa:	4620      	mov	r0, r4
 80028fc:	4992      	ldr	r1, [pc, #584]	@ (8002b48 <processGcode+0x298>)
 80028fe:	f005 fcd0 	bl	80082a2 <strncmp>
 8002902:	b920      	cbnz	r0, 800290e <processGcode+0x5e>
}
 8002904:	b020      	add	sp, #128	@ 0x80
 8002906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        clearProgram();
 800290a:	f7ff bc0b 	b.w	8002124 <clearProgram>
    else if (strncmp(command, "PROGRAM_PAUSE", 13) == 0) {
 800290e:	220d      	movs	r2, #13
 8002910:	4620      	mov	r0, r4
 8002912:	498e      	ldr	r1, [pc, #568]	@ (8002b4c <processGcode+0x29c>)
 8002914:	f005 fcc5 	bl	80082a2 <strncmp>
 8002918:	b920      	cbnz	r0, 8002924 <processGcode+0x74>
}
 800291a:	b020      	add	sp, #128	@ 0x80
 800291c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        pauseProgram();
 8002920:	f7ff bcda 	b.w	80022d8 <pauseProgram>
    else if (strncmp(command, "PROGRAM_NEXT", 12) == 0) {
 8002924:	220c      	movs	r2, #12
 8002926:	4620      	mov	r0, r4
 8002928:	4989      	ldr	r1, [pc, #548]	@ (8002b50 <processGcode+0x2a0>)
 800292a:	f005 fcba 	bl	80082a2 <strncmp>
 800292e:	b920      	cbnz	r0, 800293a <processGcode+0x8a>
}
 8002930:	b020      	add	sp, #128	@ 0x80
 8002932:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        runNextLine();
 8002936:	f7ff bc5b 	b.w	80021f0 <runNextLine>
    else if (strncmp(command, "PROGRAM_STATUS", 14) == 0) {
 800293a:	220e      	movs	r2, #14
 800293c:	4620      	mov	r0, r4
 800293e:	4985      	ldr	r1, [pc, #532]	@ (8002b54 <processGcode+0x2a4>)
 8002940:	f005 fcaf 	bl	80082a2 <strncmp>
 8002944:	b920      	cbnz	r0, 8002950 <processGcode+0xa0>
}
 8002946:	b020      	add	sp, #128	@ 0x80
 8002948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showProgramStatus();
 800294c:	f7ff bf0c 	b.w	8002768 <showProgramStatus>
    else if (strncmp(command, "HELP", 4) == 0 || strncmp(command, "help", 4) == 0) {
 8002950:	2204      	movs	r2, #4
 8002952:	4620      	mov	r0, r4
 8002954:	4980      	ldr	r1, [pc, #512]	@ (8002b58 <processGcode+0x2a8>)
 8002956:	f005 fca4 	bl	80082a2 <strncmp>
 800295a:	b128      	cbz	r0, 8002968 <processGcode+0xb8>
 800295c:	2204      	movs	r2, #4
 800295e:	4620      	mov	r0, r4
 8002960:	497e      	ldr	r1, [pc, #504]	@ (8002b5c <processGcode+0x2ac>)
 8002962:	f005 fc9e 	bl	80082a2 <strncmp>
 8002966:	b920      	cbnz	r0, 8002972 <processGcode+0xc2>
}
 8002968:	b020      	add	sp, #128	@ 0x80
 800296a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showHelp();
 800296e:	f7ff bcdb 	b.w	8002328 <showHelp>
    else if (strncmp(command, "QUEUE_STATUS", 12) == 0) {
 8002972:	220c      	movs	r2, #12
 8002974:	4620      	mov	r0, r4
 8002976:	497a      	ldr	r1, [pc, #488]	@ (8002b60 <processGcode+0x2b0>)
 8002978:	f005 fc93 	bl	80082a2 <strncmp>
 800297c:	b920      	cbnz	r0, 8002988 <processGcode+0xd8>
}
 800297e:	b020      	add	sp, #128	@ 0x80
 8002980:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showQueueStatus();
 8002984:	f7ff bd82 	b.w	800248c <showQueueStatus>
    else if (strncmp(command, "PLANNER_STATUS", 14) == 0) {
 8002988:	220e      	movs	r2, #14
 800298a:	4620      	mov	r0, r4
 800298c:	4975      	ldr	r1, [pc, #468]	@ (8002b64 <processGcode+0x2b4>)
 800298e:	f005 fc88 	bl	80082a2 <strncmp>
 8002992:	b920      	cbnz	r0, 800299e <processGcode+0xee>
}
 8002994:	b020      	add	sp, #128	@ 0x80
 8002996:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        showPlannerStatus();
 800299a:	f7ff bdcd 	b.w	8002538 <showPlannerStatus>
    else if (strncmp(command, "PLANNER_ENABLE", 14) == 0) {
 800299e:	220e      	movs	r2, #14
 80029a0:	4620      	mov	r0, r4
 80029a2:	4971      	ldr	r1, [pc, #452]	@ (8002b68 <processGcode+0x2b8>)
 80029a4:	f005 fc7d 	bl	80082a2 <strncmp>
 80029a8:	b940      	cbnz	r0, 80029bc <processGcode+0x10c>
        plannerEnabled = true;
 80029aa:	2201      	movs	r2, #1
 80029ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <processGcode+0x2bc>)
        sendUSBText("Planner habilitado\r\n");
 80029ae:	4870      	ldr	r0, [pc, #448]	@ (8002b70 <processGcode+0x2c0>)
        plannerEnabled = true;
 80029b0:	701a      	strb	r2, [r3, #0]
}
 80029b2:	b020      	add	sp, #128	@ 0x80
 80029b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            sendUSBText("error: buffer lleno\r\n");
 80029b8:	f7fe bf62 	b.w	8001880 <sendUSBText>
    else if (strncmp(command, "PLANNER_DISABLE", 15) == 0) {
 80029bc:	220f      	movs	r2, #15
 80029be:	4620      	mov	r0, r4
 80029c0:	496c      	ldr	r1, [pc, #432]	@ (8002b74 <processGcode+0x2c4>)
 80029c2:	f005 fc6e 	bl	80082a2 <strncmp>
 80029c6:	b928      	cbnz	r0, 80029d4 <processGcode+0x124>
        plannerEnabled = false;
 80029c8:	4b68      	ldr	r3, [pc, #416]	@ (8002b6c <processGcode+0x2bc>)
 80029ca:	7018      	strb	r0, [r3, #0]
        planner_synchronize(); // Esperar que termine el buffer actual
 80029cc:	f001 fb0e 	bl	8003fec <planner_synchronize>
        sendUSBText("Planner deshabilitado\r\n");
 80029d0:	4869      	ldr	r0, [pc, #420]	@ (8002b78 <processGcode+0x2c8>)
 80029d2:	e7ee      	b.n	80029b2 <processGcode+0x102>
    else if (strncmp(command, "PLANNER_SYNC", 12) == 0) {
 80029d4:	220c      	movs	r2, #12
 80029d6:	4620      	mov	r0, r4
 80029d8:	4968      	ldr	r1, [pc, #416]	@ (8002b7c <processGcode+0x2cc>)
 80029da:	f005 fc62 	bl	80082a2 <strncmp>
 80029de:	b918      	cbnz	r0, 80029e8 <processGcode+0x138>
        planner_synchronize();
 80029e0:	f001 fb04 	bl	8003fec <planner_synchronize>
        sendUSBText("Planner sincronizado\r\n");
 80029e4:	4866      	ldr	r0, [pc, #408]	@ (8002b80 <processGcode+0x2d0>)
 80029e6:	e7e4      	b.n	80029b2 <processGcode+0x102>
    else if (strncmp(command, "PLANNER_RESET", 13) == 0) {
 80029e8:	220d      	movs	r2, #13
 80029ea:	4620      	mov	r0, r4
 80029ec:	4965      	ldr	r1, [pc, #404]	@ (8002b84 <processGcode+0x2d4>)
 80029ee:	f005 fc58 	bl	80082a2 <strncmp>
 80029f2:	b918      	cbnz	r0, 80029fc <processGcode+0x14c>
        planner_reset();
 80029f4:	f001 fb44 	bl	8004080 <planner_reset>
        sendUSBText("Planner reiniciado\r\n");
 80029f8:	4863      	ldr	r0, [pc, #396]	@ (8002b88 <processGcode+0x2d8>)
 80029fa:	e7da      	b.n	80029b2 <processGcode+0x102>
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 80029fc:	2203      	movs	r2, #3
 80029fe:	4620      	mov	r0, r4
 8002a00:	4962      	ldr	r1, [pc, #392]	@ (8002b8c <processGcode+0x2dc>)
 8002a02:	f005 fc4e 	bl	80082a2 <strncmp>
    if (isStoringProgram) {
 8002a06:	4b62      	ldr	r3, [pc, #392]	@ (8002b90 <processGcode+0x2e0>)
 8002a08:	781d      	ldrb	r5, [r3, #0]
    else if (strncmp(command, "FIN", 3) == 0 || strncmp(command, "fin", 3) == 0) {
 8002a0a:	b130      	cbz	r0, 8002a1a <processGcode+0x16a>
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4960      	ldr	r1, [pc, #384]	@ (8002b94 <processGcode+0x2e4>)
 8002a12:	f005 fc46 	bl	80082a2 <strncmp>
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d17b      	bne.n	8002b12 <processGcode+0x262>
        if (isStoringProgram) {
 8002a1a:	2d00      	cmp	r5, #0
 8002a1c:	f47f af5c 	bne.w	80028d8 <processGcode+0x28>
    strncpy(line_copy, command, sizeof(line_copy) - 1);
 8002a20:	2263      	movs	r2, #99	@ 0x63
 8002a22:	4621      	mov	r1, r4
 8002a24:	a807      	add	r0, sp, #28
 8002a26:	f005 fc4e 	bl	80082c6 <strncpy>
    line_copy[sizeof(line_copy) - 1] = '\0';
 8002a2a:	2300      	movs	r3, #0
    uint8_t status = gc_execute_line(line_copy);
 8002a2c:	a807      	add	r0, sp, #28
    line_copy[sizeof(line_copy) - 1] = '\0';
 8002a2e:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    uint8_t status = gc_execute_line(line_copy);
 8002a32:	f7fe fe95 	bl	8001760 <gc_execute_line>
    if (status == STATUS_OK) {
 8002a36:	4605      	mov	r5, r0
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d164      	bne.n	8002b06 <processGcode+0x256>
        if (strncmp(command, "M114", 4) == 0) {
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4955      	ldr	r1, [pc, #340]	@ (8002b98 <processGcode+0x2e8>)
 8002a42:	f005 fc2e 	bl	80082a2 <strncmp>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d16d      	bne.n	8002b26 <processGcode+0x276>
            float xPos = currentX / (float)STEPS_PER_MM_X;
 8002a4a:	4b54      	ldr	r3, [pc, #336]	@ (8002b9c <processGcode+0x2ec>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f7fe f945 	bl	8000cdc <__aeabi_i2f>
 8002a52:	4953      	ldr	r1, [pc, #332]	@ (8002ba0 <processGcode+0x2f0>)
 8002a54:	f7fe fa4a 	bl	8000eec <__aeabi_fdiv>
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002a58:	4b52      	ldr	r3, [pc, #328]	@ (8002ba4 <processGcode+0x2f4>)
            float xPos = currentX / (float)STEPS_PER_MM_X;
 8002a5a:	4606      	mov	r6, r0
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	f7fe f93d 	bl	8000cdc <__aeabi_i2f>
 8002a62:	494f      	ldr	r1, [pc, #316]	@ (8002ba0 <processGcode+0x2f0>)
 8002a64:	f7fe fa42 	bl	8000eec <__aeabi_fdiv>
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002a68:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <processGcode+0x2f8>)
            float yPos = currentY / (float)STEPS_PER_MM_Y;
 8002a6a:	4680      	mov	r8, r0
            float zPos = currentZ / (float)STEPS_PER_MM_Z;
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f7fe f935 	bl	8000cdc <__aeabi_i2f>
 8002a72:	494e      	ldr	r1, [pc, #312]	@ (8002bac <processGcode+0x2fc>)
 8002a74:	f7fe fa3a 	bl	8000eec <__aeabi_fdiv>
 8002a78:	4681      	mov	r9, r0
            int x_int = (int)xPos;
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f7fe fb5e 	bl	800113c <__aeabi_f2iz>
 8002a80:	4604      	mov	r4, r0
            int y_int = (int)yPos;
 8002a82:	4640      	mov	r0, r8
 8002a84:	f7fe fb5a 	bl	800113c <__aeabi_f2iz>
 8002a88:	4607      	mov	r7, r0
            int z_int = (int)zPos;
 8002a8a:	4648      	mov	r0, r9
 8002a8c:	f7fe fb56 	bl	800113c <__aeabi_f2iz>
 8002a90:	4682      	mov	sl, r0
            int z_dec = (int)((zPos - z_int) * 100);
 8002a92:	f7fe f923 	bl	8000cdc <__aeabi_i2f>
 8002a96:	4601      	mov	r1, r0
 8002a98:	4648      	mov	r0, r9
 8002a9a:	f7fe f869 	bl	8000b70 <__aeabi_fsub>
 8002a9e:	4944      	ldr	r1, [pc, #272]	@ (8002bb0 <processGcode+0x300>)
 8002aa0:	f7fe f970 	bl	8000d84 <__aeabi_fmul>
 8002aa4:	f7fe fb4a 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	bfb8      	it	lt
 8002aac:	4240      	neglt	r0, r0
 8002aae:	e9cd a003 	strd	sl, r0, [sp, #12]
            int y_dec = (int)((yPos - y_int) * 100);
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	f7fe f912 	bl	8000cdc <__aeabi_i2f>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	4640      	mov	r0, r8
 8002abc:	f7fe f858 	bl	8000b70 <__aeabi_fsub>
 8002ac0:	493b      	ldr	r1, [pc, #236]	@ (8002bb0 <processGcode+0x300>)
 8002ac2:	f7fe f95f 	bl	8000d84 <__aeabi_fmul>
 8002ac6:	f7fe fb39 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002aca:	2800      	cmp	r0, #0
 8002acc:	bfb8      	it	lt
 8002ace:	4240      	neglt	r0, r0
 8002ad0:	e9cd 7001 	strd	r7, r0, [sp, #4]
            int x_dec = (int)((xPos - x_int) * 100);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7fe f901 	bl	8000cdc <__aeabi_i2f>
 8002ada:	4601      	mov	r1, r0
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7fe f847 	bl	8000b70 <__aeabi_fsub>
 8002ae2:	4933      	ldr	r1, [pc, #204]	@ (8002bb0 <processGcode+0x300>)
 8002ae4:	f7fe f94e 	bl	8000d84 <__aeabi_fmul>
 8002ae8:	f7fe fb28 	bl	800113c <__aeabi_f2iz>
            snprintf(outputBuffer, sizeof(outputBuffer), "X:%d.%02d Y:%d.%02d Z:%d.%02d\r\n", 
 8002aec:	2800      	cmp	r0, #0
 8002aee:	bfb8      	it	lt
 8002af0:	4240      	neglt	r0, r0
 8002af2:	9000      	str	r0, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	21c8      	movs	r1, #200	@ 0xc8
 8002af8:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb4 <processGcode+0x304>)
 8002afa:	482f      	ldr	r0, [pc, #188]	@ (8002bb8 <processGcode+0x308>)
 8002afc:	f005 fb2e 	bl	800815c <sniprintf>
            sendUSBText(outputBuffer);
 8002b00:	482d      	ldr	r0, [pc, #180]	@ (8002bb8 <processGcode+0x308>)
 8002b02:	f7fe febd 	bl	8001880 <sendUSBText>
    report_status_message(status);
 8002b06:	4628      	mov	r0, r5
 8002b08:	f7fe fe3e 	bl	8001788 <report_status_message>
}
 8002b0c:	b020      	add	sp, #128	@ 0x80
 8002b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (isStoringProgram) {
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	d084      	beq.n	8002a20 <processGcode+0x170>
        if (addLineToProgram(command)) {
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff face 	bl	80020b8 <addLineToProgram>
 8002b1c:	b108      	cbz	r0, 8002b22 <processGcode+0x272>
            sendUSBText("ok\r\n");
 8002b1e:	4827      	ldr	r0, [pc, #156]	@ (8002bbc <processGcode+0x30c>)
 8002b20:	e747      	b.n	80029b2 <processGcode+0x102>
            sendUSBText("error: buffer lleno\r\n");
 8002b22:	4827      	ldr	r0, [pc, #156]	@ (8002bc0 <processGcode+0x310>)
 8002b24:	e745      	b.n	80029b2 <processGcode+0x102>
        } else if (strncmp(command, "M503", 4) == 0) {
 8002b26:	2204      	movs	r2, #4
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4926      	ldr	r1, [pc, #152]	@ (8002bc4 <processGcode+0x314>)
 8002b2c:	f005 fbb9 	bl	80082a2 <strncmp>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d1e8      	bne.n	8002b06 <processGcode+0x256>
            showConfiguration();
 8002b34:	f7fe ffc0 	bl	8001ab8 <showConfiguration>
 8002b38:	e7e5      	b.n	8002b06 <processGcode+0x256>
 8002b3a:	bf00      	nop
 8002b3c:	0800cef8 	.word	0x0800cef8
 8002b40:	0800cf06 	.word	0x0800cf06
 8002b44:	0800cf13 	.word	0x0800cf13
 8002b48:	0800cf1f 	.word	0x0800cf1f
 8002b4c:	0800cf2d 	.word	0x0800cf2d
 8002b50:	0800cf3b 	.word	0x0800cf3b
 8002b54:	0800cf48 	.word	0x0800cf48
 8002b58:	0800cf57 	.word	0x0800cf57
 8002b5c:	0800cf5c 	.word	0x0800cf5c
 8002b60:	0800cf61 	.word	0x0800cf61
 8002b64:	0800cf6e 	.word	0x0800cf6e
 8002b68:	0800cf7d 	.word	0x0800cf7d
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	0800cf8c 	.word	0x0800cf8c
 8002b74:	0800cfa1 	.word	0x0800cfa1
 8002b78:	0800cfb1 	.word	0x0800cfb1
 8002b7c:	0800cfc9 	.word	0x0800cfc9
 8002b80:	0800cfd6 	.word	0x0800cfd6
 8002b84:	0800cfed 	.word	0x0800cfed
 8002b88:	0800cffb 	.word	0x0800cffb
 8002b8c:	0800d010 	.word	0x0800d010
 8002b90:	200003b6 	.word	0x200003b6
 8002b94:	0800d014 	.word	0x0800d014
 8002b98:	0800d02e 	.word	0x0800d02e
 8002b9c:	20002374 	.word	0x20002374
 8002ba0:	429e0000 	.word	0x429e0000
 8002ba4:	20002370 	.word	0x20002370
 8002ba8:	2000236c 	.word	0x2000236c
 8002bac:	4575a000 	.word	0x4575a000
 8002bb0:	42c80000 	.word	0x42c80000
 8002bb4:	0800d033 	.word	0x0800d033
 8002bb8:	20002378 	.word	0x20002378
 8002bbc:	0800c0d0 	.word	0x0800c0d0
 8002bc0:	0800d018 	.word	0x0800d018
 8002bc4:	0800d053 	.word	0x0800d053

08002bc8 <processPlannerBuffer>:

/**
  * @brief  Procesa el buffer del planner en el loop principal
  * @retval None
  */
void processPlannerBuffer(void) {
 8002bc8:	b508      	push	{r3, lr}
    // Procesar hasta 2 bloques por ciclo para mantener fluidez
    for (int i = 0; i < 2; i++) {
        if (!planner_process_next_block()) {
 8002bca:	f000 fe09 	bl	80037e0 <planner_process_next_block>
 8002bce:	b118      	cbz	r0, 8002bd8 <processPlannerBuffer+0x10>
            break; // No hay más bloques para procesar
        }
    }
}
 8002bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        if (!planner_process_next_block()) {
 8002bd4:	f000 be04 	b.w	80037e0 <planner_process_next_block>
}
 8002bd8:	bd08      	pop	{r3, pc}
	...

08002bdc <processProgram>:

/**
  * @brief  Procesa la ejecución del programa de manera no bloqueante
  * @retval None
  */
void processProgram(void) {
 8002bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be0:	b094      	sub	sp, #80	@ 0x50
    static uint32_t lastProgramTime = 0;
    uint32_t currentTime = HAL_GetTick();
 8002be2:	f001 fb9f 	bl	8004324 <HAL_GetTick>
    
    // Verificar si hay líneas pendientes y si el buffer tiene espacio
    if (currentExecutingLine >= programLineCount) {
 8002be6:	4c32      	ldr	r4, [pc, #200]	@ (8002cb0 <processProgram+0xd4>)
 8002be8:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <processProgram+0xd8>)
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
    uint32_t currentTime = HAL_GetTick();
 8002bee:	4605      	mov	r5, r0
    if (currentExecutingLine >= programLineCount) {
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	db17      	blt.n	8002c24 <processProgram+0x48>
        // Programa completado
        if (plannerEnabled) {
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <processProgram+0xdc>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b113      	cbz	r3, 8002c00 <processProgram+0x24>
            // Esperar que el planner termine todos los bloques
            if (planner_get_buffer_count() == 0) {
 8002bfa:	f001 f9f1 	bl	8003fe0 <planner_get_buffer_count>
 8002bfe:	b970      	cbnz	r0, 8002c1e <processProgram+0x42>
                sprintf(outputBuffer, "Programa completado exitosamente\r\n");
 8002c00:	492e      	ldr	r1, [pc, #184]	@ (8002cbc <processProgram+0xe0>)
 8002c02:	482f      	ldr	r0, [pc, #188]	@ (8002cc0 <processProgram+0xe4>)
 8002c04:	f005 fbe5 	bl	80083d2 <strcpy>
                sendUSBText(outputBuffer);
 8002c08:	482d      	ldr	r0, [pc, #180]	@ (8002cc0 <processProgram+0xe4>)
 8002c0a:	f7fe fe39 	bl	8001880 <sendUSBText>
                memset(outputBuffer, 0, sizeof(outputBuffer));
 8002c0e:	22c8      	movs	r2, #200	@ 0xc8
 8002c10:	2100      	movs	r1, #0
 8002c12:	482b      	ldr	r0, [pc, #172]	@ (8002cc0 <processProgram+0xe4>)
 8002c14:	f005 fb3d 	bl	8008292 <memset>
                isProgramRunning = false;
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <processProgram+0xe8>)
 8002c1c:	701a      	strb	r2, [r3, #0]
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
        sendUSBText(outputBuffer);
        memset(outputBuffer, 0, sizeof(outputBuffer));
        isProgramRunning = false;
    }
}
 8002c1e:	b014      	add	sp, #80	@ 0x50
 8002c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (currentTime - lastProgramTime < 50) {  // Mínimo 50ms entre comandos
 8002c24:	4f28      	ldr	r7, [pc, #160]	@ (8002cc8 <processProgram+0xec>)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1ac3      	subs	r3, r0, r3
 8002c2a:	2b31      	cmp	r3, #49	@ 0x31
 8002c2c:	d9f7      	bls.n	8002c1e <processProgram+0x42>
    if (plannerEnabled && planner_get_buffer_count() >= (PLANNER_BUFFER_SIZE - 2)) {
 8002c2e:	4b22      	ldr	r3, [pc, #136]	@ (8002cb8 <processProgram+0xdc>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	bb93      	cbnz	r3, 8002c9a <processProgram+0xbe>
    sprintf(outputBuffer, "Ejecutando linea %d: %s\r\n", currentExecutingLine + 1, gcodeProgram[currentExecutingLine]);
 8002c34:	f04f 0850 	mov.w	r8, #80	@ 0x50
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	4e24      	ldr	r6, [pc, #144]	@ (8002ccc <processProgram+0xf0>)
 8002c3c:	4924      	ldr	r1, [pc, #144]	@ (8002cd0 <processProgram+0xf4>)
 8002c3e:	fb08 6302 	mla	r3, r8, r2, r6
 8002c42:	481f      	ldr	r0, [pc, #124]	@ (8002cc0 <processProgram+0xe4>)
 8002c44:	3201      	adds	r2, #1
 8002c46:	f005 fabf 	bl	80081c8 <siprintf>
    sendUSBText(outputBuffer);
 8002c4a:	481d      	ldr	r0, [pc, #116]	@ (8002cc0 <processProgram+0xe4>)
 8002c4c:	f7fe fe18 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, sizeof(outputBuffer));
 8002c50:	22c8      	movs	r2, #200	@ 0xc8
 8002c52:	2100      	movs	r1, #0
 8002c54:	481a      	ldr	r0, [pc, #104]	@ (8002cc0 <processProgram+0xe4>)
 8002c56:	f005 fb1c 	bl	8008292 <memset>
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002c5a:	6821      	ldr	r1, [r4, #0]
 8002c5c:	224f      	movs	r2, #79	@ 0x4f
 8002c5e:	fb08 6101 	mla	r1, r8, r1, r6
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002c62:	2600      	movs	r6, #0
    strncpy(temp_command, gcodeProgram[currentExecutingLine], MAX_LINE_LENGTH - 1);
 8002c64:	4668      	mov	r0, sp
 8002c66:	f005 fb2e 	bl	80082c6 <strncpy>
    uint8_t status = gc_execute_line(temp_command);
 8002c6a:	4668      	mov	r0, sp
    temp_command[MAX_LINE_LENGTH - 1] = '\0';
 8002c6c:	f88d 604f 	strb.w	r6, [sp, #79]	@ 0x4f
    uint8_t status = gc_execute_line(temp_command);
 8002c70:	f7fe fd76 	bl	8001760 <gc_execute_line>
    if (status == STATUS_OK) {
 8002c74:	4602      	mov	r2, r0
 8002c76:	b1a8      	cbz	r0, 8002ca4 <processProgram+0xc8>
        sprintf(outputBuffer, "error: codigo %d en linea %d\r\n", status, currentExecutingLine + 1);
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	4916      	ldr	r1, [pc, #88]	@ (8002cd4 <processProgram+0xf8>)
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4810      	ldr	r0, [pc, #64]	@ (8002cc0 <processProgram+0xe4>)
 8002c80:	f005 faa2 	bl	80081c8 <siprintf>
        sendUSBText(outputBuffer);
 8002c84:	480e      	ldr	r0, [pc, #56]	@ (8002cc0 <processProgram+0xe4>)
 8002c86:	f7fe fdfb 	bl	8001880 <sendUSBText>
        memset(outputBuffer, 0, sizeof(outputBuffer));
 8002c8a:	22c8      	movs	r2, #200	@ 0xc8
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <processProgram+0xe4>)
 8002c90:	f005 faff 	bl	8008292 <memset>
        isProgramRunning = false;
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <processProgram+0xe8>)
 8002c96:	701e      	strb	r6, [r3, #0]
 8002c98:	e7c1      	b.n	8002c1e <processProgram+0x42>
    if (plannerEnabled && planner_get_buffer_count() >= (PLANNER_BUFFER_SIZE - 2)) {
 8002c9a:	f001 f9a1 	bl	8003fe0 <planner_get_buffer_count>
 8002c9e:	2805      	cmp	r0, #5
 8002ca0:	d9c8      	bls.n	8002c34 <processProgram+0x58>
 8002ca2:	e7bc      	b.n	8002c1e <processProgram+0x42>
        currentExecutingLine++;
 8002ca4:	6823      	ldr	r3, [r4, #0]
        lastProgramTime = currentTime;
 8002ca6:	603d      	str	r5, [r7, #0]
        currentExecutingLine++;
 8002ca8:	3301      	adds	r3, #1
 8002caa:	6023      	str	r3, [r4, #0]
        lastProgramTime = currentTime;
 8002cac:	e7b7      	b.n	8002c1e <processProgram+0x42>
 8002cae:	bf00      	nop
 8002cb0:	200003b8 	.word	0x200003b8
 8002cb4:	200003bc 	.word	0x200003bc
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	0800d058 	.word	0x0800d058
 8002cc0:	20002378 	.word	0x20002378
 8002cc4:	200003b4 	.word	0x200003b4
 8002cc8:	200003b0 	.word	0x200003b0
 8002ccc:	200003c0 	.word	0x200003c0
 8002cd0:	0800c715 	.word	0x0800c715
 8002cd4:	0800c72f 	.word	0x0800c72f

08002cd8 <loop>:
    if (plannerEnabled) {
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <loop+0x5c>)
void loop(void) {
 8002cda:	b570      	push	{r4, r5, r6, lr}
    if (plannerEnabled) {
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b10b      	cbz	r3, 8002ce4 <loop+0xc>
        processPlannerBuffer();
 8002ce0:	f7ff ff72 	bl	8002bc8 <processPlannerBuffer>
    if (isProgramRunning) {
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <loop+0x60>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b10b      	cbz	r3, 8002cee <loop+0x16>
        processProgram();
 8002cea:	f7ff ff77 	bl	8002bdc <processProgram>
    if (usbCommandComplete) {
 8002cee:	4d13      	ldr	r5, [pc, #76]	@ (8002d3c <loop+0x64>)
 8002cf0:	782b      	ldrb	r3, [r5, #0]
 8002cf2:	b173      	cbz	r3, 8002d12 <loop+0x3a>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4e12      	ldr	r6, [pc, #72]	@ (8002d40 <loop+0x68>)
 8002cf8:	4912      	ldr	r1, [pc, #72]	@ (8002d44 <loop+0x6c>)
 8002cfa:	6830      	ldr	r0, [r6, #0]
 8002cfc:	4c12      	ldr	r4, [pc, #72]	@ (8002d48 <loop+0x70>)
 8002cfe:	4282      	cmp	r2, r0
 8002d00:	db08      	blt.n	8002d14 <loop+0x3c>
        usbBufferIndex = 0;
 8002d02:	2400      	movs	r4, #0
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002d04:	2264      	movs	r2, #100	@ 0x64
 8002d06:	4621      	mov	r1, r4
 8002d08:	480e      	ldr	r0, [pc, #56]	@ (8002d44 <loop+0x6c>)
        usbBufferIndex = 0;
 8002d0a:	6034      	str	r4, [r6, #0]
        memset(usbBuffer, 0, sizeof(usbBuffer));
 8002d0c:	f005 fac1 	bl	8008292 <memset>
        usbCommandComplete = false;  // Asegurar que se resetee correctamente
 8002d10:	702c      	strb	r4, [r5, #0]
}
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
            if (usbBuffer[i] != ' ' && usbBuffer[i] != '\t' && usbBuffer[i] != '\r' && usbBuffer[i] != '\n') {
 8002d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d18:	3b09      	subs	r3, #9
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b17      	cmp	r3, #23
 8002d1e:	d805      	bhi.n	8002d2c <loop+0x54>
 8002d20:	fa24 f303 	lsr.w	r3, r4, r3
 8002d24:	07db      	lsls	r3, r3, #31
 8002d26:	d501      	bpl.n	8002d2c <loop+0x54>
        for (int i = 0; i < usbBufferIndex; i++) {
 8002d28:	3201      	adds	r2, #1
 8002d2a:	e7e8      	b.n	8002cfe <loop+0x26>
            processGcode(usbBuffer);
 8002d2c:	4805      	ldr	r0, [pc, #20]	@ (8002d44 <loop+0x6c>)
 8002d2e:	f7ff fdbf 	bl	80028b0 <processGcode>
 8002d32:	e7e6      	b.n	8002d02 <loop+0x2a>
 8002d34:	20000000 	.word	0x20000000
 8002d38:	200003b4 	.word	0x200003b4
 8002d3c:	20002300 	.word	0x20002300
 8002d40:	20002304 	.word	0x20002304
 8002d44:	20002308 	.word	0x20002308
 8002d48:	00800013 	.word	0x00800013

08002d4c <HAL_GPIO_EXTI_Callback>:
    //         break;
    //     case GPIO_PIN_14: // Z_MIN_PIN
    //         if (currentZ != 0) endstop_error_handler('Z');
    //         break;
    // }
}
 8002d4c:	4770      	bx	lr
	...

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d52:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
    // Detener todos los motores de forma segura
  disableSteppers();
 8002d54:	f000 f98a 	bl	800306c <disableSteppers>
  
  // Enviar mensaje de error por USB CDC
  CDC_Transmit_Queued((uint8_t*)"ERROR CRITICO DEL SISTEMA\r\n", 27);
 8002d58:	211b      	movs	r1, #27
 8002d5a:	4809      	ldr	r0, [pc, #36]	@ (8002d80 <Error_Handler+0x30>)
 8002d5c:	f004 f99c 	bl	8007098 <CDC_Transmit_Queued>
  
  // LED de error
  HAL_GPIO_WritePin(GPIOB, LED_ERROR, GPIO_PIN_SET);
 8002d60:	2201      	movs	r2, #1
 8002d62:	4808      	ldr	r0, [pc, #32]	@ (8002d84 <Error_Handler+0x34>)
 8002d64:	4611      	mov	r1, r2
 8002d66:	f001 fc33 	bl	80045d0 <HAL_GPIO_WritePin>
  while (1)
  {
        // Parpadear LED de error
    HAL_GPIO_TogglePin(GPIOB, LED_ERROR);
 8002d6a:	4c06      	ldr	r4, [pc, #24]	@ (8002d84 <Error_Handler+0x34>)
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	f001 fc33 	bl	80045da <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8002d74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d78:	f001 fada 	bl	8004330 <HAL_Delay>
  while (1)
 8002d7c:	e7f6      	b.n	8002d6c <Error_Handler+0x1c>
 8002d7e:	bf00      	nop
 8002d80:	0800d07b 	.word	0x0800d07b
 8002d84:	40010c00 	.word	0x40010c00

08002d88 <SystemClock_Config>:
{
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d8c:	2214      	movs	r2, #20
 8002d8e:	2100      	movs	r1, #0
 8002d90:	a80c      	add	r0, sp, #48	@ 0x30
 8002d92:	f005 fa7e 	bl	8008292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d96:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d98:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	eb0d 0002 	add.w	r0, sp, r2
 8002da0:	f005 fa77 	bl	8008292 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da4:	462a      	mov	r2, r5
 8002da6:	2100      	movs	r1, #0
 8002da8:	a801      	add	r0, sp, #4
 8002daa:	f005 fa72 	bl	8008292 <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dae:	2401      	movs	r4, #1
 8002db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db4:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002db6:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dba:	e9cd 6311 	strd	r6, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002dbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dc4:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002dc6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc8:	f002 fac0 	bl	800534c <HAL_RCC_OscConfig>
 8002dcc:	b108      	cbz	r0, 8002dd2 <SystemClock_Config+0x4a>
    Error_Handler();
 8002dce:	f7ff ffbf 	bl	8002d50 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd4:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ddc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dde:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002de2:	4621      	mov	r1, r4
 8002de4:	a805      	add	r0, sp, #20
 8002de6:	f002 fc73 	bl	80056d0 <HAL_RCC_ClockConfig>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d1ef      	bne.n	8002dce <SystemClock_Config+0x46>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002dee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002df4:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002df6:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df8:	f002 fd26 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d1e6      	bne.n	8002dce <SystemClock_Config+0x46>
}
 8002e00:	b014      	add	sp, #80	@ 0x50
 8002e02:	bd70      	pop	{r4, r5, r6, pc}

08002e04 <main>:
{
 8002e04:	b500      	push	{lr}
 8002e06:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 8002e08:	f001 fa6e 	bl	80042e8 <HAL_Init>
  SystemClock_Config();
 8002e0c:	f7ff ffbc 	bl	8002d88 <SystemClock_Config>
    CDC_TxQueue_Init();
 8002e10:	f004 f8cc 	bl	8006fac <CDC_TxQueue_Init>
    setup();
 8002e14:	f7fe fd3e 	bl	8001894 <setup>
    HAL_GPIO_WritePin(GPIOB, LED_CHECK, GPIO_PIN_SET);  // Encender
 8002e18:	2201      	movs	r2, #1
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	483c      	ldr	r0, [pc, #240]	@ (8002f10 <main+0x10c>)
 8002e1e:	f001 fbd7 	bl	80045d0 <HAL_GPIO_WritePin>
    CDC_Transmit_Queued((uint8_t*)"G-code listo\r\n", 14); 
 8002e22:	210e      	movs	r1, #14
 8002e24:	483b      	ldr	r0, [pc, #236]	@ (8002f14 <main+0x110>)
 8002e26:	f004 f937 	bl	8007098 <CDC_Transmit_Queued>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	eb0d 0002 	add.w	r0, sp, r2
 8002e32:	f005 fa2e 	bl	8008292 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e36:	4b38      	ldr	r3, [pc, #224]	@ (8002f18 <main+0x114>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e38:	f240 31db 	movw	r1, #987	@ 0x3db
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e3e:	4834      	ldr	r0, [pc, #208]	@ (8002f10 <main+0x10c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e40:	f042 0220 	orr.w	r2, r2, #32
 8002e44:	619a      	str	r2, [r3, #24]
 8002e46:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4a:	f002 0220 	and.w	r2, r2, #32
 8002e4e:	9201      	str	r2, [sp, #4]
 8002e50:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e52:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e54:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	f042 0204 	orr.w	r2, r2, #4
 8002e5a:	619a      	str	r2, [r3, #24]
 8002e5c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	f002 0204 	and.w	r2, r2, #4
 8002e64:	9202      	str	r2, [sp, #8]
 8002e66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]
 8002e70:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e72:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	9303      	str	r3, [sp, #12]
 8002e7a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002e7c:	f001 fba8 	bl	80045d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002e86:	4825      	ldr	r0, [pc, #148]	@ (8002f1c <main+0x118>)
 8002e88:	f001 fba2 	bl	80045d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	f240 33db 	movw	r3, #987	@ 0x3db
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e90:	481f      	ldr	r0, [pc, #124]	@ (8002f10 <main+0x10c>)
 8002e92:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e94:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f001 fabe 	bl	800441c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ea0:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <main+0x11c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	481a      	ldr	r0, [pc, #104]	@ (8002f10 <main+0x10c>)
 8002ea8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eae:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	f001 fab4 	bl	800441c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002eb4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb8:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <main+0x118>)
 8002eba:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebc:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec0:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f001 faaa 	bl	800441c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ec8:	4621      	mov	r1, r4
 8002eca:	4622      	mov	r2, r4
 8002ecc:	2028      	movs	r0, #40	@ 0x28
 8002ece:	f001 fa53 	bl	8004378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ed2:	2028      	movs	r0, #40	@ 0x28
 8002ed4:	f001 fa80 	bl	80043d8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 9600;
 8002ed8:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart2.Instance = USART2;
 8002edc:	4811      	ldr	r0, [pc, #68]	@ (8002f24 <main+0x120>)
  huart2.Init.BaudRate = 9600;
 8002ede:	4912      	ldr	r1, [pc, #72]	@ (8002f28 <main+0x124>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 8002ee4:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eea:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eec:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ef2:	f002 fd5d 	bl	80059b0 <HAL_UART_Init>
 8002ef6:	b108      	cbz	r0, 8002efc <main+0xf8>
    Error_Handler();
 8002ef8:	f7ff ff2a 	bl	8002d50 <Error_Handler>
  MX_USB_DEVICE_Init();
 8002efc:	f003 ffd2 	bl	8006ea4 <MX_USB_DEVICE_Init>
    CDC_TxQueue_Process();
 8002f00:	f004 f894 	bl	800702c <CDC_TxQueue_Process>
    loop();
 8002f04:	f7ff fee8 	bl	8002cd8 <loop>
    HAL_Delay(50);  // 50ms = 20Hz, reduce carga significativamente
 8002f08:	2032      	movs	r0, #50	@ 0x32
 8002f0a:	f001 fa11 	bl	8004330 <HAL_Delay>
  while (1)
 8002f0e:	e7f7      	b.n	8002f00 <main+0xfc>
 8002f10:	40010c00 	.word	0x40010c00
 8002f14:	0800d097 	.word	0x0800d097
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010800 	.word	0x40010800
 8002f20:	10110000 	.word	0x10110000
 8002f24:	20002440 	.word	0x20002440
 8002f28:	40004400 	.word	0x40004400

08002f2c <delay_us>:
  * @brief  Función de delay de microsegundos usando DWT
  * @param  us: Cantidad de microsegundos a esperar
  * @retval None
  */
void delay_us(uint32_t us) {
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <delay_us+0x1c>)
 8002f2e:	4a07      	ldr	r2, [pc, #28]	@ (8002f4c <delay_us+0x20>)
 8002f30:	681b      	ldr	r3, [r3, #0]
    uint32_t start = DWT->CYCCNT;
 8002f32:	4907      	ldr	r1, [pc, #28]	@ (8002f50 <delay_us+0x24>)
    uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8002f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f38:	4343      	muls	r3, r0
    uint32_t start = DWT->CYCCNT;
 8002f3a:	6848      	ldr	r0, [r1, #4]
    while ((DWT->CYCCNT - start) < cycles);
 8002f3c:	684a      	ldr	r2, [r1, #4]
 8002f3e:	1a12      	subs	r2, r2, r0
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3fb      	bcc.n	8002f3c <delay_us+0x10>
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	000f4240 	.word	0x000f4240
 8002f50:	e0001000 	.word	0xe0001000
 8002f54:	00000000 	.word	0x00000000

08002f58 <calculateStepDelay>:
  * @brief  Calcula el delay entre pasos basado en el feed rate
  * @param  feedRate: Velocidad en mm/min
  * @param  distance_mm: Distancia total del movimiento en mm
  * @retval Delay en microsegundos entre pasos
  */
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002f58:	b510      	push	{r4, lr}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002f5a:	2100      	movs	r1, #0
uint32_t calculateStepDelay(float feedRate, float distance_mm) {
 8002f5c:	4604      	mov	r4, r0
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002f5e:	f7fe f8b9 	bl	80010d4 <__aeabi_fcmple>
 8002f62:	b9d8      	cbnz	r0, 8002f9c <calculateStepDelay+0x44>
    
    // Calcular pasos por segundo para el eje dominante
    // feedRate está en mm/min, convertir a mm/s
    float feedRate_mm_per_sec = feedRate / 60.0;
 8002f64:	4620      	mov	r0, r4
 8002f66:	4912      	ldr	r1, [pc, #72]	@ (8002fb0 <calculateStepDelay+0x58>)
 8002f68:	f7fd ffc0 	bl	8000eec <__aeabi_fdiv>
    
    // Usar el eje con mayor resolución (Z) para el cálculo más conservador
    float steps_per_mm = STEPS_PER_MM_Z; // El más alto: 3930 steps/mm
    
    // Calcular pasos por segundo
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002f6c:	4911      	ldr	r1, [pc, #68]	@ (8002fb4 <calculateStepDelay+0x5c>)
 8002f6e:	f7fd ff09 	bl	8000d84 <__aeabi_fmul>
    
    // Calcular delay en microsegundos entre pasos
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 8002f72:	2100      	movs	r1, #0
    float steps_per_sec = feedRate_mm_per_sec * steps_per_mm;
 8002f74:	4604      	mov	r4, r0
    if (steps_per_sec <= 0) return STEP_DELAY_US;
 8002f76:	f7fe f8ad 	bl	80010d4 <__aeabi_fcmple>
 8002f7a:	b978      	cbnz	r0, 8002f9c <calculateStepDelay+0x44>
    
    uint32_t delay_us = (uint32_t)(1000000.0 / steps_per_sec);
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fd fa53 	bl	8000428 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	a108      	add	r1, pc, #32	@ (adr r1, 8002fa8 <calculateStepDelay+0x50>)
 8002f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f8c:	f7fd fbce 	bl	800072c <__aeabi_ddiv>
 8002f90:	f7fd fd7a 	bl	8000a88 <__aeabi_d2uiz>
    
    // Limitar delay mínimo para evitar problemas de timing
    if (delay_us < 200) delay_us = 200; // Mínimo 200us = 5000 pasos/segundo máximo
 8002f94:	28c8      	cmp	r0, #200	@ 0xc8
 8002f96:	bf38      	it	cc
 8002f98:	20c8      	movcc	r0, #200	@ 0xc8
    
    return delay_us;
}
 8002f9a:	bd10      	pop	{r4, pc}
    if (feedRate <= 0) return STEP_DELAY_US; // Usar delay por defecto si es inválido
 8002f9c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002fa0:	e7fb      	b.n	8002f9a <calculateStepDelay+0x42>
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	412e8480 	.word	0x412e8480
 8002fb0:	42700000 	.word	0x42700000
 8002fb4:	4575a000 	.word	0x4575a000

08002fb8 <X_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje X
  * @retval None
  */
void X_stepOnce(void) {
 8002fb8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_SET);
 8002fba:	4c08      	ldr	r4, [pc, #32]	@ (8002fdc <X_stepOnce+0x24>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2140      	movs	r1, #64	@ 0x40
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f001 fb05 	bl	80045d0 <HAL_GPIO_WritePin>
    delay_us(2);
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff ffb0 	bl	8002f2c <delay_us>
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002fcc:	4620      	mov	r0, r4
}
 8002fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, X_STEP_PIN, GPIO_PIN_RESET);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2140      	movs	r1, #64	@ 0x40
 8002fd6:	f001 bafb 	b.w	80045d0 <HAL_GPIO_WritePin>
 8002fda:	bf00      	nop
 8002fdc:	40010c00 	.word	0x40010c00

08002fe0 <Y_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Y
  * @retval None
  */
void Y_stepOnce(void) {
 8002fe0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_SET);
 8002fe2:	4c09      	ldr	r4, [pc, #36]	@ (8003008 <Y_stepOnce+0x28>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fea:	4620      	mov	r0, r4
 8002fec:	f001 faf0 	bl	80045d0 <HAL_GPIO_WritePin>
    delay_us(2);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7ff ff9b 	bl	8002f2c <delay_us>
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002ff6:	4620      	mov	r0, r4
}
 8002ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOB, Y_STEP_PIN, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003002:	f001 bae5 	b.w	80045d0 <HAL_GPIO_WritePin>
 8003006:	bf00      	nop
 8003008:	40010c00 	.word	0x40010c00

0800300c <Z_stepOnce>:

/**
  * @brief  Ejecuta un solo paso en el eje Z
  * @retval None
  */
void Z_stepOnce(void) {
 800300c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_SET);
 800300e:	4c09      	ldr	r4, [pc, #36]	@ (8003034 <Z_stepOnce+0x28>)
 8003010:	2201      	movs	r2, #1
 8003012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003016:	4620      	mov	r0, r4
 8003018:	f001 fada 	bl	80045d0 <HAL_GPIO_WritePin>
    delay_us(2);
 800301c:	2002      	movs	r0, #2
 800301e:	f7ff ff85 	bl	8002f2c <delay_us>
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8003022:	4620      	mov	r0, r4
}
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_STEP_PIN, GPIO_PIN_RESET);
 8003028:	2200      	movs	r2, #0
 800302a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800302e:	f001 bacf 	b.w	80045d0 <HAL_GPIO_WritePin>
 8003032:	bf00      	nop
 8003034:	40010800 	.word	0x40010800

08003038 <enableSteppers>:

/**
  * @brief  Habilita todos los motores paso a paso
  * @retval None
  */
void enableSteppers(void) {
 8003038:	b510      	push	{r4, lr}
    // Habilitar drivers (EN LOW = habilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_RESET);  // Enable motor X
 800303a:	4c0a      	ldr	r4, [pc, #40]	@ (8003064 <enableSteppers+0x2c>)
 800303c:	2200      	movs	r2, #0
 800303e:	4620      	mov	r0, r4
 8003040:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003044:	f001 fac4 	bl	80045d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_RESET);  // Enable motor Y
 8003048:	4620      	mov	r0, r4
 800304a:	2200      	movs	r2, #0
 800304c:	2110      	movs	r1, #16
 800304e:	f001 fabf 	bl	80045d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
}
 8003052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_RESET);  // Enable motor Z
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800305c:	4802      	ldr	r0, [pc, #8]	@ (8003068 <enableSteppers+0x30>)
 800305e:	f001 bab7 	b.w	80045d0 <HAL_GPIO_WritePin>
 8003062:	bf00      	nop
 8003064:	40010c00 	.word	0x40010c00
 8003068:	40010800 	.word	0x40010800

0800306c <disableSteppers>:

/**
  * @brief  Deshabilita todos los motores paso a paso
  * @retval None
  */
void disableSteppers(void) {
 800306c:	b510      	push	{r4, lr}
    // Deshabilitar drivers (EN HIGH = deshabilitado para la mayoría de drivers A4988/DRV8825)
    HAL_GPIO_WritePin(GPIOB, X_EN_PIN, GPIO_PIN_SET);    // Disable motor X
 800306e:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <disableSteppers+0x2c>)
 8003070:	2201      	movs	r2, #1
 8003072:	4620      	mov	r0, r4
 8003074:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003078:	f001 faaa 	bl	80045d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, Y_EN_PIN, GPIO_PIN_SET);    // Disable motor Y
 800307c:	4620      	mov	r0, r4
 800307e:	2201      	movs	r2, #1
 8003080:	2110      	movs	r1, #16
 8003082:	f001 faa5 	bl	80045d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
}
 8003086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_WritePin(GPIOA, Z_EN_PIN, GPIO_PIN_SET);    // Disable motor Z
 800308a:	2201      	movs	r2, #1
 800308c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <disableSteppers+0x30>)
 8003092:	f001 ba9d 	b.w	80045d0 <HAL_GPIO_WritePin>
 8003096:	bf00      	nop
 8003098:	40010c00 	.word	0x40010c00
 800309c:	40010800 	.word	0x40010800

080030a0 <moveAxesWithFeedRate>:
  * @param  x, y, z: Coordenadas objetivo en mm
  * @param  feedRate: Velocidad en mm/min
  * @param  isRapid: true para G0 (rapid), false para G1 (linear)
  * @retval None
  */
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b097      	sub	sp, #92	@ 0x5c
 80030a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80030a8:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 80030ac:	460d      	mov	r5, r1
 80030ae:	9311      	str	r3, [sp, #68]	@ 0x44
    // Calcular posiciones objetivo en pasos
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 80030b0:	4baf      	ldr	r3, [pc, #700]	@ (8003370 <moveAxesWithFeedRate+0x2d0>)
 80030b2:	4601      	mov	r1, r0
void moveAxesWithFeedRate(float x, float y, float z, float feedRate, bool isRapid) {
 80030b4:	4606      	mov	r6, r0
 80030b6:	4614      	mov	r4, r2
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 80030b8:	f8d3 9000 	ldr.w	r9, [r3]
 80030bc:	f7fe f828 	bl	8001110 <__aeabi_fcmpun>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	f040 81c9 	bne.w	8003458 <moveAxesWithFeedRate+0x3b8>
 80030c6:	49ab      	ldr	r1, [pc, #684]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 80030c8:	4630      	mov	r0, r6
 80030ca:	f7fd fe5b 	bl	8000d84 <__aeabi_fmul>
 80030ce:	f7fe f835 	bl	800113c <__aeabi_f2iz>
 80030d2:	900c      	str	r0, [sp, #48]	@ 0x30
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 80030d4:	4ba8      	ldr	r3, [pc, #672]	@ (8003378 <moveAxesWithFeedRate+0x2d8>)
 80030d6:	4629      	mov	r1, r5
 80030d8:	4628      	mov	r0, r5
 80030da:	f8d3 8000 	ldr.w	r8, [r3]
 80030de:	f7fe f817 	bl	8001110 <__aeabi_fcmpun>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	f040 81bb 	bne.w	800345e <moveAxesWithFeedRate+0x3be>
 80030e8:	49a2      	ldr	r1, [pc, #648]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 80030ea:	4628      	mov	r0, r5
 80030ec:	f7fd fe4a 	bl	8000d84 <__aeabi_fmul>
 80030f0:	f7fe f824 	bl	800113c <__aeabi_f2iz>
 80030f4:	900d      	str	r0, [sp, #52]	@ 0x34
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 80030f6:	4ba1      	ldr	r3, [pc, #644]	@ (800337c <moveAxesWithFeedRate+0x2dc>)
 80030f8:	4621      	mov	r1, r4
 80030fa:	4620      	mov	r0, r4
 80030fc:	f8d3 b000 	ldr.w	fp, [r3]
 8003100:	f7fe f806 	bl	8001110 <__aeabi_fcmpun>
 8003104:	2800      	cmp	r0, #0
 8003106:	f040 81ad 	bne.w	8003464 <moveAxesWithFeedRate+0x3c4>
 800310a:	499d      	ldr	r1, [pc, #628]	@ (8003380 <moveAxesWithFeedRate+0x2e0>)
 800310c:	4620      	mov	r0, r4
 800310e:	f7fd fe39 	bl	8000d84 <__aeabi_fmul>
 8003112:	f7fe f813 	bl	800113c <__aeabi_f2iz>
 8003116:	900e      	str	r0, [sp, #56]	@ 0x38
    
    // Calcular diferencias (pasos relativos)
    int32_t deltaX = targetX - currentX;
 8003118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    int32_t deltaY = targetY - currentY;
    int32_t deltaZ = targetZ - currentZ;
    
    // Calcular distancia total en mm para determinar velocidad
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 800311a:	4631      	mov	r1, r6
    int32_t deltaX = targetX - currentX;
 800311c:	eba3 0a09 	sub.w	sl, r3, r9
    int32_t deltaY = targetY - currentY;
 8003120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003122:	4630      	mov	r0, r6
    int32_t deltaY = targetY - currentY;
 8003124:	eba3 0708 	sub.w	r7, r3, r8
    int32_t deltaZ = targetZ - currentZ;
 8003128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800312a:	eba3 030b 	sub.w	r3, r3, fp
 800312e:	930f      	str	r3, [sp, #60]	@ 0x3c
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 8003130:	f7fd ffee 	bl	8001110 <__aeabi_fcmpun>
 8003134:	2800      	cmp	r0, #0
 8003136:	f040 8198 	bne.w	800346a <moveAxesWithFeedRate+0x3ca>
 800313a:	4648      	mov	r0, r9
 800313c:	f7fd fdce 	bl	8000cdc <__aeabi_i2f>
 8003140:	498c      	ldr	r1, [pc, #560]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 8003142:	f7fd fed3 	bl	8000eec <__aeabi_fdiv>
 8003146:	4601      	mov	r1, r0
 8003148:	4630      	mov	r0, r6
 800314a:	f7fd fd11 	bl	8000b70 <__aeabi_fsub>
 800314e:	4681      	mov	r9, r0
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8003150:	4629      	mov	r1, r5
 8003152:	4628      	mov	r0, r5
 8003154:	f7fd ffdc 	bl	8001110 <__aeabi_fcmpun>
 8003158:	2800      	cmp	r0, #0
 800315a:	f040 8189 	bne.w	8003470 <moveAxesWithFeedRate+0x3d0>
 800315e:	4640      	mov	r0, r8
 8003160:	f7fd fdbc 	bl	8000cdc <__aeabi_i2f>
 8003164:	4983      	ldr	r1, [pc, #524]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 8003166:	f7fd fec1 	bl	8000eec <__aeabi_fdiv>
 800316a:	4601      	mov	r1, r0
 800316c:	4628      	mov	r0, r5
 800316e:	f7fd fcff 	bl	8000b70 <__aeabi_fsub>
 8003172:	4680      	mov	r8, r0
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 8003174:	4621      	mov	r1, r4
 8003176:	4620      	mov	r0, r4
 8003178:	f7fd ffca 	bl	8001110 <__aeabi_fcmpun>
 800317c:	2800      	cmp	r0, #0
 800317e:	f040 817a 	bne.w	8003476 <moveAxesWithFeedRate+0x3d6>
 8003182:	4658      	mov	r0, fp
 8003184:	f7fd fdaa 	bl	8000cdc <__aeabi_i2f>
 8003188:	497d      	ldr	r1, [pc, #500]	@ (8003380 <moveAxesWithFeedRate+0x2e0>)
 800318a:	f7fd feaf 	bl	8000eec <__aeabi_fdiv>
 800318e:	4601      	mov	r1, r0
 8003190:	4620      	mov	r0, r4
 8003192:	f7fd fced 	bl	8000b70 <__aeabi_fsub>
 8003196:	4683      	mov	fp, r0
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 8003198:	4649      	mov	r1, r9
 800319a:	4648      	mov	r0, r9
 800319c:	f7fd fdf2 	bl	8000d84 <__aeabi_fmul>
 80031a0:	4641      	mov	r1, r8
 80031a2:	4681      	mov	r9, r0
 80031a4:	4640      	mov	r0, r8
 80031a6:	f7fd fded 	bl	8000d84 <__aeabi_fmul>
 80031aa:	4601      	mov	r1, r0
 80031ac:	4648      	mov	r0, r9
 80031ae:	f7fd fce1 	bl	8000b74 <__addsf3>
 80031b2:	4659      	mov	r1, fp
 80031b4:	4680      	mov	r8, r0
 80031b6:	4658      	mov	r0, fp
 80031b8:	f7fd fde4 	bl	8000d84 <__aeabi_fmul>
 80031bc:	4601      	mov	r1, r0
 80031be:	4640      	mov	r0, r8
 80031c0:	f7fd fcd8 	bl	8000b74 <__addsf3>
 80031c4:	f7fd f930 	bl	8000428 <__aeabi_f2d>
 80031c8:	f007 f8fc 	bl	800a3c4 <sqrt>
 80031cc:	f7fd fc7c 	bl	8000ac8 <__aeabi_d2f>
    
    // Seleccionar velocidad según el tipo de movimiento
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 80031d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    float total_distance = sqrt(distance_X*distance_X + distance_Y*distance_Y + distance_Z*distance_Z);
 80031d2:	4681      	mov	r9, r0
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 80031d4:	b113      	cbz	r3, 80031dc <moveAxesWithFeedRate+0x13c>
 80031d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003384 <moveAxesWithFeedRate+0x2e4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	9310      	str	r3, [sp, #64]	@ 0x40
    
    // Limitar velocidad máxima
    if (effective_feedrate > maxFeedRate) {
 80031dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003388 <moveAxesWithFeedRate+0x2e8>)
 80031de:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80031e0:	f8d3 8000 	ldr.w	r8, [r3]
 80031e4:	4640      	mov	r0, r8
 80031e6:	f7fd ff6b 	bl	80010c0 <__aeabi_fcmplt>
 80031ea:	b908      	cbnz	r0, 80031f0 <moveAxesWithFeedRate+0x150>
    float effective_feedrate = isRapid ? rapidRate : feedRate;
 80031ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
    bool dirX = (deltaX >= 0);
    bool dirY = (deltaY >= 0);
    bool dirZ = (deltaZ >= 0);
    
    // Configurar direcciones de los motores
    if (deltaX != 0) HAL_GPIO_WritePin(GPIOB, X_DIR_PIN, dirX ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80031f0:	f1ba 0f00 	cmp.w	sl, #0
 80031f4:	d006      	beq.n	8003204 <moveAxesWithFeedRate+0x164>
 80031f6:	ea6f 020a 	mvn.w	r2, sl
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	4863      	ldr	r0, [pc, #396]	@ (800338c <moveAxesWithFeedRate+0x2ec>)
 80031fe:	0fd2      	lsrs	r2, r2, #31
 8003200:	f001 f9e6 	bl	80045d0 <HAL_GPIO_WritePin>
    if (deltaY != 0) HAL_GPIO_WritePin(GPIOB, Y_DIR_PIN, dirY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003204:	b12f      	cbz	r7, 8003212 <moveAxesWithFeedRate+0x172>
 8003206:	43fa      	mvns	r2, r7
 8003208:	2108      	movs	r1, #8
 800320a:	4860      	ldr	r0, [pc, #384]	@ (800338c <moveAxesWithFeedRate+0x2ec>)
 800320c:	0fd2      	lsrs	r2, r2, #31
 800320e:	f001 f9df 	bl	80045d0 <HAL_GPIO_WritePin>
    if (deltaZ != 0) HAL_GPIO_WritePin(GPIOA, Z_DIR_PIN, dirZ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003214:	b12b      	cbz	r3, 8003222 <moveAxesWithFeedRate+0x182>
 8003216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800321a:	485d      	ldr	r0, [pc, #372]	@ (8003390 <moveAxesWithFeedRate+0x2f0>)
 800321c:	0fda      	lsrs	r2, r3, #31
 800321e:	f001 f9d7 	bl	80045d0 <HAL_GPIO_WritePin>
    
    // Convertir a valores absolutos para el algoritmo
    deltaX = (deltaX < 0) ? -deltaX : deltaX;
    deltaY = (deltaY < 0) ? -deltaY : deltaY;
    deltaZ = (deltaZ < 0) ? -deltaZ : deltaZ;
 8003222:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    deltaX = (deltaX < 0) ? -deltaX : deltaX;
 8003224:	f1ba 0f00 	cmp.w	sl, #0
 8003228:	bfb8      	it	lt
 800322a:	f1ca 0a00 	rsblt	sl, sl, #0
    deltaY = (deltaY < 0) ? -deltaY : deltaY;
 800322e:	2f00      	cmp	r7, #0
 8003230:	bfb8      	it	lt
 8003232:	427f      	neglt	r7, r7
    deltaZ = (deltaZ < 0) ? -deltaZ : deltaZ;
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfb8      	it	lt
 8003238:	425b      	neglt	r3, r3
    
    // Calcular delay basado en feed rate
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 800323a:	4649      	mov	r1, r9
 800323c:	4640      	mov	r0, r8
    deltaZ = (deltaZ < 0) ? -deltaZ : deltaZ;
 800323e:	930f      	str	r3, [sp, #60]	@ 0x3c
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8003240:	f7ff fe8a 	bl	8002f58 <calculateStepDelay>
    
    // Mostrar información del movimiento con validación de valores
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 8003244:	4631      	mov	r1, r6
    uint32_t step_delay = calculateStepDelay(effective_feedrate, total_distance);
 8003246:	9010      	str	r0, [sp, #64]	@ 0x40
    float display_x = !isnan(x) ? x : (currentX / (float)STEPS_PER_MM_X);
 8003248:	4630      	mov	r0, r6
 800324a:	f7fd ff61 	bl	8001110 <__aeabi_fcmpun>
 800324e:	b138      	cbz	r0, 8003260 <moveAxesWithFeedRate+0x1c0>
 8003250:	4b47      	ldr	r3, [pc, #284]	@ (8003370 <moveAxesWithFeedRate+0x2d0>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f7fd fd42 	bl	8000cdc <__aeabi_i2f>
 8003258:	4946      	ldr	r1, [pc, #280]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 800325a:	f7fd fe47 	bl	8000eec <__aeabi_fdiv>
 800325e:	4606      	mov	r6, r0
    float display_y = !isnan(y) ? y : (currentY / (float)STEPS_PER_MM_Y);
 8003260:	4629      	mov	r1, r5
 8003262:	4628      	mov	r0, r5
 8003264:	f7fd ff54 	bl	8001110 <__aeabi_fcmpun>
 8003268:	b138      	cbz	r0, 800327a <moveAxesWithFeedRate+0x1da>
 800326a:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <moveAxesWithFeedRate+0x2d8>)
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	f7fd fd35 	bl	8000cdc <__aeabi_i2f>
 8003272:	4940      	ldr	r1, [pc, #256]	@ (8003374 <moveAxesWithFeedRate+0x2d4>)
 8003274:	f7fd fe3a 	bl	8000eec <__aeabi_fdiv>
 8003278:	4605      	mov	r5, r0
    float display_z = !isnan(z) ? z : (currentZ / (float)STEPS_PER_MM_Z);
 800327a:	4621      	mov	r1, r4
 800327c:	4620      	mov	r0, r4
 800327e:	f7fd ff47 	bl	8001110 <__aeabi_fcmpun>
 8003282:	b138      	cbz	r0, 8003294 <moveAxesWithFeedRate+0x1f4>
 8003284:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <moveAxesWithFeedRate+0x2dc>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	f7fd fd28 	bl	8000cdc <__aeabi_i2f>
 800328c:	493c      	ldr	r1, [pc, #240]	@ (8003380 <moveAxesWithFeedRate+0x2e0>)
 800328e:	f7fd fe2d 	bl	8000eec <__aeabi_fdiv>
 8003292:	4604      	mov	r4, r0
    
    // Convertir floats a enteros para evitar problemas de printf con floats
    int x_int = (int)display_x;
 8003294:	4630      	mov	r0, r6
 8003296:	f7fd ff51 	bl	800113c <__aeabi_f2iz>
 800329a:	9012      	str	r0, [sp, #72]	@ 0x48
    int x_dec = (int)((display_x - x_int) * 100);
 800329c:	f7fd fd1e 	bl	8000cdc <__aeabi_i2f>
 80032a0:	4601      	mov	r1, r0
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7fd fc64 	bl	8000b70 <__aeabi_fsub>
 80032a8:	493a      	ldr	r1, [pc, #232]	@ (8003394 <moveAxesWithFeedRate+0x2f4>)
 80032aa:	f7fd fd6b 	bl	8000d84 <__aeabi_fmul>
 80032ae:	f7fd ff45 	bl	800113c <__aeabi_f2iz>
 80032b2:	4683      	mov	fp, r0
    int y_int = (int)display_y;
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7fd ff41 	bl	800113c <__aeabi_f2iz>
 80032ba:	9013      	str	r0, [sp, #76]	@ 0x4c
    int y_dec = (int)((display_y - y_int) * 100);
 80032bc:	f7fd fd0e 	bl	8000cdc <__aeabi_i2f>
 80032c0:	4601      	mov	r1, r0
 80032c2:	4628      	mov	r0, r5
 80032c4:	f7fd fc54 	bl	8000b70 <__aeabi_fsub>
 80032c8:	4932      	ldr	r1, [pc, #200]	@ (8003394 <moveAxesWithFeedRate+0x2f4>)
 80032ca:	f7fd fd5b 	bl	8000d84 <__aeabi_fmul>
 80032ce:	f7fd ff35 	bl	800113c <__aeabi_f2iz>
 80032d2:	4605      	mov	r5, r0
    int z_int = (int)display_z;
 80032d4:	4620      	mov	r0, r4
 80032d6:	f7fd ff31 	bl	800113c <__aeabi_f2iz>
 80032da:	9015      	str	r0, [sp, #84]	@ 0x54
    int z_dec = (int)((display_z - z_int) * 100);
 80032dc:	f7fd fcfe 	bl	8000cdc <__aeabi_i2f>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7fd fc44 	bl	8000b70 <__aeabi_fsub>
 80032e8:	492a      	ldr	r1, [pc, #168]	@ (8003394 <moveAxesWithFeedRate+0x2f4>)
 80032ea:	f7fd fd4b 	bl	8000d84 <__aeabi_fmul>
 80032ee:	f7fd ff25 	bl	800113c <__aeabi_f2iz>
 80032f2:	4604      	mov	r4, r0
    int f_int = (int)effective_feedrate;
 80032f4:	4640      	mov	r0, r8
 80032f6:	f7fd ff21 	bl	800113c <__aeabi_f2iz>
 80032fa:	9014      	str	r0, [sp, #80]	@ 0x50
    int f_dec = (int)((effective_feedrate - f_int) * 10);
 80032fc:	f7fd fcee 	bl	8000cdc <__aeabi_i2f>
 8003300:	4601      	mov	r1, r0
 8003302:	4640      	mov	r0, r8
 8003304:	f7fd fc34 	bl	8000b70 <__aeabi_fsub>
 8003308:	4923      	ldr	r1, [pc, #140]	@ (8003398 <moveAxesWithFeedRate+0x2f8>)
 800330a:	f7fd fd3b 	bl	8000d84 <__aeabi_fmul>
 800330e:	f7fd ff15 	bl	800113c <__aeabi_f2iz>
 8003312:	4606      	mov	r6, r0
    int d_int = (int)total_distance;
 8003314:	4648      	mov	r0, r9
 8003316:	f7fd ff11 	bl	800113c <__aeabi_f2iz>
 800331a:	4680      	mov	r8, r0
    int d_dec = (int)((total_distance - d_int) * 100);
 800331c:	f7fd fcde 	bl	8000cdc <__aeabi_i2f>
 8003320:	4601      	mov	r1, r0
 8003322:	4648      	mov	r0, r9
 8003324:	f7fd fc24 	bl	8000b70 <__aeabi_fsub>
 8003328:	491a      	ldr	r1, [pc, #104]	@ (8003394 <moveAxesWithFeedRate+0x2f4>)
 800332a:	f7fd fd2b 	bl	8000d84 <__aeabi_fmul>
 800332e:	f7fd ff05 	bl	800113c <__aeabi_f2iz>

    snprintf(outputBuffer, OUTPUT_BUFFER_SIZE, "%s: X=%d.%02d Y=%d.%02d Z=%d.%02d F=%d.%d D=%d.%02dmm T=%lduS\r\n", 
 8003332:	2800      	cmp	r0, #0
 8003334:	bfb8      	it	lt
 8003336:	4240      	neglt	r0, r0
 8003338:	2e00      	cmp	r6, #0
 800333a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800333c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800333e:	bfb8      	it	lt
 8003340:	4276      	neglt	r6, r6
 8003342:	2c00      	cmp	r4, #0
 8003344:	bfb8      	it	lt
 8003346:	4264      	neglt	r4, r4
 8003348:	e9cd 8008 	strd	r8, r0, [sp, #32]
 800334c:	930a      	str	r3, [sp, #40]	@ 0x28
 800334e:	9206      	str	r2, [sp, #24]
 8003350:	9607      	str	r6, [sp, #28]
 8003352:	9405      	str	r4, [sp, #20]
 8003354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003356:	2d00      	cmp	r5, #0
 8003358:	9304      	str	r3, [sp, #16]
 800335a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800335c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	ea8b 73eb 	eor.w	r3, fp, fp, asr #31
 8003364:	eba3 73eb 	sub.w	r3, r3, fp, asr #31
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800336c:	e016      	b.n	800339c <moveAxesWithFeedRate+0x2fc>
 800336e:	bf00      	nop
 8003370:	20002374 	.word	0x20002374
 8003374:	429e0000 	.word	0x429e0000
 8003378:	20002370 	.word	0x20002370
 800337c:	2000236c 	.word	0x2000236c
 8003380:	4575a000 	.word	0x4575a000
 8003384:	20000008 	.word	0x20000008
 8003388:	20000004 	.word	0x20000004
 800338c:	40010c00 	.word	0x40010c00
 8003390:	40010800 	.word	0x40010800
 8003394:	42c80000 	.word	0x42c80000
 8003398:	41200000 	.word	0x41200000
 800339c:	4a37      	ldr	r2, [pc, #220]	@ (800347c <moveAxesWithFeedRate+0x3dc>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4b37      	ldr	r3, [pc, #220]	@ (8003480 <moveAxesWithFeedRate+0x3e0>)
 80033a2:	bfb8      	it	lt
 80033a4:	426d      	neglt	r5, r5
 80033a6:	4837      	ldr	r0, [pc, #220]	@ (8003484 <moveAxesWithFeedRate+0x3e4>)
 80033a8:	2900      	cmp	r1, #0
 80033aa:	bf08      	it	eq
 80033ac:	4613      	moveq	r3, r2
 80033ae:	9503      	str	r5, [sp, #12]
 80033b0:	21c8      	movs	r1, #200	@ 0xc8
 80033b2:	4a35      	ldr	r2, [pc, #212]	@ (8003488 <moveAxesWithFeedRate+0x3e8>)
 80033b4:	f004 fed2 	bl	800815c <sniprintf>
           y_int, abs(y_dec), 
           z_int, abs(z_dec),
           f_int, abs(f_dec), 
           d_int, abs(d_dec), 
           (unsigned long)step_delay);
    sendUSBText(outputBuffer);
 80033b8:	4832      	ldr	r0, [pc, #200]	@ (8003484 <moveAxesWithFeedRate+0x3e4>)
 80033ba:	f7fe fa61 	bl	8001880 <sendUSBText>
    memset(outputBuffer, 0, OUTPUT_BUFFER_SIZE);
 80033be:	22c8      	movs	r2, #200	@ 0xc8
 80033c0:	2100      	movs	r1, #0
 80033c2:	4830      	ldr	r0, [pc, #192]	@ (8003484 <moveAxesWithFeedRate+0x3e4>)
 80033c4:	f004 ff65 	bl	8008292 <memset>
    
    // Algoritmo de interpolación lineal 3D (Bresenham modificado)
    int32_t maxSteps = deltaX;
    if (deltaY > maxSteps) maxSteps = deltaY;
 80033c8:	45ba      	cmp	sl, r7
 80033ca:	46d1      	mov	r9, sl
 80033cc:	bfb8      	it	lt
 80033ce:	46b9      	movlt	r9, r7
    if (deltaZ > maxSteps) maxSteps = deltaZ;
 80033d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80033d2:	4599      	cmp	r9, r3
 80033d4:	bfb8      	it	lt
 80033d6:	4699      	movlt	r9, r3
    
    if (maxSteps == 0) return; // No hay movimiento
 80033d8:	f1b9 0f00 	cmp.w	r9, #0
 80033dc:	d039      	beq.n	8003452 <moveAxesWithFeedRate+0x3b2>
    
    // Variables para el algoritmo de Bresenham 3D
    int32_t errorX = maxSteps / 2;
 80033de:	ea4f 0b69 	mov.w	fp, r9, asr #1
    int32_t errorY = maxSteps / 2;
    int32_t errorZ = maxSteps / 2;
 80033e2:	465d      	mov	r5, fp
    int32_t errorY = maxSteps / 2;
 80033e4:	465c      	mov	r4, fp
    
    
    // Ejecutar pasos interpolados con feed rate controlado
    for (int32_t step = 0; step < maxSteps; step++) {
 80033e6:	2600      	movs	r6, #0
        bool stepX = false, stepY = false, stepZ = false;
        
        // Algoritmo de Bresenham para X
        errorX += deltaX;
 80033e8:	44d3      	add	fp, sl
        if (errorX >= maxSteps) {
 80033ea:	45d9      	cmp	r9, fp
            errorX -= maxSteps;
            stepX = true;
 80033ec:	bfd4      	ite	le
 80033ee:	2201      	movle	r2, #1
        bool stepX = false, stepY = false, stepZ = false;
 80033f0:	2200      	movgt	r2, #0
            errorY -= maxSteps;
            stepY = true;
        }
        
        // Algoritmo de Bresenham para Z
        errorZ += deltaZ;
 80033f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
        errorY += deltaY;
 80033f4:	443c      	add	r4, r7
        errorZ += deltaZ;
 80033f6:	440d      	add	r5, r1
            errorX -= maxSteps;
 80033f8:	bfd8      	it	le
 80033fa:	ebab 0b09 	suble.w	fp, fp, r9
        if (errorY >= maxSteps) {
 80033fe:	45a1      	cmp	r9, r4
            stepY = true;
 8003400:	bfd6      	itet	le
 8003402:	2301      	movle	r3, #1
        bool stepX = false, stepY = false, stepZ = false;
 8003404:	2300      	movgt	r3, #0
            errorY -= maxSteps;
 8003406:	eba4 0409 	suble.w	r4, r4, r9
        if (errorZ >= maxSteps) {
 800340a:	45a9      	cmp	r9, r5
            errorZ -= maxSteps;
            stepZ = true;
 800340c:	bfd6      	itet	le
 800340e:	f04f 0801 	movle.w	r8, #1
        bool stepX = false, stepY = false, stepZ = false;
 8003412:	f04f 0800 	movgt.w	r8, #0
            errorZ -= maxSteps;
 8003416:	eba5 0509 	suble.w	r5, r5, r9
        }
        
        // Ejecutar pasos simultáneamente
        if (stepX) X_stepOnce();
 800341a:	b11a      	cbz	r2, 8003424 <moveAxesWithFeedRate+0x384>
 800341c:	9311      	str	r3, [sp, #68]	@ 0x44
 800341e:	f7ff fdcb 	bl	8002fb8 <X_stepOnce>
 8003422:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        if (stepY) Y_stepOnce();
 8003424:	b10b      	cbz	r3, 800342a <moveAxesWithFeedRate+0x38a>
 8003426:	f7ff fddb 	bl	8002fe0 <Y_stepOnce>
        if (stepZ) Z_stepOnce();
 800342a:	f1b8 0f00 	cmp.w	r8, #0
 800342e:	d001      	beq.n	8003434 <moveAxesWithFeedRate+0x394>
 8003430:	f7ff fdec 	bl	800300c <Z_stepOnce>
        
        // Delay controlado por feed rate
        delay_us(step_delay);
 8003434:	9810      	ldr	r0, [sp, #64]	@ 0x40
    for (int32_t step = 0; step < maxSteps; step++) {
 8003436:	3601      	adds	r6, #1
        delay_us(step_delay);
 8003438:	f7ff fd78 	bl	8002f2c <delay_us>
    for (int32_t step = 0; step < maxSteps; step++) {
 800343c:	45b1      	cmp	r9, r6
 800343e:	d1d3      	bne.n	80033e8 <moveAxesWithFeedRate+0x348>
    }
    
    
    // Actualizar posiciones actuales
    currentX = targetX;
 8003440:	4b12      	ldr	r3, [pc, #72]	@ (800348c <moveAxesWithFeedRate+0x3ec>)
 8003442:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003444:	601a      	str	r2, [r3, #0]
    currentY = targetY;
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <moveAxesWithFeedRate+0x3f0>)
 8003448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800344a:	601a      	str	r2, [r3, #0]
    currentZ = targetZ;
 800344c:	4b11      	ldr	r3, [pc, #68]	@ (8003494 <moveAxesWithFeedRate+0x3f4>)
 800344e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	b017      	add	sp, #92	@ 0x5c
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t targetX = !isnan(x) ? (int32_t)(x * STEPS_PER_MM_X) : currentX;
 8003458:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800345c:	e63a      	b.n	80030d4 <moveAxesWithFeedRate+0x34>
    int32_t targetY = !isnan(y) ? (int32_t)(y * STEPS_PER_MM_Y) : currentY;
 800345e:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8003462:	e648      	b.n	80030f6 <moveAxesWithFeedRate+0x56>
    int32_t targetZ = !isnan(z) ? (int32_t)(z * STEPS_PER_MM_Z) : currentZ;
 8003464:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003468:	e656      	b.n	8003118 <moveAxesWithFeedRate+0x78>
    float distance_X = !isnan(x) ? fabs(x - (currentX / (float)STEPS_PER_MM_X)) : 0;
 800346a:	f04f 0900 	mov.w	r9, #0
 800346e:	e66f      	b.n	8003150 <moveAxesWithFeedRate+0xb0>
    float distance_Y = !isnan(y) ? fabs(y - (currentY / (float)STEPS_PER_MM_Y)) : 0;
 8003470:	f04f 0800 	mov.w	r8, #0
 8003474:	e67e      	b.n	8003174 <moveAxesWithFeedRate+0xd4>
    float distance_Z = !isnan(z) ? fabs(z - (currentZ / (float)STEPS_PER_MM_Z)) : 0;
 8003476:	f04f 0b00 	mov.w	fp, #0
 800347a:	e68d      	b.n	8003198 <moveAxesWithFeedRate+0xf8>
 800347c:	0800d0af 	.word	0x0800d0af
 8003480:	0800d0a6 	.word	0x0800d0a6
 8003484:	20002378 	.word	0x20002378
 8003488:	0800d0b9 	.word	0x0800d0b9
 800348c:	20002374 	.word	0x20002374
 8003490:	20002370 	.word	0x20002370
 8003494:	2000236c 	.word	0x2000236c

08003498 <arc_move_r>:
  * @param  x_end, y_end: Coordenadas finales del arco en mm
  * @param  r: Radio del arco en mm
  * @param  clockwise: Dirección del arco (1 = horario, 0 = antihorario)
  * @retval None
  */
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	b08b      	sub	sp, #44	@ 0x2c
 800349e:	9308      	str	r3, [sp, #32]
    float x0 = currentX;
 80034a0:	4bb3      	ldr	r3, [pc, #716]	@ (8003770 <arc_move_r+0x2d8>)
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 80034a2:	4680      	mov	r8, r0
    float x0 = currentX;
 80034a4:	6818      	ldr	r0, [r3, #0]
void arc_move_r(float x_end, float y_end, float r, bool clockwise) {
 80034a6:	4616      	mov	r6, r2
 80034a8:	460f      	mov	r7, r1
    float x0 = currentX;
 80034aa:	f7fd fc17 	bl	8000cdc <__aeabi_i2f>
    float y0 = currentY;
 80034ae:	4bb1      	ldr	r3, [pc, #708]	@ (8003774 <arc_move_r+0x2dc>)
    float x0 = currentX;
 80034b0:	4605      	mov	r5, r0
    float y0 = currentY;
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	f7fd fc12 	bl	8000cdc <__aeabi_i2f>
    float x1 = x_end * STEPS_PER_MM_X;
 80034b8:	49af      	ldr	r1, [pc, #700]	@ (8003778 <arc_move_r+0x2e0>)
    float y0 = currentY;
 80034ba:	4604      	mov	r4, r0
    float x1 = x_end * STEPS_PER_MM_X;
 80034bc:	4640      	mov	r0, r8
 80034be:	f7fd fc61 	bl	8000d84 <__aeabi_fmul>
    float y1 = y_end * STEPS_PER_MM_Y;
 80034c2:	49ad      	ldr	r1, [pc, #692]	@ (8003778 <arc_move_r+0x2e0>)
    float x1 = x_end * STEPS_PER_MM_X;
 80034c4:	9004      	str	r0, [sp, #16]
    float y1 = y_end * STEPS_PER_MM_Y;
 80034c6:	4638      	mov	r0, r7
 80034c8:	f7fd fc5c 	bl	8000d84 <__aeabi_fmul>
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 80034cc:	49aa      	ldr	r1, [pc, #680]	@ (8003778 <arc_move_r+0x2e0>)
    float y1 = y_end * STEPS_PER_MM_Y;
 80034ce:	9006      	str	r0, [sp, #24]
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 80034d0:	4630      	mov	r0, r6
 80034d2:	f7fd fc57 	bl	8000d84 <__aeabi_fmul>

    float dx = x1 - x0;
 80034d6:	4629      	mov	r1, r5
    r = r * STEPS_PER_MM_X; // Convertir radio a pasos
 80034d8:	9003      	str	r0, [sp, #12]
    float dx = x1 - x0;
 80034da:	9804      	ldr	r0, [sp, #16]
 80034dc:	f7fd fb48 	bl	8000b70 <__aeabi_fsub>
    float dy = y1 - y0;
 80034e0:	4621      	mov	r1, r4
    float dx = x1 - x0;
 80034e2:	4606      	mov	r6, r0
    float dy = y1 - y0;
 80034e4:	9806      	ldr	r0, [sp, #24]
 80034e6:	f7fd fb43 	bl	8000b70 <__aeabi_fsub>
    float d = sqrt(dx * dx + dy * dy);
 80034ea:	4631      	mov	r1, r6
    float dy = y1 - y0;
 80034ec:	4683      	mov	fp, r0
    float d = sqrt(dx * dx + dy * dy);
 80034ee:	4630      	mov	r0, r6
 80034f0:	f7fd fc48 	bl	8000d84 <__aeabi_fmul>
 80034f4:	4659      	mov	r1, fp
 80034f6:	4607      	mov	r7, r0
 80034f8:	4658      	mov	r0, fp
 80034fa:	f7fd fc43 	bl	8000d84 <__aeabi_fmul>
 80034fe:	4601      	mov	r1, r0
 8003500:	4638      	mov	r0, r7
 8003502:	f7fd fb37 	bl	8000b74 <__addsf3>
 8003506:	f7fc ff8f 	bl	8000428 <__aeabi_f2d>
 800350a:	f006 ff5b 	bl	800a3c4 <sqrt>
 800350e:	f7fd fadb 	bl	8000ac8 <__aeabi_d2f>
 8003512:	4607      	mov	r7, r0

    if (d > 2 * fabs(r)) {
 8003514:	f7fc ff88 	bl	8000428 <__aeabi_f2d>
 8003518:	9b03      	ldr	r3, [sp, #12]
 800351a:	4680      	mov	r8, r0
 800351c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003520:	4689      	mov	r9, r1
 8003522:	f7fc ff81 	bl	8000428 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	f7fc fe1f 	bl	800016c <__adddf3>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4640      	mov	r0, r8
 8003534:	4649      	mov	r1, r9
 8003536:	f7fd fa5f 	bl	80009f8 <__aeabi_dcmpgt>
 800353a:	b128      	cbz	r0, 8003548 <arc_move_r+0xb0>
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 800353c:	488f      	ldr	r0, [pc, #572]	@ (800377c <arc_move_r+0x2e4>)
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
        float x = cx + r * cos(angle);
        float y = cy + r * sin(angle);
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
    }
}
 800353e:	b00b      	add	sp, #44	@ 0x2c
 8003540:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        sendUSBText("Error: el radio es muy pequeño para unir los puntos.\r\n");
 8003544:	f7fe b99c 	b.w	8001880 <sendUSBText>
    float mx = (x0 + x1) / 2;
 8003548:	9904      	ldr	r1, [sp, #16]
 800354a:	4628      	mov	r0, r5
 800354c:	f7fd fb12 	bl	8000b74 <__addsf3>
 8003550:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003554:	f7fd fc16 	bl	8000d84 <__aeabi_fmul>
    float my = (y0 + y1) / 2;
 8003558:	9906      	ldr	r1, [sp, #24]
    float mx = (x0 + x1) / 2;
 800355a:	4681      	mov	r9, r0
    float my = (y0 + y1) / 2;
 800355c:	4620      	mov	r0, r4
 800355e:	f7fd fb09 	bl	8000b74 <__addsf3>
 8003562:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003566:	f7fd fc0d 	bl	8000d84 <__aeabi_fmul>
    float h = sqrt(r * r - (d / 2) * (d / 2));
 800356a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
    float my = (y0 + y1) / 2;
 800356e:	4680      	mov	r8, r0
    float h = sqrt(r * r - (d / 2) * (d / 2));
 8003570:	4638      	mov	r0, r7
 8003572:	f7fd fc07 	bl	8000d84 <__aeabi_fmul>
 8003576:	9903      	ldr	r1, [sp, #12]
 8003578:	9009      	str	r0, [sp, #36]	@ 0x24
 800357a:	4608      	mov	r0, r1
 800357c:	f7fd fc02 	bl	8000d84 <__aeabi_fmul>
 8003580:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003582:	4682      	mov	sl, r0
 8003584:	4608      	mov	r0, r1
 8003586:	f7fd fbfd 	bl	8000d84 <__aeabi_fmul>
 800358a:	4601      	mov	r1, r0
 800358c:	4650      	mov	r0, sl
 800358e:	f7fd faef 	bl	8000b70 <__aeabi_fsub>
 8003592:	f7fc ff49 	bl	8000428 <__aeabi_f2d>
 8003596:	f006 ff15 	bl	800a3c4 <sqrt>
 800359a:	f7fd fa95 	bl	8000ac8 <__aeabi_d2f>
    float nx = -dy / d;
 800359e:	4639      	mov	r1, r7
    float h = sqrt(r * r - (d / 2) * (d / 2));
 80035a0:	4682      	mov	sl, r0
    float nx = -dy / d;
 80035a2:	f10b 4000 	add.w	r0, fp, #2147483648	@ 0x80000000
 80035a6:	f7fd fca1 	bl	8000eec <__aeabi_fdiv>
    float ny = dx / d;
 80035aa:	4639      	mov	r1, r7
    float nx = -dy / d;
 80035ac:	4683      	mov	fp, r0
    float ny = dx / d;
 80035ae:	4630      	mov	r0, r6
 80035b0:	f7fd fc9c 	bl	8000eec <__aeabi_fdiv>
    if (clockwise) {
 80035b4:	9b08      	ldr	r3, [sp, #32]
    float ny = dx / d;
 80035b6:	4606      	mov	r6, r0
        cx = mx - nx * h;
 80035b8:	4659      	mov	r1, fp
 80035ba:	4650      	mov	r0, sl
    if (clockwise) {
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80b6 	beq.w	800372e <arc_move_r+0x296>
        cx = mx - nx * h;
 80035c2:	f7fd fbdf 	bl	8000d84 <__aeabi_fmul>
 80035c6:	4601      	mov	r1, r0
 80035c8:	4648      	mov	r0, r9
 80035ca:	f7fd fad1 	bl	8000b70 <__aeabi_fsub>
        cy = my - ny * h;
 80035ce:	4631      	mov	r1, r6
        cx = mx - nx * h;
 80035d0:	4681      	mov	r9, r0
        cy = my - ny * h;
 80035d2:	4650      	mov	r0, sl
 80035d4:	f7fd fbd6 	bl	8000d84 <__aeabi_fmul>
 80035d8:	4601      	mov	r1, r0
 80035da:	4640      	mov	r0, r8
 80035dc:	f7fd fac8 	bl	8000b70 <__aeabi_fsub>
        cy = my + ny * h;
 80035e0:	4680      	mov	r8, r0
    float start_angle = atan2(y0 - cy, x0 - cx);
 80035e2:	4649      	mov	r1, r9
 80035e4:	4628      	mov	r0, r5
 80035e6:	f7fd fac3 	bl	8000b70 <__aeabi_fsub>
 80035ea:	f7fc ff1d 	bl	8000428 <__aeabi_f2d>
 80035ee:	4606      	mov	r6, r0
 80035f0:	460f      	mov	r7, r1
 80035f2:	4620      	mov	r0, r4
 80035f4:	4641      	mov	r1, r8
 80035f6:	f7fd fabb 	bl	8000b70 <__aeabi_fsub>
 80035fa:	f7fc ff15 	bl	8000428 <__aeabi_f2d>
 80035fe:	4632      	mov	r2, r6
 8003600:	463b      	mov	r3, r7
 8003602:	f006 fedd 	bl	800a3c0 <atan2>
 8003606:	f7fd fa5f 	bl	8000ac8 <__aeabi_d2f>
    float end_angle = atan2(y1 - cy, x1 - cx);
 800360a:	4649      	mov	r1, r9
    float start_angle = atan2(y0 - cy, x0 - cx);
 800360c:	4683      	mov	fp, r0
    float end_angle = atan2(y1 - cy, x1 - cx);
 800360e:	9804      	ldr	r0, [sp, #16]
 8003610:	f7fd faae 	bl	8000b70 <__aeabi_fsub>
 8003614:	f7fc ff08 	bl	8000428 <__aeabi_f2d>
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
 800361c:	9806      	ldr	r0, [sp, #24]
 800361e:	4641      	mov	r1, r8
 8003620:	f7fd faa6 	bl	8000b70 <__aeabi_fsub>
 8003624:	f7fc ff00 	bl	8000428 <__aeabi_f2d>
 8003628:	4622      	mov	r2, r4
 800362a:	462b      	mov	r3, r5
 800362c:	f006 fec8 	bl	800a3c0 <atan2>
 8003630:	f7fd fa4a 	bl	8000ac8 <__aeabi_d2f>
    float total_angle = end_angle - start_angle;
 8003634:	4659      	mov	r1, fp
 8003636:	f7fd fa9b 	bl	8000b70 <__aeabi_fsub>
    if (clockwise && total_angle > 0) {
 800363a:	9b08      	ldr	r3, [sp, #32]
    float total_angle = end_angle - start_angle;
 800363c:	4604      	mov	r4, r0
    if (clockwise && total_angle > 0) {
 800363e:	2100      	movs	r1, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8082 	beq.w	800374a <arc_move_r+0x2b2>
 8003646:	f7fd fd59 	bl	80010fc <__aeabi_fcmpgt>
 800364a:	b150      	cbz	r0, 8003662 <arc_move_r+0x1ca>
        total_angle -= 2 * PI;
 800364c:	4620      	mov	r0, r4
 800364e:	f7fc feeb 	bl	8000428 <__aeabi_f2d>
 8003652:	a345      	add	r3, pc, #276	@ (adr r3, 8003768 <arc_move_r+0x2d0>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fc fd86 	bl	8000168 <__aeabi_dsub>
        total_angle += 2 * PI;
 800365c:	f7fd fa34 	bl	8000ac8 <__aeabi_d2f>
 8003660:	4604      	mov	r4, r0
    for (int i = 1; i <= SEGMENTS; i++) {
 8003662:	2501      	movs	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003664:	f8df a110 	ldr.w	sl, [pc, #272]	@ 8003778 <arc_move_r+0x2e0>
        float x = cx + r * cos(angle);
 8003668:	9803      	ldr	r0, [sp, #12]
 800366a:	f7fc fedd 	bl	8000428 <__aeabi_f2d>
 800366e:	e9cd 0104 	strd	r0, r1, [sp, #16]
        float angle = start_angle + total_angle * ((float)i / SEGMENTS);
 8003672:	4628      	mov	r0, r5
 8003674:	f7fd fb32 	bl	8000cdc <__aeabi_i2f>
 8003678:	4941      	ldr	r1, [pc, #260]	@ (8003780 <arc_move_r+0x2e8>)
 800367a:	f7fd fc37 	bl	8000eec <__aeabi_fdiv>
 800367e:	4621      	mov	r1, r4
 8003680:	f7fd fb80 	bl	8000d84 <__aeabi_fmul>
 8003684:	4659      	mov	r1, fp
 8003686:	f7fd fa75 	bl	8000b74 <__addsf3>
        float x = cx + r * cos(angle);
 800368a:	f7fc fecd 	bl	8000428 <__aeabi_f2d>
 800368e:	4606      	mov	r6, r0
 8003690:	460f      	mov	r7, r1
 8003692:	f006 febb 	bl	800a40c <cos>
 8003696:	e9cd 0106 	strd	r0, r1, [sp, #24]
        float y = cy + r * sin(angle);
 800369a:	4630      	mov	r0, r6
 800369c:	4639      	mov	r1, r7
 800369e:	f006 fefb 	bl	800a498 <sin>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036a2:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <arc_move_r+0x2ec>)
        float y = cy + r * sin(angle);
 80036a4:	4606      	mov	r6, r0
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	f640 735a 	movw	r3, #3930	@ 0xf5a
 80036ac:	fb90 f0f3 	sdiv	r0, r0, r3
        float y = cy + r * sin(angle);
 80036b0:	460f      	mov	r7, r1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036b2:	f7fd fb13 	bl	8000cdc <__aeabi_i2f>
        float y = cy + r * sin(angle);
 80036b6:	4632      	mov	r2, r6
 80036b8:	463b      	mov	r3, r7
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036ba:	9008      	str	r0, [sp, #32]
        float y = cy + r * sin(angle);
 80036bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036c0:	f7fc ff0a 	bl	80004d8 <__aeabi_dmul>
 80036c4:	4606      	mov	r6, r0
 80036c6:	4640      	mov	r0, r8
 80036c8:	460f      	mov	r7, r1
 80036ca:	f7fc fead 	bl	8000428 <__aeabi_f2d>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4630      	mov	r0, r6
 80036d4:	4639      	mov	r1, r7
 80036d6:	f7fc fd49 	bl	800016c <__adddf3>
 80036da:	f7fd f9f5 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036de:	4651      	mov	r1, sl
 80036e0:	f7fd fc04 	bl	8000eec <__aeabi_fdiv>
        float x = cx + r * cos(angle);
 80036e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 80036e8:	9009      	str	r0, [sp, #36]	@ 0x24
        float x = cx + r * cos(angle);
 80036ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036ee:	f7fc fef3 	bl	80004d8 <__aeabi_dmul>
 80036f2:	4606      	mov	r6, r0
 80036f4:	4648      	mov	r0, r9
 80036f6:	460f      	mov	r7, r1
 80036f8:	f7fc fe96 	bl	8000428 <__aeabi_f2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	f7fc fd32 	bl	800016c <__adddf3>
 8003708:	f7fd f9de 	bl	8000ac8 <__aeabi_d2f>
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 800370c:	4651      	mov	r1, sl
 800370e:	f7fd fbed 	bl	8000eec <__aeabi_fdiv>
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	4b1c      	ldr	r3, [pc, #112]	@ (8003788 <arc_move_r+0x2f0>)
 8003718:	9a08      	ldr	r2, [sp, #32]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	9909      	ldr	r1, [sp, #36]	@ 0x24
    for (int i = 1; i <= SEGMENTS; i++) {
 800371e:	3501      	adds	r5, #1
        moveAxesWithFeedRate(x / STEPS_PER_MM_X, y / STEPS_PER_MM_Y, currentZ / STEPS_PER_MM_Z, rapidRate, true);
 8003720:	f7ff fcbe 	bl	80030a0 <moveAxesWithFeedRate>
    for (int i = 1; i <= SEGMENTS; i++) {
 8003724:	2d33      	cmp	r5, #51	@ 0x33
 8003726:	d19f      	bne.n	8003668 <arc_move_r+0x1d0>
}
 8003728:	b00b      	add	sp, #44	@ 0x2c
 800372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cx = mx + nx * h;
 800372e:	f7fd fb29 	bl	8000d84 <__aeabi_fmul>
 8003732:	4649      	mov	r1, r9
 8003734:	f7fd fa1e 	bl	8000b74 <__addsf3>
        cy = my + ny * h;
 8003738:	4631      	mov	r1, r6
        cx = mx + nx * h;
 800373a:	4681      	mov	r9, r0
        cy = my + ny * h;
 800373c:	4650      	mov	r0, sl
 800373e:	f7fd fb21 	bl	8000d84 <__aeabi_fmul>
 8003742:	4641      	mov	r1, r8
 8003744:	f7fd fa16 	bl	8000b74 <__addsf3>
 8003748:	e74a      	b.n	80035e0 <arc_move_r+0x148>
    } else if (!clockwise && total_angle < 0) {
 800374a:	f7fd fcb9 	bl	80010c0 <__aeabi_fcmplt>
 800374e:	2800      	cmp	r0, #0
 8003750:	d087      	beq.n	8003662 <arc_move_r+0x1ca>
        total_angle += 2 * PI;
 8003752:	4620      	mov	r0, r4
 8003754:	f7fc fe68 	bl	8000428 <__aeabi_f2d>
 8003758:	a303      	add	r3, pc, #12	@ (adr r3, 8003768 <arc_move_r+0x2d0>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fc fd05 	bl	800016c <__adddf3>
 8003762:	e77b      	b.n	800365c <arc_move_r+0x1c4>
 8003764:	f3af 8000 	nop.w
 8003768:	54442d18 	.word	0x54442d18
 800376c:	401921fb 	.word	0x401921fb
 8003770:	20002374 	.word	0x20002374
 8003774:	20002370 	.word	0x20002370
 8003778:	429e0000 	.word	0x429e0000
 800377c:	0800d0f9 	.word	0x0800d0f9
 8003780:	42480000 	.word	0x42480000
 8003784:	2000236c 	.word	0x2000236c
 8003788:	20000008 	.word	0x20000008

0800378c <getCurrentPositionMM>:
/**
  * @brief  Obtener posición actual en milímetros
  * @param  x, y, z: Punteros para almacenar las coordenadas actuales
  * @retval None
  */
void getCurrentPositionMM(float *x, float *y, float *z) {
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	460d      	mov	r5, r1
 8003790:	4614      	mov	r4, r2
    if (x) *x = currentX / (float)STEPS_PER_MM_X;
 8003792:	4606      	mov	r6, r0
 8003794:	b138      	cbz	r0, 80037a6 <getCurrentPositionMM+0x1a>
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <getCurrentPositionMM+0x40>)
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	f7fd fa9f 	bl	8000cdc <__aeabi_i2f>
 800379e:	490c      	ldr	r1, [pc, #48]	@ (80037d0 <getCurrentPositionMM+0x44>)
 80037a0:	f7fd fba4 	bl	8000eec <__aeabi_fdiv>
 80037a4:	6030      	str	r0, [r6, #0]
    if (y) *y = currentY / (float)STEPS_PER_MM_Y;
 80037a6:	b13d      	cbz	r5, 80037b8 <getCurrentPositionMM+0x2c>
 80037a8:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <getCurrentPositionMM+0x48>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	f7fd fa96 	bl	8000cdc <__aeabi_i2f>
 80037b0:	4907      	ldr	r1, [pc, #28]	@ (80037d0 <getCurrentPositionMM+0x44>)
 80037b2:	f7fd fb9b 	bl	8000eec <__aeabi_fdiv>
 80037b6:	6028      	str	r0, [r5, #0]
    if (z) *z = currentZ / (float)STEPS_PER_MM_Z;
 80037b8:	b13c      	cbz	r4, 80037ca <getCurrentPositionMM+0x3e>
 80037ba:	4b07      	ldr	r3, [pc, #28]	@ (80037d8 <getCurrentPositionMM+0x4c>)
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f7fd fa8d 	bl	8000cdc <__aeabi_i2f>
 80037c2:	4906      	ldr	r1, [pc, #24]	@ (80037dc <getCurrentPositionMM+0x50>)
 80037c4:	f7fd fb92 	bl	8000eec <__aeabi_fdiv>
 80037c8:	6020      	str	r0, [r4, #0]
}
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	20002374 	.word	0x20002374
 80037d0:	429e0000 	.word	0x429e0000
 80037d4:	20002370 	.word	0x20002370
 80037d8:	2000236c 	.word	0x2000236c
 80037dc:	4575a000 	.word	0x4575a000

080037e0 <planner_process_next_block>:
}

/**
 * @brief Procesa el siguiente bloque del buffer
 */
bool planner_process_next_block(void) {
 80037e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Verificar si hay bloques pendientes
    if (planner_buffer_count == 0) {
 80037e4:	4f2a      	ldr	r7, [pc, #168]	@ (8003890 <planner_process_next_block+0xb0>)
 80037e6:	783b      	ldrb	r3, [r7, #0]
 80037e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037ec:	b93b      	cbnz	r3, 80037fe <planner_process_next_block+0x1e>
        planner_state.is_running = false;
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <planner_process_next_block+0xb4>)
 80037f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        return false;
 80037f4:	2600      	movs	r6, #0
        sendUSBText(debug_msg);
        #endif
    }
    
    return success;
}
 80037f6:	4630      	mov	r0, r6
 80037f8:	b003      	add	sp, #12
 80037fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!block->busy || block->executed) {
 80037fe:	2348      	movs	r3, #72	@ 0x48
    planner_block_t *block = &planner_buffer[planner_buffer_tail];
 8003800:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8003898 <planner_process_next_block+0xb8>
    if (!block->busy || block->executed) {
 8003804:	4c25      	ldr	r4, [pc, #148]	@ (800389c <planner_process_next_block+0xbc>)
    planner_block_t *block = &planner_buffer[planner_buffer_tail];
 8003806:	f898 2000 	ldrb.w	r2, [r8]
 800380a:	fa5f f982 	uxtb.w	r9, r2
    if (!block->busy || block->executed) {
 800380e:	435a      	muls	r2, r3
 8003810:	18a0      	adds	r0, r4, r2
 8003812:	f890 6046 	ldrb.w	r6, [r0, #70]	@ 0x46
 8003816:	2e00      	cmp	r6, #0
 8003818:	d0ec      	beq.n	80037f4 <planner_process_next_block+0x14>
 800381a:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e8      	bne.n	80037f4 <planner_process_next_block+0x14>
    planner_state.is_running = true;
 8003822:	2101      	movs	r1, #1

/**
 * @brief Ejecuta un bloque específico
 */
static bool planner_execute_block(planner_block_t *block) {
    switch (block->move_type) {
 8003824:	5ca2      	ldrb	r2, [r4, r2]
    planner_state.is_running = true;
 8003826:	4d1b      	ldr	r5, [pc, #108]	@ (8003894 <planner_process_next_block+0xb4>)
    switch (block->move_type) {
 8003828:	2a02      	cmp	r2, #2
    planner_state.is_running = true;
 800382a:	f885 1024 	strb.w	r1, [r5, #36]	@ 0x24
    switch (block->move_type) {
 800382e:	d02c      	beq.n	800388a <planner_process_next_block+0xaa>
 8003830:	d907      	bls.n	8003842 <planner_process_next_block+0x62>
 8003832:	2a03      	cmp	r2, #3
 8003834:	d1de      	bne.n	80037f4 <planner_process_next_block+0x14>
                      block->arc_radius, 1);
            break;
            
        case MOVE_TYPE_ARC_CCW:
            // Arco antihorario
            arc_move_r(block->target_pos[0], block->target_pos[1], 
 8003836:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003838:	6941      	ldr	r1, [r0, #20]
 800383a:	6900      	ldr	r0, [r0, #16]
 800383c:	f7ff fe2c 	bl	8003498 <arc_move_r>
    if (success) {
 8003840:	e00a      	b.n	8003858 <planner_process_next_block+0x78>
            moveAxesWithFeedRate(block->target_pos[0], block->target_pos[1], 
 8003842:	f082 0201 	eor.w	r2, r2, #1
 8003846:	f002 0201 	and.w	r2, r2, #1
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800384e:	6982      	ldr	r2, [r0, #24]
 8003850:	6941      	ldr	r1, [r0, #20]
 8003852:	6900      	ldr	r0, [r0, #16]
 8003854:	f7ff fc24 	bl	80030a0 <moveAxesWithFeedRate>
        block->busy = false;
 8003858:	2348      	movs	r3, #72	@ 0x48
 800385a:	fb03 4409 	mla	r4, r3, r9, r4
 800385e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003862:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        planner_buffer_tail = planner_next_block_index(planner_buffer_tail);
 8003866:	f898 3000 	ldrb.w	r3, [r8]

/**
 * @brief Obtiene el siguiente índice en el buffer circular
 */
static uint8_t planner_next_block_index(uint8_t block_index) {
    return (block_index + 1) % PLANNER_BUFFER_SIZE;
 800386a:	3301      	adds	r3, #1
 800386c:	f003 0307 	and.w	r3, r3, #7
        planner_buffer_tail = planner_next_block_index(planner_buffer_tail);
 8003870:	f888 3000 	strb.w	r3, [r8]
        planner_buffer_count--;
 8003874:	783b      	ldrb	r3, [r7, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	703b      	strb	r3, [r7, #0]
        planner_state.total_blocks_processed++;
 800387c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800387e:	3301      	adds	r3, #1
 8003880:	62ab      	str	r3, [r5, #40]	@ 0x28
        planner_state.buffer_full = false;
 8003882:	2300      	movs	r3, #0
 8003884:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8003888:	e7b5      	b.n	80037f6 <planner_process_next_block+0x16>
            arc_move_r(block->target_pos[0], block->target_pos[1], 
 800388a:	460b      	mov	r3, r1
 800388c:	e7d3      	b.n	8003836 <planner_process_next_block+0x56>
 800388e:	bf00      	nop
 8003890:	200024b4 	.word	0x200024b4
 8003894:	20002488 	.word	0x20002488
 8003898:	200024b5 	.word	0x200024b5
 800389c:	200024b8 	.word	0x200024b8

080038a0 <planner_junction_velocity>:
float planner_junction_velocity(planner_block_t *before, planner_block_t *after) {
 80038a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a4:	460d      	mov	r5, r1
    if (before == NULL || after == NULL) {
 80038a6:	4604      	mov	r4, r0
float planner_junction_velocity(planner_block_t *before, planner_block_t *after) {
 80038a8:	b089      	sub	sp, #36	@ 0x24
    if (before == NULL || after == NULL) {
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d071      	beq.n	8003992 <planner_junction_velocity+0xf2>
 80038ae:	2900      	cmp	r1, #0
 80038b0:	d06f      	beq.n	8003992 <planner_junction_velocity+0xf2>
 80038b2:	4606      	mov	r6, r0
 80038b4:	460f      	mov	r7, r1
        after_unit[i] = (after->target_pos[i] - after->start_pos[i]) / after->distance;
 80038b6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
        before_unit[i] = (before->target_pos[i] - before->start_pos[i]) / before->distance;
 80038b8:	f8d0 b02c 	ldr.w	fp, [r0, #44]	@ 0x2c
        after_unit[i] = (after->target_pos[i] - after->start_pos[i]) / after->distance;
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	f10d 0908 	add.w	r9, sp, #8
 80038c2:	f10d 0814 	add.w	r8, sp, #20
 80038c6:	f100 0a0c 	add.w	sl, r0, #12
        before_unit[i] = (before->target_pos[i] - before->start_pos[i]) / before->distance;
 80038ca:	6930      	ldr	r0, [r6, #16]
 80038cc:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80038d0:	f7fd f94e 	bl	8000b70 <__aeabi_fsub>
 80038d4:	4659      	mov	r1, fp
 80038d6:	f7fd fb09 	bl	8000eec <__aeabi_fdiv>
 80038da:	f849 0b04 	str.w	r0, [r9], #4
        after_unit[i] = (after->target_pos[i] - after->start_pos[i]) / after->distance;
 80038de:	6938      	ldr	r0, [r7, #16]
 80038e0:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80038e4:	f7fd f944 	bl	8000b70 <__aeabi_fsub>
 80038e8:	9901      	ldr	r1, [sp, #4]
 80038ea:	f7fd faff 	bl	8000eec <__aeabi_fdiv>
    for (int i = 0; i < 3; i++) {
 80038ee:	4556      	cmp	r6, sl
        after_unit[i] = (after->target_pos[i] - after->start_pos[i]) / after->distance;
 80038f0:	f848 0b04 	str.w	r0, [r8], #4
    for (int i = 0; i < 3; i++) {
 80038f4:	d1e9      	bne.n	80038ca <planner_junction_velocity+0x2a>
        dot_product += before_unit[i] * after_unit[i];
 80038f6:	9902      	ldr	r1, [sp, #8]
 80038f8:	9805      	ldr	r0, [sp, #20]
 80038fa:	f7fd fa43 	bl	8000d84 <__aeabi_fmul>
 80038fe:	2100      	movs	r1, #0
 8003900:	f7fd f938 	bl	8000b74 <__addsf3>
 8003904:	4606      	mov	r6, r0
 8003906:	9906      	ldr	r1, [sp, #24]
 8003908:	9803      	ldr	r0, [sp, #12]
 800390a:	f7fd fa3b 	bl	8000d84 <__aeabi_fmul>
 800390e:	4631      	mov	r1, r6
 8003910:	f7fd f930 	bl	8000b74 <__addsf3>
 8003914:	4606      	mov	r6, r0
 8003916:	9907      	ldr	r1, [sp, #28]
 8003918:	9804      	ldr	r0, [sp, #16]
 800391a:	f7fd fa33 	bl	8000d84 <__aeabi_fmul>
 800391e:	4631      	mov	r1, r6
 8003920:	f7fd f928 	bl	8000b74 <__addsf3>
    if (dot_product > 1.0f) dot_product = 1.0f;
 8003924:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
        dot_product += before_unit[i] * after_unit[i];
 8003928:	4606      	mov	r6, r0
    if (dot_product > 1.0f) dot_product = 1.0f;
 800392a:	f7fd fbe7 	bl	80010fc <__aeabi_fcmpgt>
 800392e:	b930      	cbnz	r0, 800393e <planner_junction_velocity+0x9e>
    if (dot_product < -1.0f) dot_product = -1.0f;
 8003930:	4630      	mov	r0, r6
 8003932:	491a      	ldr	r1, [pc, #104]	@ (800399c <planner_junction_velocity+0xfc>)
 8003934:	f7fd fbc4 	bl	80010c0 <__aeabi_fcmplt>
 8003938:	b118      	cbz	r0, 8003942 <planner_junction_velocity+0xa2>
 800393a:	4e18      	ldr	r6, [pc, #96]	@ (800399c <planner_junction_velocity+0xfc>)
 800393c:	e001      	b.n	8003942 <planner_junction_velocity+0xa2>
    if (dot_product > 1.0f) dot_product = 1.0f;
 800393e:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
    float sin_half_theta = sqrtf((1.0f - cos_theta) / 2.0f);
 8003942:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003946:	4630      	mov	r0, r6
 8003948:	f7fd f914 	bl	8000b74 <__addsf3>
 800394c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003950:	f7fd fa18 	bl	8000d84 <__aeabi_fmul>
 8003954:	f006 fde8 	bl	800a528 <sqrtf>
    if (sin_half_theta < 0.001f) {
 8003958:	4911      	ldr	r1, [pc, #68]	@ (80039a0 <planner_junction_velocity+0x100>)
    float sin_half_theta = sqrtf((1.0f - cos_theta) / 2.0f);
 800395a:	4606      	mov	r6, r0
    if (sin_half_theta < 0.001f) {
 800395c:	f7fd fbb0 	bl	80010c0 <__aeabi_fcmplt>
 8003960:	b130      	cbz	r0, 8003970 <planner_junction_velocity+0xd0>
        return fminf(before->nominal_speed, after->nominal_speed);
 8003962:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8003964:	6b20      	ldr	r0, [r4, #48]	@ 0x30
}
 8003966:	b009      	add	sp, #36	@ 0x24
 8003968:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return fminf(junction_speed, max_speed);
 800396c:	f006 bdf6 	b.w	800a55c <fminf>
    float junction_speed = sqrtf(JUNCTION_DEVIATION * before->acceleration / sin_half_theta);
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <planner_junction_velocity+0x104>)
 8003972:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003974:	f7fd fa06 	bl	8000d84 <__aeabi_fmul>
 8003978:	4631      	mov	r1, r6
 800397a:	f7fd fab7 	bl	8000eec <__aeabi_fdiv>
 800397e:	f006 fdd3 	bl	800a528 <sqrtf>
    float max_speed = fminf(before->nominal_speed, after->nominal_speed);
 8003982:	6b29      	ldr	r1, [r5, #48]	@ 0x30
    float junction_speed = sqrtf(JUNCTION_DEVIATION * before->acceleration / sin_half_theta);
 8003984:	4606      	mov	r6, r0
    float max_speed = fminf(before->nominal_speed, after->nominal_speed);
 8003986:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003988:	f006 fde8 	bl	800a55c <fminf>
 800398c:	4601      	mov	r1, r0
    return fminf(junction_speed, max_speed);
 800398e:	4630      	mov	r0, r6
 8003990:	e7e9      	b.n	8003966 <planner_junction_velocity+0xc6>
        return 0.0f;
 8003992:	2000      	movs	r0, #0
}
 8003994:	b009      	add	sp, #36	@ 0x24
 8003996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	bf800000 	.word	0xbf800000
 80039a0:	3a83126f 	.word	0x3a83126f
 80039a4:	3dcccccd 	.word	0x3dcccccd

080039a8 <planner_max_allowable_speed>:
float planner_max_allowable_speed(float acceleration, float target_velocity, float distance) {
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4614      	mov	r4, r2
 80039ac:	460d      	mov	r5, r1
    float max_speed_sq = target_velocity * target_velocity + 2.0f * acceleration * distance;
 80039ae:	4601      	mov	r1, r0
 80039b0:	f7fd f8e0 	bl	8000b74 <__addsf3>
 80039b4:	4621      	mov	r1, r4
 80039b6:	f7fd f9e5 	bl	8000d84 <__aeabi_fmul>
 80039ba:	4629      	mov	r1, r5
 80039bc:	4604      	mov	r4, r0
 80039be:	4628      	mov	r0, r5
 80039c0:	f7fd f9e0 	bl	8000d84 <__aeabi_fmul>
 80039c4:	4601      	mov	r1, r0
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7fd f8d4 	bl	8000b74 <__addsf3>
    if (max_speed_sq <= 0.0f) {
 80039cc:	2100      	movs	r1, #0
    float max_speed_sq = target_velocity * target_velocity + 2.0f * acceleration * distance;
 80039ce:	4604      	mov	r4, r0
    if (max_speed_sq <= 0.0f) {
 80039d0:	f7fd fb80 	bl	80010d4 <__aeabi_fcmple>
 80039d4:	b920      	cbnz	r0, 80039e0 <planner_max_allowable_speed+0x38>
    return sqrtf(max_speed_sq);
 80039d6:	4620      	mov	r0, r4
}
 80039d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return sqrtf(max_speed_sq);
 80039dc:	f006 bda4 	b.w	800a528 <sqrtf>
}
 80039e0:	2000      	movs	r0, #0
 80039e2:	bd38      	pop	{r3, r4, r5, pc}

080039e4 <planner_recalculate>:
void planner_recalculate(void) {
 80039e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (planner_buffer_count < 2) {
 80039e8:	4b55      	ldr	r3, [pc, #340]	@ (8003b40 <planner_recalculate+0x15c>)
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	2a01      	cmp	r2, #1
 80039ee:	d91f      	bls.n	8003a30 <planner_recalculate+0x4c>
    uint8_t block_index = planner_buffer_head;
 80039f0:	4a54      	ldr	r2, [pc, #336]	@ (8003b44 <planner_recalculate+0x160>)
 80039f2:	7814      	ldrb	r4, [r2, #0]
    if (planner_buffer_count > 0) {
 80039f4:	781b      	ldrb	r3, [r3, #0]
    uint8_t block_index = planner_buffer_head;
 80039f6:	b2e4      	uxtb	r4, r4
    if (planner_buffer_count > 0) {
 80039f8:	b113      	cbz	r3, 8003a00 <planner_recalculate+0x1c>

/**
 * @brief Obtiene el índice anterior en el buffer circular
 */
static uint8_t planner_prev_block_index(uint8_t block_index) {
    return (block_index == 0) ? (PLANNER_BUFFER_SIZE - 1) : (block_index - 1);
 80039fa:	b1dc      	cbz	r4, 8003a34 <planner_recalculate+0x50>
 80039fc:	3c01      	subs	r4, #1
 80039fe:	b2e4      	uxtb	r4, r4
 8003a00:	2100      	movs	r1, #0
            float junction_speed = 0.0f;
 8003a02:	f04f 0a00 	mov.w	sl, #0
    return (block_index == 0) ? (PLANNER_BUFFER_SIZE - 1) : (block_index - 1);
 8003a06:	460d      	mov	r5, r1
    while (block_index != planner_buffer_tail) {
 8003a08:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8003b48 <planner_recalculate+0x164>
        block[0] = &planner_buffer[block_index];
 8003a0c:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8003b4c <planner_recalculate+0x168>
    while (block_index != planner_buffer_tail) {
 8003a10:	f898 3000 	ldrb.w	r3, [r8]
 8003a14:	429c      	cmp	r4, r3
 8003a16:	d10f      	bne.n	8003a38 <planner_recalculate+0x54>
    planner_block_t *block[2] = {NULL, NULL};
 8003a18:	2300      	movs	r3, #0
    if (entry_factor > 1.0f) entry_factor = 1.0f;
 8003a1a:	f04f 577e 	mov.w	r7, #1065353216	@ 0x3f800000
    if (exit_factor < 0.0f) exit_factor = 0.0f;
 8003a1e:	f04f 0b00 	mov.w	fp, #0
    uint8_t block_index = planner_buffer_tail;
 8003a22:	f898 5000 	ldrb.w	r5, [r8]
 8003a26:	b2ed      	uxtb	r5, r5
    while (block_index != planner_buffer_head) {
 8003a28:	4a46      	ldr	r2, [pc, #280]	@ (8003b44 <planner_recalculate+0x160>)
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	4295      	cmp	r5, r2
 8003a2e:	d122      	bne.n	8003a76 <planner_recalculate+0x92>
}
 8003a30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (block_index == 0) ? (PLANNER_BUFFER_SIZE - 1) : (block_index - 1);
 8003a34:	2407      	movs	r4, #7
 8003a36:	e7e3      	b.n	8003a00 <planner_recalculate+0x1c>
        block[0] = &planner_buffer[block_index];
 8003a38:	2748      	movs	r7, #72	@ 0x48
 8003a3a:	fb07 9704 	mla	r7, r7, r4, r9
        if (block[1] != NULL && block[1]->recalculate_flag) {
 8003a3e:	b185      	cbz	r5, 8003a62 <planner_recalculate+0x7e>
 8003a40:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8003a44:	b16b      	cbz	r3, 8003a62 <planner_recalculate+0x7e>
            if (block[2] != NULL) {
 8003a46:	b191      	cbz	r1, 8003a6e <planner_recalculate+0x8a>
                junction_speed = planner_junction_velocity(block[1], block[2]);
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f7ff ff29 	bl	80038a0 <planner_junction_velocity>
 8003a4e:	4606      	mov	r6, r0
            if (junction_speed < block[1]->exit_speed) {
 8003a50:	4631      	mov	r1, r6
 8003a52:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8003a54:	f7fd fb52 	bl	80010fc <__aeabi_fcmpgt>
 8003a58:	b118      	cbz	r0, 8003a62 <planner_recalculate+0x7e>
                block[1]->recalculate_flag = false;
 8003a5a:	2300      	movs	r3, #0
                block[1]->exit_speed = junction_speed;
 8003a5c:	63ae      	str	r6, [r5, #56]	@ 0x38
                block[1]->recalculate_flag = false;
 8003a5e:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
    return (block_index == 0) ? (PLANNER_BUFFER_SIZE - 1) : (block_index - 1);
 8003a62:	b134      	cbz	r4, 8003a72 <planner_recalculate+0x8e>
 8003a64:	3c01      	subs	r4, #1
 8003a66:	b2e4      	uxtb	r4, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	463d      	mov	r5, r7
 8003a6c:	e7d0      	b.n	8003a10 <planner_recalculate+0x2c>
            float junction_speed = 0.0f;
 8003a6e:	4656      	mov	r6, sl
 8003a70:	e7ee      	b.n	8003a50 <planner_recalculate+0x6c>
    return (block_index == 0) ? (PLANNER_BUFFER_SIZE - 1) : (block_index - 1);
 8003a72:	2407      	movs	r4, #7
 8003a74:	e7f8      	b.n	8003a68 <planner_recalculate+0x84>
        block[1] = &planner_buffer[block_index];
 8003a76:	f04f 0848 	mov.w	r8, #72	@ 0x48
 8003a7a:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8003b4c <planner_recalculate+0x168>
 8003a7e:	fb08 9805 	mla	r8, r8, r5, r9
        if (block[0] != NULL) {
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d041      	beq.n	8003b0a <planner_recalculate+0x126>
            float max_entry_speed = planner_max_allowable_speed(
 8003a86:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003a88:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 8003a8c:	f8d8 0040 	ldr.w	r0, [r8, #64]	@ 0x40
 8003a90:	f7ff ff8a 	bl	80039a8 <planner_max_allowable_speed>
            if (block[1]->entry_speed > max_entry_speed) {
 8003a94:	f8d8 1034 	ldr.w	r1, [r8, #52]	@ 0x34
            float max_entry_speed = planner_max_allowable_speed(
 8003a98:	4604      	mov	r4, r0
            if (block[1]->entry_speed > max_entry_speed) {
 8003a9a:	f7fd fb11 	bl	80010c0 <__aeabi_fcmplt>
 8003a9e:	b108      	cbz	r0, 8003aa4 <planner_recalculate+0xc0>
                block[1]->entry_speed = max_entry_speed;
 8003aa0:	f8c8 4034 	str.w	r4, [r8, #52]	@ 0x34
            float entry_factor = block[1]->entry_speed / block[1]->nominal_speed;
 8003aa4:	2648      	movs	r6, #72	@ 0x48
 8003aa6:	fb06 9605 	mla	r6, r6, r5, r9
 8003aaa:	f8d6 a030 	ldr.w	sl, [r6, #48]	@ 0x30
 8003aae:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	f7fd fa1b 	bl	8000eec <__aeabi_fdiv>
            float exit_factor = block[1]->exit_speed / block[1]->nominal_speed;
 8003ab6:	4651      	mov	r1, sl
            float entry_factor = block[1]->entry_speed / block[1]->nominal_speed;
 8003ab8:	4604      	mov	r4, r0
            float exit_factor = block[1]->exit_speed / block[1]->nominal_speed;
 8003aba:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 8003abc:	f7fd fa16 	bl	8000eec <__aeabi_fdiv>
    if (entry_factor > 1.0f) entry_factor = 1.0f;
 8003ac0:	4639      	mov	r1, r7
            float exit_factor = block[1]->exit_speed / block[1]->nominal_speed;
 8003ac2:	4606      	mov	r6, r0
    if (entry_factor > 1.0f) entry_factor = 1.0f;
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fd fb19 	bl	80010fc <__aeabi_fcmpgt>
    if (exit_factor > 1.0f) exit_factor = 1.0f;
 8003aca:	4639      	mov	r1, r7
    if (entry_factor > 1.0f) entry_factor = 1.0f;
 8003acc:	bb80      	cbnz	r0, 8003b30 <planner_recalculate+0x14c>
    if (exit_factor > 1.0f) exit_factor = 1.0f;
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7fd fb14 	bl	80010fc <__aeabi_fcmpgt>
 8003ad4:	bb18      	cbnz	r0, 8003b1e <planner_recalculate+0x13a>
    if (entry_factor < 0.0f) entry_factor = 0.0f;
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7fd faf1 	bl	80010c0 <__aeabi_fcmplt>
 8003ade:	b100      	cbz	r0, 8003ae2 <planner_recalculate+0xfe>
 8003ae0:	2400      	movs	r4, #0
    if (exit_factor < 0.0f) exit_factor = 0.0f;
 8003ae2:	4659      	mov	r1, fp
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7fd faeb 	bl	80010c0 <__aeabi_fcmplt>
 8003aea:	b9b0      	cbnz	r0, 8003b1a <planner_recalculate+0x136>
    block->entry_speed = entry_factor * block->nominal_speed;
 8003aec:	2348      	movs	r3, #72	@ 0x48
 8003aee:	4621      	mov	r1, r4
 8003af0:	4650      	mov	r0, sl
 8003af2:	fb03 9905 	mla	r9, r3, r5, r9
 8003af6:	f7fd f945 	bl	8000d84 <__aeabi_fmul>
    block->exit_speed = exit_factor * block->nominal_speed;
 8003afa:	4631      	mov	r1, r6
    block->entry_speed = entry_factor * block->nominal_speed;
 8003afc:	f8c9 0034 	str.w	r0, [r9, #52]	@ 0x34
    block->exit_speed = exit_factor * block->nominal_speed;
 8003b00:	4650      	mov	r0, sl
 8003b02:	f7fd f93f 	bl	8000d84 <__aeabi_fmul>
 8003b06:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
    return (block_index + 1) % PLANNER_BUFFER_SIZE;
 8003b0a:	3501      	adds	r5, #1
        block[1] = &planner_buffer[block_index];
 8003b0c:	4643      	mov	r3, r8
    return (block_index + 1) % PLANNER_BUFFER_SIZE;
 8003b0e:	f005 0507 	and.w	r5, r5, #7
 8003b12:	e789      	b.n	8003a28 <planner_recalculate+0x44>
    if (exit_factor > 1.0f) exit_factor = 1.0f;
 8003b14:	463e      	mov	r6, r7
    if (entry_factor < 0.0f) entry_factor = 0.0f;
 8003b16:	465c      	mov	r4, fp
 8003b18:	e7e8      	b.n	8003aec <planner_recalculate+0x108>
    if (exit_factor < 0.0f) exit_factor = 0.0f;
 8003b1a:	465e      	mov	r6, fp
 8003b1c:	e7e6      	b.n	8003aec <planner_recalculate+0x108>
    if (entry_factor < 0.0f) entry_factor = 0.0f;
 8003b1e:	4659      	mov	r1, fp
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fd facd 	bl	80010c0 <__aeabi_fcmplt>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d1f4      	bne.n	8003b14 <planner_recalculate+0x130>
    if (exit_factor > 1.0f) exit_factor = 1.0f;
 8003b2a:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 8003b2e:	e7dd      	b.n	8003aec <planner_recalculate+0x108>
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7fd fae3 	bl	80010fc <__aeabi_fcmpgt>
    if (entry_factor > 1.0f) entry_factor = 1.0f;
 8003b36:	463c      	mov	r4, r7
    if (exit_factor > 1.0f) exit_factor = 1.0f;
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d0d2      	beq.n	8003ae2 <planner_recalculate+0xfe>
 8003b3c:	463e      	mov	r6, r7
 8003b3e:	e7d5      	b.n	8003aec <planner_recalculate+0x108>
 8003b40:	200024b4 	.word	0x200024b4
 8003b44:	200024b6 	.word	0x200024b6
 8003b48:	200024b5 	.word	0x200024b5
 8003b4c:	200024b8 	.word	0x200024b8

08003b50 <planner_buffer_arc>:
                       bool is_radius_mode, float feed_rate) {
 8003b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b54:	b087      	sub	sp, #28
 8003b56:	9202      	str	r2, [sp, #8]
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003b58:	4aa7      	ldr	r2, [pc, #668]	@ (8003df8 <planner_buffer_arc+0x2a8>)
                       bool is_radius_mode, float feed_rate) {
 8003b5a:	4605      	mov	r5, r0
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003b5c:	7812      	ldrb	r2, [r2, #0]
                       bool is_radius_mode, float feed_rate) {
 8003b5e:	460c      	mov	r4, r1
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003b60:	2a07      	cmp	r2, #7
 8003b62:	4aa6      	ldr	r2, [pc, #664]	@ (8003dfc <planner_buffer_arc+0x2ac>)
 8003b64:	d906      	bls.n	8003b74 <planner_buffer_arc+0x24>
        planner_state.buffer_full = true;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
        return false;
 8003b6c:	2000      	movs	r0, #0
}
 8003b6e:	b007      	add	sp, #28
 8003b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    planner_block_t *block = &planner_buffer[planner_buffer_head];
 8003b74:	49a2      	ldr	r1, [pc, #648]	@ (8003e00 <planner_buffer_arc+0x2b0>)
    block->move_type = is_clockwise ? MOVE_TYPE_ARC_CW : MOVE_TYPE_ARC_CCW;
 8003b76:	4fa3      	ldr	r7, [pc, #652]	@ (8003e04 <planner_buffer_arc+0x2b4>)
    planner_block_t *block = &planner_buffer[planner_buffer_head];
 8003b78:	f891 c000 	ldrb.w	ip, [r1]
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003b7c:	f107 0e04 	add.w	lr, r7, #4
    planner_block_t *block = &planner_buffer[planner_buffer_head];
 8003b80:	fa5f f18c 	uxtb.w	r1, ip
 8003b84:	9101      	str	r1, [sp, #4]
    block->move_type = is_clockwise ? MOVE_TYPE_ARC_CW : MOVE_TYPE_ARC_CCW;
 8003b86:	2148      	movs	r1, #72	@ 0x48
 8003b88:	fb01 fc0c 	mul.w	ip, r1, ip
 8003b8c:	9902      	ldr	r1, [sp, #8]
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003b8e:	44e6      	add	lr, ip
    block->move_type = is_clockwise ? MOVE_TYPE_ARC_CW : MOVE_TYPE_ARC_CCW;
 8003b90:	f1c1 0103 	rsb	r1, r1, #3
 8003b94:	f807 100c 	strb.w	r1, [r7, ip]
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b9a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    block->move_type = is_clockwise ? MOVE_TYPE_ARC_CW : MOVE_TYPE_ARC_CCW;
 8003b9e:	eb07 060c 	add.w	r6, r7, ip
    memcpy(block->target_pos, target, sizeof(float) * 3);
 8003ba2:	6828      	ldr	r0, [r5, #0]
 8003ba4:	6869      	ldr	r1, [r5, #4]
 8003ba6:	f10c 0c10 	add.w	ip, ip, #16
 8003baa:	eb07 020c 	add.w	r2, r7, ip
 8003bae:	c203      	stmia	r2!, {r0, r1}
 8003bb0:	68a8      	ldr	r0, [r5, #8]
 8003bb2:	6010      	str	r0, [r2, #0]
    block->arc_radius_mode = is_radius_mode;
 8003bb4:	6877      	ldr	r7, [r6, #4]
 8003bb6:	f886 3028 	strb.w	r3, [r6, #40]	@ 0x28
    if (is_radius_mode) {
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 812e 	beq.w	8003e1c <planner_buffer_arc+0x2cc>
        block->arc_radius = offset[0];
 8003bc0:	6824      	ldr	r4, [r4, #0]
        float dx = block->target_pos[0] - block->start_pos[0];
 8003bc2:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8003bc6:	4639      	mov	r1, r7
        block->arc_radius = offset[0];
 8003bc8:	6274      	str	r4, [r6, #36]	@ 0x24
        float dx = block->target_pos[0] - block->start_pos[0];
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f7fc ffd0 	bl	8000b70 <__aeabi_fsub>
        float dy = block->target_pos[1] - block->start_pos[1];
 8003bd0:	6973      	ldr	r3, [r6, #20]
        float dx = block->target_pos[0] - block->start_pos[0];
 8003bd2:	4680      	mov	r8, r0
        float dy = block->target_pos[1] - block->start_pos[1];
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	68b3      	ldr	r3, [r6, #8]
 8003bd8:	9803      	ldr	r0, [sp, #12]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	9304      	str	r3, [sp, #16]
 8003bde:	f7fc ffc7 	bl	8000b70 <__aeabi_fsub>
        float chord_distance = sqrtf(dx*dx + dy*dy);
 8003be2:	4641      	mov	r1, r8
        float dy = block->target_pos[1] - block->start_pos[1];
 8003be4:	4683      	mov	fp, r0
        float chord_distance = sqrtf(dx*dx + dy*dy);
 8003be6:	4640      	mov	r0, r8
 8003be8:	f7fd f8cc 	bl	8000d84 <__aeabi_fmul>
 8003bec:	4659      	mov	r1, fp
 8003bee:	4606      	mov	r6, r0
 8003bf0:	4658      	mov	r0, fp
 8003bf2:	f7fd f8c7 	bl	8000d84 <__aeabi_fmul>
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f7fc ffbb 	bl	8000b74 <__addsf3>
 8003bfe:	f006 fc93 	bl	800a528 <sqrtf>
        if (block->arc_radius < chord_distance / 2.0f) {
 8003c02:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
        float chord_distance = sqrtf(dx*dx + dy*dy);
 8003c06:	4681      	mov	r9, r0
        if (block->arc_radius < chord_distance / 2.0f) {
 8003c08:	f7fd f8bc 	bl	8000d84 <__aeabi_fmul>
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	4601      	mov	r1, r0
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7fd fa55 	bl	80010c0 <__aeabi_fcmplt>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d1a8      	bne.n	8003b6c <planner_buffer_arc+0x1c>
        float h = sqrtf(block->arc_radius * block->arc_radius - 
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7fd f8b1 	bl	8000d84 <__aeabi_fmul>
                       (chord_distance / 2.0f) * (chord_distance / 2.0f));
 8003c22:	4631      	mov	r1, r6
        float h = sqrtf(block->arc_radius * block->arc_radius - 
 8003c24:	9005      	str	r0, [sp, #20]
                       (chord_distance / 2.0f) * (chord_distance / 2.0f));
 8003c26:	4630      	mov	r0, r6
 8003c28:	f7fd f8ac 	bl	8000d84 <__aeabi_fmul>
 8003c2c:	4601      	mov	r1, r0
        float h = sqrtf(block->arc_radius * block->arc_radius - 
 8003c2e:	9805      	ldr	r0, [sp, #20]
 8003c30:	f7fc ff9e 	bl	8000b70 <__aeabi_fsub>
 8003c34:	f006 fc78 	bl	800a528 <sqrtf>
        float mid_x = (block->start_pos[0] + block->target_pos[0]) / 2.0f;
 8003c38:	4639      	mov	r1, r7
        float h = sqrtf(block->arc_radius * block->arc_radius - 
 8003c3a:	4606      	mov	r6, r0
        float mid_x = (block->start_pos[0] + block->target_pos[0]) / 2.0f;
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	f7fc ff99 	bl	8000b74 <__addsf3>
 8003c42:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003c46:	f7fd f89d 	bl	8000d84 <__aeabi_fmul>
        float mid_y = (block->start_pos[1] + block->target_pos[1]) / 2.0f;
 8003c4a:	9904      	ldr	r1, [sp, #16]
        float mid_x = (block->start_pos[0] + block->target_pos[0]) / 2.0f;
 8003c4c:	4682      	mov	sl, r0
        float mid_y = (block->start_pos[1] + block->target_pos[1]) / 2.0f;
 8003c4e:	9803      	ldr	r0, [sp, #12]
 8003c50:	f7fc ff90 	bl	8000b74 <__addsf3>
 8003c54:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003c58:	f7fd f894 	bl	8000d84 <__aeabi_fmul>
        float perp_x = -dy / chord_distance;
 8003c5c:	4649      	mov	r1, r9
        float mid_y = (block->start_pos[1] + block->target_pos[1]) / 2.0f;
 8003c5e:	4607      	mov	r7, r0
        float perp_x = -dy / chord_distance;
 8003c60:	f10b 4000 	add.w	r0, fp, #2147483648	@ 0x80000000
 8003c64:	f7fd f942 	bl	8000eec <__aeabi_fdiv>
        float perp_y = dx / chord_distance;
 8003c68:	4649      	mov	r1, r9
        float perp_x = -dy / chord_distance;
 8003c6a:	4683      	mov	fp, r0
        float perp_y = dx / chord_distance;
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	f7fd f93d 	bl	8000eec <__aeabi_fdiv>
        float sign = (is_clockwise == (block->arc_radius > 0)) ? -1.0f : 1.0f;
 8003c72:	2100      	movs	r1, #0
        float perp_y = dx / chord_distance;
 8003c74:	4681      	mov	r9, r0
        float sign = (is_clockwise == (block->arc_radius > 0)) ? -1.0f : 1.0f;
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7fd fa40 	bl	80010fc <__aeabi_fcmpgt>
 8003c7c:	3800      	subs	r0, #0
 8003c7e:	bf18      	it	ne
 8003c80:	2001      	movne	r0, #1
 8003c82:	9b02      	ldr	r3, [sp, #8]
        block->arc_center[0] = mid_x + sign * h * perp_x;
 8003c84:	4631      	mov	r1, r6
        float sign = (is_clockwise == (block->arc_radius > 0)) ? -1.0f : 1.0f;
 8003c86:	4298      	cmp	r0, r3
 8003c88:	bf14      	ite	ne
 8003c8a:	f04f 507e 	movne.w	r0, #1065353216	@ 0x3f800000
 8003c8e:	485e      	ldreq	r0, [pc, #376]	@ (8003e08 <planner_buffer_arc+0x2b8>)
        block->arc_center[0] = mid_x + sign * h * perp_x;
 8003c90:	f7fd f878 	bl	8000d84 <__aeabi_fmul>
 8003c94:	2348      	movs	r3, #72	@ 0x48
 8003c96:	9a01      	ldr	r2, [sp, #4]
 8003c98:	4e5a      	ldr	r6, [pc, #360]	@ (8003e04 <planner_buffer_arc+0x2b4>)
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	fb03 6602 	mla	r6, r3, r2, r6
 8003ca0:	4680      	mov	r8, r0
 8003ca2:	f7fd f86f 	bl	8000d84 <__aeabi_fmul>
 8003ca6:	4651      	mov	r1, sl
 8003ca8:	f7fc ff64 	bl	8000b74 <__addsf3>
        block->arc_center[1] = mid_y + sign * h * perp_y;
 8003cac:	4649      	mov	r1, r9
        block->arc_center[0] = mid_x + sign * h * perp_x;
 8003cae:	61f0      	str	r0, [r6, #28]
        block->arc_center[1] = mid_y + sign * h * perp_y;
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	f7fd f867 	bl	8000d84 <__aeabi_fmul>
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f7fc ff5c 	bl	8000b74 <__addsf3>
        block->arc_radius = fabsf(block->arc_radius);
 8003cbc:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
        block->arc_center[1] = mid_y + sign * h * perp_y;
 8003cc0:	6230      	str	r0, [r6, #32]
        block->arc_radius = fabsf(block->arc_radius);
 8003cc2:	f04f 0b48 	mov.w	fp, #72	@ 0x48
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	4e4e      	ldr	r6, [pc, #312]	@ (8003e04 <planner_buffer_arc+0x2b4>)
 8003cca:	fb0b 6b03 	mla	fp, fp, r3, r6
    float dx_start = block->start_pos[0] - block->arc_center[0];
 8003cce:	f8db 901c 	ldr.w	r9, [fp, #28]
    float dx_end = block->target_pos[0] - block->arc_center[0];
 8003cd2:	f8db 0010 	ldr.w	r0, [fp, #16]
 8003cd6:	4649      	mov	r1, r9
        block->arc_radius = fabsf(block->arc_radius);
 8003cd8:	f8cb 4024 	str.w	r4, [fp, #36]	@ 0x24
    float dx_end = block->target_pos[0] - block->arc_center[0];
 8003cdc:	f7fc ff48 	bl	8000b70 <__aeabi_fsub>
    float dy_start = block->start_pos[1] - block->arc_center[1];
 8003ce0:	f8db a020 	ldr.w	sl, [fp, #32]
    float dx_end = block->target_pos[0] - block->arc_center[0];
 8003ce4:	4680      	mov	r8, r0
    float dy_end = block->target_pos[1] - block->arc_center[1];
 8003ce6:	4651      	mov	r1, sl
 8003ce8:	f8db 0014 	ldr.w	r0, [fp, #20]
 8003cec:	f7fc ff40 	bl	8000b70 <__aeabi_fsub>
    float dx_start = block->start_pos[0] - block->arc_center[0];
 8003cf0:	4649      	mov	r1, r9
    float dy_end = block->target_pos[1] - block->arc_center[1];
 8003cf2:	4607      	mov	r7, r0
    float dx_start = block->start_pos[0] - block->arc_center[0];
 8003cf4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003cf8:	f7fc ff3a 	bl	8000b70 <__aeabi_fsub>
 8003cfc:	4681      	mov	r9, r0
    float dy_start = block->start_pos[1] - block->arc_center[1];
 8003cfe:	4651      	mov	r1, sl
 8003d00:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003d04:	f7fc ff34 	bl	8000b70 <__aeabi_fsub>
    float start_angle = atan2f(dy_start, dx_start);
 8003d08:	4649      	mov	r1, r9
 8003d0a:	f006 fc0b 	bl	800a524 <atan2f>
 8003d0e:	4681      	mov	r9, r0
    float end_angle = atan2f(dy_end, dx_end);
 8003d10:	4641      	mov	r1, r8
 8003d12:	4638      	mov	r0, r7
 8003d14:	f006 fc06 	bl	800a524 <atan2f>
    float angular_travel = end_angle - start_angle;
 8003d18:	4649      	mov	r1, r9
 8003d1a:	f7fc ff29 	bl	8000b70 <__aeabi_fsub>
    if (is_clockwise) {
 8003d1e:	9b02      	ldr	r3, [sp, #8]
    float angular_travel = end_angle - start_angle;
 8003d20:	4607      	mov	r7, r0
        if (angular_travel >= 0) {
 8003d22:	2100      	movs	r1, #0
    if (is_clockwise) {
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a2 	beq.w	8003e6e <planner_buffer_arc+0x31e>
        if (angular_travel >= 0) {
 8003d2a:	f7fd f9dd 	bl	80010e8 <__aeabi_fcmpge>
 8003d2e:	b150      	cbz	r0, 8003d46 <planner_buffer_arc+0x1f6>
            angular_travel -= 2.0f * PI;
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7fc fb79 	bl	8000428 <__aeabi_f2d>
 8003d36:	a32e      	add	r3, pc, #184	@ (adr r3, 8003df0 <planner_buffer_arc+0x2a0>)
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f7fc fa14 	bl	8000168 <__aeabi_dsub>
            angular_travel += 2.0f * PI;
 8003d40:	f7fc fec2 	bl	8000ac8 <__aeabi_d2f>
 8003d44:	4607      	mov	r7, r0
    block->distance = fabsf(angular_travel) * block->arc_radius;
 8003d46:	4621      	mov	r1, r4
 8003d48:	2448      	movs	r4, #72	@ 0x48
 8003d4a:	f027 4000 	bic.w	r0, r7, #2147483648	@ 0x80000000
 8003d4e:	f7fd f819 	bl	8000d84 <__aeabi_fmul>
 8003d52:	9b01      	ldr	r3, [sp, #4]
 8003d54:	4680      	mov	r8, r0
 8003d56:	fb04 6403 	mla	r4, r4, r3, r6
    float dz = block->target_pos[2] - block->start_pos[2];
 8003d5a:	68e1      	ldr	r1, [r4, #12]
    block->distance = fabsf(angular_travel) * block->arc_radius;
 8003d5c:	62e0      	str	r0, [r4, #44]	@ 0x2c
    float dz = block->target_pos[2] - block->start_pos[2];
 8003d5e:	69a0      	ldr	r0, [r4, #24]
 8003d60:	f7fc ff06 	bl	8000b70 <__aeabi_fsub>
    if (fabsf(dz) > 0.001f) {
 8003d64:	4929      	ldr	r1, [pc, #164]	@ (8003e0c <planner_buffer_arc+0x2bc>)
    float dz = block->target_pos[2] - block->start_pos[2];
 8003d66:	4607      	mov	r7, r0
    if (fabsf(dz) > 0.001f) {
 8003d68:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003d6c:	f7fd f9c6 	bl	80010fc <__aeabi_fcmpgt>
 8003d70:	b178      	cbz	r0, 8003d92 <planner_buffer_arc+0x242>
        float linear_distance = sqrtf(block->distance * block->distance + dz * dz);
 8003d72:	4641      	mov	r1, r8
 8003d74:	4640      	mov	r0, r8
 8003d76:	f7fd f805 	bl	8000d84 <__aeabi_fmul>
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f7fd f800 	bl	8000d84 <__aeabi_fmul>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4640      	mov	r0, r8
 8003d88:	f7fc fef4 	bl	8000b74 <__addsf3>
 8003d8c:	f006 fbcc 	bl	800a528 <sqrtf>
        block->distance = linear_distance;
 8003d90:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (block->nominal_speed > maxFeedRate) {
 8003d92:	4b1f      	ldr	r3, [pc, #124]	@ (8003e10 <planner_buffer_arc+0x2c0>)
 8003d94:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003d96:	681c      	ldr	r4, [r3, #0]
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7fd f991 	bl	80010c0 <__aeabi_fcmplt>
 8003d9e:	b100      	cbz	r0, 8003da2 <planner_buffer_arc+0x252>
        block->nominal_speed = maxFeedRate;
 8003da0:	9410      	str	r4, [sp, #64]	@ 0x40
 8003da2:	2348      	movs	r3, #72	@ 0x48
 8003da4:	9a01      	ldr	r2, [sp, #4]
 8003da6:	fb03 6602 	mla	r6, r3, r2, r6
 8003daa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    planner_buffer_head = planner_next_block_index(planner_buffer_head);
 8003dac:	4a14      	ldr	r2, [pc, #80]	@ (8003e00 <planner_buffer_arc+0x2b0>)
 8003dae:	6333      	str	r3, [r6, #48]	@ 0x30
    block->entry_speed = 0.0f;
 8003db0:	2300      	movs	r3, #0
 8003db2:	6373      	str	r3, [r6, #52]	@ 0x34
    block->exit_speed = 0.0f;
 8003db4:	63b3      	str	r3, [r6, #56]	@ 0x38
    block->max_entry_speed = block->nominal_speed;
 8003db6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003db8:	63f3      	str	r3, [r6, #60]	@ 0x3c
    block->acceleration = ACCELERATION * 0.8f; // 80% de aceleración para arcos
 8003dba:	4b16      	ldr	r3, [pc, #88]	@ (8003e14 <planner_buffer_arc+0x2c4>)
 8003dbc:	6433      	str	r3, [r6, #64]	@ 0x40
    block->recalculate_flag = true;
 8003dbe:	4b16      	ldr	r3, [pc, #88]	@ (8003e18 <planner_buffer_arc+0x2c8>)
 8003dc0:	6473      	str	r3, [r6, #68]	@ 0x44
    memcpy(planner_state.position, target, sizeof(float) * 3);
 8003dc2:	6828      	ldr	r0, [r5, #0]
 8003dc4:	6869      	ldr	r1, [r5, #4]
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <planner_buffer_arc+0x2ac>)
 8003dc8:	c303      	stmia	r3!, {r0, r1}
 8003dca:	68a8      	ldr	r0, [r5, #8]
 8003dcc:	6018      	str	r0, [r3, #0]
    planner_buffer_head = planner_next_block_index(planner_buffer_head);
 8003dce:	7813      	ldrb	r3, [r2, #0]
    return (block_index + 1) % PLANNER_BUFFER_SIZE;
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f003 0307 	and.w	r3, r3, #7
    planner_buffer_head = planner_next_block_index(planner_buffer_head);
 8003dd6:	7013      	strb	r3, [r2, #0]
    planner_buffer_count++;
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <planner_buffer_arc+0x2a8>)
 8003dda:	7813      	ldrb	r3, [r2, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	7013      	strb	r3, [r2, #0]
    planner_recalculate();
 8003de2:	f7ff fdff 	bl	80039e4 <planner_recalculate>
    return true;
 8003de6:	2001      	movs	r0, #1
 8003de8:	e6c1      	b.n	8003b6e <planner_buffer_arc+0x1e>
 8003dea:	bf00      	nop
 8003dec:	f3af 8000 	nop.w
 8003df0:	54442d18 	.word	0x54442d18
 8003df4:	401921fb 	.word	0x401921fb
 8003df8:	200024b4 	.word	0x200024b4
 8003dfc:	20002488 	.word	0x20002488
 8003e00:	200024b6 	.word	0x200024b6
 8003e04:	200024b8 	.word	0x200024b8
 8003e08:	bf800000 	.word	0xbf800000
 8003e0c:	3a83126f 	.word	0x3a83126f
 8003e10:	20000004 	.word	0x20000004
 8003e14:	44480000 	.word	0x44480000
 8003e18:	00010101 	.word	0x00010101
        block->arc_center[0] = block->start_pos[0] + offset[0];
 8003e1c:	6821      	ldr	r1, [r4, #0]
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f7fc fea8 	bl	8000b74 <__addsf3>
        block->arc_center[1] = block->start_pos[1] + offset[1];
 8003e24:	f8d6 9008 	ldr.w	r9, [r6, #8]
        block->arc_center[0] = block->start_pos[0] + offset[0];
 8003e28:	61f0      	str	r0, [r6, #28]
        block->arc_center[1] = block->start_pos[1] + offset[1];
 8003e2a:	6861      	ldr	r1, [r4, #4]
        block->arc_center[0] = block->start_pos[0] + offset[0];
 8003e2c:	4680      	mov	r8, r0
        block->arc_center[1] = block->start_pos[1] + offset[1];
 8003e2e:	4648      	mov	r0, r9
 8003e30:	f7fc fea0 	bl	8000b74 <__addsf3>
        float dx_start = block->start_pos[0] - block->arc_center[0];
 8003e34:	4641      	mov	r1, r8
        block->arc_center[1] = block->start_pos[1] + offset[1];
 8003e36:	4604      	mov	r4, r0
 8003e38:	6230      	str	r0, [r6, #32]
        float dx_start = block->start_pos[0] - block->arc_center[0];
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f7fc fe98 	bl	8000b70 <__aeabi_fsub>
        float dy_start = block->start_pos[1] - block->arc_center[1];
 8003e40:	4621      	mov	r1, r4
        float dx_start = block->start_pos[0] - block->arc_center[0];
 8003e42:	4607      	mov	r7, r0
        float dy_start = block->start_pos[1] - block->arc_center[1];
 8003e44:	4648      	mov	r0, r9
 8003e46:	f7fc fe93 	bl	8000b70 <__aeabi_fsub>
        block->arc_radius = sqrtf(dx_start*dx_start + dy_start*dy_start);
 8003e4a:	4639      	mov	r1, r7
        float dy_start = block->start_pos[1] - block->arc_center[1];
 8003e4c:	4606      	mov	r6, r0
        block->arc_radius = sqrtf(dx_start*dx_start + dy_start*dy_start);
 8003e4e:	4638      	mov	r0, r7
 8003e50:	f7fc ff98 	bl	8000d84 <__aeabi_fmul>
 8003e54:	4631      	mov	r1, r6
 8003e56:	4604      	mov	r4, r0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fc ff93 	bl	8000d84 <__aeabi_fmul>
 8003e5e:	4601      	mov	r1, r0
 8003e60:	4620      	mov	r0, r4
 8003e62:	f7fc fe87 	bl	8000b74 <__addsf3>
 8003e66:	f006 fb5f 	bl	800a528 <sqrtf>
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	e729      	b.n	8003cc2 <planner_buffer_arc+0x172>
        if (angular_travel <= 0) {
 8003e6e:	f7fd f931 	bl	80010d4 <__aeabi_fcmple>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	f43f af67 	beq.w	8003d46 <planner_buffer_arc+0x1f6>
            angular_travel += 2.0f * PI;
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f7fc fad5 	bl	8000428 <__aeabi_f2d>
 8003e7e:	a304      	add	r3, pc, #16	@ (adr r3, 8003e90 <planner_buffer_arc+0x340>)
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f7fc f972 	bl	800016c <__adddf3>
 8003e88:	e75a      	b.n	8003d40 <planner_buffer_arc+0x1f0>
 8003e8a:	bf00      	nop
 8003e8c:	f3af 8000 	nop.w
 8003e90:	54442d18 	.word	0x54442d18
 8003e94:	401921fb 	.word	0x401921fb

08003e98 <planner_calculate_distance>:
float planner_calculate_distance(float from[3], float to[3]) {
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4605      	mov	r5, r0
    float dx = to[0] - from[0];
 8003e9e:	6801      	ldr	r1, [r0, #0]
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f7fc fe65 	bl	8000b70 <__aeabi_fsub>
    float dy = to[1] - from[1];
 8003ea6:	6869      	ldr	r1, [r5, #4]
    float dx = to[0] - from[0];
 8003ea8:	4607      	mov	r7, r0
    float dy = to[1] - from[1];
 8003eaa:	6860      	ldr	r0, [r4, #4]
 8003eac:	f7fc fe60 	bl	8000b70 <__aeabi_fsub>
    float dz = to[2] - from[2];
 8003eb0:	68a9      	ldr	r1, [r5, #8]
    float dy = to[1] - from[1];
 8003eb2:	4606      	mov	r6, r0
    float dz = to[2] - from[2];
 8003eb4:	68a0      	ldr	r0, [r4, #8]
 8003eb6:	f7fc fe5b 	bl	8000b70 <__aeabi_fsub>
    return sqrtf(dx*dx + dy*dy + dz*dz);
 8003eba:	4639      	mov	r1, r7
    float dz = to[2] - from[2];
 8003ebc:	4605      	mov	r5, r0
    return sqrtf(dx*dx + dy*dy + dz*dz);
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f7fc ff60 	bl	8000d84 <__aeabi_fmul>
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	4630      	mov	r0, r6
 8003eca:	f7fc ff5b 	bl	8000d84 <__aeabi_fmul>
 8003ece:	4601      	mov	r1, r0
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7fc fe4f 	bl	8000b74 <__addsf3>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4604      	mov	r4, r0
 8003eda:	4628      	mov	r0, r5
 8003edc:	f7fc ff52 	bl	8000d84 <__aeabi_fmul>
 8003ee0:	4601      	mov	r1, r0
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f7fc fe46 	bl	8000b74 <__addsf3>
}
 8003ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return sqrtf(dx*dx + dy*dy + dz*dz);
 8003eec:	f006 bb1c 	b.w	800a528 <sqrtf>

08003ef0 <planner_buffer_line>:
bool planner_buffer_line(float target[3], float feed_rate, bool is_rapid) {
 8003ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003ef4:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8003fbc <planner_buffer_line+0xcc>
bool planner_buffer_line(float target[3], float feed_rate, bool is_rapid) {
 8003ef8:	4617      	mov	r7, r2
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003efa:	f898 3000 	ldrb.w	r3, [r8]
bool planner_buffer_line(float target[3], float feed_rate, bool is_rapid) {
 8003efe:	4605      	mov	r5, r0
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003f00:	2b07      	cmp	r3, #7
bool planner_buffer_line(float target[3], float feed_rate, bool is_rapid) {
 8003f02:	460e      	mov	r6, r1
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <planner_buffer_line+0xd0>)
    if (planner_buffer_count >= PLANNER_BUFFER_SIZE) {
 8003f06:	d905      	bls.n	8003f14 <planner_buffer_line+0x24>
        planner_state.buffer_full = true;
 8003f08:	2301      	movs	r3, #1
        return false;
 8003f0a:	2000      	movs	r0, #0
        planner_state.buffer_full = true;
 8003f0c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
}
 8003f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    block->move_type = is_rapid ? MOVE_TYPE_RAPID : MOVE_TYPE_LINEAR;
 8003f14:	2148      	movs	r1, #72	@ 0x48
    planner_block_t *block = &planner_buffer[planner_buffer_head];
 8003f16:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8003fc4 <planner_buffer_line+0xd4>
    block->move_type = is_rapid ? MOVE_TYPE_RAPID : MOVE_TYPE_LINEAR;
 8003f1a:	4c2b      	ldr	r4, [pc, #172]	@ (8003fc8 <planner_buffer_line+0xd8>)
    planner_block_t *block = &planner_buffer[planner_buffer_head];
 8003f1c:	f899 3000 	ldrb.w	r3, [r9]
 8003f20:	fa5f fa83 	uxtb.w	sl, r3
    block->move_type = is_rapid ? MOVE_TYPE_RAPID : MOVE_TYPE_LINEAR;
 8003f24:	434b      	muls	r3, r1
 8003f26:	f087 0101 	eor.w	r1, r7, #1
 8003f2a:	54e1      	strb	r1, [r4, r3]
 8003f2c:	eb04 0b03 	add.w	fp, r4, r3
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003f30:	f103 0c04 	add.w	ip, r3, #4
    memcpy(block->target_pos, target, sizeof(float) * 3);
 8003f34:	3310      	adds	r3, #16
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003f36:	44a4      	add	ip, r4
    memcpy(block->target_pos, target, sizeof(float) * 3);
 8003f38:	4423      	add	r3, r4
    memcpy(block->start_pos, planner_state.position, sizeof(float) * 3);
 8003f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    memcpy(block->target_pos, target, sizeof(float) * 3);
 8003f40:	461a      	mov	r2, r3
 8003f42:	6828      	ldr	r0, [r5, #0]
 8003f44:	6869      	ldr	r1, [r5, #4]
 8003f46:	c203      	stmia	r2!, {r0, r1}
 8003f48:	68a8      	ldr	r0, [r5, #8]
    block->distance = planner_calculate_distance(block->start_pos, block->target_pos);
 8003f4a:	4619      	mov	r1, r3
    memcpy(block->target_pos, target, sizeof(float) * 3);
 8003f4c:	6010      	str	r0, [r2, #0]
    block->distance = planner_calculate_distance(block->start_pos, block->target_pos);
 8003f4e:	4660      	mov	r0, ip
 8003f50:	f7ff ffa2 	bl	8003e98 <planner_calculate_distance>
    if (block->distance < 0.001f) {
 8003f54:	491d      	ldr	r1, [pc, #116]	@ (8003fcc <planner_buffer_line+0xdc>)
    block->distance = planner_calculate_distance(block->start_pos, block->target_pos);
 8003f56:	f8cb 002c 	str.w	r0, [fp, #44]	@ 0x2c
    if (block->distance < 0.001f) {
 8003f5a:	f7fd f8b1 	bl	80010c0 <__aeabi_fcmplt>
 8003f5e:	bb58      	cbnz	r0, 8003fb8 <planner_buffer_line+0xc8>
    block->nominal_speed = is_rapid ? rapidRate : feed_rate;
 8003f60:	b10f      	cbz	r7, 8003f66 <planner_buffer_line+0x76>
 8003f62:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <planner_buffer_line+0xe0>)
 8003f64:	681e      	ldr	r6, [r3, #0]
    if (block->nominal_speed > maxFeedRate) {
 8003f66:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd4 <planner_buffer_line+0xe4>)
 8003f68:	4631      	mov	r1, r6
 8003f6a:	681f      	ldr	r7, [r3, #0]
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7fd f8a7 	bl	80010c0 <__aeabi_fcmplt>
 8003f72:	b100      	cbz	r0, 8003f76 <planner_buffer_line+0x86>
        block->nominal_speed = maxFeedRate;
 8003f74:	463e      	mov	r6, r7
 8003f76:	2348      	movs	r3, #72	@ 0x48
    block->entry_speed = 0.0f;
 8003f78:	2200      	movs	r2, #0
 8003f7a:	fb03 430a 	mla	r3, r3, sl, r4
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34
    block->exit_speed = 0.0f;
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38
    block->acceleration = ACCELERATION;
 8003f82:	4a15      	ldr	r2, [pc, #84]	@ (8003fd8 <planner_buffer_line+0xe8>)
 8003f84:	631e      	str	r6, [r3, #48]	@ 0x30
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40
    block->recalculate_flag = true;
 8003f88:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <planner_buffer_line+0xec>)
    block->max_entry_speed = block->nominal_speed;
 8003f8a:	63de      	str	r6, [r3, #60]	@ 0x3c
    block->recalculate_flag = true;
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    memcpy(planner_state.position, target, sizeof(float) * 3);
 8003f8e:	6828      	ldr	r0, [r5, #0]
 8003f90:	6869      	ldr	r1, [r5, #4]
 8003f92:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <planner_buffer_line+0xd0>)
 8003f94:	c303      	stmia	r3!, {r0, r1}
 8003f96:	68a8      	ldr	r0, [r5, #8]
 8003f98:	6018      	str	r0, [r3, #0]
    planner_buffer_head = planner_next_block_index(planner_buffer_head);
 8003f9a:	f899 3000 	ldrb.w	r3, [r9]
    return (block_index + 1) % PLANNER_BUFFER_SIZE;
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f003 0307 	and.w	r3, r3, #7
    planner_buffer_head = planner_next_block_index(planner_buffer_head);
 8003fa4:	f889 3000 	strb.w	r3, [r9]
    planner_buffer_count++;
 8003fa8:	f898 3000 	ldrb.w	r3, [r8]
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f888 3000 	strb.w	r3, [r8]
    planner_recalculate();
 8003fb4:	f7ff fd16 	bl	80039e4 <planner_recalculate>
        return true; // No error, pero tampoco agregar
 8003fb8:	2001      	movs	r0, #1
 8003fba:	e7a9      	b.n	8003f10 <planner_buffer_line+0x20>
 8003fbc:	200024b4 	.word	0x200024b4
 8003fc0:	20002488 	.word	0x20002488
 8003fc4:	200024b6 	.word	0x200024b6
 8003fc8:	200024b8 	.word	0x200024b8
 8003fcc:	3a83126f 	.word	0x3a83126f
 8003fd0:	20000008 	.word	0x20000008
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	447a0000 	.word	0x447a0000
 8003fdc:	00010101 	.word	0x00010101

08003fe0 <planner_get_buffer_count>:
bool planner_buffer_has_space(void) {
    return planner_buffer_count < PLANNER_BUFFER_SIZE;
}

uint8_t planner_get_buffer_count(void) {
    return planner_buffer_count;
 8003fe0:	4b01      	ldr	r3, [pc, #4]	@ (8003fe8 <planner_get_buffer_count+0x8>)
 8003fe2:	7818      	ldrb	r0, [r3, #0]
}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	200024b4 	.word	0x200024b4

08003fec <planner_synchronize>:

void planner_synchronize(void) {
 8003fec:	b510      	push	{r4, lr}
    while (planner_buffer_count > 0) {
 8003fee:	4c05      	ldr	r4, [pc, #20]	@ (8004004 <planner_synchronize+0x18>)
 8003ff0:	7823      	ldrb	r3, [r4, #0]
 8003ff2:	b903      	cbnz	r3, 8003ff6 <planner_synchronize+0xa>
        planner_process_next_block();
        HAL_Delay(1); // Pequeña pausa para no saturar el procesador
    }
}
 8003ff4:	bd10      	pop	{r4, pc}
        planner_process_next_block();
 8003ff6:	f7ff fbf3 	bl	80037e0 <planner_process_next_block>
        HAL_Delay(1); // Pequeña pausa para no saturar el procesador
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f000 f998 	bl	8004330 <HAL_Delay>
 8004000:	e7f6      	b.n	8003ff0 <planner_synchronize+0x4>
 8004002:	bf00      	nop
 8004004:	200024b4 	.word	0x200024b4

08004008 <planner_get_current_position>:

void planner_get_current_position(float position[3]) {
 8004008:	4603      	mov	r3, r0
    memcpy(position, planner_state.position, sizeof(float) * 3);
 800400a:	4a03      	ldr	r2, [pc, #12]	@ (8004018 <planner_get_current_position+0x10>)
 800400c:	ca03      	ldmia	r2!, {r0, r1}
 800400e:	6018      	str	r0, [r3, #0]
 8004010:	6059      	str	r1, [r3, #4]
 8004012:	6810      	ldr	r0, [r2, #0]
 8004014:	6098      	str	r0, [r3, #8]
}
 8004016:	4770      	bx	lr
 8004018:	20002488 	.word	0x20002488

0800401c <planner_set_current_position>:

void planner_set_current_position(float position[3]) {
 800401c:	4602      	mov	r2, r0
    memcpy(planner_state.position, position, sizeof(float) * 3);
 800401e:	4b03      	ldr	r3, [pc, #12]	@ (800402c <planner_set_current_position+0x10>)
 8004020:	6800      	ldr	r0, [r0, #0]
 8004022:	6851      	ldr	r1, [r2, #4]
 8004024:	c303      	stmia	r3!, {r0, r1}
 8004026:	6890      	ldr	r0, [r2, #8]
 8004028:	6018      	str	r0, [r3, #0]
}
 800402a:	4770      	bx	lr
 800402c:	20002488 	.word	0x20002488

08004030 <planner_init>:
void planner_init(void) {
 8004030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    memset(planner_buffer, 0, sizeof(planner_buffer));
 8004032:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8004036:	2100      	movs	r1, #0
 8004038:	480c      	ldr	r0, [pc, #48]	@ (800406c <planner_init+0x3c>)
 800403a:	f004 f92a 	bl	8008292 <memset>
    planner_buffer_head = 0;
 800403e:	2100      	movs	r1, #0
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <planner_init+0x40>)
    memset(&planner_state, 0, sizeof(planner_state));
 8004042:	222c      	movs	r2, #44	@ 0x2c
    planner_buffer_head = 0;
 8004044:	7019      	strb	r1, [r3, #0]
    planner_buffer_tail = 0;
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <planner_init+0x44>)
    memset(&planner_state, 0, sizeof(planner_state));
 8004048:	480b      	ldr	r0, [pc, #44]	@ (8004078 <planner_init+0x48>)
    planner_buffer_tail = 0;
 800404a:	7019      	strb	r1, [r3, #0]
    planner_buffer_count = 0;
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <planner_init+0x4c>)
 800404e:	7019      	strb	r1, [r3, #0]
    memset(&planner_state, 0, sizeof(planner_state));
 8004050:	f004 f91f 	bl	8008292 <memset>
    getCurrentPositionMM(&current_pos[0], &current_pos[1], &current_pos[2]);
 8004054:	aa03      	add	r2, sp, #12
 8004056:	a902      	add	r1, sp, #8
 8004058:	a801      	add	r0, sp, #4
 800405a:	f7ff fb97 	bl	800378c <getCurrentPositionMM>
    planner_set_current_position(current_pos);
 800405e:	a801      	add	r0, sp, #4
 8004060:	f7ff ffdc 	bl	800401c <planner_set_current_position>
}
 8004064:	b005      	add	sp, #20
 8004066:	f85d fb04 	ldr.w	pc, [sp], #4
 800406a:	bf00      	nop
 800406c:	200024b8 	.word	0x200024b8
 8004070:	200024b6 	.word	0x200024b6
 8004074:	200024b5 	.word	0x200024b5
 8004078:	20002488 	.word	0x20002488
 800407c:	200024b4 	.word	0x200024b4

08004080 <planner_reset>:
    planner_init();
 8004080:	f7ff bfd6 	b.w	8004030 <planner_init>

08004084 <planner_get_statistics>:

void planner_get_statistics(uint8_t *buffer_usage, uint32_t *blocks_processed, bool *is_running) {
 8004084:	b510      	push	{r4, lr}
    *buffer_usage = (planner_buffer_count * 100) / PLANNER_BUFFER_SIZE;
 8004086:	2464      	movs	r4, #100	@ 0x64
 8004088:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <planner_get_statistics+0x1c>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	4363      	muls	r3, r4
 800408e:	10db      	asrs	r3, r3, #3
 8004090:	7003      	strb	r3, [r0, #0]
    *blocks_processed = planner_state.total_blocks_processed;
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <planner_get_statistics+0x20>)
 8004094:	6a98      	ldr	r0, [r3, #40]	@ 0x28
    *is_running = planner_state.is_running;
 8004096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    *blocks_processed = planner_state.total_blocks_processed;
 800409a:	6008      	str	r0, [r1, #0]
    *is_running = planner_state.is_running;
 800409c:	7013      	strb	r3, [r2, #0]
}
 800409e:	bd10      	pop	{r4, pc}
 80040a0:	200024b4 	.word	0x200024b4
 80040a4:	20002488 	.word	0x20002488

080040a8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040a8:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <HAL_MspInit+0x3c>)
{
 80040aa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	619a      	str	r2, [r3, #24]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	f002 0201 	and.w	r2, r2, #1
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80040c4:	61da      	str	r2, [r3, #28]
 80040c6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040c8:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80040d2:	6853      	ldr	r3, [r2, #4]
 80040d4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80040d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040de:	b002      	add	sp, #8
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40010000 	.word	0x40010000

080040ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040ec:	b510      	push	{r4, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f2:	2210      	movs	r2, #16
 80040f4:	2100      	movs	r1, #0
 80040f6:	a802      	add	r0, sp, #8
 80040f8:	f004 f8cb 	bl	8008292 <memset>
  if(huart->Instance==USART2)
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_UART_MspInit+0x6c>)
 8004100:	429a      	cmp	r2, r3
 8004102:	d126      	bne.n	8004152 <HAL_UART_MspInit+0x66>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004104:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8004108:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410a:	4814      	ldr	r0, [pc, #80]	@ (800415c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800410c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004110:	61da      	str	r2, [r3, #28]
 8004112:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004116:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800411a:	9200      	str	r2, [sp, #0]
 800411c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	f042 0204 	orr.w	r2, r2, #4
 8004124:	619a      	str	r2, [r3, #24]
 8004126:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004128:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004132:	2302      	movs	r3, #2
 8004134:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004138:	2303      	movs	r3, #3
 800413a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413c:	f000 f96e 	bl	800441c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004140:	2108      	movs	r1, #8
 8004142:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004144:	4805      	ldr	r0, [pc, #20]	@ (800415c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004146:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	f000 f965 	bl	800441c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004152:	b006      	add	sp, #24
 8004154:	bd10      	pop	{r4, pc}
 8004156:	bf00      	nop
 8004158:	40004400 	.word	0x40004400
 800415c:	40010800 	.word	0x40010800

08004160 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004160:	e7fe      	b.n	8004160 <NMI_Handler>

08004162 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004162:	e7fe      	b.n	8004162 <HardFault_Handler>

08004164 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler>

08004166 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <BusFault_Handler>

08004168 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <UsageFault_Handler>

0800416a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416a:	4770      	bx	lr

0800416c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800416c:	4770      	bx	lr

0800416e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800416e:	4770      	bx	lr

08004170 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004170:	f000 b8cc 	b.w	800430c <HAL_IncTick>

08004174 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004174:	4801      	ldr	r0, [pc, #4]	@ (800417c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8004176:	f000 bad5 	b.w	8004724 <HAL_PCD_IRQHandler>
 800417a:	bf00      	nop
 800417c:	20004564 	.word	0x20004564

08004180 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004180:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004182:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004186:	f000 fa31 	bl	80045ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800418a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800418e:	f000 fa2d 	bl	80045ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004196:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800419a:	f000 ba27 	b.w	80045ec <HAL_GPIO_EXTI_IRQHandler>

0800419e <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800419e:	2001      	movs	r0, #1
 80041a0:	4770      	bx	lr

080041a2 <_kill>:

int _kill(int pid, int sig)
{
 80041a2:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041a4:	f004 f8e8 	bl	8008378 <__errno>
 80041a8:	2316      	movs	r3, #22
 80041aa:	6003      	str	r3, [r0, #0]
  return -1;
}
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	bd08      	pop	{r3, pc}

080041b2 <_exit>:

void _exit (int status)
{
 80041b2:	b508      	push	{r3, lr}
  errno = EINVAL;
 80041b4:	f004 f8e0 	bl	8008378 <__errno>
 80041b8:	2316      	movs	r3, #22
 80041ba:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80041bc:	e7fe      	b.n	80041bc <_exit+0xa>

080041be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041be:	b570      	push	{r4, r5, r6, lr}
 80041c0:	460d      	mov	r5, r1
 80041c2:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c4:	460e      	mov	r6, r1
 80041c6:	1b73      	subs	r3, r6, r5
 80041c8:	429c      	cmp	r4, r3
 80041ca:	dc01      	bgt.n	80041d0 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80041cc:	4620      	mov	r0, r4
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80041d0:	f3af 8000 	nop.w
 80041d4:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	e7f5      	b.n	80041c6 <_read+0x8>

080041da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041da:	b570      	push	{r4, r5, r6, lr}
 80041dc:	460d      	mov	r5, r1
 80041de:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e0:	460e      	mov	r6, r1
 80041e2:	1b73      	subs	r3, r6, r5
 80041e4:	429c      	cmp	r4, r3
 80041e6:	dc01      	bgt.n	80041ec <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80041ec:	f816 0b01 	ldrb.w	r0, [r6], #1
 80041f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f4:	e7f5      	b.n	80041e2 <_write+0x8>

080041f6 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	4770      	bx	lr

080041fc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80041fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8004200:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8004202:	604b      	str	r3, [r1, #4]
}
 8004204:	4770      	bx	lr

08004206 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8004206:	2001      	movs	r0, #1
 8004208:	4770      	bx	lr

0800420a <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800420a:	2000      	movs	r0, #0
 800420c:	4770      	bx	lr
	...

08004210 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004210:	4a0b      	ldr	r2, [pc, #44]	@ (8004240 <_sbrk+0x30>)
{
 8004212:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8004214:	6811      	ldr	r1, [r2, #0]
{
 8004216:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004218:	b909      	cbnz	r1, 800421e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800421a:	490a      	ldr	r1, [pc, #40]	@ (8004244 <_sbrk+0x34>)
 800421c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800421e:	6810      	ldr	r0, [r2, #0]
 8004220:	4909      	ldr	r1, [pc, #36]	@ (8004248 <_sbrk+0x38>)
 8004222:	4c0a      	ldr	r4, [pc, #40]	@ (800424c <_sbrk+0x3c>)
 8004224:	4403      	add	r3, r0
 8004226:	1b09      	subs	r1, r1, r4
 8004228:	428b      	cmp	r3, r1
 800422a:	d906      	bls.n	800423a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800422c:	f004 f8a4 	bl	8008378 <__errno>
 8004230:	230c      	movs	r3, #12
 8004232:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004234:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004238:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800423a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800423c:	e7fc      	b.n	8004238 <_sbrk+0x28>
 800423e:	bf00      	nop
 8004240:	200026f8 	.word	0x200026f8
 8004244:	20004988 	.word	0x20004988
 8004248:	20005000 	.word	0x20005000
 800424c:	00000400 	.word	0x00000400

08004250 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004250:	4770      	bx	lr
	...

08004254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004254:	f7ff fffc 	bl	8004250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004258:	480b      	ldr	r0, [pc, #44]	@ (8004288 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800425a:	490c      	ldr	r1, [pc, #48]	@ (800428c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800425c:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <LoopFillZerobss+0x16>)
  movs r3, #0
 800425e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004260:	e002      	b.n	8004268 <LoopCopyDataInit>

08004262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004266:	3304      	adds	r3, #4

08004268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800426a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800426c:	d3f9      	bcc.n	8004262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800426e:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004270:	4c09      	ldr	r4, [pc, #36]	@ (8004298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004274:	e001      	b.n	800427a <LoopFillZerobss>

08004276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004278:	3204      	adds	r2, #4

0800427a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800427a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800427c:	d3fb      	bcc.n	8004276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800427e:	f004 f881 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004282:	f7fe fdbf 	bl	8002e04 <main>
  bx lr
 8004286:	4770      	bx	lr
  ldr r0, =_sdata
 8004288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800428c:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8004290:	0800d808 	.word	0x0800d808
  ldr r2, =_sbss
 8004294:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8004298:	20004988 	.word	0x20004988

0800429c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800429c:	e7fe      	b.n	800429c <ADC1_2_IRQHandler>
	...

080042a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_InitTick+0x3c>)
{
 80042a4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b0:	4a0b      	ldr	r2, [pc, #44]	@ (80042e0 <HAL_InitTick+0x40>)
 80042b2:	6810      	ldr	r0, [r2, #0]
 80042b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80042b8:	f000 f89c 	bl	80043f4 <HAL_SYSTICK_Config>
 80042bc:	4604      	mov	r4, r0
 80042be:	b958      	cbnz	r0, 80042d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042c0:	2d0f      	cmp	r5, #15
 80042c2:	d809      	bhi.n	80042d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042c4:	4602      	mov	r2, r0
 80042c6:	4629      	mov	r1, r5
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f000 f854 	bl	8004378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042d0:	4620      	mov	r0, r4
 80042d2:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <HAL_InitTick+0x44>)
 80042d4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80042d8:	2001      	movs	r0, #1
 80042da:	e7fc      	b.n	80042d6 <HAL_InitTick+0x36>
 80042dc:	20000014 	.word	0x20000014
 80042e0:	20000010 	.word	0x20000010
 80042e4:	20000018 	.word	0x20000018

080042e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e8:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <HAL_Init+0x20>)
{
 80042ea:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ec:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ee:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f0:	f043 0310 	orr.w	r3, r3, #16
 80042f4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f6:	f000 f82d 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fa:	200f      	movs	r0, #15
 80042fc:	f7ff ffd0 	bl	80042a0 <HAL_InitTick>
  HAL_MspInit();
 8004300:	f7ff fed2 	bl	80040a8 <HAL_MspInit>
}
 8004304:	2000      	movs	r0, #0
 8004306:	bd08      	pop	{r3, pc}
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800430c:	4a03      	ldr	r2, [pc, #12]	@ (800431c <HAL_IncTick+0x10>)
 800430e:	4b04      	ldr	r3, [pc, #16]	@ (8004320 <HAL_IncTick+0x14>)
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	440b      	add	r3, r1
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	200026fc 	.word	0x200026fc
 8004320:	20000014 	.word	0x20000014

08004324 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004324:	4b01      	ldr	r3, [pc, #4]	@ (800432c <HAL_GetTick+0x8>)
 8004326:	6818      	ldr	r0, [r3, #0]
}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	200026fc 	.word	0x200026fc

08004330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004334:	f7ff fff6 	bl	8004324 <HAL_GetTick>
 8004338:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800433c:	bf1e      	ittt	ne
 800433e:	4b04      	ldrne	r3, [pc, #16]	@ (8004350 <HAL_Delay+0x20>)
 8004340:	781b      	ldrbne	r3, [r3, #0]
 8004342:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004344:	f7ff ffee 	bl	8004324 <HAL_GetTick>
 8004348:	1b43      	subs	r3, r0, r5
 800434a:	42a3      	cmp	r3, r4
 800434c:	d3fa      	bcc.n	8004344 <HAL_Delay+0x14>
  {
  }
}
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	20000014 	.word	0x20000014

08004354 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004354:	4907      	ldr	r1, [pc, #28]	@ (8004374 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004356:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004358:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800435a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800435e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004362:	0412      	lsls	r2, r2, #16
 8004364:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800436c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004370:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004372:	4770      	bx	lr
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437a:	b530      	push	{r4, r5, lr}
 800437c:	68dc      	ldr	r4, [r3, #12]
 800437e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004382:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004386:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004388:	2b04      	cmp	r3, #4
 800438a:	bf28      	it	cs
 800438c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004394:	bf94      	ite	ls
 8004396:	2400      	movls	r4, #0
 8004398:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439a:	fa05 f303 	lsl.w	r3, r5, r3
 800439e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a2:	40a5      	lsls	r5, r4
 80043a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80043aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	bfac      	ite	ge
 80043b2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	4a07      	ldrlt	r2, [pc, #28]	@ (80043d4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	bfab      	itete	ge
 80043c0:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	e000ed00 	.word	0xe000ed00
 80043d4:	e000ed14 	.word	0xe000ed14

080043d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80043d8:	2800      	cmp	r0, #0
 80043da:	db07      	blt.n	80043ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043dc:	2301      	movs	r3, #1
 80043de:	0941      	lsrs	r1, r0, #5
 80043e0:	4a03      	ldr	r2, [pc, #12]	@ (80043f0 <HAL_NVIC_EnableIRQ+0x18>)
 80043e2:	f000 001f 	and.w	r0, r0, #31
 80043e6:	4083      	lsls	r3, r0
 80043e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000e100 	.word	0xe000e100

080043f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043f4:	3801      	subs	r0, #1
 80043f6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80043fa:	d20b      	bcs.n	8004414 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	21f0      	movs	r1, #240	@ 0xf0
 8004402:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004404:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004406:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800440a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800440e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004410:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004412:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004414:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004420:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004422:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8004426:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004428:	f8df c184 	ldr.w	ip, [pc, #388]	@ 80045b0 <HAL_GPIO_Init+0x194>
 800442c:	4b61      	ldr	r3, [pc, #388]	@ (80045b4 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800442e:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004432:	680a      	ldr	r2, [r1, #0]
 8004434:	fa32 f506 	lsrs.w	r5, r2, r6
 8004438:	d102      	bne.n	8004440 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 800443a:	b003      	add	sp, #12
 800443c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004440:	2501      	movs	r5, #1
 8004442:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004446:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 800444a:	ea37 0202 	bics.w	r2, r7, r2
 800444e:	d176      	bne.n	800453e <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8004450:	684a      	ldr	r2, [r1, #4]
 8004452:	2a03      	cmp	r2, #3
 8004454:	d807      	bhi.n	8004466 <HAL_GPIO_Init+0x4a>
 8004456:	3a01      	subs	r2, #1
 8004458:	2a02      	cmp	r2, #2
 800445a:	f200 8083 	bhi.w	8004564 <HAL_GPIO_Init+0x148>
 800445e:	e8df f002 	tbb	[pc, r2]
 8004462:	9691      	.short	0x9691
 8004464:	9c          	.byte	0x9c
 8004465:	00          	.byte	0x00
 8004466:	2a12      	cmp	r2, #18
 8004468:	f000 8094 	beq.w	8004594 <HAL_GPIO_Init+0x178>
 800446c:	d869      	bhi.n	8004542 <HAL_GPIO_Init+0x126>
 800446e:	2a11      	cmp	r2, #17
 8004470:	f000 808a 	beq.w	8004588 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004474:	2dff      	cmp	r5, #255	@ 0xff
 8004476:	bf94      	ite	ls
 8004478:	4681      	movls	r9, r0
 800447a:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800447c:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004480:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004484:	bf88      	it	hi
 8004486:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004488:	fa0e fa02 	lsl.w	sl, lr, r2
 800448c:	ea27 070a 	bic.w	r7, r7, sl
 8004490:	fa04 f202 	lsl.w	r2, r4, r2
 8004494:	4317      	orrs	r7, r2
 8004496:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800449a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800449e:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80044a2:	d04c      	beq.n	800453e <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044a4:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80044a8:	f026 0703 	bic.w	r7, r6, #3
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	f8cc 2018 	str.w	r2, [ip, #24]
 80044b4:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80044b8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80044bc:	f002 0201 	and.w	r2, r2, #1
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044c6:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044ca:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80044d0:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044d2:	fa0e fb0a 	lsl.w	fp, lr, sl
 80044d6:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044da:	4a37      	ldr	r2, [pc, #220]	@ (80045b8 <HAL_GPIO_Init+0x19c>)
 80044dc:	4290      	cmp	r0, r2
 80044de:	d060      	beq.n	80045a2 <HAL_GPIO_Init+0x186>
 80044e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044e4:	4290      	cmp	r0, r2
 80044e6:	d05e      	beq.n	80045a6 <HAL_GPIO_Init+0x18a>
 80044e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044ec:	4290      	cmp	r0, r2
 80044ee:	d05c      	beq.n	80045aa <HAL_GPIO_Init+0x18e>
 80044f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044f4:	4290      	cmp	r0, r2
 80044f6:	bf14      	ite	ne
 80044f8:	2204      	movne	r2, #4
 80044fa:	2203      	moveq	r2, #3
 80044fc:	fa02 f20a 	lsl.w	r2, r2, sl
 8004500:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8004504:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004506:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004508:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800450c:	bf14      	ite	ne
 800450e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004510:	43aa      	biceq	r2, r5
 8004512:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004514:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004516:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800451a:	bf14      	ite	ne
 800451c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800451e:	43aa      	biceq	r2, r5
 8004520:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8004522:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004524:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004528:	bf14      	ite	ne
 800452a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800452c:	43aa      	biceq	r2, r5
 800452e:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8004530:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004532:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004536:	bf14      	ite	ne
 8004538:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800453a:	43aa      	biceq	r2, r5
 800453c:	601a      	str	r2, [r3, #0]
	position++;
 800453e:	3601      	adds	r6, #1
 8004540:	e777      	b.n	8004432 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8004542:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80045bc <HAL_GPIO_Init+0x1a0>
 8004546:	454a      	cmp	r2, r9
 8004548:	d00c      	beq.n	8004564 <HAL_GPIO_Init+0x148>
 800454a:	d814      	bhi.n	8004576 <HAL_GPIO_Init+0x15a>
 800454c:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8004550:	454a      	cmp	r2, r9
 8004552:	d007      	beq.n	8004564 <HAL_GPIO_Init+0x148>
 8004554:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8004558:	454a      	cmp	r2, r9
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x148>
 800455c:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8004560:	454a      	cmp	r2, r9
 8004562:	d187      	bne.n	8004474 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004564:	688a      	ldr	r2, [r1, #8]
 8004566:	b1d2      	cbz	r2, 800459e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004568:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800456a:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 800456e:	bf0c      	ite	eq
 8004570:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8004572:	6147      	strne	r7, [r0, #20]
 8004574:	e77e      	b.n	8004474 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8004576:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 80045c0 <HAL_GPIO_Init+0x1a4>
 800457a:	454a      	cmp	r2, r9
 800457c:	d0f2      	beq.n	8004564 <HAL_GPIO_Init+0x148>
 800457e:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8004582:	e7ed      	b.n	8004560 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004584:	68cc      	ldr	r4, [r1, #12]
          break;
 8004586:	e775      	b.n	8004474 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004588:	68cc      	ldr	r4, [r1, #12]
 800458a:	3404      	adds	r4, #4
          break;
 800458c:	e772      	b.n	8004474 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800458e:	68cc      	ldr	r4, [r1, #12]
 8004590:	3408      	adds	r4, #8
          break;
 8004592:	e76f      	b.n	8004474 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004594:	68cc      	ldr	r4, [r1, #12]
 8004596:	340c      	adds	r4, #12
          break;
 8004598:	e76c      	b.n	8004474 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800459a:	2400      	movs	r4, #0
 800459c:	e76a      	b.n	8004474 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800459e:	2404      	movs	r4, #4
 80045a0:	e768      	b.n	8004474 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045a2:	2200      	movs	r2, #0
 80045a4:	e7aa      	b.n	80044fc <HAL_GPIO_Init+0xe0>
 80045a6:	2201      	movs	r2, #1
 80045a8:	e7a8      	b.n	80044fc <HAL_GPIO_Init+0xe0>
 80045aa:	2202      	movs	r2, #2
 80045ac:	e7a6      	b.n	80044fc <HAL_GPIO_Init+0xe0>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40010400 	.word	0x40010400
 80045b8:	40010800 	.word	0x40010800
 80045bc:	10220000 	.word	0x10220000
 80045c0:	10310000 	.word	0x10310000

080045c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045c4:	6883      	ldr	r3, [r0, #8]
 80045c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80045c8:	bf14      	ite	ne
 80045ca:	2001      	movne	r0, #1
 80045cc:	2000      	moveq	r0, #0
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d0:	b10a      	cbz	r2, 80045d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045d2:	6101      	str	r1, [r0, #16]
  }
}
 80045d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045d6:	0409      	lsls	r1, r1, #16
 80045d8:	e7fb      	b.n	80045d2 <HAL_GPIO_WritePin+0x2>

080045da <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045da:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045dc:	ea01 0203 	and.w	r2, r1, r3
 80045e0:	ea21 0103 	bic.w	r1, r1, r3
 80045e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045e8:	6101      	str	r1, [r0, #16]
}
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045ec:	4a04      	ldr	r2, [pc, #16]	@ (8004600 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80045ee:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045f0:	6951      	ldr	r1, [r2, #20]
 80045f2:	4201      	tst	r1, r0
 80045f4:	d002      	beq.n	80045fc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045f6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045f8:	f7fe fba8 	bl	8002d4c <HAL_GPIO_EXTI_Callback>
  }
}
 80045fc:	bd08      	pop	{r3, pc}
 80045fe:	bf00      	nop
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004606:	4604      	mov	r4, r0
 8004608:	b1e0      	cbz	r0, 8004644 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800460a:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800460e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004612:	b91b      	cbnz	r3, 800461c <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004614:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004618:	f002 fdce 	bl	80071b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800461c:	2303      	movs	r3, #3
 800461e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004622:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004624:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8004626:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8004628:	f855 0b04 	ldr.w	r0, [r5], #4
 800462c:	f001 f9ff 	bl	8005a2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004630:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	f001 f9ea 	bl	8005a0e <USB_CoreInit>
 800463a:	4601      	mov	r1, r0
 800463c:	b128      	cbz	r0, 800464a <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463e:	2302      	movs	r3, #2
 8004640:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8004644:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8004646:	4628      	mov	r0, r5
 8004648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800464a:	6820      	ldr	r0, [r4, #0]
 800464c:	f001 f9f9 	bl	8005a42 <USB_SetCurrentMode>
 8004650:	2800      	cmp	r0, #0
 8004652:	d1f4      	bne.n	800463e <HAL_PCD_Init+0x3a>
 8004654:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8004656:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004658:	7926      	ldrb	r6, [r4, #4]
 800465a:	f104 0310 	add.w	r3, r4, #16
 800465e:	b2c1      	uxtb	r1, r0
 8004660:	428e      	cmp	r6, r1
 8004662:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004666:	d818      	bhi.n	800469a <HAL_PCD_Init+0x96>
 8004668:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800466a:	460a      	mov	r2, r1
 800466c:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8004670:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004672:	4286      	cmp	r6, r0
 8004674:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004678:	d81b      	bhi.n	80046b2 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800467a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800467e:	6820      	ldr	r0, [r4, #0]
 8004680:	f001 f9e1 	bl	8005a46 <USB_DevInit>
 8004684:	4605      	mov	r5, r0
 8004686:	2800      	cmp	r0, #0
 8004688:	d1d9      	bne.n	800463e <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 800468a:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800468c:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 800468e:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004690:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004694:	f001 fc8c 	bl	8005fb0 <USB_DevDisconnect>
  return HAL_OK;
 8004698:	e7d5      	b.n	8004646 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 800469a:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 800469e:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 80046a2:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046a6:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046aa:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ae:	3001      	adds	r0, #1
 80046b0:	e7d5      	b.n	800465e <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046b2:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80046b6:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80046ba:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046be:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046c2:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c6:	3101      	adds	r1, #1
 80046c8:	e7d2      	b.n	8004670 <HAL_PCD_Init+0x6c>

080046ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046ca:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80046cc:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 80046d0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d010      	beq.n	80046f8 <HAL_PCD_Start+0x2e>
 80046d6:	2501      	movs	r5, #1
 80046d8:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f001 f99d 	bl	8005a1c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80046e2:	4629      	mov	r1, r5
 80046e4:	4620      	mov	r0, r4
 80046e6:	f002 fe6e 	bl	80073c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	f001 fc5e 	bl	8005fac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80046f8:	2002      	movs	r0, #2
 80046fa:	e7fc      	b.n	80046f6 <HAL_PCD_Start+0x2c>

080046fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046fc:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80046fe:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8004702:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004704:	2a01      	cmp	r2, #1
 8004706:	d00a      	beq.n	800471e <HAL_PCD_SetAddress+0x22>
 8004708:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800470a:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 800470c:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004710:	6800      	ldr	r0, [r0, #0]
 8004712:	f001 fc45 	bl	8005fa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004716:	2000      	movs	r0, #0
 8004718:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 800471c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800471e:	2002      	movs	r0, #2
 8004720:	e7fc      	b.n	800471c <HAL_PCD_SetAddress+0x20>
	...

08004724 <HAL_PCD_IRQHandler>:
{
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	4604      	mov	r4, r0
 800472a:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f001 fc41 	bl	8005fb4 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004732:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8004736:	f000 844f 	beq.w	8004fd8 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 800473a:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800473c:	4ec6      	ldr	r6, [pc, #792]	@ (8004a58 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8004744:	041f      	lsls	r7, r3, #16
 8004746:	d402      	bmi.n	800474e <HAL_PCD_IRQHandler+0x2a>
}
 8004748:	b005      	add	sp, #20
 800474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800474e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8004752:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8004756:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8004758:	f040 80c0 	bne.w	80048dc <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800475c:	f011 0110 	ands.w	r1, r1, #16
 8004760:	d126      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004762:	8803      	ldrh	r3, [r0, #0]
 8004764:	b29b      	uxth	r3, r3
 8004766:	4033      	ands	r3, r6
 8004768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800476c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800476e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004772:	7c22      	ldrb	r2, [r4, #16]
 8004774:	b29b      	uxth	r3, r3
 8004776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800477a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800477e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8004782:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004784:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8004788:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800478a:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800478c:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 800478e:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004790:	f002 fd41 	bl	8007216 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004794:	7b63      	ldrb	r3, [r4, #13]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0d1      	beq.n	800473e <HAL_PCD_IRQHandler+0x1a>
 800479a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800479c:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d1cd      	bne.n	800473e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80047a2:	7b63      	ldrb	r3, [r4, #13]
 80047a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a8:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047ac:	7362      	strb	r2, [r4, #13]
 80047ae:	e7c6      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047b0:	8807      	ldrh	r7, [r0, #0]
 80047b2:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047b4:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 80047b8:	d021      	beq.n	80047fe <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047ba:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80047be:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80047cc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047d0:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80047d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047d8:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047dc:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80047e0:	f001 fe33 	bl	800644a <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047e4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80047e6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047e8:	8813      	ldrh	r3, [r2, #0]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	051b      	lsls	r3, r3, #20
 80047f0:	0d1b      	lsrs	r3, r3, #20
 80047f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80047f8:	f002 fcfe 	bl	80071f8 <HAL_PCD_SetupStageCallback>
 80047fc:	e79f      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047fe:	0419      	lsls	r1, r3, #16
 8004800:	d59d      	bpl.n	800473e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004802:	8803      	ldrh	r3, [r0, #0]
 8004804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004808:	051b      	lsls	r3, r3, #20
 800480a:	0d1b      	lsrs	r3, r3, #20
 800480c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004810:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004812:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004816:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800481a:	b29b      	uxth	r3, r3
 800481c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004820:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004824:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8004828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004830:	b18b      	cbz	r3, 8004856 <HAL_PCD_IRQHandler+0x132>
 8004832:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8004836:	b171      	cbz	r1, 8004856 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004838:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 800483c:	f001 fe05 	bl	800644a <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004840:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004844:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004848:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800484a:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800484c:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800484e:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004852:	f002 fcd7 	bl	8007204 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004856:	6821      	ldr	r1, [r4, #0]
 8004858:	880a      	ldrh	r2, [r1, #0]
 800485a:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800485c:	0512      	lsls	r2, r2, #20
 800485e:	f53f af6e 	bmi.w	800473e <HAL_PCD_IRQHandler+0x1a>
 8004862:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004866:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800486a:	f43f af68 	beq.w	800473e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800486e:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004872:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8004876:	b292      	uxth	r2, r2
 8004878:	5a83      	ldrh	r3, [r0, r2]
 800487a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487e:	5283      	strh	r3, [r0, r2]
 8004880:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8004884:	2b3e      	cmp	r3, #62	@ 0x3e
 8004886:	d91d      	bls.n	80048c4 <HAL_PCD_IRQHandler+0x1a0>
 8004888:	095f      	lsrs	r7, r3, #5
 800488a:	06db      	lsls	r3, r3, #27
 800488c:	5a83      	ldrh	r3, [r0, r2]
 800488e:	bf08      	it	eq
 8004890:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800489a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048a6:	880b      	ldrh	r3, [r1, #0]
 80048a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	0c1b      	lsrs	r3, r3, #16
 80048b4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80048b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048c0:	800b      	strh	r3, [r1, #0]
 80048c2:	e73c      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048c4:	b90b      	cbnz	r3, 80048ca <HAL_PCD_IRQHandler+0x1a6>
 80048c6:	5a83      	ldrh	r3, [r0, r2]
 80048c8:	e7e7      	b.n	800489a <HAL_PCD_IRQHandler+0x176>
 80048ca:	085f      	lsrs	r7, r3, #1
 80048cc:	07db      	lsls	r3, r3, #31
 80048ce:	5a83      	ldrh	r3, [r0, r2]
 80048d0:	bf48      	it	mi
 80048d2:	3701      	addmi	r7, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80048da:	e7e2      	b.n	80048a2 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048dc:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048e0:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048e2:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048e6:	f140 80f6 	bpl.w	8004ad6 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048ea:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80048ee:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f6:	051b      	lsls	r3, r3, #20
 80048f8:	0d1b      	lsrs	r3, r3, #20
 80048fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fe:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8004902:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8004906:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 800490a:	b9bb      	cbnz	r3, 800493c <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800490c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004910:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8004914:	b29b      	uxth	r3, r3
 8004916:	3306      	adds	r3, #6
 8004918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800491c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004920:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8004924:	f1b9 0f00 	cmp.w	r9, #0
 8004928:	f000 80ba 	beq.w	8004aa0 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800492c:	464b      	mov	r3, r9
 800492e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004932:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004936:	f001 fd88 	bl	800644a <USB_ReadPMA>
 800493a:	e0b1      	b.n	8004aa0 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 800493c:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004940:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8004944:	2b02      	cmp	r3, #2
 8004946:	f040 8089 	bne.w	8004a5c <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800494a:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 800494e:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8004952:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004956:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 800495a:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800495e:	44d9      	add	r9, fp
 8004960:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004964:	d03c      	beq.n	80049e0 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004966:	f109 0902 	add.w	r9, r9, #2
 800496a:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 800496e:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8004972:	4599      	cmp	r9, r3
 8004974:	d913      	bls.n	800499e <HAL_PCD_IRQHandler+0x27a>
 8004976:	2300      	movs	r3, #0
 8004978:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800497c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004998:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800499c:	e005      	b.n	80049aa <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 800499e:	eba3 0309 	sub.w	r3, r3, r9
 80049a2:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0e8      	beq.n	800497c <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049aa:	f1bc 0f00 	cmp.w	ip, #0
 80049ae:	d00d      	beq.n	80049cc <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049bc:	041b      	lsls	r3, r3, #16
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80049cc:	f1b9 0f00 	cmp.w	r9, #0
 80049d0:	d066      	beq.n	8004aa0 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049d2:	2128      	movs	r1, #40	@ 0x28
 80049d4:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049d8:	464b      	mov	r3, r9
 80049da:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80049de:	e7a8      	b.n	8004932 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049e0:	f109 0906 	add.w	r9, r9, #6
 80049e4:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80049e8:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 80049ec:	4599      	cmp	r9, r3
 80049ee:	d912      	bls.n	8004a16 <HAL_PCD_IRQHandler+0x2f2>
 80049f0:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a10:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004a14:	e005      	b.n	8004a22 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8004a16:	eba3 0309 	sub.w	r3, r3, r9
 8004a1a:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0e8      	beq.n	80049f4 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a22:	f1bc 0f00 	cmp.w	ip, #0
 8004a26:	d10d      	bne.n	8004a44 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004a44:	f1b9 0f00 	cmp.w	r9, #0
 8004a48:	d02a      	beq.n	8004aa0 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a4a:	2128      	movs	r1, #40	@ 0x28
 8004a4c:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a50:	464b      	mov	r3, r9
 8004a52:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004a56:	e76c      	b.n	8004932 <HAL_PCD_IRQHandler+0x20e>
 8004a58:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a78:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8004a7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a86:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004a8a:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a8c:	d054      	beq.n	8004b38 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a8e:	3202      	adds	r2, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004a96:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8004a9a:	f1b9 0f00 	cmp.w	r9, #0
 8004a9e:	d19b      	bne.n	80049d8 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8004aa0:	fb05 f107 	mul.w	r1, r5, r7
 8004aa4:	1863      	adds	r3, r4, r1
 8004aa6:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004aaa:	444a      	add	r2, r9
 8004aac:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8004ab0:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8004ab4:	444a      	add	r2, r9
 8004ab6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004aba:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8004abe:	b11a      	cbz	r2, 8004ac8 <HAL_PCD_IRQHandler+0x3a4>
 8004ac0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004ac4:	4599      	cmp	r9, r3
 8004ac6:	d241      	bcs.n	8004b4c <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ac8:	fb05 4307 	mla	r3, r5, r7, r4
 8004acc:	4620      	mov	r0, r4
 8004ace:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8004ad2:	f002 fb97 	bl	8007204 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ad6:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ada:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004adc:	f43f ae2f 	beq.w	800473e <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ae0:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004ae4:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	4033      	ands	r3, r6
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af0:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8004af4:	eb04 030c 	add.w	r3, r4, ip
 8004af8:	7cda      	ldrb	r2, [r3, #19]
 8004afa:	2a01      	cmp	r2, #1
 8004afc:	d156      	bne.n	8004bac <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8004afe:	2100      	movs	r1, #0
 8004b00:	fb07 5205 	mla	r2, r7, r5, r5
 8004b04:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8004b06:	7f1a      	ldrb	r2, [r3, #28]
 8004b08:	b392      	cbz	r2, 8004b70 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b0a:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b0e:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b10:	d036      	beq.n	8004b80 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b12:	bb12      	cbnz	r2, 8004b5a <HAL_PCD_IRQHandler+0x436>
 8004b14:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004b18:	7c1b      	ldrb	r3, [r3, #16]
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b22:	4410      	add	r0, r2
 8004b24:	5a1a      	ldrh	r2, [r3, r0]
 8004b26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004b2a:	521a      	strh	r2, [r3, r0]
 8004b2c:	5a1a      	ldrh	r2, [r3, r0]
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b34:	521a      	strh	r2, [r3, r0]
 8004b36:	e01b      	b.n	8004b70 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b38:	3206      	adds	r2, #6
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004b40:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	d0aa      	beq.n	8004aa0 <HAL_PCD_IRQHandler+0x37c>
 8004b4a:	e781      	b.n	8004a50 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8004b4c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b50:	6820      	ldr	r0, [r4, #0]
 8004b52:	4421      	add	r1, r4
 8004b54:	f001 fa44 	bl	8005fe0 <USB_EPStartXfer>
 8004b58:	e7bd      	b.n	8004ad6 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	d108      	bne.n	8004b70 <HAL_PCD_IRQHandler+0x44c>
 8004b5e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004b62:	7c1b      	ldrb	r3, [r3, #16]
 8004b64:	b292      	uxth	r2, r2
 8004b66:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	4410      	add	r0, r2
 8004b6e:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b70:	2328      	movs	r3, #40	@ 0x28
 8004b72:	fb03 4307 	mla	r3, r3, r7, r4
 8004b76:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f002 fb4c 	bl	8007216 <HAL_PCD_DataInStageCallback>
 8004b7e:	e5de      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b80:	b93a      	cbnz	r2, 8004b92 <HAL_PCD_IRQHandler+0x46e>
 8004b82:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004b86:	7c1b      	ldrb	r3, [r3, #16]
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004b90:	e7c7      	b.n	8004b22 <HAL_PCD_IRQHandler+0x3fe>
 8004b92:	2a01      	cmp	r2, #1
 8004b94:	d1ec      	bne.n	8004b70 <HAL_PCD_IRQHandler+0x44c>
 8004b96:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004b9a:	7c1b      	ldrb	r3, [r3, #16]
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4410      	add	r0, r2
 8004ba6:	f823 8000 	strh.w	r8, [r3, r0]
 8004baa:	e7e1      	b.n	8004b70 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bac:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004bae:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8004bb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bb4:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004bb8:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bbe:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8004bc2:	b2bf      	uxth	r7, r7
 8004bc4:	4457      	add	r7, sl
 8004bc6:	3702      	adds	r7, #2
 8004bc8:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8004bcc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004bd0:	4297      	cmp	r7, r2
 8004bd2:	d302      	bcc.n	8004bda <HAL_PCD_IRQHandler+0x4b6>
 8004bd4:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8004bd8:	e7ce      	b.n	8004b78 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8004bda:	1bd2      	subs	r2, r2, r7
 8004bdc:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8004bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8004be0:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8004be4:	443a      	add	r2, r7
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8004be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bea:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8004bec:	443a      	add	r2, r7
 8004bee:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bf0:	f001 f9f6 	bl	8005fe0 <USB_EPStartXfer>
 8004bf4:	e5a3      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bf6:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bfa:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bfe:	fa1f fc8c 	uxth.w	ip, ip
 8004c02:	44d4      	add	ip, sl
 8004c04:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c08:	f000 80f4 	beq.w	8004df4 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c0c:	f10c 0c02 	add.w	ip, ip, #2
 8004c10:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8004c14:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8004c18:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004c1c:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8004c1e:	bf2c      	ite	cs
 8004c20:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8004c22:	eba2 020c 	subcc.w	r2, r2, ip
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c28:	2a00      	cmp	r2, #0
 8004c2a:	d15b      	bne.n	8004ce4 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c2c:	2328      	movs	r3, #40	@ 0x28
 8004c2e:	fb03 4307 	mla	r3, r3, r7, r4
 8004c32:	7c5b      	ldrb	r3, [r3, #17]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d141      	bne.n	8004cbc <HAL_PCD_IRQHandler+0x598>
 8004c38:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004c3c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004c40:	b292      	uxth	r2, r2
 8004c42:	010b      	lsls	r3, r1, #4
 8004c44:	4494      	add	ip, r2
 8004c46:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004c4a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c4e:	f82c 2003 	strh.w	r2, [ip, r3]
 8004c52:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004c56:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c5a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c64:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004c68:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	4410      	add	r0, r2
 8004c70:	5ac2      	ldrh	r2, [r0, r3]
 8004c72:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c76:	52c2      	strh	r2, [r0, r3]
 8004c78:	5ac2      	ldrh	r2, [r0, r3]
 8004c7a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c7e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c82:	b292      	uxth	r2, r2
 8004c84:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c86:	4620      	mov	r0, r4
 8004c88:	f002 fac5 	bl	8007216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c8c:	f1b8 0f00 	cmp.w	r8, #0
 8004c90:	f000 80f4 	beq.w	8004e7c <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c94:	2328      	movs	r3, #40	@ 0x28
 8004c96:	fb03 4307 	mla	r3, r3, r7, r4
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	7c19      	ldrb	r1, [r3, #16]
 8004c9e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004cba:	e0df      	b.n	8004e7c <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d1e2      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x562>
 8004cc0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004cc4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004cc8:	fa1f fe8e 	uxth.w	lr, lr
 8004ccc:	44f4      	add	ip, lr
 8004cce:	010b      	lsls	r3, r1, #4
 8004cd0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004cd4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004cd8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004cdc:	fa1f fc8c 	uxth.w	ip, ip
 8004ce0:	4460      	add	r0, ip
 8004ce2:	e7cf      	b.n	8004c84 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ce4:	f1b8 0f00 	cmp.w	r8, #0
 8004ce8:	d00d      	beq.n	8004d06 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cea:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004cee:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004cf2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cf6:	0412      	lsls	r2, r2, #16
 8004cf8:	0c12      	lsrs	r2, r2, #16
 8004cfa:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004cfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d02:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004d06:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8004d0a:	fb08 4807 	mla	r8, r8, r7, r4
 8004d0e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8004d12:	2a01      	cmp	r2, #1
 8004d14:	f040 80b2 	bne.w	8004e7c <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8004d18:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8004d1c:	eb02 0e0c 	add.w	lr, r2, ip
 8004d20:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8004d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d26:	4462      	add	r2, ip
 8004d28:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d2a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8004d2e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d335      	bcc.n	8004da2 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d3c:	2328      	movs	r3, #40	@ 0x28
 8004d3e:	fb03 4307 	mla	r3, r3, r7, r4
 8004d42:	f893 c011 	ldrb.w	ip, [r3, #17]
 8004d46:	b293      	uxth	r3, r2
 8004d48:	f1bc 0f00 	cmp.w	ip, #0
 8004d4c:	d145      	bne.n	8004dda <HAL_PCD_IRQHandler+0x6b6>
 8004d4e:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8004d52:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004d56:	fa1f f888 	uxth.w	r8, r8
 8004d5a:	44c4      	add	ip, r8
 8004d5c:	0109      	lsls	r1, r1, #4
 8004d5e:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004d62:	2a3e      	cmp	r2, #62	@ 0x3e
 8004d64:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004d68:	f82c 8001 	strh.w	r8, [ip, r1]
 8004d6c:	d925      	bls.n	8004dba <HAL_PCD_IRQHandler+0x696>
 8004d6e:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004d72:	06d2      	lsls	r2, r2, #27
 8004d74:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004d78:	bf08      	it	eq
 8004d7a:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004d84:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004d88:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004d8c:	b292      	uxth	r2, r2
 8004d8e:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d92:	2228      	movs	r2, #40	@ 0x28
 8004d94:	fb02 4207 	mla	r2, r2, r7, r4
 8004d98:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d9a:	4671      	mov	r1, lr
 8004d9c:	f001 f910 	bl	8005fc0 <USB_WritePMA>
 8004da0:	e06c      	b.n	8004e7c <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8004da2:	b91b      	cbnz	r3, 8004dac <HAL_PCD_IRQHandler+0x688>
          len = TxPctSize;
 8004da4:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8004da6:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8004daa:	e7c7      	b.n	8004d3c <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8004dac:	2200      	movs	r2, #0
 8004dae:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8004db2:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8004db6:	461a      	mov	r2, r3
 8004db8:	e7c0      	b.n	8004d3c <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dba:	b912      	cbnz	r2, 8004dc2 <HAL_PCD_IRQHandler+0x69e>
 8004dbc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004dc0:	e7e0      	b.n	8004d84 <HAL_PCD_IRQHandler+0x660>
 8004dc2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8004dc6:	07d2      	lsls	r2, r2, #31
 8004dc8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004dcc:	bf48      	it	mi
 8004dce:	f108 0801 	addmi.w	r8, r8, #1
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004dd8:	e7d8      	b.n	8004d8c <HAL_PCD_IRQHandler+0x668>
 8004dda:	f1bc 0f01 	cmp.w	ip, #1
 8004dde:	d1d8      	bne.n	8004d92 <HAL_PCD_IRQHandler+0x66e>
 8004de0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004de4:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8004de8:	fa1f fc8c 	uxth.w	ip, ip
 8004dec:	4462      	add	r2, ip
 8004dee:	0109      	lsls	r1, r1, #4
 8004df0:	5253      	strh	r3, [r2, r1]
 8004df2:	e7ce      	b.n	8004d92 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004df4:	f10c 0c06 	add.w	ip, ip, #6
 8004df8:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8004dfc:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8004e00:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004e04:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8004e06:	bf8c      	ite	hi
 8004e08:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8004e0a:	eba2 020c 	subls.w	r2, r2, ip
 8004e0e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	d15d      	bne.n	8004ed0 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e14:	2328      	movs	r3, #40	@ 0x28
 8004e16:	fb03 4307 	mla	r3, r3, r7, r4
 8004e1a:	7c5b      	ldrb	r3, [r3, #17]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d143      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x784>
 8004e20:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004e24:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	010b      	lsls	r3, r1, #4
 8004e2c:	4494      	add	ip, r2
 8004e2e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004e32:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e36:	f82c 2003 	strh.w	r2, [ip, r3]
 8004e3a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8004e3e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e42:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e46:	b292      	uxth	r2, r2
 8004e48:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e4c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004e50:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004e54:	b292      	uxth	r2, r2
 8004e56:	4410      	add	r0, r2
 8004e58:	5ac2      	ldrh	r2, [r0, r3]
 8004e5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e5e:	52c2      	strh	r2, [r0, r3]
 8004e60:	5ac2      	ldrh	r2, [r0, r3]
 8004e62:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e66:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f002 f9d1 	bl	8007216 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e74:	f1b8 0f00 	cmp.w	r8, #0
 8004e78:	f43f af0c 	beq.w	8004c94 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004e7c:	2328      	movs	r3, #40	@ 0x28
 8004e7e:	fb03 4307 	mla	r3, r3, r7, r4
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	7c19      	ldrb	r1, [r3, #16]
 8004e86:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8004e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004ea6:	e44a      	b.n	800473e <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d1e0      	bne.n	8004e6e <HAL_PCD_IRQHandler+0x74a>
 8004eac:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8004eb0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8004eb4:	fa1f fe8e 	uxth.w	lr, lr
 8004eb8:	44f4      	add	ip, lr
 8004eba:	010b      	lsls	r3, r1, #4
 8004ebc:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ec0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8004ec4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8004ec8:	fa1f fc8c 	uxth.w	ip, ip
 8004ecc:	4460      	add	r0, ip
 8004ece:	e7cd      	b.n	8004e6c <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ed0:	f1b8 0f00 	cmp.w	r8, #0
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ed6:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8004eda:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004ede:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ee2:	0412      	lsls	r2, r2, #16
 8004ee4:	0c12      	lsrs	r2, r2, #16
 8004ee6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004eea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004eee:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004ef2:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8004ef6:	fb08 4807 	mla	r8, r8, r7, r4
 8004efa:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8004efe:	2a01      	cmp	r2, #1
 8004f00:	d1bc      	bne.n	8004e7c <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8004f02:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8004f06:	eb02 0e0c 	add.w	lr, r2, ip
 8004f0a:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8004f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f10:	4462      	add	r2, ip
 8004f12:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f14:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8004f18:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d332      	bcc.n	8004f86 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f26:	2328      	movs	r3, #40	@ 0x28
 8004f28:	fb03 4307 	mla	r3, r3, r7, r4
 8004f2c:	f893 c011 	ldrb.w	ip, [r3, #17]
 8004f30:	b293      	uxth	r3, r2
 8004f32:	f1bc 0f00 	cmp.w	ip, #0
 8004f36:	d142      	bne.n	8004fbe <HAL_PCD_IRQHandler+0x89a>
 8004f38:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8004f3c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8004f40:	fa1f f888 	uxth.w	r8, r8
 8004f44:	44c4      	add	ip, r8
 8004f46:	0109      	lsls	r1, r1, #4
 8004f48:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8004f4c:	2a3e      	cmp	r2, #62	@ 0x3e
 8004f4e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004f52:	f82c 8001 	strh.w	r8, [ip, r1]
 8004f56:	d922      	bls.n	8004f9e <HAL_PCD_IRQHandler+0x87a>
 8004f58:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8004f5c:	06d2      	lsls	r2, r2, #27
 8004f5e:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004f62:	bf08      	it	eq
 8004f64:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004f6e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004f72:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004f76:	b292      	uxth	r2, r2
 8004f78:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f7c:	2228      	movs	r2, #40	@ 0x28
 8004f7e:	fb02 4207 	mla	r2, r2, r7, r4
 8004f82:	8b52      	ldrh	r2, [r2, #26]
 8004f84:	e709      	b.n	8004d9a <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 8004f86:	b91b      	cbnz	r3, 8004f90 <HAL_PCD_IRQHandler+0x86c>
          len = TxPctSize;
 8004f88:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8004f8a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8004f8e:	e7ca      	b.n	8004f26 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8004f96:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	e7c3      	b.n	8004f26 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f9e:	b912      	cbnz	r2, 8004fa6 <HAL_PCD_IRQHandler+0x882>
 8004fa0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004fa4:	e7e3      	b.n	8004f6e <HAL_PCD_IRQHandler+0x84a>
 8004fa6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8004faa:	07d2      	lsls	r2, r2, #31
 8004fac:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8004fb0:	bf48      	it	mi
 8004fb2:	f108 0801 	addmi.w	r8, r8, #1
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8004fbc:	e7db      	b.n	8004f76 <HAL_PCD_IRQHandler+0x852>
 8004fbe:	f1bc 0f01 	cmp.w	ip, #1
 8004fc2:	d1db      	bne.n	8004f7c <HAL_PCD_IRQHandler+0x858>
 8004fc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004fc8:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8004fcc:	b292      	uxth	r2, r2
 8004fce:	4494      	add	ip, r2
 8004fd0:	010a      	lsls	r2, r1, #4
 8004fd2:	f82c 3002 	strh.w	r3, [ip, r2]
 8004fd6:	e7d1      	b.n	8004f7c <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004fd8:	0546      	lsls	r6, r0, #21
 8004fda:	d512      	bpl.n	8005002 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004fdc:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004fde:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004fe0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8004fe4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	0c1b      	lsrs	r3, r3, #16
 8004fec:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004ff0:	f002 f91d 	bl	800722e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	4620      	mov	r0, r4
}
 8004ff8:	b005      	add	sp, #20
 8004ffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ffe:	f7ff bb7d 	b.w	80046fc <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005002:	0441      	lsls	r1, r0, #17
 8005004:	d50a      	bpl.n	800501c <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005006:	6822      	ldr	r2, [r4, #0]
 8005008:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800500c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8005018:	f7ff bb96 	b.w	8004748 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800501c:	0482      	lsls	r2, r0, #18
 800501e:	d505      	bpl.n	800502c <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005026:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800502a:	e7f1      	b.n	8005010 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800502c:	04c3      	lsls	r3, r0, #19
 800502e:	d519      	bpl.n	8005064 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005030:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8005032:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005034:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005044:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8005048:	f023 0308 	bic.w	r3, r3, #8
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8005054:	f002 f90e 	bl	8007274 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800505e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005062:	e7d5      	b.n	8005010 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005064:	0507      	lsls	r7, r0, #20
 8005066:	d548      	bpl.n	80050fa <HAL_PCD_IRQHandler+0x9d6>
 8005068:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	4606      	mov	r6, r0
 800506e:	4619      	mov	r1, r3
 8005070:	461a      	mov	r2, r3
 8005072:	f103 0520 	add.w	r5, r3, #32
 8005076:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800507a:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800507c:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8005080:	d1f9      	bne.n	8005076 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005082:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005086:	b292      	uxth	r2, r2
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005090:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005094:	f022 0201 	bic.w	r2, r2, #1
 8005098:	0412      	lsls	r2, r2, #16
 800509a:	0c12      	lsrs	r2, r2, #16
 800509c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80050a0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80050a4:	0556      	lsls	r6, r2, #21
 80050a6:	d5fb      	bpl.n	80050a0 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80050a8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b0:	0412      	lsls	r2, r2, #16
 80050b2:	0c12      	lsrs	r2, r2, #16
 80050b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80050b8:	f830 2b02 	ldrh.w	r2, [r0], #2
 80050bc:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80050c0:	428d      	cmp	r5, r1
 80050c2:	d1f9      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050c4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80050c8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050ca:	b292      	uxth	r2, r2
 80050cc:	f042 0208 	orr.w	r2, r2, #8
 80050d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80050d4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050dc:	0412      	lsls	r2, r2, #16
 80050de:	0c12      	lsrs	r2, r2, #16
 80050e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80050e4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80050e8:	b292      	uxth	r2, r2
 80050ea:	f042 0204 	orr.w	r2, r2, #4
 80050ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80050f2:	f002 f8af 	bl	8007254 <HAL_PCD_SuspendCallback>
    return;
 80050f6:	f7ff bb27 	b.w	8004748 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80050fa:	0582      	lsls	r2, r0, #22
 80050fc:	d50d      	bpl.n	800511a <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80050fe:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005100:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005102:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005106:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005112:	f002 f888 	bl	8007226 <HAL_PCD_SOFCallback>
    return;
 8005116:	f7ff bb17 	b.w	8004748 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800511a:	05c3      	lsls	r3, r0, #23
 800511c:	f57f ab14 	bpl.w	8004748 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005126:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800512a:	e771      	b.n	8005010 <HAL_PCD_IRQHandler+0x8ec>

0800512c <HAL_PCD_EP_Open>:
{
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	2428      	movs	r4, #40	@ 0x28
 8005130:	4605      	mov	r5, r0
 8005132:	f001 0007 	and.w	r0, r1, #7
 8005136:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8005138:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513c:	bf14      	ite	ne
 800513e:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005142:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8005146:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800514a:	bf15      	itete	ne
 800514c:	2401      	movne	r4, #1
    ep->is_in = 0U;
 800514e:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8005150:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8005152:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005156:	bf14      	ite	ne
 8005158:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515a:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 800515c:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800515e:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8005160:	bf08      	it	eq
 8005162:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005164:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8005166:	bf08      	it	eq
 8005168:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800516a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800516c:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8005170:	2b01      	cmp	r3, #1
 8005172:	d009      	beq.n	8005188 <HAL_PCD_EP_Open+0x5c>
 8005174:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005176:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8005178:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800517c:	f000 fc74 	bl	8005a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005180:	2000      	movs	r0, #0
 8005182:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8005186:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8005188:	2002      	movs	r0, #2
 800518a:	e7fc      	b.n	8005186 <HAL_PCD_EP_Open+0x5a>

0800518c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800518c:	2328      	movs	r3, #40	@ 0x28
 800518e:	f001 0207 	and.w	r2, r1, #7
 8005192:	4353      	muls	r3, r2
 8005194:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8005198:	b510      	push	{r4, lr}
 800519a:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800519c:	bf18      	it	ne
 800519e:	f103 0110 	addne.w	r1, r3, #16
 80051a2:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a4:	bf0b      	itete	eq
 80051a6:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80051aa:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80051ac:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	bf0a      	itet	eq
 80051b2:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80051b4:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80051b6:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ba:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80051bc:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d009      	beq.n	80051d8 <HAL_PCD_EP_Close+0x4c>
 80051c4:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051c6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80051c8:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051cc:	f000 fdac 	bl	8005d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80051d6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80051d8:	2002      	movs	r0, #2
 80051da:	e7fc      	b.n	80051d6 <HAL_PCD_EP_Close+0x4a>

080051dc <HAL_PCD_EP_Receive>:
{
 80051dc:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80051de:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 80051e0:	2600      	movs	r6, #0
 80051e2:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80051e6:	434c      	muls	r4, r1
 80051e8:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ea:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ee:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051f2:	4401      	add	r1, r0
  ep->xfer_len = len;
 80051f4:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80051f8:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80051fc:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005200:	6800      	ldr	r0, [r0, #0]
 8005202:	f000 feed 	bl	8005fe0 <USB_EPStartXfer>
}
 8005206:	4630      	mov	r0, r6
 8005208:	bd70      	pop	{r4, r5, r6, pc}

0800520a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800520a:	2328      	movs	r3, #40	@ 0x28
 800520c:	f001 0107 	and.w	r1, r1, #7
 8005210:	fb03 0001 	mla	r0, r3, r1, r0
}
 8005214:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8005218:	4770      	bx	lr

0800521a <HAL_PCD_EP_Transmit>:
{
 800521a:	b570      	push	{r4, r5, r6, lr}
 800521c:	2528      	movs	r5, #40	@ 0x28
 800521e:	f001 0107 	and.w	r1, r1, #7
 8005222:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8005224:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8005226:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8005228:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 800522c:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800522e:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005230:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005234:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8005236:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 800523a:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 800523c:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 800523e:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005240:	6800      	ldr	r0, [r0, #0]
 8005242:	f000 fecd 	bl	8005fe0 <USB_EPStartXfer>
}
 8005246:	4630      	mov	r0, r6
 8005248:	bd70      	pop	{r4, r5, r6, pc}

0800524a <HAL_PCD_EP_SetStall>:
{
 800524a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800524c:	7903      	ldrb	r3, [r0, #4]
 800524e:	f001 0507 	and.w	r5, r1, #7
 8005252:	42ab      	cmp	r3, r5
{
 8005254:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005256:	d32a      	bcc.n	80052ae <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8005258:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800525c:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8005260:	d01c      	beq.n	800529c <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8005262:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005264:	436b      	muls	r3, r5
 8005266:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800526a:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800526c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800526e:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8005270:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005272:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8005274:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8005276:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800527a:	429a      	cmp	r2, r3
 800527c:	d019      	beq.n	80052b2 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800527e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005280:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005284:	f000 fe23 	bl	8005ece <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005288:	b925      	cbnz	r5, 8005294 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8005290:	f000 fe94 	bl	8005fbc <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8005294:	2000      	movs	r0, #0
 8005296:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800529a:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800529c:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800529e:	434b      	muls	r3, r1
 80052a0:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 80052a4:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80052a6:	4401      	add	r1, r0
    ep->is_in = 0U;
 80052a8:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 80052ac:	e7e0      	b.n	8005270 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80052ae:	2001      	movs	r0, #1
 80052b0:	e7f3      	b.n	800529a <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 80052b2:	2002      	movs	r0, #2
 80052b4:	e7f1      	b.n	800529a <HAL_PCD_EP_SetStall+0x50>

080052b6 <HAL_PCD_EP_ClrStall>:
{
 80052b6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052b8:	7902      	ldrb	r2, [r0, #4]
 80052ba:	f001 030f 	and.w	r3, r1, #15
 80052be:	429a      	cmp	r2, r3
{
 80052c0:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052c2:	d326      	bcc.n	8005312 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80052c4:	2328      	movs	r3, #40	@ 0x28
 80052c6:	f001 0207 	and.w	r2, r1, #7
 80052ca:	4353      	muls	r3, r2
 80052cc:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052d0:	bf14      	ite	ne
 80052d2:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d6:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 80052da:	4418      	add	r0, r3
  ep->is_stall = 0U;
 80052dc:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 80052e0:	bf15      	itete	ne
 80052e2:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80052e4:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e8:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80052ea:	bf14      	ite	ne
 80052ec:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80052ee:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80052f2:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80052f6:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d00b      	beq.n	8005316 <HAL_PCD_EP_ClrStall+0x60>
 80052fe:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005300:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005302:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005306:	f000 fe02 	bl	8005f0e <USB_EPClearStall>
  return HAL_OK;
 800530a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800530c:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8005310:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005312:	2001      	movs	r0, #1
 8005314:	e7fc      	b.n	8005310 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8005316:	2002      	movs	r0, #2
 8005318:	e7fa      	b.n	8005310 <HAL_PCD_EP_ClrStall+0x5a>

0800531a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800531a:	b510      	push	{r4, lr}
 800531c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800531e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005322:	bf1b      	ittet	ne
 8005324:	f001 0107 	andne.w	r1, r1, #7
 8005328:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800532c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005330:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8005332:	bf08      	it	eq
 8005334:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005338:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800533a:	b91a      	cbnz	r2, 8005344 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 800533c:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 800533e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005340:	2000      	movs	r0, #0
 8005342:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8005344:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005346:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8005348:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800534a:	e7f9      	b.n	8005340 <HAL_PCDEx_PMAConfig+0x26>

0800534c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005350:	4605      	mov	r5, r0
 8005352:	b338      	cbz	r0, 80053a4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005354:	6803      	ldr	r3, [r0, #0]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d410      	bmi.n	800537c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	079f      	lsls	r7, r3, #30
 800535e:	d45e      	bmi.n	800541e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	0719      	lsls	r1, r3, #28
 8005364:	f100 8095 	bmi.w	8005492 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	075a      	lsls	r2, r3, #29
 800536c:	f100 80c1 	bmi.w	80054f2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005370:	69eb      	ldr	r3, [r5, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f040 812c 	bne.w	80055d0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8005378:	2000      	movs	r0, #0
 800537a:	e029      	b.n	80053d0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800537c:	4c90      	ldr	r4, [pc, #576]	@ (80055c0 <HAL_RCC_OscConfig+0x274>)
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b04      	cmp	r3, #4
 8005386:	d007      	beq.n	8005398 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b08      	cmp	r3, #8
 8005390:	d10a      	bne.n	80053a8 <HAL_RCC_OscConfig+0x5c>
 8005392:	6863      	ldr	r3, [r4, #4]
 8005394:	03de      	lsls	r6, r3, #15
 8005396:	d507      	bpl.n	80053a8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	6823      	ldr	r3, [r4, #0]
 800539a:	039c      	lsls	r4, r3, #14
 800539c:	d5dd      	bpl.n	800535a <HAL_RCC_OscConfig+0xe>
 800539e:	686b      	ldr	r3, [r5, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1da      	bne.n	800535a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80053a4:	2001      	movs	r0, #1
 80053a6:	e013      	b.n	80053d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a8:	686b      	ldr	r3, [r5, #4]
 80053aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ae:	d112      	bne.n	80053d6 <HAL_RCC_OscConfig+0x8a>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053b8:	f7fe ffb4 	bl	8004324 <HAL_GetTick>
 80053bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	0398      	lsls	r0, r3, #14
 80053c2:	d4ca      	bmi.n	800535a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c4:	f7fe ffae 	bl	8004324 <HAL_GetTick>
 80053c8:	1b80      	subs	r0, r0, r6
 80053ca:	2864      	cmp	r0, #100	@ 0x64
 80053cc:	d9f7      	bls.n	80053be <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80053ce:	2003      	movs	r0, #3
}
 80053d0:	b002      	add	sp, #8
 80053d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d6:	b99b      	cbnz	r3, 8005400 <HAL_RCC_OscConfig+0xb4>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053e8:	f7fe ff9c 	bl	8004324 <HAL_GetTick>
 80053ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	0399      	lsls	r1, r3, #14
 80053f2:	d5b2      	bpl.n	800535a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f4:	f7fe ff96 	bl	8004324 <HAL_GetTick>
 80053f8:	1b80      	subs	r0, r0, r6
 80053fa:	2864      	cmp	r0, #100	@ 0x64
 80053fc:	d9f7      	bls.n	80053ee <HAL_RCC_OscConfig+0xa2>
 80053fe:	e7e6      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	d103      	bne.n	8005410 <HAL_RCC_OscConfig+0xc4>
 8005408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	e7cf      	b.n	80053b0 <HAL_RCC_OscConfig+0x64>
 8005410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541c:	e7cb      	b.n	80053b6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800541e:	4c68      	ldr	r4, [pc, #416]	@ (80055c0 <HAL_RCC_OscConfig+0x274>)
 8005420:	6863      	ldr	r3, [r4, #4]
 8005422:	f013 0f0c 	tst.w	r3, #12
 8005426:	d007      	beq.n	8005438 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005428:	6863      	ldr	r3, [r4, #4]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b08      	cmp	r3, #8
 8005430:	d110      	bne.n	8005454 <HAL_RCC_OscConfig+0x108>
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	03da      	lsls	r2, r3, #15
 8005436:	d40d      	bmi.n	8005454 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	079b      	lsls	r3, r3, #30
 800543c:	d502      	bpl.n	8005444 <HAL_RCC_OscConfig+0xf8>
 800543e:	692b      	ldr	r3, [r5, #16]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d1af      	bne.n	80053a4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	696a      	ldr	r2, [r5, #20]
 8005448:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800544c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	e785      	b.n	8005360 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005454:	692a      	ldr	r2, [r5, #16]
 8005456:	4b5b      	ldr	r3, [pc, #364]	@ (80055c4 <HAL_RCC_OscConfig+0x278>)
 8005458:	b16a      	cbz	r2, 8005476 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800545e:	f7fe ff61 	bl	8004324 <HAL_GetTick>
 8005462:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	079f      	lsls	r7, r3, #30
 8005468:	d4ec      	bmi.n	8005444 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546a:	f7fe ff5b 	bl	8004324 <HAL_GetTick>
 800546e:	1b80      	subs	r0, r0, r6
 8005470:	2802      	cmp	r0, #2
 8005472:	d9f7      	bls.n	8005464 <HAL_RCC_OscConfig+0x118>
 8005474:	e7ab      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8005476:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005478:	f7fe ff54 	bl	8004324 <HAL_GetTick>
 800547c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	0798      	lsls	r0, r3, #30
 8005482:	f57f af6d 	bpl.w	8005360 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005486:	f7fe ff4d 	bl	8004324 <HAL_GetTick>
 800548a:	1b80      	subs	r0, r0, r6
 800548c:	2802      	cmp	r0, #2
 800548e:	d9f6      	bls.n	800547e <HAL_RCC_OscConfig+0x132>
 8005490:	e79d      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005492:	69aa      	ldr	r2, [r5, #24]
 8005494:	4e4a      	ldr	r6, [pc, #296]	@ (80055c0 <HAL_RCC_OscConfig+0x274>)
 8005496:	4b4b      	ldr	r3, [pc, #300]	@ (80055c4 <HAL_RCC_OscConfig+0x278>)
 8005498:	b1e2      	cbz	r2, 80054d4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800549a:	2201      	movs	r2, #1
 800549c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80054a0:	f7fe ff40 	bl	8004324 <HAL_GetTick>
 80054a4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80054a8:	079b      	lsls	r3, r3, #30
 80054aa:	d50d      	bpl.n	80054c8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054ac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80054b0:	4b45      	ldr	r3, [pc, #276]	@ (80055c8 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80054b8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80054ba:	bf00      	nop
  }
  while (Delay --);
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	9201      	str	r2, [sp, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f9      	bne.n	80054ba <HAL_RCC_OscConfig+0x16e>
 80054c6:	e74f      	b.n	8005368 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fe ff2c 	bl	8004324 <HAL_GetTick>
 80054cc:	1b00      	subs	r0, r0, r4
 80054ce:	2802      	cmp	r0, #2
 80054d0:	d9e9      	bls.n	80054a6 <HAL_RCC_OscConfig+0x15a>
 80054d2:	e77c      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80054d4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80054d8:	f7fe ff24 	bl	8004324 <HAL_GetTick>
 80054dc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054de:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80054e0:	079f      	lsls	r7, r3, #30
 80054e2:	f57f af41 	bpl.w	8005368 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e6:	f7fe ff1d 	bl	8004324 <HAL_GetTick>
 80054ea:	1b00      	subs	r0, r0, r4
 80054ec:	2802      	cmp	r0, #2
 80054ee:	d9f6      	bls.n	80054de <HAL_RCC_OscConfig+0x192>
 80054f0:	e76d      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f2:	4c33      	ldr	r4, [pc, #204]	@ (80055c0 <HAL_RCC_OscConfig+0x274>)
 80054f4:	69e3      	ldr	r3, [r4, #28]
 80054f6:	00d8      	lsls	r0, r3, #3
 80054f8:	d424      	bmi.n	8005544 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80054fa:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fc:	69e3      	ldr	r3, [r4, #28]
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005502:	61e3      	str	r3, [r4, #28]
 8005504:	69e3      	ldr	r3, [r4, #28]
 8005506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4e2f      	ldr	r6, [pc, #188]	@ (80055cc <HAL_RCC_OscConfig+0x280>)
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	05d9      	lsls	r1, r3, #23
 8005514:	d518      	bpl.n	8005548 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005516:	68eb      	ldr	r3, [r5, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d126      	bne.n	800556a <HAL_RCC_OscConfig+0x21e>
 800551c:	6a23      	ldr	r3, [r4, #32]
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005524:	f7fe fefe 	bl	8004324 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800552c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552e:	6a23      	ldr	r3, [r4, #32]
 8005530:	079b      	lsls	r3, r3, #30
 8005532:	d53f      	bpl.n	80055b4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8005534:	2f00      	cmp	r7, #0
 8005536:	f43f af1b 	beq.w	8005370 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800553a:	69e3      	ldr	r3, [r4, #28]
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005540:	61e3      	str	r3, [r4, #28]
 8005542:	e715      	b.n	8005370 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005544:	2700      	movs	r7, #0
 8005546:	e7e2      	b.n	800550e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005550:	f7fe fee8 	bl	8004324 <HAL_GetTick>
 8005554:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005556:	6833      	ldr	r3, [r6, #0]
 8005558:	05da      	lsls	r2, r3, #23
 800555a:	d4dc      	bmi.n	8005516 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555c:	f7fe fee2 	bl	8004324 <HAL_GetTick>
 8005560:	eba0 0008 	sub.w	r0, r0, r8
 8005564:	2864      	cmp	r0, #100	@ 0x64
 8005566:	d9f6      	bls.n	8005556 <HAL_RCC_OscConfig+0x20a>
 8005568:	e731      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556a:	b9ab      	cbnz	r3, 8005598 <HAL_RCC_OscConfig+0x24c>
 800556c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005572:	f023 0301 	bic.w	r3, r3, #1
 8005576:	6223      	str	r3, [r4, #32]
 8005578:	6a23      	ldr	r3, [r4, #32]
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005580:	f7fe fed0 	bl	8004324 <HAL_GetTick>
 8005584:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005586:	6a23      	ldr	r3, [r4, #32]
 8005588:	0798      	lsls	r0, r3, #30
 800558a:	d5d3      	bpl.n	8005534 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fe feca 	bl	8004324 <HAL_GetTick>
 8005590:	1b80      	subs	r0, r0, r6
 8005592:	4540      	cmp	r0, r8
 8005594:	d9f7      	bls.n	8005586 <HAL_RCC_OscConfig+0x23a>
 8005596:	e71a      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005598:	2b05      	cmp	r3, #5
 800559a:	6a23      	ldr	r3, [r4, #32]
 800559c:	d103      	bne.n	80055a6 <HAL_RCC_OscConfig+0x25a>
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	6223      	str	r3, [r4, #32]
 80055a4:	e7ba      	b.n	800551c <HAL_RCC_OscConfig+0x1d0>
 80055a6:	f023 0301 	bic.w	r3, r3, #1
 80055aa:	6223      	str	r3, [r4, #32]
 80055ac:	6a23      	ldr	r3, [r4, #32]
 80055ae:	f023 0304 	bic.w	r3, r3, #4
 80055b2:	e7b6      	b.n	8005522 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fe feb6 	bl	8004324 <HAL_GetTick>
 80055b8:	1b80      	subs	r0, r0, r6
 80055ba:	4540      	cmp	r0, r8
 80055bc:	d9b7      	bls.n	800552e <HAL_RCC_OscConfig+0x1e2>
 80055be:	e706      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
 80055c0:	40021000 	.word	0x40021000
 80055c4:	42420000 	.word	0x42420000
 80055c8:	20000010 	.word	0x20000010
 80055cc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d0:	4c2a      	ldr	r4, [pc, #168]	@ (800567c <HAL_RCC_OscConfig+0x330>)
 80055d2:	6862      	ldr	r2, [r4, #4]
 80055d4:	f002 020c 	and.w	r2, r2, #12
 80055d8:	2a08      	cmp	r2, #8
 80055da:	d03e      	beq.n	800565a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055dc:	2200      	movs	r2, #0
 80055de:	2b02      	cmp	r3, #2
 80055e0:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80055e2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e4:	d12c      	bne.n	8005640 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80055e6:	f7fe fe9d 	bl	8004324 <HAL_GetTick>
 80055ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	0199      	lsls	r1, r3, #6
 80055f0:	d420      	bmi.n	8005634 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055f2:	6a2b      	ldr	r3, [r5, #32]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f8:	d105      	bne.n	8005606 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055fa:	6862      	ldr	r2, [r4, #4]
 80055fc:	68a9      	ldr	r1, [r5, #8]
 80055fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005602:	430a      	orrs	r2, r1
 8005604:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005606:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8005608:	6862      	ldr	r2, [r4, #4]
 800560a:	430b      	orrs	r3, r1
 800560c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005610:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8005612:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005614:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8005616:	4b1a      	ldr	r3, [pc, #104]	@ (8005680 <HAL_RCC_OscConfig+0x334>)
 8005618:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800561a:	f7fe fe83 	bl	8004324 <HAL_GetTick>
 800561e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	019a      	lsls	r2, r3, #6
 8005624:	f53f aea8 	bmi.w	8005378 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005628:	f7fe fe7c 	bl	8004324 <HAL_GetTick>
 800562c:	1b40      	subs	r0, r0, r5
 800562e:	2802      	cmp	r0, #2
 8005630:	d9f6      	bls.n	8005620 <HAL_RCC_OscConfig+0x2d4>
 8005632:	e6cc      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fe fe76 	bl	8004324 <HAL_GetTick>
 8005638:	1b80      	subs	r0, r0, r6
 800563a:	2802      	cmp	r0, #2
 800563c:	d9d6      	bls.n	80055ec <HAL_RCC_OscConfig+0x2a0>
 800563e:	e6c6      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8005640:	f7fe fe70 	bl	8004324 <HAL_GetTick>
 8005644:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	f57f ae95 	bpl.w	8005378 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564e:	f7fe fe69 	bl	8004324 <HAL_GetTick>
 8005652:	1b40      	subs	r0, r0, r5
 8005654:	2802      	cmp	r0, #2
 8005656:	d9f6      	bls.n	8005646 <HAL_RCC_OscConfig+0x2fa>
 8005658:	e6b9      	b.n	80053ce <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800565a:	2b01      	cmp	r3, #1
 800565c:	f43f aea2 	beq.w	80053a4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8005660:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	6a2b      	ldr	r3, [r5, #32]
 8005664:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005668:	429a      	cmp	r2, r3
 800566a:	f47f ae9b 	bne.w	80053a4 <HAL_RCC_OscConfig+0x58>
 800566e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005670:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005674:	1ac0      	subs	r0, r0, r3
 8005676:	bf18      	it	ne
 8005678:	2001      	movne	r0, #1
 800567a:	e6a9      	b.n	80053d0 <HAL_RCC_OscConfig+0x84>
 800567c:	40021000 	.word	0x40021000
 8005680:	42420000 	.word	0x42420000

08005684 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005684:	4a0d      	ldr	r2, [pc, #52]	@ (80056bc <HAL_RCC_GetSysClockFreq+0x38>)
 8005686:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005688:	f003 010c 	and.w	r1, r3, #12
 800568c:	2908      	cmp	r1, #8
 800568e:	d112      	bne.n	80056b6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005690:	480b      	ldr	r0, [pc, #44]	@ (80056c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005692:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005696:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005698:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800569a:	d509      	bpl.n	80056b0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800569c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800569e:	4a09      	ldr	r2, [pc, #36]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056a6:	4a08      	ldr	r2, [pc, #32]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x44>)
 80056a8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80056ae:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x48>)
 80056b2:	4358      	muls	r0, r3
 80056b4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80056b6:	4803      	ldr	r0, [pc, #12]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	0800d2f1 	.word	0x0800d2f1
 80056c4:	007a1200 	.word	0x007a1200
 80056c8:	0800d2ef 	.word	0x0800d2ef
 80056cc:	003d0900 	.word	0x003d0900

080056d0 <HAL_RCC_ClockConfig>:
{
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80056d6:	4604      	mov	r4, r0
 80056d8:	b910      	cbnz	r0, 80056e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80056da:	2001      	movs	r0, #1
}
 80056dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4a44      	ldr	r2, [pc, #272]	@ (80057f4 <HAL_RCC_ClockConfig+0x124>)
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	428b      	cmp	r3, r1
 80056ea:	d328      	bcc.n	800573e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	6821      	ldr	r1, [r4, #0]
 80056ee:	078e      	lsls	r6, r1, #30
 80056f0:	d430      	bmi.n	8005754 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f2:	07ca      	lsls	r2, r1, #31
 80056f4:	d443      	bmi.n	800577e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f6:	4a3f      	ldr	r2, [pc, #252]	@ (80057f4 <HAL_RCC_ClockConfig+0x124>)
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	42ab      	cmp	r3, r5
 8005700:	d865      	bhi.n	80057ce <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	4d3c      	ldr	r5, [pc, #240]	@ (80057f8 <HAL_RCC_ClockConfig+0x128>)
 8005706:	f012 0f04 	tst.w	r2, #4
 800570a:	d16c      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570c:	0713      	lsls	r3, r2, #28
 800570e:	d506      	bpl.n	800571e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005710:	686b      	ldr	r3, [r5, #4]
 8005712:	6922      	ldr	r2, [r4, #16]
 8005714:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005718:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800571c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800571e:	f7ff ffb1 	bl	8005684 <HAL_RCC_GetSysClockFreq>
 8005722:	686b      	ldr	r3, [r5, #4]
 8005724:	4a35      	ldr	r2, [pc, #212]	@ (80057fc <HAL_RCC_ClockConfig+0x12c>)
 8005726:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	40d8      	lsrs	r0, r3
 800572e:	4b34      	ldr	r3, [pc, #208]	@ (8005800 <HAL_RCC_ClockConfig+0x130>)
 8005730:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005732:	4b34      	ldr	r3, [pc, #208]	@ (8005804 <HAL_RCC_ClockConfig+0x134>)
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	f7fe fdb3 	bl	80042a0 <HAL_InitTick>
  return HAL_OK;
 800573a:	2000      	movs	r0, #0
 800573c:	e7ce      	b.n	80056dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005748:	6813      	ldr	r3, [r2, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	428b      	cmp	r3, r1
 8005750:	d1c3      	bne.n	80056da <HAL_RCC_ClockConfig+0xa>
 8005752:	e7cb      	b.n	80056ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	4b28      	ldr	r3, [pc, #160]	@ (80057f8 <HAL_RCC_ClockConfig+0x128>)
 8005756:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575a:	bf1e      	ittt	ne
 800575c:	685a      	ldrne	r2, [r3, #4]
 800575e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8005762:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005764:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005766:	bf42      	ittt	mi
 8005768:	685a      	ldrmi	r2, [r3, #4]
 800576a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800576e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68a0      	ldr	r0, [r4, #8]
 8005774:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005778:	4302      	orrs	r2, r0
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	e7b9      	b.n	80056f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577e:	6862      	ldr	r2, [r4, #4]
 8005780:	4e1d      	ldr	r6, [pc, #116]	@ (80057f8 <HAL_RCC_ClockConfig+0x128>)
 8005782:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005784:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005786:	d11a      	bne.n	80057be <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005788:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	d0a5      	beq.n	80056da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005794:	f023 0303 	bic.w	r3, r3, #3
 8005798:	4313      	orrs	r3, r2
 800579a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800579c:	f7fe fdc2 	bl	8004324 <HAL_GetTick>
 80057a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	6873      	ldr	r3, [r6, #4]
 80057a4:	6862      	ldr	r2, [r4, #4]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80057ae:	d0a2      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b0:	f7fe fdb8 	bl	8004324 <HAL_GetTick>
 80057b4:	1bc0      	subs	r0, r0, r7
 80057b6:	4540      	cmp	r0, r8
 80057b8:	d9f3      	bls.n	80057a2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80057ba:	2003      	movs	r0, #3
 80057bc:	e78e      	b.n	80056dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057be:	2a02      	cmp	r2, #2
 80057c0:	d102      	bne.n	80057c8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80057c6:	e7e1      	b.n	800578c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c8:	f013 0f02 	tst.w	r3, #2
 80057cc:	e7de      	b.n	800578c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	432b      	orrs	r3, r5
 80057d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	42ab      	cmp	r3, r5
 80057e0:	f47f af7b 	bne.w	80056da <HAL_RCC_ClockConfig+0xa>
 80057e4:	e78d      	b.n	8005702 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e6:	686b      	ldr	r3, [r5, #4]
 80057e8:	68e1      	ldr	r1, [r4, #12]
 80057ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80057ee:	430b      	orrs	r3, r1
 80057f0:	606b      	str	r3, [r5, #4]
 80057f2:	e78b      	b.n	800570c <HAL_RCC_ClockConfig+0x3c>
 80057f4:	40022000 	.word	0x40022000
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800d2df 	.word	0x0800d2df
 8005800:	20000010 	.word	0x20000010
 8005804:	20000018 	.word	0x20000018

08005808 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005808:	4b04      	ldr	r3, [pc, #16]	@ (800581c <HAL_RCC_GetPCLK1Freq+0x14>)
 800580a:	4a05      	ldr	r2, [pc, #20]	@ (8005820 <HAL_RCC_GetPCLK1Freq+0x18>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	4a03      	ldr	r2, [pc, #12]	@ (8005824 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005816:	6810      	ldr	r0, [r2, #0]
}
 8005818:	40d8      	lsrs	r0, r3
 800581a:	4770      	bx	lr
 800581c:	40021000 	.word	0x40021000
 8005820:	0800d2d7 	.word	0x0800d2d7
 8005824:	20000010 	.word	0x20000010

08005828 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005828:	4b04      	ldr	r3, [pc, #16]	@ (800583c <HAL_RCC_GetPCLK2Freq+0x14>)
 800582a:	4a05      	ldr	r2, [pc, #20]	@ (8005840 <HAL_RCC_GetPCLK2Freq+0x18>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005832:	5cd3      	ldrb	r3, [r2, r3]
 8005834:	4a03      	ldr	r2, [pc, #12]	@ (8005844 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005836:	6810      	ldr	r0, [r2, #0]
}
 8005838:	40d8      	lsrs	r0, r3
 800583a:	4770      	bx	lr
 800583c:	40021000 	.word	0x40021000
 8005840:	0800d2d7 	.word	0x0800d2d7
 8005844:	20000010 	.word	0x20000010

08005848 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005848:	6803      	ldr	r3, [r0, #0]
{
 800584a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800584e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005850:	07d8      	lsls	r0, r3, #31
 8005852:	d521      	bpl.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005854:	4c36      	ldr	r4, [pc, #216]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005856:	69e3      	ldr	r3, [r4, #28]
 8005858:	00d9      	lsls	r1, r3, #3
 800585a:	d42b      	bmi.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800585c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800585e:	69e3      	ldr	r3, [r4, #28]
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005864:	61e3      	str	r3, [r4, #28]
 8005866:	69e3      	ldr	r3, [r4, #28]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4f30      	ldr	r7, [pc, #192]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	05da      	lsls	r2, r3, #23
 8005876:	d51f      	bpl.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005878:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800587a:	686a      	ldr	r2, [r5, #4]
 800587c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005880:	d12e      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005882:	6a23      	ldr	r3, [r4, #32]
 8005884:	686a      	ldr	r2, [r5, #4]
 8005886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588a:	4313      	orrs	r3, r2
 800588c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800588e:	b11e      	cbz	r6, 8005898 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005890:	69e3      	ldr	r3, [r4, #28]
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005898:	682a      	ldr	r2, [r5, #0]
 800589a:	0791      	lsls	r1, r2, #30
 800589c:	d506      	bpl.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800589e:	4924      	ldr	r1, [pc, #144]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058a0:	68a8      	ldr	r0, [r5, #8]
 80058a2:	684b      	ldr	r3, [r1, #4]
 80058a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80058a8:	4303      	orrs	r3, r0
 80058aa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ac:	06d3      	lsls	r3, r2, #27
 80058ae:	d436      	bmi.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058b0:	2000      	movs	r0, #0
 80058b2:	e012      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80058b4:	2600      	movs	r6, #0
 80058b6:	e7db      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80058c0:	f7fe fd30 	bl	8004324 <HAL_GetTick>
 80058c4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	05db      	lsls	r3, r3, #23
 80058ca:	d4d5      	bmi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058cc:	f7fe fd2a 	bl	8004324 <HAL_GetTick>
 80058d0:	eba0 0008 	sub.w	r0, r0, r8
 80058d4:	2864      	cmp	r0, #100	@ 0x64
 80058d6:	d9f6      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80058d8:	2003      	movs	r0, #3
}
 80058da:	b002      	add	sp, #8
 80058dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d0cc      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80058e8:	2001      	movs	r0, #1
 80058ea:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ec:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ee:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058f2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058f8:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058fa:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80058fe:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005900:	d5bf      	bpl.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8005902:	f7fe fd0f 	bl	8004324 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800590a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590c:	6a23      	ldr	r3, [r4, #32]
 800590e:	0798      	lsls	r0, r3, #30
 8005910:	d4b7      	bmi.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fe fd07 	bl	8004324 <HAL_GetTick>
 8005916:	1bc0      	subs	r0, r0, r7
 8005918:	4540      	cmp	r0, r8
 800591a:	d9f7      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800591c:	e7dc      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800591e:	4a04      	ldr	r2, [pc, #16]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005920:	68e9      	ldr	r1, [r5, #12]
 8005922:	6853      	ldr	r3, [r2, #4]
 8005924:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005928:	430b      	orrs	r3, r1
 800592a:	6053      	str	r3, [r2, #4]
 800592c:	e7c0      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
 8005938:	42420000 	.word	0x42420000

0800593c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800593c:	b510      	push	{r4, lr}
 800593e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005940:	6803      	ldr	r3, [r0, #0]
 8005942:	68c1      	ldr	r1, [r0, #12]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800594a:	430a      	orrs	r2, r1
 800594c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800594e:	6882      	ldr	r2, [r0, #8]
 8005950:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005952:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005954:	4302      	orrs	r2, r0
 8005956:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8005958:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 800595c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005960:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005962:	430a      	orrs	r2, r1
 8005964:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	69a1      	ldr	r1, [r4, #24]
 800596a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800596e:	430a      	orrs	r2, r1
 8005970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005972:	4a0e      	ldr	r2, [pc, #56]	@ (80059ac <UART_SetConfig+0x70>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d115      	bne.n	80059a4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005978:	f7ff ff56 	bl	8005828 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800597c:	2319      	movs	r3, #25
 800597e:	4343      	muls	r3, r0
 8005980:	6862      	ldr	r2, [r4, #4]
 8005982:	6820      	ldr	r0, [r4, #0]
 8005984:	0092      	lsls	r2, r2, #2
 8005986:	fbb3 f3f2 	udiv	r3, r3, r2
 800598a:	2264      	movs	r2, #100	@ 0x64
 800598c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005990:	fb02 3311 	mls	r3, r2, r1, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	@ 0x32
 8005998:	fbb3 f3f2 	udiv	r3, r3, r2
 800599c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80059a0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80059a2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7ff ff30 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 80059a8:	e7e8      	b.n	800597c <UART_SetConfig+0x40>
 80059aa:	bf00      	nop
 80059ac:	40013800 	.word	0x40013800

080059b0 <HAL_UART_Init>:
{
 80059b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80059b2:	4604      	mov	r4, r0
 80059b4:	b348      	cbz	r0, 8005a0a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80059ba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059be:	b91b      	cbnz	r3, 80059c8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80059c0:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80059c4:	f7fe fb92 	bl	80040ec <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80059ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80059d0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80059d2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80059d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059d8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80059da:	f7ff ffaf 	bl	800593c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059de:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059f0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059f8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80059fa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a02:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a06:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8005a08:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e7fc      	b.n	8005a08 <HAL_UART_Init+0x58>

08005a0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a0e:	b084      	sub	sp, #16
 8005a10:	a804      	add	r0, sp, #16
 8005a12:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8005a16:	2000      	movs	r0, #0
 8005a18:	b004      	add	sp, #16
 8005a1a:	4770      	bx	lr

08005a1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a1c:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a1e:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8005a22:	2000      	movs	r0, #0
 8005a24:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8005a2c:	4770      	bx	lr

08005a2e <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a2e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8005a32:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a36:	045b      	lsls	r3, r3, #17
 8005a38:	0c5b      	lsrs	r3, r3, #17
 8005a3a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8005a3e:	2000      	movs	r0, #0
 8005a40:	4770      	bx	lr

08005a42 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005a42:	2000      	movs	r0, #0
 8005a44:	4770      	bx	lr

08005a46 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a48:	4604      	mov	r4, r0
 8005a4a:	a804      	add	r0, sp, #16
 8005a4c:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a50:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8005a58:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a5c:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a60:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8005a64:	b004      	add	sp, #16
 8005a66:	bd10      	pop	{r4, pc}

08005a68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a6a:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005a6c:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a6e:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8005a72:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a74:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8005a78:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8005a7c:	0424      	lsls	r4, r4, #16
 8005a7e:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8005a80:	2d03      	cmp	r5, #3
 8005a82:	d803      	bhi.n	8005a8c <USB_ActivateEndpoint+0x24>
 8005a84:	e8df f005 	tbb	[pc, r5]
 8005a88:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8005a8c:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a8e:	f248 0680 	movw	r6, #32896	@ 0x8080
 8005a92:	4334      	orrs	r4, r6
 8005a94:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a98:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8005a9c:	4f9f      	ldr	r7, [pc, #636]	@ (8005d1c <USB_ActivateEndpoint+0x2b4>)
 8005a9e:	b2a4      	uxth	r4, r4
 8005aa0:	403c      	ands	r4, r7
 8005aa2:	4314      	orrs	r4, r2
 8005aa4:	4334      	orrs	r4, r6
 8005aa6:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8005aaa:	7b0c      	ldrb	r4, [r1, #12]
 8005aac:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	f040 808d 	bne.w	8005bd0 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ab6:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8005ab8:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aba:	0864      	lsrs	r4, r4, #1
 8005abc:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8005abe:	b37e      	cbz	r6, 8005b20 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ac0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8005ac4:	b289      	uxth	r1, r1
 8005ac6:	4461      	add	r1, ip
 8005ac8:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005acc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005ad0:	0649      	lsls	r1, r1, #25
 8005ad2:	d509      	bpl.n	8005ae8 <USB_ActivateEndpoint+0x80>
 8005ad4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005ad8:	b289      	uxth	r1, r1
 8005ada:	4039      	ands	r1, r7
 8005adc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005ae0:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8005ae4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ae8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005aec:	4c8c      	ldr	r4, [pc, #560]	@ (8005d20 <USB_ActivateEndpoint+0x2b8>)
 8005aee:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8005af0:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005af2:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005af6:	d001      	beq.n	8005afc <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005af8:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005afc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005b00:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005b04:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8005b08:	e04c      	b.n	8005ba4 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8005b0a:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8005b0c:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8005b10:	e7bd      	b.n	8005a8e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b12:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8005b16:	2000      	movs	r0, #0
 8005b18:	e7b9      	b.n	8005a8e <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b1a:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8005b1e:	e7fa      	b.n	8005b16 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b20:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b24:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b26:	b2ad      	uxth	r5, r5
 8005b28:	4465      	add	r5, ip
 8005b2a:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b2e:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8005b32:	293e      	cmp	r1, #62	@ 0x3e
 8005b34:	b2a4      	uxth	r4, r4
 8005b36:	4464      	add	r4, ip
 8005b38:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8005b3c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005b40:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8005b44:	d92f      	bls.n	8005ba6 <USB_ActivateEndpoint+0x13e>
 8005b46:	094d      	lsrs	r5, r1, #5
 8005b48:	06ce      	lsls	r6, r1, #27
 8005b4a:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005b4e:	bf08      	it	eq
 8005b50:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8005b54:	b289      	uxth	r1, r1
 8005b56:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8005b5a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8005b5e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005b62:	b289      	uxth	r1, r1
 8005b64:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b68:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005b6c:	044f      	lsls	r7, r1, #17
 8005b6e:	d50d      	bpl.n	8005b8c <USB_ActivateEndpoint+0x124>
 8005b70:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005b74:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005b78:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005b7c:	0409      	lsls	r1, r1, #16
 8005b7e:	0c09      	lsrs	r1, r1, #16
 8005b80:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005b84:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005b88:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8005b8c:	4c65      	ldr	r4, [pc, #404]	@ (8005d24 <USB_ActivateEndpoint+0x2bc>)
 8005b8e:	b9c2      	cbnz	r2, 8005bc2 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	b292      	uxth	r2, r2
 8005b94:	4022      	ands	r2, r4
 8005b96:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8005b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ba2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ba6:	b911      	cbnz	r1, 8005bae <USB_ActivateEndpoint+0x146>
 8005ba8:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005bac:	e7d5      	b.n	8005b5a <USB_ActivateEndpoint+0xf2>
 8005bae:	084d      	lsrs	r5, r1, #1
 8005bb0:	07c9      	lsls	r1, r1, #31
 8005bb2:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8005bb6:	bf48      	it	mi
 8005bb8:	3501      	addmi	r5, #1
 8005bba:	b289      	uxth	r1, r1
 8005bbc:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8005bc0:	e7cf      	b.n	8005b62 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005bc2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005bc6:	b289      	uxth	r1, r1
 8005bc8:	4021      	ands	r1, r4
 8005bca:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8005bce:	e795      	b.n	8005afc <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8005bd0:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bd2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8005bd6:	d15b      	bne.n	8005c90 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bd8:	b2a4      	uxth	r4, r4
 8005bda:	403c      	ands	r4, r7
 8005bdc:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8005be0:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8005be4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005be8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8005bec:	890e      	ldrh	r6, [r1, #8]
 8005bee:	b2a4      	uxth	r4, r4
 8005bf0:	0876      	lsrs	r6, r6, #1
 8005bf2:	4464      	add	r4, ip
 8005bf4:	0076      	lsls	r6, r6, #1
 8005bf6:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8005bfa:	894e      	ldrh	r6, [r1, #10]
 8005bfc:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8005c00:	0876      	lsrs	r6, r6, #1
 8005c02:	b2a4      	uxth	r4, r4
 8005c04:	4464      	add	r4, ip
 8005c06:	0076      	lsls	r6, r6, #1
 8005c08:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8005c0c:	7849      	ldrb	r1, [r1, #1]
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d148      	bne.n	8005ca4 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c12:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c16:	044e      	lsls	r6, r1, #17
 8005c18:	d50d      	bpl.n	8005c36 <USB_ActivateEndpoint+0x1ce>
 8005c1a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c1e:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005c22:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005c26:	0409      	lsls	r1, r1, #16
 8005c28:	0c09      	lsrs	r1, r1, #16
 8005c2a:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005c2e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005c32:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c36:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c3a:	064d      	lsls	r5, r1, #25
 8005c3c:	d50d      	bpl.n	8005c5a <USB_ActivateEndpoint+0x1f2>
 8005c3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c42:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005c46:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005c4a:	0409      	lsls	r1, r1, #16
 8005c4c:	0c09      	lsrs	r1, r1, #16
 8005c4e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005c52:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8005c56:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c5a:	f248 0480 	movw	r4, #32896	@ 0x8080
 8005c5e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c62:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005c66:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005c6a:	0409      	lsls	r1, r1, #16
 8005c6c:	0c09      	lsrs	r1, r1, #16
 8005c6e:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8005c72:	4321      	orrs	r1, r4
 8005c74:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c78:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005c7c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005c80:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8005c84:	0409      	lsls	r1, r1, #16
 8005c86:	0c09      	lsrs	r1, r1, #16
 8005c88:	430c      	orrs	r4, r1
 8005c8a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8005c8e:	e789      	b.n	8005ba4 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c90:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8005c94:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8005c98:	0424      	lsls	r4, r4, #16
 8005c9a:	0c24      	lsrs	r4, r4, #16
 8005c9c:	4326      	orrs	r6, r4
 8005c9e:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8005ca2:	e7a1      	b.n	8005be8 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005ca8:	044c      	lsls	r4, r1, #17
 8005caa:	d50d      	bpl.n	8005cc8 <USB_ActivateEndpoint+0x260>
 8005cac:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cb0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005cb4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005cb8:	0409      	lsls	r1, r1, #16
 8005cba:	0c09      	lsrs	r1, r1, #16
 8005cbc:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8005cc0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005cc4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005ccc:	0649      	lsls	r1, r1, #25
 8005cce:	d50d      	bpl.n	8005cec <USB_ActivateEndpoint+0x284>
 8005cd0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cd4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8005cd8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005cdc:	0409      	lsls	r1, r1, #16
 8005cde:	0c09      	lsrs	r1, r1, #16
 8005ce0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005ce4:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8005ce8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8005d20 <USB_ActivateEndpoint+0x2b8>)
 8005cf2:	b289      	uxth	r1, r1
 8005cf4:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8005cf6:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cf8:	bf18      	it	ne
 8005cfa:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cfe:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005d02:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8005d06:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8005d0e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8005d12:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8005d16:	0409      	lsls	r1, r1, #16
 8005d18:	0c09      	lsrs	r1, r1, #16
 8005d1a:	e6ef      	b.n	8005afc <USB_ActivateEndpoint+0x94>
 8005d1c:	ffff8f8f 	.word	0xffff8f8f
 8005d20:	ffff8fbf 	.word	0xffff8fbf
 8005d24:	ffffbf8f 	.word	0xffffbf8f

08005d28 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8005d28:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d2a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8005d2c:	7b09      	ldrb	r1, [r1, #12]
 8005d2e:	bbd9      	cbnz	r1, 8005da8 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8005d30:	b30a      	cbz	r2, 8005d76 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d36:	0651      	lsls	r1, r2, #25
 8005d38:	d50d      	bpl.n	8005d56 <USB_DeactivateEndpoint+0x2e>
 8005d3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d3e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005d42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d46:	0412      	lsls	r2, r2, #16
 8005d48:	0c12      	lsrs	r2, r2, #16
 8005d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d4e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005d52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d5a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d62:	0412      	lsls	r2, r2, #16
 8005d64:	0c12      	lsrs	r2, r2, #16
 8005d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d6e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005d72:	2000      	movs	r0, #0
 8005d74:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d7a:	0452      	lsls	r2, r2, #17
 8005d7c:	d50d      	bpl.n	8005d9a <USB_DeactivateEndpoint+0x72>
 8005d7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d82:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005d86:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005d8a:	0412      	lsls	r2, r2, #16
 8005d8c:	0c12      	lsrs	r2, r2, #16
 8005d8e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005d96:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005d9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005da2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005da6:	e7dc      	b.n	8005d62 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d14a      	bne.n	8005e42 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dac:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005db0:	0451      	lsls	r1, r2, #17
 8005db2:	d50d      	bpl.n	8005dd0 <USB_DeactivateEndpoint+0xa8>
 8005db4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005db8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005dbc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005dc0:	0412      	lsls	r2, r2, #16
 8005dc2:	0c12      	lsrs	r2, r2, #16
 8005dc4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005dc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dcc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005dd4:	0652      	lsls	r2, r2, #25
 8005dd6:	d50d      	bpl.n	8005df4 <USB_DeactivateEndpoint+0xcc>
 8005dd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ddc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005de0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005de4:	0412      	lsls	r2, r2, #16
 8005de6:	0c12      	lsrs	r2, r2, #16
 8005de8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dec:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005df0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df4:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8005df8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005dfc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005e00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e04:	0412      	lsls	r2, r2, #16
 8005e06:	0c12      	lsrs	r2, r2, #16
 8005e08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e0c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005e10:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e14:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e1c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e20:	0412      	lsls	r2, r2, #16
 8005e22:	0c12      	lsrs	r2, r2, #16
 8005e24:	430a      	orrs	r2, r1
 8005e26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e2e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e36:	0412      	lsls	r2, r2, #16
 8005e38:	0c12      	lsrs	r2, r2, #16
 8005e3a:	4311      	orrs	r1, r2
 8005e3c:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8005e40:	e797      	b.n	8005d72 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e46:	0451      	lsls	r1, r2, #17
 8005e48:	d50d      	bpl.n	8005e66 <USB_DeactivateEndpoint+0x13e>
 8005e4a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e4e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005e52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e56:	0412      	lsls	r2, r2, #16
 8005e58:	0c12      	lsrs	r2, r2, #16
 8005e5a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005e5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e6a:	0652      	lsls	r2, r2, #25
 8005e6c:	d50d      	bpl.n	8005e8a <USB_DeactivateEndpoint+0x162>
 8005e6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e72:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005e76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e7a:	0412      	lsls	r2, r2, #16
 8005e7c:	0c12      	lsrs	r2, r2, #16
 8005e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e82:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8005e86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8a:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005e8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005e92:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005e96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005e9a:	0412      	lsls	r2, r2, #16
 8005e9c:	0c12      	lsrs	r2, r2, #16
 8005e9e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005ea2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ea6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005eaa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005eae:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8005eb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb6:	0412      	lsls	r2, r2, #16
 8005eb8:	0c12      	lsrs	r2, r2, #16
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005ec4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ec8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005ecc:	e7b3      	b.n	8005e36 <USB_DeactivateEndpoint+0x10e>

08005ece <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005ece:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ed0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005ed2:	b18b      	cbz	r3, 8005ef8 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ed4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005edc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ef8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f0c:	e7ec      	b.n	8005ee8 <USB_EPSetStall+0x1a>

08005f0e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005f0e:	7b0b      	ldrb	r3, [r1, #12]
 8005f10:	bb3b      	cbnz	r3, 8005f62 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8005f12:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f14:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8005f16:	b333      	cbz	r3, 8005f66 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f18:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f1c:	065b      	lsls	r3, r3, #25
 8005f1e:	d50d      	bpl.n	8005f3c <USB_EPClearStall+0x2e>
 8005f20:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8005f3c:	78cb      	ldrb	r3, [r1, #3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d00f      	beq.n	8005f62 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f42:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005f62:	2000      	movs	r0, #0
 8005f64:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f6a:	045b      	lsls	r3, r3, #17
 8005f6c:	d50d      	bpl.n	8005f8a <USB_EPClearStall+0x7c>
 8005f6e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f7a:	041b      	lsls	r3, r3, #16
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f86:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	0c1b      	lsrs	r3, r3, #16
 8005f9a:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005f9e:	e7da      	b.n	8005f56 <USB_EPClearStall+0x48>

08005fa0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005fa0:	b911      	cbnz	r1, 8005fa8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8005fa8:	2000      	movs	r0, #0
 8005faa:	4770      	bx	lr

08005fac <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005fac:	2000      	movs	r0, #0
 8005fae:	4770      	bx	lr

08005fb0 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	4770      	bx	lr

08005fb4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fb4:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8005fb8:	b280      	uxth	r0, r0
 8005fba:	4770      	bx	lr

08005fbc <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	4770      	bx	lr

08005fc0 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fc0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fc4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fc6:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	d100      	bne.n	8005fd6 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005fd4:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005fd6:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005fda:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005fde:	e7f7      	b.n	8005fd0 <USB_WritePMA+0x10>

08005fe0 <USB_EPStartXfer>:
{
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8005fe4:	784b      	ldrb	r3, [r1, #1]
{
 8005fe6:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8005fe8:	2b01      	cmp	r3, #1
{
 8005fea:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8005fec:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8005fee:	f040 8118 	bne.w	8006222 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8005ff2:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8005ff6:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ff8:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 8005ffa:	454f      	cmp	r7, r9
 8005ffc:	bf28      	it	cs
 8005ffe:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8006000:	bb0a      	cbnz	r2, 8006046 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006002:	b2bf      	uxth	r7, r7
 8006004:	88ea      	ldrh	r2, [r5, #6]
 8006006:	463b      	mov	r3, r7
 8006008:	f7ff ffda 	bl	8005fc0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800600c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8006010:	7829      	ldrb	r1, [r5, #0]
 8006012:	b280      	uxth	r0, r0
 8006014:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8006018:	0109      	lsls	r1, r1, #4
 800601a:	4402      	add	r2, r0
 800601c:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800601e:	782a      	ldrb	r2, [r5, #0]
 8006020:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8006034:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8006042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8006046:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006048:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 800604c:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800604e:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006050:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8006054:	f040 80d0 	bne.w	80061f8 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8006058:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800605a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800605e:	f080 80b4 	bcs.w	80061ca <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006062:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006066:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800606a:	0412      	lsls	r2, r2, #16
 800606c:	0c12      	lsrs	r2, r2, #16
 800606e:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8006072:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006076:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800607a:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800607e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8006082:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006084:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8006088:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800608a:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800608e:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006090:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006094:	d04e      	beq.n	8006134 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006096:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800609a:	4472      	add	r2, lr
 800609c:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060a0:	896a      	ldrh	r2, [r5, #10]
 80060a2:	f7ff ff8d 	bl	8005fc0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80060a6:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80060a8:	bf36      	itet	cc
 80060aa:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80060ac:	2300      	movcs	r3, #0
 80060ae:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060b0:	786a      	ldrb	r2, [r5, #1]
 80060b2:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80060b4:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060b8:	b2b3      	uxth	r3, r6
 80060ba:	bb7a      	cbnz	r2, 800611c <USB_EPStartXfer+0x13c>
 80060bc:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80060c0:	7828      	ldrb	r0, [r5, #0]
 80060c2:	b292      	uxth	r2, r2
 80060c4:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80060c8:	0100      	lsls	r0, r0, #4
 80060ca:	4411      	add	r1, r2
 80060cc:	5a42      	ldrh	r2, [r0, r1]
 80060ce:	2e3e      	cmp	r6, #62	@ 0x3e
 80060d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80060d4:	5242      	strh	r2, [r0, r1]
 80060d6:	d914      	bls.n	8006102 <USB_EPStartXfer+0x122>
 80060d8:	5a42      	ldrh	r2, [r0, r1]
 80060da:	0977      	lsrs	r7, r6, #5
 80060dc:	06f6      	lsls	r6, r6, #27
 80060de:	bf08      	it	eq
 80060e0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80060e4:	b292      	uxth	r2, r2
 80060e6:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80060ea:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80060ee:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80060f2:	b292      	uxth	r2, r2
 80060f4:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f6:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f8:	4651      	mov	r1, sl
 80060fa:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060fc:	f7ff ff60 	bl	8005fc0 <USB_WritePMA>
 8006100:	e78d      	b.n	800601e <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006102:	b90e      	cbnz	r6, 8006108 <USB_EPStartXfer+0x128>
 8006104:	5a42      	ldrh	r2, [r0, r1]
 8006106:	e7f0      	b.n	80060ea <USB_EPStartXfer+0x10a>
 8006108:	07f2      	lsls	r2, r6, #31
 800610a:	5a42      	ldrh	r2, [r0, r1]
 800610c:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8006110:	bf48      	it	mi
 8006112:	3701      	addmi	r7, #1
 8006114:	b292      	uxth	r2, r2
 8006116:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800611a:	e7ea      	b.n	80060f2 <USB_EPStartXfer+0x112>
 800611c:	2a01      	cmp	r2, #1
 800611e:	d1ea      	bne.n	80060f6 <USB_EPStartXfer+0x116>
 8006120:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8006124:	7829      	ldrb	r1, [r5, #0]
 8006126:	b280      	uxth	r0, r0
 8006128:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800612c:	0109      	lsls	r1, r1, #4
 800612e:	4402      	add	r2, r0
 8006130:	528b      	strh	r3, [r1, r2]
 8006132:	e7e0      	b.n	80060f6 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006134:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8006138:	4472      	add	r2, lr
 800613a:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800613e:	892a      	ldrh	r2, [r5, #8]
 8006140:	f7ff ff3e 	bl	8005fc0 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006144:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8006146:	bf36      	itet	cc
 8006148:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800614a:	4643      	movcs	r3, r8
 800614c:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800614e:	786a      	ldrb	r2, [r5, #1]
 8006150:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8006152:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006156:	b2b3      	uxth	r3, r6
 8006158:	bb5a      	cbnz	r2, 80061b2 <USB_EPStartXfer+0x1d2>
 800615a:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800615e:	7828      	ldrb	r0, [r5, #0]
 8006160:	b292      	uxth	r2, r2
 8006162:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8006166:	0100      	lsls	r0, r0, #4
 8006168:	4411      	add	r1, r2
 800616a:	5a42      	ldrh	r2, [r0, r1]
 800616c:	2e3e      	cmp	r6, #62	@ 0x3e
 800616e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006172:	5242      	strh	r2, [r0, r1]
 8006174:	d910      	bls.n	8006198 <USB_EPStartXfer+0x1b8>
 8006176:	5a42      	ldrh	r2, [r0, r1]
 8006178:	0977      	lsrs	r7, r6, #5
 800617a:	06f6      	lsls	r6, r6, #27
 800617c:	bf08      	it	eq
 800617e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006182:	b292      	uxth	r2, r2
 8006184:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006188:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800618c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006190:	b292      	uxth	r2, r2
 8006192:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006194:	896a      	ldrh	r2, [r5, #10]
 8006196:	e7af      	b.n	80060f8 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006198:	b90e      	cbnz	r6, 800619e <USB_EPStartXfer+0x1be>
 800619a:	5a42      	ldrh	r2, [r0, r1]
 800619c:	e7f4      	b.n	8006188 <USB_EPStartXfer+0x1a8>
 800619e:	07f2      	lsls	r2, r6, #31
 80061a0:	5a42      	ldrh	r2, [r0, r1]
 80061a2:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80061a6:	bf48      	it	mi
 80061a8:	3701      	addmi	r7, #1
 80061aa:	b292      	uxth	r2, r2
 80061ac:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80061b0:	e7ee      	b.n	8006190 <USB_EPStartXfer+0x1b0>
 80061b2:	2a01      	cmp	r2, #1
 80061b4:	d1ee      	bne.n	8006194 <USB_EPStartXfer+0x1b4>
 80061b6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80061ba:	7829      	ldrb	r1, [r5, #0]
 80061bc:	b280      	uxth	r0, r0
 80061be:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80061c2:	0109      	lsls	r1, r1, #4
 80061c4:	4402      	add	r2, r0
 80061c6:	528b      	strh	r3, [r1, r2]
 80061c8:	e7e4      	b.n	8006194 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80061ca:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80061ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80061d2:	0412      	lsls	r2, r2, #16
 80061d4:	0c12      	lsrs	r2, r2, #16
 80061d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061de:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061e2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80061e6:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	441a      	add	r2, r3
 80061ee:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061f0:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f4:	892a      	ldrh	r2, [r5, #8]
 80061f6:	e781      	b.n	80060fc <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80061f8:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061fa:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80061fe:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006200:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006204:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006206:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006208:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800620a:	d506      	bpl.n	800621a <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800620c:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8006210:	4432      	add	r2, r6
 8006212:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006216:	896a      	ldrh	r2, [r5, #10]
 8006218:	e770      	b.n	80060fc <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800621a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800621e:	4432      	add	r2, r6
 8006220:	e7e6      	b.n	80061f0 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8006222:	2a00      	cmp	r2, #0
 8006224:	d13b      	bne.n	800629e <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 8006226:	698b      	ldr	r3, [r1, #24]
 8006228:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800622a:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800622e:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8006230:	bf84      	itt	hi
 8006232:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 8006234:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006236:	7829      	ldrb	r1, [r5, #0]
 8006238:	61aa      	str	r2, [r5, #24]
 800623a:	b280      	uxth	r0, r0
 800623c:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8006240:	0109      	lsls	r1, r1, #4
 8006242:	4402      	add	r2, r0
 8006244:	5a88      	ldrh	r0, [r1, r2]
 8006246:	2b3e      	cmp	r3, #62	@ 0x3e
 8006248:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800624c:	5288      	strh	r0, [r1, r2]
 800624e:	d91a      	bls.n	8006286 <USB_EPStartXfer+0x2a6>
 8006250:	0958      	lsrs	r0, r3, #5
 8006252:	06de      	lsls	r6, r3, #27
 8006254:	5a8b      	ldrh	r3, [r1, r2]
 8006256:	bf08      	it	eq
 8006258:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800625c:	b29b      	uxth	r3, r3
 800625e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29b      	uxth	r3, r3
 800626c:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800626e:	782a      	ldrb	r2, [r5, #0]
 8006270:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006274:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8006284:	e6d6      	b.n	8006034 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006286:	b90b      	cbnz	r3, 800628c <USB_EPStartXfer+0x2ac>
 8006288:	5a8b      	ldrh	r3, [r1, r2]
 800628a:	e7ea      	b.n	8006262 <USB_EPStartXfer+0x282>
 800628c:	0858      	lsrs	r0, r3, #1
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	5a8b      	ldrh	r3, [r1, r2]
 8006292:	bf48      	it	mi
 8006294:	3001      	addmi	r0, #1
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800629c:	e7e5      	b.n	800626a <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800629e:	78ca      	ldrb	r2, [r1, #3]
 80062a0:	2a02      	cmp	r2, #2
 80062a2:	d170      	bne.n	8006386 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d138      	bne.n	800631a <USB_EPStartXfer+0x33a>
 80062a8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80062ac:	780b      	ldrb	r3, [r1, #0]
 80062ae:	b292      	uxth	r2, r2
 80062b0:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	4410      	add	r0, r2
 80062b8:	5ac2      	ldrh	r2, [r0, r3]
 80062ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80062be:	52c2      	strh	r2, [r0, r3]
 80062c0:	690a      	ldr	r2, [r1, #16]
 80062c2:	2a3e      	cmp	r2, #62	@ 0x3e
 80062c4:	d946      	bls.n	8006354 <USB_EPStartXfer+0x374>
 80062c6:	5ac1      	ldrh	r1, [r0, r3]
 80062c8:	0956      	lsrs	r6, r2, #5
 80062ca:	06d7      	lsls	r7, r2, #27
 80062cc:	bf08      	it	eq
 80062ce:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80062d2:	b289      	uxth	r1, r1
 80062d4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80062d8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80062dc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80062e0:	b289      	uxth	r1, r1
 80062e2:	52c1      	strh	r1, [r0, r3]
 80062e4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80062e8:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80062ec:	b280      	uxth	r0, r0
 80062ee:	4401      	add	r1, r0
 80062f0:	5ac8      	ldrh	r0, [r1, r3]
 80062f2:	2a3e      	cmp	r2, #62	@ 0x3e
 80062f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80062f8:	52c8      	strh	r0, [r1, r3]
 80062fa:	d938      	bls.n	800636e <USB_EPStartXfer+0x38e>
 80062fc:	0950      	lsrs	r0, r2, #5
 80062fe:	06d7      	lsls	r7, r2, #27
 8006300:	5aca      	ldrh	r2, [r1, r3]
 8006302:	bf08      	it	eq
 8006304:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006308:	b292      	uxth	r2, r2
 800630a:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800630e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006312:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006316:	b292      	uxth	r2, r2
 8006318:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800631a:	69eb      	ldr	r3, [r5, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0a6      	beq.n	800626e <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006320:	f244 0340 	movw	r3, #16448	@ 0x4040
 8006324:	782a      	ldrb	r2, [r5, #0]
 8006326:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800632a:	ea03 0001 	and.w	r0, r3, r1
 800632e:	438b      	bics	r3, r1
 8006330:	d001      	beq.n	8006336 <USB_EPStartXfer+0x356>
 8006332:	2800      	cmp	r0, #0
 8006334:	d19b      	bne.n	800626e <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006336:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800633a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	041b      	lsls	r3, r3, #16
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800634e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006352:	e78c      	b.n	800626e <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006354:	b90a      	cbnz	r2, 800635a <USB_EPStartXfer+0x37a>
 8006356:	5ac1      	ldrh	r1, [r0, r3]
 8006358:	e7be      	b.n	80062d8 <USB_EPStartXfer+0x2f8>
 800635a:	07d1      	lsls	r1, r2, #31
 800635c:	5ac1      	ldrh	r1, [r0, r3]
 800635e:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8006362:	bf48      	it	mi
 8006364:	3601      	addmi	r6, #1
 8006366:	b289      	uxth	r1, r1
 8006368:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800636c:	e7b8      	b.n	80062e0 <USB_EPStartXfer+0x300>
 800636e:	b90a      	cbnz	r2, 8006374 <USB_EPStartXfer+0x394>
 8006370:	5aca      	ldrh	r2, [r1, r3]
 8006372:	e7cc      	b.n	800630e <USB_EPStartXfer+0x32e>
 8006374:	0850      	lsrs	r0, r2, #1
 8006376:	07d6      	lsls	r6, r2, #31
 8006378:	5aca      	ldrh	r2, [r1, r3]
 800637a:	bf48      	it	mi
 800637c:	3001      	addmi	r0, #1
 800637e:	b292      	uxth	r2, r2
 8006380:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8006384:	e7c7      	b.n	8006316 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8006386:	2a01      	cmp	r2, #1
 8006388:	d15d      	bne.n	8006446 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800638a:	698a      	ldr	r2, [r1, #24]
 800638c:	6909      	ldr	r1, [r1, #16]
 800638e:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8006390:	bf94      	ite	ls
 8006392:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8006394:	1a50      	subhi	r0, r2, r1
 8006396:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8006398:	bf88      	it	hi
 800639a:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800639c:	2b00      	cmp	r3, #0
 800639e:	f47f af66 	bne.w	800626e <USB_EPStartXfer+0x28e>
 80063a2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80063a6:	782b      	ldrb	r3, [r5, #0]
 80063a8:	b289      	uxth	r1, r1
 80063aa:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	4408      	add	r0, r1
 80063b2:	5ac1      	ldrh	r1, [r0, r3]
 80063b4:	2a3e      	cmp	r2, #62	@ 0x3e
 80063b6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80063ba:	52c1      	strh	r1, [r0, r3]
 80063bc:	d92b      	bls.n	8006416 <USB_EPStartXfer+0x436>
 80063be:	06d1      	lsls	r1, r2, #27
 80063c0:	5ac1      	ldrh	r1, [r0, r3]
 80063c2:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80063c6:	bf08      	it	eq
 80063c8:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80063cc:	b289      	uxth	r1, r1
 80063ce:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80063d2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80063d6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80063da:	b289      	uxth	r1, r1
 80063dc:	52c1      	strh	r1, [r0, r3]
 80063de:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80063e2:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80063e6:	b280      	uxth	r0, r0
 80063e8:	4401      	add	r1, r0
 80063ea:	5ac8      	ldrh	r0, [r1, r3]
 80063ec:	2a3e      	cmp	r2, #62	@ 0x3e
 80063ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80063f2:	52c8      	strh	r0, [r1, r3]
 80063f4:	d91b      	bls.n	800642e <USB_EPStartXfer+0x44e>
 80063f6:	0950      	lsrs	r0, r2, #5
 80063f8:	06d6      	lsls	r6, r2, #27
 80063fa:	5aca      	ldrh	r2, [r1, r3]
 80063fc:	bf08      	it	eq
 80063fe:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8006402:	b292      	uxth	r2, r2
 8006404:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8006408:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800640c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006410:	b292      	uxth	r2, r2
 8006412:	52ca      	strh	r2, [r1, r3]
 8006414:	e72b      	b.n	800626e <USB_EPStartXfer+0x28e>
 8006416:	b90a      	cbnz	r2, 800641c <USB_EPStartXfer+0x43c>
 8006418:	5ac1      	ldrh	r1, [r0, r3]
 800641a:	e7da      	b.n	80063d2 <USB_EPStartXfer+0x3f2>
 800641c:	5ac1      	ldrh	r1, [r0, r3]
 800641e:	0856      	lsrs	r6, r2, #1
 8006420:	07d7      	lsls	r7, r2, #31
 8006422:	bf48      	it	mi
 8006424:	3601      	addmi	r6, #1
 8006426:	b289      	uxth	r1, r1
 8006428:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800642c:	e7d5      	b.n	80063da <USB_EPStartXfer+0x3fa>
 800642e:	b90a      	cbnz	r2, 8006434 <USB_EPStartXfer+0x454>
 8006430:	5aca      	ldrh	r2, [r1, r3]
 8006432:	e7e9      	b.n	8006408 <USB_EPStartXfer+0x428>
 8006434:	0850      	lsrs	r0, r2, #1
 8006436:	07d2      	lsls	r2, r2, #31
 8006438:	5aca      	ldrh	r2, [r1, r3]
 800643a:	bf48      	it	mi
 800643c:	3001      	addmi	r0, #1
 800643e:	b292      	uxth	r2, r2
 8006440:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8006444:	e7e4      	b.n	8006410 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8006446:	2001      	movs	r0, #1
 8006448:	e5fb      	b.n	8006042 <USB_EPStartXfer+0x62>

0800644a <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800644a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800644e:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006450:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006454:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8006456:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006458:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800645a:	462e      	mov	r6, r5
 800645c:	3402      	adds	r4, #2
 800645e:	b936      	cbnz	r6, 800646e <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006460:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8006462:	bf44      	itt	mi
 8006464:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006468:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800646e:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8006472:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8006474:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006476:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800647a:	0a12      	lsrs	r2, r2, #8
 800647c:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8006480:	e7ec      	b.n	800645c <USB_ReadPMA+0x12>

08006482 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006482:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8006486:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006488:	b16b      	cbz	r3, 80064a6 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800648a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800648e:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8006492:	28ff      	cmp	r0, #255	@ 0xff
 8006494:	d007      	beq.n	80064a6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4621      	mov	r1, r4
 800649a:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800649e:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80064a0:	23ff      	movs	r3, #255	@ 0xff
 80064a2:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80064a6:	2000      	movs	r0, #0
 80064a8:	bd10      	pop	{r4, pc}
	...

080064ac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80064ac:	2343      	movs	r3, #67	@ 0x43
 80064ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80064b0:	4800      	ldr	r0, [pc, #0]	@ (80064b4 <USBD_CDC_GetFSCfgDesc+0x8>)
 80064b2:	4770      	bx	lr
 80064b4:	20000060 	.word	0x20000060

080064b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80064b8:	2343      	movs	r3, #67	@ 0x43
 80064ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80064bc:	4800      	ldr	r0, [pc, #0]	@ (80064c0 <USBD_CDC_GetHSCfgDesc+0x8>)
 80064be:	4770      	bx	lr
 80064c0:	200000a4 	.word	0x200000a4

080064c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80064c4:	2343      	movs	r3, #67	@ 0x43
 80064c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80064c8:	4800      	ldr	r0, [pc, #0]	@ (80064cc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80064ca:	4770      	bx	lr
 80064cc:	2000001c 	.word	0x2000001c

080064d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80064d0:	230a      	movs	r3, #10
 80064d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80064d4:	4800      	ldr	r0, [pc, #0]	@ (80064d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80064d6:	4770      	bx	lr
 80064d8:	20000120 	.word	0x20000120

080064dc <USBD_CDC_DataOut>:
{
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064e0:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064e4:	f000 ff66 	bl	80073b4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80064e8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064ec:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 80064f0:	b14b      	cbz	r3, 8006506 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064f2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80064f6:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8006500:	4798      	blx	r3
    return USBD_OK;
 8006502:	2000      	movs	r0, #0
}
 8006504:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006506:	2002      	movs	r0, #2
 8006508:	e7fc      	b.n	8006504 <USBD_CDC_DataOut+0x28>

0800650a <USBD_CDC_DataIn>:
{
 800650a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800650c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8006510:	b1ce      	cbz	r6, 8006546 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006512:	2214      	movs	r2, #20
 8006514:	fb02 0201 	mla	r2, r2, r1, r0
 8006518:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800651a:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800651e:	b173      	cbz	r3, 800653e <USBD_CDC_DataIn+0x34>
 8006520:	2728      	movs	r7, #40	@ 0x28
 8006522:	fb07 5401 	mla	r4, r7, r1, r5
 8006526:	6a24      	ldr	r4, [r4, #32]
 8006528:	fbb3 f5f4 	udiv	r5, r3, r4
 800652c:	fb04 3315 	mls	r3, r4, r5, r3
 8006530:	b92b      	cbnz	r3, 800653e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8006532:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006534:	461a      	mov	r2, r3
 8006536:	f000 ff2b 	bl	8007390 <USBD_LL_Transmit>
    return USBD_OK;
 800653a:	2000      	movs	r0, #0
}
 800653c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8006544:	e7f9      	b.n	800653a <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8006546:	2002      	movs	r0, #2
 8006548:	e7f8      	b.n	800653c <USBD_CDC_DataIn+0x32>

0800654a <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800654a:	2300      	movs	r3, #0
{
 800654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800654e:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8006550:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8006554:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006558:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 800655c:	4604      	mov	r4, r0
 800655e:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006560:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006564:	d022      	beq.n	80065ac <USBD_CDC_Setup+0x62>
 8006566:	2b20      	cmp	r3, #32
 8006568:	d13a      	bne.n	80065e0 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800656a:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800656c:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800656e:	b1ba      	cbz	r2, 80065a0 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8006570:	0639      	lsls	r1, r7, #24
 8006572:	d50b      	bpl.n	800658c <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006574:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8006578:	4618      	mov	r0, r3
 800657a:	688f      	ldr	r7, [r1, #8]
 800657c:	4631      	mov	r1, r6
 800657e:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006580:	4631      	mov	r1, r6
 8006582:	4620      	mov	r0, r4
 8006584:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006586:	f000 fc4d 	bl	8006e24 <USBD_CtlSendData>
 800658a:	e006      	b.n	800659a <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800658c:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800658e:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006592:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006596:	f000 fc5a 	bl	8006e4e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800659a:	2000      	movs	r0, #0
}
 800659c:	b003      	add	sp, #12
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065a0:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 80065a4:	6884      	ldr	r4, [r0, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	47a0      	blx	r4
 80065aa:	e7f6      	b.n	800659a <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 80065ac:	784b      	ldrb	r3, [r1, #1]
 80065ae:	2b0a      	cmp	r3, #10
 80065b0:	d00a      	beq.n	80065c8 <USBD_CDC_Setup+0x7e>
 80065b2:	2b0b      	cmp	r3, #11
 80065b4:	d010      	beq.n	80065d8 <USBD_CDC_Setup+0x8e>
 80065b6:	b99b      	cbnz	r3, 80065e0 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d10f      	bne.n	80065e0 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80065c0:	2202      	movs	r2, #2
 80065c2:	f10d 0106 	add.w	r1, sp, #6
 80065c6:	e7de      	b.n	8006586 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d107      	bne.n	80065e0 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80065d0:	2201      	movs	r2, #1
 80065d2:	f10d 0105 	add.w	r1, sp, #5
 80065d6:	e7d6      	b.n	8006586 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065d8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d0dc      	beq.n	800659a <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 80065e0:	4620      	mov	r0, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	f000 fbf7 	bl	8006dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80065e8:	2002      	movs	r0, #2
 80065ea:	e7d7      	b.n	800659c <USBD_CDC_Setup+0x52>

080065ec <USBD_CDC_DeInit>:
{
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065f0:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80065f2:	2181      	movs	r1, #129	@ 0x81
 80065f4:	f000 fe97 	bl	8007326 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065f8:	2101      	movs	r1, #1
 80065fa:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065fc:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065fe:	f000 fe92 	bl	8007326 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006602:	2182      	movs	r1, #130	@ 0x82
 8006604:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006606:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800660a:	f000 fe8c 	bl	8007326 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800660e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006612:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8006614:	b14b      	cbz	r3, 800662a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006616:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800661e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8006622:	f000 fecf 	bl	80073c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006626:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800662a:	2000      	movs	r0, #0
 800662c:	bd38      	pop	{r3, r4, r5, pc}

0800662e <USBD_CDC_Init>:
{
 800662e:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	7c03      	ldrb	r3, [r0, #16]
{
 8006632:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006634:	bba3      	cbnz	r3, 80066a0 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800663a:	2181      	movs	r1, #129	@ 0x81
 800663c:	2202      	movs	r2, #2
 800663e:	f000 fe66 	bl	800730e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006642:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006644:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006648:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800664a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800664c:	2202      	movs	r2, #2
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fe5d 	bl	800730e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006654:	2308      	movs	r3, #8
 8006656:	2203      	movs	r2, #3
 8006658:	2182      	movs	r1, #130	@ 0x82
 800665a:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800665c:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006660:	f000 fe55 	bl	800730e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006664:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006668:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800666a:	f000 fea7 	bl	80073bc <USBD_static_malloc>
 800666e:	4606      	mov	r6, r0
 8006670:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8006674:	b1f8      	cbz	r0, 80066b6 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006676:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4798      	blx	r3
    hcdc->TxState = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006684:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006688:	7c23      	ldrb	r3, [r4, #16]
 800668a:	b993      	cbnz	r3, 80066b2 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800668c:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006690:	4629      	mov	r1, r5
 8006692:	4620      	mov	r0, r4
 8006694:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8006698:	f000 fe83 	bl	80073a2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800669c:	2000      	movs	r0, #0
}
 800669e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066a0:	2340      	movs	r3, #64	@ 0x40
 80066a2:	2181      	movs	r1, #129	@ 0x81
 80066a4:	2202      	movs	r2, #2
 80066a6:	f000 fe32 	bl	800730e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066aa:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066ac:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066ae:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066b0:	e7cb      	b.n	800664a <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b2:	2340      	movs	r3, #64	@ 0x40
 80066b4:	e7ec      	b.n	8006690 <USBD_CDC_Init+0x62>
    ret = 1U;
 80066b6:	4628      	mov	r0, r5
 80066b8:	e7f1      	b.n	800669e <USBD_CDC_Init+0x70>

080066ba <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80066ba:	b119      	cbz	r1, 80066c4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80066bc:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 80066c0:	2000      	movs	r0, #0
 80066c2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80066c4:	2002      	movs	r0, #2
  }

  return ret;
}
 80066c6:	4770      	bx	lr

080066c8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066c8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80066cc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80066ce:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80066d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 80066d6:	4770      	bx	lr

080066d8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80066d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 80066dc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80066de:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 80066e2:	4770      	bx	lr

080066e4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066e4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80066e8:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80066ea:	b182      	cbz	r2, 800670e <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80066ec:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 80066f0:	2301      	movs	r3, #1
 80066f2:	b974      	cbnz	r4, 8006712 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80066f4:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066f8:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80066fc:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80066fe:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006700:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 8006704:	b29b      	uxth	r3, r3
 8006706:	f000 fe43 	bl	8007390 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800670a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800670c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800670e:	2002      	movs	r0, #2
 8006710:	e7fc      	b.n	800670c <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8006712:	4618      	mov	r0, r3
 8006714:	e7fa      	b.n	800670c <USBD_CDC_TransmitPacket+0x28>

08006716 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006716:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800671a:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800671c:	b162      	cbz	r2, 8006738 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671e:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006720:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006724:	b933      	cbnz	r3, 8006734 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8006726:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800672a:	2101      	movs	r1, #1
 800672c:	f000 fe39 	bl	80073a2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006730:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006732:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8006734:	2340      	movs	r3, #64	@ 0x40
 8006736:	e7f8      	b.n	800672a <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8006738:	2002      	movs	r0, #2
 800673a:	e7fa      	b.n	8006732 <USBD_CDC_ReceivePacket+0x1c>

0800673c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800673c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800673e:	b180      	cbz	r0, 8006762 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006740:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006744:	b113      	cbz	r3, 800674c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800674c:	b109      	cbz	r1, 8006752 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800674e:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006752:	2301      	movs	r3, #1
  pdev->id = id;
 8006754:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006756:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800675a:	f000 fd8f 	bl	800727c <USBD_LL_Init>

  return USBD_OK;
 800675e:	2000      	movs	r0, #0
}
 8006760:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8006762:	2002      	movs	r0, #2
 8006764:	e7fc      	b.n	8006760 <USBD_Init+0x24>

08006766 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006766:	b119      	cbz	r1, 8006770 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006768:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 800676c:	2000      	movs	r0, #0
 800676e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006770:	2002      	movs	r0, #2
  }

  return status;
}
 8006772:	4770      	bx	lr

08006774 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006774:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006776:	f000 fdc1 	bl	80072fc <USBD_LL_Start>

  return USBD_OK;
}
 800677a:	2000      	movs	r0, #0
 800677c:	bd08      	pop	{r3, pc}

0800677e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800677e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006780:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006784:	b133      	cbz	r3, 8006794 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4798      	blx	r3
 800678a:	3800      	subs	r0, #0
 800678c:	bf18      	it	ne
 800678e:	2001      	movne	r0, #1
 8006790:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006792:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006794:	2002      	movs	r0, #2
 8006796:	e7fc      	b.n	8006792 <USBD_SetClassConfig+0x14>

08006798 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006798:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800679a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4798      	blx	r3

  return USBD_OK;
}
 80067a2:	2000      	movs	r0, #0
 80067a4:	bd08      	pop	{r3, pc}

080067a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067a6:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067a8:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 80067ac:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067ae:	4628      	mov	r0, r5
 80067b0:	f000 fb06 	bl	8006dc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067b4:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80067b6:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80067ba:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80067be:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 80067c2:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80067c6:	f001 031f 	and.w	r3, r1, #31
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d008      	beq.n	80067e0 <USBD_LL_SetupStage+0x3a>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d00b      	beq.n	80067ea <USBD_LL_SetupStage+0x44>
 80067d2:	b97b      	cbnz	r3, 80067f4 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 f8fa 	bl	80069d0 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80067dc:	2000      	movs	r0, #0
 80067de:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80067e0:	4629      	mov	r1, r5
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fa3c 	bl	8006c60 <USBD_StdItfReq>
      break;
 80067e8:	e7f8      	b.n	80067dc <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80067ea:	4629      	mov	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fa5b 	bl	8006ca8 <USBD_StdEPReq>
      break;
 80067f2:	e7f3      	b.n	80067dc <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067f4:	4620      	mov	r0, r4
 80067f6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80067fa:	f000 fd9d 	bl	8007338 <USBD_LL_StallEP>
      break;
 80067fe:	e7ed      	b.n	80067dc <USBD_LL_SetupStage+0x36>

08006800 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4604      	mov	r4, r0
 8006804:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006806:	bb39      	cbnz	r1, 8006858 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006808:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800680c:	2a03      	cmp	r2, #3
 800680e:	d11c      	bne.n	800684a <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8006810:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8006814:	4295      	cmp	r5, r2
 8006816:	d90b      	bls.n	8006830 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8006818:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800681a:	42aa      	cmp	r2, r5
 800681c:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800681e:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8006822:	bf8c      	ite	hi
 8006824:	b2aa      	uxthhi	r2, r5
 8006826:	b292      	uxthls	r2, r2
 8006828:	f000 fb1e 	bl	8006e68 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800682c:	2000      	movs	r0, #0
}
 800682e:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006830:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	b123      	cbz	r3, 8006842 <USBD_LL_DataOutStage+0x42>
 8006838:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800683c:	2a03      	cmp	r2, #3
 800683e:	d100      	bne.n	8006842 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8006840:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fb18 	bl	8006e78 <USBD_CtlSendStatus>
 8006848:	e7f0      	b.n	800682c <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800684a:	2a05      	cmp	r2, #5
 800684c:	d1ee      	bne.n	800682c <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800684e:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006852:	f000 fd71 	bl	8007338 <USBD_LL_StallEP>
 8006856:	e7e9      	b.n	800682c <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006858:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	b12b      	cbz	r3, 800686c <USBD_LL_DataOutStage+0x6c>
 8006860:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006864:	2a03      	cmp	r2, #3
 8006866:	d101      	bne.n	800686c <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8006868:	4798      	blx	r3
 800686a:	e7df      	b.n	800682c <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 800686c:	2002      	movs	r0, #2
 800686e:	e7de      	b.n	800682e <USBD_LL_DataOutStage+0x2e>

08006870 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	4604      	mov	r4, r0
 8006874:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006876:	460f      	mov	r7, r1
 8006878:	2900      	cmp	r1, #0
 800687a:	d149      	bne.n	8006910 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800687c:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8006880:	2a02      	cmp	r2, #2
 8006882:	d13a      	bne.n	80068fa <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8006884:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8006888:	42b5      	cmp	r5, r6
 800688a:	d911      	bls.n	80068b0 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800688c:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800688e:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8006890:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006892:	b2aa      	uxth	r2, r5
 8006894:	f000 fad3 	bl	8006e3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006898:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800689a:	461a      	mov	r2, r3
 800689c:	4619      	mov	r1, r3
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fd7f 	bl	80073a2 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80068a4:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d02d      	beq.n	8006908 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80068ac:	2000      	movs	r0, #0
}
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068b0:	69c3      	ldr	r3, [r0, #28]
 80068b2:	fbb3 f5f6 	udiv	r5, r3, r6
 80068b6:	fb06 3515 	mls	r5, r6, r5, r3
 80068ba:	b965      	cbnz	r5, 80068d6 <USBD_LL_DataInStage+0x66>
 80068bc:	429e      	cmp	r6, r3
 80068be:	d80a      	bhi.n	80068d6 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 80068c0:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d206      	bcs.n	80068d6 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068c8:	462a      	mov	r2, r5
 80068ca:	f000 fab8 	bl	8006e3e <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ce:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 80068d0:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068d4:	e7e1      	b.n	800689a <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068d6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	b12b      	cbz	r3, 80068ea <USBD_LL_DataInStage+0x7a>
 80068de:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80068e2:	2a03      	cmp	r2, #3
 80068e4:	d101      	bne.n	80068ea <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80068e6:	4620      	mov	r0, r4
 80068e8:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80068ea:	2180      	movs	r1, #128	@ 0x80
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fd23 	bl	8007338 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 facb 	bl	8006e8e <USBD_CtlReceiveStatus>
 80068f8:	e7d4      	b.n	80068a4 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068fa:	f032 0304 	bics.w	r3, r2, #4
 80068fe:	d1d1      	bne.n	80068a4 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8006900:	2180      	movs	r1, #128	@ 0x80
 8006902:	f000 fd19 	bl	8007338 <USBD_LL_StallEP>
 8006906:	e7cd      	b.n	80068a4 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800690e:	e7cd      	b.n	80068ac <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8006910:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	b12b      	cbz	r3, 8006924 <USBD_LL_DataInStage+0xb4>
 8006918:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800691c:	2a03      	cmp	r2, #3
 800691e:	d101      	bne.n	8006924 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8006920:	4798      	blx	r3
 8006922:	e7c3      	b.n	80068ac <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8006924:	2002      	movs	r0, #2
 8006926:	e7c2      	b.n	80068ae <USBD_LL_DataInStage+0x3e>

08006928 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006928:	2200      	movs	r2, #0
{
 800692a:	b570      	push	{r4, r5, r6, lr}
 800692c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800692e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006930:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006932:	4611      	mov	r1, r2
 8006934:	2340      	movs	r3, #64	@ 0x40
 8006936:	f000 fcea 	bl	800730e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800693a:	4633      	mov	r3, r6
 800693c:	2180      	movs	r1, #128	@ 0x80
 800693e:	2200      	movs	r2, #0
 8006940:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006942:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006946:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800694a:	f000 fce0 	bl	800730e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800694e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8006950:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006954:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006956:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006958:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800695c:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006960:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006962:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8006966:	b123      	cbz	r3, 8006972 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006968:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800696c:	4620      	mov	r0, r4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006972:	2000      	movs	r0, #0
 8006974:	bd70      	pop	{r4, r5, r6, pc}

08006976 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006976:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006978:	2000      	movs	r0, #0
 800697a:	4770      	bx	lr

0800697c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800697c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006980:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006984:	2304      	movs	r3, #4
 8006986:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800698a:	2000      	movs	r0, #0
 800698c:	4770      	bx	lr

0800698e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800698e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006992:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8006994:	bf04      	itt	eq
 8006996:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800699a:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800699e:	2000      	movs	r0, #0
 80069a0:	4770      	bx	lr

080069a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069a2:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80069a8:	2a03      	cmp	r2, #3
 80069aa:	d104      	bne.n	80069b6 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80069ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	b103      	cbz	r3, 80069b6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80069b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80069b6:	2000      	movs	r0, #0
 80069b8:	bd08      	pop	{r3, pc}

080069ba <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80069ba:	b510      	push	{r4, lr}
 80069bc:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80069be:	2180      	movs	r1, #128	@ 0x80
 80069c0:	f000 fcba 	bl	8007338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80069c4:	4620      	mov	r0, r4
}
 80069c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80069ca:	2100      	movs	r1, #0
 80069cc:	f000 bcb4 	b.w	8007338 <USBD_LL_StallEP>

080069d0 <USBD_StdDevReq>:
{
 80069d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069d2:	780b      	ldrb	r3, [r1, #0]
 80069d4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069da:	2b20      	cmp	r3, #32
{
 80069dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069de:	d006      	beq.n	80069ee <USBD_StdDevReq+0x1e>
 80069e0:	2b40      	cmp	r3, #64	@ 0x40
 80069e2:	d004      	beq.n	80069ee <USBD_StdDevReq+0x1e>
 80069e4:	b163      	cbz	r3, 8006a00 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 80069e6:	4620      	mov	r0, r4
 80069e8:	f7ff ffe7 	bl	80069ba <USBD_CtlError.constprop.0>
        break;
 80069ec:	e005      	b.n	80069fa <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 80069ee:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80069f2:	4629      	mov	r1, r5
 80069f4:	4620      	mov	r0, r4
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4798      	blx	r3
}
 80069fa:	2000      	movs	r0, #0
 80069fc:	b003      	add	sp, #12
 80069fe:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8006a00:	784b      	ldrb	r3, [r1, #1]
 8006a02:	2b09      	cmp	r3, #9
 8006a04:	d8ef      	bhi.n	80069e6 <USBD_StdDevReq+0x16>
 8006a06:	a201      	add	r2, pc, #4	@ (adr r2, 8006a0c <USBD_StdDevReq+0x3c>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006c0f 	.word	0x08006c0f
 8006a10:	08006c45 	.word	0x08006c45
 8006a14:	080069e7 	.word	0x080069e7
 8006a18:	08006c37 	.word	0x08006c37
 8006a1c:	080069e7 	.word	0x080069e7
 8006a20:	08006b35 	.word	0x08006b35
 8006a24:	08006a35 	.word	0x08006a35
 8006a28:	080069e7 	.word	0x080069e7
 8006a2c:	08006bdf 	.word	0x08006bdf
 8006a30:	08006b77 	.word	0x08006b77
  uint16_t len = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006a3a:	884b      	ldrh	r3, [r1, #2]
 8006a3c:	0a1a      	lsrs	r2, r3, #8
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	2a06      	cmp	r2, #6
 8006a42:	d8d0      	bhi.n	80069e6 <USBD_StdDevReq+0x16>
 8006a44:	a101      	add	r1, pc, #4	@ (adr r1, 8006a4c <USBD_StdDevReq+0x7c>)
 8006a46:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a69 	.word	0x08006a69
 8006a50:	08006a8d 	.word	0x08006a8d
 8006a54:	08006aa7 	.word	0x08006aa7
 8006a58:	080069e7 	.word	0x080069e7
 8006a5c:	080069e7 	.word	0x080069e7
 8006a60:	08006aeb 	.word	0x08006aeb
 8006a64:	08006b01 	.word	0x08006b01
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006a68:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006a6c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a6e:	7c20      	ldrb	r0, [r4, #16]
 8006a70:	f10d 0106 	add.w	r1, sp, #6
 8006a74:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8006a76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006a7a:	88eb      	ldrh	r3, [r5, #6]
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d054      	beq.n	8006b2a <USBD_StdDevReq+0x15a>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d149      	bne.n	8006b18 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 f9f7 	bl	8006e78 <USBD_CtlSendStatus>
 8006a8a:	e7b6      	b.n	80069fa <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8006a8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a92:	b932      	cbnz	r2, 8006aa2 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a96:	f10d 0006 	add.w	r0, sp, #6
 8006a9a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a9c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a9e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006aa0:	e7e9      	b.n	8006a76 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	e7f7      	b.n	8006a96 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d89c      	bhi.n	80069e6 <USBD_StdDevReq+0x16>
 8006aac:	e8df f003 	tbb	[pc, r3]
 8006ab0:	110d0903 	.word	0x110d0903
 8006ab4:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ab6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006aba:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1d6      	bne.n	8006a6e <USBD_StdDevReq+0x9e>
 8006ac0:	e791      	b.n	80069e6 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ac2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	e7f8      	b.n	8006abc <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006aca:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	e7f4      	b.n	8006abc <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	e7f0      	b.n	8006abc <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ada:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	e7ec      	b.n	8006abc <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ae2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	e7e8      	b.n	8006abc <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aea:	7c03      	ldrb	r3, [r0, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f47f af7a 	bne.w	80069e6 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006af2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006af6:	f10d 0006 	add.w	r0, sp, #6
 8006afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afc:	4798      	blx	r3
  if (err != 0U)
 8006afe:	e7ba      	b.n	8006a76 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b00:	7c03      	ldrb	r3, [r0, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f47f af6f 	bne.w	80069e6 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b08:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8006b0c:	f10d 0006 	add.w	r0, sp, #6
 8006b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b12:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b14:	2307      	movs	r3, #7
 8006b16:	e7c2      	b.n	8006a9e <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf28      	it	cs
 8006b1c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8006b22:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b26:	f000 f97d 	bl	8006e24 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006b2a:	88eb      	ldrh	r3, [r5, #6]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f af64 	bne.w	80069fa <USBD_StdDevReq+0x2a>
 8006b32:	e7a7      	b.n	8006a84 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b34:	888b      	ldrh	r3, [r1, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f af55 	bne.w	80069e6 <USBD_StdDevReq+0x16>
 8006b3c:	88cb      	ldrh	r3, [r1, #6]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f47f af51 	bne.w	80069e6 <USBD_StdDevReq+0x16>
 8006b44:	884d      	ldrh	r5, [r1, #2]
 8006b46:	2d7f      	cmp	r5, #127	@ 0x7f
 8006b48:	f63f af4d 	bhi.w	80069e6 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	f43f af48 	beq.w	80069e6 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b56:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b58:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8006b5a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b5e:	f000 fc0e 	bl	800737e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f988 	bl	8006e78 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006b68:	b11d      	cbz	r5, 8006b72 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b6a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8006b70:	e743      	b.n	80069fa <USBD_StdDevReq+0x2a>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7fa      	b.n	8006b6c <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8006b76:	7889      	ldrb	r1, [r1, #2]
 8006b78:	4d38      	ldr	r5, [pc, #224]	@ (8006c5c <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b7a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006b7c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b7e:	f63f af32 	bhi.w	80069e6 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8006b82:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d008      	beq.n	8006b9c <USBD_StdDevReq+0x1cc>
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d015      	beq.n	8006bba <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8006b8e:	f7ff ff14 	bl	80069ba <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b92:	4620      	mov	r0, r4
 8006b94:	7829      	ldrb	r1, [r5, #0]
 8006b96:	f7ff fdff 	bl	8006798 <USBD_ClrClassConfig>
        break;
 8006b9a:	e72e      	b.n	80069fa <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	f43f af71 	beq.w	8006a84 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8006ba2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ba4:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8006ba6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ba8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bac:	4620      	mov	r0, r4
 8006bae:	f7ff fde6 	bl	800677e <USBD_SetClassConfig>
 8006bb2:	2802      	cmp	r0, #2
 8006bb4:	f47f af66 	bne.w	8006a84 <USBD_StdDevReq+0xb4>
 8006bb8:	e715      	b.n	80069e6 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8006bba:	b931      	cbnz	r1, 8006bca <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bbc:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8006bbe:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8006bc4:	f7ff fde8 	bl	8006798 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006bc8:	e75c      	b.n	8006a84 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8006bca:	6841      	ldr	r1, [r0, #4]
 8006bcc:	2901      	cmp	r1, #1
 8006bce:	f43f af59 	beq.w	8006a84 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bd2:	b2c9      	uxtb	r1, r1
 8006bd4:	f7ff fde0 	bl	8006798 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006bd8:	7829      	ldrb	r1, [r5, #0]
 8006bda:	6061      	str	r1, [r4, #4]
 8006bdc:	e7e6      	b.n	8006bac <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8006bde:	88ca      	ldrh	r2, [r1, #6]
 8006be0:	2a01      	cmp	r2, #1
 8006be2:	f47f af00 	bne.w	80069e6 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8006be6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d80a      	bhi.n	8006c04 <USBD_StdDevReq+0x234>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f43f aef9 	beq.w	80069e6 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 f911 	bl	8006e24 <USBD_CtlSendData>
      break;
 8006c02:	e6fa      	b.n	80069fa <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	f47f aeee 	bne.w	80069e6 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c0a:	1d01      	adds	r1, r0, #4
 8006c0c:	e7f6      	b.n	8006bfc <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8006c0e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006c12:	3b01      	subs	r3, #1
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	f63f aee6 	bhi.w	80069e6 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8006c1a:	88ca      	ldrh	r2, [r1, #6]
 8006c1c:	2a02      	cmp	r2, #2
 8006c1e:	f47f aee2 	bne.w	80069e6 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8006c22:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8006c26:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2303      	movne	r3, #3
 8006c30:	f841 3f0c 	str.w	r3, [r1, #12]!
 8006c34:	e7e2      	b.n	8006bfc <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c36:	884b      	ldrh	r3, [r1, #2]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f47f aede 	bne.w	80069fa <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006c3e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8006c42:	e71f      	b.n	8006a84 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8006c44:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	f63f aecb 	bhi.w	80069e6 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c50:	884b      	ldrh	r3, [r1, #2]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	f47f aed1 	bne.w	80069fa <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e7f0      	b.n	8006c3e <USBD_StdDevReq+0x26e>
 8006c5c:	20002700 	.word	0x20002700

08006c60 <USBD_StdItfReq>:
{
 8006c60:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c62:	780b      	ldrb	r3, [r1, #0]
{
 8006c64:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c66:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8006c6a:	065b      	lsls	r3, r3, #25
{
 8006c6c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	d501      	bpl.n	8006c74 <USBD_StdItfReq+0x14>
 8006c70:	2a40      	cmp	r2, #64	@ 0x40
 8006c72:	d115      	bne.n	8006ca0 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8006c74:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d810      	bhi.n	8006ca0 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c7e:	792b      	ldrb	r3, [r5, #4]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d80d      	bhi.n	8006ca0 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c84:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c90:	88eb      	ldrh	r3, [r5, #6]
 8006c92:	b91b      	cbnz	r3, 8006c9c <USBD_StdItfReq+0x3c>
 8006c94:	b910      	cbnz	r0, 8006c9c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 f8ee 	bl	8006e78 <USBD_CtlSendStatus>
}
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f7ff fe8a 	bl	80069ba <USBD_CtlError.constprop.0>
          break;
 8006ca6:	e7f9      	b.n	8006c9c <USBD_StdItfReq+0x3c>

08006ca8 <USBD_StdEPReq>:
{
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	780a      	ldrb	r2, [r1, #0]
 8006cac:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006cae:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb2:	2a20      	cmp	r2, #32
{
 8006cb4:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8006cb6:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb8:	d006      	beq.n	8006cc8 <USBD_StdEPReq+0x20>
 8006cba:	2a40      	cmp	r2, #64	@ 0x40
 8006cbc:	d004      	beq.n	8006cc8 <USBD_StdEPReq+0x20>
 8006cbe:	b15a      	cbz	r2, 8006cd8 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f7ff fe7a 	bl	80069ba <USBD_CtlError.constprop.0>
              break;
 8006cc6:	e005      	b.n	8006cd4 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8006cc8:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4620      	mov	r0, r4
 8006cd0:	6892      	ldr	r2, [r2, #8]
 8006cd2:	4790      	blx	r2
}
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8006cd8:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006cda:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8006cdc:	2a01      	cmp	r2, #1
 8006cde:	d035      	beq.n	8006d4c <USBD_StdEPReq+0xa4>
 8006ce0:	2a03      	cmp	r2, #3
 8006ce2:	d021      	beq.n	8006d28 <USBD_StdEPReq+0x80>
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d1eb      	bne.n	8006cc0 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8006ce8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d044      	beq.n	8006d7a <USBD_StdEPReq+0xd2>
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d1e5      	bne.n	8006cc0 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8006cf4:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cf6:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8006cfa:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cfe:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8006d02:	d04b      	beq.n	8006d9c <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0da      	beq.n	8006cc0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0a:	2514      	movs	r5, #20
 8006d0c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8006d10:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d14:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d16:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d18:	d04b      	beq.n	8006db2 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb1e 	bl	800735c <USBD_LL_IsStallEP>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d04b      	beq.n	8006dbc <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e045      	b.n	8006db4 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8006d28:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006d2c:	2a02      	cmp	r2, #2
 8006d2e:	d01b      	beq.n	8006d68 <USBD_StdEPReq+0xc0>
 8006d30:	2a03      	cmp	r2, #3
 8006d32:	d1c5      	bne.n	8006cc0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d34:	885a      	ldrh	r2, [r3, #2]
 8006d36:	b92a      	cbnz	r2, 8006d44 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8006d38:	064a      	lsls	r2, r1, #25
 8006d3a:	d003      	beq.n	8006d44 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d3c:	88db      	ldrh	r3, [r3, #6]
 8006d3e:	b90b      	cbnz	r3, 8006d44 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d40:	f000 fafa 	bl	8007338 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 f897 	bl	8006e78 <USBD_CtlSendStatus>
              break;
 8006d4a:	e7c3      	b.n	8006cd4 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8006d4c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8006d50:	2a02      	cmp	r2, #2
 8006d52:	d009      	beq.n	8006d68 <USBD_StdEPReq+0xc0>
 8006d54:	2a03      	cmp	r2, #3
 8006d56:	d1b3      	bne.n	8006cc0 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1ba      	bne.n	8006cd4 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d5e:	064d      	lsls	r5, r1, #25
 8006d60:	d0f0      	beq.n	8006d44 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d62:	f000 faf2 	bl	800734a <USBD_LL_ClearStallEP>
 8006d66:	e7ed      	b.n	8006d44 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d68:	064b      	lsls	r3, r1, #25
 8006d6a:	d0a9      	beq.n	8006cc0 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8006d6c:	f000 fae4 	bl	8007338 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d70:	2180      	movs	r1, #128	@ 0x80
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 fae0 	bl	8007338 <USBD_LL_StallEP>
 8006d78:	e7ac      	b.n	8006cd4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d7a:	064a      	lsls	r2, r1, #25
 8006d7c:	d1a0      	bne.n	8006cc0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d7e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8006d80:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d84:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d88:	bf4c      	ite	mi
 8006d8a:	f100 0114 	addmi.w	r1, r0, #20
 8006d8e:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8006d92:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 f845 	bl	8006e24 <USBD_CtlSendData>
              break;
 8006d9a:	e79b      	b.n	8006cd4 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d9c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d08d      	beq.n	8006cc0 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da4:	2514      	movs	r5, #20
 8006da6:	fb05 0501 	mla	r5, r5, r1, r0
 8006daa:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dae:	2900      	cmp	r1, #0
 8006db0:	d1b3      	bne.n	8006d1a <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8006db2:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8006db4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006db6:	2202      	movs	r2, #2
 8006db8:	4629      	mov	r1, r5
 8006dba:	e7eb      	b.n	8006d94 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8006dbc:	6028      	str	r0, [r5, #0]
 8006dbe:	e7fa      	b.n	8006db6 <USBD_StdEPReq+0x10e>

08006dc0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006dc0:	780b      	ldrb	r3, [r1, #0]
 8006dc2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006dc4:	784b      	ldrb	r3, [r1, #1]
 8006dc6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006dc8:	884b      	ldrh	r3, [r1, #2]
 8006dca:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006dcc:	888b      	ldrh	r3, [r1, #4]
 8006dce:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006dd0:	88cb      	ldrh	r3, [r1, #6]
 8006dd2:	80c3      	strh	r3, [r0, #6]
}
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_CtlError>:
{
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006dda:	2180      	movs	r1, #128	@ 0x80
 8006ddc:	f000 faac 	bl	8007338 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006de0:	4620      	mov	r0, r4
}
 8006de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8006de6:	2100      	movs	r1, #0
 8006de8:	f000 baa6 	b.w	8007338 <USBD_LL_StallEP>

08006dec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	460d      	mov	r5, r1
 8006df0:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006df2:	4604      	mov	r4, r0
 8006df4:	b170      	cbz	r0, 8006e14 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006df6:	f7f9 f9ab 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006dfa:	b2c3      	uxtb	r3, r0
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e02:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e04:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8006e06:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e08:	706b      	strb	r3, [r5, #1]
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8006e0e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006e12:	b901      	cbnz	r1, 8006e16 <USBD_GetString+0x2a>
}
 8006e14:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	54e9      	strb	r1, [r5, r3]
 8006e1a:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	54a8      	strb	r0, [r5, r2]
 8006e22:	e7f4      	b.n	8006e0e <USBD_GetString+0x22>

08006e24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e24:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e26:	2202      	movs	r2, #2
{
 8006e28:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006e2a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e2e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e32:	460a      	mov	r2, r1
 8006e34:	2100      	movs	r1, #0
 8006e36:	f000 faab 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	bd10      	pop	{r4, pc}

08006e3e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006e3e:	b508      	push	{r3, lr}
 8006e40:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e42:	460a      	mov	r2, r1
 8006e44:	2100      	movs	r1, #0
 8006e46:	f000 faa3 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	bd08      	pop	{r3, pc}

08006e4e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006e4e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e50:	2203      	movs	r2, #3
{
 8006e52:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8006e54:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e58:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e5c:	460a      	mov	r2, r1
 8006e5e:	2100      	movs	r1, #0
 8006e60:	f000 fa9f 	bl	80073a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e64:	2000      	movs	r0, #0
 8006e66:	bd10      	pop	{r4, pc}

08006e68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e68:	b508      	push	{r3, lr}
 8006e6a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e6c:	460a      	mov	r2, r1
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f000 fa97 	bl	80073a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e74:	2000      	movs	r0, #0
 8006e76:	bd08      	pop	{r3, pc}

08006e78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e78:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e80:	2300      	movs	r3, #0
 8006e82:	461a      	mov	r2, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	f000 fa83 	bl	8007390 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	bd08      	pop	{r3, pc}

08006e8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e90:	2305      	movs	r3, #5
 8006e92:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e96:	2300      	movs	r3, #0
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	f000 fa81 	bl	80073a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	bd08      	pop	{r3, pc}

08006ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	490e      	ldr	r1, [pc, #56]	@ (8006ee4 <MX_USB_DEVICE_Init+0x40>)
 8006eaa:	480f      	ldr	r0, [pc, #60]	@ (8006ee8 <MX_USB_DEVICE_Init+0x44>)
 8006eac:	f7ff fc46 	bl	800673c <USBD_Init>
 8006eb0:	b108      	cbz	r0, 8006eb6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006eb2:	f7fb ff4d 	bl	8002d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006eb6:	490d      	ldr	r1, [pc, #52]	@ (8006eec <MX_USB_DEVICE_Init+0x48>)
 8006eb8:	480b      	ldr	r0, [pc, #44]	@ (8006ee8 <MX_USB_DEVICE_Init+0x44>)
 8006eba:	f7ff fc54 	bl	8006766 <USBD_RegisterClass>
 8006ebe:	b108      	cbz	r0, 8006ec4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006ec0:	f7fb ff46 	bl	8002d50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ec4:	490a      	ldr	r1, [pc, #40]	@ (8006ef0 <MX_USB_DEVICE_Init+0x4c>)
 8006ec6:	4808      	ldr	r0, [pc, #32]	@ (8006ee8 <MX_USB_DEVICE_Init+0x44>)
 8006ec8:	f7ff fbf7 	bl	80066ba <USBD_CDC_RegisterInterface>
 8006ecc:	b108      	cbz	r0, 8006ed2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006ece:	f7fb ff3f 	bl	8002d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ed2:	4805      	ldr	r0, [pc, #20]	@ (8006ee8 <MX_USB_DEVICE_Init+0x44>)
 8006ed4:	f7ff fc4e 	bl	8006774 <USBD_Start>
 8006ed8:	b118      	cbz	r0, 8006ee2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006ede:	f7fb bf37 	b.w	8002d50 <Error_Handler>
}
 8006ee2:	bd08      	pop	{r3, pc}
 8006ee4:	20000170 	.word	0x20000170
 8006ee8:	20002704 	.word	0x20002704
 8006eec:	200000e8 	.word	0x200000e8
 8006ef0:	2000012c 	.word	0x2000012c

08006ef4 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4770      	bx	lr

08006ef8 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	4770      	bx	lr

08006efc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // char debugMsg[50];
  // sprintf(debugMsg, "[RX] Recibidos %lu bytes\r\n", *Len);
  // CDC_Transmit_FS((uint8_t*)debugMsg, strlen(debugMsg));
  
  // Procesar datos recibidos
  for (uint32_t i = 0; i < *Len; i++) {
 8006efe:	2300      	movs	r3, #0
      usbCommandComplete = true;         // Marcar comando completo
      // NO resetear usbBufferIndex aquí - se hace en main.c después de procesar
      break;
    }
    
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8006f00:	4d11      	ldr	r5, [pc, #68]	@ (8006f48 <CDC_Receive_FS+0x4c>)
      usbBuffer[usbBufferIndex++] = receivedChar;
 8006f02:	4e12      	ldr	r6, [pc, #72]	@ (8006f4c <CDC_Receive_FS+0x50>)
  for (uint32_t i = 0; i < *Len; i++) {
 8006f04:	680a      	ldr	r2, [r1, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d90a      	bls.n	8006f20 <CDC_Receive_FS+0x24>
    char receivedChar = Buf[i];
 8006f0a:	5cc4      	ldrb	r4, [r0, r3]
    if (receivedChar == '\n') {
 8006f0c:	2c0a      	cmp	r4, #10
 8006f0e:	d110      	bne.n	8006f32 <CDC_Receive_FS+0x36>
      usbBuffer[usbBufferIndex] = '\0';  // Terminar string
 8006f10:	2100      	movs	r1, #0
 8006f12:	4b0d      	ldr	r3, [pc, #52]	@ (8006f48 <CDC_Receive_FS+0x4c>)
 8006f14:	4a0d      	ldr	r2, [pc, #52]	@ (8006f4c <CDC_Receive_FS+0x50>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	54d1      	strb	r1, [r2, r3]
      usbCommandComplete = true;         // Marcar comando completo
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <CDC_Receive_FS+0x54>)
 8006f1e:	701a      	strb	r2, [r3, #0]
    }
  }
  
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f20:	4601      	mov	r1, r0
 8006f22:	480c      	ldr	r0, [pc, #48]	@ (8006f54 <CDC_Receive_FS+0x58>)
 8006f24:	f7ff fbd8 	bl	80066d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f28:	480a      	ldr	r0, [pc, #40]	@ (8006f54 <CDC_Receive_FS+0x58>)
 8006f2a:	f7ff fbf4 	bl	8006716 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006f2e:	2000      	movs	r0, #0
 8006f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (receivedChar != '\r' && usbBufferIndex < sizeof(usbBuffer) - 1) {
 8006f32:	2c0d      	cmp	r4, #13
 8006f34:	d005      	beq.n	8006f42 <CDC_Receive_FS+0x46>
 8006f36:	682a      	ldr	r2, [r5, #0]
 8006f38:	2a62      	cmp	r2, #98	@ 0x62
      usbBuffer[usbBufferIndex++] = receivedChar;
 8006f3a:	bf9e      	ittt	ls
 8006f3c:	1c57      	addls	r7, r2, #1
 8006f3e:	602f      	strls	r7, [r5, #0]
 8006f40:	54b4      	strbls	r4, [r6, r2]
  for (uint32_t i = 0; i < *Len; i++) {
 8006f42:	3301      	adds	r3, #1
 8006f44:	e7de      	b.n	8006f04 <CDC_Receive_FS+0x8>
 8006f46:	bf00      	nop
 8006f48:	20002304 	.word	0x20002304
 8006f4c:	20002308 	.word	0x20002308
 8006f50:	20002300 	.word	0x20002300
 8006f54:	20002704 	.word	0x20002704

08006f58 <CDC_Init_FS>:
{
 8006f58:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f5a:	4c06      	ldr	r4, [pc, #24]	@ (8006f74 <CDC_Init_FS+0x1c>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4905      	ldr	r1, [pc, #20]	@ (8006f78 <CDC_Init_FS+0x20>)
 8006f62:	f7ff fbb1 	bl	80066c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f66:	4620      	mov	r0, r4
 8006f68:	4904      	ldr	r1, [pc, #16]	@ (8006f7c <CDC_Init_FS+0x24>)
 8006f6a:	f7ff fbb5 	bl	80066d8 <USBD_CDC_SetRxBuffer>
}
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	20002704 	.word	0x20002704
 8006f78:	20003944 	.word	0x20003944
 8006f7c:	20003d44 	.word	0x20003d44

08006f80 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f80:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f82:	4c09      	ldr	r4, [pc, #36]	@ (8006fa8 <CDC_Transmit_FS+0x28>)
{
 8006f84:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f86:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8006f8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006f8e:	b943      	cbnz	r3, 8006fa2 <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f90:	4601      	mov	r1, r0
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fb98 	bl	80066c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f98:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8006f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f9e:	f7ff bba1 	b.w	80066e4 <USBD_CDC_TransmitPacket>
}
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20002704 	.word	0x20002704

08006fac <CDC_TxQueue_Init>:
/**
 * @brief Inicializa la cola de transmisión
 */
void CDC_TxQueue_Init(void)
{
    txQueue.head = 0;
 8006fac:	2200      	movs	r2, #0
    txQueue.tail = 0;
    txQueue.count = 0;
 8006fae:	211e      	movs	r1, #30
    txQueue.head = 0;
 8006fb0:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <CDC_TxQueue_Init+0x20>)
 8006fb2:	f8a3 2f78 	strh.w	r2, [r3, #3960]	@ 0xf78
    txQueue.count = 0;
 8006fb6:	f8a3 2f7a 	strh.w	r2, [r3, #3962]	@ 0xf7a
    txQueue.transmitting = false;
    
    // Limpiar todos los mensajes
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8006fba:	3901      	subs	r1, #1
        txQueue.messages[i].used = false;
 8006fbc:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
        txQueue.messages[i].length = 0;
 8006fc0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    for (int i = 0; i < TX_QUEUE_SIZE; i++) {
 8006fc4:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 8006fc8:	d1f7      	bne.n	8006fba <CDC_TxQueue_Init+0xe>
    }
}
 8006fca:	4770      	bx	lr
 8006fcc:	200029c8 	.word	0x200029c8

08006fd0 <CDC_TxQueue_Add>:
 * @param data: Datos a enviar
 * @param length: Longitud de los datos
 * @retval true si se agregó exitosamente, false si la cola está llena
 */
bool CDC_TxQueue_Add(uint8_t* data, uint16_t length)
{
 8006fd0:	b538      	push	{r3, r4, r5, lr}
    // Verificar si hay espacio en la cola
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8006fd2:	4c15      	ldr	r4, [pc, #84]	@ (8007028 <CDC_TxQueue_Add+0x58>)
{
 8006fd4:	460d      	mov	r5, r1
    if (txQueue.count >= TX_QUEUE_SIZE || length > TX_BUFFER_SIZE) {
 8006fd6:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8006fda:	2b1d      	cmp	r3, #29
 8006fdc:	d821      	bhi.n	8007022 <CDC_TxQueue_Add+0x52>
 8006fde:	2980      	cmp	r1, #128	@ 0x80
 8006fe0:	d81f      	bhi.n	8007022 <CDC_TxQueue_Add+0x52>
        return false;
    }
    
    // Agregar mensaje a la cola
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
    memcpy(msg->data, data, length);
 8006fe2:	2284      	movs	r2, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.head];
 8006fe4:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
    memcpy(msg->data, data, length);
 8006fe8:	fb02 4303 	mla	r3, r2, r3, r4
 8006fec:	460a      	mov	r2, r1
 8006fee:	4601      	mov	r1, r0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 f9f6 	bl	80083e2 <memcpy>
 8006ff6:	4603      	mov	r3, r0
    msg->length = length;
 8006ff8:	f8a0 5080 	strh.w	r5, [r0, #128]	@ 0x80
    msg->used = true;
 8006ffc:	2001      	movs	r0, #1
    
    // Actualizar índices
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 8006ffe:	221e      	movs	r2, #30
    msg->used = true;
 8007000:	f883 0082 	strb.w	r0, [r3, #130]	@ 0x82
    txQueue.head = (txQueue.head + 1) % TX_QUEUE_SIZE;
 8007004:	f894 3f78 	ldrb.w	r3, [r4, #3960]	@ 0xf78
 8007008:	4403      	add	r3, r0
 800700a:	fbb3 f1f2 	udiv	r1, r3, r2
 800700e:	fb02 3311 	mls	r3, r2, r1, r3
 8007012:	f884 3f78 	strb.w	r3, [r4, #3960]	@ 0xf78
    txQueue.count++;
 8007016:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 800701a:	4403      	add	r3, r0
 800701c:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
    
    return true;
}
 8007020:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8007022:	2000      	movs	r0, #0
 8007024:	e7fc      	b.n	8007020 <CDC_TxQueue_Add+0x50>
 8007026:	bf00      	nop
 8007028:	200029c8 	.word	0x200029c8

0800702c <CDC_TxQueue_Process>:

/**
 * @brief Procesa la cola de transmisión (debe llamarse periódicamente)
 */
void CDC_TxQueue_Process(void)
{
 800702c:	b538      	push	{r3, r4, r5, lr}
    // Si no hay mensajes, salir
    if (txQueue.count == 0) {
 800702e:	4c19      	ldr	r4, [pc, #100]	@ (8007094 <CDC_TxQueue_Process+0x68>)
 8007030:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 8007034:	b36b      	cbz	r3, 8007092 <CDC_TxQueue_Process+0x66>
        return;
    }
    
    // Si ya hay transmisión en curso, verificar si terminó
    if (txQueue.transmitting) {
 8007036:	f894 3f7b 	ldrb.w	r3, [r4, #3963]	@ 0xf7b
 800703a:	b143      	cbz	r3, 800704e <CDC_TxQueue_Process+0x22>
        // Intentar enviar un mensaje vacío para verificar el estado
        uint8_t result = CDC_Transmit_FS(NULL, 0);
 800703c:	2100      	movs	r1, #0
 800703e:	4608      	mov	r0, r1
 8007040:	f7ff ff9e 	bl	8006f80 <CDC_Transmit_FS>
        if (result != USBD_BUSY) {
 8007044:	2801      	cmp	r0, #1
 8007046:	d024      	beq.n	8007092 <CDC_TxQueue_Process+0x66>
            // La transmisión anterior terminó
            txQueue.transmitting = false;
 8007048:	2300      	movs	r3, #0
 800704a:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
        }
    }
    
    // Intentar enviar el próximo mensaje
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
    if (msg->used) {
 800704e:	2384      	movs	r3, #132	@ 0x84
    TxMessage_t* msg = &txQueue.messages[txQueue.tail];
 8007050:	f894 5f79 	ldrb.w	r5, [r4, #3961]	@ 0xf79
    if (msg->used) {
 8007054:	fb03 4505 	mla	r5, r3, r5, r4
 8007058:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 800705c:	b1cb      	cbz	r3, 8007092 <CDC_TxQueue_Process+0x66>
        uint8_t result = CDC_Transmit_FS(msg->data, msg->length);
 800705e:	4628      	mov	r0, r5
 8007060:	f8b5 1080 	ldrh.w	r1, [r5, #128]	@ 0x80
 8007064:	f7ff ff8c 	bl	8006f80 <CDC_Transmit_FS>
        
        if (result == USBD_OK) {
 8007068:	b998      	cbnz	r0, 8007092 <CDC_TxQueue_Process+0x66>
            // Mensaje enviado exitosamente
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800706a:	2301      	movs	r3, #1
            msg->used = false;
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800706c:	221e      	movs	r2, #30
            txQueue.transmitting = true;  // Marcar como transmitiendo
 800706e:	f884 3f7b 	strb.w	r3, [r4, #3963]	@ 0xf7b
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 8007072:	f894 3f79 	ldrb.w	r3, [r4, #3961]	@ 0xf79
            msg->used = false;
 8007076:	f885 0082 	strb.w	r0, [r5, #130]	@ 0x82
            txQueue.tail = (txQueue.tail + 1) % TX_QUEUE_SIZE;
 800707a:	3301      	adds	r3, #1
 800707c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007080:	fb02 3311 	mls	r3, r2, r1, r3
 8007084:	f884 3f79 	strb.w	r3, [r4, #3961]	@ 0xf79
            txQueue.count--;
 8007088:	f894 3f7a 	ldrb.w	r3, [r4, #3962]	@ 0xf7a
 800708c:	3b01      	subs	r3, #1
 800708e:	f884 3f7a 	strb.w	r3, [r4, #3962]	@ 0xf7a
        }
        // Si result == USBD_BUSY, intentaremos de nuevo la próxima vez
    }
}
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200029c8 	.word	0x200029c8

08007098 <CDC_Transmit_Queued>:
 * @param length: Longitud de los datos
 * @retval true si se agregó a la cola, false si la cola está llena
 */
bool CDC_Transmit_Queued(uint8_t* data, uint16_t length)
{
    return CDC_TxQueue_Add(data, length);
 8007098:	f7ff bf9a 	b.w	8006fd0 <CDC_TxQueue_Add>

0800709c <CDC_TxQueue_GetCount>:
 * @retval Número de mensajes pendientes
 */
uint8_t CDC_TxQueue_GetCount(void)
{
    return txQueue.count;
}
 800709c:	4b01      	ldr	r3, [pc, #4]	@ (80070a4 <CDC_TxQueue_GetCount+0x8>)
 800709e:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
 80070a2:	4770      	bx	lr
 80070a4:	200029c8 	.word	0x200029c8

080070a8 <CDC_TxQueue_IsFull>:
 * @brief Verifica si la cola está llena
 * @retval true si está llena, false si hay espacio
 */
bool CDC_TxQueue_IsFull(void)
{
    return (txQueue.count >= TX_QUEUE_SIZE);
 80070a8:	4b03      	ldr	r3, [pc, #12]	@ (80070b8 <CDC_TxQueue_IsFull+0x10>)
 80070aa:	f893 0f7a 	ldrb.w	r0, [r3, #3962]	@ 0xf7a
}
 80070ae:	281d      	cmp	r0, #29
 80070b0:	bf94      	ite	ls
 80070b2:	2000      	movls	r0, #0
 80070b4:	2001      	movhi	r0, #1
 80070b6:	4770      	bx	lr
 80070b8:	200029c8 	.word	0x200029c8

080070bc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070bc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80070be:	4801      	ldr	r0, [pc, #4]	@ (80070c4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80070c0:	800b      	strh	r3, [r1, #0]
}
 80070c2:	4770      	bx	lr
 80070c4:	2000015c 	.word	0x2000015c

080070c8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070c8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80070ca:	4801      	ldr	r0, [pc, #4]	@ (80070d0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80070cc:	800b      	strh	r3, [r1, #0]
}
 80070ce:	4770      	bx	lr
 80070d0:	20000158 	.word	0x20000158

080070d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070d4:	2300      	movs	r3, #0
 80070d6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80070d8:	461e      	mov	r6, r3
 80070da:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 80070dc:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80070de:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80070e2:	bf34      	ite	cc
 80070e4:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070e6:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80070e8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80070ec:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80070f0:	3301      	adds	r3, #1
 80070f2:	b2dc      	uxtb	r4, r3
 80070f4:	42a2      	cmp	r2, r4
    value = value << 4;
 80070f6:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80070fa:	d8ef      	bhi.n	80070dc <IntToUnicode+0x8>
  }
}
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007100 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007100:	231a      	movs	r3, #26
{
 8007102:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8007104:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007106:	4b0a      	ldr	r3, [pc, #40]	@ (8007130 <USBD_FS_SerialStrDescriptor+0x30>)
 8007108:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 800710c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8007110:	1880      	adds	r0, r0, r2
 8007112:	d00a      	beq.n	800712a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007114:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007118:	4906      	ldr	r1, [pc, #24]	@ (8007134 <USBD_FS_SerialStrDescriptor+0x34>)
 800711a:	2208      	movs	r2, #8
 800711c:	f7ff ffda 	bl	80070d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007120:	2204      	movs	r2, #4
 8007122:	4620      	mov	r0, r4
 8007124:	3110      	adds	r1, #16
 8007126:	f7ff ffd5 	bl	80070d4 <IntToUnicode>
}
 800712a:	4803      	ldr	r0, [pc, #12]	@ (8007138 <USBD_FS_SerialStrDescriptor+0x38>)
 800712c:	bd10      	pop	{r4, pc}
 800712e:	bf00      	nop
 8007130:	1ffff000 	.word	0x1ffff000
 8007134:	2000013e 	.word	0x2000013e
 8007138:	2000013c 	.word	0x2000013c

0800713c <USBD_FS_ManufacturerStrDescriptor>:
{
 800713c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800713e:	4c04      	ldr	r4, [pc, #16]	@ (8007150 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8007140:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007142:	4804      	ldr	r0, [pc, #16]	@ (8007154 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8007144:	4621      	mov	r1, r4
 8007146:	f7ff fe51 	bl	8006dec <USBD_GetString>
}
 800714a:	4620      	mov	r0, r4
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	20004144 	.word	0x20004144
 8007154:	0800d131 	.word	0x0800d131

08007158 <USBD_FS_ProductStrDescriptor>:
{
 8007158:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800715a:	4c04      	ldr	r4, [pc, #16]	@ (800716c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800715c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800715e:	4804      	ldr	r0, [pc, #16]	@ (8007170 <USBD_FS_ProductStrDescriptor+0x18>)
 8007160:	4621      	mov	r1, r4
 8007162:	f7ff fe43 	bl	8006dec <USBD_GetString>
}
 8007166:	4620      	mov	r0, r4
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	20004144 	.word	0x20004144
 8007170:	0800d144 	.word	0x0800d144

08007174 <USBD_FS_ConfigStrDescriptor>:
{
 8007174:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007176:	4c04      	ldr	r4, [pc, #16]	@ (8007188 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007178:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800717a:	4804      	ldr	r0, [pc, #16]	@ (800718c <USBD_FS_ConfigStrDescriptor+0x18>)
 800717c:	4621      	mov	r1, r4
 800717e:	f7ff fe35 	bl	8006dec <USBD_GetString>
}
 8007182:	4620      	mov	r0, r4
 8007184:	bd10      	pop	{r4, pc}
 8007186:	bf00      	nop
 8007188:	20004144 	.word	0x20004144
 800718c:	0800d15a 	.word	0x0800d15a

08007190 <USBD_FS_InterfaceStrDescriptor>:
{
 8007190:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007192:	4c04      	ldr	r4, [pc, #16]	@ (80071a4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007194:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007196:	4804      	ldr	r0, [pc, #16]	@ (80071a8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007198:	4621      	mov	r1, r4
 800719a:	f7ff fe27 	bl	8006dec <USBD_GetString>
}
 800719e:	4620      	mov	r0, r4
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	bf00      	nop
 80071a4:	20004144 	.word	0x20004144
 80071a8:	0800d165 	.word	0x0800d165

080071ac <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80071ac:	b118      	cbz	r0, 80071b6 <USBD_Get_USB_Status+0xa>
 80071ae:	2802      	cmp	r0, #2
 80071b0:	bf0c      	ite	eq
 80071b2:	2001      	moveq	r0, #1
 80071b4:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80071b6:	4770      	bx	lr

080071b8 <HAL_PCD_MspInit>:
{
 80071b8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80071ba:	4b0e      	ldr	r3, [pc, #56]	@ (80071f4 <HAL_PCD_MspInit+0x3c>)
 80071bc:	6802      	ldr	r2, [r0, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d115      	bne.n	80071ee <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80071c2:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80071c6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071c8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80071ca:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80071ce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071d0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80071d2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071d4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80071d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071de:	f7fd f8cb 	bl	8004378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80071e2:	2014      	movs	r0, #20
}
 80071e4:	b003      	add	sp, #12
 80071e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80071ea:	f7fd b8f5 	b.w	80043d8 <HAL_NVIC_EnableIRQ>
}
 80071ee:	b003      	add	sp, #12
 80071f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80071f4:	40005c00 	.word	0x40005c00

080071f8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071f8:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80071fc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007200:	f7ff bad1 	b.w	80067a6 <USBD_LL_SetupStage>

08007204 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007204:	2328      	movs	r3, #40	@ 0x28
 8007206:	fb03 0301 	mla	r3, r3, r1, r0
 800720a:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800720e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8007212:	f7ff baf5 	b.w	8006800 <USBD_LL_DataOutStage>

08007216 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007216:	2328      	movs	r3, #40	@ 0x28
 8007218:	fb03 0301 	mla	r3, r3, r1, r0
 800721c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007222:	f7ff bb25 	b.w	8006870 <USBD_LL_DataInStage>

08007226 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007226:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800722a:	f7ff bbba 	b.w	80069a2 <USBD_LL_SOF>

0800722e <HAL_PCD_ResetCallback>:
{
 800722e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007230:	7983      	ldrb	r3, [r0, #6]
{
 8007232:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007234:	2b02      	cmp	r3, #2
 8007236:	d001      	beq.n	800723c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007238:	f7fb fd8a 	bl	8002d50 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800723c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8007240:	2101      	movs	r1, #1
 8007242:	f7ff fb98 	bl	8006976 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007246:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800724a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800724e:	f7ff bb6b 	b.w	8006928 <USBD_LL_Reset>
	...

08007254 <HAL_PCD_SuspendCallback>:
{
 8007254:	b510      	push	{r4, lr}
 8007256:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007258:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800725c:	f7ff fb8e 	bl	800697c <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007260:	7aa3      	ldrb	r3, [r4, #10]
 8007262:	b123      	cbz	r3, 800726e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007264:	4a02      	ldr	r2, [pc, #8]	@ (8007270 <HAL_PCD_SuspendCallback+0x1c>)
 8007266:	6913      	ldr	r3, [r2, #16]
 8007268:	f043 0306 	orr.w	r3, r3, #6
 800726c:	6113      	str	r3, [r2, #16]
}
 800726e:	bd10      	pop	{r4, pc}
 8007270:	e000ed00 	.word	0xe000ed00

08007274 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007274:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8007278:	f7ff bb89 	b.w	800698e <USBD_LL_Resume>

0800727c <USBD_LL_Init>:
{
 800727c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800727e:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <USBD_LL_Init+0x78>)
{
 8007280:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007282:	481d      	ldr	r0, [pc, #116]	@ (80072f8 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8007284:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007286:	2308      	movs	r3, #8
 8007288:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800728a:	2302      	movs	r3, #2
 800728c:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800728e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8007290:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8007294:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007298:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800729a:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800729c:	f7fd f9b2 	bl	8004604 <HAL_PCD_Init>
 80072a0:	b108      	cbz	r0, 80072a6 <USBD_LL_Init+0x2a>
    Error_Handler( );
 80072a2:	f7fb fd55 	bl	8002d50 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80072a6:	2200      	movs	r2, #0
 80072a8:	2318      	movs	r3, #24
 80072aa:	4611      	mov	r1, r2
 80072ac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80072b0:	f7fe f833 	bl	800531a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80072b4:	2358      	movs	r3, #88	@ 0x58
 80072b6:	2200      	movs	r2, #0
 80072b8:	2180      	movs	r1, #128	@ 0x80
 80072ba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80072be:	f7fe f82c 	bl	800531a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80072c2:	23c0      	movs	r3, #192	@ 0xc0
 80072c4:	2200      	movs	r2, #0
 80072c6:	2181      	movs	r1, #129	@ 0x81
 80072c8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80072cc:	f7fe f825 	bl	800531a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80072d0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80072d4:	2200      	movs	r2, #0
 80072d6:	2101      	movs	r1, #1
 80072d8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80072dc:	f7fe f81d 	bl	800531a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80072e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80072e4:	2200      	movs	r2, #0
 80072e6:	2182      	movs	r1, #130	@ 0x82
 80072e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80072ec:	f7fe f815 	bl	800531a <HAL_PCDEx_PMAConfig>
}
 80072f0:	2000      	movs	r0, #0
 80072f2:	bd10      	pop	{r4, pc}
 80072f4:	40005c00 	.word	0x40005c00
 80072f8:	20004564 	.word	0x20004564

080072fc <USBD_LL_Start>:
{
 80072fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80072fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007302:	f7fd f9e2 	bl	80046ca <HAL_PCD_Start>
}
 8007306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800730a:	f7ff bf4f 	b.w	80071ac <USBD_Get_USB_Status>

0800730e <USBD_LL_OpenEP>:
{
 800730e:	b510      	push	{r4, lr}
 8007310:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007312:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8007316:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007318:	4623      	mov	r3, r4
 800731a:	f7fd ff07 	bl	800512c <HAL_PCD_EP_Open>
}
 800731e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007322:	f7ff bf43 	b.w	80071ac <USBD_Get_USB_Status>

08007326 <USBD_LL_CloseEP>:
{
 8007326:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007328:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800732c:	f7fd ff2e 	bl	800518c <HAL_PCD_EP_Close>
}
 8007330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007334:	f7ff bf3a 	b.w	80071ac <USBD_Get_USB_Status>

08007338 <USBD_LL_StallEP>:
{
 8007338:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800733a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800733e:	f7fd ff84 	bl	800524a <HAL_PCD_EP_SetStall>
}
 8007342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007346:	f7ff bf31 	b.w	80071ac <USBD_Get_USB_Status>

0800734a <USBD_LL_ClearStallEP>:
{
 800734a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800734c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007350:	f7fd ffb1 	bl	80052b6 <HAL_PCD_EP_ClrStall>
}
 8007354:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007358:	f7ff bf28 	b.w	80071ac <USBD_Get_USB_Status>

0800735c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800735c:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800735e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007362:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007366:	bf1b      	ittet	ne
 8007368:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 800736c:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007370:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007374:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007376:	bf08      	it	eq
 8007378:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 800737c:	4770      	bx	lr

0800737e <USBD_LL_SetUSBAddress>:
{
 800737e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007380:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007384:	f7fd f9ba 	bl	80046fc <HAL_PCD_SetAddress>
}
 8007388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800738c:	f7ff bf0e 	b.w	80071ac <USBD_Get_USB_Status>

08007390 <USBD_LL_Transmit>:
{
 8007390:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007392:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8007396:	f7fd ff40 	bl	800521a <HAL_PCD_EP_Transmit>
}
 800739a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800739e:	f7ff bf05 	b.w	80071ac <USBD_Get_USB_Status>

080073a2 <USBD_LL_PrepareReceive>:
{
 80073a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073a4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80073a8:	f7fd ff18 	bl	80051dc <HAL_PCD_EP_Receive>
}
 80073ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b0:	f7ff befc 	b.w	80071ac <USBD_Get_USB_Status>

080073b4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073b4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80073b8:	f7fd bf27 	b.w	800520a <HAL_PCD_EP_GetRxCount>

080073bc <USBD_static_malloc>:
}
 80073bc:	4800      	ldr	r0, [pc, #0]	@ (80073c0 <USBD_static_malloc+0x4>)
 80073be:	4770      	bx	lr
 80073c0:	20004344 	.word	0x20004344

080073c4 <USBD_static_free>:
}
 80073c4:	4770      	bx	lr

080073c6 <HAL_PCDEx_SetConnectionState>:
}
 80073c6:	4770      	bx	lr

080073c8 <atof>:
 80073c8:	2100      	movs	r1, #0
 80073ca:	f000 bdf9 	b.w	8007fc0 <strtod>

080073ce <sulp>:
 80073ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	460f      	mov	r7, r1
 80073d4:	4690      	mov	r8, r2
 80073d6:	f001 ffc7 	bl	8009368 <__ulp>
 80073da:	4604      	mov	r4, r0
 80073dc:	460d      	mov	r5, r1
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	d011      	beq.n	8007408 <sulp+0x3a>
 80073e4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80073e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	dd0b      	ble.n	8007408 <sulp+0x3a>
 80073f0:	2400      	movs	r4, #0
 80073f2:	051b      	lsls	r3, r3, #20
 80073f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80073f8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80073fc:	4622      	mov	r2, r4
 80073fe:	462b      	mov	r3, r5
 8007400:	f7f9 f86a 	bl	80004d8 <__aeabi_dmul>
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	4620      	mov	r0, r4
 800740a:	4629      	mov	r1, r5
 800740c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007410 <_strtod_l>:
 8007410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	b09f      	sub	sp, #124	@ 0x7c
 8007416:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007418:	2200      	movs	r2, #0
 800741a:	460c      	mov	r4, r1
 800741c:	921a      	str	r2, [sp, #104]	@ 0x68
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	f04f 0b00 	mov.w	fp, #0
 8007426:	460a      	mov	r2, r1
 8007428:	9005      	str	r0, [sp, #20]
 800742a:	9219      	str	r2, [sp, #100]	@ 0x64
 800742c:	7811      	ldrb	r1, [r2, #0]
 800742e:	292b      	cmp	r1, #43	@ 0x2b
 8007430:	d048      	beq.n	80074c4 <_strtod_l+0xb4>
 8007432:	d836      	bhi.n	80074a2 <_strtod_l+0x92>
 8007434:	290d      	cmp	r1, #13
 8007436:	d830      	bhi.n	800749a <_strtod_l+0x8a>
 8007438:	2908      	cmp	r1, #8
 800743a:	d830      	bhi.n	800749e <_strtod_l+0x8e>
 800743c:	2900      	cmp	r1, #0
 800743e:	d039      	beq.n	80074b4 <_strtod_l+0xa4>
 8007440:	2200      	movs	r2, #0
 8007442:	920e      	str	r2, [sp, #56]	@ 0x38
 8007444:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007446:	782a      	ldrb	r2, [r5, #0]
 8007448:	2a30      	cmp	r2, #48	@ 0x30
 800744a:	f040 80b0 	bne.w	80075ae <_strtod_l+0x19e>
 800744e:	786a      	ldrb	r2, [r5, #1]
 8007450:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007454:	2a58      	cmp	r2, #88	@ 0x58
 8007456:	d16c      	bne.n	8007532 <_strtod_l+0x122>
 8007458:	9302      	str	r3, [sp, #8]
 800745a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800745c:	4a8f      	ldr	r2, [pc, #572]	@ (800769c <_strtod_l+0x28c>)
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	ab1a      	add	r3, sp, #104	@ 0x68
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	9805      	ldr	r0, [sp, #20]
 8007466:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007468:	a919      	add	r1, sp, #100	@ 0x64
 800746a:	f001 f87f 	bl	800856c <__gethex>
 800746e:	f010 060f 	ands.w	r6, r0, #15
 8007472:	4604      	mov	r4, r0
 8007474:	d005      	beq.n	8007482 <_strtod_l+0x72>
 8007476:	2e06      	cmp	r6, #6
 8007478:	d126      	bne.n	80074c8 <_strtod_l+0xb8>
 800747a:	2300      	movs	r3, #0
 800747c:	3501      	adds	r5, #1
 800747e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007480:	930e      	str	r3, [sp, #56]	@ 0x38
 8007482:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 8582 	bne.w	8007f8e <_strtod_l+0xb7e>
 800748a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748c:	b1bb      	cbz	r3, 80074be <_strtod_l+0xae>
 800748e:	4650      	mov	r0, sl
 8007490:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007494:	b01f      	add	sp, #124	@ 0x7c
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	2920      	cmp	r1, #32
 800749c:	d1d0      	bne.n	8007440 <_strtod_l+0x30>
 800749e:	3201      	adds	r2, #1
 80074a0:	e7c3      	b.n	800742a <_strtod_l+0x1a>
 80074a2:	292d      	cmp	r1, #45	@ 0x2d
 80074a4:	d1cc      	bne.n	8007440 <_strtod_l+0x30>
 80074a6:	2101      	movs	r1, #1
 80074a8:	910e      	str	r1, [sp, #56]	@ 0x38
 80074aa:	1c51      	adds	r1, r2, #1
 80074ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80074ae:	7852      	ldrb	r2, [r2, #1]
 80074b0:	2a00      	cmp	r2, #0
 80074b2:	d1c7      	bne.n	8007444 <_strtod_l+0x34>
 80074b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074b6:	9419      	str	r4, [sp, #100]	@ 0x64
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8566 	bne.w	8007f8a <_strtod_l+0xb7a>
 80074be:	4650      	mov	r0, sl
 80074c0:	4659      	mov	r1, fp
 80074c2:	e7e7      	b.n	8007494 <_strtod_l+0x84>
 80074c4:	2100      	movs	r1, #0
 80074c6:	e7ef      	b.n	80074a8 <_strtod_l+0x98>
 80074c8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074ca:	b13a      	cbz	r2, 80074dc <_strtod_l+0xcc>
 80074cc:	2135      	movs	r1, #53	@ 0x35
 80074ce:	a81c      	add	r0, sp, #112	@ 0x70
 80074d0:	f002 f83a 	bl	8009548 <__copybits>
 80074d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074d6:	9805      	ldr	r0, [sp, #20]
 80074d8:	f001 fc1a 	bl	8008d10 <_Bfree>
 80074dc:	3e01      	subs	r6, #1
 80074de:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80074e0:	2e04      	cmp	r6, #4
 80074e2:	d806      	bhi.n	80074f2 <_strtod_l+0xe2>
 80074e4:	e8df f006 	tbb	[pc, r6]
 80074e8:	201d0314 	.word	0x201d0314
 80074ec:	14          	.byte	0x14
 80074ed:	00          	.byte	0x00
 80074ee:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80074f2:	05e1      	lsls	r1, r4, #23
 80074f4:	bf48      	it	mi
 80074f6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80074fa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074fe:	0d1b      	lsrs	r3, r3, #20
 8007500:	051b      	lsls	r3, r3, #20
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1bd      	bne.n	8007482 <_strtod_l+0x72>
 8007506:	f000 ff37 	bl	8008378 <__errno>
 800750a:	2322      	movs	r3, #34	@ 0x22
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	e7b8      	b.n	8007482 <_strtod_l+0x72>
 8007510:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007514:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007518:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800751c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007520:	e7e7      	b.n	80074f2 <_strtod_l+0xe2>
 8007522:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80076a0 <_strtod_l+0x290>
 8007526:	e7e4      	b.n	80074f2 <_strtod_l+0xe2>
 8007528:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800752c:	f04f 3aff 	mov.w	sl, #4294967295
 8007530:	e7df      	b.n	80074f2 <_strtod_l+0xe2>
 8007532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	9219      	str	r2, [sp, #100]	@ 0x64
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b30      	cmp	r3, #48	@ 0x30
 800753c:	d0f9      	beq.n	8007532 <_strtod_l+0x122>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d09f      	beq.n	8007482 <_strtod_l+0x72>
 8007542:	2301      	movs	r3, #1
 8007544:	2700      	movs	r7, #0
 8007546:	220a      	movs	r2, #10
 8007548:	46b9      	mov	r9, r7
 800754a:	9308      	str	r3, [sp, #32]
 800754c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800754e:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007550:	930c      	str	r3, [sp, #48]	@ 0x30
 8007552:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007554:	7805      	ldrb	r5, [r0, #0]
 8007556:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800755a:	b2d9      	uxtb	r1, r3
 800755c:	2909      	cmp	r1, #9
 800755e:	d928      	bls.n	80075b2 <_strtod_l+0x1a2>
 8007560:	2201      	movs	r2, #1
 8007562:	4950      	ldr	r1, [pc, #320]	@ (80076a4 <_strtod_l+0x294>)
 8007564:	f000 fe9d 	bl	80082a2 <strncmp>
 8007568:	2800      	cmp	r0, #0
 800756a:	d032      	beq.n	80075d2 <_strtod_l+0x1c2>
 800756c:	2000      	movs	r0, #0
 800756e:	462a      	mov	r2, r5
 8007570:	4603      	mov	r3, r0
 8007572:	464d      	mov	r5, r9
 8007574:	900a      	str	r0, [sp, #40]	@ 0x28
 8007576:	2a65      	cmp	r2, #101	@ 0x65
 8007578:	d001      	beq.n	800757e <_strtod_l+0x16e>
 800757a:	2a45      	cmp	r2, #69	@ 0x45
 800757c:	d114      	bne.n	80075a8 <_strtod_l+0x198>
 800757e:	b91d      	cbnz	r5, 8007588 <_strtod_l+0x178>
 8007580:	9a08      	ldr	r2, [sp, #32]
 8007582:	4302      	orrs	r2, r0
 8007584:	d096      	beq.n	80074b4 <_strtod_l+0xa4>
 8007586:	2500      	movs	r5, #0
 8007588:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800758a:	1c62      	adds	r2, r4, #1
 800758c:	9219      	str	r2, [sp, #100]	@ 0x64
 800758e:	7862      	ldrb	r2, [r4, #1]
 8007590:	2a2b      	cmp	r2, #43	@ 0x2b
 8007592:	d07a      	beq.n	800768a <_strtod_l+0x27a>
 8007594:	2a2d      	cmp	r2, #45	@ 0x2d
 8007596:	d07e      	beq.n	8007696 <_strtod_l+0x286>
 8007598:	f04f 0c00 	mov.w	ip, #0
 800759c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075a0:	2909      	cmp	r1, #9
 80075a2:	f240 8085 	bls.w	80076b0 <_strtod_l+0x2a0>
 80075a6:	9419      	str	r4, [sp, #100]	@ 0x64
 80075a8:	f04f 0800 	mov.w	r8, #0
 80075ac:	e0a5      	b.n	80076fa <_strtod_l+0x2ea>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e7c8      	b.n	8007544 <_strtod_l+0x134>
 80075b2:	f1b9 0f08 	cmp.w	r9, #8
 80075b6:	bfd8      	it	le
 80075b8:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80075ba:	f100 0001 	add.w	r0, r0, #1
 80075be:	bfd6      	itet	le
 80075c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80075c4:	fb02 3707 	mlagt	r7, r2, r7, r3
 80075c8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80075ca:	f109 0901 	add.w	r9, r9, #1
 80075ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80075d0:	e7bf      	b.n	8007552 <_strtod_l+0x142>
 80075d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80075d8:	785a      	ldrb	r2, [r3, #1]
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	d03b      	beq.n	8007658 <_strtod_l+0x248>
 80075e0:	464d      	mov	r5, r9
 80075e2:	900a      	str	r0, [sp, #40]	@ 0x28
 80075e4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d912      	bls.n	8007612 <_strtod_l+0x202>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e7c2      	b.n	8007576 <_strtod_l+0x166>
 80075f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f2:	3001      	adds	r0, #1
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80075f8:	785a      	ldrb	r2, [r3, #1]
 80075fa:	2a30      	cmp	r2, #48	@ 0x30
 80075fc:	d0f8      	beq.n	80075f0 <_strtod_l+0x1e0>
 80075fe:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007602:	2b08      	cmp	r3, #8
 8007604:	f200 84c8 	bhi.w	8007f98 <_strtod_l+0xb88>
 8007608:	900a      	str	r0, [sp, #40]	@ 0x28
 800760a:	2000      	movs	r0, #0
 800760c:	4605      	mov	r5, r0
 800760e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007610:	930c      	str	r3, [sp, #48]	@ 0x30
 8007612:	3a30      	subs	r2, #48	@ 0x30
 8007614:	f100 0301 	add.w	r3, r0, #1
 8007618:	d018      	beq.n	800764c <_strtod_l+0x23c>
 800761a:	462e      	mov	r6, r5
 800761c:	f04f 0e0a 	mov.w	lr, #10
 8007620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007622:	4419      	add	r1, r3
 8007624:	910a      	str	r1, [sp, #40]	@ 0x28
 8007626:	1c71      	adds	r1, r6, #1
 8007628:	eba1 0c05 	sub.w	ip, r1, r5
 800762c:	4563      	cmp	r3, ip
 800762e:	dc15      	bgt.n	800765c <_strtod_l+0x24c>
 8007630:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007634:	182b      	adds	r3, r5, r0
 8007636:	2b08      	cmp	r3, #8
 8007638:	f105 0501 	add.w	r5, r5, #1
 800763c:	4405      	add	r5, r0
 800763e:	dc1a      	bgt.n	8007676 <_strtod_l+0x266>
 8007640:	230a      	movs	r3, #10
 8007642:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007644:	fb03 2301 	mla	r3, r3, r1, r2
 8007648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800764a:	2300      	movs	r3, #0
 800764c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800764e:	4618      	mov	r0, r3
 8007650:	1c51      	adds	r1, r2, #1
 8007652:	9119      	str	r1, [sp, #100]	@ 0x64
 8007654:	7852      	ldrb	r2, [r2, #1]
 8007656:	e7c5      	b.n	80075e4 <_strtod_l+0x1d4>
 8007658:	4648      	mov	r0, r9
 800765a:	e7ce      	b.n	80075fa <_strtod_l+0x1ea>
 800765c:	2e08      	cmp	r6, #8
 800765e:	dc05      	bgt.n	800766c <_strtod_l+0x25c>
 8007660:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007662:	fb0e f606 	mul.w	r6, lr, r6
 8007666:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007668:	460e      	mov	r6, r1
 800766a:	e7dc      	b.n	8007626 <_strtod_l+0x216>
 800766c:	2910      	cmp	r1, #16
 800766e:	bfd8      	it	le
 8007670:	fb0e f707 	mulle.w	r7, lr, r7
 8007674:	e7f8      	b.n	8007668 <_strtod_l+0x258>
 8007676:	2b0f      	cmp	r3, #15
 8007678:	bfdc      	itt	le
 800767a:	230a      	movle	r3, #10
 800767c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007680:	e7e3      	b.n	800764a <_strtod_l+0x23a>
 8007682:	2300      	movs	r3, #0
 8007684:	930a      	str	r3, [sp, #40]	@ 0x28
 8007686:	2301      	movs	r3, #1
 8007688:	e77a      	b.n	8007580 <_strtod_l+0x170>
 800768a:	f04f 0c00 	mov.w	ip, #0
 800768e:	1ca2      	adds	r2, r4, #2
 8007690:	9219      	str	r2, [sp, #100]	@ 0x64
 8007692:	78a2      	ldrb	r2, [r4, #2]
 8007694:	e782      	b.n	800759c <_strtod_l+0x18c>
 8007696:	f04f 0c01 	mov.w	ip, #1
 800769a:	e7f8      	b.n	800768e <_strtod_l+0x27e>
 800769c:	0800d318 	.word	0x0800d318
 80076a0:	7ff00000 	.word	0x7ff00000
 80076a4:	0800d173 	.word	0x0800d173
 80076a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076aa:	1c51      	adds	r1, r2, #1
 80076ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80076ae:	7852      	ldrb	r2, [r2, #1]
 80076b0:	2a30      	cmp	r2, #48	@ 0x30
 80076b2:	d0f9      	beq.n	80076a8 <_strtod_l+0x298>
 80076b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80076b8:	2908      	cmp	r1, #8
 80076ba:	f63f af75 	bhi.w	80075a8 <_strtod_l+0x198>
 80076be:	f04f 080a 	mov.w	r8, #10
 80076c2:	3a30      	subs	r2, #48	@ 0x30
 80076c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076c8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80076ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076cc:	1c56      	adds	r6, r2, #1
 80076ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80076d0:	7852      	ldrb	r2, [r2, #1]
 80076d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80076d6:	f1be 0f09 	cmp.w	lr, #9
 80076da:	d939      	bls.n	8007750 <_strtod_l+0x340>
 80076dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80076de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80076e2:	1a76      	subs	r6, r6, r1
 80076e4:	2e08      	cmp	r6, #8
 80076e6:	dc03      	bgt.n	80076f0 <_strtod_l+0x2e0>
 80076e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076ea:	4588      	cmp	r8, r1
 80076ec:	bfa8      	it	ge
 80076ee:	4688      	movge	r8, r1
 80076f0:	f1bc 0f00 	cmp.w	ip, #0
 80076f4:	d001      	beq.n	80076fa <_strtod_l+0x2ea>
 80076f6:	f1c8 0800 	rsb	r8, r8, #0
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	d14e      	bne.n	800779c <_strtod_l+0x38c>
 80076fe:	9908      	ldr	r1, [sp, #32]
 8007700:	4308      	orrs	r0, r1
 8007702:	f47f aebe 	bne.w	8007482 <_strtod_l+0x72>
 8007706:	2b00      	cmp	r3, #0
 8007708:	f47f aed4 	bne.w	80074b4 <_strtod_l+0xa4>
 800770c:	2a69      	cmp	r2, #105	@ 0x69
 800770e:	d028      	beq.n	8007762 <_strtod_l+0x352>
 8007710:	dc25      	bgt.n	800775e <_strtod_l+0x34e>
 8007712:	2a49      	cmp	r2, #73	@ 0x49
 8007714:	d025      	beq.n	8007762 <_strtod_l+0x352>
 8007716:	2a4e      	cmp	r2, #78	@ 0x4e
 8007718:	f47f aecc 	bne.w	80074b4 <_strtod_l+0xa4>
 800771c:	4999      	ldr	r1, [pc, #612]	@ (8007984 <_strtod_l+0x574>)
 800771e:	a819      	add	r0, sp, #100	@ 0x64
 8007720:	f001 f946 	bl	80089b0 <__match>
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f aec5 	beq.w	80074b4 <_strtod_l+0xa4>
 800772a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b28      	cmp	r3, #40	@ 0x28
 8007730:	d12e      	bne.n	8007790 <_strtod_l+0x380>
 8007732:	4995      	ldr	r1, [pc, #596]	@ (8007988 <_strtod_l+0x578>)
 8007734:	aa1c      	add	r2, sp, #112	@ 0x70
 8007736:	a819      	add	r0, sp, #100	@ 0x64
 8007738:	f001 f94e 	bl	80089d8 <__hexnan>
 800773c:	2805      	cmp	r0, #5
 800773e:	d127      	bne.n	8007790 <_strtod_l+0x380>
 8007740:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007742:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007746:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800774a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800774e:	e698      	b.n	8007482 <_strtod_l+0x72>
 8007750:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007752:	fb08 2101 	mla	r1, r8, r1, r2
 8007756:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800775a:	9209      	str	r2, [sp, #36]	@ 0x24
 800775c:	e7b5      	b.n	80076ca <_strtod_l+0x2ba>
 800775e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007760:	e7da      	b.n	8007718 <_strtod_l+0x308>
 8007762:	498a      	ldr	r1, [pc, #552]	@ (800798c <_strtod_l+0x57c>)
 8007764:	a819      	add	r0, sp, #100	@ 0x64
 8007766:	f001 f923 	bl	80089b0 <__match>
 800776a:	2800      	cmp	r0, #0
 800776c:	f43f aea2 	beq.w	80074b4 <_strtod_l+0xa4>
 8007770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007772:	4987      	ldr	r1, [pc, #540]	@ (8007990 <_strtod_l+0x580>)
 8007774:	3b01      	subs	r3, #1
 8007776:	a819      	add	r0, sp, #100	@ 0x64
 8007778:	9319      	str	r3, [sp, #100]	@ 0x64
 800777a:	f001 f919 	bl	80089b0 <__match>
 800777e:	b910      	cbnz	r0, 8007786 <_strtod_l+0x376>
 8007780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007782:	3301      	adds	r3, #1
 8007784:	9319      	str	r3, [sp, #100]	@ 0x64
 8007786:	f04f 0a00 	mov.w	sl, #0
 800778a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007994 <_strtod_l+0x584>
 800778e:	e678      	b.n	8007482 <_strtod_l+0x72>
 8007790:	4881      	ldr	r0, [pc, #516]	@ (8007998 <_strtod_l+0x588>)
 8007792:	f000 fe35 	bl	8008400 <nan>
 8007796:	4682      	mov	sl, r0
 8007798:	468b      	mov	fp, r1
 800779a:	e672      	b.n	8007482 <_strtod_l+0x72>
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	f1b9 0f00 	cmp.w	r9, #0
 80077a2:	bf08      	it	eq
 80077a4:	46a9      	moveq	r9, r5
 80077a6:	eba8 0303 	sub.w	r3, r8, r3
 80077aa:	2d10      	cmp	r5, #16
 80077ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077ae:	462c      	mov	r4, r5
 80077b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b2:	bfa8      	it	ge
 80077b4:	2410      	movge	r4, #16
 80077b6:	f7f8 fe15 	bl	80003e4 <__aeabi_ui2d>
 80077ba:	2d09      	cmp	r5, #9
 80077bc:	4682      	mov	sl, r0
 80077be:	468b      	mov	fp, r1
 80077c0:	dc11      	bgt.n	80077e6 <_strtod_l+0x3d6>
 80077c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f43f ae5c 	beq.w	8007482 <_strtod_l+0x72>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	dd76      	ble.n	80078bc <_strtod_l+0x4ac>
 80077ce:	2b16      	cmp	r3, #22
 80077d0:	dc5d      	bgt.n	800788e <_strtod_l+0x47e>
 80077d2:	4972      	ldr	r1, [pc, #456]	@ (800799c <_strtod_l+0x58c>)
 80077d4:	4652      	mov	r2, sl
 80077d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077da:	465b      	mov	r3, fp
 80077dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077e0:	f7f8 fe7a 	bl	80004d8 <__aeabi_dmul>
 80077e4:	e7d7      	b.n	8007796 <_strtod_l+0x386>
 80077e6:	4b6d      	ldr	r3, [pc, #436]	@ (800799c <_strtod_l+0x58c>)
 80077e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80077f0:	f7f8 fe72 	bl	80004d8 <__aeabi_dmul>
 80077f4:	4682      	mov	sl, r0
 80077f6:	4638      	mov	r0, r7
 80077f8:	468b      	mov	fp, r1
 80077fa:	f7f8 fdf3 	bl	80003e4 <__aeabi_ui2d>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4650      	mov	r0, sl
 8007804:	4659      	mov	r1, fp
 8007806:	f7f8 fcb1 	bl	800016c <__adddf3>
 800780a:	2d0f      	cmp	r5, #15
 800780c:	4682      	mov	sl, r0
 800780e:	468b      	mov	fp, r1
 8007810:	ddd7      	ble.n	80077c2 <_strtod_l+0x3b2>
 8007812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007814:	1b2c      	subs	r4, r5, r4
 8007816:	441c      	add	r4, r3
 8007818:	2c00      	cmp	r4, #0
 800781a:	f340 8093 	ble.w	8007944 <_strtod_l+0x534>
 800781e:	f014 030f 	ands.w	r3, r4, #15
 8007822:	d00a      	beq.n	800783a <_strtod_l+0x42a>
 8007824:	495d      	ldr	r1, [pc, #372]	@ (800799c <_strtod_l+0x58c>)
 8007826:	4652      	mov	r2, sl
 8007828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800782c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007830:	465b      	mov	r3, fp
 8007832:	f7f8 fe51 	bl	80004d8 <__aeabi_dmul>
 8007836:	4682      	mov	sl, r0
 8007838:	468b      	mov	fp, r1
 800783a:	f034 040f 	bics.w	r4, r4, #15
 800783e:	d073      	beq.n	8007928 <_strtod_l+0x518>
 8007840:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007844:	dd49      	ble.n	80078da <_strtod_l+0x4ca>
 8007846:	2400      	movs	r4, #0
 8007848:	46a0      	mov	r8, r4
 800784a:	46a1      	mov	r9, r4
 800784c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800784e:	2322      	movs	r3, #34	@ 0x22
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	9a05      	ldr	r2, [sp, #20]
 8007856:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007994 <_strtod_l+0x584>
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800785e:	2b00      	cmp	r3, #0
 8007860:	f43f ae0f 	beq.w	8007482 <_strtod_l+0x72>
 8007864:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007866:	9805      	ldr	r0, [sp, #20]
 8007868:	f001 fa52 	bl	8008d10 <_Bfree>
 800786c:	4649      	mov	r1, r9
 800786e:	9805      	ldr	r0, [sp, #20]
 8007870:	f001 fa4e 	bl	8008d10 <_Bfree>
 8007874:	4641      	mov	r1, r8
 8007876:	9805      	ldr	r0, [sp, #20]
 8007878:	f001 fa4a 	bl	8008d10 <_Bfree>
 800787c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800787e:	9805      	ldr	r0, [sp, #20]
 8007880:	f001 fa46 	bl	8008d10 <_Bfree>
 8007884:	4621      	mov	r1, r4
 8007886:	9805      	ldr	r0, [sp, #20]
 8007888:	f001 fa42 	bl	8008d10 <_Bfree>
 800788c:	e5f9      	b.n	8007482 <_strtod_l+0x72>
 800788e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007890:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007894:	4293      	cmp	r3, r2
 8007896:	dbbc      	blt.n	8007812 <_strtod_l+0x402>
 8007898:	4c40      	ldr	r4, [pc, #256]	@ (800799c <_strtod_l+0x58c>)
 800789a:	f1c5 050f 	rsb	r5, r5, #15
 800789e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078a2:	4652      	mov	r2, sl
 80078a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a8:	465b      	mov	r3, fp
 80078aa:	f7f8 fe15 	bl	80004d8 <__aeabi_dmul>
 80078ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b0:	1b5d      	subs	r5, r3, r5
 80078b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078ba:	e791      	b.n	80077e0 <_strtod_l+0x3d0>
 80078bc:	3316      	adds	r3, #22
 80078be:	dba8      	blt.n	8007812 <_strtod_l+0x402>
 80078c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c2:	4650      	mov	r0, sl
 80078c4:	eba3 0808 	sub.w	r8, r3, r8
 80078c8:	4b34      	ldr	r3, [pc, #208]	@ (800799c <_strtod_l+0x58c>)
 80078ca:	4659      	mov	r1, fp
 80078cc:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80078d0:	e9d8 2300 	ldrd	r2, r3, [r8]
 80078d4:	f7f8 ff2a 	bl	800072c <__aeabi_ddiv>
 80078d8:	e75d      	b.n	8007796 <_strtod_l+0x386>
 80078da:	2300      	movs	r3, #0
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	461e      	mov	r6, r3
 80078e2:	4f2f      	ldr	r7, [pc, #188]	@ (80079a0 <_strtod_l+0x590>)
 80078e4:	1124      	asrs	r4, r4, #4
 80078e6:	2c01      	cmp	r4, #1
 80078e8:	dc21      	bgt.n	800792e <_strtod_l+0x51e>
 80078ea:	b10b      	cbz	r3, 80078f0 <_strtod_l+0x4e0>
 80078ec:	4682      	mov	sl, r0
 80078ee:	468b      	mov	fp, r1
 80078f0:	492b      	ldr	r1, [pc, #172]	@ (80079a0 <_strtod_l+0x590>)
 80078f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80078f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80078fa:	4652      	mov	r2, sl
 80078fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007900:	465b      	mov	r3, fp
 8007902:	f7f8 fde9 	bl	80004d8 <__aeabi_dmul>
 8007906:	4b23      	ldr	r3, [pc, #140]	@ (8007994 <_strtod_l+0x584>)
 8007908:	460a      	mov	r2, r1
 800790a:	400b      	ands	r3, r1
 800790c:	4925      	ldr	r1, [pc, #148]	@ (80079a4 <_strtod_l+0x594>)
 800790e:	4682      	mov	sl, r0
 8007910:	428b      	cmp	r3, r1
 8007912:	d898      	bhi.n	8007846 <_strtod_l+0x436>
 8007914:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007918:	428b      	cmp	r3, r1
 800791a:	bf86      	itte	hi
 800791c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007920:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80079a8 <_strtod_l+0x598>
 8007924:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007928:	2300      	movs	r3, #0
 800792a:	9308      	str	r3, [sp, #32]
 800792c:	e076      	b.n	8007a1c <_strtod_l+0x60c>
 800792e:	07e2      	lsls	r2, r4, #31
 8007930:	d504      	bpl.n	800793c <_strtod_l+0x52c>
 8007932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007936:	f7f8 fdcf 	bl	80004d8 <__aeabi_dmul>
 800793a:	2301      	movs	r3, #1
 800793c:	3601      	adds	r6, #1
 800793e:	1064      	asrs	r4, r4, #1
 8007940:	3708      	adds	r7, #8
 8007942:	e7d0      	b.n	80078e6 <_strtod_l+0x4d6>
 8007944:	d0f0      	beq.n	8007928 <_strtod_l+0x518>
 8007946:	4264      	negs	r4, r4
 8007948:	f014 020f 	ands.w	r2, r4, #15
 800794c:	d00a      	beq.n	8007964 <_strtod_l+0x554>
 800794e:	4b13      	ldr	r3, [pc, #76]	@ (800799c <_strtod_l+0x58c>)
 8007950:	4650      	mov	r0, sl
 8007952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007956:	4659      	mov	r1, fp
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f7f8 fee6 	bl	800072c <__aeabi_ddiv>
 8007960:	4682      	mov	sl, r0
 8007962:	468b      	mov	fp, r1
 8007964:	1124      	asrs	r4, r4, #4
 8007966:	d0df      	beq.n	8007928 <_strtod_l+0x518>
 8007968:	2c1f      	cmp	r4, #31
 800796a:	dd1f      	ble.n	80079ac <_strtod_l+0x59c>
 800796c:	2400      	movs	r4, #0
 800796e:	46a0      	mov	r8, r4
 8007970:	46a1      	mov	r9, r4
 8007972:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007974:	2322      	movs	r3, #34	@ 0x22
 8007976:	9a05      	ldr	r2, [sp, #20]
 8007978:	f04f 0a00 	mov.w	sl, #0
 800797c:	f04f 0b00 	mov.w	fp, #0
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e76b      	b.n	800785c <_strtod_l+0x44c>
 8007984:	0800d17e 	.word	0x0800d17e
 8007988:	0800d304 	.word	0x0800d304
 800798c:	0800d175 	.word	0x0800d175
 8007990:	0800d178 	.word	0x0800d178
 8007994:	7ff00000 	.word	0x7ff00000
 8007998:	0800cee1 	.word	0x0800cee1
 800799c:	0800d390 	.word	0x0800d390
 80079a0:	0800d368 	.word	0x0800d368
 80079a4:	7ca00000 	.word	0x7ca00000
 80079a8:	7fefffff 	.word	0x7fefffff
 80079ac:	f014 0310 	ands.w	r3, r4, #16
 80079b0:	bf18      	it	ne
 80079b2:	236a      	movne	r3, #106	@ 0x6a
 80079b4:	4650      	mov	r0, sl
 80079b6:	9308      	str	r3, [sp, #32]
 80079b8:	4659      	mov	r1, fp
 80079ba:	2300      	movs	r3, #0
 80079bc:	4e77      	ldr	r6, [pc, #476]	@ (8007b9c <_strtod_l+0x78c>)
 80079be:	07e7      	lsls	r7, r4, #31
 80079c0:	d504      	bpl.n	80079cc <_strtod_l+0x5bc>
 80079c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079c6:	f7f8 fd87 	bl	80004d8 <__aeabi_dmul>
 80079ca:	2301      	movs	r3, #1
 80079cc:	1064      	asrs	r4, r4, #1
 80079ce:	f106 0608 	add.w	r6, r6, #8
 80079d2:	d1f4      	bne.n	80079be <_strtod_l+0x5ae>
 80079d4:	b10b      	cbz	r3, 80079da <_strtod_l+0x5ca>
 80079d6:	4682      	mov	sl, r0
 80079d8:	468b      	mov	fp, r1
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	b1b3      	cbz	r3, 8007a0c <_strtod_l+0x5fc>
 80079de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80079e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	4659      	mov	r1, fp
 80079ea:	dd0f      	ble.n	8007a0c <_strtod_l+0x5fc>
 80079ec:	2b1f      	cmp	r3, #31
 80079ee:	dd58      	ble.n	8007aa2 <_strtod_l+0x692>
 80079f0:	2b34      	cmp	r3, #52	@ 0x34
 80079f2:	bfd8      	it	le
 80079f4:	f04f 33ff 	movle.w	r3, #4294967295
 80079f8:	f04f 0a00 	mov.w	sl, #0
 80079fc:	bfcf      	iteee	gt
 80079fe:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a02:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a06:	4093      	lslle	r3, r2
 8007a08:	ea03 0b01 	andle.w	fp, r3, r1
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4650      	mov	r0, sl
 8007a12:	4659      	mov	r1, fp
 8007a14:	f7f8 ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d1a7      	bne.n	800796c <_strtod_l+0x55c>
 8007a1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1e:	464a      	mov	r2, r9
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a24:	462b      	mov	r3, r5
 8007a26:	9805      	ldr	r0, [sp, #20]
 8007a28:	f001 f9da 	bl	8008de0 <__s2b>
 8007a2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f43f af09 	beq.w	8007846 <_strtod_l+0x436>
 8007a34:	2400      	movs	r4, #0
 8007a36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a3a:	2a00      	cmp	r2, #0
 8007a3c:	eba3 0308 	sub.w	r3, r3, r8
 8007a40:	bfa8      	it	ge
 8007a42:	2300      	movge	r3, #0
 8007a44:	46a0      	mov	r8, r4
 8007a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a48:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a4c:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a50:	9805      	ldr	r0, [sp, #20]
 8007a52:	6859      	ldr	r1, [r3, #4]
 8007a54:	f001 f91c 	bl	8008c90 <_Balloc>
 8007a58:	4681      	mov	r9, r0
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f aef7 	beq.w	800784e <_strtod_l+0x43e>
 8007a60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a62:	300c      	adds	r0, #12
 8007a64:	691a      	ldr	r2, [r3, #16]
 8007a66:	f103 010c 	add.w	r1, r3, #12
 8007a6a:	3202      	adds	r2, #2
 8007a6c:	0092      	lsls	r2, r2, #2
 8007a6e:	f000 fcb8 	bl	80083e2 <memcpy>
 8007a72:	ab1c      	add	r3, sp, #112	@ 0x70
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	9805      	ldr	r0, [sp, #20]
 8007a80:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007a84:	f001 fcd8 	bl	8009438 <__d2b>
 8007a88:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f43f aedf 	beq.w	800784e <_strtod_l+0x43e>
 8007a90:	2101      	movs	r1, #1
 8007a92:	9805      	ldr	r0, [sp, #20]
 8007a94:	f001 fa3a 	bl	8008f0c <__i2b>
 8007a98:	4680      	mov	r8, r0
 8007a9a:	b948      	cbnz	r0, 8007ab0 <_strtod_l+0x6a0>
 8007a9c:	f04f 0800 	mov.w	r8, #0
 8007aa0:	e6d5      	b.n	800784e <_strtod_l+0x43e>
 8007aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	ea03 0a0a 	and.w	sl, r3, sl
 8007aae:	e7ad      	b.n	8007a0c <_strtod_l+0x5fc>
 8007ab0:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ab2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	bfab      	itete	ge
 8007ab8:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007aba:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007abc:	18ef      	addge	r7, r5, r3
 8007abe:	1b5e      	sublt	r6, r3, r5
 8007ac0:	9b08      	ldr	r3, [sp, #32]
 8007ac2:	bfa8      	it	ge
 8007ac4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007ac6:	eba5 0503 	sub.w	r5, r5, r3
 8007aca:	4415      	add	r5, r2
 8007acc:	4b34      	ldr	r3, [pc, #208]	@ (8007ba0 <_strtod_l+0x790>)
 8007ace:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ad2:	bfb8      	it	lt
 8007ad4:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007adc:	da50      	bge.n	8007b80 <_strtod_l+0x770>
 8007ade:	1b5b      	subs	r3, r3, r5
 8007ae0:	2b1f      	cmp	r3, #31
 8007ae2:	f04f 0101 	mov.w	r1, #1
 8007ae6:	eba2 0203 	sub.w	r2, r2, r3
 8007aea:	dc3d      	bgt.n	8007b68 <_strtod_l+0x758>
 8007aec:	fa01 f303 	lsl.w	r3, r1, r3
 8007af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007af2:	2300      	movs	r3, #0
 8007af4:	9310      	str	r3, [sp, #64]	@ 0x40
 8007af6:	18bd      	adds	r5, r7, r2
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	42af      	cmp	r7, r5
 8007afc:	4416      	add	r6, r2
 8007afe:	441e      	add	r6, r3
 8007b00:	463b      	mov	r3, r7
 8007b02:	bfa8      	it	ge
 8007b04:	462b      	movge	r3, r5
 8007b06:	42b3      	cmp	r3, r6
 8007b08:	bfa8      	it	ge
 8007b0a:	4633      	movge	r3, r6
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bfc2      	ittt	gt
 8007b10:	1aed      	subgt	r5, r5, r3
 8007b12:	1af6      	subgt	r6, r6, r3
 8007b14:	1aff      	subgt	r7, r7, r3
 8007b16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dd16      	ble.n	8007b4a <_strtod_l+0x73a>
 8007b1c:	4641      	mov	r1, r8
 8007b1e:	461a      	mov	r2, r3
 8007b20:	9805      	ldr	r0, [sp, #20]
 8007b22:	f001 faab 	bl	800907c <__pow5mult>
 8007b26:	4680      	mov	r8, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d0b7      	beq.n	8007a9c <_strtod_l+0x68c>
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b30:	9805      	ldr	r0, [sp, #20]
 8007b32:	f001 fa01 	bl	8008f38 <__multiply>
 8007b36:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f43f ae88 	beq.w	800784e <_strtod_l+0x43e>
 8007b3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	f001 f8e5 	bl	8008d10 <_Bfree>
 8007b46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	dc1d      	bgt.n	8007b8a <_strtod_l+0x77a>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	dd27      	ble.n	8007ba4 <_strtod_l+0x794>
 8007b54:	4649      	mov	r1, r9
 8007b56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b58:	9805      	ldr	r0, [sp, #20]
 8007b5a:	f001 fa8f 	bl	800907c <__pow5mult>
 8007b5e:	4681      	mov	r9, r0
 8007b60:	bb00      	cbnz	r0, 8007ba4 <_strtod_l+0x794>
 8007b62:	f04f 0900 	mov.w	r9, #0
 8007b66:	e672      	b.n	800784e <_strtod_l+0x43e>
 8007b68:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007b6c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007b70:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007b74:	35e2      	adds	r5, #226	@ 0xe2
 8007b76:	fa01 f305 	lsl.w	r3, r1, r5
 8007b7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b7c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007b7e:	e7ba      	b.n	8007af6 <_strtod_l+0x6e6>
 8007b80:	2300      	movs	r3, #0
 8007b82:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b84:	2301      	movs	r3, #1
 8007b86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b88:	e7b5      	b.n	8007af6 <_strtod_l+0x6e6>
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b8e:	9805      	ldr	r0, [sp, #20]
 8007b90:	f001 face 	bl	8009130 <__lshift>
 8007b94:	901a      	str	r0, [sp, #104]	@ 0x68
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d1d9      	bne.n	8007b4e <_strtod_l+0x73e>
 8007b9a:	e658      	b.n	800784e <_strtod_l+0x43e>
 8007b9c:	0800d330 	.word	0x0800d330
 8007ba0:	fffffc02 	.word	0xfffffc02
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	dd07      	ble.n	8007bb8 <_strtod_l+0x7a8>
 8007ba8:	4649      	mov	r1, r9
 8007baa:	4632      	mov	r2, r6
 8007bac:	9805      	ldr	r0, [sp, #20]
 8007bae:	f001 fabf 	bl	8009130 <__lshift>
 8007bb2:	4681      	mov	r9, r0
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d0d4      	beq.n	8007b62 <_strtod_l+0x752>
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	dd08      	ble.n	8007bce <_strtod_l+0x7be>
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	463a      	mov	r2, r7
 8007bc0:	9805      	ldr	r0, [sp, #20]
 8007bc2:	f001 fab5 	bl	8009130 <__lshift>
 8007bc6:	4680      	mov	r8, r0
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	f43f ae40 	beq.w	800784e <_strtod_l+0x43e>
 8007bce:	464a      	mov	r2, r9
 8007bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bd2:	9805      	ldr	r0, [sp, #20]
 8007bd4:	f001 fb34 	bl	8009240 <__mdiff>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f ae37 	beq.w	800784e <_strtod_l+0x43e>
 8007be0:	68c3      	ldr	r3, [r0, #12]
 8007be2:	4641      	mov	r1, r8
 8007be4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007be6:	2300      	movs	r3, #0
 8007be8:	60c3      	str	r3, [r0, #12]
 8007bea:	f001 fb0d 	bl	8009208 <__mcmp>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	da3d      	bge.n	8007c6e <_strtod_l+0x85e>
 8007bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bf4:	ea53 030a 	orrs.w	r3, r3, sl
 8007bf8:	d163      	bne.n	8007cc2 <_strtod_l+0x8b2>
 8007bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d15f      	bne.n	8007cc2 <_strtod_l+0x8b2>
 8007c02:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c06:	0d1b      	lsrs	r3, r3, #20
 8007c08:	051b      	lsls	r3, r3, #20
 8007c0a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c0e:	d958      	bls.n	8007cc2 <_strtod_l+0x8b2>
 8007c10:	6963      	ldr	r3, [r4, #20]
 8007c12:	b913      	cbnz	r3, 8007c1a <_strtod_l+0x80a>
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	dd53      	ble.n	8007cc2 <_strtod_l+0x8b2>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	9805      	ldr	r0, [sp, #20]
 8007c20:	f001 fa86 	bl	8009130 <__lshift>
 8007c24:	4641      	mov	r1, r8
 8007c26:	4604      	mov	r4, r0
 8007c28:	f001 faee 	bl	8009208 <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	dd48      	ble.n	8007cc2 <_strtod_l+0x8b2>
 8007c30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c34:	9a08      	ldr	r2, [sp, #32]
 8007c36:	0d1b      	lsrs	r3, r3, #20
 8007c38:	051b      	lsls	r3, r3, #20
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	d062      	beq.n	8007d04 <_strtod_l+0x8f4>
 8007c3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c42:	d85f      	bhi.n	8007d04 <_strtod_l+0x8f4>
 8007c44:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c48:	f67f ae94 	bls.w	8007974 <_strtod_l+0x564>
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	4659      	mov	r1, fp
 8007c50:	4ba3      	ldr	r3, [pc, #652]	@ (8007ee0 <_strtod_l+0xad0>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f8 fc40 	bl	80004d8 <__aeabi_dmul>
 8007c58:	4ba2      	ldr	r3, [pc, #648]	@ (8007ee4 <_strtod_l+0xad4>)
 8007c5a:	4682      	mov	sl, r0
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	468b      	mov	fp, r1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f adff 	bne.w	8007864 <_strtod_l+0x454>
 8007c66:	2322      	movs	r3, #34	@ 0x22
 8007c68:	9a05      	ldr	r2, [sp, #20]
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e5fa      	b.n	8007864 <_strtod_l+0x454>
 8007c6e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007c72:	d165      	bne.n	8007d40 <_strtod_l+0x930>
 8007c74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c7a:	b35a      	cbz	r2, 8007cd4 <_strtod_l+0x8c4>
 8007c7c:	4a9a      	ldr	r2, [pc, #616]	@ (8007ee8 <_strtod_l+0xad8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d12b      	bne.n	8007cda <_strtod_l+0x8ca>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	4651      	mov	r1, sl
 8007c86:	b303      	cbz	r3, 8007cca <_strtod_l+0x8ba>
 8007c88:	465a      	mov	r2, fp
 8007c8a:	4b96      	ldr	r3, [pc, #600]	@ (8007ee4 <_strtod_l+0xad4>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	d81b      	bhi.n	8007cd0 <_strtod_l+0x8c0>
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca2:	4299      	cmp	r1, r3
 8007ca4:	d119      	bne.n	8007cda <_strtod_l+0x8ca>
 8007ca6:	4b91      	ldr	r3, [pc, #580]	@ (8007eec <_strtod_l+0xadc>)
 8007ca8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d102      	bne.n	8007cb4 <_strtod_l+0x8a4>
 8007cae:	3101      	adds	r1, #1
 8007cb0:	f43f adcd 	beq.w	800784e <_strtod_l+0x43e>
 8007cb4:	f04f 0a00 	mov.w	sl, #0
 8007cb8:	4b8a      	ldr	r3, [pc, #552]	@ (8007ee4 <_strtod_l+0xad4>)
 8007cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cbc:	401a      	ands	r2, r3
 8007cbe:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007cc2:	9b08      	ldr	r3, [sp, #32]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1c1      	bne.n	8007c4c <_strtod_l+0x83c>
 8007cc8:	e5cc      	b.n	8007864 <_strtod_l+0x454>
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	e7e8      	b.n	8007ca2 <_strtod_l+0x892>
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	e7e6      	b.n	8007ca2 <_strtod_l+0x892>
 8007cd4:	ea53 030a 	orrs.w	r3, r3, sl
 8007cd8:	d0aa      	beq.n	8007c30 <_strtod_l+0x820>
 8007cda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cdc:	b1db      	cbz	r3, 8007d16 <_strtod_l+0x906>
 8007cde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ce0:	4213      	tst	r3, r2
 8007ce2:	d0ee      	beq.n	8007cc2 <_strtod_l+0x8b2>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	4659      	mov	r1, fp
 8007cea:	9a08      	ldr	r2, [sp, #32]
 8007cec:	b1bb      	cbz	r3, 8007d1e <_strtod_l+0x90e>
 8007cee:	f7ff fb6e 	bl	80073ce <sulp>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cfa:	f7f8 fa37 	bl	800016c <__adddf3>
 8007cfe:	4682      	mov	sl, r0
 8007d00:	468b      	mov	fp, r1
 8007d02:	e7de      	b.n	8007cc2 <_strtod_l+0x8b2>
 8007d04:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d08:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007d10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d14:	e7d5      	b.n	8007cc2 <_strtod_l+0x8b2>
 8007d16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d18:	ea13 0f0a 	tst.w	r3, sl
 8007d1c:	e7e1      	b.n	8007ce2 <_strtod_l+0x8d2>
 8007d1e:	f7ff fb56 	bl	80073ce <sulp>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d2a:	f7f8 fa1d 	bl	8000168 <__aeabi_dsub>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2300      	movs	r3, #0
 8007d32:	4682      	mov	sl, r0
 8007d34:	468b      	mov	fp, r1
 8007d36:	f7f8 fe37 	bl	80009a8 <__aeabi_dcmpeq>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d0c1      	beq.n	8007cc2 <_strtod_l+0x8b2>
 8007d3e:	e619      	b.n	8007974 <_strtod_l+0x564>
 8007d40:	4641      	mov	r1, r8
 8007d42:	4620      	mov	r0, r4
 8007d44:	f001 fbd0 	bl	80094e8 <__ratio>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460f      	mov	r7, r1
 8007d52:	f7f8 fe3d 	bl	80009d0 <__aeabi_dcmple>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d06d      	beq.n	8007e36 <_strtod_l+0xa26>
 8007d5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d178      	bne.n	8007e52 <_strtod_l+0xa42>
 8007d60:	f1ba 0f00 	cmp.w	sl, #0
 8007d64:	d156      	bne.n	8007e14 <_strtod_l+0xa04>
 8007d66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d158      	bne.n	8007e22 <_strtod_l+0xa12>
 8007d70:	2200      	movs	r2, #0
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	4b5e      	ldr	r3, [pc, #376]	@ (8007ef0 <_strtod_l+0xae0>)
 8007d78:	f7f8 fe20 	bl	80009bc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d157      	bne.n	8007e30 <_strtod_l+0xa20>
 8007d80:	4630      	mov	r0, r6
 8007d82:	4639      	mov	r1, r7
 8007d84:	2200      	movs	r2, #0
 8007d86:	4b5b      	ldr	r3, [pc, #364]	@ (8007ef4 <_strtod_l+0xae4>)
 8007d88:	f7f8 fba6 	bl	80004d8 <__aeabi_dmul>
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	460f      	mov	r7, r1
 8007d90:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007d94:	9606      	str	r6, [sp, #24]
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d9c:	4d51      	ldr	r5, [pc, #324]	@ (8007ee4 <_strtod_l+0xad4>)
 8007d9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007da4:	401d      	ands	r5, r3
 8007da6:	4b54      	ldr	r3, [pc, #336]	@ (8007ef8 <_strtod_l+0xae8>)
 8007da8:	429d      	cmp	r5, r3
 8007daa:	f040 80ab 	bne.w	8007f04 <_strtod_l+0xaf4>
 8007dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db0:	4650      	mov	r0, sl
 8007db2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007db6:	4659      	mov	r1, fp
 8007db8:	f001 fad6 	bl	8009368 <__ulp>
 8007dbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dc0:	f7f8 fb8a 	bl	80004d8 <__aeabi_dmul>
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	465b      	mov	r3, fp
 8007dc8:	f7f8 f9d0 	bl	800016c <__adddf3>
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4945      	ldr	r1, [pc, #276]	@ (8007ee4 <_strtod_l+0xad4>)
 8007dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8007efc <_strtod_l+0xaec>)
 8007dd2:	4019      	ands	r1, r3
 8007dd4:	4291      	cmp	r1, r2
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	d942      	bls.n	8007e60 <_strtod_l+0xa50>
 8007dda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ddc:	4b43      	ldr	r3, [pc, #268]	@ (8007eec <_strtod_l+0xadc>)
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d103      	bne.n	8007dea <_strtod_l+0x9da>
 8007de2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007de4:	3301      	adds	r3, #1
 8007de6:	f43f ad32 	beq.w	800784e <_strtod_l+0x43e>
 8007dea:	f04f 3aff 	mov.w	sl, #4294967295
 8007dee:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007eec <_strtod_l+0xadc>
 8007df2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007df4:	9805      	ldr	r0, [sp, #20]
 8007df6:	f000 ff8b 	bl	8008d10 <_Bfree>
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	9805      	ldr	r0, [sp, #20]
 8007dfe:	f000 ff87 	bl	8008d10 <_Bfree>
 8007e02:	4641      	mov	r1, r8
 8007e04:	9805      	ldr	r0, [sp, #20]
 8007e06:	f000 ff83 	bl	8008d10 <_Bfree>
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	9805      	ldr	r0, [sp, #20]
 8007e0e:	f000 ff7f 	bl	8008d10 <_Bfree>
 8007e12:	e61c      	b.n	8007a4e <_strtod_l+0x63e>
 8007e14:	f1ba 0f01 	cmp.w	sl, #1
 8007e18:	d103      	bne.n	8007e22 <_strtod_l+0xa12>
 8007e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f43f ada9 	beq.w	8007974 <_strtod_l+0x564>
 8007e22:	2200      	movs	r2, #0
 8007e24:	4b36      	ldr	r3, [pc, #216]	@ (8007f00 <_strtod_l+0xaf0>)
 8007e26:	2600      	movs	r6, #0
 8007e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e2c:	4f30      	ldr	r7, [pc, #192]	@ (8007ef0 <_strtod_l+0xae0>)
 8007e2e:	e7b3      	b.n	8007d98 <_strtod_l+0x988>
 8007e30:	2600      	movs	r6, #0
 8007e32:	4f30      	ldr	r7, [pc, #192]	@ (8007ef4 <_strtod_l+0xae4>)
 8007e34:	e7ac      	b.n	8007d90 <_strtod_l+0x980>
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8007ef4 <_strtod_l+0xae4>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f7f8 fb4b 	bl	80004d8 <__aeabi_dmul>
 8007e42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0a1      	beq.n	8007d90 <_strtod_l+0x980>
 8007e4c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e50:	e7a2      	b.n	8007d98 <_strtod_l+0x988>
 8007e52:	2200      	movs	r2, #0
 8007e54:	4b26      	ldr	r3, [pc, #152]	@ (8007ef0 <_strtod_l+0xae0>)
 8007e56:	4616      	mov	r6, r2
 8007e58:	461f      	mov	r7, r3
 8007e5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e5e:	e79b      	b.n	8007d98 <_strtod_l+0x988>
 8007e60:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1c1      	bne.n	8007df2 <_strtod_l+0x9e2>
 8007e6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e72:	0d1b      	lsrs	r3, r3, #20
 8007e74:	051b      	lsls	r3, r3, #20
 8007e76:	429d      	cmp	r5, r3
 8007e78:	d1bb      	bne.n	8007df2 <_strtod_l+0x9e2>
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	4639      	mov	r1, r7
 8007e7e:	f7f9 f9a3 	bl	80011c8 <__aeabi_d2lz>
 8007e82:	f7f8 fafb 	bl	800047c <__aeabi_l2d>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 f96b 	bl	8000168 <__aeabi_dsub>
 8007e92:	460b      	mov	r3, r1
 8007e94:	4602      	mov	r2, r0
 8007e96:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007e9a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ea0:	ea46 060a 	orr.w	r6, r6, sl
 8007ea4:	431e      	orrs	r6, r3
 8007ea6:	d06a      	beq.n	8007f7e <_strtod_l+0xb6e>
 8007ea8:	a309      	add	r3, pc, #36	@ (adr r3, 8007ed0 <_strtod_l+0xac0>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 fd85 	bl	80009bc <__aeabi_dcmplt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	f47f acd6 	bne.w	8007864 <_strtod_l+0x454>
 8007eb8:	a307      	add	r3, pc, #28	@ (adr r3, 8007ed8 <_strtod_l+0xac8>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ec2:	f7f8 fd99 	bl	80009f8 <__aeabi_dcmpgt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d093      	beq.n	8007df2 <_strtod_l+0x9e2>
 8007eca:	e4cb      	b.n	8007864 <_strtod_l+0x454>
 8007ecc:	f3af 8000 	nop.w
 8007ed0:	94a03595 	.word	0x94a03595
 8007ed4:	3fdfffff 	.word	0x3fdfffff
 8007ed8:	35afe535 	.word	0x35afe535
 8007edc:	3fe00000 	.word	0x3fe00000
 8007ee0:	39500000 	.word	0x39500000
 8007ee4:	7ff00000 	.word	0x7ff00000
 8007ee8:	000fffff 	.word	0x000fffff
 8007eec:	7fefffff 	.word	0x7fefffff
 8007ef0:	3ff00000 	.word	0x3ff00000
 8007ef4:	3fe00000 	.word	0x3fe00000
 8007ef8:	7fe00000 	.word	0x7fe00000
 8007efc:	7c9fffff 	.word	0x7c9fffff
 8007f00:	bff00000 	.word	0xbff00000
 8007f04:	9b08      	ldr	r3, [sp, #32]
 8007f06:	b323      	cbz	r3, 8007f52 <_strtod_l+0xb42>
 8007f08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f0c:	d821      	bhi.n	8007f52 <_strtod_l+0xb42>
 8007f0e:	a328      	add	r3, pc, #160	@ (adr r3, 8007fb0 <_strtod_l+0xba0>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	f7f8 fd5a 	bl	80009d0 <__aeabi_dcmple>
 8007f1c:	b1a0      	cbz	r0, 8007f48 <_strtod_l+0xb38>
 8007f1e:	4639      	mov	r1, r7
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7f8 fdb1 	bl	8000a88 <__aeabi_d2uiz>
 8007f26:	2801      	cmp	r0, #1
 8007f28:	bf38      	it	cc
 8007f2a:	2001      	movcc	r0, #1
 8007f2c:	f7f8 fa5a 	bl	80003e4 <__aeabi_ui2d>
 8007f30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	b9fb      	cbnz	r3, 8007f78 <_strtod_l+0xb68>
 8007f38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007f44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007f4e:	1b5b      	subs	r3, r3, r5
 8007f50:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007f5a:	f001 fa05 	bl	8009368 <__ulp>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4650      	mov	r0, sl
 8007f64:	4659      	mov	r1, fp
 8007f66:	f7f8 fab7 	bl	80004d8 <__aeabi_dmul>
 8007f6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f6e:	f7f8 f8fd 	bl	800016c <__adddf3>
 8007f72:	4682      	mov	sl, r0
 8007f74:	468b      	mov	fp, r1
 8007f76:	e775      	b.n	8007e64 <_strtod_l+0xa54>
 8007f78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007f7c:	e7e0      	b.n	8007f40 <_strtod_l+0xb30>
 8007f7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007fb8 <_strtod_l+0xba8>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 fd1a 	bl	80009bc <__aeabi_dcmplt>
 8007f88:	e79d      	b.n	8007ec6 <_strtod_l+0xab6>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007f8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007f90:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	f7ff ba79 	b.w	800748a <_strtod_l+0x7a>
 8007f98:	2a65      	cmp	r2, #101	@ 0x65
 8007f9a:	f43f ab72 	beq.w	8007682 <_strtod_l+0x272>
 8007f9e:	2a45      	cmp	r2, #69	@ 0x45
 8007fa0:	f43f ab6f 	beq.w	8007682 <_strtod_l+0x272>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f7ff bbaa 	b.w	80076fe <_strtod_l+0x2ee>
 8007faa:	bf00      	nop
 8007fac:	f3af 8000 	nop.w
 8007fb0:	ffc00000 	.word	0xffc00000
 8007fb4:	41dfffff 	.word	0x41dfffff
 8007fb8:	94a03595 	.word	0x94a03595
 8007fbc:	3fcfffff 	.word	0x3fcfffff

08007fc0 <strtod>:
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	4802      	ldr	r0, [pc, #8]	@ (8007fd0 <strtod+0x10>)
 8007fc6:	4b03      	ldr	r3, [pc, #12]	@ (8007fd4 <strtod+0x14>)
 8007fc8:	6800      	ldr	r0, [r0, #0]
 8007fca:	f7ff ba21 	b.w	8007410 <_strtod_l>
 8007fce:	bf00      	nop
 8007fd0:	20000304 	.word	0x20000304
 8007fd4:	20000198 	.word	0x20000198

08007fd8 <std>:
 8007fd8:	2300      	movs	r3, #0
 8007fda:	b510      	push	{r4, lr}
 8007fdc:	4604      	mov	r4, r0
 8007fde:	e9c0 3300 	strd	r3, r3, [r0]
 8007fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fe6:	6083      	str	r3, [r0, #8]
 8007fe8:	8181      	strh	r1, [r0, #12]
 8007fea:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fec:	81c2      	strh	r2, [r0, #14]
 8007fee:	6183      	str	r3, [r0, #24]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	2208      	movs	r2, #8
 8007ff4:	305c      	adds	r0, #92	@ 0x5c
 8007ff6:	f000 f94c 	bl	8008292 <memset>
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <std+0x58>)
 8007ffc:	6224      	str	r4, [r4, #32]
 8007ffe:	6263      	str	r3, [r4, #36]	@ 0x24
 8008000:	4b0c      	ldr	r3, [pc, #48]	@ (8008034 <std+0x5c>)
 8008002:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008004:	4b0c      	ldr	r3, [pc, #48]	@ (8008038 <std+0x60>)
 8008006:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008008:	4b0c      	ldr	r3, [pc, #48]	@ (800803c <std+0x64>)
 800800a:	6323      	str	r3, [r4, #48]	@ 0x30
 800800c:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <std+0x68>)
 800800e:	429c      	cmp	r4, r3
 8008010:	d006      	beq.n	8008020 <std+0x48>
 8008012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008016:	4294      	cmp	r4, r2
 8008018:	d002      	beq.n	8008020 <std+0x48>
 800801a:	33d0      	adds	r3, #208	@ 0xd0
 800801c:	429c      	cmp	r4, r3
 800801e:	d105      	bne.n	800802c <std+0x54>
 8008020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f000 b9d0 	b.w	80083cc <__retarget_lock_init_recursive>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	0800820d 	.word	0x0800820d
 8008034:	0800822f 	.word	0x0800822f
 8008038:	08008267 	.word	0x08008267
 800803c:	0800828b 	.word	0x0800828b
 8008040:	2000483c 	.word	0x2000483c

08008044 <stdio_exit_handler>:
 8008044:	4a02      	ldr	r2, [pc, #8]	@ (8008050 <stdio_exit_handler+0xc>)
 8008046:	4903      	ldr	r1, [pc, #12]	@ (8008054 <stdio_exit_handler+0x10>)
 8008048:	4803      	ldr	r0, [pc, #12]	@ (8008058 <stdio_exit_handler+0x14>)
 800804a:	f000 b869 	b.w	8008120 <_fwalk_sglue>
 800804e:	bf00      	nop
 8008050:	2000018c 	.word	0x2000018c
 8008054:	08009cb9 	.word	0x08009cb9
 8008058:	20000308 	.word	0x20000308

0800805c <cleanup_stdio>:
 800805c:	6841      	ldr	r1, [r0, #4]
 800805e:	4b0c      	ldr	r3, [pc, #48]	@ (8008090 <cleanup_stdio+0x34>)
 8008060:	b510      	push	{r4, lr}
 8008062:	4299      	cmp	r1, r3
 8008064:	4604      	mov	r4, r0
 8008066:	d001      	beq.n	800806c <cleanup_stdio+0x10>
 8008068:	f001 fe26 	bl	8009cb8 <_fflush_r>
 800806c:	68a1      	ldr	r1, [r4, #8]
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <cleanup_stdio+0x38>)
 8008070:	4299      	cmp	r1, r3
 8008072:	d002      	beq.n	800807a <cleanup_stdio+0x1e>
 8008074:	4620      	mov	r0, r4
 8008076:	f001 fe1f 	bl	8009cb8 <_fflush_r>
 800807a:	68e1      	ldr	r1, [r4, #12]
 800807c:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <cleanup_stdio+0x3c>)
 800807e:	4299      	cmp	r1, r3
 8008080:	d004      	beq.n	800808c <cleanup_stdio+0x30>
 8008082:	4620      	mov	r0, r4
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f001 be16 	b.w	8009cb8 <_fflush_r>
 800808c:	bd10      	pop	{r4, pc}
 800808e:	bf00      	nop
 8008090:	2000483c 	.word	0x2000483c
 8008094:	200048a4 	.word	0x200048a4
 8008098:	2000490c 	.word	0x2000490c

0800809c <global_stdio_init.part.0>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <global_stdio_init.part.0+0x30>)
 80080a0:	4c0b      	ldr	r4, [pc, #44]	@ (80080d0 <global_stdio_init.part.0+0x34>)
 80080a2:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <global_stdio_init.part.0+0x38>)
 80080a4:	4620      	mov	r0, r4
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	2104      	movs	r1, #4
 80080aa:	2200      	movs	r2, #0
 80080ac:	f7ff ff94 	bl	8007fd8 <std>
 80080b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080b4:	2201      	movs	r2, #1
 80080b6:	2109      	movs	r1, #9
 80080b8:	f7ff ff8e 	bl	8007fd8 <std>
 80080bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080c0:	2202      	movs	r2, #2
 80080c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c6:	2112      	movs	r1, #18
 80080c8:	f7ff bf86 	b.w	8007fd8 <std>
 80080cc:	20004974 	.word	0x20004974
 80080d0:	2000483c 	.word	0x2000483c
 80080d4:	08008045 	.word	0x08008045

080080d8 <__sfp_lock_acquire>:
 80080d8:	4801      	ldr	r0, [pc, #4]	@ (80080e0 <__sfp_lock_acquire+0x8>)
 80080da:	f000 b978 	b.w	80083ce <__retarget_lock_acquire_recursive>
 80080de:	bf00      	nop
 80080e0:	2000497d 	.word	0x2000497d

080080e4 <__sfp_lock_release>:
 80080e4:	4801      	ldr	r0, [pc, #4]	@ (80080ec <__sfp_lock_release+0x8>)
 80080e6:	f000 b973 	b.w	80083d0 <__retarget_lock_release_recursive>
 80080ea:	bf00      	nop
 80080ec:	2000497d 	.word	0x2000497d

080080f0 <__sinit>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7ff fff0 	bl	80080d8 <__sfp_lock_acquire>
 80080f8:	6a23      	ldr	r3, [r4, #32]
 80080fa:	b11b      	cbz	r3, 8008104 <__sinit+0x14>
 80080fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008100:	f7ff bff0 	b.w	80080e4 <__sfp_lock_release>
 8008104:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <__sinit+0x28>)
 8008106:	6223      	str	r3, [r4, #32]
 8008108:	4b04      	ldr	r3, [pc, #16]	@ (800811c <__sinit+0x2c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f5      	bne.n	80080fc <__sinit+0xc>
 8008110:	f7ff ffc4 	bl	800809c <global_stdio_init.part.0>
 8008114:	e7f2      	b.n	80080fc <__sinit+0xc>
 8008116:	bf00      	nop
 8008118:	0800805d 	.word	0x0800805d
 800811c:	20004974 	.word	0x20004974

08008120 <_fwalk_sglue>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	4607      	mov	r7, r0
 8008126:	4688      	mov	r8, r1
 8008128:	4614      	mov	r4, r2
 800812a:	2600      	movs	r6, #0
 800812c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008130:	f1b9 0901 	subs.w	r9, r9, #1
 8008134:	d505      	bpl.n	8008142 <_fwalk_sglue+0x22>
 8008136:	6824      	ldr	r4, [r4, #0]
 8008138:	2c00      	cmp	r4, #0
 800813a:	d1f7      	bne.n	800812c <_fwalk_sglue+0xc>
 800813c:	4630      	mov	r0, r6
 800813e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d907      	bls.n	8008158 <_fwalk_sglue+0x38>
 8008148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800814c:	3301      	adds	r3, #1
 800814e:	d003      	beq.n	8008158 <_fwalk_sglue+0x38>
 8008150:	4629      	mov	r1, r5
 8008152:	4638      	mov	r0, r7
 8008154:	47c0      	blx	r8
 8008156:	4306      	orrs	r6, r0
 8008158:	3568      	adds	r5, #104	@ 0x68
 800815a:	e7e9      	b.n	8008130 <_fwalk_sglue+0x10>

0800815c <sniprintf>:
 800815c:	b40c      	push	{r2, r3}
 800815e:	b530      	push	{r4, r5, lr}
 8008160:	4b18      	ldr	r3, [pc, #96]	@ (80081c4 <sniprintf+0x68>)
 8008162:	1e0c      	subs	r4, r1, #0
 8008164:	681d      	ldr	r5, [r3, #0]
 8008166:	b09d      	sub	sp, #116	@ 0x74
 8008168:	da08      	bge.n	800817c <sniprintf+0x20>
 800816a:	238b      	movs	r3, #139	@ 0x8b
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	b01d      	add	sp, #116	@ 0x74
 8008174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008178:	b002      	add	sp, #8
 800817a:	4770      	bx	lr
 800817c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008180:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	931b      	str	r3, [sp, #108]	@ 0x6c
 800818a:	bf0c      	ite	eq
 800818c:	4623      	moveq	r3, r4
 800818e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800819a:	9002      	str	r0, [sp, #8]
 800819c:	9006      	str	r0, [sp, #24]
 800819e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081a2:	4628      	mov	r0, r5
 80081a4:	ab21      	add	r3, sp, #132	@ 0x84
 80081a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081a8:	a902      	add	r1, sp, #8
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	f001 fa78 	bl	80096a0 <_svfiprintf_r>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	bfbc      	itt	lt
 80081b4:	238b      	movlt	r3, #139	@ 0x8b
 80081b6:	602b      	strlt	r3, [r5, #0]
 80081b8:	2c00      	cmp	r4, #0
 80081ba:	d0da      	beq.n	8008172 <sniprintf+0x16>
 80081bc:	2200      	movs	r2, #0
 80081be:	9b02      	ldr	r3, [sp, #8]
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	e7d6      	b.n	8008172 <sniprintf+0x16>
 80081c4:	20000304 	.word	0x20000304

080081c8 <siprintf>:
 80081c8:	b40e      	push	{r1, r2, r3}
 80081ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081ce:	b510      	push	{r4, lr}
 80081d0:	2400      	movs	r4, #0
 80081d2:	b09d      	sub	sp, #116	@ 0x74
 80081d4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80081d6:	9002      	str	r0, [sp, #8]
 80081d8:	9006      	str	r0, [sp, #24]
 80081da:	9107      	str	r1, [sp, #28]
 80081dc:	9104      	str	r1, [sp, #16]
 80081de:	4809      	ldr	r0, [pc, #36]	@ (8008204 <siprintf+0x3c>)
 80081e0:	4909      	ldr	r1, [pc, #36]	@ (8008208 <siprintf+0x40>)
 80081e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e6:	9105      	str	r1, [sp, #20]
 80081e8:	6800      	ldr	r0, [r0, #0]
 80081ea:	a902      	add	r1, sp, #8
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80081f0:	f001 fa56 	bl	80096a0 <_svfiprintf_r>
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	701c      	strb	r4, [r3, #0]
 80081f8:	b01d      	add	sp, #116	@ 0x74
 80081fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fe:	b003      	add	sp, #12
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000304 	.word	0x20000304
 8008208:	ffff0208 	.word	0xffff0208

0800820c <__sread>:
 800820c:	b510      	push	{r4, lr}
 800820e:	460c      	mov	r4, r1
 8008210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008214:	f000 f88c 	bl	8008330 <_read_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	bfab      	itete	ge
 800821c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800821e:	89a3      	ldrhlt	r3, [r4, #12]
 8008220:	181b      	addge	r3, r3, r0
 8008222:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008226:	bfac      	ite	ge
 8008228:	6563      	strge	r3, [r4, #84]	@ 0x54
 800822a:	81a3      	strhlt	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__swrite>:
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	461f      	mov	r7, r3
 8008234:	898b      	ldrh	r3, [r1, #12]
 8008236:	4605      	mov	r5, r0
 8008238:	05db      	lsls	r3, r3, #23
 800823a:	460c      	mov	r4, r1
 800823c:	4616      	mov	r6, r2
 800823e:	d505      	bpl.n	800824c <__swrite+0x1e>
 8008240:	2302      	movs	r3, #2
 8008242:	2200      	movs	r2, #0
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f860 	bl	800830c <_lseek_r>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	4632      	mov	r2, r6
 8008250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	4628      	mov	r0, r5
 8008258:	463b      	mov	r3, r7
 800825a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800825e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008262:	f000 b877 	b.w	8008354 <_write_r>

08008266 <__sseek>:
 8008266:	b510      	push	{r4, lr}
 8008268:	460c      	mov	r4, r1
 800826a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826e:	f000 f84d 	bl	800830c <_lseek_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	bf15      	itete	ne
 8008278:	6560      	strne	r0, [r4, #84]	@ 0x54
 800827a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800827e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008282:	81a3      	strheq	r3, [r4, #12]
 8008284:	bf18      	it	ne
 8008286:	81a3      	strhne	r3, [r4, #12]
 8008288:	bd10      	pop	{r4, pc}

0800828a <__sclose>:
 800828a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828e:	f000 b82d 	b.w	80082ec <_close_r>

08008292 <memset>:
 8008292:	4603      	mov	r3, r0
 8008294:	4402      	add	r2, r0
 8008296:	4293      	cmp	r3, r2
 8008298:	d100      	bne.n	800829c <memset+0xa>
 800829a:	4770      	bx	lr
 800829c:	f803 1b01 	strb.w	r1, [r3], #1
 80082a0:	e7f9      	b.n	8008296 <memset+0x4>

080082a2 <strncmp>:
 80082a2:	b510      	push	{r4, lr}
 80082a4:	b16a      	cbz	r2, 80082c2 <strncmp+0x20>
 80082a6:	3901      	subs	r1, #1
 80082a8:	1884      	adds	r4, r0, r2
 80082aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d103      	bne.n	80082be <strncmp+0x1c>
 80082b6:	42a0      	cmp	r0, r4
 80082b8:	d001      	beq.n	80082be <strncmp+0x1c>
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d1f5      	bne.n	80082aa <strncmp+0x8>
 80082be:	1ad0      	subs	r0, r2, r3
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	4610      	mov	r0, r2
 80082c4:	e7fc      	b.n	80082c0 <strncmp+0x1e>

080082c6 <strncpy>:
 80082c6:	4603      	mov	r3, r0
 80082c8:	b510      	push	{r4, lr}
 80082ca:	3901      	subs	r1, #1
 80082cc:	b132      	cbz	r2, 80082dc <strncpy+0x16>
 80082ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082d2:	3a01      	subs	r2, #1
 80082d4:	f803 4b01 	strb.w	r4, [r3], #1
 80082d8:	2c00      	cmp	r4, #0
 80082da:	d1f7      	bne.n	80082cc <strncpy+0x6>
 80082dc:	2100      	movs	r1, #0
 80082de:	441a      	add	r2, r3
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d100      	bne.n	80082e6 <strncpy+0x20>
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ea:	e7f9      	b.n	80082e0 <strncpy+0x1a>

080082ec <_close_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	2300      	movs	r3, #0
 80082f0:	4d05      	ldr	r5, [pc, #20]	@ (8008308 <_close_r+0x1c>)
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fb ff7d 	bl	80041f6 <_close>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_close_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_close_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	20004978 	.word	0x20004978

0800830c <_lseek_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	4611      	mov	r1, r2
 8008314:	2200      	movs	r2, #0
 8008316:	4d05      	ldr	r5, [pc, #20]	@ (800832c <_lseek_r+0x20>)
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7fb ff75 	bl	800420a <_lseek>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_lseek_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_lseek_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	20004978 	.word	0x20004978

08008330 <_read_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	4604      	mov	r4, r0
 8008334:	4608      	mov	r0, r1
 8008336:	4611      	mov	r1, r2
 8008338:	2200      	movs	r2, #0
 800833a:	4d05      	ldr	r5, [pc, #20]	@ (8008350 <_read_r+0x20>)
 800833c:	602a      	str	r2, [r5, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	f7fb ff3d 	bl	80041be <_read>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_read_r+0x1e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_read_r+0x1e>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20004978 	.word	0x20004978

08008354 <_write_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	2200      	movs	r2, #0
 800835e:	4d05      	ldr	r5, [pc, #20]	@ (8008374 <_write_r+0x20>)
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7fb ff39 	bl	80041da <_write>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_write_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_write_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20004978 	.word	0x20004978

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	@ (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000304 	.word	0x20000304

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	2600      	movs	r6, #0
 8008388:	4d0c      	ldr	r5, [pc, #48]	@ (80083bc <__libc_init_array+0x38>)
 800838a:	4c0d      	ldr	r4, [pc, #52]	@ (80083c0 <__libc_init_array+0x3c>)
 800838c:	1b64      	subs	r4, r4, r5
 800838e:	10a4      	asrs	r4, r4, #2
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	f003 fdf4 	bl	800bf80 <_init>
 8008398:	2600      	movs	r6, #0
 800839a:	4d0a      	ldr	r5, [pc, #40]	@ (80083c4 <__libc_init_array+0x40>)
 800839c:	4c0a      	ldr	r4, [pc, #40]	@ (80083c8 <__libc_init_array+0x44>)
 800839e:	1b64      	subs	r4, r4, r5
 80083a0:	10a4      	asrs	r4, r4, #2
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	0800d800 	.word	0x0800d800
 80083c0:	0800d800 	.word	0x0800d800
 80083c4:	0800d800 	.word	0x0800d800
 80083c8:	0800d804 	.word	0x0800d804

080083cc <__retarget_lock_init_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_acquire_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <__retarget_lock_release_recursive>:
 80083d0:	4770      	bx	lr

080083d2 <strcpy>:
 80083d2:	4603      	mov	r3, r0
 80083d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d8:	f803 2b01 	strb.w	r2, [r3], #1
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d1f9      	bne.n	80083d4 <strcpy+0x2>
 80083e0:	4770      	bx	lr

080083e2 <memcpy>:
 80083e2:	440a      	add	r2, r1
 80083e4:	4291      	cmp	r1, r2
 80083e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ea:	d100      	bne.n	80083ee <memcpy+0xc>
 80083ec:	4770      	bx	lr
 80083ee:	b510      	push	{r4, lr}
 80083f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f4:	4291      	cmp	r1, r2
 80083f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fa:	d1f9      	bne.n	80083f0 <memcpy+0xe>
 80083fc:	bd10      	pop	{r4, pc}
	...

08008400 <nan>:
 8008400:	2000      	movs	r0, #0
 8008402:	4901      	ldr	r1, [pc, #4]	@ (8008408 <nan+0x8>)
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	7ff80000 	.word	0x7ff80000

0800840c <_free_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	2900      	cmp	r1, #0
 8008412:	d040      	beq.n	8008496 <_free_r+0x8a>
 8008414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008418:	1f0c      	subs	r4, r1, #4
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfb8      	it	lt
 800841e:	18e4      	addlt	r4, r4, r3
 8008420:	f000 fc2a 	bl	8008c78 <__malloc_lock>
 8008424:	4a1c      	ldr	r2, [pc, #112]	@ (8008498 <_free_r+0x8c>)
 8008426:	6813      	ldr	r3, [r2, #0]
 8008428:	b933      	cbnz	r3, 8008438 <_free_r+0x2c>
 800842a:	6063      	str	r3, [r4, #4]
 800842c:	6014      	str	r4, [r2, #0]
 800842e:	4628      	mov	r0, r5
 8008430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008434:	f000 bc26 	b.w	8008c84 <__malloc_unlock>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d908      	bls.n	800844e <_free_r+0x42>
 800843c:	6820      	ldr	r0, [r4, #0]
 800843e:	1821      	adds	r1, r4, r0
 8008440:	428b      	cmp	r3, r1
 8008442:	bf01      	itttt	eq
 8008444:	6819      	ldreq	r1, [r3, #0]
 8008446:	685b      	ldreq	r3, [r3, #4]
 8008448:	1809      	addeq	r1, r1, r0
 800844a:	6021      	streq	r1, [r4, #0]
 800844c:	e7ed      	b.n	800842a <_free_r+0x1e>
 800844e:	461a      	mov	r2, r3
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	b10b      	cbz	r3, 8008458 <_free_r+0x4c>
 8008454:	42a3      	cmp	r3, r4
 8008456:	d9fa      	bls.n	800844e <_free_r+0x42>
 8008458:	6811      	ldr	r1, [r2, #0]
 800845a:	1850      	adds	r0, r2, r1
 800845c:	42a0      	cmp	r0, r4
 800845e:	d10b      	bne.n	8008478 <_free_r+0x6c>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	4401      	add	r1, r0
 8008464:	1850      	adds	r0, r2, r1
 8008466:	4283      	cmp	r3, r0
 8008468:	6011      	str	r1, [r2, #0]
 800846a:	d1e0      	bne.n	800842e <_free_r+0x22>
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	4408      	add	r0, r1
 8008472:	6010      	str	r0, [r2, #0]
 8008474:	6053      	str	r3, [r2, #4]
 8008476:	e7da      	b.n	800842e <_free_r+0x22>
 8008478:	d902      	bls.n	8008480 <_free_r+0x74>
 800847a:	230c      	movs	r3, #12
 800847c:	602b      	str	r3, [r5, #0]
 800847e:	e7d6      	b.n	800842e <_free_r+0x22>
 8008480:	6820      	ldr	r0, [r4, #0]
 8008482:	1821      	adds	r1, r4, r0
 8008484:	428b      	cmp	r3, r1
 8008486:	bf01      	itttt	eq
 8008488:	6819      	ldreq	r1, [r3, #0]
 800848a:	685b      	ldreq	r3, [r3, #4]
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	6054      	str	r4, [r2, #4]
 8008494:	e7cb      	b.n	800842e <_free_r+0x22>
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20004984 	.word	0x20004984

0800849c <rshift>:
 800849c:	6903      	ldr	r3, [r0, #16]
 800849e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084a6:	f100 0414 	add.w	r4, r0, #20
 80084aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084ae:	dd46      	ble.n	800853e <rshift+0xa2>
 80084b0:	f011 011f 	ands.w	r1, r1, #31
 80084b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084bc:	d10c      	bne.n	80084d8 <rshift+0x3c>
 80084be:	4629      	mov	r1, r5
 80084c0:	f100 0710 	add.w	r7, r0, #16
 80084c4:	42b1      	cmp	r1, r6
 80084c6:	d335      	bcc.n	8008534 <rshift+0x98>
 80084c8:	1a9b      	subs	r3, r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	1eea      	subs	r2, r5, #3
 80084ce:	4296      	cmp	r6, r2
 80084d0:	bf38      	it	cc
 80084d2:	2300      	movcc	r3, #0
 80084d4:	4423      	add	r3, r4
 80084d6:	e015      	b.n	8008504 <rshift+0x68>
 80084d8:	46a1      	mov	r9, r4
 80084da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084de:	f1c1 0820 	rsb	r8, r1, #32
 80084e2:	40cf      	lsrs	r7, r1
 80084e4:	f105 0e04 	add.w	lr, r5, #4
 80084e8:	4576      	cmp	r6, lr
 80084ea:	46f4      	mov	ip, lr
 80084ec:	d816      	bhi.n	800851c <rshift+0x80>
 80084ee:	1a9a      	subs	r2, r3, r2
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	3a04      	subs	r2, #4
 80084f4:	3501      	adds	r5, #1
 80084f6:	42ae      	cmp	r6, r5
 80084f8:	bf38      	it	cc
 80084fa:	2200      	movcc	r2, #0
 80084fc:	18a3      	adds	r3, r4, r2
 80084fe:	50a7      	str	r7, [r4, r2]
 8008500:	b107      	cbz	r7, 8008504 <rshift+0x68>
 8008502:	3304      	adds	r3, #4
 8008504:	42a3      	cmp	r3, r4
 8008506:	eba3 0204 	sub.w	r2, r3, r4
 800850a:	bf08      	it	eq
 800850c:	2300      	moveq	r3, #0
 800850e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008512:	6102      	str	r2, [r0, #16]
 8008514:	bf08      	it	eq
 8008516:	6143      	streq	r3, [r0, #20]
 8008518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800851c:	f8dc c000 	ldr.w	ip, [ip]
 8008520:	fa0c fc08 	lsl.w	ip, ip, r8
 8008524:	ea4c 0707 	orr.w	r7, ip, r7
 8008528:	f849 7b04 	str.w	r7, [r9], #4
 800852c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008530:	40cf      	lsrs	r7, r1
 8008532:	e7d9      	b.n	80084e8 <rshift+0x4c>
 8008534:	f851 cb04 	ldr.w	ip, [r1], #4
 8008538:	f847 cf04 	str.w	ip, [r7, #4]!
 800853c:	e7c2      	b.n	80084c4 <rshift+0x28>
 800853e:	4623      	mov	r3, r4
 8008540:	e7e0      	b.n	8008504 <rshift+0x68>

08008542 <__hexdig_fun>:
 8008542:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008546:	2b09      	cmp	r3, #9
 8008548:	d802      	bhi.n	8008550 <__hexdig_fun+0xe>
 800854a:	3820      	subs	r0, #32
 800854c:	b2c0      	uxtb	r0, r0
 800854e:	4770      	bx	lr
 8008550:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008554:	2b05      	cmp	r3, #5
 8008556:	d801      	bhi.n	800855c <__hexdig_fun+0x1a>
 8008558:	3847      	subs	r0, #71	@ 0x47
 800855a:	e7f7      	b.n	800854c <__hexdig_fun+0xa>
 800855c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008560:	2b05      	cmp	r3, #5
 8008562:	d801      	bhi.n	8008568 <__hexdig_fun+0x26>
 8008564:	3827      	subs	r0, #39	@ 0x27
 8008566:	e7f1      	b.n	800854c <__hexdig_fun+0xa>
 8008568:	2000      	movs	r0, #0
 800856a:	4770      	bx	lr

0800856c <__gethex>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	468a      	mov	sl, r1
 8008572:	4690      	mov	r8, r2
 8008574:	b085      	sub	sp, #20
 8008576:	9302      	str	r3, [sp, #8]
 8008578:	680b      	ldr	r3, [r1, #0]
 800857a:	9001      	str	r0, [sp, #4]
 800857c:	1c9c      	adds	r4, r3, #2
 800857e:	46a1      	mov	r9, r4
 8008580:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008584:	2830      	cmp	r0, #48	@ 0x30
 8008586:	d0fa      	beq.n	800857e <__gethex+0x12>
 8008588:	eba9 0303 	sub.w	r3, r9, r3
 800858c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008590:	f7ff ffd7 	bl	8008542 <__hexdig_fun>
 8008594:	4605      	mov	r5, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d168      	bne.n	800866c <__gethex+0x100>
 800859a:	2201      	movs	r2, #1
 800859c:	4648      	mov	r0, r9
 800859e:	499f      	ldr	r1, [pc, #636]	@ (800881c <__gethex+0x2b0>)
 80085a0:	f7ff fe7f 	bl	80082a2 <strncmp>
 80085a4:	4607      	mov	r7, r0
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d167      	bne.n	800867a <__gethex+0x10e>
 80085aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085ae:	4626      	mov	r6, r4
 80085b0:	f7ff ffc7 	bl	8008542 <__hexdig_fun>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	d062      	beq.n	800867e <__gethex+0x112>
 80085b8:	4623      	mov	r3, r4
 80085ba:	7818      	ldrb	r0, [r3, #0]
 80085bc:	4699      	mov	r9, r3
 80085be:	2830      	cmp	r0, #48	@ 0x30
 80085c0:	f103 0301 	add.w	r3, r3, #1
 80085c4:	d0f9      	beq.n	80085ba <__gethex+0x4e>
 80085c6:	f7ff ffbc 	bl	8008542 <__hexdig_fun>
 80085ca:	fab0 f580 	clz	r5, r0
 80085ce:	f04f 0b01 	mov.w	fp, #1
 80085d2:	096d      	lsrs	r5, r5, #5
 80085d4:	464a      	mov	r2, r9
 80085d6:	4616      	mov	r6, r2
 80085d8:	7830      	ldrb	r0, [r6, #0]
 80085da:	3201      	adds	r2, #1
 80085dc:	f7ff ffb1 	bl	8008542 <__hexdig_fun>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1f8      	bne.n	80085d6 <__gethex+0x6a>
 80085e4:	2201      	movs	r2, #1
 80085e6:	4630      	mov	r0, r6
 80085e8:	498c      	ldr	r1, [pc, #560]	@ (800881c <__gethex+0x2b0>)
 80085ea:	f7ff fe5a 	bl	80082a2 <strncmp>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d13f      	bne.n	8008672 <__gethex+0x106>
 80085f2:	b944      	cbnz	r4, 8008606 <__gethex+0x9a>
 80085f4:	1c74      	adds	r4, r6, #1
 80085f6:	4622      	mov	r2, r4
 80085f8:	4616      	mov	r6, r2
 80085fa:	7830      	ldrb	r0, [r6, #0]
 80085fc:	3201      	adds	r2, #1
 80085fe:	f7ff ffa0 	bl	8008542 <__hexdig_fun>
 8008602:	2800      	cmp	r0, #0
 8008604:	d1f8      	bne.n	80085f8 <__gethex+0x8c>
 8008606:	1ba4      	subs	r4, r4, r6
 8008608:	00a7      	lsls	r7, r4, #2
 800860a:	7833      	ldrb	r3, [r6, #0]
 800860c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008610:	2b50      	cmp	r3, #80	@ 0x50
 8008612:	d13e      	bne.n	8008692 <__gethex+0x126>
 8008614:	7873      	ldrb	r3, [r6, #1]
 8008616:	2b2b      	cmp	r3, #43	@ 0x2b
 8008618:	d033      	beq.n	8008682 <__gethex+0x116>
 800861a:	2b2d      	cmp	r3, #45	@ 0x2d
 800861c:	d034      	beq.n	8008688 <__gethex+0x11c>
 800861e:	2400      	movs	r4, #0
 8008620:	1c71      	adds	r1, r6, #1
 8008622:	7808      	ldrb	r0, [r1, #0]
 8008624:	f7ff ff8d 	bl	8008542 <__hexdig_fun>
 8008628:	1e43      	subs	r3, r0, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b18      	cmp	r3, #24
 800862e:	d830      	bhi.n	8008692 <__gethex+0x126>
 8008630:	f1a0 0210 	sub.w	r2, r0, #16
 8008634:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008638:	f7ff ff83 	bl	8008542 <__hexdig_fun>
 800863c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008640:	fa5f fc8c 	uxtb.w	ip, ip
 8008644:	f1bc 0f18 	cmp.w	ip, #24
 8008648:	f04f 030a 	mov.w	r3, #10
 800864c:	d91e      	bls.n	800868c <__gethex+0x120>
 800864e:	b104      	cbz	r4, 8008652 <__gethex+0xe6>
 8008650:	4252      	negs	r2, r2
 8008652:	4417      	add	r7, r2
 8008654:	f8ca 1000 	str.w	r1, [sl]
 8008658:	b1ed      	cbz	r5, 8008696 <__gethex+0x12a>
 800865a:	f1bb 0f00 	cmp.w	fp, #0
 800865e:	bf0c      	ite	eq
 8008660:	2506      	moveq	r5, #6
 8008662:	2500      	movne	r5, #0
 8008664:	4628      	mov	r0, r5
 8008666:	b005      	add	sp, #20
 8008668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	2500      	movs	r5, #0
 800866e:	462c      	mov	r4, r5
 8008670:	e7b0      	b.n	80085d4 <__gethex+0x68>
 8008672:	2c00      	cmp	r4, #0
 8008674:	d1c7      	bne.n	8008606 <__gethex+0x9a>
 8008676:	4627      	mov	r7, r4
 8008678:	e7c7      	b.n	800860a <__gethex+0x9e>
 800867a:	464e      	mov	r6, r9
 800867c:	462f      	mov	r7, r5
 800867e:	2501      	movs	r5, #1
 8008680:	e7c3      	b.n	800860a <__gethex+0x9e>
 8008682:	2400      	movs	r4, #0
 8008684:	1cb1      	adds	r1, r6, #2
 8008686:	e7cc      	b.n	8008622 <__gethex+0xb6>
 8008688:	2401      	movs	r4, #1
 800868a:	e7fb      	b.n	8008684 <__gethex+0x118>
 800868c:	fb03 0002 	mla	r0, r3, r2, r0
 8008690:	e7ce      	b.n	8008630 <__gethex+0xc4>
 8008692:	4631      	mov	r1, r6
 8008694:	e7de      	b.n	8008654 <__gethex+0xe8>
 8008696:	4629      	mov	r1, r5
 8008698:	eba6 0309 	sub.w	r3, r6, r9
 800869c:	3b01      	subs	r3, #1
 800869e:	2b07      	cmp	r3, #7
 80086a0:	dc0a      	bgt.n	80086b8 <__gethex+0x14c>
 80086a2:	9801      	ldr	r0, [sp, #4]
 80086a4:	f000 faf4 	bl	8008c90 <_Balloc>
 80086a8:	4604      	mov	r4, r0
 80086aa:	b940      	cbnz	r0, 80086be <__gethex+0x152>
 80086ac:	4602      	mov	r2, r0
 80086ae:	21e4      	movs	r1, #228	@ 0xe4
 80086b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008820 <__gethex+0x2b4>)
 80086b2:	485c      	ldr	r0, [pc, #368]	@ (8008824 <__gethex+0x2b8>)
 80086b4:	f001 fb60 	bl	8009d78 <__assert_func>
 80086b8:	3101      	adds	r1, #1
 80086ba:	105b      	asrs	r3, r3, #1
 80086bc:	e7ef      	b.n	800869e <__gethex+0x132>
 80086be:	2300      	movs	r3, #0
 80086c0:	f100 0a14 	add.w	sl, r0, #20
 80086c4:	4655      	mov	r5, sl
 80086c6:	469b      	mov	fp, r3
 80086c8:	45b1      	cmp	r9, r6
 80086ca:	d337      	bcc.n	800873c <__gethex+0x1d0>
 80086cc:	f845 bb04 	str.w	fp, [r5], #4
 80086d0:	eba5 050a 	sub.w	r5, r5, sl
 80086d4:	10ad      	asrs	r5, r5, #2
 80086d6:	6125      	str	r5, [r4, #16]
 80086d8:	4658      	mov	r0, fp
 80086da:	f000 fbcb 	bl	8008e74 <__hi0bits>
 80086de:	016d      	lsls	r5, r5, #5
 80086e0:	f8d8 6000 	ldr.w	r6, [r8]
 80086e4:	1a2d      	subs	r5, r5, r0
 80086e6:	42b5      	cmp	r5, r6
 80086e8:	dd54      	ble.n	8008794 <__gethex+0x228>
 80086ea:	1bad      	subs	r5, r5, r6
 80086ec:	4629      	mov	r1, r5
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 ff4d 	bl	800958e <__any_on>
 80086f4:	4681      	mov	r9, r0
 80086f6:	b178      	cbz	r0, 8008718 <__gethex+0x1ac>
 80086f8:	f04f 0901 	mov.w	r9, #1
 80086fc:	1e6b      	subs	r3, r5, #1
 80086fe:	1159      	asrs	r1, r3, #5
 8008700:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008704:	f003 021f 	and.w	r2, r3, #31
 8008708:	fa09 f202 	lsl.w	r2, r9, r2
 800870c:	420a      	tst	r2, r1
 800870e:	d003      	beq.n	8008718 <__gethex+0x1ac>
 8008710:	454b      	cmp	r3, r9
 8008712:	dc36      	bgt.n	8008782 <__gethex+0x216>
 8008714:	f04f 0902 	mov.w	r9, #2
 8008718:	4629      	mov	r1, r5
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff febe 	bl	800849c <rshift>
 8008720:	442f      	add	r7, r5
 8008722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008726:	42bb      	cmp	r3, r7
 8008728:	da42      	bge.n	80087b0 <__gethex+0x244>
 800872a:	4621      	mov	r1, r4
 800872c:	9801      	ldr	r0, [sp, #4]
 800872e:	f000 faef 	bl	8008d10 <_Bfree>
 8008732:	2300      	movs	r3, #0
 8008734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008736:	25a3      	movs	r5, #163	@ 0xa3
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e793      	b.n	8008664 <__gethex+0xf8>
 800873c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008740:	2a2e      	cmp	r2, #46	@ 0x2e
 8008742:	d012      	beq.n	800876a <__gethex+0x1fe>
 8008744:	2b20      	cmp	r3, #32
 8008746:	d104      	bne.n	8008752 <__gethex+0x1e6>
 8008748:	f845 bb04 	str.w	fp, [r5], #4
 800874c:	f04f 0b00 	mov.w	fp, #0
 8008750:	465b      	mov	r3, fp
 8008752:	7830      	ldrb	r0, [r6, #0]
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	f7ff fef4 	bl	8008542 <__hexdig_fun>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	f000 000f 	and.w	r0, r0, #15
 8008760:	4098      	lsls	r0, r3
 8008762:	ea4b 0b00 	orr.w	fp, fp, r0
 8008766:	3304      	adds	r3, #4
 8008768:	e7ae      	b.n	80086c8 <__gethex+0x15c>
 800876a:	45b1      	cmp	r9, r6
 800876c:	d8ea      	bhi.n	8008744 <__gethex+0x1d8>
 800876e:	2201      	movs	r2, #1
 8008770:	4630      	mov	r0, r6
 8008772:	492a      	ldr	r1, [pc, #168]	@ (800881c <__gethex+0x2b0>)
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	f7ff fd94 	bl	80082a2 <strncmp>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	2800      	cmp	r0, #0
 800877e:	d1e1      	bne.n	8008744 <__gethex+0x1d8>
 8008780:	e7a2      	b.n	80086c8 <__gethex+0x15c>
 8008782:	4620      	mov	r0, r4
 8008784:	1ea9      	subs	r1, r5, #2
 8008786:	f000 ff02 	bl	800958e <__any_on>
 800878a:	2800      	cmp	r0, #0
 800878c:	d0c2      	beq.n	8008714 <__gethex+0x1a8>
 800878e:	f04f 0903 	mov.w	r9, #3
 8008792:	e7c1      	b.n	8008718 <__gethex+0x1ac>
 8008794:	da09      	bge.n	80087aa <__gethex+0x23e>
 8008796:	1b75      	subs	r5, r6, r5
 8008798:	4621      	mov	r1, r4
 800879a:	462a      	mov	r2, r5
 800879c:	9801      	ldr	r0, [sp, #4]
 800879e:	f000 fcc7 	bl	8009130 <__lshift>
 80087a2:	4604      	mov	r4, r0
 80087a4:	1b7f      	subs	r7, r7, r5
 80087a6:	f100 0a14 	add.w	sl, r0, #20
 80087aa:	f04f 0900 	mov.w	r9, #0
 80087ae:	e7b8      	b.n	8008722 <__gethex+0x1b6>
 80087b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087b4:	42bd      	cmp	r5, r7
 80087b6:	dd6f      	ble.n	8008898 <__gethex+0x32c>
 80087b8:	1bed      	subs	r5, r5, r7
 80087ba:	42ae      	cmp	r6, r5
 80087bc:	dc34      	bgt.n	8008828 <__gethex+0x2bc>
 80087be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d022      	beq.n	800880c <__gethex+0x2a0>
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d024      	beq.n	8008814 <__gethex+0x2a8>
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d115      	bne.n	80087fa <__gethex+0x28e>
 80087ce:	42ae      	cmp	r6, r5
 80087d0:	d113      	bne.n	80087fa <__gethex+0x28e>
 80087d2:	2e01      	cmp	r6, #1
 80087d4:	d10b      	bne.n	80087ee <__gethex+0x282>
 80087d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087da:	9a02      	ldr	r2, [sp, #8]
 80087dc:	2562      	movs	r5, #98	@ 0x62
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	f8ca 3000 	str.w	r3, [sl]
 80087e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087ea:	601c      	str	r4, [r3, #0]
 80087ec:	e73a      	b.n	8008664 <__gethex+0xf8>
 80087ee:	4620      	mov	r0, r4
 80087f0:	1e71      	subs	r1, r6, #1
 80087f2:	f000 fecc 	bl	800958e <__any_on>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d1ed      	bne.n	80087d6 <__gethex+0x26a>
 80087fa:	4621      	mov	r1, r4
 80087fc:	9801      	ldr	r0, [sp, #4]
 80087fe:	f000 fa87 	bl	8008d10 <_Bfree>
 8008802:	2300      	movs	r3, #0
 8008804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008806:	2550      	movs	r5, #80	@ 0x50
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	e72b      	b.n	8008664 <__gethex+0xf8>
 800880c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f3      	bne.n	80087fa <__gethex+0x28e>
 8008812:	e7e0      	b.n	80087d6 <__gethex+0x26a>
 8008814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1dd      	bne.n	80087d6 <__gethex+0x26a>
 800881a:	e7ee      	b.n	80087fa <__gethex+0x28e>
 800881c:	0800d173 	.word	0x0800d173
 8008820:	0800d187 	.word	0x0800d187
 8008824:	0800d198 	.word	0x0800d198
 8008828:	1e6f      	subs	r7, r5, #1
 800882a:	f1b9 0f00 	cmp.w	r9, #0
 800882e:	d130      	bne.n	8008892 <__gethex+0x326>
 8008830:	b127      	cbz	r7, 800883c <__gethex+0x2d0>
 8008832:	4639      	mov	r1, r7
 8008834:	4620      	mov	r0, r4
 8008836:	f000 feaa 	bl	800958e <__any_on>
 800883a:	4681      	mov	r9, r0
 800883c:	2301      	movs	r3, #1
 800883e:	4629      	mov	r1, r5
 8008840:	1b76      	subs	r6, r6, r5
 8008842:	2502      	movs	r5, #2
 8008844:	117a      	asrs	r2, r7, #5
 8008846:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800884a:	f007 071f 	and.w	r7, r7, #31
 800884e:	40bb      	lsls	r3, r7
 8008850:	4213      	tst	r3, r2
 8008852:	4620      	mov	r0, r4
 8008854:	bf18      	it	ne
 8008856:	f049 0902 	orrne.w	r9, r9, #2
 800885a:	f7ff fe1f 	bl	800849c <rshift>
 800885e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	d047      	beq.n	80088f8 <__gethex+0x38c>
 8008868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d015      	beq.n	800889c <__gethex+0x330>
 8008870:	2b03      	cmp	r3, #3
 8008872:	d017      	beq.n	80088a4 <__gethex+0x338>
 8008874:	2b01      	cmp	r3, #1
 8008876:	d109      	bne.n	800888c <__gethex+0x320>
 8008878:	f019 0f02 	tst.w	r9, #2
 800887c:	d006      	beq.n	800888c <__gethex+0x320>
 800887e:	f8da 3000 	ldr.w	r3, [sl]
 8008882:	ea49 0903 	orr.w	r9, r9, r3
 8008886:	f019 0f01 	tst.w	r9, #1
 800888a:	d10e      	bne.n	80088aa <__gethex+0x33e>
 800888c:	f045 0510 	orr.w	r5, r5, #16
 8008890:	e032      	b.n	80088f8 <__gethex+0x38c>
 8008892:	f04f 0901 	mov.w	r9, #1
 8008896:	e7d1      	b.n	800883c <__gethex+0x2d0>
 8008898:	2501      	movs	r5, #1
 800889a:	e7e2      	b.n	8008862 <__gethex+0x2f6>
 800889c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800889e:	f1c3 0301 	rsb	r3, r3, #1
 80088a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <__gethex+0x320>
 80088aa:	f04f 0c00 	mov.w	ip, #0
 80088ae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088b2:	f104 0314 	add.w	r3, r4, #20
 80088b6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088ba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088be:	4618      	mov	r0, r3
 80088c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088c8:	d01b      	beq.n	8008902 <__gethex+0x396>
 80088ca:	3201      	adds	r2, #1
 80088cc:	6002      	str	r2, [r0, #0]
 80088ce:	2d02      	cmp	r5, #2
 80088d0:	f104 0314 	add.w	r3, r4, #20
 80088d4:	d13c      	bne.n	8008950 <__gethex+0x3e4>
 80088d6:	f8d8 2000 	ldr.w	r2, [r8]
 80088da:	3a01      	subs	r2, #1
 80088dc:	42b2      	cmp	r2, r6
 80088de:	d109      	bne.n	80088f4 <__gethex+0x388>
 80088e0:	2201      	movs	r2, #1
 80088e2:	1171      	asrs	r1, r6, #5
 80088e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088e8:	f006 061f 	and.w	r6, r6, #31
 80088ec:	fa02 f606 	lsl.w	r6, r2, r6
 80088f0:	421e      	tst	r6, r3
 80088f2:	d13a      	bne.n	800896a <__gethex+0x3fe>
 80088f4:	f045 0520 	orr.w	r5, r5, #32
 80088f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088fa:	601c      	str	r4, [r3, #0]
 80088fc:	9b02      	ldr	r3, [sp, #8]
 80088fe:	601f      	str	r7, [r3, #0]
 8008900:	e6b0      	b.n	8008664 <__gethex+0xf8>
 8008902:	4299      	cmp	r1, r3
 8008904:	f843 cc04 	str.w	ip, [r3, #-4]
 8008908:	d8d9      	bhi.n	80088be <__gethex+0x352>
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	459b      	cmp	fp, r3
 800890e:	db17      	blt.n	8008940 <__gethex+0x3d4>
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	9801      	ldr	r0, [sp, #4]
 8008914:	3101      	adds	r1, #1
 8008916:	f000 f9bb 	bl	8008c90 <_Balloc>
 800891a:	4681      	mov	r9, r0
 800891c:	b918      	cbnz	r0, 8008926 <__gethex+0x3ba>
 800891e:	4602      	mov	r2, r0
 8008920:	2184      	movs	r1, #132	@ 0x84
 8008922:	4b19      	ldr	r3, [pc, #100]	@ (8008988 <__gethex+0x41c>)
 8008924:	e6c5      	b.n	80086b2 <__gethex+0x146>
 8008926:	6922      	ldr	r2, [r4, #16]
 8008928:	f104 010c 	add.w	r1, r4, #12
 800892c:	3202      	adds	r2, #2
 800892e:	0092      	lsls	r2, r2, #2
 8008930:	300c      	adds	r0, #12
 8008932:	f7ff fd56 	bl	80083e2 <memcpy>
 8008936:	4621      	mov	r1, r4
 8008938:	9801      	ldr	r0, [sp, #4]
 800893a:	f000 f9e9 	bl	8008d10 <_Bfree>
 800893e:	464c      	mov	r4, r9
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	6122      	str	r2, [r4, #16]
 8008946:	2201      	movs	r2, #1
 8008948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800894c:	615a      	str	r2, [r3, #20]
 800894e:	e7be      	b.n	80088ce <__gethex+0x362>
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	455a      	cmp	r2, fp
 8008954:	dd0b      	ble.n	800896e <__gethex+0x402>
 8008956:	2101      	movs	r1, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff fd9f 	bl	800849c <rshift>
 800895e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008962:	3701      	adds	r7, #1
 8008964:	42bb      	cmp	r3, r7
 8008966:	f6ff aee0 	blt.w	800872a <__gethex+0x1be>
 800896a:	2501      	movs	r5, #1
 800896c:	e7c2      	b.n	80088f4 <__gethex+0x388>
 800896e:	f016 061f 	ands.w	r6, r6, #31
 8008972:	d0fa      	beq.n	800896a <__gethex+0x3fe>
 8008974:	4453      	add	r3, sl
 8008976:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800897a:	f000 fa7b 	bl	8008e74 <__hi0bits>
 800897e:	f1c6 0620 	rsb	r6, r6, #32
 8008982:	42b0      	cmp	r0, r6
 8008984:	dbe7      	blt.n	8008956 <__gethex+0x3ea>
 8008986:	e7f0      	b.n	800896a <__gethex+0x3fe>
 8008988:	0800d187 	.word	0x0800d187

0800898c <L_shift>:
 800898c:	f1c2 0208 	rsb	r2, r2, #8
 8008990:	0092      	lsls	r2, r2, #2
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	f1c2 0620 	rsb	r6, r2, #32
 8008998:	6843      	ldr	r3, [r0, #4]
 800899a:	6804      	ldr	r4, [r0, #0]
 800899c:	fa03 f506 	lsl.w	r5, r3, r6
 80089a0:	432c      	orrs	r4, r5
 80089a2:	40d3      	lsrs	r3, r2
 80089a4:	6004      	str	r4, [r0, #0]
 80089a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80089aa:	4288      	cmp	r0, r1
 80089ac:	d3f4      	bcc.n	8008998 <L_shift+0xc>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}

080089b0 <__match>:
 80089b0:	b530      	push	{r4, r5, lr}
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	3301      	adds	r3, #1
 80089b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ba:	b914      	cbnz	r4, 80089c2 <__match+0x12>
 80089bc:	6003      	str	r3, [r0, #0]
 80089be:	2001      	movs	r0, #1
 80089c0:	bd30      	pop	{r4, r5, pc}
 80089c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80089ca:	2d19      	cmp	r5, #25
 80089cc:	bf98      	it	ls
 80089ce:	3220      	addls	r2, #32
 80089d0:	42a2      	cmp	r2, r4
 80089d2:	d0f0      	beq.n	80089b6 <__match+0x6>
 80089d4:	2000      	movs	r0, #0
 80089d6:	e7f3      	b.n	80089c0 <__match+0x10>

080089d8 <__hexnan>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	2500      	movs	r5, #0
 80089de:	680b      	ldr	r3, [r1, #0]
 80089e0:	4682      	mov	sl, r0
 80089e2:	115e      	asrs	r6, r3, #5
 80089e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089e8:	f013 031f 	ands.w	r3, r3, #31
 80089ec:	bf18      	it	ne
 80089ee:	3604      	addne	r6, #4
 80089f0:	1f37      	subs	r7, r6, #4
 80089f2:	4690      	mov	r8, r2
 80089f4:	46b9      	mov	r9, r7
 80089f6:	463c      	mov	r4, r7
 80089f8:	46ab      	mov	fp, r5
 80089fa:	b087      	sub	sp, #28
 80089fc:	6801      	ldr	r1, [r0, #0]
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a04:	9502      	str	r5, [sp, #8]
 8008a06:	784a      	ldrb	r2, [r1, #1]
 8008a08:	1c4b      	adds	r3, r1, #1
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	b342      	cbz	r2, 8008a60 <__hexnan+0x88>
 8008a0e:	4610      	mov	r0, r2
 8008a10:	9105      	str	r1, [sp, #20]
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	f7ff fd95 	bl	8008542 <__hexdig_fun>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d151      	bne.n	8008ac0 <__hexnan+0xe8>
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	9905      	ldr	r1, [sp, #20]
 8008a20:	2a20      	cmp	r2, #32
 8008a22:	d818      	bhi.n	8008a56 <__hexnan+0x7e>
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	459b      	cmp	fp, r3
 8008a28:	dd13      	ble.n	8008a52 <__hexnan+0x7a>
 8008a2a:	454c      	cmp	r4, r9
 8008a2c:	d206      	bcs.n	8008a3c <__hexnan+0x64>
 8008a2e:	2d07      	cmp	r5, #7
 8008a30:	dc04      	bgt.n	8008a3c <__hexnan+0x64>
 8008a32:	462a      	mov	r2, r5
 8008a34:	4649      	mov	r1, r9
 8008a36:	4620      	mov	r0, r4
 8008a38:	f7ff ffa8 	bl	800898c <L_shift>
 8008a3c:	4544      	cmp	r4, r8
 8008a3e:	d952      	bls.n	8008ae6 <__hexnan+0x10e>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f1a4 0904 	sub.w	r9, r4, #4
 8008a46:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	464c      	mov	r4, r9
 8008a4e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a52:	9903      	ldr	r1, [sp, #12]
 8008a54:	e7d7      	b.n	8008a06 <__hexnan+0x2e>
 8008a56:	2a29      	cmp	r2, #41	@ 0x29
 8008a58:	d157      	bne.n	8008b0a <__hexnan+0x132>
 8008a5a:	3102      	adds	r1, #2
 8008a5c:	f8ca 1000 	str.w	r1, [sl]
 8008a60:	f1bb 0f00 	cmp.w	fp, #0
 8008a64:	d051      	beq.n	8008b0a <__hexnan+0x132>
 8008a66:	454c      	cmp	r4, r9
 8008a68:	d206      	bcs.n	8008a78 <__hexnan+0xa0>
 8008a6a:	2d07      	cmp	r5, #7
 8008a6c:	dc04      	bgt.n	8008a78 <__hexnan+0xa0>
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4649      	mov	r1, r9
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ff8a 	bl	800898c <L_shift>
 8008a78:	4544      	cmp	r4, r8
 8008a7a:	d936      	bls.n	8008aea <__hexnan+0x112>
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	f1a8 0204 	sub.w	r2, r8, #4
 8008a82:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a86:	429f      	cmp	r7, r3
 8008a88:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a8c:	d2f9      	bcs.n	8008a82 <__hexnan+0xaa>
 8008a8e:	1b3b      	subs	r3, r7, r4
 8008a90:	f023 0303 	bic.w	r3, r3, #3
 8008a94:	3304      	adds	r3, #4
 8008a96:	3401      	adds	r4, #1
 8008a98:	3e03      	subs	r6, #3
 8008a9a:	42b4      	cmp	r4, r6
 8008a9c:	bf88      	it	hi
 8008a9e:	2304      	movhi	r3, #4
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4443      	add	r3, r8
 8008aa4:	f843 2b04 	str.w	r2, [r3], #4
 8008aa8:	429f      	cmp	r7, r3
 8008aaa:	d2fb      	bcs.n	8008aa4 <__hexnan+0xcc>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b91b      	cbnz	r3, 8008ab8 <__hexnan+0xe0>
 8008ab0:	4547      	cmp	r7, r8
 8008ab2:	d128      	bne.n	8008b06 <__hexnan+0x12e>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	2005      	movs	r0, #5
 8008aba:	b007      	add	sp, #28
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	2d08      	cmp	r5, #8
 8008ac4:	f10b 0b01 	add.w	fp, fp, #1
 8008ac8:	dd06      	ble.n	8008ad8 <__hexnan+0x100>
 8008aca:	4544      	cmp	r4, r8
 8008acc:	d9c1      	bls.n	8008a52 <__hexnan+0x7a>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2501      	movs	r5, #1
 8008ad2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ad6:	3c04      	subs	r4, #4
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	f000 000f 	and.w	r0, r0, #15
 8008ade:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	e7b5      	b.n	8008a52 <__hexnan+0x7a>
 8008ae6:	2508      	movs	r5, #8
 8008ae8:	e7b3      	b.n	8008a52 <__hexnan+0x7a>
 8008aea:	9b01      	ldr	r3, [sp, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0dd      	beq.n	8008aac <__hexnan+0xd4>
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295
 8008af4:	f1c3 0320 	rsb	r3, r3, #32
 8008af8:	40da      	lsrs	r2, r3
 8008afa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008afe:	4013      	ands	r3, r2
 8008b00:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b04:	e7d2      	b.n	8008aac <__hexnan+0xd4>
 8008b06:	3f04      	subs	r7, #4
 8008b08:	e7d0      	b.n	8008aac <__hexnan+0xd4>
 8008b0a:	2004      	movs	r0, #4
 8008b0c:	e7d5      	b.n	8008aba <__hexnan+0xe2>
	...

08008b10 <sbrk_aligned>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4e0f      	ldr	r6, [pc, #60]	@ (8008b50 <sbrk_aligned+0x40>)
 8008b14:	460c      	mov	r4, r1
 8008b16:	6831      	ldr	r1, [r6, #0]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	b911      	cbnz	r1, 8008b22 <sbrk_aligned+0x12>
 8008b1c:	f001 f90e 	bl	8009d3c <_sbrk_r>
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f001 f909 	bl	8009d3c <_sbrk_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d103      	bne.n	8008b36 <sbrk_aligned+0x26>
 8008b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b32:	4620      	mov	r0, r4
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
 8008b36:	1cc4      	adds	r4, r0, #3
 8008b38:	f024 0403 	bic.w	r4, r4, #3
 8008b3c:	42a0      	cmp	r0, r4
 8008b3e:	d0f8      	beq.n	8008b32 <sbrk_aligned+0x22>
 8008b40:	1a21      	subs	r1, r4, r0
 8008b42:	4628      	mov	r0, r5
 8008b44:	f001 f8fa 	bl	8009d3c <_sbrk_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d1f2      	bne.n	8008b32 <sbrk_aligned+0x22>
 8008b4c:	e7ef      	b.n	8008b2e <sbrk_aligned+0x1e>
 8008b4e:	bf00      	nop
 8008b50:	20004980 	.word	0x20004980

08008b54 <_malloc_r>:
 8008b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b58:	1ccd      	adds	r5, r1, #3
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	2d00      	cmp	r5, #0
 8008b68:	4606      	mov	r6, r0
 8008b6a:	db01      	blt.n	8008b70 <_malloc_r+0x1c>
 8008b6c:	42a9      	cmp	r1, r5
 8008b6e:	d904      	bls.n	8008b7a <_malloc_r+0x26>
 8008b70:	230c      	movs	r3, #12
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	2000      	movs	r0, #0
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c50 <_malloc_r+0xfc>
 8008b7e:	f000 f87b 	bl	8008c78 <__malloc_lock>
 8008b82:	f8d8 3000 	ldr.w	r3, [r8]
 8008b86:	461c      	mov	r4, r3
 8008b88:	bb44      	cbnz	r4, 8008bdc <_malloc_r+0x88>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff ffbf 	bl	8008b10 <sbrk_aligned>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	4604      	mov	r4, r0
 8008b96:	d158      	bne.n	8008c4a <_malloc_r+0xf6>
 8008b98:	f8d8 4000 	ldr.w	r4, [r8]
 8008b9c:	4627      	mov	r7, r4
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	d143      	bne.n	8008c2a <_malloc_r+0xd6>
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d04b      	beq.n	8008c3e <_malloc_r+0xea>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	eb04 0903 	add.w	r9, r4, r3
 8008bb0:	f001 f8c4 	bl	8009d3c <_sbrk_r>
 8008bb4:	4581      	cmp	r9, r0
 8008bb6:	d142      	bne.n	8008c3e <_malloc_r+0xea>
 8008bb8:	6821      	ldr	r1, [r4, #0]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	1a6d      	subs	r5, r5, r1
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	f7ff ffa6 	bl	8008b10 <sbrk_aligned>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d03a      	beq.n	8008c3e <_malloc_r+0xea>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	442b      	add	r3, r5
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	bb62      	cbnz	r2, 8008c30 <_malloc_r+0xdc>
 8008bd6:	f8c8 7000 	str.w	r7, [r8]
 8008bda:	e00f      	b.n	8008bfc <_malloc_r+0xa8>
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	1b52      	subs	r2, r2, r5
 8008be0:	d420      	bmi.n	8008c24 <_malloc_r+0xd0>
 8008be2:	2a0b      	cmp	r2, #11
 8008be4:	d917      	bls.n	8008c16 <_malloc_r+0xc2>
 8008be6:	1961      	adds	r1, r4, r5
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	6025      	str	r5, [r4, #0]
 8008bec:	bf18      	it	ne
 8008bee:	6059      	strne	r1, [r3, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	bf08      	it	eq
 8008bf4:	f8c8 1000 	streq.w	r1, [r8]
 8008bf8:	5162      	str	r2, [r4, r5]
 8008bfa:	604b      	str	r3, [r1, #4]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 f841 	bl	8008c84 <__malloc_unlock>
 8008c02:	f104 000b 	add.w	r0, r4, #11
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	f020 0007 	bic.w	r0, r0, #7
 8008c0c:	1ac2      	subs	r2, r0, r3
 8008c0e:	bf1c      	itt	ne
 8008c10:	1a1b      	subne	r3, r3, r0
 8008c12:	50a3      	strne	r3, [r4, r2]
 8008c14:	e7af      	b.n	8008b76 <_malloc_r+0x22>
 8008c16:	6862      	ldr	r2, [r4, #4]
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	bf0c      	ite	eq
 8008c1c:	f8c8 2000 	streq.w	r2, [r8]
 8008c20:	605a      	strne	r2, [r3, #4]
 8008c22:	e7eb      	b.n	8008bfc <_malloc_r+0xa8>
 8008c24:	4623      	mov	r3, r4
 8008c26:	6864      	ldr	r4, [r4, #4]
 8008c28:	e7ae      	b.n	8008b88 <_malloc_r+0x34>
 8008c2a:	463c      	mov	r4, r7
 8008c2c:	687f      	ldr	r7, [r7, #4]
 8008c2e:	e7b6      	b.n	8008b9e <_malloc_r+0x4a>
 8008c30:	461a      	mov	r2, r3
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d1fb      	bne.n	8008c30 <_malloc_r+0xdc>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6053      	str	r3, [r2, #4]
 8008c3c:	e7de      	b.n	8008bfc <_malloc_r+0xa8>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	4630      	mov	r0, r6
 8008c42:	6033      	str	r3, [r6, #0]
 8008c44:	f000 f81e 	bl	8008c84 <__malloc_unlock>
 8008c48:	e794      	b.n	8008b74 <_malloc_r+0x20>
 8008c4a:	6005      	str	r5, [r0, #0]
 8008c4c:	e7d6      	b.n	8008bfc <_malloc_r+0xa8>
 8008c4e:	bf00      	nop
 8008c50:	20004984 	.word	0x20004984

08008c54 <__ascii_mbtowc>:
 8008c54:	b082      	sub	sp, #8
 8008c56:	b901      	cbnz	r1, 8008c5a <__ascii_mbtowc+0x6>
 8008c58:	a901      	add	r1, sp, #4
 8008c5a:	b142      	cbz	r2, 8008c6e <__ascii_mbtowc+0x1a>
 8008c5c:	b14b      	cbz	r3, 8008c72 <__ascii_mbtowc+0x1e>
 8008c5e:	7813      	ldrb	r3, [r2, #0]
 8008c60:	600b      	str	r3, [r1, #0]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	1e10      	subs	r0, r2, #0
 8008c66:	bf18      	it	ne
 8008c68:	2001      	movne	r0, #1
 8008c6a:	b002      	add	sp, #8
 8008c6c:	4770      	bx	lr
 8008c6e:	4610      	mov	r0, r2
 8008c70:	e7fb      	b.n	8008c6a <__ascii_mbtowc+0x16>
 8008c72:	f06f 0001 	mvn.w	r0, #1
 8008c76:	e7f8      	b.n	8008c6a <__ascii_mbtowc+0x16>

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	@ (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f7ff bba8 	b.w	80083ce <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	2000497c 	.word	0x2000497c

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f7ff bba3 	b.w	80083d0 <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	2000497c 	.word	0x2000497c

08008c90 <_Balloc>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	69c6      	ldr	r6, [r0, #28]
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	b976      	cbnz	r6, 8008cb8 <_Balloc+0x28>
 8008c9a:	2010      	movs	r0, #16
 8008c9c:	f001 f89e 	bl	8009ddc <malloc>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	61e0      	str	r0, [r4, #28]
 8008ca4:	b920      	cbnz	r0, 8008cb0 <_Balloc+0x20>
 8008ca6:	216b      	movs	r1, #107	@ 0x6b
 8008ca8:	4b17      	ldr	r3, [pc, #92]	@ (8008d08 <_Balloc+0x78>)
 8008caa:	4818      	ldr	r0, [pc, #96]	@ (8008d0c <_Balloc+0x7c>)
 8008cac:	f001 f864 	bl	8009d78 <__assert_func>
 8008cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cb4:	6006      	str	r6, [r0, #0]
 8008cb6:	60c6      	str	r6, [r0, #12]
 8008cb8:	69e6      	ldr	r6, [r4, #28]
 8008cba:	68f3      	ldr	r3, [r6, #12]
 8008cbc:	b183      	cbz	r3, 8008ce0 <_Balloc+0x50>
 8008cbe:	69e3      	ldr	r3, [r4, #28]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cc6:	b9b8      	cbnz	r0, 8008cf8 <_Balloc+0x68>
 8008cc8:	2101      	movs	r1, #1
 8008cca:	fa01 f605 	lsl.w	r6, r1, r5
 8008cce:	1d72      	adds	r2, r6, #5
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	f001 f86e 	bl	8009db4 <_calloc_r>
 8008cd8:	b160      	cbz	r0, 8008cf4 <_Balloc+0x64>
 8008cda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cde:	e00e      	b.n	8008cfe <_Balloc+0x6e>
 8008ce0:	2221      	movs	r2, #33	@ 0x21
 8008ce2:	2104      	movs	r1, #4
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f001 f865 	bl	8009db4 <_calloc_r>
 8008cea:	69e3      	ldr	r3, [r4, #28]
 8008cec:	60f0      	str	r0, [r6, #12]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e4      	bne.n	8008cbe <_Balloc+0x2e>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	6802      	ldr	r2, [r0, #0]
 8008cfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d04:	e7f7      	b.n	8008cf6 <_Balloc+0x66>
 8008d06:	bf00      	nop
 8008d08:	0800d1f8 	.word	0x0800d1f8
 8008d0c:	0800d20f 	.word	0x0800d20f

08008d10 <_Bfree>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	69c6      	ldr	r6, [r0, #28]
 8008d14:	4605      	mov	r5, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	b976      	cbnz	r6, 8008d38 <_Bfree+0x28>
 8008d1a:	2010      	movs	r0, #16
 8008d1c:	f001 f85e 	bl	8009ddc <malloc>
 8008d20:	4602      	mov	r2, r0
 8008d22:	61e8      	str	r0, [r5, #28]
 8008d24:	b920      	cbnz	r0, 8008d30 <_Bfree+0x20>
 8008d26:	218f      	movs	r1, #143	@ 0x8f
 8008d28:	4b08      	ldr	r3, [pc, #32]	@ (8008d4c <_Bfree+0x3c>)
 8008d2a:	4809      	ldr	r0, [pc, #36]	@ (8008d50 <_Bfree+0x40>)
 8008d2c:	f001 f824 	bl	8009d78 <__assert_func>
 8008d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d34:	6006      	str	r6, [r0, #0]
 8008d36:	60c6      	str	r6, [r0, #12]
 8008d38:	b13c      	cbz	r4, 8008d4a <_Bfree+0x3a>
 8008d3a:	69eb      	ldr	r3, [r5, #28]
 8008d3c:	6862      	ldr	r2, [r4, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d44:	6021      	str	r1, [r4, #0]
 8008d46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	0800d1f8 	.word	0x0800d1f8
 8008d50:	0800d20f 	.word	0x0800d20f

08008d54 <__multadd>:
 8008d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d58:	4607      	mov	r7, r0
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	461e      	mov	r6, r3
 8008d5e:	2000      	movs	r0, #0
 8008d60:	690d      	ldr	r5, [r1, #16]
 8008d62:	f101 0c14 	add.w	ip, r1, #20
 8008d66:	f8dc 3000 	ldr.w	r3, [ip]
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	b299      	uxth	r1, r3
 8008d6e:	fb02 6101 	mla	r1, r2, r1, r6
 8008d72:	0c1e      	lsrs	r6, r3, #16
 8008d74:	0c0b      	lsrs	r3, r1, #16
 8008d76:	fb02 3306 	mla	r3, r2, r6, r3
 8008d7a:	b289      	uxth	r1, r1
 8008d7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d80:	4285      	cmp	r5, r0
 8008d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d86:	f84c 1b04 	str.w	r1, [ip], #4
 8008d8a:	dcec      	bgt.n	8008d66 <__multadd+0x12>
 8008d8c:	b30e      	cbz	r6, 8008dd2 <__multadd+0x7e>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	42ab      	cmp	r3, r5
 8008d92:	dc19      	bgt.n	8008dc8 <__multadd+0x74>
 8008d94:	6861      	ldr	r1, [r4, #4]
 8008d96:	4638      	mov	r0, r7
 8008d98:	3101      	adds	r1, #1
 8008d9a:	f7ff ff79 	bl	8008c90 <_Balloc>
 8008d9e:	4680      	mov	r8, r0
 8008da0:	b928      	cbnz	r0, 8008dae <__multadd+0x5a>
 8008da2:	4602      	mov	r2, r0
 8008da4:	21ba      	movs	r1, #186	@ 0xba
 8008da6:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd8 <__multadd+0x84>)
 8008da8:	480c      	ldr	r0, [pc, #48]	@ (8008ddc <__multadd+0x88>)
 8008daa:	f000 ffe5 	bl	8009d78 <__assert_func>
 8008dae:	6922      	ldr	r2, [r4, #16]
 8008db0:	f104 010c 	add.w	r1, r4, #12
 8008db4:	3202      	adds	r2, #2
 8008db6:	0092      	lsls	r2, r2, #2
 8008db8:	300c      	adds	r0, #12
 8008dba:	f7ff fb12 	bl	80083e2 <memcpy>
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ffa5 	bl	8008d10 <_Bfree>
 8008dc6:	4644      	mov	r4, r8
 8008dc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dcc:	3501      	adds	r5, #1
 8008dce:	615e      	str	r6, [r3, #20]
 8008dd0:	6125      	str	r5, [r4, #16]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	0800d187 	.word	0x0800d187
 8008ddc:	0800d20f 	.word	0x0800d20f

08008de0 <__s2b>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4615      	mov	r5, r2
 8008de6:	2209      	movs	r2, #9
 8008de8:	461f      	mov	r7, r3
 8008dea:	3308      	adds	r3, #8
 8008dec:	460c      	mov	r4, r1
 8008dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8008df2:	4606      	mov	r6, r0
 8008df4:	2201      	movs	r2, #1
 8008df6:	2100      	movs	r1, #0
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	db09      	blt.n	8008e10 <__s2b+0x30>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ff47 	bl	8008c90 <_Balloc>
 8008e02:	b940      	cbnz	r0, 8008e16 <__s2b+0x36>
 8008e04:	4602      	mov	r2, r0
 8008e06:	21d3      	movs	r1, #211	@ 0xd3
 8008e08:	4b18      	ldr	r3, [pc, #96]	@ (8008e6c <__s2b+0x8c>)
 8008e0a:	4819      	ldr	r0, [pc, #100]	@ (8008e70 <__s2b+0x90>)
 8008e0c:	f000 ffb4 	bl	8009d78 <__assert_func>
 8008e10:	0052      	lsls	r2, r2, #1
 8008e12:	3101      	adds	r1, #1
 8008e14:	e7f0      	b.n	8008df8 <__s2b+0x18>
 8008e16:	9b08      	ldr	r3, [sp, #32]
 8008e18:	2d09      	cmp	r5, #9
 8008e1a:	6143      	str	r3, [r0, #20]
 8008e1c:	f04f 0301 	mov.w	r3, #1
 8008e20:	6103      	str	r3, [r0, #16]
 8008e22:	dd16      	ble.n	8008e52 <__s2b+0x72>
 8008e24:	f104 0909 	add.w	r9, r4, #9
 8008e28:	46c8      	mov	r8, r9
 8008e2a:	442c      	add	r4, r5
 8008e2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e30:	4601      	mov	r1, r0
 8008e32:	220a      	movs	r2, #10
 8008e34:	4630      	mov	r0, r6
 8008e36:	3b30      	subs	r3, #48	@ 0x30
 8008e38:	f7ff ff8c 	bl	8008d54 <__multadd>
 8008e3c:	45a0      	cmp	r8, r4
 8008e3e:	d1f5      	bne.n	8008e2c <__s2b+0x4c>
 8008e40:	f1a5 0408 	sub.w	r4, r5, #8
 8008e44:	444c      	add	r4, r9
 8008e46:	1b2d      	subs	r5, r5, r4
 8008e48:	1963      	adds	r3, r4, r5
 8008e4a:	42bb      	cmp	r3, r7
 8008e4c:	db04      	blt.n	8008e58 <__s2b+0x78>
 8008e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e52:	2509      	movs	r5, #9
 8008e54:	340a      	adds	r4, #10
 8008e56:	e7f6      	b.n	8008e46 <__s2b+0x66>
 8008e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e5c:	4601      	mov	r1, r0
 8008e5e:	220a      	movs	r2, #10
 8008e60:	4630      	mov	r0, r6
 8008e62:	3b30      	subs	r3, #48	@ 0x30
 8008e64:	f7ff ff76 	bl	8008d54 <__multadd>
 8008e68:	e7ee      	b.n	8008e48 <__s2b+0x68>
 8008e6a:	bf00      	nop
 8008e6c:	0800d187 	.word	0x0800d187
 8008e70:	0800d20f 	.word	0x0800d20f

08008e74 <__hi0bits>:
 8008e74:	4603      	mov	r3, r0
 8008e76:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e7a:	bf3a      	itte	cc
 8008e7c:	0403      	lslcc	r3, r0, #16
 8008e7e:	2010      	movcc	r0, #16
 8008e80:	2000      	movcs	r0, #0
 8008e82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e86:	bf3c      	itt	cc
 8008e88:	021b      	lslcc	r3, r3, #8
 8008e8a:	3008      	addcc	r0, #8
 8008e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e90:	bf3c      	itt	cc
 8008e92:	011b      	lslcc	r3, r3, #4
 8008e94:	3004      	addcc	r0, #4
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9a:	bf3c      	itt	cc
 8008e9c:	009b      	lslcc	r3, r3, #2
 8008e9e:	3002      	addcc	r0, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db05      	blt.n	8008eb0 <__hi0bits+0x3c>
 8008ea4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ea8:	f100 0001 	add.w	r0, r0, #1
 8008eac:	bf08      	it	eq
 8008eae:	2020      	moveq	r0, #32
 8008eb0:	4770      	bx	lr

08008eb2 <__lo0bits>:
 8008eb2:	6803      	ldr	r3, [r0, #0]
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	f013 0007 	ands.w	r0, r3, #7
 8008eba:	d00b      	beq.n	8008ed4 <__lo0bits+0x22>
 8008ebc:	07d9      	lsls	r1, r3, #31
 8008ebe:	d421      	bmi.n	8008f04 <__lo0bits+0x52>
 8008ec0:	0798      	lsls	r0, r3, #30
 8008ec2:	bf49      	itett	mi
 8008ec4:	085b      	lsrmi	r3, r3, #1
 8008ec6:	089b      	lsrpl	r3, r3, #2
 8008ec8:	2001      	movmi	r0, #1
 8008eca:	6013      	strmi	r3, [r2, #0]
 8008ecc:	bf5c      	itt	pl
 8008ece:	2002      	movpl	r0, #2
 8008ed0:	6013      	strpl	r3, [r2, #0]
 8008ed2:	4770      	bx	lr
 8008ed4:	b299      	uxth	r1, r3
 8008ed6:	b909      	cbnz	r1, 8008edc <__lo0bits+0x2a>
 8008ed8:	2010      	movs	r0, #16
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	b2d9      	uxtb	r1, r3
 8008ede:	b909      	cbnz	r1, 8008ee4 <__lo0bits+0x32>
 8008ee0:	3008      	adds	r0, #8
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	0719      	lsls	r1, r3, #28
 8008ee6:	bf04      	itt	eq
 8008ee8:	091b      	lsreq	r3, r3, #4
 8008eea:	3004      	addeq	r0, #4
 8008eec:	0799      	lsls	r1, r3, #30
 8008eee:	bf04      	itt	eq
 8008ef0:	089b      	lsreq	r3, r3, #2
 8008ef2:	3002      	addeq	r0, #2
 8008ef4:	07d9      	lsls	r1, r3, #31
 8008ef6:	d403      	bmi.n	8008f00 <__lo0bits+0x4e>
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	f100 0001 	add.w	r0, r0, #1
 8008efe:	d003      	beq.n	8008f08 <__lo0bits+0x56>
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4770      	bx	lr
 8008f04:	2000      	movs	r0, #0
 8008f06:	4770      	bx	lr
 8008f08:	2020      	movs	r0, #32
 8008f0a:	4770      	bx	lr

08008f0c <__i2b>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	460c      	mov	r4, r1
 8008f10:	2101      	movs	r1, #1
 8008f12:	f7ff febd 	bl	8008c90 <_Balloc>
 8008f16:	4602      	mov	r2, r0
 8008f18:	b928      	cbnz	r0, 8008f26 <__i2b+0x1a>
 8008f1a:	f240 1145 	movw	r1, #325	@ 0x145
 8008f1e:	4b04      	ldr	r3, [pc, #16]	@ (8008f30 <__i2b+0x24>)
 8008f20:	4804      	ldr	r0, [pc, #16]	@ (8008f34 <__i2b+0x28>)
 8008f22:	f000 ff29 	bl	8009d78 <__assert_func>
 8008f26:	2301      	movs	r3, #1
 8008f28:	6144      	str	r4, [r0, #20]
 8008f2a:	6103      	str	r3, [r0, #16]
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	bf00      	nop
 8008f30:	0800d187 	.word	0x0800d187
 8008f34:	0800d20f 	.word	0x0800d20f

08008f38 <__multiply>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	4617      	mov	r7, r2
 8008f3e:	690a      	ldr	r2, [r1, #16]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	4689      	mov	r9, r1
 8008f44:	429a      	cmp	r2, r3
 8008f46:	bfa2      	ittt	ge
 8008f48:	463b      	movge	r3, r7
 8008f4a:	460f      	movge	r7, r1
 8008f4c:	4699      	movge	r9, r3
 8008f4e:	693d      	ldr	r5, [r7, #16]
 8008f50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	eb05 060a 	add.w	r6, r5, sl
 8008f5c:	42b3      	cmp	r3, r6
 8008f5e:	b085      	sub	sp, #20
 8008f60:	bfb8      	it	lt
 8008f62:	3101      	addlt	r1, #1
 8008f64:	f7ff fe94 	bl	8008c90 <_Balloc>
 8008f68:	b930      	cbnz	r0, 8008f78 <__multiply+0x40>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f70:	4b40      	ldr	r3, [pc, #256]	@ (8009074 <__multiply+0x13c>)
 8008f72:	4841      	ldr	r0, [pc, #260]	@ (8009078 <__multiply+0x140>)
 8008f74:	f000 ff00 	bl	8009d78 <__assert_func>
 8008f78:	f100 0414 	add.w	r4, r0, #20
 8008f7c:	4623      	mov	r3, r4
 8008f7e:	2200      	movs	r2, #0
 8008f80:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f84:	4573      	cmp	r3, lr
 8008f86:	d320      	bcc.n	8008fca <__multiply+0x92>
 8008f88:	f107 0814 	add.w	r8, r7, #20
 8008f8c:	f109 0114 	add.w	r1, r9, #20
 8008f90:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f94:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	1beb      	subs	r3, r5, r7
 8008f9c:	3b15      	subs	r3, #21
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	3715      	adds	r7, #21
 8008fa6:	42bd      	cmp	r5, r7
 8008fa8:	bf38      	it	cc
 8008faa:	2304      	movcc	r3, #4
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	9b02      	ldr	r3, [sp, #8]
 8008fb0:	9103      	str	r1, [sp, #12]
 8008fb2:	428b      	cmp	r3, r1
 8008fb4:	d80c      	bhi.n	8008fd0 <__multiply+0x98>
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	dd03      	ble.n	8008fc2 <__multiply+0x8a>
 8008fba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d055      	beq.n	800906e <__multiply+0x136>
 8008fc2:	6106      	str	r6, [r0, #16]
 8008fc4:	b005      	add	sp, #20
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	f843 2b04 	str.w	r2, [r3], #4
 8008fce:	e7d9      	b.n	8008f84 <__multiply+0x4c>
 8008fd0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fd4:	f1ba 0f00 	cmp.w	sl, #0
 8008fd8:	d01f      	beq.n	800901a <__multiply+0xe2>
 8008fda:	46c4      	mov	ip, r8
 8008fdc:	46a1      	mov	r9, r4
 8008fde:	2700      	movs	r7, #0
 8008fe0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8008fe8:	fa1f fb82 	uxth.w	fp, r2
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ff2:	443b      	add	r3, r7
 8008ff4:	f8d9 7000 	ldr.w	r7, [r9]
 8008ff8:	0c12      	lsrs	r2, r2, #16
 8008ffa:	0c3f      	lsrs	r7, r7, #16
 8008ffc:	fb0a 7202 	mla	r2, sl, r2, r7
 8009000:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009004:	b29b      	uxth	r3, r3
 8009006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800900a:	4565      	cmp	r5, ip
 800900c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009010:	f849 3b04 	str.w	r3, [r9], #4
 8009014:	d8e4      	bhi.n	8008fe0 <__multiply+0xa8>
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	50e7      	str	r7, [r4, r3]
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	3104      	adds	r1, #4
 800901e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009022:	f1b9 0f00 	cmp.w	r9, #0
 8009026:	d020      	beq.n	800906a <__multiply+0x132>
 8009028:	4647      	mov	r7, r8
 800902a:	46a4      	mov	ip, r4
 800902c:	f04f 0a00 	mov.w	sl, #0
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	f8b7 b000 	ldrh.w	fp, [r7]
 8009036:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800903a:	b29b      	uxth	r3, r3
 800903c:	fb09 220b 	mla	r2, r9, fp, r2
 8009040:	4452      	add	r2, sl
 8009042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009046:	f84c 3b04 	str.w	r3, [ip], #4
 800904a:	f857 3b04 	ldr.w	r3, [r7], #4
 800904e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009052:	f8bc 3000 	ldrh.w	r3, [ip]
 8009056:	42bd      	cmp	r5, r7
 8009058:	fb09 330a 	mla	r3, r9, sl, r3
 800905c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009060:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009064:	d8e5      	bhi.n	8009032 <__multiply+0xfa>
 8009066:	9a01      	ldr	r2, [sp, #4]
 8009068:	50a3      	str	r3, [r4, r2]
 800906a:	3404      	adds	r4, #4
 800906c:	e79f      	b.n	8008fae <__multiply+0x76>
 800906e:	3e01      	subs	r6, #1
 8009070:	e7a1      	b.n	8008fb6 <__multiply+0x7e>
 8009072:	bf00      	nop
 8009074:	0800d187 	.word	0x0800d187
 8009078:	0800d20f 	.word	0x0800d20f

0800907c <__pow5mult>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	4615      	mov	r5, r2
 8009082:	f012 0203 	ands.w	r2, r2, #3
 8009086:	4607      	mov	r7, r0
 8009088:	460e      	mov	r6, r1
 800908a:	d007      	beq.n	800909c <__pow5mult+0x20>
 800908c:	4c25      	ldr	r4, [pc, #148]	@ (8009124 <__pow5mult+0xa8>)
 800908e:	3a01      	subs	r2, #1
 8009090:	2300      	movs	r3, #0
 8009092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009096:	f7ff fe5d 	bl	8008d54 <__multadd>
 800909a:	4606      	mov	r6, r0
 800909c:	10ad      	asrs	r5, r5, #2
 800909e:	d03d      	beq.n	800911c <__pow5mult+0xa0>
 80090a0:	69fc      	ldr	r4, [r7, #28]
 80090a2:	b97c      	cbnz	r4, 80090c4 <__pow5mult+0x48>
 80090a4:	2010      	movs	r0, #16
 80090a6:	f000 fe99 	bl	8009ddc <malloc>
 80090aa:	4602      	mov	r2, r0
 80090ac:	61f8      	str	r0, [r7, #28]
 80090ae:	b928      	cbnz	r0, 80090bc <__pow5mult+0x40>
 80090b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009128 <__pow5mult+0xac>)
 80090b6:	481d      	ldr	r0, [pc, #116]	@ (800912c <__pow5mult+0xb0>)
 80090b8:	f000 fe5e 	bl	8009d78 <__assert_func>
 80090bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090c0:	6004      	str	r4, [r0, #0]
 80090c2:	60c4      	str	r4, [r0, #12]
 80090c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090cc:	b94c      	cbnz	r4, 80090e2 <__pow5mult+0x66>
 80090ce:	f240 2171 	movw	r1, #625	@ 0x271
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7ff ff1a 	bl	8008f0c <__i2b>
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	f8c8 0008 	str.w	r0, [r8, #8]
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	07eb      	lsls	r3, r5, #31
 80090e8:	d50a      	bpl.n	8009100 <__pow5mult+0x84>
 80090ea:	4631      	mov	r1, r6
 80090ec:	4622      	mov	r2, r4
 80090ee:	4638      	mov	r0, r7
 80090f0:	f7ff ff22 	bl	8008f38 <__multiply>
 80090f4:	4680      	mov	r8, r0
 80090f6:	4631      	mov	r1, r6
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff fe09 	bl	8008d10 <_Bfree>
 80090fe:	4646      	mov	r6, r8
 8009100:	106d      	asrs	r5, r5, #1
 8009102:	d00b      	beq.n	800911c <__pow5mult+0xa0>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	b938      	cbnz	r0, 8009118 <__pow5mult+0x9c>
 8009108:	4622      	mov	r2, r4
 800910a:	4621      	mov	r1, r4
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ff13 	bl	8008f38 <__multiply>
 8009112:	6020      	str	r0, [r4, #0]
 8009114:	f8c0 9000 	str.w	r9, [r0]
 8009118:	4604      	mov	r4, r0
 800911a:	e7e4      	b.n	80090e6 <__pow5mult+0x6a>
 800911c:	4630      	mov	r0, r6
 800911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009122:	bf00      	nop
 8009124:	0800d358 	.word	0x0800d358
 8009128:	0800d1f8 	.word	0x0800d1f8
 800912c:	0800d20f 	.word	0x0800d20f

08009130 <__lshift>:
 8009130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	4607      	mov	r7, r0
 8009138:	4691      	mov	r9, r2
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	6849      	ldr	r1, [r1, #4]
 800913e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009148:	f108 0601 	add.w	r6, r8, #1
 800914c:	42b3      	cmp	r3, r6
 800914e:	db0b      	blt.n	8009168 <__lshift+0x38>
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff fd9d 	bl	8008c90 <_Balloc>
 8009156:	4605      	mov	r5, r0
 8009158:	b948      	cbnz	r0, 800916e <__lshift+0x3e>
 800915a:	4602      	mov	r2, r0
 800915c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009160:	4b27      	ldr	r3, [pc, #156]	@ (8009200 <__lshift+0xd0>)
 8009162:	4828      	ldr	r0, [pc, #160]	@ (8009204 <__lshift+0xd4>)
 8009164:	f000 fe08 	bl	8009d78 <__assert_func>
 8009168:	3101      	adds	r1, #1
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	e7ee      	b.n	800914c <__lshift+0x1c>
 800916e:	2300      	movs	r3, #0
 8009170:	f100 0114 	add.w	r1, r0, #20
 8009174:	f100 0210 	add.w	r2, r0, #16
 8009178:	4618      	mov	r0, r3
 800917a:	4553      	cmp	r3, sl
 800917c:	db33      	blt.n	80091e6 <__lshift+0xb6>
 800917e:	6920      	ldr	r0, [r4, #16]
 8009180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009184:	f104 0314 	add.w	r3, r4, #20
 8009188:	f019 091f 	ands.w	r9, r9, #31
 800918c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009190:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009194:	d02b      	beq.n	80091ee <__lshift+0xbe>
 8009196:	468a      	mov	sl, r1
 8009198:	2200      	movs	r2, #0
 800919a:	f1c9 0e20 	rsb	lr, r9, #32
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	fa00 f009 	lsl.w	r0, r0, r9
 80091a4:	4310      	orrs	r0, r2
 80091a6:	f84a 0b04 	str.w	r0, [sl], #4
 80091aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ae:	459c      	cmp	ip, r3
 80091b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091b4:	d8f3      	bhi.n	800919e <__lshift+0x6e>
 80091b6:	ebac 0304 	sub.w	r3, ip, r4
 80091ba:	3b15      	subs	r3, #21
 80091bc:	f023 0303 	bic.w	r3, r3, #3
 80091c0:	3304      	adds	r3, #4
 80091c2:	f104 0015 	add.w	r0, r4, #21
 80091c6:	4560      	cmp	r0, ip
 80091c8:	bf88      	it	hi
 80091ca:	2304      	movhi	r3, #4
 80091cc:	50ca      	str	r2, [r1, r3]
 80091ce:	b10a      	cbz	r2, 80091d4 <__lshift+0xa4>
 80091d0:	f108 0602 	add.w	r6, r8, #2
 80091d4:	3e01      	subs	r6, #1
 80091d6:	4638      	mov	r0, r7
 80091d8:	4621      	mov	r1, r4
 80091da:	612e      	str	r6, [r5, #16]
 80091dc:	f7ff fd98 	bl	8008d10 <_Bfree>
 80091e0:	4628      	mov	r0, r5
 80091e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091ea:	3301      	adds	r3, #1
 80091ec:	e7c5      	b.n	800917a <__lshift+0x4a>
 80091ee:	3904      	subs	r1, #4
 80091f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f4:	459c      	cmp	ip, r3
 80091f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80091fa:	d8f9      	bhi.n	80091f0 <__lshift+0xc0>
 80091fc:	e7ea      	b.n	80091d4 <__lshift+0xa4>
 80091fe:	bf00      	nop
 8009200:	0800d187 	.word	0x0800d187
 8009204:	0800d20f 	.word	0x0800d20f

08009208 <__mcmp>:
 8009208:	4603      	mov	r3, r0
 800920a:	690a      	ldr	r2, [r1, #16]
 800920c:	6900      	ldr	r0, [r0, #16]
 800920e:	b530      	push	{r4, r5, lr}
 8009210:	1a80      	subs	r0, r0, r2
 8009212:	d10e      	bne.n	8009232 <__mcmp+0x2a>
 8009214:	3314      	adds	r3, #20
 8009216:	3114      	adds	r1, #20
 8009218:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800921c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009220:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009224:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009228:	4295      	cmp	r5, r2
 800922a:	d003      	beq.n	8009234 <__mcmp+0x2c>
 800922c:	d205      	bcs.n	800923a <__mcmp+0x32>
 800922e:	f04f 30ff 	mov.w	r0, #4294967295
 8009232:	bd30      	pop	{r4, r5, pc}
 8009234:	42a3      	cmp	r3, r4
 8009236:	d3f3      	bcc.n	8009220 <__mcmp+0x18>
 8009238:	e7fb      	b.n	8009232 <__mcmp+0x2a>
 800923a:	2001      	movs	r0, #1
 800923c:	e7f9      	b.n	8009232 <__mcmp+0x2a>
	...

08009240 <__mdiff>:
 8009240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	4689      	mov	r9, r1
 8009246:	4606      	mov	r6, r0
 8009248:	4611      	mov	r1, r2
 800924a:	4648      	mov	r0, r9
 800924c:	4614      	mov	r4, r2
 800924e:	f7ff ffdb 	bl	8009208 <__mcmp>
 8009252:	1e05      	subs	r5, r0, #0
 8009254:	d112      	bne.n	800927c <__mdiff+0x3c>
 8009256:	4629      	mov	r1, r5
 8009258:	4630      	mov	r0, r6
 800925a:	f7ff fd19 	bl	8008c90 <_Balloc>
 800925e:	4602      	mov	r2, r0
 8009260:	b928      	cbnz	r0, 800926e <__mdiff+0x2e>
 8009262:	f240 2137 	movw	r1, #567	@ 0x237
 8009266:	4b3e      	ldr	r3, [pc, #248]	@ (8009360 <__mdiff+0x120>)
 8009268:	483e      	ldr	r0, [pc, #248]	@ (8009364 <__mdiff+0x124>)
 800926a:	f000 fd85 	bl	8009d78 <__assert_func>
 800926e:	2301      	movs	r3, #1
 8009270:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009274:	4610      	mov	r0, r2
 8009276:	b003      	add	sp, #12
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	bfbc      	itt	lt
 800927e:	464b      	movlt	r3, r9
 8009280:	46a1      	movlt	r9, r4
 8009282:	4630      	mov	r0, r6
 8009284:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009288:	bfba      	itte	lt
 800928a:	461c      	movlt	r4, r3
 800928c:	2501      	movlt	r5, #1
 800928e:	2500      	movge	r5, #0
 8009290:	f7ff fcfe 	bl	8008c90 <_Balloc>
 8009294:	4602      	mov	r2, r0
 8009296:	b918      	cbnz	r0, 80092a0 <__mdiff+0x60>
 8009298:	f240 2145 	movw	r1, #581	@ 0x245
 800929c:	4b30      	ldr	r3, [pc, #192]	@ (8009360 <__mdiff+0x120>)
 800929e:	e7e3      	b.n	8009268 <__mdiff+0x28>
 80092a0:	f100 0b14 	add.w	fp, r0, #20
 80092a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092a8:	f109 0310 	add.w	r3, r9, #16
 80092ac:	60c5      	str	r5, [r0, #12]
 80092ae:	f04f 0c00 	mov.w	ip, #0
 80092b2:	f109 0514 	add.w	r5, r9, #20
 80092b6:	46d9      	mov	r9, fp
 80092b8:	6926      	ldr	r6, [r4, #16]
 80092ba:	f104 0e14 	add.w	lr, r4, #20
 80092be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092d2:	b281      	uxth	r1, r0
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	fa1f f38a 	uxth.w	r3, sl
 80092da:	1a5b      	subs	r3, r3, r1
 80092dc:	0c00      	lsrs	r0, r0, #16
 80092de:	4463      	add	r3, ip
 80092e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092ee:	4576      	cmp	r6, lr
 80092f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092f4:	f849 3b04 	str.w	r3, [r9], #4
 80092f8:	d8e6      	bhi.n	80092c8 <__mdiff+0x88>
 80092fa:	1b33      	subs	r3, r6, r4
 80092fc:	3b15      	subs	r3, #21
 80092fe:	f023 0303 	bic.w	r3, r3, #3
 8009302:	3415      	adds	r4, #21
 8009304:	3304      	adds	r3, #4
 8009306:	42a6      	cmp	r6, r4
 8009308:	bf38      	it	cc
 800930a:	2304      	movcc	r3, #4
 800930c:	441d      	add	r5, r3
 800930e:	445b      	add	r3, fp
 8009310:	461e      	mov	r6, r3
 8009312:	462c      	mov	r4, r5
 8009314:	4544      	cmp	r4, r8
 8009316:	d30e      	bcc.n	8009336 <__mdiff+0xf6>
 8009318:	f108 0103 	add.w	r1, r8, #3
 800931c:	1b49      	subs	r1, r1, r5
 800931e:	f021 0103 	bic.w	r1, r1, #3
 8009322:	3d03      	subs	r5, #3
 8009324:	45a8      	cmp	r8, r5
 8009326:	bf38      	it	cc
 8009328:	2100      	movcc	r1, #0
 800932a:	440b      	add	r3, r1
 800932c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009330:	b199      	cbz	r1, 800935a <__mdiff+0x11a>
 8009332:	6117      	str	r7, [r2, #16]
 8009334:	e79e      	b.n	8009274 <__mdiff+0x34>
 8009336:	46e6      	mov	lr, ip
 8009338:	f854 1b04 	ldr.w	r1, [r4], #4
 800933c:	fa1f fc81 	uxth.w	ip, r1
 8009340:	44f4      	add	ip, lr
 8009342:	0c08      	lsrs	r0, r1, #16
 8009344:	4471      	add	r1, lr
 8009346:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800934a:	b289      	uxth	r1, r1
 800934c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009350:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009354:	f846 1b04 	str.w	r1, [r6], #4
 8009358:	e7dc      	b.n	8009314 <__mdiff+0xd4>
 800935a:	3f01      	subs	r7, #1
 800935c:	e7e6      	b.n	800932c <__mdiff+0xec>
 800935e:	bf00      	nop
 8009360:	0800d187 	.word	0x0800d187
 8009364:	0800d20f 	.word	0x0800d20f

08009368 <__ulp>:
 8009368:	4b0e      	ldr	r3, [pc, #56]	@ (80093a4 <__ulp+0x3c>)
 800936a:	400b      	ands	r3, r1
 800936c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009370:	2b00      	cmp	r3, #0
 8009372:	dc08      	bgt.n	8009386 <__ulp+0x1e>
 8009374:	425b      	negs	r3, r3
 8009376:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800937a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800937e:	da04      	bge.n	800938a <__ulp+0x22>
 8009380:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009384:	4113      	asrs	r3, r2
 8009386:	2200      	movs	r2, #0
 8009388:	e008      	b.n	800939c <__ulp+0x34>
 800938a:	f1a2 0314 	sub.w	r3, r2, #20
 800938e:	2b1e      	cmp	r3, #30
 8009390:	bfd6      	itet	le
 8009392:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009396:	2201      	movgt	r2, #1
 8009398:	40da      	lsrle	r2, r3
 800939a:	2300      	movs	r3, #0
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	7ff00000 	.word	0x7ff00000

080093a8 <__b2d>:
 80093a8:	6902      	ldr	r2, [r0, #16]
 80093aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ac:	f100 0614 	add.w	r6, r0, #20
 80093b0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80093b4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80093b8:	4f1e      	ldr	r7, [pc, #120]	@ (8009434 <__b2d+0x8c>)
 80093ba:	4620      	mov	r0, r4
 80093bc:	f7ff fd5a 	bl	8008e74 <__hi0bits>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f1c0 0020 	rsb	r0, r0, #32
 80093c6:	2b0a      	cmp	r3, #10
 80093c8:	f1a2 0504 	sub.w	r5, r2, #4
 80093cc:	6008      	str	r0, [r1, #0]
 80093ce:	dc12      	bgt.n	80093f6 <__b2d+0x4e>
 80093d0:	42ae      	cmp	r6, r5
 80093d2:	bf2c      	ite	cs
 80093d4:	2200      	movcs	r2, #0
 80093d6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80093da:	f1c3 0c0b 	rsb	ip, r3, #11
 80093de:	3315      	adds	r3, #21
 80093e0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80093e4:	fa04 f303 	lsl.w	r3, r4, r3
 80093e8:	fa22 f20c 	lsr.w	r2, r2, ip
 80093ec:	ea4e 0107 	orr.w	r1, lr, r7
 80093f0:	431a      	orrs	r2, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f6:	42ae      	cmp	r6, r5
 80093f8:	bf36      	itet	cc
 80093fa:	f1a2 0508 	subcc.w	r5, r2, #8
 80093fe:	2200      	movcs	r2, #0
 8009400:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009404:	3b0b      	subs	r3, #11
 8009406:	d012      	beq.n	800942e <__b2d+0x86>
 8009408:	f1c3 0720 	rsb	r7, r3, #32
 800940c:	fa22 f107 	lsr.w	r1, r2, r7
 8009410:	409c      	lsls	r4, r3
 8009412:	430c      	orrs	r4, r1
 8009414:	42b5      	cmp	r5, r6
 8009416:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800941a:	bf94      	ite	ls
 800941c:	2400      	movls	r4, #0
 800941e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009422:	409a      	lsls	r2, r3
 8009424:	40fc      	lsrs	r4, r7
 8009426:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800942a:	4322      	orrs	r2, r4
 800942c:	e7e1      	b.n	80093f2 <__b2d+0x4a>
 800942e:	ea44 0107 	orr.w	r1, r4, r7
 8009432:	e7de      	b.n	80093f2 <__b2d+0x4a>
 8009434:	3ff00000 	.word	0x3ff00000

08009438 <__d2b>:
 8009438:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800943c:	2101      	movs	r1, #1
 800943e:	4690      	mov	r8, r2
 8009440:	4699      	mov	r9, r3
 8009442:	9e08      	ldr	r6, [sp, #32]
 8009444:	f7ff fc24 	bl	8008c90 <_Balloc>
 8009448:	4604      	mov	r4, r0
 800944a:	b930      	cbnz	r0, 800945a <__d2b+0x22>
 800944c:	4602      	mov	r2, r0
 800944e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009452:	4b23      	ldr	r3, [pc, #140]	@ (80094e0 <__d2b+0xa8>)
 8009454:	4823      	ldr	r0, [pc, #140]	@ (80094e4 <__d2b+0xac>)
 8009456:	f000 fc8f 	bl	8009d78 <__assert_func>
 800945a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800945e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009462:	b10d      	cbz	r5, 8009468 <__d2b+0x30>
 8009464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	f1b8 0300 	subs.w	r3, r8, #0
 800946e:	d024      	beq.n	80094ba <__d2b+0x82>
 8009470:	4668      	mov	r0, sp
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	f7ff fd1d 	bl	8008eb2 <__lo0bits>
 8009478:	e9dd 1200 	ldrd	r1, r2, [sp]
 800947c:	b1d8      	cbz	r0, 80094b6 <__d2b+0x7e>
 800947e:	f1c0 0320 	rsb	r3, r0, #32
 8009482:	fa02 f303 	lsl.w	r3, r2, r3
 8009486:	430b      	orrs	r3, r1
 8009488:	40c2      	lsrs	r2, r0
 800948a:	6163      	str	r3, [r4, #20]
 800948c:	9201      	str	r2, [sp, #4]
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bf0c      	ite	eq
 8009494:	2201      	moveq	r2, #1
 8009496:	2202      	movne	r2, #2
 8009498:	61a3      	str	r3, [r4, #24]
 800949a:	6122      	str	r2, [r4, #16]
 800949c:	b1ad      	cbz	r5, 80094ca <__d2b+0x92>
 800949e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094a2:	4405      	add	r5, r0
 80094a4:	6035      	str	r5, [r6, #0]
 80094a6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ac:	6018      	str	r0, [r3, #0]
 80094ae:	4620      	mov	r0, r4
 80094b0:	b002      	add	sp, #8
 80094b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80094b6:	6161      	str	r1, [r4, #20]
 80094b8:	e7e9      	b.n	800948e <__d2b+0x56>
 80094ba:	a801      	add	r0, sp, #4
 80094bc:	f7ff fcf9 	bl	8008eb2 <__lo0bits>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	3020      	adds	r0, #32
 80094c8:	e7e7      	b.n	800949a <__d2b+0x62>
 80094ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094d2:	6030      	str	r0, [r6, #0]
 80094d4:	6918      	ldr	r0, [r3, #16]
 80094d6:	f7ff fccd 	bl	8008e74 <__hi0bits>
 80094da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094de:	e7e4      	b.n	80094aa <__d2b+0x72>
 80094e0:	0800d187 	.word	0x0800d187
 80094e4:	0800d20f 	.word	0x0800d20f

080094e8 <__ratio>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b085      	sub	sp, #20
 80094ee:	e9cd 1000 	strd	r1, r0, [sp]
 80094f2:	a902      	add	r1, sp, #8
 80094f4:	f7ff ff58 	bl	80093a8 <__b2d>
 80094f8:	468b      	mov	fp, r1
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	9800      	ldr	r0, [sp, #0]
 8009500:	a903      	add	r1, sp, #12
 8009502:	f7ff ff51 	bl	80093a8 <__b2d>
 8009506:	460d      	mov	r5, r1
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	4689      	mov	r9, r1
 800950c:	6919      	ldr	r1, [r3, #16]
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	4604      	mov	r4, r0
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	4630      	mov	r0, r6
 8009516:	1ac9      	subs	r1, r1, r3
 8009518:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009522:	2b00      	cmp	r3, #0
 8009524:	bfcd      	iteet	gt
 8009526:	463a      	movgt	r2, r7
 8009528:	462a      	movle	r2, r5
 800952a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800952e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009532:	bfd8      	it	le
 8009534:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009538:	464b      	mov	r3, r9
 800953a:	4622      	mov	r2, r4
 800953c:	4659      	mov	r1, fp
 800953e:	f7f7 f8f5 	bl	800072c <__aeabi_ddiv>
 8009542:	b005      	add	sp, #20
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009548 <__copybits>:
 8009548:	3901      	subs	r1, #1
 800954a:	b570      	push	{r4, r5, r6, lr}
 800954c:	1149      	asrs	r1, r1, #5
 800954e:	6914      	ldr	r4, [r2, #16]
 8009550:	3101      	adds	r1, #1
 8009552:	f102 0314 	add.w	r3, r2, #20
 8009556:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800955a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800955e:	1f05      	subs	r5, r0, #4
 8009560:	42a3      	cmp	r3, r4
 8009562:	d30c      	bcc.n	800957e <__copybits+0x36>
 8009564:	1aa3      	subs	r3, r4, r2
 8009566:	3b11      	subs	r3, #17
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	3211      	adds	r2, #17
 800956e:	42a2      	cmp	r2, r4
 8009570:	bf88      	it	hi
 8009572:	2300      	movhi	r3, #0
 8009574:	4418      	add	r0, r3
 8009576:	2300      	movs	r3, #0
 8009578:	4288      	cmp	r0, r1
 800957a:	d305      	bcc.n	8009588 <__copybits+0x40>
 800957c:	bd70      	pop	{r4, r5, r6, pc}
 800957e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009582:	f845 6f04 	str.w	r6, [r5, #4]!
 8009586:	e7eb      	b.n	8009560 <__copybits+0x18>
 8009588:	f840 3b04 	str.w	r3, [r0], #4
 800958c:	e7f4      	b.n	8009578 <__copybits+0x30>

0800958e <__any_on>:
 800958e:	f100 0214 	add.w	r2, r0, #20
 8009592:	6900      	ldr	r0, [r0, #16]
 8009594:	114b      	asrs	r3, r1, #5
 8009596:	4298      	cmp	r0, r3
 8009598:	b510      	push	{r4, lr}
 800959a:	db11      	blt.n	80095c0 <__any_on+0x32>
 800959c:	dd0a      	ble.n	80095b4 <__any_on+0x26>
 800959e:	f011 011f 	ands.w	r1, r1, #31
 80095a2:	d007      	beq.n	80095b4 <__any_on+0x26>
 80095a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095a8:	fa24 f001 	lsr.w	r0, r4, r1
 80095ac:	fa00 f101 	lsl.w	r1, r0, r1
 80095b0:	428c      	cmp	r4, r1
 80095b2:	d10b      	bne.n	80095cc <__any_on+0x3e>
 80095b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d803      	bhi.n	80095c4 <__any_on+0x36>
 80095bc:	2000      	movs	r0, #0
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	4603      	mov	r3, r0
 80095c2:	e7f7      	b.n	80095b4 <__any_on+0x26>
 80095c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d0f5      	beq.n	80095b8 <__any_on+0x2a>
 80095cc:	2001      	movs	r0, #1
 80095ce:	e7f6      	b.n	80095be <__any_on+0x30>

080095d0 <__ascii_wctomb>:
 80095d0:	4603      	mov	r3, r0
 80095d2:	4608      	mov	r0, r1
 80095d4:	b141      	cbz	r1, 80095e8 <__ascii_wctomb+0x18>
 80095d6:	2aff      	cmp	r2, #255	@ 0xff
 80095d8:	d904      	bls.n	80095e4 <__ascii_wctomb+0x14>
 80095da:	228a      	movs	r2, #138	@ 0x8a
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	4770      	bx	lr
 80095e4:	2001      	movs	r0, #1
 80095e6:	700a      	strb	r2, [r1, #0]
 80095e8:	4770      	bx	lr

080095ea <__ssputs_r>:
 80095ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ee:	461f      	mov	r7, r3
 80095f0:	688e      	ldr	r6, [r1, #8]
 80095f2:	4682      	mov	sl, r0
 80095f4:	42be      	cmp	r6, r7
 80095f6:	460c      	mov	r4, r1
 80095f8:	4690      	mov	r8, r2
 80095fa:	680b      	ldr	r3, [r1, #0]
 80095fc:	d82d      	bhi.n	800965a <__ssputs_r+0x70>
 80095fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009602:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009606:	d026      	beq.n	8009656 <__ssputs_r+0x6c>
 8009608:	6965      	ldr	r5, [r4, #20]
 800960a:	6909      	ldr	r1, [r1, #16]
 800960c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009610:	eba3 0901 	sub.w	r9, r3, r1
 8009614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009618:	1c7b      	adds	r3, r7, #1
 800961a:	444b      	add	r3, r9
 800961c:	106d      	asrs	r5, r5, #1
 800961e:	429d      	cmp	r5, r3
 8009620:	bf38      	it	cc
 8009622:	461d      	movcc	r5, r3
 8009624:	0553      	lsls	r3, r2, #21
 8009626:	d527      	bpl.n	8009678 <__ssputs_r+0x8e>
 8009628:	4629      	mov	r1, r5
 800962a:	f7ff fa93 	bl	8008b54 <_malloc_r>
 800962e:	4606      	mov	r6, r0
 8009630:	b360      	cbz	r0, 800968c <__ssputs_r+0xa2>
 8009632:	464a      	mov	r2, r9
 8009634:	6921      	ldr	r1, [r4, #16]
 8009636:	f7fe fed4 	bl	80083e2 <memcpy>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	6126      	str	r6, [r4, #16]
 8009648:	444e      	add	r6, r9
 800964a:	6026      	str	r6, [r4, #0]
 800964c:	463e      	mov	r6, r7
 800964e:	6165      	str	r5, [r4, #20]
 8009650:	eba5 0509 	sub.w	r5, r5, r9
 8009654:	60a5      	str	r5, [r4, #8]
 8009656:	42be      	cmp	r6, r7
 8009658:	d900      	bls.n	800965c <__ssputs_r+0x72>
 800965a:	463e      	mov	r6, r7
 800965c:	4632      	mov	r2, r6
 800965e:	4641      	mov	r1, r8
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	f000 fb51 	bl	8009d08 <memmove>
 8009666:	2000      	movs	r0, #0
 8009668:	68a3      	ldr	r3, [r4, #8]
 800966a:	1b9b      	subs	r3, r3, r6
 800966c:	60a3      	str	r3, [r4, #8]
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	4433      	add	r3, r6
 8009672:	6023      	str	r3, [r4, #0]
 8009674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009678:	462a      	mov	r2, r5
 800967a:	f000 fbb7 	bl	8009dec <_realloc_r>
 800967e:	4606      	mov	r6, r0
 8009680:	2800      	cmp	r0, #0
 8009682:	d1e0      	bne.n	8009646 <__ssputs_r+0x5c>
 8009684:	4650      	mov	r0, sl
 8009686:	6921      	ldr	r1, [r4, #16]
 8009688:	f7fe fec0 	bl	800840c <_free_r>
 800968c:	230c      	movs	r3, #12
 800968e:	f8ca 3000 	str.w	r3, [sl]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f04f 30ff 	mov.w	r0, #4294967295
 8009698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	e7e9      	b.n	8009674 <__ssputs_r+0x8a>

080096a0 <_svfiprintf_r>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	4698      	mov	r8, r3
 80096a6:	898b      	ldrh	r3, [r1, #12]
 80096a8:	4607      	mov	r7, r0
 80096aa:	061b      	lsls	r3, r3, #24
 80096ac:	460d      	mov	r5, r1
 80096ae:	4614      	mov	r4, r2
 80096b0:	b09d      	sub	sp, #116	@ 0x74
 80096b2:	d510      	bpl.n	80096d6 <_svfiprintf_r+0x36>
 80096b4:	690b      	ldr	r3, [r1, #16]
 80096b6:	b973      	cbnz	r3, 80096d6 <_svfiprintf_r+0x36>
 80096b8:	2140      	movs	r1, #64	@ 0x40
 80096ba:	f7ff fa4b 	bl	8008b54 <_malloc_r>
 80096be:	6028      	str	r0, [r5, #0]
 80096c0:	6128      	str	r0, [r5, #16]
 80096c2:	b930      	cbnz	r0, 80096d2 <_svfiprintf_r+0x32>
 80096c4:	230c      	movs	r3, #12
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	b01d      	add	sp, #116	@ 0x74
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d2:	2340      	movs	r3, #64	@ 0x40
 80096d4:	616b      	str	r3, [r5, #20]
 80096d6:	2300      	movs	r3, #0
 80096d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096da:	2320      	movs	r3, #32
 80096dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096e0:	2330      	movs	r3, #48	@ 0x30
 80096e2:	f04f 0901 	mov.w	r9, #1
 80096e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009884 <_svfiprintf_r+0x1e4>
 80096ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096f2:	4623      	mov	r3, r4
 80096f4:	469a      	mov	sl, r3
 80096f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096fa:	b10a      	cbz	r2, 8009700 <_svfiprintf_r+0x60>
 80096fc:	2a25      	cmp	r2, #37	@ 0x25
 80096fe:	d1f9      	bne.n	80096f4 <_svfiprintf_r+0x54>
 8009700:	ebba 0b04 	subs.w	fp, sl, r4
 8009704:	d00b      	beq.n	800971e <_svfiprintf_r+0x7e>
 8009706:	465b      	mov	r3, fp
 8009708:	4622      	mov	r2, r4
 800970a:	4629      	mov	r1, r5
 800970c:	4638      	mov	r0, r7
 800970e:	f7ff ff6c 	bl	80095ea <__ssputs_r>
 8009712:	3001      	adds	r0, #1
 8009714:	f000 80a7 	beq.w	8009866 <_svfiprintf_r+0x1c6>
 8009718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800971a:	445a      	add	r2, fp
 800971c:	9209      	str	r2, [sp, #36]	@ 0x24
 800971e:	f89a 3000 	ldrb.w	r3, [sl]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 809f 	beq.w	8009866 <_svfiprintf_r+0x1c6>
 8009728:	2300      	movs	r3, #0
 800972a:	f04f 32ff 	mov.w	r2, #4294967295
 800972e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009732:	f10a 0a01 	add.w	sl, sl, #1
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	9307      	str	r3, [sp, #28]
 800973a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800973e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009740:	4654      	mov	r4, sl
 8009742:	2205      	movs	r2, #5
 8009744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009748:	484e      	ldr	r0, [pc, #312]	@ (8009884 <_svfiprintf_r+0x1e4>)
 800974a:	f000 fb07 	bl	8009d5c <memchr>
 800974e:	9a04      	ldr	r2, [sp, #16]
 8009750:	b9d8      	cbnz	r0, 800978a <_svfiprintf_r+0xea>
 8009752:	06d0      	lsls	r0, r2, #27
 8009754:	bf44      	itt	mi
 8009756:	2320      	movmi	r3, #32
 8009758:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800975c:	0711      	lsls	r1, r2, #28
 800975e:	bf44      	itt	mi
 8009760:	232b      	movmi	r3, #43	@ 0x2b
 8009762:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009766:	f89a 3000 	ldrb.w	r3, [sl]
 800976a:	2b2a      	cmp	r3, #42	@ 0x2a
 800976c:	d015      	beq.n	800979a <_svfiprintf_r+0xfa>
 800976e:	4654      	mov	r4, sl
 8009770:	2000      	movs	r0, #0
 8009772:	f04f 0c0a 	mov.w	ip, #10
 8009776:	9a07      	ldr	r2, [sp, #28]
 8009778:	4621      	mov	r1, r4
 800977a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800977e:	3b30      	subs	r3, #48	@ 0x30
 8009780:	2b09      	cmp	r3, #9
 8009782:	d94b      	bls.n	800981c <_svfiprintf_r+0x17c>
 8009784:	b1b0      	cbz	r0, 80097b4 <_svfiprintf_r+0x114>
 8009786:	9207      	str	r2, [sp, #28]
 8009788:	e014      	b.n	80097b4 <_svfiprintf_r+0x114>
 800978a:	eba0 0308 	sub.w	r3, r0, r8
 800978e:	fa09 f303 	lsl.w	r3, r9, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	46a2      	mov	sl, r4
 8009796:	9304      	str	r3, [sp, #16]
 8009798:	e7d2      	b.n	8009740 <_svfiprintf_r+0xa0>
 800979a:	9b03      	ldr	r3, [sp, #12]
 800979c:	1d19      	adds	r1, r3, #4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	9103      	str	r1, [sp, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfbb      	ittet	lt
 80097a6:	425b      	neglt	r3, r3
 80097a8:	f042 0202 	orrlt.w	r2, r2, #2
 80097ac:	9307      	strge	r3, [sp, #28]
 80097ae:	9307      	strlt	r3, [sp, #28]
 80097b0:	bfb8      	it	lt
 80097b2:	9204      	strlt	r2, [sp, #16]
 80097b4:	7823      	ldrb	r3, [r4, #0]
 80097b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80097b8:	d10a      	bne.n	80097d0 <_svfiprintf_r+0x130>
 80097ba:	7863      	ldrb	r3, [r4, #1]
 80097bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80097be:	d132      	bne.n	8009826 <_svfiprintf_r+0x186>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	3402      	adds	r4, #2
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009888 <_svfiprintf_r+0x1e8>
 80097d4:	2203      	movs	r2, #3
 80097d6:	4650      	mov	r0, sl
 80097d8:	7821      	ldrb	r1, [r4, #0]
 80097da:	f000 fabf 	bl	8009d5c <memchr>
 80097de:	b138      	cbz	r0, 80097f0 <_svfiprintf_r+0x150>
 80097e0:	2240      	movs	r2, #64	@ 0x40
 80097e2:	9b04      	ldr	r3, [sp, #16]
 80097e4:	eba0 000a 	sub.w	r0, r0, sl
 80097e8:	4082      	lsls	r2, r0
 80097ea:	4313      	orrs	r3, r2
 80097ec:	3401      	adds	r4, #1
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f4:	2206      	movs	r2, #6
 80097f6:	4825      	ldr	r0, [pc, #148]	@ (800988c <_svfiprintf_r+0x1ec>)
 80097f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097fc:	f000 faae 	bl	8009d5c <memchr>
 8009800:	2800      	cmp	r0, #0
 8009802:	d036      	beq.n	8009872 <_svfiprintf_r+0x1d2>
 8009804:	4b22      	ldr	r3, [pc, #136]	@ (8009890 <_svfiprintf_r+0x1f0>)
 8009806:	bb1b      	cbnz	r3, 8009850 <_svfiprintf_r+0x1b0>
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	3307      	adds	r3, #7
 800980c:	f023 0307 	bic.w	r3, r3, #7
 8009810:	3308      	adds	r3, #8
 8009812:	9303      	str	r3, [sp, #12]
 8009814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009816:	4433      	add	r3, r6
 8009818:	9309      	str	r3, [sp, #36]	@ 0x24
 800981a:	e76a      	b.n	80096f2 <_svfiprintf_r+0x52>
 800981c:	460c      	mov	r4, r1
 800981e:	2001      	movs	r0, #1
 8009820:	fb0c 3202 	mla	r2, ip, r2, r3
 8009824:	e7a8      	b.n	8009778 <_svfiprintf_r+0xd8>
 8009826:	2300      	movs	r3, #0
 8009828:	f04f 0c0a 	mov.w	ip, #10
 800982c:	4619      	mov	r1, r3
 800982e:	3401      	adds	r4, #1
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	4620      	mov	r0, r4
 8009834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009838:	3a30      	subs	r2, #48	@ 0x30
 800983a:	2a09      	cmp	r2, #9
 800983c:	d903      	bls.n	8009846 <_svfiprintf_r+0x1a6>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0c6      	beq.n	80097d0 <_svfiprintf_r+0x130>
 8009842:	9105      	str	r1, [sp, #20]
 8009844:	e7c4      	b.n	80097d0 <_svfiprintf_r+0x130>
 8009846:	4604      	mov	r4, r0
 8009848:	2301      	movs	r3, #1
 800984a:	fb0c 2101 	mla	r1, ip, r1, r2
 800984e:	e7f0      	b.n	8009832 <_svfiprintf_r+0x192>
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	462a      	mov	r2, r5
 8009856:	4638      	mov	r0, r7
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <_svfiprintf_r+0x1f4>)
 800985a:	a904      	add	r1, sp, #16
 800985c:	f3af 8000 	nop.w
 8009860:	1c42      	adds	r2, r0, #1
 8009862:	4606      	mov	r6, r0
 8009864:	d1d6      	bne.n	8009814 <_svfiprintf_r+0x174>
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	065b      	lsls	r3, r3, #25
 800986a:	f53f af2d 	bmi.w	80096c8 <_svfiprintf_r+0x28>
 800986e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009870:	e72c      	b.n	80096cc <_svfiprintf_r+0x2c>
 8009872:	ab03      	add	r3, sp, #12
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	462a      	mov	r2, r5
 8009878:	4638      	mov	r0, r7
 800987a:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <_svfiprintf_r+0x1f4>)
 800987c:	a904      	add	r1, sp, #16
 800987e:	f000 f87d 	bl	800997c <_printf_i>
 8009882:	e7ed      	b.n	8009860 <_svfiprintf_r+0x1c0>
 8009884:	0800d268 	.word	0x0800d268
 8009888:	0800d26e 	.word	0x0800d26e
 800988c:	0800d272 	.word	0x0800d272
 8009890:	00000000 	.word	0x00000000
 8009894:	080095eb 	.word	0x080095eb

08009898 <_printf_common>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	4616      	mov	r6, r2
 800989e:	4698      	mov	r8, r3
 80098a0:	688a      	ldr	r2, [r1, #8]
 80098a2:	690b      	ldr	r3, [r1, #16]
 80098a4:	4607      	mov	r7, r0
 80098a6:	4293      	cmp	r3, r2
 80098a8:	bfb8      	it	lt
 80098aa:	4613      	movlt	r3, r2
 80098ac:	6033      	str	r3, [r6, #0]
 80098ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80098b2:	460c      	mov	r4, r1
 80098b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098b8:	b10a      	cbz	r2, 80098be <_printf_common+0x26>
 80098ba:	3301      	adds	r3, #1
 80098bc:	6033      	str	r3, [r6, #0]
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	0699      	lsls	r1, r3, #26
 80098c2:	bf42      	ittt	mi
 80098c4:	6833      	ldrmi	r3, [r6, #0]
 80098c6:	3302      	addmi	r3, #2
 80098c8:	6033      	strmi	r3, [r6, #0]
 80098ca:	6825      	ldr	r5, [r4, #0]
 80098cc:	f015 0506 	ands.w	r5, r5, #6
 80098d0:	d106      	bne.n	80098e0 <_printf_common+0x48>
 80098d2:	f104 0a19 	add.w	sl, r4, #25
 80098d6:	68e3      	ldr	r3, [r4, #12]
 80098d8:	6832      	ldr	r2, [r6, #0]
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	42ab      	cmp	r3, r5
 80098de:	dc2b      	bgt.n	8009938 <_printf_common+0xa0>
 80098e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	3b00      	subs	r3, #0
 80098e8:	bf18      	it	ne
 80098ea:	2301      	movne	r3, #1
 80098ec:	0692      	lsls	r2, r2, #26
 80098ee:	d430      	bmi.n	8009952 <_printf_common+0xba>
 80098f0:	4641      	mov	r1, r8
 80098f2:	4638      	mov	r0, r7
 80098f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098f8:	47c8      	blx	r9
 80098fa:	3001      	adds	r0, #1
 80098fc:	d023      	beq.n	8009946 <_printf_common+0xae>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	6922      	ldr	r2, [r4, #16]
 8009902:	f003 0306 	and.w	r3, r3, #6
 8009906:	2b04      	cmp	r3, #4
 8009908:	bf14      	ite	ne
 800990a:	2500      	movne	r5, #0
 800990c:	6833      	ldreq	r3, [r6, #0]
 800990e:	f04f 0600 	mov.w	r6, #0
 8009912:	bf08      	it	eq
 8009914:	68e5      	ldreq	r5, [r4, #12]
 8009916:	f104 041a 	add.w	r4, r4, #26
 800991a:	bf08      	it	eq
 800991c:	1aed      	subeq	r5, r5, r3
 800991e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009922:	bf08      	it	eq
 8009924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009928:	4293      	cmp	r3, r2
 800992a:	bfc4      	itt	gt
 800992c:	1a9b      	subgt	r3, r3, r2
 800992e:	18ed      	addgt	r5, r5, r3
 8009930:	42b5      	cmp	r5, r6
 8009932:	d11a      	bne.n	800996a <_printf_common+0xd2>
 8009934:	2000      	movs	r0, #0
 8009936:	e008      	b.n	800994a <_printf_common+0xb2>
 8009938:	2301      	movs	r3, #1
 800993a:	4652      	mov	r2, sl
 800993c:	4641      	mov	r1, r8
 800993e:	4638      	mov	r0, r7
 8009940:	47c8      	blx	r9
 8009942:	3001      	adds	r0, #1
 8009944:	d103      	bne.n	800994e <_printf_common+0xb6>
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800994e:	3501      	adds	r5, #1
 8009950:	e7c1      	b.n	80098d6 <_printf_common+0x3e>
 8009952:	2030      	movs	r0, #48	@ 0x30
 8009954:	18e1      	adds	r1, r4, r3
 8009956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009960:	4422      	add	r2, r4
 8009962:	3302      	adds	r3, #2
 8009964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009968:	e7c2      	b.n	80098f0 <_printf_common+0x58>
 800996a:	2301      	movs	r3, #1
 800996c:	4622      	mov	r2, r4
 800996e:	4641      	mov	r1, r8
 8009970:	4638      	mov	r0, r7
 8009972:	47c8      	blx	r9
 8009974:	3001      	adds	r0, #1
 8009976:	d0e6      	beq.n	8009946 <_printf_common+0xae>
 8009978:	3601      	adds	r6, #1
 800997a:	e7d9      	b.n	8009930 <_printf_common+0x98>

0800997c <_printf_i>:
 800997c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	7e0f      	ldrb	r7, [r1, #24]
 8009982:	4691      	mov	r9, r2
 8009984:	2f78      	cmp	r7, #120	@ 0x78
 8009986:	4680      	mov	r8, r0
 8009988:	460c      	mov	r4, r1
 800998a:	469a      	mov	sl, r3
 800998c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800998e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009992:	d807      	bhi.n	80099a4 <_printf_i+0x28>
 8009994:	2f62      	cmp	r7, #98	@ 0x62
 8009996:	d80a      	bhi.n	80099ae <_printf_i+0x32>
 8009998:	2f00      	cmp	r7, #0
 800999a:	f000 80d1 	beq.w	8009b40 <_printf_i+0x1c4>
 800999e:	2f58      	cmp	r7, #88	@ 0x58
 80099a0:	f000 80b8 	beq.w	8009b14 <_printf_i+0x198>
 80099a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099ac:	e03a      	b.n	8009a24 <_printf_i+0xa8>
 80099ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099b2:	2b15      	cmp	r3, #21
 80099b4:	d8f6      	bhi.n	80099a4 <_printf_i+0x28>
 80099b6:	a101      	add	r1, pc, #4	@ (adr r1, 80099bc <_printf_i+0x40>)
 80099b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099bc:	08009a15 	.word	0x08009a15
 80099c0:	08009a29 	.word	0x08009a29
 80099c4:	080099a5 	.word	0x080099a5
 80099c8:	080099a5 	.word	0x080099a5
 80099cc:	080099a5 	.word	0x080099a5
 80099d0:	080099a5 	.word	0x080099a5
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	080099a5 	.word	0x080099a5
 80099dc:	080099a5 	.word	0x080099a5
 80099e0:	080099a5 	.word	0x080099a5
 80099e4:	080099a5 	.word	0x080099a5
 80099e8:	08009b27 	.word	0x08009b27
 80099ec:	08009a53 	.word	0x08009a53
 80099f0:	08009ae1 	.word	0x08009ae1
 80099f4:	080099a5 	.word	0x080099a5
 80099f8:	080099a5 	.word	0x080099a5
 80099fc:	08009b49 	.word	0x08009b49
 8009a00:	080099a5 	.word	0x080099a5
 8009a04:	08009a53 	.word	0x08009a53
 8009a08:	080099a5 	.word	0x080099a5
 8009a0c:	080099a5 	.word	0x080099a5
 8009a10:	08009ae9 	.word	0x08009ae9
 8009a14:	6833      	ldr	r3, [r6, #0]
 8009a16:	1d1a      	adds	r2, r3, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	6032      	str	r2, [r6, #0]
 8009a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a24:	2301      	movs	r3, #1
 8009a26:	e09c      	b.n	8009b62 <_printf_i+0x1e6>
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	6820      	ldr	r0, [r4, #0]
 8009a2c:	1d19      	adds	r1, r3, #4
 8009a2e:	6031      	str	r1, [r6, #0]
 8009a30:	0606      	lsls	r6, r0, #24
 8009a32:	d501      	bpl.n	8009a38 <_printf_i+0xbc>
 8009a34:	681d      	ldr	r5, [r3, #0]
 8009a36:	e003      	b.n	8009a40 <_printf_i+0xc4>
 8009a38:	0645      	lsls	r5, r0, #25
 8009a3a:	d5fb      	bpl.n	8009a34 <_printf_i+0xb8>
 8009a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	da03      	bge.n	8009a4c <_printf_i+0xd0>
 8009a44:	232d      	movs	r3, #45	@ 0x2d
 8009a46:	426d      	negs	r5, r5
 8009a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a4c:	230a      	movs	r3, #10
 8009a4e:	4858      	ldr	r0, [pc, #352]	@ (8009bb0 <_printf_i+0x234>)
 8009a50:	e011      	b.n	8009a76 <_printf_i+0xfa>
 8009a52:	6821      	ldr	r1, [r4, #0]
 8009a54:	6833      	ldr	r3, [r6, #0]
 8009a56:	0608      	lsls	r0, r1, #24
 8009a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a5c:	d402      	bmi.n	8009a64 <_printf_i+0xe8>
 8009a5e:	0649      	lsls	r1, r1, #25
 8009a60:	bf48      	it	mi
 8009a62:	b2ad      	uxthmi	r5, r5
 8009a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a66:	6033      	str	r3, [r6, #0]
 8009a68:	bf14      	ite	ne
 8009a6a:	230a      	movne	r3, #10
 8009a6c:	2308      	moveq	r3, #8
 8009a6e:	4850      	ldr	r0, [pc, #320]	@ (8009bb0 <_printf_i+0x234>)
 8009a70:	2100      	movs	r1, #0
 8009a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a76:	6866      	ldr	r6, [r4, #4]
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	60a6      	str	r6, [r4, #8]
 8009a7c:	db05      	blt.n	8009a8a <_printf_i+0x10e>
 8009a7e:	6821      	ldr	r1, [r4, #0]
 8009a80:	432e      	orrs	r6, r5
 8009a82:	f021 0104 	bic.w	r1, r1, #4
 8009a86:	6021      	str	r1, [r4, #0]
 8009a88:	d04b      	beq.n	8009b22 <_printf_i+0x1a6>
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a90:	fb03 5711 	mls	r7, r3, r1, r5
 8009a94:	5dc7      	ldrb	r7, [r0, r7]
 8009a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a9a:	462f      	mov	r7, r5
 8009a9c:	42bb      	cmp	r3, r7
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	d9f4      	bls.n	8009a8c <_printf_i+0x110>
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d10b      	bne.n	8009abe <_printf_i+0x142>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	07df      	lsls	r7, r3, #31
 8009aaa:	d508      	bpl.n	8009abe <_printf_i+0x142>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	6861      	ldr	r1, [r4, #4]
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	bfde      	ittt	le
 8009ab4:	2330      	movle	r3, #48	@ 0x30
 8009ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009abe:	1b92      	subs	r2, r2, r6
 8009ac0:	6122      	str	r2, [r4, #16]
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	aa03      	add	r2, sp, #12
 8009ace:	f7ff fee3 	bl	8009898 <_printf_common>
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d14a      	bne.n	8009b6c <_printf_i+0x1f0>
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	b004      	add	sp, #16
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	f043 0320 	orr.w	r3, r3, #32
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	2778      	movs	r7, #120	@ 0x78
 8009aea:	4832      	ldr	r0, [pc, #200]	@ (8009bb4 <_printf_i+0x238>)
 8009aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	061f      	lsls	r7, r3, #24
 8009af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009afa:	d402      	bmi.n	8009b02 <_printf_i+0x186>
 8009afc:	065f      	lsls	r7, r3, #25
 8009afe:	bf48      	it	mi
 8009b00:	b2ad      	uxthmi	r5, r5
 8009b02:	6031      	str	r1, [r6, #0]
 8009b04:	07d9      	lsls	r1, r3, #31
 8009b06:	bf44      	itt	mi
 8009b08:	f043 0320 	orrmi.w	r3, r3, #32
 8009b0c:	6023      	strmi	r3, [r4, #0]
 8009b0e:	b11d      	cbz	r5, 8009b18 <_printf_i+0x19c>
 8009b10:	2310      	movs	r3, #16
 8009b12:	e7ad      	b.n	8009a70 <_printf_i+0xf4>
 8009b14:	4826      	ldr	r0, [pc, #152]	@ (8009bb0 <_printf_i+0x234>)
 8009b16:	e7e9      	b.n	8009aec <_printf_i+0x170>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	f023 0320 	bic.w	r3, r3, #32
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	e7f6      	b.n	8009b10 <_printf_i+0x194>
 8009b22:	4616      	mov	r6, r2
 8009b24:	e7bd      	b.n	8009aa2 <_printf_i+0x126>
 8009b26:	6833      	ldr	r3, [r6, #0]
 8009b28:	6825      	ldr	r5, [r4, #0]
 8009b2a:	1d18      	adds	r0, r3, #4
 8009b2c:	6961      	ldr	r1, [r4, #20]
 8009b2e:	6030      	str	r0, [r6, #0]
 8009b30:	062e      	lsls	r6, r5, #24
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	d501      	bpl.n	8009b3a <_printf_i+0x1be>
 8009b36:	6019      	str	r1, [r3, #0]
 8009b38:	e002      	b.n	8009b40 <_printf_i+0x1c4>
 8009b3a:	0668      	lsls	r0, r5, #25
 8009b3c:	d5fb      	bpl.n	8009b36 <_printf_i+0x1ba>
 8009b3e:	8019      	strh	r1, [r3, #0]
 8009b40:	2300      	movs	r3, #0
 8009b42:	4616      	mov	r6, r2
 8009b44:	6123      	str	r3, [r4, #16]
 8009b46:	e7bc      	b.n	8009ac2 <_printf_i+0x146>
 8009b48:	6833      	ldr	r3, [r6, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	1d1a      	adds	r2, r3, #4
 8009b4e:	6032      	str	r2, [r6, #0]
 8009b50:	681e      	ldr	r6, [r3, #0]
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	4630      	mov	r0, r6
 8009b56:	f000 f901 	bl	8009d5c <memchr>
 8009b5a:	b108      	cbz	r0, 8009b60 <_printf_i+0x1e4>
 8009b5c:	1b80      	subs	r0, r0, r6
 8009b5e:	6060      	str	r0, [r4, #4]
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	6123      	str	r3, [r4, #16]
 8009b64:	2300      	movs	r3, #0
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6a:	e7aa      	b.n	8009ac2 <_printf_i+0x146>
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	4649      	mov	r1, r9
 8009b70:	4640      	mov	r0, r8
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	47d0      	blx	sl
 8009b76:	3001      	adds	r0, #1
 8009b78:	d0ad      	beq.n	8009ad6 <_printf_i+0x15a>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	079b      	lsls	r3, r3, #30
 8009b7e:	d413      	bmi.n	8009ba8 <_printf_i+0x22c>
 8009b80:	68e0      	ldr	r0, [r4, #12]
 8009b82:	9b03      	ldr	r3, [sp, #12]
 8009b84:	4298      	cmp	r0, r3
 8009b86:	bfb8      	it	lt
 8009b88:	4618      	movlt	r0, r3
 8009b8a:	e7a6      	b.n	8009ada <_printf_i+0x15e>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	4632      	mov	r2, r6
 8009b90:	4649      	mov	r1, r9
 8009b92:	4640      	mov	r0, r8
 8009b94:	47d0      	blx	sl
 8009b96:	3001      	adds	r0, #1
 8009b98:	d09d      	beq.n	8009ad6 <_printf_i+0x15a>
 8009b9a:	3501      	adds	r5, #1
 8009b9c:	68e3      	ldr	r3, [r4, #12]
 8009b9e:	9903      	ldr	r1, [sp, #12]
 8009ba0:	1a5b      	subs	r3, r3, r1
 8009ba2:	42ab      	cmp	r3, r5
 8009ba4:	dcf2      	bgt.n	8009b8c <_printf_i+0x210>
 8009ba6:	e7eb      	b.n	8009b80 <_printf_i+0x204>
 8009ba8:	2500      	movs	r5, #0
 8009baa:	f104 0619 	add.w	r6, r4, #25
 8009bae:	e7f5      	b.n	8009b9c <_printf_i+0x220>
 8009bb0:	0800d279 	.word	0x0800d279
 8009bb4:	0800d28a 	.word	0x0800d28a

08009bb8 <__sflush_r>:
 8009bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbe:	0716      	lsls	r6, r2, #28
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	d454      	bmi.n	8009c70 <__sflush_r+0xb8>
 8009bc6:	684b      	ldr	r3, [r1, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	dc02      	bgt.n	8009bd2 <__sflush_r+0x1a>
 8009bcc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd48      	ble.n	8009c64 <__sflush_r+0xac>
 8009bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bd4:	2e00      	cmp	r6, #0
 8009bd6:	d045      	beq.n	8009c64 <__sflush_r+0xac>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bde:	682f      	ldr	r7, [r5, #0]
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	d030      	beq.n	8009c48 <__sflush_r+0x90>
 8009be6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	0759      	lsls	r1, r3, #29
 8009bec:	d505      	bpl.n	8009bfa <__sflush_r+0x42>
 8009bee:	6863      	ldr	r3, [r4, #4]
 8009bf0:	1ad2      	subs	r2, r2, r3
 8009bf2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bf4:	b10b      	cbz	r3, 8009bfa <__sflush_r+0x42>
 8009bf6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bf8:	1ad2      	subs	r2, r2, r3
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c00:	6a21      	ldr	r1, [r4, #32]
 8009c02:	47b0      	blx	r6
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	d106      	bne.n	8009c18 <__sflush_r+0x60>
 8009c0a:	6829      	ldr	r1, [r5, #0]
 8009c0c:	291d      	cmp	r1, #29
 8009c0e:	d82b      	bhi.n	8009c68 <__sflush_r+0xb0>
 8009c10:	4a28      	ldr	r2, [pc, #160]	@ (8009cb4 <__sflush_r+0xfc>)
 8009c12:	40ca      	lsrs	r2, r1
 8009c14:	07d6      	lsls	r6, r2, #31
 8009c16:	d527      	bpl.n	8009c68 <__sflush_r+0xb0>
 8009c18:	2200      	movs	r2, #0
 8009c1a:	6062      	str	r2, [r4, #4]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	04d9      	lsls	r1, r3, #19
 8009c20:	6022      	str	r2, [r4, #0]
 8009c22:	d504      	bpl.n	8009c2e <__sflush_r+0x76>
 8009c24:	1c42      	adds	r2, r0, #1
 8009c26:	d101      	bne.n	8009c2c <__sflush_r+0x74>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b903      	cbnz	r3, 8009c2e <__sflush_r+0x76>
 8009c2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c30:	602f      	str	r7, [r5, #0]
 8009c32:	b1b9      	cbz	r1, 8009c64 <__sflush_r+0xac>
 8009c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c38:	4299      	cmp	r1, r3
 8009c3a:	d002      	beq.n	8009c42 <__sflush_r+0x8a>
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f7fe fbe5 	bl	800840c <_free_r>
 8009c42:	2300      	movs	r3, #0
 8009c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c46:	e00d      	b.n	8009c64 <__sflush_r+0xac>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b0      	blx	r6
 8009c4e:	4602      	mov	r2, r0
 8009c50:	1c50      	adds	r0, r2, #1
 8009c52:	d1c9      	bne.n	8009be8 <__sflush_r+0x30>
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0c6      	beq.n	8009be8 <__sflush_r+0x30>
 8009c5a:	2b1d      	cmp	r3, #29
 8009c5c:	d001      	beq.n	8009c62 <__sflush_r+0xaa>
 8009c5e:	2b16      	cmp	r3, #22
 8009c60:	d11d      	bne.n	8009c9e <__sflush_r+0xe6>
 8009c62:	602f      	str	r7, [r5, #0]
 8009c64:	2000      	movs	r0, #0
 8009c66:	e021      	b.n	8009cac <__sflush_r+0xf4>
 8009c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c6c:	b21b      	sxth	r3, r3
 8009c6e:	e01a      	b.n	8009ca6 <__sflush_r+0xee>
 8009c70:	690f      	ldr	r7, [r1, #16]
 8009c72:	2f00      	cmp	r7, #0
 8009c74:	d0f6      	beq.n	8009c64 <__sflush_r+0xac>
 8009c76:	0793      	lsls	r3, r2, #30
 8009c78:	bf18      	it	ne
 8009c7a:	2300      	movne	r3, #0
 8009c7c:	680e      	ldr	r6, [r1, #0]
 8009c7e:	bf08      	it	eq
 8009c80:	694b      	ldreq	r3, [r1, #20]
 8009c82:	1bf6      	subs	r6, r6, r7
 8009c84:	600f      	str	r7, [r1, #0]
 8009c86:	608b      	str	r3, [r1, #8]
 8009c88:	2e00      	cmp	r6, #0
 8009c8a:	ddeb      	ble.n	8009c64 <__sflush_r+0xac>
 8009c8c:	4633      	mov	r3, r6
 8009c8e:	463a      	mov	r2, r7
 8009c90:	4628      	mov	r0, r5
 8009c92:	6a21      	ldr	r1, [r4, #32]
 8009c94:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009c98:	47e0      	blx	ip
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	dc07      	bgt.n	8009cae <__sflush_r+0xf6>
 8009c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cae:	4407      	add	r7, r0
 8009cb0:	1a36      	subs	r6, r6, r0
 8009cb2:	e7e9      	b.n	8009c88 <__sflush_r+0xd0>
 8009cb4:	20400001 	.word	0x20400001

08009cb8 <_fflush_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	690b      	ldr	r3, [r1, #16]
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	b913      	cbnz	r3, 8009cc8 <_fflush_r+0x10>
 8009cc2:	2500      	movs	r5, #0
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	b118      	cbz	r0, 8009cd2 <_fflush_r+0x1a>
 8009cca:	6a03      	ldr	r3, [r0, #32]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <_fflush_r+0x1a>
 8009cce:	f7fe fa0f 	bl	80080f0 <__sinit>
 8009cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f3      	beq.n	8009cc2 <_fflush_r+0xa>
 8009cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cdc:	07d0      	lsls	r0, r2, #31
 8009cde:	d404      	bmi.n	8009cea <_fflush_r+0x32>
 8009ce0:	0599      	lsls	r1, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_fflush_r+0x32>
 8009ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ce6:	f7fe fb72 	bl	80083ce <__retarget_lock_acquire_recursive>
 8009cea:	4628      	mov	r0, r5
 8009cec:	4621      	mov	r1, r4
 8009cee:	f7ff ff63 	bl	8009bb8 <__sflush_r>
 8009cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	07da      	lsls	r2, r3, #31
 8009cf8:	d4e4      	bmi.n	8009cc4 <_fflush_r+0xc>
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	059b      	lsls	r3, r3, #22
 8009cfe:	d4e1      	bmi.n	8009cc4 <_fflush_r+0xc>
 8009d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d02:	f7fe fb65 	bl	80083d0 <__retarget_lock_release_recursive>
 8009d06:	e7dd      	b.n	8009cc4 <_fflush_r+0xc>

08009d08 <memmove>:
 8009d08:	4288      	cmp	r0, r1
 8009d0a:	b510      	push	{r4, lr}
 8009d0c:	eb01 0402 	add.w	r4, r1, r2
 8009d10:	d902      	bls.n	8009d18 <memmove+0x10>
 8009d12:	4284      	cmp	r4, r0
 8009d14:	4623      	mov	r3, r4
 8009d16:	d807      	bhi.n	8009d28 <memmove+0x20>
 8009d18:	1e43      	subs	r3, r0, #1
 8009d1a:	42a1      	cmp	r1, r4
 8009d1c:	d008      	beq.n	8009d30 <memmove+0x28>
 8009d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d26:	e7f8      	b.n	8009d1a <memmove+0x12>
 8009d28:	4601      	mov	r1, r0
 8009d2a:	4402      	add	r2, r0
 8009d2c:	428a      	cmp	r2, r1
 8009d2e:	d100      	bne.n	8009d32 <memmove+0x2a>
 8009d30:	bd10      	pop	{r4, pc}
 8009d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d3a:	e7f7      	b.n	8009d2c <memmove+0x24>

08009d3c <_sbrk_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4d05      	ldr	r5, [pc, #20]	@ (8009d58 <_sbrk_r+0x1c>)
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	602b      	str	r3, [r5, #0]
 8009d48:	f7fa fa62 	bl	8004210 <_sbrk>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_sbrk_r+0x1a>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_sbrk_r+0x1a>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	20004978 	.word	0x20004978

08009d5c <memchr>:
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	b2c9      	uxtb	r1, r1
 8009d62:	4402      	add	r2, r0
 8009d64:	4293      	cmp	r3, r2
 8009d66:	4618      	mov	r0, r3
 8009d68:	d101      	bne.n	8009d6e <memchr+0x12>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e003      	b.n	8009d76 <memchr+0x1a>
 8009d6e:	7804      	ldrb	r4, [r0, #0]
 8009d70:	3301      	adds	r3, #1
 8009d72:	428c      	cmp	r4, r1
 8009d74:	d1f6      	bne.n	8009d64 <memchr+0x8>
 8009d76:	bd10      	pop	{r4, pc}

08009d78 <__assert_func>:
 8009d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <__assert_func+0x2c>)
 8009d80:	4605      	mov	r5, r0
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68d8      	ldr	r0, [r3, #12]
 8009d86:	b14c      	cbz	r4, 8009d9c <__assert_func+0x24>
 8009d88:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <__assert_func+0x30>)
 8009d8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d8e:	9100      	str	r1, [sp, #0]
 8009d90:	462b      	mov	r3, r5
 8009d92:	4906      	ldr	r1, [pc, #24]	@ (8009dac <__assert_func+0x34>)
 8009d94:	f000 f858 	bl	8009e48 <fiprintf>
 8009d98:	f000 f868 	bl	8009e6c <abort>
 8009d9c:	4b04      	ldr	r3, [pc, #16]	@ (8009db0 <__assert_func+0x38>)
 8009d9e:	461c      	mov	r4, r3
 8009da0:	e7f3      	b.n	8009d8a <__assert_func+0x12>
 8009da2:	bf00      	nop
 8009da4:	20000304 	.word	0x20000304
 8009da8:	0800d29b 	.word	0x0800d29b
 8009dac:	0800d2a8 	.word	0x0800d2a8
 8009db0:	0800cee1 	.word	0x0800cee1

08009db4 <_calloc_r>:
 8009db4:	b570      	push	{r4, r5, r6, lr}
 8009db6:	fba1 5402 	umull	r5, r4, r1, r2
 8009dba:	b934      	cbnz	r4, 8009dca <_calloc_r+0x16>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	f7fe fec9 	bl	8008b54 <_malloc_r>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	b928      	cbnz	r0, 8009dd2 <_calloc_r+0x1e>
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	220c      	movs	r2, #12
 8009dcc:	2600      	movs	r6, #0
 8009dce:	6002      	str	r2, [r0, #0]
 8009dd0:	e7f9      	b.n	8009dc6 <_calloc_r+0x12>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	f7fe fa5c 	bl	8008292 <memset>
 8009dda:	e7f4      	b.n	8009dc6 <_calloc_r+0x12>

08009ddc <malloc>:
 8009ddc:	4b02      	ldr	r3, [pc, #8]	@ (8009de8 <malloc+0xc>)
 8009dde:	4601      	mov	r1, r0
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	f7fe beb7 	b.w	8008b54 <_malloc_r>
 8009de6:	bf00      	nop
 8009de8:	20000304 	.word	0x20000304

08009dec <_realloc_r>:
 8009dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	4607      	mov	r7, r0
 8009df2:	4614      	mov	r4, r2
 8009df4:	460d      	mov	r5, r1
 8009df6:	b921      	cbnz	r1, 8009e02 <_realloc_r+0x16>
 8009df8:	4611      	mov	r1, r2
 8009dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfe:	f7fe bea9 	b.w	8008b54 <_malloc_r>
 8009e02:	b92a      	cbnz	r2, 8009e10 <_realloc_r+0x24>
 8009e04:	f7fe fb02 	bl	800840c <_free_r>
 8009e08:	4625      	mov	r5, r4
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e10:	f000 f833 	bl	8009e7a <_malloc_usable_size_r>
 8009e14:	4284      	cmp	r4, r0
 8009e16:	4606      	mov	r6, r0
 8009e18:	d802      	bhi.n	8009e20 <_realloc_r+0x34>
 8009e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e1e:	d8f4      	bhi.n	8009e0a <_realloc_r+0x1e>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7fe fe96 	bl	8008b54 <_malloc_r>
 8009e28:	4680      	mov	r8, r0
 8009e2a:	b908      	cbnz	r0, 8009e30 <_realloc_r+0x44>
 8009e2c:	4645      	mov	r5, r8
 8009e2e:	e7ec      	b.n	8009e0a <_realloc_r+0x1e>
 8009e30:	42b4      	cmp	r4, r6
 8009e32:	4622      	mov	r2, r4
 8009e34:	4629      	mov	r1, r5
 8009e36:	bf28      	it	cs
 8009e38:	4632      	movcs	r2, r6
 8009e3a:	f7fe fad2 	bl	80083e2 <memcpy>
 8009e3e:	4629      	mov	r1, r5
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7fe fae3 	bl	800840c <_free_r>
 8009e46:	e7f1      	b.n	8009e2c <_realloc_r+0x40>

08009e48 <fiprintf>:
 8009e48:	b40e      	push	{r1, r2, r3}
 8009e4a:	b503      	push	{r0, r1, lr}
 8009e4c:	4601      	mov	r1, r0
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	4805      	ldr	r0, [pc, #20]	@ (8009e68 <fiprintf+0x20>)
 8009e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e56:	6800      	ldr	r0, [r0, #0]
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	f000 f83d 	bl	8009ed8 <_vfiprintf_r>
 8009e5e:	b002      	add	sp, #8
 8009e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e64:	b003      	add	sp, #12
 8009e66:	4770      	bx	lr
 8009e68:	20000304 	.word	0x20000304

08009e6c <abort>:
 8009e6c:	2006      	movs	r0, #6
 8009e6e:	b508      	push	{r3, lr}
 8009e70:	f000 fa06 	bl	800a280 <raise>
 8009e74:	2001      	movs	r0, #1
 8009e76:	f7fa f99c 	bl	80041b2 <_exit>

08009e7a <_malloc_usable_size_r>:
 8009e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7e:	1f18      	subs	r0, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	bfbc      	itt	lt
 8009e84:	580b      	ldrlt	r3, [r1, r0]
 8009e86:	18c0      	addlt	r0, r0, r3
 8009e88:	4770      	bx	lr

08009e8a <__sfputc_r>:
 8009e8a:	6893      	ldr	r3, [r2, #8]
 8009e8c:	b410      	push	{r4}
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	6093      	str	r3, [r2, #8]
 8009e94:	da07      	bge.n	8009ea6 <__sfputc_r+0x1c>
 8009e96:	6994      	ldr	r4, [r2, #24]
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	db01      	blt.n	8009ea0 <__sfputc_r+0x16>
 8009e9c:	290a      	cmp	r1, #10
 8009e9e:	d102      	bne.n	8009ea6 <__sfputc_r+0x1c>
 8009ea0:	bc10      	pop	{r4}
 8009ea2:	f000 b931 	b.w	800a108 <__swbuf_r>
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	1c58      	adds	r0, r3, #1
 8009eaa:	6010      	str	r0, [r2, #0]
 8009eac:	7019      	strb	r1, [r3, #0]
 8009eae:	4608      	mov	r0, r1
 8009eb0:	bc10      	pop	{r4}
 8009eb2:	4770      	bx	lr

08009eb4 <__sfputs_r>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460f      	mov	r7, r1
 8009eba:	4614      	mov	r4, r2
 8009ebc:	18d5      	adds	r5, r2, r3
 8009ebe:	42ac      	cmp	r4, r5
 8009ec0:	d101      	bne.n	8009ec6 <__sfputs_r+0x12>
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e007      	b.n	8009ed6 <__sfputs_r+0x22>
 8009ec6:	463a      	mov	r2, r7
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ece:	f7ff ffdc 	bl	8009e8a <__sfputc_r>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	d1f3      	bne.n	8009ebe <__sfputs_r+0xa>
 8009ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ed8 <_vfiprintf_r>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	460d      	mov	r5, r1
 8009ede:	4614      	mov	r4, r2
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	b09d      	sub	sp, #116	@ 0x74
 8009ee6:	b118      	cbz	r0, 8009ef0 <_vfiprintf_r+0x18>
 8009ee8:	6a03      	ldr	r3, [r0, #32]
 8009eea:	b90b      	cbnz	r3, 8009ef0 <_vfiprintf_r+0x18>
 8009eec:	f7fe f900 	bl	80080f0 <__sinit>
 8009ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ef2:	07d9      	lsls	r1, r3, #31
 8009ef4:	d405      	bmi.n	8009f02 <_vfiprintf_r+0x2a>
 8009ef6:	89ab      	ldrh	r3, [r5, #12]
 8009ef8:	059a      	lsls	r2, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_vfiprintf_r+0x2a>
 8009efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009efe:	f7fe fa66 	bl	80083ce <__retarget_lock_acquire_recursive>
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	071b      	lsls	r3, r3, #28
 8009f06:	d501      	bpl.n	8009f0c <_vfiprintf_r+0x34>
 8009f08:	692b      	ldr	r3, [r5, #16]
 8009f0a:	b99b      	cbnz	r3, 8009f34 <_vfiprintf_r+0x5c>
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f938 	bl	800a184 <__swsetup_r>
 8009f14:	b170      	cbz	r0, 8009f34 <_vfiprintf_r+0x5c>
 8009f16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f18:	07dc      	lsls	r4, r3, #31
 8009f1a:	d504      	bpl.n	8009f26 <_vfiprintf_r+0x4e>
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	b01d      	add	sp, #116	@ 0x74
 8009f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	0598      	lsls	r0, r3, #22
 8009f2a:	d4f7      	bmi.n	8009f1c <_vfiprintf_r+0x44>
 8009f2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f2e:	f7fe fa4f 	bl	80083d0 <__retarget_lock_release_recursive>
 8009f32:	e7f3      	b.n	8009f1c <_vfiprintf_r+0x44>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f38:	2320      	movs	r3, #32
 8009f3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f3e:	2330      	movs	r3, #48	@ 0x30
 8009f40:	f04f 0901 	mov.w	r9, #1
 8009f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a0f4 <_vfiprintf_r+0x21c>
 8009f4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f50:	4623      	mov	r3, r4
 8009f52:	469a      	mov	sl, r3
 8009f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f58:	b10a      	cbz	r2, 8009f5e <_vfiprintf_r+0x86>
 8009f5a:	2a25      	cmp	r2, #37	@ 0x25
 8009f5c:	d1f9      	bne.n	8009f52 <_vfiprintf_r+0x7a>
 8009f5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f62:	d00b      	beq.n	8009f7c <_vfiprintf_r+0xa4>
 8009f64:	465b      	mov	r3, fp
 8009f66:	4622      	mov	r2, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ffa2 	bl	8009eb4 <__sfputs_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	f000 80a7 	beq.w	800a0c4 <_vfiprintf_r+0x1ec>
 8009f76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f78:	445a      	add	r2, fp
 8009f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 809f 	beq.w	800a0c4 <_vfiprintf_r+0x1ec>
 8009f86:	2300      	movs	r3, #0
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f90:	f10a 0a01 	add.w	sl, sl, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	9307      	str	r3, [sp, #28]
 8009f98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f9e:	4654      	mov	r4, sl
 8009fa0:	2205      	movs	r2, #5
 8009fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa6:	4853      	ldr	r0, [pc, #332]	@ (800a0f4 <_vfiprintf_r+0x21c>)
 8009fa8:	f7ff fed8 	bl	8009d5c <memchr>
 8009fac:	9a04      	ldr	r2, [sp, #16]
 8009fae:	b9d8      	cbnz	r0, 8009fe8 <_vfiprintf_r+0x110>
 8009fb0:	06d1      	lsls	r1, r2, #27
 8009fb2:	bf44      	itt	mi
 8009fb4:	2320      	movmi	r3, #32
 8009fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fba:	0713      	lsls	r3, r2, #28
 8009fbc:	bf44      	itt	mi
 8009fbe:	232b      	movmi	r3, #43	@ 0x2b
 8009fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fca:	d015      	beq.n	8009ff8 <_vfiprintf_r+0x120>
 8009fcc:	4654      	mov	r4, sl
 8009fce:	2000      	movs	r0, #0
 8009fd0:	f04f 0c0a 	mov.w	ip, #10
 8009fd4:	9a07      	ldr	r2, [sp, #28]
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fdc:	3b30      	subs	r3, #48	@ 0x30
 8009fde:	2b09      	cmp	r3, #9
 8009fe0:	d94b      	bls.n	800a07a <_vfiprintf_r+0x1a2>
 8009fe2:	b1b0      	cbz	r0, 800a012 <_vfiprintf_r+0x13a>
 8009fe4:	9207      	str	r2, [sp, #28]
 8009fe6:	e014      	b.n	800a012 <_vfiprintf_r+0x13a>
 8009fe8:	eba0 0308 	sub.w	r3, r0, r8
 8009fec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	46a2      	mov	sl, r4
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	e7d2      	b.n	8009f9e <_vfiprintf_r+0xc6>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	1d19      	adds	r1, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	9103      	str	r1, [sp, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	bfbb      	ittet	lt
 800a004:	425b      	neglt	r3, r3
 800a006:	f042 0202 	orrlt.w	r2, r2, #2
 800a00a:	9307      	strge	r3, [sp, #28]
 800a00c:	9307      	strlt	r3, [sp, #28]
 800a00e:	bfb8      	it	lt
 800a010:	9204      	strlt	r2, [sp, #16]
 800a012:	7823      	ldrb	r3, [r4, #0]
 800a014:	2b2e      	cmp	r3, #46	@ 0x2e
 800a016:	d10a      	bne.n	800a02e <_vfiprintf_r+0x156>
 800a018:	7863      	ldrb	r3, [r4, #1]
 800a01a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a01c:	d132      	bne.n	800a084 <_vfiprintf_r+0x1ac>
 800a01e:	9b03      	ldr	r3, [sp, #12]
 800a020:	3402      	adds	r4, #2
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9203      	str	r2, [sp, #12]
 800a028:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a0f8 <_vfiprintf_r+0x220>
 800a032:	2203      	movs	r2, #3
 800a034:	4650      	mov	r0, sl
 800a036:	7821      	ldrb	r1, [r4, #0]
 800a038:	f7ff fe90 	bl	8009d5c <memchr>
 800a03c:	b138      	cbz	r0, 800a04e <_vfiprintf_r+0x176>
 800a03e:	2240      	movs	r2, #64	@ 0x40
 800a040:	9b04      	ldr	r3, [sp, #16]
 800a042:	eba0 000a 	sub.w	r0, r0, sl
 800a046:	4082      	lsls	r2, r0
 800a048:	4313      	orrs	r3, r2
 800a04a:	3401      	adds	r4, #1
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a052:	2206      	movs	r2, #6
 800a054:	4829      	ldr	r0, [pc, #164]	@ (800a0fc <_vfiprintf_r+0x224>)
 800a056:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a05a:	f7ff fe7f 	bl	8009d5c <memchr>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d03f      	beq.n	800a0e2 <_vfiprintf_r+0x20a>
 800a062:	4b27      	ldr	r3, [pc, #156]	@ (800a100 <_vfiprintf_r+0x228>)
 800a064:	bb1b      	cbnz	r3, 800a0ae <_vfiprintf_r+0x1d6>
 800a066:	9b03      	ldr	r3, [sp, #12]
 800a068:	3307      	adds	r3, #7
 800a06a:	f023 0307 	bic.w	r3, r3, #7
 800a06e:	3308      	adds	r3, #8
 800a070:	9303      	str	r3, [sp, #12]
 800a072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a074:	443b      	add	r3, r7
 800a076:	9309      	str	r3, [sp, #36]	@ 0x24
 800a078:	e76a      	b.n	8009f50 <_vfiprintf_r+0x78>
 800a07a:	460c      	mov	r4, r1
 800a07c:	2001      	movs	r0, #1
 800a07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a082:	e7a8      	b.n	8009fd6 <_vfiprintf_r+0xfe>
 800a084:	2300      	movs	r3, #0
 800a086:	f04f 0c0a 	mov.w	ip, #10
 800a08a:	4619      	mov	r1, r3
 800a08c:	3401      	adds	r4, #1
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	4620      	mov	r0, r4
 800a092:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a096:	3a30      	subs	r2, #48	@ 0x30
 800a098:	2a09      	cmp	r2, #9
 800a09a:	d903      	bls.n	800a0a4 <_vfiprintf_r+0x1cc>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0c6      	beq.n	800a02e <_vfiprintf_r+0x156>
 800a0a0:	9105      	str	r1, [sp, #20]
 800a0a2:	e7c4      	b.n	800a02e <_vfiprintf_r+0x156>
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ac:	e7f0      	b.n	800a090 <_vfiprintf_r+0x1b8>
 800a0ae:	ab03      	add	r3, sp, #12
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4b13      	ldr	r3, [pc, #76]	@ (800a104 <_vfiprintf_r+0x22c>)
 800a0b8:	a904      	add	r1, sp, #16
 800a0ba:	f3af 8000 	nop.w
 800a0be:	4607      	mov	r7, r0
 800a0c0:	1c78      	adds	r0, r7, #1
 800a0c2:	d1d6      	bne.n	800a072 <_vfiprintf_r+0x19a>
 800a0c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0c6:	07d9      	lsls	r1, r3, #31
 800a0c8:	d405      	bmi.n	800a0d6 <_vfiprintf_r+0x1fe>
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	059a      	lsls	r2, r3, #22
 800a0ce:	d402      	bmi.n	800a0d6 <_vfiprintf_r+0x1fe>
 800a0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0d2:	f7fe f97d 	bl	80083d0 <__retarget_lock_release_recursive>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	065b      	lsls	r3, r3, #25
 800a0da:	f53f af1f 	bmi.w	8009f1c <_vfiprintf_r+0x44>
 800a0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0e0:	e71e      	b.n	8009f20 <_vfiprintf_r+0x48>
 800a0e2:	ab03      	add	r3, sp, #12
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	4b06      	ldr	r3, [pc, #24]	@ (800a104 <_vfiprintf_r+0x22c>)
 800a0ec:	a904      	add	r1, sp, #16
 800a0ee:	f7ff fc45 	bl	800997c <_printf_i>
 800a0f2:	e7e4      	b.n	800a0be <_vfiprintf_r+0x1e6>
 800a0f4:	0800d268 	.word	0x0800d268
 800a0f8:	0800d26e 	.word	0x0800d26e
 800a0fc:	0800d272 	.word	0x0800d272
 800a100:	00000000 	.word	0x00000000
 800a104:	08009eb5 	.word	0x08009eb5

0800a108 <__swbuf_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	460e      	mov	r6, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	4605      	mov	r5, r0
 800a110:	b118      	cbz	r0, 800a11a <__swbuf_r+0x12>
 800a112:	6a03      	ldr	r3, [r0, #32]
 800a114:	b90b      	cbnz	r3, 800a11a <__swbuf_r+0x12>
 800a116:	f7fd ffeb 	bl	80080f0 <__sinit>
 800a11a:	69a3      	ldr	r3, [r4, #24]
 800a11c:	60a3      	str	r3, [r4, #8]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	071a      	lsls	r2, r3, #28
 800a122:	d501      	bpl.n	800a128 <__swbuf_r+0x20>
 800a124:	6923      	ldr	r3, [r4, #16]
 800a126:	b943      	cbnz	r3, 800a13a <__swbuf_r+0x32>
 800a128:	4621      	mov	r1, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	f000 f82a 	bl	800a184 <__swsetup_r>
 800a130:	b118      	cbz	r0, 800a13a <__swbuf_r+0x32>
 800a132:	f04f 37ff 	mov.w	r7, #4294967295
 800a136:	4638      	mov	r0, r7
 800a138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	b2f6      	uxtb	r6, r6
 800a140:	1a98      	subs	r0, r3, r2
 800a142:	6963      	ldr	r3, [r4, #20]
 800a144:	4637      	mov	r7, r6
 800a146:	4283      	cmp	r3, r0
 800a148:	dc05      	bgt.n	800a156 <__swbuf_r+0x4e>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7ff fdb3 	bl	8009cb8 <_fflush_r>
 800a152:	2800      	cmp	r0, #0
 800a154:	d1ed      	bne.n	800a132 <__swbuf_r+0x2a>
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	3b01      	subs	r3, #1
 800a15a:	60a3      	str	r3, [r4, #8]
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	6022      	str	r2, [r4, #0]
 800a162:	701e      	strb	r6, [r3, #0]
 800a164:	6962      	ldr	r2, [r4, #20]
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	429a      	cmp	r2, r3
 800a16a:	d004      	beq.n	800a176 <__swbuf_r+0x6e>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	07db      	lsls	r3, r3, #31
 800a170:	d5e1      	bpl.n	800a136 <__swbuf_r+0x2e>
 800a172:	2e0a      	cmp	r6, #10
 800a174:	d1df      	bne.n	800a136 <__swbuf_r+0x2e>
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fd9d 	bl	8009cb8 <_fflush_r>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0d9      	beq.n	800a136 <__swbuf_r+0x2e>
 800a182:	e7d6      	b.n	800a132 <__swbuf_r+0x2a>

0800a184 <__swsetup_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4b29      	ldr	r3, [pc, #164]	@ (800a22c <__swsetup_r+0xa8>)
 800a188:	4605      	mov	r5, r0
 800a18a:	6818      	ldr	r0, [r3, #0]
 800a18c:	460c      	mov	r4, r1
 800a18e:	b118      	cbz	r0, 800a198 <__swsetup_r+0x14>
 800a190:	6a03      	ldr	r3, [r0, #32]
 800a192:	b90b      	cbnz	r3, 800a198 <__swsetup_r+0x14>
 800a194:	f7fd ffac 	bl	80080f0 <__sinit>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	0719      	lsls	r1, r3, #28
 800a19e:	d422      	bmi.n	800a1e6 <__swsetup_r+0x62>
 800a1a0:	06da      	lsls	r2, r3, #27
 800a1a2:	d407      	bmi.n	800a1b4 <__swsetup_r+0x30>
 800a1a4:	2209      	movs	r2, #9
 800a1a6:	602a      	str	r2, [r5, #0]
 800a1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	e033      	b.n	800a21c <__swsetup_r+0x98>
 800a1b4:	0758      	lsls	r0, r3, #29
 800a1b6:	d512      	bpl.n	800a1de <__swsetup_r+0x5a>
 800a1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1ba:	b141      	cbz	r1, 800a1ce <__swsetup_r+0x4a>
 800a1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <__swsetup_r+0x46>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f7fe f921 	bl	800840c <_free_r>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6063      	str	r3, [r4, #4]
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f043 0308 	orr.w	r3, r3, #8
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	b94b      	cbnz	r3, 800a1fe <__swsetup_r+0x7a>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1f4:	d003      	beq.n	800a1fe <__swsetup_r+0x7a>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 f882 	bl	800a302 <__smakebuf_r>
 800a1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a202:	f013 0201 	ands.w	r2, r3, #1
 800a206:	d00a      	beq.n	800a21e <__swsetup_r+0x9a>
 800a208:	2200      	movs	r2, #0
 800a20a:	60a2      	str	r2, [r4, #8]
 800a20c:	6962      	ldr	r2, [r4, #20]
 800a20e:	4252      	negs	r2, r2
 800a210:	61a2      	str	r2, [r4, #24]
 800a212:	6922      	ldr	r2, [r4, #16]
 800a214:	b942      	cbnz	r2, 800a228 <__swsetup_r+0xa4>
 800a216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a21a:	d1c5      	bne.n	800a1a8 <__swsetup_r+0x24>
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	0799      	lsls	r1, r3, #30
 800a220:	bf58      	it	pl
 800a222:	6962      	ldrpl	r2, [r4, #20]
 800a224:	60a2      	str	r2, [r4, #8]
 800a226:	e7f4      	b.n	800a212 <__swsetup_r+0x8e>
 800a228:	2000      	movs	r0, #0
 800a22a:	e7f7      	b.n	800a21c <__swsetup_r+0x98>
 800a22c:	20000304 	.word	0x20000304

0800a230 <_raise_r>:
 800a230:	291f      	cmp	r1, #31
 800a232:	b538      	push	{r3, r4, r5, lr}
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	d904      	bls.n	800a244 <_raise_r+0x14>
 800a23a:	2316      	movs	r3, #22
 800a23c:	6003      	str	r3, [r0, #0]
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a246:	b112      	cbz	r2, 800a24e <_raise_r+0x1e>
 800a248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a24c:	b94b      	cbnz	r3, 800a262 <_raise_r+0x32>
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f830 	bl	800a2b4 <_getpid_r>
 800a254:	4622      	mov	r2, r4
 800a256:	4601      	mov	r1, r0
 800a258:	4628      	mov	r0, r5
 800a25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a25e:	f000 b817 	b.w	800a290 <_kill_r>
 800a262:	2b01      	cmp	r3, #1
 800a264:	d00a      	beq.n	800a27c <_raise_r+0x4c>
 800a266:	1c59      	adds	r1, r3, #1
 800a268:	d103      	bne.n	800a272 <_raise_r+0x42>
 800a26a:	2316      	movs	r3, #22
 800a26c:	6003      	str	r3, [r0, #0]
 800a26e:	2001      	movs	r0, #1
 800a270:	e7e7      	b.n	800a242 <_raise_r+0x12>
 800a272:	2100      	movs	r1, #0
 800a274:	4620      	mov	r0, r4
 800a276:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a27a:	4798      	blx	r3
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7e0      	b.n	800a242 <_raise_r+0x12>

0800a280 <raise>:
 800a280:	4b02      	ldr	r3, [pc, #8]	@ (800a28c <raise+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f7ff bfd3 	b.w	800a230 <_raise_r>
 800a28a:	bf00      	nop
 800a28c:	20000304 	.word	0x20000304

0800a290 <_kill_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	2300      	movs	r3, #0
 800a294:	4d06      	ldr	r5, [pc, #24]	@ (800a2b0 <_kill_r+0x20>)
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	4611      	mov	r1, r2
 800a29c:	602b      	str	r3, [r5, #0]
 800a29e:	f7f9 ff80 	bl	80041a2 <_kill>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	d102      	bne.n	800a2ac <_kill_r+0x1c>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	b103      	cbz	r3, 800a2ac <_kill_r+0x1c>
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	bd38      	pop	{r3, r4, r5, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20004978 	.word	0x20004978

0800a2b4 <_getpid_r>:
 800a2b4:	f7f9 bf73 	b.w	800419e <_getpid>

0800a2b8 <__swhatbuf_r>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c0:	4615      	mov	r5, r2
 800a2c2:	2900      	cmp	r1, #0
 800a2c4:	461e      	mov	r6, r3
 800a2c6:	b096      	sub	sp, #88	@ 0x58
 800a2c8:	da0c      	bge.n	800a2e4 <__swhatbuf_r+0x2c>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2d2:	bf14      	ite	ne
 800a2d4:	2340      	movne	r3, #64	@ 0x40
 800a2d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2da:	2000      	movs	r0, #0
 800a2dc:	6031      	str	r1, [r6, #0]
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	b016      	add	sp, #88	@ 0x58
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}
 800a2e4:	466a      	mov	r2, sp
 800a2e6:	f000 f849 	bl	800a37c <_fstat_r>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	dbed      	blt.n	800a2ca <__swhatbuf_r+0x12>
 800a2ee:	9901      	ldr	r1, [sp, #4]
 800a2f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2f8:	4259      	negs	r1, r3
 800a2fa:	4159      	adcs	r1, r3
 800a2fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a300:	e7eb      	b.n	800a2da <__swhatbuf_r+0x22>

0800a302 <__smakebuf_r>:
 800a302:	898b      	ldrh	r3, [r1, #12]
 800a304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a306:	079d      	lsls	r5, r3, #30
 800a308:	4606      	mov	r6, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	d507      	bpl.n	800a31e <__smakebuf_r+0x1c>
 800a30e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	2301      	movs	r3, #1
 800a318:	6163      	str	r3, [r4, #20]
 800a31a:	b003      	add	sp, #12
 800a31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a31e:	466a      	mov	r2, sp
 800a320:	ab01      	add	r3, sp, #4
 800a322:	f7ff ffc9 	bl	800a2b8 <__swhatbuf_r>
 800a326:	9f00      	ldr	r7, [sp, #0]
 800a328:	4605      	mov	r5, r0
 800a32a:	4639      	mov	r1, r7
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7fe fc11 	bl	8008b54 <_malloc_r>
 800a332:	b948      	cbnz	r0, 800a348 <__smakebuf_r+0x46>
 800a334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a338:	059a      	lsls	r2, r3, #22
 800a33a:	d4ee      	bmi.n	800a31a <__smakebuf_r+0x18>
 800a33c:	f023 0303 	bic.w	r3, r3, #3
 800a340:	f043 0302 	orr.w	r3, r3, #2
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	e7e2      	b.n	800a30e <__smakebuf_r+0xc>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	6020      	str	r0, [r4, #0]
 800a358:	b15b      	cbz	r3, 800a372 <__smakebuf_r+0x70>
 800a35a:	4630      	mov	r0, r6
 800a35c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a360:	f000 f81e 	bl	800a3a0 <_isatty_r>
 800a364:	b128      	cbz	r0, 800a372 <__smakebuf_r+0x70>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f023 0303 	bic.w	r3, r3, #3
 800a36c:	f043 0301 	orr.w	r3, r3, #1
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	431d      	orrs	r5, r3
 800a376:	81a5      	strh	r5, [r4, #12]
 800a378:	e7cf      	b.n	800a31a <__smakebuf_r+0x18>
	...

0800a37c <_fstat_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	2300      	movs	r3, #0
 800a380:	4d06      	ldr	r5, [pc, #24]	@ (800a39c <_fstat_r+0x20>)
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	4611      	mov	r1, r2
 800a388:	602b      	str	r3, [r5, #0]
 800a38a:	f7f9 ff37 	bl	80041fc <_fstat>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	d102      	bne.n	800a398 <_fstat_r+0x1c>
 800a392:	682b      	ldr	r3, [r5, #0]
 800a394:	b103      	cbz	r3, 800a398 <_fstat_r+0x1c>
 800a396:	6023      	str	r3, [r4, #0]
 800a398:	bd38      	pop	{r3, r4, r5, pc}
 800a39a:	bf00      	nop
 800a39c:	20004978 	.word	0x20004978

0800a3a0 <_isatty_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4d05      	ldr	r5, [pc, #20]	@ (800a3bc <_isatty_r+0x1c>)
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	f7f9 ff2b 	bl	8004206 <_isatty>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_isatty_r+0x1a>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_isatty_r+0x1a>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	20004978 	.word	0x20004978

0800a3c0 <atan2>:
 800a3c0:	f000 bbd2 	b.w	800ab68 <__ieee754_atan2>

0800a3c4 <sqrt>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	460f      	mov	r7, r1
 800a3ca:	f000 f8f7 	bl	800a5bc <__ieee754_sqrt>
 800a3ce:	4632      	mov	r2, r6
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f6 fb17 	bl	8000a0c <__aeabi_dcmpun>
 800a3de:	b990      	cbnz	r0, 800a406 <sqrt+0x42>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	4639      	mov	r1, r7
 800a3e8:	f7f6 fae8 	bl	80009bc <__aeabi_dcmplt>
 800a3ec:	b158      	cbz	r0, 800a406 <sqrt+0x42>
 800a3ee:	f7fd ffc3 	bl	8008378 <__errno>
 800a3f2:	2321      	movs	r3, #33	@ 0x21
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	6003      	str	r3, [r0, #0]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f7f6 f995 	bl	800072c <__aeabi_ddiv>
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a40c <cos>:
 800a40c:	b530      	push	{r4, r5, lr}
 800a40e:	4d20      	ldr	r5, [pc, #128]	@ (800a490 <cos+0x84>)
 800a410:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a414:	42ac      	cmp	r4, r5
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	b087      	sub	sp, #28
 800a41c:	d806      	bhi.n	800a42c <cos+0x20>
 800a41e:	2200      	movs	r2, #0
 800a420:	2300      	movs	r3, #0
 800a422:	b007      	add	sp, #28
 800a424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a428:	f000 ba26 	b.w	800a878 <__kernel_cos>
 800a42c:	4d19      	ldr	r5, [pc, #100]	@ (800a494 <cos+0x88>)
 800a42e:	42ac      	cmp	r4, r5
 800a430:	d903      	bls.n	800a43a <cos+0x2e>
 800a432:	f7f5 fe99 	bl	8000168 <__aeabi_dsub>
 800a436:	b007      	add	sp, #28
 800a438:	bd30      	pop	{r4, r5, pc}
 800a43a:	aa02      	add	r2, sp, #8
 800a43c:	f000 fc68 	bl	800ad10 <__ieee754_rem_pio2>
 800a440:	f000 0003 	and.w	r0, r0, #3
 800a444:	2801      	cmp	r0, #1
 800a446:	d009      	beq.n	800a45c <cos+0x50>
 800a448:	2802      	cmp	r0, #2
 800a44a:	d011      	beq.n	800a470 <cos+0x64>
 800a44c:	b9b8      	cbnz	r0, 800a47e <cos+0x72>
 800a44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a456:	f000 fa0f 	bl	800a878 <__kernel_cos>
 800a45a:	e7ec      	b.n	800a436 <cos+0x2a>
 800a45c:	9000      	str	r0, [sp, #0]
 800a45e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a466:	f000 fac7 	bl	800a9f8 <__kernel_sin>
 800a46a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a46e:	e7e2      	b.n	800a436 <cos+0x2a>
 800a470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a478:	f000 f9fe 	bl	800a878 <__kernel_cos>
 800a47c:	e7f5      	b.n	800a46a <cos+0x5e>
 800a47e:	2301      	movs	r3, #1
 800a480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48a:	f000 fab5 	bl	800a9f8 <__kernel_sin>
 800a48e:	e7d2      	b.n	800a436 <cos+0x2a>
 800a490:	3fe921fb 	.word	0x3fe921fb
 800a494:	7fefffff 	.word	0x7fefffff

0800a498 <sin>:
 800a498:	b530      	push	{r4, r5, lr}
 800a49a:	4d20      	ldr	r5, [pc, #128]	@ (800a51c <sin+0x84>)
 800a49c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a4a0:	42ac      	cmp	r4, r5
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	d806      	bhi.n	800a4b8 <sin+0x20>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f000 faa1 	bl	800a9f8 <__kernel_sin>
 800a4b6:	e004      	b.n	800a4c2 <sin+0x2a>
 800a4b8:	4d19      	ldr	r5, [pc, #100]	@ (800a520 <sin+0x88>)
 800a4ba:	42ac      	cmp	r4, r5
 800a4bc:	d903      	bls.n	800a4c6 <sin+0x2e>
 800a4be:	f7f5 fe53 	bl	8000168 <__aeabi_dsub>
 800a4c2:	b007      	add	sp, #28
 800a4c4:	bd30      	pop	{r4, r5, pc}
 800a4c6:	aa02      	add	r2, sp, #8
 800a4c8:	f000 fc22 	bl	800ad10 <__ieee754_rem_pio2>
 800a4cc:	f000 0003 	and.w	r0, r0, #3
 800a4d0:	2801      	cmp	r0, #1
 800a4d2:	d009      	beq.n	800a4e8 <sin+0x50>
 800a4d4:	2802      	cmp	r0, #2
 800a4d6:	d00e      	beq.n	800a4f6 <sin+0x5e>
 800a4d8:	b9c0      	cbnz	r0, 800a50c <sin+0x74>
 800a4da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4de:	2301      	movs	r3, #1
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e6:	e7e4      	b.n	800a4b2 <sin+0x1a>
 800a4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f0:	f000 f9c2 	bl	800a878 <__kernel_cos>
 800a4f4:	e7e5      	b.n	800a4c2 <sin+0x2a>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a502:	f000 fa79 	bl	800a9f8 <__kernel_sin>
 800a506:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a50a:	e7da      	b.n	800a4c2 <sin+0x2a>
 800a50c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a514:	f000 f9b0 	bl	800a878 <__kernel_cos>
 800a518:	e7f5      	b.n	800a506 <sin+0x6e>
 800a51a:	bf00      	nop
 800a51c:	3fe921fb 	.word	0x3fe921fb
 800a520:	7fefffff 	.word	0x7fefffff

0800a524 <atan2f>:
 800a524:	f000 bf80 	b.w	800b428 <__ieee754_atan2f>

0800a528 <sqrtf>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4605      	mov	r5, r0
 800a52c:	f000 f918 	bl	800a760 <__ieee754_sqrtf>
 800a530:	4629      	mov	r1, r5
 800a532:	4604      	mov	r4, r0
 800a534:	4628      	mov	r0, r5
 800a536:	f7f6 fdeb 	bl	8001110 <__aeabi_fcmpun>
 800a53a:	b968      	cbnz	r0, 800a558 <sqrtf+0x30>
 800a53c:	2100      	movs	r1, #0
 800a53e:	4628      	mov	r0, r5
 800a540:	f7f6 fdbe 	bl	80010c0 <__aeabi_fcmplt>
 800a544:	b140      	cbz	r0, 800a558 <sqrtf+0x30>
 800a546:	f7fd ff17 	bl	8008378 <__errno>
 800a54a:	2321      	movs	r3, #33	@ 0x21
 800a54c:	2100      	movs	r1, #0
 800a54e:	6003      	str	r3, [r0, #0]
 800a550:	4608      	mov	r0, r1
 800a552:	f7f6 fccb 	bl	8000eec <__aeabi_fdiv>
 800a556:	4604      	mov	r4, r0
 800a558:	4620      	mov	r0, r4
 800a55a:	bd38      	pop	{r3, r4, r5, pc}

0800a55c <fminf>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	f000 f811 	bl	800a588 <__fpclassifyf>
 800a566:	b910      	cbnz	r0, 800a56e <fminf+0x12>
 800a568:	462c      	mov	r4, r5
 800a56a:	4620      	mov	r0, r4
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	4628      	mov	r0, r5
 800a570:	f000 f80a 	bl	800a588 <__fpclassifyf>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0f8      	beq.n	800a56a <fminf+0xe>
 800a578:	4629      	mov	r1, r5
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7f6 fda0 	bl	80010c0 <__aeabi_fcmplt>
 800a580:	2800      	cmp	r0, #0
 800a582:	d0f1      	beq.n	800a568 <fminf+0xc>
 800a584:	e7f1      	b.n	800a56a <fminf+0xe>
	...

0800a588 <__fpclassifyf>:
 800a588:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800a58c:	d00d      	beq.n	800a5aa <__fpclassifyf+0x22>
 800a58e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a592:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a596:	d30a      	bcc.n	800a5ae <__fpclassifyf+0x26>
 800a598:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <__fpclassifyf+0x30>)
 800a59a:	1e42      	subs	r2, r0, #1
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d908      	bls.n	800a5b2 <__fpclassifyf+0x2a>
 800a5a0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a5a4:	4258      	negs	r0, r3
 800a5a6:	4158      	adcs	r0, r3
 800a5a8:	4770      	bx	lr
 800a5aa:	2002      	movs	r0, #2
 800a5ac:	4770      	bx	lr
 800a5ae:	2004      	movs	r0, #4
 800a5b0:	4770      	bx	lr
 800a5b2:	2003      	movs	r0, #3
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	007ffffe 	.word	0x007ffffe

0800a5bc <__ieee754_sqrt>:
 800a5bc:	4a65      	ldr	r2, [pc, #404]	@ (800a754 <__ieee754_sqrt+0x198>)
 800a5be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c2:	438a      	bics	r2, r1
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	d10e      	bne.n	800a5ec <__ieee754_sqrt+0x30>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	f7f5 ff82 	bl	80004d8 <__aeabi_dmul>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ec:	2900      	cmp	r1, #0
 800a5ee:	dc0c      	bgt.n	800a60a <__ieee754_sqrt+0x4e>
 800a5f0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a5f4:	4302      	orrs	r2, r0
 800a5f6:	d0f5      	beq.n	800a5e4 <__ieee754_sqrt+0x28>
 800a5f8:	b189      	cbz	r1, 800a61e <__ieee754_sqrt+0x62>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f7f5 fdb4 	bl	8000168 <__aeabi_dsub>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	f7f6 f892 	bl	800072c <__aeabi_ddiv>
 800a608:	e7ea      	b.n	800a5e0 <__ieee754_sqrt+0x24>
 800a60a:	150a      	asrs	r2, r1, #20
 800a60c:	d115      	bne.n	800a63a <__ieee754_sqrt+0x7e>
 800a60e:	2100      	movs	r1, #0
 800a610:	e009      	b.n	800a626 <__ieee754_sqrt+0x6a>
 800a612:	0ae3      	lsrs	r3, r4, #11
 800a614:	3a15      	subs	r2, #21
 800a616:	0564      	lsls	r4, r4, #21
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d0fa      	beq.n	800a612 <__ieee754_sqrt+0x56>
 800a61c:	e7f7      	b.n	800a60e <__ieee754_sqrt+0x52>
 800a61e:	460a      	mov	r2, r1
 800a620:	e7fa      	b.n	800a618 <__ieee754_sqrt+0x5c>
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	3101      	adds	r1, #1
 800a626:	02d8      	lsls	r0, r3, #11
 800a628:	d5fb      	bpl.n	800a622 <__ieee754_sqrt+0x66>
 800a62a:	1e48      	subs	r0, r1, #1
 800a62c:	1a12      	subs	r2, r2, r0
 800a62e:	f1c1 0020 	rsb	r0, r1, #32
 800a632:	fa24 f000 	lsr.w	r0, r4, r0
 800a636:	4303      	orrs	r3, r0
 800a638:	408c      	lsls	r4, r1
 800a63a:	2700      	movs	r7, #0
 800a63c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800a640:	2116      	movs	r1, #22
 800a642:	07d2      	lsls	r2, r2, #31
 800a644:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a648:	463a      	mov	r2, r7
 800a64a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a64e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a652:	bf5c      	itt	pl
 800a654:	005b      	lslpl	r3, r3, #1
 800a656:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a65a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a65e:	bf58      	it	pl
 800a660:	0064      	lslpl	r4, r4, #1
 800a662:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a666:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a66a:	0064      	lsls	r4, r4, #1
 800a66c:	1815      	adds	r5, r2, r0
 800a66e:	429d      	cmp	r5, r3
 800a670:	bfde      	ittt	le
 800a672:	182a      	addle	r2, r5, r0
 800a674:	1b5b      	suble	r3, r3, r5
 800a676:	183f      	addle	r7, r7, r0
 800a678:	0fe5      	lsrs	r5, r4, #31
 800a67a:	3901      	subs	r1, #1
 800a67c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a680:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a684:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a688:	d1f0      	bne.n	800a66c <__ieee754_sqrt+0xb0>
 800a68a:	460d      	mov	r5, r1
 800a68c:	2620      	movs	r6, #32
 800a68e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a692:	4293      	cmp	r3, r2
 800a694:	eb00 0c01 	add.w	ip, r0, r1
 800a698:	dc02      	bgt.n	800a6a0 <__ieee754_sqrt+0xe4>
 800a69a:	d113      	bne.n	800a6c4 <__ieee754_sqrt+0x108>
 800a69c:	45a4      	cmp	ip, r4
 800a69e:	d811      	bhi.n	800a6c4 <__ieee754_sqrt+0x108>
 800a6a0:	f1bc 0f00 	cmp.w	ip, #0
 800a6a4:	eb0c 0100 	add.w	r1, ip, r0
 800a6a8:	da3e      	bge.n	800a728 <__ieee754_sqrt+0x16c>
 800a6aa:	2900      	cmp	r1, #0
 800a6ac:	db3c      	blt.n	800a728 <__ieee754_sqrt+0x16c>
 800a6ae:	f102 0e01 	add.w	lr, r2, #1
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	4672      	mov	r2, lr
 800a6b6:	45a4      	cmp	ip, r4
 800a6b8:	bf88      	it	hi
 800a6ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a6be:	eba4 040c 	sub.w	r4, r4, ip
 800a6c2:	4405      	add	r5, r0
 800a6c4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a6c8:	3e01      	subs	r6, #1
 800a6ca:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a6ce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a6d2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a6d6:	d1dc      	bne.n	800a692 <__ieee754_sqrt+0xd6>
 800a6d8:	431c      	orrs	r4, r3
 800a6da:	d01a      	beq.n	800a712 <__ieee754_sqrt+0x156>
 800a6dc:	4c1e      	ldr	r4, [pc, #120]	@ (800a758 <__ieee754_sqrt+0x19c>)
 800a6de:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800a75c <__ieee754_sqrt+0x1a0>
 800a6e2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a6e6:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6ea:	f7f5 fd3d 	bl	8000168 <__aeabi_dsub>
 800a6ee:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	4659      	mov	r1, fp
 800a6fa:	f7f6 f969 	bl	80009d0 <__aeabi_dcmple>
 800a6fe:	b140      	cbz	r0, 800a712 <__ieee754_sqrt+0x156>
 800a700:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a704:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a708:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a70c:	d10e      	bne.n	800a72c <__ieee754_sqrt+0x170>
 800a70e:	4635      	mov	r5, r6
 800a710:	3701      	adds	r7, #1
 800a712:	107b      	asrs	r3, r7, #1
 800a714:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a718:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a71c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800a720:	086b      	lsrs	r3, r5, #1
 800a722:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800a726:	e75b      	b.n	800a5e0 <__ieee754_sqrt+0x24>
 800a728:	4696      	mov	lr, r2
 800a72a:	e7c2      	b.n	800a6b2 <__ieee754_sqrt+0xf6>
 800a72c:	f7f5 fd1e 	bl	800016c <__adddf3>
 800a730:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4650      	mov	r0, sl
 800a73a:	4659      	mov	r1, fp
 800a73c:	f7f6 f93e 	bl	80009bc <__aeabi_dcmplt>
 800a740:	b120      	cbz	r0, 800a74c <__ieee754_sqrt+0x190>
 800a742:	1cab      	adds	r3, r5, #2
 800a744:	bf08      	it	eq
 800a746:	3701      	addeq	r7, #1
 800a748:	3502      	adds	r5, #2
 800a74a:	e7e2      	b.n	800a712 <__ieee754_sqrt+0x156>
 800a74c:	1c6b      	adds	r3, r5, #1
 800a74e:	f023 0501 	bic.w	r5, r3, #1
 800a752:	e7de      	b.n	800a712 <__ieee754_sqrt+0x156>
 800a754:	7ff00000 	.word	0x7ff00000
 800a758:	0800d568 	.word	0x0800d568
 800a75c:	0800d560 	.word	0x0800d560

0800a760 <__ieee754_sqrtf>:
 800a760:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800a764:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	4603      	mov	r3, r0
 800a76e:	4604      	mov	r4, r0
 800a770:	d30a      	bcc.n	800a788 <__ieee754_sqrtf+0x28>
 800a772:	4601      	mov	r1, r0
 800a774:	f7f6 fb06 	bl	8000d84 <__aeabi_fmul>
 800a778:	4601      	mov	r1, r0
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7f6 f9fa 	bl	8000b74 <__addsf3>
 800a780:	4604      	mov	r4, r0
 800a782:	4620      	mov	r0, r4
 800a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a788:	2a00      	cmp	r2, #0
 800a78a:	d0fa      	beq.n	800a782 <__ieee754_sqrtf+0x22>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	da06      	bge.n	800a79e <__ieee754_sqrtf+0x3e>
 800a790:	4601      	mov	r1, r0
 800a792:	f7f6 f9ed 	bl	8000b70 <__aeabi_fsub>
 800a796:	4601      	mov	r1, r0
 800a798:	f7f6 fba8 	bl	8000eec <__aeabi_fdiv>
 800a79c:	e7f0      	b.n	800a780 <__ieee754_sqrtf+0x20>
 800a79e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800a7a2:	d03c      	beq.n	800a81e <__ieee754_sqrtf+0xbe>
 800a7a4:	15c2      	asrs	r2, r0, #23
 800a7a6:	2400      	movs	r4, #0
 800a7a8:	2019      	movs	r0, #25
 800a7aa:	4626      	mov	r6, r4
 800a7ac:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800a7b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7b4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800a7b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a7bc:	07d2      	lsls	r2, r2, #31
 800a7be:	bf58      	it	pl
 800a7c0:	005b      	lslpl	r3, r3, #1
 800a7c2:	106d      	asrs	r5, r5, #1
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	1872      	adds	r2, r6, r1
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bfcf      	iteee	gt
 800a7cc:	461a      	movgt	r2, r3
 800a7ce:	1856      	addle	r6, r2, r1
 800a7d0:	1864      	addle	r4, r4, r1
 800a7d2:	1a9a      	suble	r2, r3, r2
 800a7d4:	3801      	subs	r0, #1
 800a7d6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800a7da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a7de:	d1f2      	bne.n	800a7c6 <__ieee754_sqrtf+0x66>
 800a7e0:	b1ba      	cbz	r2, 800a812 <__ieee754_sqrtf+0xb2>
 800a7e2:	4e15      	ldr	r6, [pc, #84]	@ (800a838 <__ieee754_sqrtf+0xd8>)
 800a7e4:	4f15      	ldr	r7, [pc, #84]	@ (800a83c <__ieee754_sqrtf+0xdc>)
 800a7e6:	6830      	ldr	r0, [r6, #0]
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	f7f6 f9c1 	bl	8000b70 <__aeabi_fsub>
 800a7ee:	f8d6 8000 	ldr.w	r8, [r6]
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	f7f6 fc6d 	bl	80010d4 <__aeabi_fcmple>
 800a7fa:	b150      	cbz	r0, 800a812 <__ieee754_sqrtf+0xb2>
 800a7fc:	6830      	ldr	r0, [r6, #0]
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	f7f6 f9b8 	bl	8000b74 <__addsf3>
 800a804:	6836      	ldr	r6, [r6, #0]
 800a806:	4601      	mov	r1, r0
 800a808:	4630      	mov	r0, r6
 800a80a:	f7f6 fc59 	bl	80010c0 <__aeabi_fcmplt>
 800a80e:	b170      	cbz	r0, 800a82e <__ieee754_sqrtf+0xce>
 800a810:	3402      	adds	r4, #2
 800a812:	1064      	asrs	r4, r4, #1
 800a814:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800a818:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800a81c:	e7b1      	b.n	800a782 <__ieee754_sqrtf+0x22>
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	0218      	lsls	r0, r3, #8
 800a822:	460a      	mov	r2, r1
 800a824:	f101 0101 	add.w	r1, r1, #1
 800a828:	d5f9      	bpl.n	800a81e <__ieee754_sqrtf+0xbe>
 800a82a:	4252      	negs	r2, r2
 800a82c:	e7bb      	b.n	800a7a6 <__ieee754_sqrtf+0x46>
 800a82e:	3401      	adds	r4, #1
 800a830:	f024 0401 	bic.w	r4, r4, #1
 800a834:	e7ed      	b.n	800a812 <__ieee754_sqrtf+0xb2>
 800a836:	bf00      	nop
 800a838:	0800d574 	.word	0x0800d574
 800a83c:	0800d570 	.word	0x0800d570

0800a840 <truncf>:
 800a840:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a844:	3b7f      	subs	r3, #127	@ 0x7f
 800a846:	2b16      	cmp	r3, #22
 800a848:	4601      	mov	r1, r0
 800a84a:	b510      	push	{r4, lr}
 800a84c:	dc0a      	bgt.n	800a864 <truncf+0x24>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800a854:	db04      	blt.n	800a860 <truncf+0x20>
 800a856:	4a06      	ldr	r2, [pc, #24]	@ (800a870 <truncf+0x30>)
 800a858:	fa42 f303 	asr.w	r3, r2, r3
 800a85c:	4003      	ands	r3, r0
 800a85e:	4319      	orrs	r1, r3
 800a860:	4608      	mov	r0, r1
 800a862:	bd10      	pop	{r4, pc}
 800a864:	2b80      	cmp	r3, #128	@ 0x80
 800a866:	d1fb      	bne.n	800a860 <truncf+0x20>
 800a868:	f7f6 f984 	bl	8000b74 <__addsf3>
 800a86c:	4601      	mov	r1, r0
 800a86e:	e7f7      	b.n	800a860 <truncf+0x20>
 800a870:	ff800000 	.word	0xff800000
 800a874:	00000000 	.word	0x00000000

0800a878 <__kernel_cos>:
 800a878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a880:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	e9cd 2300 	strd	r2, r3, [sp]
 800a88c:	d204      	bcs.n	800a898 <__kernel_cos+0x20>
 800a88e:	f7f6 f8d3 	bl	8000a38 <__aeabi_d2iz>
 800a892:	2800      	cmp	r0, #0
 800a894:	f000 8086 	beq.w	800a9a4 <__kernel_cos+0x12c>
 800a898:	4642      	mov	r2, r8
 800a89a:	464b      	mov	r3, r9
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fe1a 	bl	80004d8 <__aeabi_dmul>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4b4e      	ldr	r3, [pc, #312]	@ (800a9e0 <__kernel_cos+0x168>)
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	f7f5 fe14 	bl	80004d8 <__aeabi_dmul>
 800a8b0:	a33f      	add	r3, pc, #252	@ (adr r3, 800a9b0 <__kernel_cos+0x138>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	468b      	mov	fp, r1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f5 fe0b 	bl	80004d8 <__aeabi_dmul>
 800a8c2:	a33d      	add	r3, pc, #244	@ (adr r3, 800a9b8 <__kernel_cos+0x140>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fc50 	bl	800016c <__adddf3>
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	462b      	mov	r3, r5
 800a8d0:	f7f5 fe02 	bl	80004d8 <__aeabi_dmul>
 800a8d4:	a33a      	add	r3, pc, #232	@ (adr r3, 800a9c0 <__kernel_cos+0x148>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fc45 	bl	8000168 <__aeabi_dsub>
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	f7f5 fdf9 	bl	80004d8 <__aeabi_dmul>
 800a8e6:	a338      	add	r3, pc, #224	@ (adr r3, 800a9c8 <__kernel_cos+0x150>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fc3e 	bl	800016c <__adddf3>
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	f7f5 fdf0 	bl	80004d8 <__aeabi_dmul>
 800a8f8:	a335      	add	r3, pc, #212	@ (adr r3, 800a9d0 <__kernel_cos+0x158>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f7f5 fc33 	bl	8000168 <__aeabi_dsub>
 800a902:	4622      	mov	r2, r4
 800a904:	462b      	mov	r3, r5
 800a906:	f7f5 fde7 	bl	80004d8 <__aeabi_dmul>
 800a90a:	a333      	add	r3, pc, #204	@ (adr r3, 800a9d8 <__kernel_cos+0x160>)
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	f7f5 fc2c 	bl	800016c <__adddf3>
 800a914:	4622      	mov	r2, r4
 800a916:	462b      	mov	r3, r5
 800a918:	f7f5 fdde 	bl	80004d8 <__aeabi_dmul>
 800a91c:	4622      	mov	r2, r4
 800a91e:	462b      	mov	r3, r5
 800a920:	f7f5 fdda 	bl	80004d8 <__aeabi_dmul>
 800a924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a928:	4604      	mov	r4, r0
 800a92a:	460d      	mov	r5, r1
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fdd2 	bl	80004d8 <__aeabi_dmul>
 800a934:	460b      	mov	r3, r1
 800a936:	4602      	mov	r2, r0
 800a938:	4629      	mov	r1, r5
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7f5 fc14 	bl	8000168 <__aeabi_dsub>
 800a940:	4b28      	ldr	r3, [pc, #160]	@ (800a9e4 <__kernel_cos+0x16c>)
 800a942:	4680      	mov	r8, r0
 800a944:	429e      	cmp	r6, r3
 800a946:	4689      	mov	r9, r1
 800a948:	d80e      	bhi.n	800a968 <__kernel_cos+0xf0>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4650      	mov	r0, sl
 800a950:	4659      	mov	r1, fp
 800a952:	f7f5 fc09 	bl	8000168 <__aeabi_dsub>
 800a956:	4602      	mov	r2, r0
 800a958:	2000      	movs	r0, #0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4922      	ldr	r1, [pc, #136]	@ (800a9e8 <__kernel_cos+0x170>)
 800a95e:	f7f5 fc03 	bl	8000168 <__aeabi_dsub>
 800a962:	b003      	add	sp, #12
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	2400      	movs	r4, #0
 800a96a:	4b20      	ldr	r3, [pc, #128]	@ (800a9ec <__kernel_cos+0x174>)
 800a96c:	4622      	mov	r2, r4
 800a96e:	429e      	cmp	r6, r3
 800a970:	bf8c      	ite	hi
 800a972:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a9f0 <__kernel_cos+0x178>)
 800a974:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a978:	462b      	mov	r3, r5
 800a97a:	2000      	movs	r0, #0
 800a97c:	491a      	ldr	r1, [pc, #104]	@ (800a9e8 <__kernel_cos+0x170>)
 800a97e:	f7f5 fbf3 	bl	8000168 <__aeabi_dsub>
 800a982:	4622      	mov	r2, r4
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	462b      	mov	r3, r5
 800a98a:	4650      	mov	r0, sl
 800a98c:	4659      	mov	r1, fp
 800a98e:	f7f5 fbeb 	bl	8000168 <__aeabi_dsub>
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	f7f5 fbe7 	bl	8000168 <__aeabi_dsub>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	e7dc      	b.n	800a95e <__kernel_cos+0xe6>
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	4910      	ldr	r1, [pc, #64]	@ (800a9e8 <__kernel_cos+0x170>)
 800a9a8:	e7db      	b.n	800a962 <__kernel_cos+0xea>
 800a9aa:	bf00      	nop
 800a9ac:	f3af 8000 	nop.w
 800a9b0:	be8838d4 	.word	0xbe8838d4
 800a9b4:	bda8fae9 	.word	0xbda8fae9
 800a9b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a9bc:	3e21ee9e 	.word	0x3e21ee9e
 800a9c0:	809c52ad 	.word	0x809c52ad
 800a9c4:	3e927e4f 	.word	0x3e927e4f
 800a9c8:	19cb1590 	.word	0x19cb1590
 800a9cc:	3efa01a0 	.word	0x3efa01a0
 800a9d0:	16c15177 	.word	0x16c15177
 800a9d4:	3f56c16c 	.word	0x3f56c16c
 800a9d8:	5555554c 	.word	0x5555554c
 800a9dc:	3fa55555 	.word	0x3fa55555
 800a9e0:	3fe00000 	.word	0x3fe00000
 800a9e4:	3fd33332 	.word	0x3fd33332
 800a9e8:	3ff00000 	.word	0x3ff00000
 800a9ec:	3fe90000 	.word	0x3fe90000
 800a9f0:	3fd20000 	.word	0x3fd20000
 800a9f4:	00000000 	.word	0x00000000

0800a9f8 <__kernel_sin>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	461f      	mov	r7, r3
 800a9fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa02:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800aa06:	4604      	mov	r4, r0
 800aa08:	460d      	mov	r5, r1
 800aa0a:	4616      	mov	r6, r2
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	d203      	bcs.n	800aa18 <__kernel_sin+0x20>
 800aa10:	f7f6 f812 	bl	8000a38 <__aeabi_d2iz>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d051      	beq.n	800aabc <__kernel_sin+0xc4>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	4629      	mov	r1, r5
 800aa20:	f7f5 fd5a 	bl	80004d8 <__aeabi_dmul>
 800aa24:	4682      	mov	sl, r0
 800aa26:	468b      	mov	fp, r1
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fd52 	bl	80004d8 <__aeabi_dmul>
 800aa34:	a33e      	add	r3, pc, #248	@ (adr r3, 800ab30 <__kernel_sin+0x138>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	4650      	mov	r0, sl
 800aa40:	4659      	mov	r1, fp
 800aa42:	f7f5 fd49 	bl	80004d8 <__aeabi_dmul>
 800aa46:	a33c      	add	r3, pc, #240	@ (adr r3, 800ab38 <__kernel_sin+0x140>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fb8c 	bl	8000168 <__aeabi_dsub>
 800aa50:	4652      	mov	r2, sl
 800aa52:	465b      	mov	r3, fp
 800aa54:	f7f5 fd40 	bl	80004d8 <__aeabi_dmul>
 800aa58:	a339      	add	r3, pc, #228	@ (adr r3, 800ab40 <__kernel_sin+0x148>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fb85 	bl	800016c <__adddf3>
 800aa62:	4652      	mov	r2, sl
 800aa64:	465b      	mov	r3, fp
 800aa66:	f7f5 fd37 	bl	80004d8 <__aeabi_dmul>
 800aa6a:	a337      	add	r3, pc, #220	@ (adr r3, 800ab48 <__kernel_sin+0x150>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fb7a 	bl	8000168 <__aeabi_dsub>
 800aa74:	4652      	mov	r2, sl
 800aa76:	465b      	mov	r3, fp
 800aa78:	f7f5 fd2e 	bl	80004d8 <__aeabi_dmul>
 800aa7c:	a334      	add	r3, pc, #208	@ (adr r3, 800ab50 <__kernel_sin+0x158>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	f7f5 fb73 	bl	800016c <__adddf3>
 800aa86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa88:	e9cd 0100 	strd	r0, r1, [sp]
 800aa8c:	b9db      	cbnz	r3, 800aac6 <__kernel_sin+0xce>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4650      	mov	r0, sl
 800aa94:	4659      	mov	r1, fp
 800aa96:	f7f5 fd1f 	bl	80004d8 <__aeabi_dmul>
 800aa9a:	a32f      	add	r3, pc, #188	@ (adr r3, 800ab58 <__kernel_sin+0x160>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fb62 	bl	8000168 <__aeabi_dsub>
 800aaa4:	4642      	mov	r2, r8
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	f7f5 fd16 	bl	80004d8 <__aeabi_dmul>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4620      	mov	r0, r4
 800aab2:	4629      	mov	r1, r5
 800aab4:	f7f5 fb5a 	bl	800016c <__adddf3>
 800aab8:	4604      	mov	r4, r0
 800aaba:	460d      	mov	r5, r1
 800aabc:	4620      	mov	r0, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	b005      	add	sp, #20
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	2200      	movs	r2, #0
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	4b24      	ldr	r3, [pc, #144]	@ (800ab60 <__kernel_sin+0x168>)
 800aace:	f7f5 fd03 	bl	80004d8 <__aeabi_dmul>
 800aad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fcfb 	bl	80004d8 <__aeabi_dmul>
 800aae2:	4602      	mov	r2, r0
 800aae4:	460b      	mov	r3, r1
 800aae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaea:	f7f5 fb3d 	bl	8000168 <__aeabi_dsub>
 800aaee:	4652      	mov	r2, sl
 800aaf0:	465b      	mov	r3, fp
 800aaf2:	f7f5 fcf1 	bl	80004d8 <__aeabi_dmul>
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	463b      	mov	r3, r7
 800aafa:	f7f5 fb35 	bl	8000168 <__aeabi_dsub>
 800aafe:	a316      	add	r3, pc, #88	@ (adr r3, 800ab58 <__kernel_sin+0x160>)
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 fb28 	bl	800016c <__adddf3>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4620      	mov	r0, r4
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fb20 	bl	8000168 <__aeabi_dsub>
 800ab28:	e7c6      	b.n	800aab8 <__kernel_sin+0xc0>
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w
 800ab30:	5acfd57c 	.word	0x5acfd57c
 800ab34:	3de5d93a 	.word	0x3de5d93a
 800ab38:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab3c:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab40:	57b1fe7d 	.word	0x57b1fe7d
 800ab44:	3ec71de3 	.word	0x3ec71de3
 800ab48:	19c161d5 	.word	0x19c161d5
 800ab4c:	3f2a01a0 	.word	0x3f2a01a0
 800ab50:	1110f8a6 	.word	0x1110f8a6
 800ab54:	3f811111 	.word	0x3f811111
 800ab58:	55555549 	.word	0x55555549
 800ab5c:	3fc55555 	.word	0x3fc55555
 800ab60:	3fe00000 	.word	0x3fe00000
 800ab64:	00000000 	.word	0x00000000

0800ab68 <__ieee754_atan2>:
 800ab68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	4617      	mov	r7, r2
 800ab6e:	4690      	mov	r8, r2
 800ab70:	4699      	mov	r9, r3
 800ab72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ab76:	427b      	negs	r3, r7
 800ab78:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800ad00 <__ieee754_atan2+0x198>
 800ab7c:	433b      	orrs	r3, r7
 800ab7e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ab82:	4553      	cmp	r3, sl
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	d809      	bhi.n	800ab9e <__ieee754_atan2+0x36>
 800ab8a:	4246      	negs	r6, r0
 800ab8c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab90:	4306      	orrs	r6, r0
 800ab92:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ab96:	4556      	cmp	r6, sl
 800ab98:	468e      	mov	lr, r1
 800ab9a:	4683      	mov	fp, r0
 800ab9c:	d908      	bls.n	800abb0 <__ieee754_atan2+0x48>
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	4620      	mov	r0, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7f5 fae1 	bl	800016c <__adddf3>
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	e016      	b.n	800abde <__ieee754_atan2+0x76>
 800abb0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800abb4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800abb8:	433e      	orrs	r6, r7
 800abba:	d103      	bne.n	800abc4 <__ieee754_atan2+0x5c>
 800abbc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	f000 ba9e 	b.w	800b100 <atan>
 800abc4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800abc8:	f006 0602 	and.w	r6, r6, #2
 800abcc:	ea53 0b0b 	orrs.w	fp, r3, fp
 800abd0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800abd4:	d107      	bne.n	800abe6 <__ieee754_atan2+0x7e>
 800abd6:	2e02      	cmp	r6, #2
 800abd8:	d064      	beq.n	800aca4 <__ieee754_atan2+0x13c>
 800abda:	2e03      	cmp	r6, #3
 800abdc:	d066      	beq.n	800acac <__ieee754_atan2+0x144>
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe6:	4317      	orrs	r7, r2
 800abe8:	d106      	bne.n	800abf8 <__ieee754_atan2+0x90>
 800abea:	f1be 0f00 	cmp.w	lr, #0
 800abee:	db68      	blt.n	800acc2 <__ieee754_atan2+0x15a>
 800abf0:	a537      	add	r5, pc, #220	@ (adr r5, 800acd0 <__ieee754_atan2+0x168>)
 800abf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abf6:	e7f2      	b.n	800abde <__ieee754_atan2+0x76>
 800abf8:	4552      	cmp	r2, sl
 800abfa:	d10f      	bne.n	800ac1c <__ieee754_atan2+0xb4>
 800abfc:	4293      	cmp	r3, r2
 800abfe:	f106 36ff 	add.w	r6, r6, #4294967295
 800ac02:	d107      	bne.n	800ac14 <__ieee754_atan2+0xac>
 800ac04:	2e02      	cmp	r6, #2
 800ac06:	d855      	bhi.n	800acb4 <__ieee754_atan2+0x14c>
 800ac08:	4b3e      	ldr	r3, [pc, #248]	@ (800ad04 <__ieee754_atan2+0x19c>)
 800ac0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac12:	e7e4      	b.n	800abde <__ieee754_atan2+0x76>
 800ac14:	2e02      	cmp	r6, #2
 800ac16:	d851      	bhi.n	800acbc <__ieee754_atan2+0x154>
 800ac18:	4b3b      	ldr	r3, [pc, #236]	@ (800ad08 <__ieee754_atan2+0x1a0>)
 800ac1a:	e7f6      	b.n	800ac0a <__ieee754_atan2+0xa2>
 800ac1c:	4553      	cmp	r3, sl
 800ac1e:	d0e4      	beq.n	800abea <__ieee754_atan2+0x82>
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ac26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac2a:	da21      	bge.n	800ac70 <__ieee754_atan2+0x108>
 800ac2c:	f1b9 0f00 	cmp.w	r9, #0
 800ac30:	da01      	bge.n	800ac36 <__ieee754_atan2+0xce>
 800ac32:	323c      	adds	r2, #60	@ 0x3c
 800ac34:	db20      	blt.n	800ac78 <__ieee754_atan2+0x110>
 800ac36:	4642      	mov	r2, r8
 800ac38:	464b      	mov	r3, r9
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	f7f5 fd75 	bl	800072c <__aeabi_ddiv>
 800ac42:	f000 fbed 	bl	800b420 <fabs>
 800ac46:	f000 fa5b 	bl	800b100 <atan>
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	460d      	mov	r5, r1
 800ac4e:	2e01      	cmp	r6, #1
 800ac50:	d015      	beq.n	800ac7e <__ieee754_atan2+0x116>
 800ac52:	2e02      	cmp	r6, #2
 800ac54:	d017      	beq.n	800ac86 <__ieee754_atan2+0x11e>
 800ac56:	2e00      	cmp	r6, #0
 800ac58:	d0c1      	beq.n	800abde <__ieee754_atan2+0x76>
 800ac5a:	a31f      	add	r3, pc, #124	@ (adr r3, 800acd8 <__ieee754_atan2+0x170>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fa80 	bl	8000168 <__aeabi_dsub>
 800ac68:	a31d      	add	r3, pc, #116	@ (adr r3, 800ace0 <__ieee754_atan2+0x178>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	e016      	b.n	800ac9e <__ieee754_atan2+0x136>
 800ac70:	a517      	add	r5, pc, #92	@ (adr r5, 800acd0 <__ieee754_atan2+0x168>)
 800ac72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ac76:	e7ea      	b.n	800ac4e <__ieee754_atan2+0xe6>
 800ac78:	2400      	movs	r4, #0
 800ac7a:	2500      	movs	r5, #0
 800ac7c:	e7e7      	b.n	800ac4e <__ieee754_atan2+0xe6>
 800ac7e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800ac82:	461d      	mov	r5, r3
 800ac84:	e7ab      	b.n	800abde <__ieee754_atan2+0x76>
 800ac86:	a314      	add	r3, pc, #80	@ (adr r3, 800acd8 <__ieee754_atan2+0x170>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	f7f5 fa6a 	bl	8000168 <__aeabi_dsub>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	a111      	add	r1, pc, #68	@ (adr r1, 800ace0 <__ieee754_atan2+0x178>)
 800ac9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9e:	f7f5 fa63 	bl	8000168 <__aeabi_dsub>
 800aca2:	e782      	b.n	800abaa <__ieee754_atan2+0x42>
 800aca4:	a50e      	add	r5, pc, #56	@ (adr r5, 800ace0 <__ieee754_atan2+0x178>)
 800aca6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acaa:	e798      	b.n	800abde <__ieee754_atan2+0x76>
 800acac:	a50e      	add	r5, pc, #56	@ (adr r5, 800ace8 <__ieee754_atan2+0x180>)
 800acae:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acb2:	e794      	b.n	800abde <__ieee754_atan2+0x76>
 800acb4:	a50e      	add	r5, pc, #56	@ (adr r5, 800acf0 <__ieee754_atan2+0x188>)
 800acb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acba:	e790      	b.n	800abde <__ieee754_atan2+0x76>
 800acbc:	2400      	movs	r4, #0
 800acbe:	2500      	movs	r5, #0
 800acc0:	e78d      	b.n	800abde <__ieee754_atan2+0x76>
 800acc2:	a50d      	add	r5, pc, #52	@ (adr r5, 800acf8 <__ieee754_atan2+0x190>)
 800acc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acc8:	e789      	b.n	800abde <__ieee754_atan2+0x76>
 800acca:	bf00      	nop
 800accc:	f3af 8000 	nop.w
 800acd0:	54442d18 	.word	0x54442d18
 800acd4:	3ff921fb 	.word	0x3ff921fb
 800acd8:	33145c07 	.word	0x33145c07
 800acdc:	3ca1a626 	.word	0x3ca1a626
 800ace0:	54442d18 	.word	0x54442d18
 800ace4:	400921fb 	.word	0x400921fb
 800ace8:	54442d18 	.word	0x54442d18
 800acec:	c00921fb 	.word	0xc00921fb
 800acf0:	54442d18 	.word	0x54442d18
 800acf4:	3fe921fb 	.word	0x3fe921fb
 800acf8:	54442d18 	.word	0x54442d18
 800acfc:	bff921fb 	.word	0xbff921fb
 800ad00:	7ff00000 	.word	0x7ff00000
 800ad04:	0800d590 	.word	0x0800d590
 800ad08:	0800d578 	.word	0x0800d578
 800ad0c:	00000000 	.word	0x00000000

0800ad10 <__ieee754_rem_pio2>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	4bc4      	ldr	r3, [pc, #784]	@ (800b028 <__ieee754_rem_pio2+0x318>)
 800ad16:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800ad1a:	b08d      	sub	sp, #52	@ 0x34
 800ad1c:	4598      	cmp	r8, r3
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	4614      	mov	r4, r2
 800ad24:	9104      	str	r1, [sp, #16]
 800ad26:	d807      	bhi.n	800ad38 <__ieee754_rem_pio2+0x28>
 800ad28:	e9c2 6700 	strd	r6, r7, [r2]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	2200      	movs	r2, #0
 800ad30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ad34:	2500      	movs	r5, #0
 800ad36:	e026      	b.n	800ad86 <__ieee754_rem_pio2+0x76>
 800ad38:	4bbc      	ldr	r3, [pc, #752]	@ (800b02c <__ieee754_rem_pio2+0x31c>)
 800ad3a:	4598      	cmp	r8, r3
 800ad3c:	d876      	bhi.n	800ae2c <__ieee754_rem_pio2+0x11c>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	4dbb      	ldr	r5, [pc, #748]	@ (800b030 <__ieee754_rem_pio2+0x320>)
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	a3aa      	add	r3, pc, #680	@ (adr r3, 800aff0 <__ieee754_rem_pio2+0x2e0>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	dd38      	ble.n	800adbe <__ieee754_rem_pio2+0xae>
 800ad4c:	f7f5 fa0c 	bl	8000168 <__aeabi_dsub>
 800ad50:	45a8      	cmp	r8, r5
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	d01a      	beq.n	800ad8e <__ieee754_rem_pio2+0x7e>
 800ad58:	a3a7      	add	r3, pc, #668	@ (adr r3, 800aff8 <__ieee754_rem_pio2+0x2e8>)
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	f7f5 fa03 	bl	8000168 <__aeabi_dsub>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4680      	mov	r8, r0
 800ad68:	4689      	mov	r9, r1
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 f9fb 	bl	8000168 <__aeabi_dsub>
 800ad72:	a3a1      	add	r3, pc, #644	@ (adr r3, 800aff8 <__ieee754_rem_pio2+0x2e8>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 f9f6 	bl	8000168 <__aeabi_dsub>
 800ad7c:	2501      	movs	r5, #1
 800ad7e:	e9c4 8900 	strd	r8, r9, [r4]
 800ad82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad86:	4628      	mov	r0, r5
 800ad88:	b00d      	add	sp, #52	@ 0x34
 800ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8e:	a39c      	add	r3, pc, #624	@ (adr r3, 800b000 <__ieee754_rem_pio2+0x2f0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f7f5 f9e8 	bl	8000168 <__aeabi_dsub>
 800ad98:	a39b      	add	r3, pc, #620	@ (adr r3, 800b008 <__ieee754_rem_pio2+0x2f8>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460f      	mov	r7, r1
 800ada2:	f7f5 f9e1 	bl	8000168 <__aeabi_dsub>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4680      	mov	r8, r0
 800adac:	4689      	mov	r9, r1
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 f9d9 	bl	8000168 <__aeabi_dsub>
 800adb6:	a394      	add	r3, pc, #592	@ (adr r3, 800b008 <__ieee754_rem_pio2+0x2f8>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	e7dc      	b.n	800ad78 <__ieee754_rem_pio2+0x68>
 800adbe:	f7f5 f9d5 	bl	800016c <__adddf3>
 800adc2:	45a8      	cmp	r8, r5
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	d018      	beq.n	800adfc <__ieee754_rem_pio2+0xec>
 800adca:	a38b      	add	r3, pc, #556	@ (adr r3, 800aff8 <__ieee754_rem_pio2+0x2e8>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f7f5 f9cc 	bl	800016c <__adddf3>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4680      	mov	r8, r0
 800adda:	4689      	mov	r9, r1
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 f9c2 	bl	8000168 <__aeabi_dsub>
 800ade4:	a384      	add	r3, pc, #528	@ (adr r3, 800aff8 <__ieee754_rem_pio2+0x2e8>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 f9bf 	bl	800016c <__adddf3>
 800adee:	f04f 35ff 	mov.w	r5, #4294967295
 800adf2:	e9c4 8900 	strd	r8, r9, [r4]
 800adf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800adfa:	e7c4      	b.n	800ad86 <__ieee754_rem_pio2+0x76>
 800adfc:	a380      	add	r3, pc, #512	@ (adr r3, 800b000 <__ieee754_rem_pio2+0x2f0>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	f7f5 f9b3 	bl	800016c <__adddf3>
 800ae06:	a380      	add	r3, pc, #512	@ (adr r3, 800b008 <__ieee754_rem_pio2+0x2f8>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	f7f5 f9ac 	bl	800016c <__adddf3>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 f9a2 	bl	8000168 <__aeabi_dsub>
 800ae24:	a378      	add	r3, pc, #480	@ (adr r3, 800b008 <__ieee754_rem_pio2+0x2f8>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	e7de      	b.n	800adea <__ieee754_rem_pio2+0xda>
 800ae2c:	4b81      	ldr	r3, [pc, #516]	@ (800b034 <__ieee754_rem_pio2+0x324>)
 800ae2e:	4598      	cmp	r8, r3
 800ae30:	f200 80cf 	bhi.w	800afd2 <__ieee754_rem_pio2+0x2c2>
 800ae34:	f000 faf4 	bl	800b420 <fabs>
 800ae38:	a375      	add	r3, pc, #468	@ (adr r3, 800b010 <__ieee754_rem_pio2+0x300>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f7f5 fb49 	bl	80004d8 <__aeabi_dmul>
 800ae46:	2200      	movs	r2, #0
 800ae48:	4b7b      	ldr	r3, [pc, #492]	@ (800b038 <__ieee754_rem_pio2+0x328>)
 800ae4a:	f7f5 f98f 	bl	800016c <__adddf3>
 800ae4e:	f7f5 fdf3 	bl	8000a38 <__aeabi_d2iz>
 800ae52:	4605      	mov	r5, r0
 800ae54:	f7f5 fad6 	bl	8000404 <__aeabi_i2d>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae60:	a363      	add	r3, pc, #396	@ (adr r3, 800aff0 <__ieee754_rem_pio2+0x2e0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 fb37 	bl	80004d8 <__aeabi_dmul>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4630      	mov	r0, r6
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 f979 	bl	8000168 <__aeabi_dsub>
 800ae76:	a360      	add	r3, pc, #384	@ (adr r3, 800aff8 <__ieee754_rem_pio2+0x2e8>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	4682      	mov	sl, r0
 800ae7e:	468b      	mov	fp, r1
 800ae80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae84:	f7f5 fb28 	bl	80004d8 <__aeabi_dmul>
 800ae88:	2d1f      	cmp	r5, #31
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	460f      	mov	r7, r1
 800ae8e:	dc0c      	bgt.n	800aeaa <__ieee754_rem_pio2+0x19a>
 800ae90:	4b6a      	ldr	r3, [pc, #424]	@ (800b03c <__ieee754_rem_pio2+0x32c>)
 800ae92:	1e6a      	subs	r2, r5, #1
 800ae94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae98:	4543      	cmp	r3, r8
 800ae9a:	d006      	beq.n	800aeaa <__ieee754_rem_pio2+0x19a>
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	4650      	mov	r0, sl
 800aea2:	4659      	mov	r1, fp
 800aea4:	f7f5 f960 	bl	8000168 <__aeabi_dsub>
 800aea8:	e00e      	b.n	800aec8 <__ieee754_rem_pio2+0x1b8>
 800aeaa:	463b      	mov	r3, r7
 800aeac:	4632      	mov	r2, r6
 800aeae:	4650      	mov	r0, sl
 800aeb0:	4659      	mov	r1, fp
 800aeb2:	f7f5 f959 	bl	8000168 <__aeabi_dsub>
 800aeb6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aeba:	9305      	str	r3, [sp, #20]
 800aebc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aec0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800aec4:	2b10      	cmp	r3, #16
 800aec6:	dc02      	bgt.n	800aece <__ieee754_rem_pio2+0x1be>
 800aec8:	e9c4 0100 	strd	r0, r1, [r4]
 800aecc:	e039      	b.n	800af42 <__ieee754_rem_pio2+0x232>
 800aece:	a34c      	add	r3, pc, #304	@ (adr r3, 800b000 <__ieee754_rem_pio2+0x2f0>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed8:	f7f5 fafe 	bl	80004d8 <__aeabi_dmul>
 800aedc:	4606      	mov	r6, r0
 800aede:	460f      	mov	r7, r1
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4650      	mov	r0, sl
 800aee6:	4659      	mov	r1, fp
 800aee8:	f7f5 f93e 	bl	8000168 <__aeabi_dsub>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4680      	mov	r8, r0
 800aef2:	4689      	mov	r9, r1
 800aef4:	4650      	mov	r0, sl
 800aef6:	4659      	mov	r1, fp
 800aef8:	f7f5 f936 	bl	8000168 <__aeabi_dsub>
 800aefc:	4632      	mov	r2, r6
 800aefe:	463b      	mov	r3, r7
 800af00:	f7f5 f932 	bl	8000168 <__aeabi_dsub>
 800af04:	a340      	add	r3, pc, #256	@ (adr r3, 800b008 <__ieee754_rem_pio2+0x2f8>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af12:	f7f5 fae1 	bl	80004d8 <__aeabi_dmul>
 800af16:	4632      	mov	r2, r6
 800af18:	463b      	mov	r3, r7
 800af1a:	f7f5 f925 	bl	8000168 <__aeabi_dsub>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	4640      	mov	r0, r8
 800af28:	4649      	mov	r1, r9
 800af2a:	f7f5 f91d 	bl	8000168 <__aeabi_dsub>
 800af2e:	9a05      	ldr	r2, [sp, #20]
 800af30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b31      	cmp	r3, #49	@ 0x31
 800af38:	dc20      	bgt.n	800af7c <__ieee754_rem_pio2+0x26c>
 800af3a:	46c2      	mov	sl, r8
 800af3c:	46cb      	mov	fp, r9
 800af3e:	e9c4 0100 	strd	r0, r1, [r4]
 800af42:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af46:	4650      	mov	r0, sl
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 f90b 	bl	8000168 <__aeabi_dsub>
 800af52:	463b      	mov	r3, r7
 800af54:	4632      	mov	r2, r6
 800af56:	f7f5 f907 	bl	8000168 <__aeabi_dsub>
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f6bf af10 	bge.w	800ad86 <__ieee754_rem_pio2+0x76>
 800af66:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800af6a:	6063      	str	r3, [r4, #4]
 800af6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af70:	f8c4 8000 	str.w	r8, [r4]
 800af74:	60a0      	str	r0, [r4, #8]
 800af76:	60e3      	str	r3, [r4, #12]
 800af78:	426d      	negs	r5, r5
 800af7a:	e704      	b.n	800ad86 <__ieee754_rem_pio2+0x76>
 800af7c:	a326      	add	r3, pc, #152	@ (adr r3, 800b018 <__ieee754_rem_pio2+0x308>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af86:	f7f5 faa7 	bl	80004d8 <__aeabi_dmul>
 800af8a:	4606      	mov	r6, r0
 800af8c:	460f      	mov	r7, r1
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4640      	mov	r0, r8
 800af94:	4649      	mov	r1, r9
 800af96:	f7f5 f8e7 	bl	8000168 <__aeabi_dsub>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4682      	mov	sl, r0
 800afa0:	468b      	mov	fp, r1
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	f7f5 f8df 	bl	8000168 <__aeabi_dsub>
 800afaa:	4632      	mov	r2, r6
 800afac:	463b      	mov	r3, r7
 800afae:	f7f5 f8db 	bl	8000168 <__aeabi_dsub>
 800afb2:	a31b      	add	r3, pc, #108	@ (adr r3, 800b020 <__ieee754_rem_pio2+0x310>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc0:	f7f5 fa8a 	bl	80004d8 <__aeabi_dmul>
 800afc4:	4632      	mov	r2, r6
 800afc6:	463b      	mov	r3, r7
 800afc8:	f7f5 f8ce 	bl	8000168 <__aeabi_dsub>
 800afcc:	4606      	mov	r6, r0
 800afce:	460f      	mov	r7, r1
 800afd0:	e764      	b.n	800ae9c <__ieee754_rem_pio2+0x18c>
 800afd2:	4b1b      	ldr	r3, [pc, #108]	@ (800b040 <__ieee754_rem_pio2+0x330>)
 800afd4:	4598      	cmp	r8, r3
 800afd6:	d935      	bls.n	800b044 <__ieee754_rem_pio2+0x334>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	f7f5 f8c4 	bl	8000168 <__aeabi_dsub>
 800afe0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800afe4:	e9c4 0100 	strd	r0, r1, [r4]
 800afe8:	e6a4      	b.n	800ad34 <__ieee754_rem_pio2+0x24>
 800afea:	bf00      	nop
 800afec:	f3af 8000 	nop.w
 800aff0:	54400000 	.word	0x54400000
 800aff4:	3ff921fb 	.word	0x3ff921fb
 800aff8:	1a626331 	.word	0x1a626331
 800affc:	3dd0b461 	.word	0x3dd0b461
 800b000:	1a600000 	.word	0x1a600000
 800b004:	3dd0b461 	.word	0x3dd0b461
 800b008:	2e037073 	.word	0x2e037073
 800b00c:	3ba3198a 	.word	0x3ba3198a
 800b010:	6dc9c883 	.word	0x6dc9c883
 800b014:	3fe45f30 	.word	0x3fe45f30
 800b018:	2e000000 	.word	0x2e000000
 800b01c:	3ba3198a 	.word	0x3ba3198a
 800b020:	252049c1 	.word	0x252049c1
 800b024:	397b839a 	.word	0x397b839a
 800b028:	3fe921fb 	.word	0x3fe921fb
 800b02c:	4002d97b 	.word	0x4002d97b
 800b030:	3ff921fb 	.word	0x3ff921fb
 800b034:	413921fb 	.word	0x413921fb
 800b038:	3fe00000 	.word	0x3fe00000
 800b03c:	0800d5a8 	.word	0x0800d5a8
 800b040:	7fefffff 	.word	0x7fefffff
 800b044:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b048:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b04c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b050:	460f      	mov	r7, r1
 800b052:	f7f5 fcf1 	bl	8000a38 <__aeabi_d2iz>
 800b056:	f7f5 f9d5 	bl	8000404 <__aeabi_i2d>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4630      	mov	r0, r6
 800b060:	4639      	mov	r1, r7
 800b062:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b066:	f7f5 f87f 	bl	8000168 <__aeabi_dsub>
 800b06a:	2200      	movs	r2, #0
 800b06c:	4b21      	ldr	r3, [pc, #132]	@ (800b0f4 <__ieee754_rem_pio2+0x3e4>)
 800b06e:	f7f5 fa33 	bl	80004d8 <__aeabi_dmul>
 800b072:	460f      	mov	r7, r1
 800b074:	4606      	mov	r6, r0
 800b076:	f7f5 fcdf 	bl	8000a38 <__aeabi_d2iz>
 800b07a:	f7f5 f9c3 	bl	8000404 <__aeabi_i2d>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b08a:	f7f5 f86d 	bl	8000168 <__aeabi_dsub>
 800b08e:	2200      	movs	r2, #0
 800b090:	4b18      	ldr	r3, [pc, #96]	@ (800b0f4 <__ieee754_rem_pio2+0x3e4>)
 800b092:	f7f5 fa21 	bl	80004d8 <__aeabi_dmul>
 800b096:	f04f 0803 	mov.w	r8, #3
 800b09a:	2600      	movs	r6, #0
 800b09c:	2700      	movs	r7, #0
 800b09e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b0a2:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b0a6:	4632      	mov	r2, r6
 800b0a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b0ac:	463b      	mov	r3, r7
 800b0ae:	46c2      	mov	sl, r8
 800b0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0b4:	f7f5 fc78 	bl	80009a8 <__aeabi_dcmpeq>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1f4      	bne.n	800b0a6 <__ieee754_rem_pio2+0x396>
 800b0bc:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f8 <__ieee754_rem_pio2+0x3e8>)
 800b0be:	462a      	mov	r2, r5
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	a806      	add	r0, sp, #24
 800b0ca:	4653      	mov	r3, sl
 800b0cc:	f000 fb44 	bl	800b758 <__kernel_rem_pio2>
 800b0d0:	9b04      	ldr	r3, [sp, #16]
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f6bf ae56 	bge.w	800ad86 <__ieee754_rem_pio2+0x76>
 800b0da:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b0de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0e2:	e9c4 2300 	strd	r2, r3, [r4]
 800b0e6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b0ea:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0ee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b0f2:	e741      	b.n	800af78 <__ieee754_rem_pio2+0x268>
 800b0f4:	41700000 	.word	0x41700000
 800b0f8:	0800d628 	.word	0x0800d628
 800b0fc:	00000000 	.word	0x00000000

0800b100 <atan>:
 800b100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b104:	4bbc      	ldr	r3, [pc, #752]	@ (800b3f8 <atan+0x2f8>)
 800b106:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b10a:	429e      	cmp	r6, r3
 800b10c:	4604      	mov	r4, r0
 800b10e:	460d      	mov	r5, r1
 800b110:	468b      	mov	fp, r1
 800b112:	d918      	bls.n	800b146 <atan+0x46>
 800b114:	4bb9      	ldr	r3, [pc, #740]	@ (800b3fc <atan+0x2fc>)
 800b116:	429e      	cmp	r6, r3
 800b118:	d801      	bhi.n	800b11e <atan+0x1e>
 800b11a:	d109      	bne.n	800b130 <atan+0x30>
 800b11c:	b140      	cbz	r0, 800b130 <atan+0x30>
 800b11e:	4622      	mov	r2, r4
 800b120:	462b      	mov	r3, r5
 800b122:	4620      	mov	r0, r4
 800b124:	4629      	mov	r1, r5
 800b126:	f7f5 f821 	bl	800016c <__adddf3>
 800b12a:	4604      	mov	r4, r0
 800b12c:	460d      	mov	r5, r1
 800b12e:	e006      	b.n	800b13e <atan+0x3e>
 800b130:	f1bb 0f00 	cmp.w	fp, #0
 800b134:	f340 8123 	ble.w	800b37e <atan+0x27e>
 800b138:	a593      	add	r5, pc, #588	@ (adr r5, 800b388 <atan+0x288>)
 800b13a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	4bae      	ldr	r3, [pc, #696]	@ (800b400 <atan+0x300>)
 800b148:	429e      	cmp	r6, r3
 800b14a:	d811      	bhi.n	800b170 <atan+0x70>
 800b14c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b150:	429e      	cmp	r6, r3
 800b152:	d80a      	bhi.n	800b16a <atan+0x6a>
 800b154:	a38e      	add	r3, pc, #568	@ (adr r3, 800b390 <atan+0x290>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f7f5 f807 	bl	800016c <__adddf3>
 800b15e:	2200      	movs	r2, #0
 800b160:	4ba8      	ldr	r3, [pc, #672]	@ (800b404 <atan+0x304>)
 800b162:	f7f5 fc49 	bl	80009f8 <__aeabi_dcmpgt>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1e9      	bne.n	800b13e <atan+0x3e>
 800b16a:	f04f 3aff 	mov.w	sl, #4294967295
 800b16e:	e027      	b.n	800b1c0 <atan+0xc0>
 800b170:	f000 f956 	bl	800b420 <fabs>
 800b174:	4ba4      	ldr	r3, [pc, #656]	@ (800b408 <atan+0x308>)
 800b176:	4604      	mov	r4, r0
 800b178:	429e      	cmp	r6, r3
 800b17a:	460d      	mov	r5, r1
 800b17c:	f200 80b8 	bhi.w	800b2f0 <atan+0x1f0>
 800b180:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b184:	429e      	cmp	r6, r3
 800b186:	f200 809c 	bhi.w	800b2c2 <atan+0x1c2>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
 800b18e:	f7f4 ffed 	bl	800016c <__adddf3>
 800b192:	2200      	movs	r2, #0
 800b194:	4b9b      	ldr	r3, [pc, #620]	@ (800b404 <atan+0x304>)
 800b196:	f7f4 ffe7 	bl	8000168 <__aeabi_dsub>
 800b19a:	2200      	movs	r2, #0
 800b19c:	4606      	mov	r6, r0
 800b19e:	460f      	mov	r7, r1
 800b1a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f4 ffe0 	bl	800016c <__adddf3>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	f7f5 faba 	bl	800072c <__aeabi_ddiv>
 800b1b8:	f04f 0a00 	mov.w	sl, #0
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	462b      	mov	r3, r5
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 f986 	bl	80004d8 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	4689      	mov	r9, r1
 800b1d4:	f7f5 f980 	bl	80004d8 <__aeabi_dmul>
 800b1d8:	a36f      	add	r3, pc, #444	@ (adr r3, 800b398 <atan+0x298>)
 800b1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	f7f5 f979 	bl	80004d8 <__aeabi_dmul>
 800b1e6:	a36e      	add	r3, pc, #440	@ (adr r3, 800b3a0 <atan+0x2a0>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f7f4 ffbe 	bl	800016c <__adddf3>
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	f7f5 f970 	bl	80004d8 <__aeabi_dmul>
 800b1f8:	a36b      	add	r3, pc, #428	@ (adr r3, 800b3a8 <atan+0x2a8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f4 ffb5 	bl	800016c <__adddf3>
 800b202:	4632      	mov	r2, r6
 800b204:	463b      	mov	r3, r7
 800b206:	f7f5 f967 	bl	80004d8 <__aeabi_dmul>
 800b20a:	a369      	add	r3, pc, #420	@ (adr r3, 800b3b0 <atan+0x2b0>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f4 ffac 	bl	800016c <__adddf3>
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	f7f5 f95e 	bl	80004d8 <__aeabi_dmul>
 800b21c:	a366      	add	r3, pc, #408	@ (adr r3, 800b3b8 <atan+0x2b8>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	f7f4 ffa3 	bl	800016c <__adddf3>
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	f7f5 f955 	bl	80004d8 <__aeabi_dmul>
 800b22e:	a364      	add	r3, pc, #400	@ (adr r3, 800b3c0 <atan+0x2c0>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f4 ff9a 	bl	800016c <__adddf3>
 800b238:	4642      	mov	r2, r8
 800b23a:	464b      	mov	r3, r9
 800b23c:	f7f5 f94c 	bl	80004d8 <__aeabi_dmul>
 800b240:	a361      	add	r3, pc, #388	@ (adr r3, 800b3c8 <atan+0x2c8>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	4680      	mov	r8, r0
 800b248:	4689      	mov	r9, r1
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f5 f943 	bl	80004d8 <__aeabi_dmul>
 800b252:	a35f      	add	r3, pc, #380	@ (adr r3, 800b3d0 <atan+0x2d0>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f4 ff86 	bl	8000168 <__aeabi_dsub>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 f93a 	bl	80004d8 <__aeabi_dmul>
 800b264:	a35c      	add	r3, pc, #368	@ (adr r3, 800b3d8 <atan+0x2d8>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f4 ff7d 	bl	8000168 <__aeabi_dsub>
 800b26e:	4632      	mov	r2, r6
 800b270:	463b      	mov	r3, r7
 800b272:	f7f5 f931 	bl	80004d8 <__aeabi_dmul>
 800b276:	a35a      	add	r3, pc, #360	@ (adr r3, 800b3e0 <atan+0x2e0>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f4 ff74 	bl	8000168 <__aeabi_dsub>
 800b280:	4632      	mov	r2, r6
 800b282:	463b      	mov	r3, r7
 800b284:	f7f5 f928 	bl	80004d8 <__aeabi_dmul>
 800b288:	a357      	add	r3, pc, #348	@ (adr r3, 800b3e8 <atan+0x2e8>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 ff6b 	bl	8000168 <__aeabi_dsub>
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	f7f5 f91f 	bl	80004d8 <__aeabi_dmul>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f4 ff63 	bl	800016c <__adddf3>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	462b      	mov	r3, r5
 800b2aa:	f7f5 f915 	bl	80004d8 <__aeabi_dmul>
 800b2ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	d144      	bne.n	800b342 <atan+0x242>
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f7f4 ff54 	bl	8000168 <__aeabi_dsub>
 800b2c0:	e733      	b.n	800b12a <atan+0x2a>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4b4f      	ldr	r3, [pc, #316]	@ (800b404 <atan+0x304>)
 800b2c6:	f7f4 ff4f 	bl	8000168 <__aeabi_dsub>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	460f      	mov	r7, r1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4b4b      	ldr	r3, [pc, #300]	@ (800b404 <atan+0x304>)
 800b2d6:	f7f4 ff49 	bl	800016c <__adddf3>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	f7f5 fa23 	bl	800072c <__aeabi_ddiv>
 800b2e6:	f04f 0a01 	mov.w	sl, #1
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	e767      	b.n	800b1c0 <atan+0xc0>
 800b2f0:	4b46      	ldr	r3, [pc, #280]	@ (800b40c <atan+0x30c>)
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	d21a      	bcs.n	800b32c <atan+0x22c>
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4b45      	ldr	r3, [pc, #276]	@ (800b410 <atan+0x310>)
 800b2fa:	f7f4 ff35 	bl	8000168 <__aeabi_dsub>
 800b2fe:	2200      	movs	r2, #0
 800b300:	4606      	mov	r6, r0
 800b302:	460f      	mov	r7, r1
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	4b41      	ldr	r3, [pc, #260]	@ (800b410 <atan+0x310>)
 800b30a:	f7f5 f8e5 	bl	80004d8 <__aeabi_dmul>
 800b30e:	2200      	movs	r2, #0
 800b310:	4b3c      	ldr	r3, [pc, #240]	@ (800b404 <atan+0x304>)
 800b312:	f7f4 ff2b 	bl	800016c <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 fa05 	bl	800072c <__aeabi_ddiv>
 800b322:	f04f 0a02 	mov.w	sl, #2
 800b326:	4604      	mov	r4, r0
 800b328:	460d      	mov	r5, r1
 800b32a:	e749      	b.n	800b1c0 <atan+0xc0>
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	2000      	movs	r0, #0
 800b332:	4938      	ldr	r1, [pc, #224]	@ (800b414 <atan+0x314>)
 800b334:	f7f5 f9fa 	bl	800072c <__aeabi_ddiv>
 800b338:	f04f 0a03 	mov.w	sl, #3
 800b33c:	4604      	mov	r4, r0
 800b33e:	460d      	mov	r5, r1
 800b340:	e73e      	b.n	800b1c0 <atan+0xc0>
 800b342:	4b35      	ldr	r3, [pc, #212]	@ (800b418 <atan+0x318>)
 800b344:	4e35      	ldr	r6, [pc, #212]	@ (800b41c <atan+0x31c>)
 800b346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34e:	f7f4 ff0b 	bl	8000168 <__aeabi_dsub>
 800b352:	4622      	mov	r2, r4
 800b354:	462b      	mov	r3, r5
 800b356:	f7f4 ff07 	bl	8000168 <__aeabi_dsub>
 800b35a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b366:	f7f4 feff 	bl	8000168 <__aeabi_dsub>
 800b36a:	f1bb 0f00 	cmp.w	fp, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	460d      	mov	r5, r1
 800b372:	f6bf aee4 	bge.w	800b13e <atan+0x3e>
 800b376:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b37a:	461d      	mov	r5, r3
 800b37c:	e6df      	b.n	800b13e <atan+0x3e>
 800b37e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b3f0 <atan+0x2f0>)
 800b380:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b384:	e6db      	b.n	800b13e <atan+0x3e>
 800b386:	bf00      	nop
 800b388:	54442d18 	.word	0x54442d18
 800b38c:	3ff921fb 	.word	0x3ff921fb
 800b390:	8800759c 	.word	0x8800759c
 800b394:	7e37e43c 	.word	0x7e37e43c
 800b398:	e322da11 	.word	0xe322da11
 800b39c:	3f90ad3a 	.word	0x3f90ad3a
 800b3a0:	24760deb 	.word	0x24760deb
 800b3a4:	3fa97b4b 	.word	0x3fa97b4b
 800b3a8:	a0d03d51 	.word	0xa0d03d51
 800b3ac:	3fb10d66 	.word	0x3fb10d66
 800b3b0:	c54c206e 	.word	0xc54c206e
 800b3b4:	3fb745cd 	.word	0x3fb745cd
 800b3b8:	920083ff 	.word	0x920083ff
 800b3bc:	3fc24924 	.word	0x3fc24924
 800b3c0:	5555550d 	.word	0x5555550d
 800b3c4:	3fd55555 	.word	0x3fd55555
 800b3c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b3cc:	bfa2b444 	.word	0xbfa2b444
 800b3d0:	52defd9a 	.word	0x52defd9a
 800b3d4:	3fadde2d 	.word	0x3fadde2d
 800b3d8:	af749a6d 	.word	0xaf749a6d
 800b3dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b3e0:	fe231671 	.word	0xfe231671
 800b3e4:	3fbc71c6 	.word	0x3fbc71c6
 800b3e8:	9998ebc4 	.word	0x9998ebc4
 800b3ec:	3fc99999 	.word	0x3fc99999
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	bff921fb 	.word	0xbff921fb
 800b3f8:	440fffff 	.word	0x440fffff
 800b3fc:	7ff00000 	.word	0x7ff00000
 800b400:	3fdbffff 	.word	0x3fdbffff
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3ff2ffff 	.word	0x3ff2ffff
 800b40c:	40038000 	.word	0x40038000
 800b410:	3ff80000 	.word	0x3ff80000
 800b414:	bff00000 	.word	0xbff00000
 800b418:	0800d730 	.word	0x0800d730
 800b41c:	0800d750 	.word	0x0800d750

0800b420 <fabs>:
 800b420:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b424:	4619      	mov	r1, r3
 800b426:	4770      	bx	lr

0800b428 <__ieee754_atan2f>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b42e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b432:	4603      	mov	r3, r0
 800b434:	d805      	bhi.n	800b442 <__ieee754_atan2f+0x1a>
 800b436:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b43a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b43e:	4607      	mov	r7, r0
 800b440:	d904      	bls.n	800b44c <__ieee754_atan2f+0x24>
 800b442:	4618      	mov	r0, r3
 800b444:	f7f5 fb96 	bl	8000b74 <__addsf3>
 800b448:	4603      	mov	r3, r0
 800b44a:	e010      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b44c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800b450:	d103      	bne.n	800b45a <__ieee754_atan2f+0x32>
 800b452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b456:	f000 b86f 	b.w	800b538 <atanf>
 800b45a:	178c      	asrs	r4, r1, #30
 800b45c:	f004 0402 	and.w	r4, r4, #2
 800b460:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b464:	b92a      	cbnz	r2, 800b472 <__ieee754_atan2f+0x4a>
 800b466:	2c02      	cmp	r4, #2
 800b468:	d04b      	beq.n	800b502 <__ieee754_atan2f+0xda>
 800b46a:	2c03      	cmp	r4, #3
 800b46c:	d04b      	beq.n	800b506 <__ieee754_atan2f+0xde>
 800b46e:	4618      	mov	r0, r3
 800b470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b472:	b91e      	cbnz	r6, 800b47c <__ieee754_atan2f+0x54>
 800b474:	2f00      	cmp	r7, #0
 800b476:	db4c      	blt.n	800b512 <__ieee754_atan2f+0xea>
 800b478:	4b27      	ldr	r3, [pc, #156]	@ (800b518 <__ieee754_atan2f+0xf0>)
 800b47a:	e7f8      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b47c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b480:	d10e      	bne.n	800b4a0 <__ieee754_atan2f+0x78>
 800b482:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b486:	f104 34ff 	add.w	r4, r4, #4294967295
 800b48a:	d105      	bne.n	800b498 <__ieee754_atan2f+0x70>
 800b48c:	2c02      	cmp	r4, #2
 800b48e:	d83c      	bhi.n	800b50a <__ieee754_atan2f+0xe2>
 800b490:	4b22      	ldr	r3, [pc, #136]	@ (800b51c <__ieee754_atan2f+0xf4>)
 800b492:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b496:	e7ea      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b498:	2c02      	cmp	r4, #2
 800b49a:	d838      	bhi.n	800b50e <__ieee754_atan2f+0xe6>
 800b49c:	4b20      	ldr	r3, [pc, #128]	@ (800b520 <__ieee754_atan2f+0xf8>)
 800b49e:	e7f8      	b.n	800b492 <__ieee754_atan2f+0x6a>
 800b4a0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b4a4:	d0e6      	beq.n	800b474 <__ieee754_atan2f+0x4c>
 800b4a6:	1b92      	subs	r2, r2, r6
 800b4a8:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800b4ac:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b4b0:	da17      	bge.n	800b4e2 <__ieee754_atan2f+0xba>
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	da01      	bge.n	800b4ba <__ieee754_atan2f+0x92>
 800b4b6:	303c      	adds	r0, #60	@ 0x3c
 800b4b8:	db15      	blt.n	800b4e6 <__ieee754_atan2f+0xbe>
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f5 fd16 	bl	8000eec <__aeabi_fdiv>
 800b4c0:	f000 f946 	bl	800b750 <fabsf>
 800b4c4:	f000 f838 	bl	800b538 <atanf>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2c01      	cmp	r4, #1
 800b4cc:	d00d      	beq.n	800b4ea <__ieee754_atan2f+0xc2>
 800b4ce:	2c02      	cmp	r4, #2
 800b4d0:	d00e      	beq.n	800b4f0 <__ieee754_atan2f+0xc8>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	d0cb      	beq.n	800b46e <__ieee754_atan2f+0x46>
 800b4d6:	4913      	ldr	r1, [pc, #76]	@ (800b524 <__ieee754_atan2f+0xfc>)
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7f5 fb4b 	bl	8000b74 <__addsf3>
 800b4de:	4912      	ldr	r1, [pc, #72]	@ (800b528 <__ieee754_atan2f+0x100>)
 800b4e0:	e00c      	b.n	800b4fc <__ieee754_atan2f+0xd4>
 800b4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b518 <__ieee754_atan2f+0xf0>)
 800b4e4:	e7f1      	b.n	800b4ca <__ieee754_atan2f+0xa2>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e7ef      	b.n	800b4ca <__ieee754_atan2f+0xa2>
 800b4ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b4ee:	e7be      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b4f0:	490c      	ldr	r1, [pc, #48]	@ (800b524 <__ieee754_atan2f+0xfc>)
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7f5 fb3e 	bl	8000b74 <__addsf3>
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	480b      	ldr	r0, [pc, #44]	@ (800b528 <__ieee754_atan2f+0x100>)
 800b4fc:	f7f5 fb38 	bl	8000b70 <__aeabi_fsub>
 800b500:	e7a2      	b.n	800b448 <__ieee754_atan2f+0x20>
 800b502:	4b09      	ldr	r3, [pc, #36]	@ (800b528 <__ieee754_atan2f+0x100>)
 800b504:	e7b3      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b506:	4b09      	ldr	r3, [pc, #36]	@ (800b52c <__ieee754_atan2f+0x104>)
 800b508:	e7b1      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b50a:	4b09      	ldr	r3, [pc, #36]	@ (800b530 <__ieee754_atan2f+0x108>)
 800b50c:	e7af      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b50e:	2300      	movs	r3, #0
 800b510:	e7ad      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b512:	4b08      	ldr	r3, [pc, #32]	@ (800b534 <__ieee754_atan2f+0x10c>)
 800b514:	e7ab      	b.n	800b46e <__ieee754_atan2f+0x46>
 800b516:	bf00      	nop
 800b518:	3fc90fdb 	.word	0x3fc90fdb
 800b51c:	0800d77c 	.word	0x0800d77c
 800b520:	0800d770 	.word	0x0800d770
 800b524:	33bbbd2e 	.word	0x33bbbd2e
 800b528:	40490fdb 	.word	0x40490fdb
 800b52c:	c0490fdb 	.word	0xc0490fdb
 800b530:	3f490fdb 	.word	0x3f490fdb
 800b534:	bfc90fdb 	.word	0xbfc90fdb

0800b538 <atanf>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b540:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800b544:	4604      	mov	r4, r0
 800b546:	4680      	mov	r8, r0
 800b548:	d30e      	bcc.n	800b568 <atanf+0x30>
 800b54a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b54e:	d904      	bls.n	800b55a <atanf+0x22>
 800b550:	4601      	mov	r1, r0
 800b552:	f7f5 fb0f 	bl	8000b74 <__addsf3>
 800b556:	4604      	mov	r4, r0
 800b558:	e003      	b.n	800b562 <atanf+0x2a>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	f340 80ce 	ble.w	800b6fc <atanf+0x1c4>
 800b560:	4c67      	ldr	r4, [pc, #412]	@ (800b700 <atanf+0x1c8>)
 800b562:	4620      	mov	r0, r4
 800b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b568:	4b66      	ldr	r3, [pc, #408]	@ (800b704 <atanf+0x1cc>)
 800b56a:	429d      	cmp	r5, r3
 800b56c:	d80e      	bhi.n	800b58c <atanf+0x54>
 800b56e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800b572:	d208      	bcs.n	800b586 <atanf+0x4e>
 800b574:	4964      	ldr	r1, [pc, #400]	@ (800b708 <atanf+0x1d0>)
 800b576:	f7f5 fafd 	bl	8000b74 <__addsf3>
 800b57a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b57e:	f7f5 fdbd 	bl	80010fc <__aeabi_fcmpgt>
 800b582:	2800      	cmp	r0, #0
 800b584:	d1ed      	bne.n	800b562 <atanf+0x2a>
 800b586:	f04f 36ff 	mov.w	r6, #4294967295
 800b58a:	e01c      	b.n	800b5c6 <atanf+0x8e>
 800b58c:	f000 f8e0 	bl	800b750 <fabsf>
 800b590:	4b5e      	ldr	r3, [pc, #376]	@ (800b70c <atanf+0x1d4>)
 800b592:	4604      	mov	r4, r0
 800b594:	429d      	cmp	r5, r3
 800b596:	d87c      	bhi.n	800b692 <atanf+0x15a>
 800b598:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b59c:	429d      	cmp	r5, r3
 800b59e:	d867      	bhi.n	800b670 <atanf+0x138>
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	f7f5 fae7 	bl	8000b74 <__addsf3>
 800b5a6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b5aa:	f7f5 fae1 	bl	8000b70 <__aeabi_fsub>
 800b5ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f7f5 fadd 	bl	8000b74 <__addsf3>
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f7f5 fc95 	bl	8000eec <__aeabi_fdiv>
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7f5 fbdb 	bl	8000d84 <__aeabi_fmul>
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	f7f5 fbd7 	bl	8000d84 <__aeabi_fmul>
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	494d      	ldr	r1, [pc, #308]	@ (800b710 <atanf+0x1d8>)
 800b5da:	f7f5 fbd3 	bl	8000d84 <__aeabi_fmul>
 800b5de:	494d      	ldr	r1, [pc, #308]	@ (800b714 <atanf+0x1dc>)
 800b5e0:	f7f5 fac8 	bl	8000b74 <__addsf3>
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7f5 fbcd 	bl	8000d84 <__aeabi_fmul>
 800b5ea:	494b      	ldr	r1, [pc, #300]	@ (800b718 <atanf+0x1e0>)
 800b5ec:	f7f5 fac2 	bl	8000b74 <__addsf3>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	f7f5 fbc7 	bl	8000d84 <__aeabi_fmul>
 800b5f6:	4949      	ldr	r1, [pc, #292]	@ (800b71c <atanf+0x1e4>)
 800b5f8:	f7f5 fabc 	bl	8000b74 <__addsf3>
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	f7f5 fbc1 	bl	8000d84 <__aeabi_fmul>
 800b602:	4947      	ldr	r1, [pc, #284]	@ (800b720 <atanf+0x1e8>)
 800b604:	f7f5 fab6 	bl	8000b74 <__addsf3>
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 fbbb 	bl	8000d84 <__aeabi_fmul>
 800b60e:	4945      	ldr	r1, [pc, #276]	@ (800b724 <atanf+0x1ec>)
 800b610:	f7f5 fab0 	bl	8000b74 <__addsf3>
 800b614:	4639      	mov	r1, r7
 800b616:	f7f5 fbb5 	bl	8000d84 <__aeabi_fmul>
 800b61a:	4943      	ldr	r1, [pc, #268]	@ (800b728 <atanf+0x1f0>)
 800b61c:	4607      	mov	r7, r0
 800b61e:	4628      	mov	r0, r5
 800b620:	f7f5 fbb0 	bl	8000d84 <__aeabi_fmul>
 800b624:	4941      	ldr	r1, [pc, #260]	@ (800b72c <atanf+0x1f4>)
 800b626:	f7f5 faa3 	bl	8000b70 <__aeabi_fsub>
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7f5 fbaa 	bl	8000d84 <__aeabi_fmul>
 800b630:	493f      	ldr	r1, [pc, #252]	@ (800b730 <atanf+0x1f8>)
 800b632:	f7f5 fa9d 	bl	8000b70 <__aeabi_fsub>
 800b636:	4629      	mov	r1, r5
 800b638:	f7f5 fba4 	bl	8000d84 <__aeabi_fmul>
 800b63c:	493d      	ldr	r1, [pc, #244]	@ (800b734 <atanf+0x1fc>)
 800b63e:	f7f5 fa97 	bl	8000b70 <__aeabi_fsub>
 800b642:	4629      	mov	r1, r5
 800b644:	f7f5 fb9e 	bl	8000d84 <__aeabi_fmul>
 800b648:	493b      	ldr	r1, [pc, #236]	@ (800b738 <atanf+0x200>)
 800b64a:	f7f5 fa91 	bl	8000b70 <__aeabi_fsub>
 800b64e:	4629      	mov	r1, r5
 800b650:	f7f5 fb98 	bl	8000d84 <__aeabi_fmul>
 800b654:	4601      	mov	r1, r0
 800b656:	4638      	mov	r0, r7
 800b658:	f7f5 fa8c 	bl	8000b74 <__addsf3>
 800b65c:	4621      	mov	r1, r4
 800b65e:	f7f5 fb91 	bl	8000d84 <__aeabi_fmul>
 800b662:	1c73      	adds	r3, r6, #1
 800b664:	4601      	mov	r1, r0
 800b666:	d133      	bne.n	800b6d0 <atanf+0x198>
 800b668:	4620      	mov	r0, r4
 800b66a:	f7f5 fa81 	bl	8000b70 <__aeabi_fsub>
 800b66e:	e772      	b.n	800b556 <atanf+0x1e>
 800b670:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b674:	f7f5 fa7c 	bl	8000b70 <__aeabi_fsub>
 800b678:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b67c:	4605      	mov	r5, r0
 800b67e:	4620      	mov	r0, r4
 800b680:	f7f5 fa78 	bl	8000b74 <__addsf3>
 800b684:	4601      	mov	r1, r0
 800b686:	4628      	mov	r0, r5
 800b688:	f7f5 fc30 	bl	8000eec <__aeabi_fdiv>
 800b68c:	2601      	movs	r6, #1
 800b68e:	4604      	mov	r4, r0
 800b690:	e799      	b.n	800b5c6 <atanf+0x8e>
 800b692:	4b2a      	ldr	r3, [pc, #168]	@ (800b73c <atanf+0x204>)
 800b694:	429d      	cmp	r5, r3
 800b696:	d814      	bhi.n	800b6c2 <atanf+0x18a>
 800b698:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b69c:	f7f5 fa68 	bl	8000b70 <__aeabi_fsub>
 800b6a0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f7f5 fb6c 	bl	8000d84 <__aeabi_fmul>
 800b6ac:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b6b0:	f7f5 fa60 	bl	8000b74 <__addsf3>
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f7f5 fc18 	bl	8000eec <__aeabi_fdiv>
 800b6bc:	2602      	movs	r6, #2
 800b6be:	4604      	mov	r4, r0
 800b6c0:	e781      	b.n	800b5c6 <atanf+0x8e>
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	481e      	ldr	r0, [pc, #120]	@ (800b740 <atanf+0x208>)
 800b6c6:	f7f5 fc11 	bl	8000eec <__aeabi_fdiv>
 800b6ca:	2603      	movs	r6, #3
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	e77a      	b.n	800b5c6 <atanf+0x8e>
 800b6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b744 <atanf+0x20c>)
 800b6d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b6d6:	f7f5 fa4b 	bl	8000b70 <__aeabi_fsub>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	f7f5 fa48 	bl	8000b70 <__aeabi_fsub>
 800b6e0:	4b19      	ldr	r3, [pc, #100]	@ (800b748 <atanf+0x210>)
 800b6e2:	4601      	mov	r1, r0
 800b6e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b6e8:	f7f5 fa42 	bl	8000b70 <__aeabi_fsub>
 800b6ec:	f1b8 0f00 	cmp.w	r8, #0
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	f6bf af36 	bge.w	800b562 <atanf+0x2a>
 800b6f6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b6fa:	e732      	b.n	800b562 <atanf+0x2a>
 800b6fc:	4c13      	ldr	r4, [pc, #76]	@ (800b74c <atanf+0x214>)
 800b6fe:	e730      	b.n	800b562 <atanf+0x2a>
 800b700:	3fc90fdb 	.word	0x3fc90fdb
 800b704:	3edfffff 	.word	0x3edfffff
 800b708:	7149f2ca 	.word	0x7149f2ca
 800b70c:	3f97ffff 	.word	0x3f97ffff
 800b710:	3c8569d7 	.word	0x3c8569d7
 800b714:	3d4bda59 	.word	0x3d4bda59
 800b718:	3d886b35 	.word	0x3d886b35
 800b71c:	3dba2e6e 	.word	0x3dba2e6e
 800b720:	3e124925 	.word	0x3e124925
 800b724:	3eaaaaab 	.word	0x3eaaaaab
 800b728:	bd15a221 	.word	0xbd15a221
 800b72c:	3d6ef16b 	.word	0x3d6ef16b
 800b730:	3d9d8795 	.word	0x3d9d8795
 800b734:	3de38e38 	.word	0x3de38e38
 800b738:	3e4ccccd 	.word	0x3e4ccccd
 800b73c:	401bffff 	.word	0x401bffff
 800b740:	bf800000 	.word	0xbf800000
 800b744:	0800d788 	.word	0x0800d788
 800b748:	0800d798 	.word	0x0800d798
 800b74c:	bfc90fdb 	.word	0xbfc90fdb

0800b750 <fabsf>:
 800b750:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b754:	4770      	bx	lr
	...

0800b758 <__kernel_rem_pio2>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b760:	9308      	str	r3, [sp, #32]
 800b762:	9104      	str	r1, [sp, #16]
 800b764:	4bba      	ldr	r3, [pc, #744]	@ (800ba50 <__kernel_rem_pio2+0x2f8>)
 800b766:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800b768:	f112 0f14 	cmn.w	r2, #20
 800b76c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b770:	bfa8      	it	ge
 800b772:	1ed4      	subge	r4, r2, #3
 800b774:	9302      	str	r3, [sp, #8]
 800b776:	9b08      	ldr	r3, [sp, #32]
 800b778:	bfb8      	it	lt
 800b77a:	2400      	movlt	r4, #0
 800b77c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b780:	9306      	str	r3, [sp, #24]
 800b782:	bfa4      	itt	ge
 800b784:	2318      	movge	r3, #24
 800b786:	fb94 f4f3 	sdivge	r4, r4, r3
 800b78a:	f06f 0317 	mvn.w	r3, #23
 800b78e:	fb04 3303 	mla	r3, r4, r3, r3
 800b792:	eb03 0a02 	add.w	sl, r3, r2
 800b796:	9a06      	ldr	r2, [sp, #24]
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	1aa7      	subs	r7, r4, r2
 800b79c:	eb03 0802 	add.w	r8, r3, r2
 800b7a0:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800b7a2:	2500      	movs	r5, #0
 800b7a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800b7ae:	ae20      	add	r6, sp, #128	@ 0x80
 800b7b0:	4545      	cmp	r5, r8
 800b7b2:	dd13      	ble.n	800b7dc <__kernel_rem_pio2+0x84>
 800b7b4:	2700      	movs	r7, #0
 800b7b6:	9a08      	ldr	r2, [sp, #32]
 800b7b8:	ab20      	add	r3, sp, #128	@ 0x80
 800b7ba:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b7be:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	429f      	cmp	r7, r3
 800b7c6:	dc33      	bgt.n	800b830 <__kernel_rem_pio2+0xd8>
 800b7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f1a3 0908 	sub.w	r9, r3, #8
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	46a8      	mov	r8, r5
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	e9cd 2300 	strd	r2, r3, [sp]
 800b7da:	e01f      	b.n	800b81c <__kernel_rem_pio2+0xc4>
 800b7dc:	42ef      	cmn	r7, r5
 800b7de:	d40b      	bmi.n	800b7f8 <__kernel_rem_pio2+0xa0>
 800b7e0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b7e4:	e9cd 2300 	strd	r2, r3, [sp]
 800b7e8:	f7f4 fe0c 	bl	8000404 <__aeabi_i2d>
 800b7ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b7f4:	3501      	adds	r5, #1
 800b7f6:	e7db      	b.n	800b7b0 <__kernel_rem_pio2+0x58>
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	e7f8      	b.n	800b7f0 <__kernel_rem_pio2+0x98>
 800b7fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800b802:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b806:	f7f4 fe67 	bl	80004d8 <__aeabi_dmul>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b812:	f7f4 fcab 	bl	800016c <__adddf3>
 800b816:	e9cd 0100 	strd	r0, r1, [sp]
 800b81a:	3601      	adds	r6, #1
 800b81c:	9b06      	ldr	r3, [sp, #24]
 800b81e:	429e      	cmp	r6, r3
 800b820:	dded      	ble.n	800b7fe <__kernel_rem_pio2+0xa6>
 800b822:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b826:	3701      	adds	r7, #1
 800b828:	e8eb 2302 	strd	r2, r3, [fp], #8
 800b82c:	3508      	adds	r5, #8
 800b82e:	e7c8      	b.n	800b7c2 <__kernel_rem_pio2+0x6a>
 800b830:	9b02      	ldr	r3, [sp, #8]
 800b832:	aa0c      	add	r2, sp, #48	@ 0x30
 800b834:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b83a:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800b83c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b840:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b844:	930a      	str	r3, [sp, #40]	@ 0x28
 800b846:	ab98      	add	r3, sp, #608	@ 0x260
 800b848:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b84c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800b850:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b852:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b856:	ae0c      	add	r6, sp, #48	@ 0x30
 800b858:	4699      	mov	r9, r3
 800b85a:	46b0      	mov	r8, r6
 800b85c:	465f      	mov	r7, fp
 800b85e:	9307      	str	r3, [sp, #28]
 800b860:	2f00      	cmp	r7, #0
 800b862:	dc71      	bgt.n	800b948 <__kernel_rem_pio2+0x1f0>
 800b864:	4652      	mov	r2, sl
 800b866:	4620      	mov	r0, r4
 800b868:	4629      	mov	r1, r5
 800b86a:	f000 fa95 	bl	800bd98 <scalbn>
 800b86e:	2200      	movs	r2, #0
 800b870:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	f7f4 fe2e 	bl	80004d8 <__aeabi_dmul>
 800b87c:	f000 fb00 	bl	800be80 <floor>
 800b880:	2200      	movs	r2, #0
 800b882:	4b74      	ldr	r3, [pc, #464]	@ (800ba54 <__kernel_rem_pio2+0x2fc>)
 800b884:	f7f4 fe28 	bl	80004d8 <__aeabi_dmul>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 fc6a 	bl	8000168 <__aeabi_dsub>
 800b894:	460d      	mov	r5, r1
 800b896:	4604      	mov	r4, r0
 800b898:	f7f5 f8ce 	bl	8000a38 <__aeabi_d2iz>
 800b89c:	9005      	str	r0, [sp, #20]
 800b89e:	f7f4 fdb1 	bl	8000404 <__aeabi_i2d>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7f4 fc5d 	bl	8000168 <__aeabi_dsub>
 800b8ae:	f1ba 0f00 	cmp.w	sl, #0
 800b8b2:	4680      	mov	r8, r0
 800b8b4:	4689      	mov	r9, r1
 800b8b6:	dd6d      	ble.n	800b994 <__kernel_rem_pio2+0x23c>
 800b8b8:	f10b 31ff 	add.w	r1, fp, #4294967295
 800b8bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800b8be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8c2:	9c05      	ldr	r4, [sp, #20]
 800b8c4:	f1ca 0018 	rsb	r0, sl, #24
 800b8c8:	fa43 f200 	asr.w	r2, r3, r0
 800b8cc:	4414      	add	r4, r2
 800b8ce:	4082      	lsls	r2, r0
 800b8d0:	1a9b      	subs	r3, r3, r2
 800b8d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800b8d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b8d8:	f1ca 0217 	rsb	r2, sl, #23
 800b8dc:	9405      	str	r4, [sp, #20]
 800b8de:	4113      	asrs	r3, r2
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	9b00      	ldr	r3, [sp, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	dd64      	ble.n	800b9b2 <__kernel_rem_pio2+0x25a>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	9b05      	ldr	r3, [sp, #20]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	9305      	str	r3, [sp, #20]
 800b8f6:	4593      	cmp	fp, r2
 800b8f8:	f300 809d 	bgt.w	800ba36 <__kernel_rem_pio2+0x2de>
 800b8fc:	f1ba 0f00 	cmp.w	sl, #0
 800b900:	dd07      	ble.n	800b912 <__kernel_rem_pio2+0x1ba>
 800b902:	f1ba 0f01 	cmp.w	sl, #1
 800b906:	f000 80b3 	beq.w	800ba70 <__kernel_rem_pio2+0x318>
 800b90a:	f1ba 0f02 	cmp.w	sl, #2
 800b90e:	f000 80ba 	beq.w	800ba86 <__kernel_rem_pio2+0x32e>
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	2b02      	cmp	r3, #2
 800b916:	d14c      	bne.n	800b9b2 <__kernel_rem_pio2+0x25a>
 800b918:	4642      	mov	r2, r8
 800b91a:	464b      	mov	r3, r9
 800b91c:	2000      	movs	r0, #0
 800b91e:	494e      	ldr	r1, [pc, #312]	@ (800ba58 <__kernel_rem_pio2+0x300>)
 800b920:	f7f4 fc22 	bl	8000168 <__aeabi_dsub>
 800b924:	4680      	mov	r8, r0
 800b926:	4689      	mov	r9, r1
 800b928:	2c00      	cmp	r4, #0
 800b92a:	d042      	beq.n	800b9b2 <__kernel_rem_pio2+0x25a>
 800b92c:	4652      	mov	r2, sl
 800b92e:	2000      	movs	r0, #0
 800b930:	4949      	ldr	r1, [pc, #292]	@ (800ba58 <__kernel_rem_pio2+0x300>)
 800b932:	f000 fa31 	bl	800bd98 <scalbn>
 800b936:	4602      	mov	r2, r0
 800b938:	460b      	mov	r3, r1
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	f7f4 fc13 	bl	8000168 <__aeabi_dsub>
 800b942:	4680      	mov	r8, r0
 800b944:	4689      	mov	r9, r1
 800b946:	e034      	b.n	800b9b2 <__kernel_rem_pio2+0x25a>
 800b948:	2200      	movs	r2, #0
 800b94a:	4b44      	ldr	r3, [pc, #272]	@ (800ba5c <__kernel_rem_pio2+0x304>)
 800b94c:	4620      	mov	r0, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fdc2 	bl	80004d8 <__aeabi_dmul>
 800b954:	f7f5 f870 	bl	8000a38 <__aeabi_d2iz>
 800b958:	f7f4 fd54 	bl	8000404 <__aeabi_i2d>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	e9cd 2300 	strd	r2, r3, [sp]
 800b964:	2200      	movs	r2, #0
 800b966:	4b3e      	ldr	r3, [pc, #248]	@ (800ba60 <__kernel_rem_pio2+0x308>)
 800b968:	f7f4 fdb6 	bl	80004d8 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 fbf8 	bl	8000168 <__aeabi_dsub>
 800b978:	f7f5 f85e 	bl	8000a38 <__aeabi_d2iz>
 800b97c:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800b980:	f848 0b04 	str.w	r0, [r8], #4
 800b984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b988:	f7f4 fbf0 	bl	800016c <__adddf3>
 800b98c:	3f01      	subs	r7, #1
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	e765      	b.n	800b860 <__kernel_rem_pio2+0x108>
 800b994:	d106      	bne.n	800b9a4 <__kernel_rem_pio2+0x24c>
 800b996:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b99a:	aa0c      	add	r2, sp, #48	@ 0x30
 800b99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a0:	15db      	asrs	r3, r3, #23
 800b9a2:	e79d      	b.n	800b8e0 <__kernel_rem_pio2+0x188>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4b2f      	ldr	r3, [pc, #188]	@ (800ba64 <__kernel_rem_pio2+0x30c>)
 800b9a8:	f7f5 f81c 	bl	80009e4 <__aeabi_dcmpge>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d13f      	bne.n	800ba30 <__kernel_rem_pio2+0x2d8>
 800b9b0:	9000      	str	r0, [sp, #0]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	f7f4 fff5 	bl	80009a8 <__aeabi_dcmpeq>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f000 80b0 	beq.w	800bb24 <__kernel_rem_pio2+0x3cc>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b9ca:	9902      	ldr	r1, [sp, #8]
 800b9cc:	428b      	cmp	r3, r1
 800b9ce:	da62      	bge.n	800ba96 <__kernel_rem_pio2+0x33e>
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	d077      	beq.n	800bac4 <__kernel_rem_pio2+0x36c>
 800b9d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800b9da:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b9de:	f1aa 0a18 	sub.w	sl, sl, #24
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0f6      	beq.n	800b9d4 <__kernel_rem_pio2+0x27c>
 800b9e6:	4652      	mov	r2, sl
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	491b      	ldr	r1, [pc, #108]	@ (800ba58 <__kernel_rem_pio2+0x300>)
 800b9ec:	f000 f9d4 	bl	800bd98 <scalbn>
 800b9f0:	465d      	mov	r5, fp
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	f04f 0900 	mov.w	r9, #0
 800b9fa:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b9fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba5c <__kernel_rem_pio2+0x304>
 800ba00:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800ba04:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800ba08:	2d00      	cmp	r5, #0
 800ba0a:	f280 80c1 	bge.w	800bb90 <__kernel_rem_pio2+0x438>
 800ba0e:	465d      	mov	r5, fp
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	f2c0 80f1 	blt.w	800bbf8 <__kernel_rem_pio2+0x4a0>
 800ba16:	4b14      	ldr	r3, [pc, #80]	@ (800ba68 <__kernel_rem_pio2+0x310>)
 800ba18:	f04f 0900 	mov.w	r9, #0
 800ba1c:	9306      	str	r3, [sp, #24]
 800ba1e:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ba20:	f04f 0a00 	mov.w	sl, #0
 800ba24:	2700      	movs	r7, #0
 800ba26:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800ba2a:	ebab 0605 	sub.w	r6, fp, r5
 800ba2e:	e0d7      	b.n	800bbe0 <__kernel_rem_pio2+0x488>
 800ba30:	2302      	movs	r3, #2
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	e758      	b.n	800b8e8 <__kernel_rem_pio2+0x190>
 800ba36:	f856 3b04 	ldr.w	r3, [r6], #4
 800ba3a:	b9bc      	cbnz	r4, 800ba6c <__kernel_rem_pio2+0x314>
 800ba3c:	b123      	cbz	r3, 800ba48 <__kernel_rem_pio2+0x2f0>
 800ba3e:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ba42:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba46:	2301      	movs	r3, #1
 800ba48:	461c      	mov	r4, r3
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	e753      	b.n	800b8f6 <__kernel_rem_pio2+0x19e>
 800ba4e:	bf00      	nop
 800ba50:	0800d7e8 	.word	0x0800d7e8
 800ba54:	40200000 	.word	0x40200000
 800ba58:	3ff00000 	.word	0x3ff00000
 800ba5c:	3e700000 	.word	0x3e700000
 800ba60:	41700000 	.word	0x41700000
 800ba64:	3fe00000 	.word	0x3fe00000
 800ba68:	0800d7a8 	.word	0x0800d7a8
 800ba6c:	1acb      	subs	r3, r1, r3
 800ba6e:	e7e8      	b.n	800ba42 <__kernel_rem_pio2+0x2ea>
 800ba70:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ba74:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ba7e:	a90c      	add	r1, sp, #48	@ 0x30
 800ba80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba84:	e745      	b.n	800b912 <__kernel_rem_pio2+0x1ba>
 800ba86:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ba8a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba94:	e7f3      	b.n	800ba7e <__kernel_rem_pio2+0x326>
 800ba96:	a90c      	add	r1, sp, #48	@ 0x30
 800ba98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	430a      	orrs	r2, r1
 800baa0:	e793      	b.n	800b9ca <__kernel_rem_pio2+0x272>
 800baa2:	3401      	adds	r4, #1
 800baa4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800baa8:	2a00      	cmp	r2, #0
 800baaa:	d0fa      	beq.n	800baa2 <__kernel_rem_pio2+0x34a>
 800baac:	9b08      	ldr	r3, [sp, #32]
 800baae:	aa20      	add	r2, sp, #128	@ 0x80
 800bab0:	445b      	add	r3, fp
 800bab2:	f10b 0801 	add.w	r8, fp, #1
 800bab6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800baba:	445c      	add	r4, fp
 800babc:	4544      	cmp	r4, r8
 800babe:	da04      	bge.n	800baca <__kernel_rem_pio2+0x372>
 800bac0:	46a3      	mov	fp, r4
 800bac2:	e6c0      	b.n	800b846 <__kernel_rem_pio2+0xee>
 800bac4:	2401      	movs	r4, #1
 800bac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bac8:	e7ec      	b.n	800baa4 <__kernel_rem_pio2+0x34c>
 800baca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bacc:	46ab      	mov	fp, r5
 800bace:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bad2:	f7f4 fc97 	bl	8000404 <__aeabi_i2d>
 800bad6:	f04f 0900 	mov.w	r9, #0
 800bada:	2600      	movs	r6, #0
 800badc:	2700      	movs	r7, #0
 800bade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae0:	e9c5 0100 	strd	r0, r1, [r5]
 800bae4:	3b08      	subs	r3, #8
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	9b06      	ldr	r3, [sp, #24]
 800baea:	4599      	cmp	r9, r3
 800baec:	dd07      	ble.n	800bafe <__kernel_rem_pio2+0x3a6>
 800baee:	9b07      	ldr	r3, [sp, #28]
 800baf0:	f108 0801 	add.w	r8, r8, #1
 800baf4:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800baf8:	3508      	adds	r5, #8
 800bafa:	9307      	str	r3, [sp, #28]
 800bafc:	e7de      	b.n	800babc <__kernel_rem_pio2+0x364>
 800bafe:	9900      	ldr	r1, [sp, #0]
 800bb00:	f109 0901 	add.w	r9, r9, #1
 800bb04:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bb08:	9100      	str	r1, [sp, #0]
 800bb0a:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800bb0e:	f7f4 fce3 	bl	80004d8 <__aeabi_dmul>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fb27 	bl	800016c <__adddf3>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	e7e1      	b.n	800bae8 <__kernel_rem_pio2+0x390>
 800bb24:	f1ca 0200 	rsb	r2, sl, #0
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f000 f934 	bl	800bd98 <scalbn>
 800bb30:	2200      	movs	r2, #0
 800bb32:	4b97      	ldr	r3, [pc, #604]	@ (800bd90 <__kernel_rem_pio2+0x638>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	f7f4 ff54 	bl	80009e4 <__aeabi_dcmpge>
 800bb3c:	b300      	cbz	r0, 800bb80 <__kernel_rem_pio2+0x428>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4b94      	ldr	r3, [pc, #592]	@ (800bd94 <__kernel_rem_pio2+0x63c>)
 800bb42:	4620      	mov	r0, r4
 800bb44:	4629      	mov	r1, r5
 800bb46:	f7f4 fcc7 	bl	80004d8 <__aeabi_dmul>
 800bb4a:	f7f4 ff75 	bl	8000a38 <__aeabi_d2iz>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	f7f4 fc58 	bl	8000404 <__aeabi_i2d>
 800bb54:	2200      	movs	r2, #0
 800bb56:	4b8e      	ldr	r3, [pc, #568]	@ (800bd90 <__kernel_rem_pio2+0x638>)
 800bb58:	f7f4 fcbe 	bl	80004d8 <__aeabi_dmul>
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4602      	mov	r2, r0
 800bb60:	4629      	mov	r1, r5
 800bb62:	4620      	mov	r0, r4
 800bb64:	f7f4 fb00 	bl	8000168 <__aeabi_dsub>
 800bb68:	f7f4 ff66 	bl	8000a38 <__aeabi_d2iz>
 800bb6c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb6e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800bb72:	f10b 0b01 	add.w	fp, fp, #1
 800bb76:	f10a 0a18 	add.w	sl, sl, #24
 800bb7a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800bb7e:	e732      	b.n	800b9e6 <__kernel_rem_pio2+0x28e>
 800bb80:	4620      	mov	r0, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7f4 ff58 	bl	8000a38 <__aeabi_d2iz>
 800bb88:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb8a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800bb8e:	e72a      	b.n	800b9e6 <__kernel_rem_pio2+0x28e>
 800bb90:	ab0c      	add	r3, sp, #48	@ 0x30
 800bb92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb96:	f7f4 fc35 	bl	8000404 <__aeabi_i2d>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fc9b 	bl	80004d8 <__aeabi_dmul>
 800bba2:	464a      	mov	r2, r9
 800bba4:	e868 0102 	strd	r0, r1, [r8], #-8
 800bba8:	4653      	mov	r3, sl
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fc93 	bl	80004d8 <__aeabi_dmul>
 800bbb2:	3d01      	subs	r5, #1
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	460f      	mov	r7, r1
 800bbb8:	e726      	b.n	800ba08 <__kernel_rem_pio2+0x2b0>
 800bbba:	f8dd c018 	ldr.w	ip, [sp, #24]
 800bbbe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800bbc2:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800bbc6:	f8cd c018 	str.w	ip, [sp, #24]
 800bbca:	f7f4 fc85 	bl	80004d8 <__aeabi_dmul>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4648      	mov	r0, r9
 800bbd4:	4651      	mov	r1, sl
 800bbd6:	f7f4 fac9 	bl	800016c <__adddf3>
 800bbda:	4681      	mov	r9, r0
 800bbdc:	468a      	mov	sl, r1
 800bbde:	3701      	adds	r7, #1
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	429f      	cmp	r7, r3
 800bbe4:	dc01      	bgt.n	800bbea <__kernel_rem_pio2+0x492>
 800bbe6:	42b7      	cmp	r7, r6
 800bbe8:	dde7      	ble.n	800bbba <__kernel_rem_pio2+0x462>
 800bbea:	ab48      	add	r3, sp, #288	@ 0x120
 800bbec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bbf0:	e9c6 9a00 	strd	r9, sl, [r6]
 800bbf4:	3d01      	subs	r5, #1
 800bbf6:	e70b      	b.n	800ba10 <__kernel_rem_pio2+0x2b8>
 800bbf8:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	dc09      	bgt.n	800bc12 <__kernel_rem_pio2+0x4ba>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	dc2c      	bgt.n	800bc5c <__kernel_rem_pio2+0x504>
 800bc02:	d04e      	beq.n	800bca2 <__kernel_rem_pio2+0x54a>
 800bc04:	9b05      	ldr	r3, [sp, #20]
 800bc06:	f003 0007 	and.w	r0, r3, #7
 800bc0a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc12:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d1f5      	bne.n	800bc04 <__kernel_rem_pio2+0x4ac>
 800bc18:	ab48      	add	r3, sp, #288	@ 0x120
 800bc1a:	441c      	add	r4, r3
 800bc1c:	4625      	mov	r5, r4
 800bc1e:	46da      	mov	sl, fp
 800bc20:	f1ba 0f00 	cmp.w	sl, #0
 800bc24:	dc63      	bgt.n	800bcee <__kernel_rem_pio2+0x596>
 800bc26:	4625      	mov	r5, r4
 800bc28:	46da      	mov	sl, fp
 800bc2a:	f1ba 0f01 	cmp.w	sl, #1
 800bc2e:	dc7b      	bgt.n	800bd28 <__kernel_rem_pio2+0x5d0>
 800bc30:	2000      	movs	r0, #0
 800bc32:	2100      	movs	r1, #0
 800bc34:	f1bb 0f01 	cmp.w	fp, #1
 800bc38:	f300 8093 	bgt.w	800bd62 <__kernel_rem_pio2+0x60a>
 800bc3c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800bc40:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800bc44:	9b00      	ldr	r3, [sp, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f040 8092 	bne.w	800bd70 <__kernel_rem_pio2+0x618>
 800bc4c:	9b04      	ldr	r3, [sp, #16]
 800bc4e:	e9c3 5600 	strd	r5, r6, [r3]
 800bc52:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bc56:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bc5a:	e7d3      	b.n	800bc04 <__kernel_rem_pio2+0x4ac>
 800bc5c:	465d      	mov	r5, fp
 800bc5e:	2000      	movs	r0, #0
 800bc60:	2100      	movs	r1, #0
 800bc62:	ab48      	add	r3, sp, #288	@ 0x120
 800bc64:	441c      	add	r4, r3
 800bc66:	2d00      	cmp	r5, #0
 800bc68:	da32      	bge.n	800bcd0 <__kernel_rem_pio2+0x578>
 800bc6a:	9b00      	ldr	r3, [sp, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d035      	beq.n	800bcdc <__kernel_rem_pio2+0x584>
 800bc70:	4602      	mov	r2, r0
 800bc72:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc76:	9c04      	ldr	r4, [sp, #16]
 800bc78:	2501      	movs	r5, #1
 800bc7a:	e9c4 2300 	strd	r2, r3, [r4]
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800bc86:	f7f4 fa6f 	bl	8000168 <__aeabi_dsub>
 800bc8a:	ac48      	add	r4, sp, #288	@ 0x120
 800bc8c:	45ab      	cmp	fp, r5
 800bc8e:	da28      	bge.n	800bce2 <__kernel_rem_pio2+0x58a>
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	b113      	cbz	r3, 800bc9a <__kernel_rem_pio2+0x542>
 800bc94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc98:	4619      	mov	r1, r3
 800bc9a:	9b04      	ldr	r3, [sp, #16]
 800bc9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bca0:	e7b0      	b.n	800bc04 <__kernel_rem_pio2+0x4ac>
 800bca2:	2000      	movs	r0, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	ab48      	add	r3, sp, #288	@ 0x120
 800bca8:	441c      	add	r4, r3
 800bcaa:	f1bb 0f00 	cmp.w	fp, #0
 800bcae:	da08      	bge.n	800bcc2 <__kernel_rem_pio2+0x56a>
 800bcb0:	9b00      	ldr	r3, [sp, #0]
 800bcb2:	b113      	cbz	r3, 800bcba <__kernel_rem_pio2+0x562>
 800bcb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcb8:	4619      	mov	r1, r3
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	e9c3 0100 	strd	r0, r1, [r3]
 800bcc0:	e7a0      	b.n	800bc04 <__kernel_rem_pio2+0x4ac>
 800bcc2:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800bcc6:	f7f4 fa51 	bl	800016c <__adddf3>
 800bcca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcce:	e7ec      	b.n	800bcaa <__kernel_rem_pio2+0x552>
 800bcd0:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800bcd4:	f7f4 fa4a 	bl	800016c <__adddf3>
 800bcd8:	3d01      	subs	r5, #1
 800bcda:	e7c4      	b.n	800bc66 <__kernel_rem_pio2+0x50e>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	e7c9      	b.n	800bc76 <__kernel_rem_pio2+0x51e>
 800bce2:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800bce6:	f7f4 fa41 	bl	800016c <__adddf3>
 800bcea:	3501      	adds	r5, #1
 800bcec:	e7ce      	b.n	800bc8c <__kernel_rem_pio2+0x534>
 800bcee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcf2:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcfe:	f7f4 fa35 	bl	800016c <__adddf3>
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fa2b 	bl	8000168 <__aeabi_dsub>
 800bd12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd16:	f7f4 fa29 	bl	800016c <__adddf3>
 800bd1a:	e865 0102 	strd	r0, r1, [r5], #-8
 800bd1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd22:	e9c5 6700 	strd	r6, r7, [r5]
 800bd26:	e77b      	b.n	800bc20 <__kernel_rem_pio2+0x4c8>
 800bd28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd2c:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd38:	f7f4 fa18 	bl	800016c <__adddf3>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4606      	mov	r6, r0
 800bd42:	460f      	mov	r7, r1
 800bd44:	4640      	mov	r0, r8
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fa0e 	bl	8000168 <__aeabi_dsub>
 800bd4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd50:	f7f4 fa0c 	bl	800016c <__adddf3>
 800bd54:	e865 0102 	strd	r0, r1, [r5], #-8
 800bd58:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd5c:	e9c5 6700 	strd	r6, r7, [r5]
 800bd60:	e763      	b.n	800bc2a <__kernel_rem_pio2+0x4d2>
 800bd62:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800bd66:	f7f4 fa01 	bl	800016c <__adddf3>
 800bd6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd6e:	e761      	b.n	800bc34 <__kernel_rem_pio2+0x4dc>
 800bd70:	9b04      	ldr	r3, [sp, #16]
 800bd72:	9a04      	ldr	r2, [sp, #16]
 800bd74:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800bd78:	601d      	str	r5, [r3, #0]
 800bd7a:	605c      	str	r4, [r3, #4]
 800bd7c:	609f      	str	r7, [r3, #8]
 800bd7e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800bd82:	60d3      	str	r3, [r2, #12]
 800bd84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd88:	6110      	str	r0, [r2, #16]
 800bd8a:	6153      	str	r3, [r2, #20]
 800bd8c:	e73a      	b.n	800bc04 <__kernel_rem_pio2+0x4ac>
 800bd8e:	bf00      	nop
 800bd90:	41700000 	.word	0x41700000
 800bd94:	3e700000 	.word	0x3e700000

0800bd98 <scalbn>:
 800bd98:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bda2:	4683      	mov	fp, r0
 800bda4:	468c      	mov	ip, r1
 800bda6:	460b      	mov	r3, r1
 800bda8:	b982      	cbnz	r2, 800bdcc <scalbn+0x34>
 800bdaa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bdae:	4303      	orrs	r3, r0
 800bdb0:	d035      	beq.n	800be1e <scalbn+0x86>
 800bdb2:	4b2d      	ldr	r3, [pc, #180]	@ (800be68 <scalbn+0xd0>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f7f4 fb8f 	bl	80004d8 <__aeabi_dmul>
 800bdba:	4b2c      	ldr	r3, [pc, #176]	@ (800be6c <scalbn+0xd4>)
 800bdbc:	4683      	mov	fp, r0
 800bdbe:	429e      	cmp	r6, r3
 800bdc0:	468c      	mov	ip, r1
 800bdc2:	da0d      	bge.n	800bde0 <scalbn+0x48>
 800bdc4:	a324      	add	r3, pc, #144	@ (adr r3, 800be58 <scalbn+0xc0>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	e019      	b.n	800be00 <scalbn+0x68>
 800bdcc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bdd0:	42ba      	cmp	r2, r7
 800bdd2:	d109      	bne.n	800bde8 <scalbn+0x50>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	f7f4 f9c9 	bl	800016c <__adddf3>
 800bdda:	4683      	mov	fp, r0
 800bddc:	468c      	mov	ip, r1
 800bdde:	e01e      	b.n	800be1e <scalbn+0x86>
 800bde0:	460b      	mov	r3, r1
 800bde2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bde6:	3a36      	subs	r2, #54	@ 0x36
 800bde8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bdec:	428e      	cmp	r6, r1
 800bdee:	dd0a      	ble.n	800be06 <scalbn+0x6e>
 800bdf0:	a31b      	add	r3, pc, #108	@ (adr r3, 800be60 <scalbn+0xc8>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	4665      	mov	r5, ip
 800bdf8:	f363 051e 	bfi	r5, r3, #0, #31
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	481c      	ldr	r0, [pc, #112]	@ (800be70 <scalbn+0xd8>)
 800be00:	f7f4 fb6a 	bl	80004d8 <__aeabi_dmul>
 800be04:	e7e9      	b.n	800bdda <scalbn+0x42>
 800be06:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800be0a:	4432      	add	r2, r6
 800be0c:	428a      	cmp	r2, r1
 800be0e:	dcef      	bgt.n	800bdf0 <scalbn+0x58>
 800be10:	2a00      	cmp	r2, #0
 800be12:	dd08      	ble.n	800be26 <scalbn+0x8e>
 800be14:	f36f 531e 	bfc	r3, #20, #11
 800be18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be1c:	46ac      	mov	ip, r5
 800be1e:	4658      	mov	r0, fp
 800be20:	4661      	mov	r1, ip
 800be22:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800be26:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800be2a:	da09      	bge.n	800be40 <scalbn+0xa8>
 800be2c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800be30:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800be34:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800be38:	480e      	ldr	r0, [pc, #56]	@ (800be74 <scalbn+0xdc>)
 800be3a:	f041 011f 	orr.w	r1, r1, #31
 800be3e:	e7c1      	b.n	800bdc4 <scalbn+0x2c>
 800be40:	3236      	adds	r2, #54	@ 0x36
 800be42:	f36f 531e 	bfc	r3, #20, #11
 800be46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be4a:	4658      	mov	r0, fp
 800be4c:	4629      	mov	r1, r5
 800be4e:	2200      	movs	r2, #0
 800be50:	4b09      	ldr	r3, [pc, #36]	@ (800be78 <scalbn+0xe0>)
 800be52:	e7d5      	b.n	800be00 <scalbn+0x68>
 800be54:	f3af 8000 	nop.w
 800be58:	c2f8f359 	.word	0xc2f8f359
 800be5c:	01a56e1f 	.word	0x01a56e1f
 800be60:	8800759c 	.word	0x8800759c
 800be64:	7e37e43c 	.word	0x7e37e43c
 800be68:	43500000 	.word	0x43500000
 800be6c:	ffff3cb0 	.word	0xffff3cb0
 800be70:	8800759c 	.word	0x8800759c
 800be74:	c2f8f359 	.word	0xc2f8f359
 800be78:	3c900000 	.word	0x3c900000
 800be7c:	00000000 	.word	0x00000000

0800be80 <floor>:
 800be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800be88:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800be8c:	2e13      	cmp	r6, #19
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	460c      	mov	r4, r1
 800be94:	4605      	mov	r5, r0
 800be96:	4680      	mov	r8, r0
 800be98:	dc35      	bgt.n	800bf06 <floor+0x86>
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	da17      	bge.n	800bece <floor+0x4e>
 800be9e:	a334      	add	r3, pc, #208	@ (adr r3, 800bf70 <floor+0xf0>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f962 	bl	800016c <__adddf3>
 800bea8:	2200      	movs	r2, #0
 800beaa:	2300      	movs	r3, #0
 800beac:	f7f4 fda4 	bl	80009f8 <__aeabi_dcmpgt>
 800beb0:	b150      	cbz	r0, 800bec8 <floor+0x48>
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	da57      	bge.n	800bf66 <floor+0xe6>
 800beb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800beba:	432c      	orrs	r4, r5
 800bebc:	2500      	movs	r5, #0
 800bebe:	42ac      	cmp	r4, r5
 800bec0:	4c2d      	ldr	r4, [pc, #180]	@ (800bf78 <floor+0xf8>)
 800bec2:	bf08      	it	eq
 800bec4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800bec8:	4623      	mov	r3, r4
 800beca:	462a      	mov	r2, r5
 800becc:	e024      	b.n	800bf18 <floor+0x98>
 800bece:	4f2b      	ldr	r7, [pc, #172]	@ (800bf7c <floor+0xfc>)
 800bed0:	4137      	asrs	r7, r6
 800bed2:	ea01 0c07 	and.w	ip, r1, r7
 800bed6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800beda:	d01d      	beq.n	800bf18 <floor+0x98>
 800bedc:	a324      	add	r3, pc, #144	@ (adr r3, 800bf70 <floor+0xf0>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f943 	bl	800016c <__adddf3>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	f7f4 fd85 	bl	80009f8 <__aeabi_dcmpgt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0ea      	beq.n	800bec8 <floor+0x48>
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	bfbe      	ittt	lt
 800bef6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800befa:	4133      	asrlt	r3, r6
 800befc:	18e4      	addlt	r4, r4, r3
 800befe:	2500      	movs	r5, #0
 800bf00:	ea24 0407 	bic.w	r4, r4, r7
 800bf04:	e7e0      	b.n	800bec8 <floor+0x48>
 800bf06:	2e33      	cmp	r6, #51	@ 0x33
 800bf08:	dd0a      	ble.n	800bf20 <floor+0xa0>
 800bf0a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800bf0e:	d103      	bne.n	800bf18 <floor+0x98>
 800bf10:	f7f4 f92c 	bl	800016c <__adddf3>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4610      	mov	r0, r2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf20:	f04f 3cff 	mov.w	ip, #4294967295
 800bf24:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800bf28:	fa2c f707 	lsr.w	r7, ip, r7
 800bf2c:	4207      	tst	r7, r0
 800bf2e:	d0f3      	beq.n	800bf18 <floor+0x98>
 800bf30:	a30f      	add	r3, pc, #60	@ (adr r3, 800bf70 <floor+0xf0>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f919 	bl	800016c <__adddf3>
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f7f4 fd5b 	bl	80009f8 <__aeabi_dcmpgt>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d0c0      	beq.n	800bec8 <floor+0x48>
 800bf46:	2c00      	cmp	r4, #0
 800bf48:	da0a      	bge.n	800bf60 <floor+0xe0>
 800bf4a:	2e14      	cmp	r6, #20
 800bf4c:	d101      	bne.n	800bf52 <floor+0xd2>
 800bf4e:	3401      	adds	r4, #1
 800bf50:	e006      	b.n	800bf60 <floor+0xe0>
 800bf52:	2301      	movs	r3, #1
 800bf54:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800bf58:	40b3      	lsls	r3, r6
 800bf5a:	441d      	add	r5, r3
 800bf5c:	4545      	cmp	r5, r8
 800bf5e:	d3f6      	bcc.n	800bf4e <floor+0xce>
 800bf60:	ea25 0507 	bic.w	r5, r5, r7
 800bf64:	e7b0      	b.n	800bec8 <floor+0x48>
 800bf66:	2500      	movs	r5, #0
 800bf68:	462c      	mov	r4, r5
 800bf6a:	e7ad      	b.n	800bec8 <floor+0x48>
 800bf6c:	f3af 8000 	nop.w
 800bf70:	8800759c 	.word	0x8800759c
 800bf74:	7e37e43c 	.word	0x7e37e43c
 800bf78:	bff00000 	.word	0xbff00000
 800bf7c:	000fffff 	.word	0x000fffff

0800bf80 <_init>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_fini>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	bf00      	nop
 800bf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf92:	bc08      	pop	{r3}
 800bf94:	469e      	mov	lr, r3
 800bf96:	4770      	bx	lr
